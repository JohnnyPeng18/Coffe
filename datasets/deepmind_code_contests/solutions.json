{
    "prompt2groundtruth": {
        "You are an expert Python programmer, and here is your task:\nA rectangle with its opposite corners in (0, 0) and (w, h) and sides parallel to the axes is drawn on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\n\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for _ in range(int(input())):\n  w, h = map(int, input().split())\n  ans = 0\n  for i in range(4):\n    a = [int(x) for x in input().split()][1:]\n    ans = max(ans, (a[-1] - a[0]) * (h if i < 2 else w))\n  print(ans)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    w,h=input().split()\n    w,h=int(w),int(h)\n    w1x=[]\n    w1x = [int(item) for item in input().split()]\n    w1h=[int(item) for item in input().split()]\n    h1y=[int(item) for item in input().split()]\n    h1w=[int(item) for item in input().split()]\n    max_w1x=max(w1x[1:])-min(w1x[1:])\n    max_w1h=max(w1h[1:])-min(w1h[1:])\n    max_h1y=max(h1y[1:])-min(h1y[1:])\n    max_h1w=max(h1w[1:])-min(h1w[1:])\n    print(max(max_w1x*h,max_w1h*h,max_h1y*w,max_h1w*w))\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "# -*- coding: utf-8 -*-\n\"\"\"\nEducational Codeforces Round 119 - Problem B\n\"\"\"\n\ntest = int(input())\nfor i in range(test):\n    w,h = list(map(int,input().split()))\n    botList = list(map(int,input().split()))\n    botPoints = botList[0]\n    botList = botList[1:]\n    baseBot = max(botList)-min(botList)\n    \n    topList = list(map(int,input().split()))\n    topPoints = topList[0]\n    topList = topList[1:]\n    baseTop = max(topList) - min(topList)\n    \n    leftList = list(map(int,input().split()))\n    leftPoints = leftList[0]\n    leftList = leftList[1:]\n    baseLeft = max(leftList) - min(leftList)\n    \n    rightList = list(map(int,input().split()))\n    rightPoints = rightList[0]\n    rightList = rightList[1:]\n    baseRight = max(rightList) - min(rightList)\n    \n    print(max(baseBot*h, baseTop*h, baseLeft*w, baseRight*w))\n\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    w, h = [int(x) for x in input().split()]\n\n    s = []\n    min_max = []\n\n    for i in range(4):\n        s.append([int(x) for x in input().split()[1:]])\n        min_max.append( (min(s[-1]), max(s[-1])) )\n\n    max_1 = max(min_max[:2], key=lambda x: x[1] - x[0])\n    max_2 = max(min_max[2:], key=lambda x: x[1] - x[0])\n\n    print(max((max_1[1] - max_1[0]) * h, (max_2[1] - max_2[0]) * w))\n\n    \n",
                true
            ],
            [
                "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nt = int(input())\n# map(int,input().split())\n# [int(i) for i in input().split()]\nfor _ in range(t):\n    w,h = map(int,input().split())\n    x1 = [int(i) for i in input().split()]\n    x2 = [int(i) for i in input().split()]\n    y1 = [int(i) for i in input().split()]\n    y2 = [int(i) for i in input().split()]\n    a1 = (x1[-1]-x1[1])*h\n    a2 = (x2[-1]-x2[1])*h\n    a3 = (y1[-1]-y1[1])*w\n    a4 = (y2[-1]-y2[1])*w\n    print(max(a1,a2,a3,a4))",
                true
            ],
            [
                "for t in range(int(input())):\n    w,h = map(int,input().split())\n    x1 = list(map(int,input().split()))\n    y1 = list(map(int,input().split()))\n    x2 = list(map(int,input().split()))\n    y2 = list(map(int,input().split()))\n    print(max((x1[-1]-x1[1])*h, (y1[-1]-y1[1])*h, (x2[-1]-x2[1])*w, (y2[-1]-y2[1])*w))",
                true
            ],
            [
                "def solve():\n    w,h = map(int,input().split())\n    s1 = list(map(int, input().split()))[1:]\n    s2 = list(map(int, input().split()))[1:]\n    s3 = list(map(int, input().split()))[1:]\n    s4 = list(map(int, input().split()))[1:]\n    print(max(((max(s1)-min(s1))*h),((max(s2)-min(s2))*h),((max(s3)-min(s3))*w),((max(s4)-min(s4))*w)))\n\n\nt = int(input())\nfor _ in range(t):\n    solve()",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    w, h = map(int, input().split())\n    res = 0\n    for _ in range(4):\n        ls = [int(x) for x in input().split()][1:]\n        res = max(res, (ls[-1] - ls[0]) * ( w if _ > 1 else h))\n\n    print(res)",
                true
            ],
            [
                "for _ in range(int(input())):\n    w, h = map(int, input().split())\n    a = list(map(int, input().split()))[1:]\n    b = list(map(int, input().split()))[1:]\n    c = list(map(int, input().split()))[1:]\n    d = list(map(int, input().split()))[1:]\n    max_a = a[-1] - a[0]\n    max_b = b[-1] - b[0]\n    max_c = c[-1] - c[0]\n    max_d = d[-1] - d[0]\n    print(max(max_a * h, max_b * h, max_c * w, max_d * w))",
                true
            ],
            [
                "import sys\nfrom collections import deque\nimport math\nfrom bisect import bisect_left\nfrom functools import cmp_to_key\ndef II():\n    return int(sys.stdin.readline())\n \ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n    return map(int, sys.stdin.readline().split())\n \ndef SI():\n    return sys.stdin.readline().strip()\n \ndef FACT(n, mod):\n    s = 1\n    facts = [1]\n    for i in range(1,n+1):\n        s*=i\n        s%=mod\n        facts.append(s)\n    return facts[n]\n \ndef C(n, k, mod):\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\n \ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\n\ndef dis(a,b):\n    x,y = a\n    x1,y1 = b\n    return ((x-x1)**2+(y-y1)**2)**0.5\n\ndef area(a,b,c):\n    x = dis(a,b)\n    y = dis(b,c)\n    z = dis(a,c)\n    p = (x+y+z)/2\n    s = (4*p*(p-x)*(p-y)*(p-z))**0.5\n    return s\n\nfor _ in range(II()):\n    w,h = MI()\n    l = LI()\n    d1 = l.pop(0)\n    l1 = LI()\n    d2 = l1.pop(0)\n    l2 = LI()\n    d3 = l2.pop(0)\n    l3 = LI()\n    d4 = l3.pop(0)\n    temp = [(max(l),0), (min(l),0), (max(l1),h), (min(l1),h), (0,max(l2)), (0,min(l2)), (w,max(l3)), (w,min(l3))]\n    m = 0\n    for i in temp:\n        if i[1]!=0:\n            m = max(m,area(temp[0], temp[1], i))\n    for i in temp:\n        if i[0]!=0:\n            m = max(m,area(temp[-3], temp[-4], i))\n    for i in temp:\n        if i[1]!=h:\n            m = max(m,area(temp[2], temp[3], i))\n    for i in temp:\n        if i[0]!=w:\n            m = max(m,area(temp[-1], temp[-2], i))\n    print(round(m))\n",
                true
            ],
            [
                "import heapq\nfrom collections import Counter\nimport math\nimport sys\ninput = sys.stdin.readline\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\ndef inis():\n    return(input().split())\n###################################################\n\n# # Code to find top 3 elements and their counts\n# # using most_common\n#\n# arr = [1, 3, 4, 1, 2, 1, 1, 3, 4, 3, 5, 1, 2, 5, 3, 4, 5]\n# counter = Counter(arr)\n# top_three = counter.most_common()\n# print(sorted(top_three))\n#\n#\n# # Python code to find 3 largest and 4 smallest\n# # elements of a list.\n#\n# grades = [110, 25, 38, 49, 20, 95, 33, 87, 80, 90, 110]\n# print(heapq.nlargest(3, grades))\n# print(heapq.nsmallest(4, grades))\n\n###########---------Code Here------------##############\n\n\nfor _ in range(inp()):\n    w, h = invr()\n    mx = 0\n    for i in range(4):\n        x = inlt()\n        x = x[1:]\n        mx = max(mx, (x[-1] - x[0]) * (h if i < 2 else w))\n    print(mx)",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    h,w=map(int,input().split())\n    l1=list(map(int,input().split()))\n    l2 = list(map(int, input().split()))\n    l3 = list(map(int, input().split()))\n    l4 = list(map(int, input().split()))\n    x1=l1[-1]-l1[1]\n    x2=l2[-1]-l2[1]\n    x3=l3[-1]-l3[1]\n    x4=l4[-1]-l4[1]\n    area1=x1*w\n    area2=x2*w\n    area3=x3*h\n    area4=x4*h\n    print(max(area1,area2,area3,area4))\n",
                true
            ],
            [
                "for u in range(int(input())):\n    w, h = map(int, input().split())\n    a, b, c, d = list(map(int, input().split())), list(map(int, input().split())), list(map(int, input().split())), list(map(int, input().split()))\n    a, b, c, d = a[1:len(a)], b[1:len(b)], c[1:len(c)], d[1:len(d)]\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    print(max((a[-1] - a[0]) * h, (b[-1] - b[0]) * h, (c[-1] - c[0]) * w, (d[-1] - d[0]) * w))",
                true
            ],
            [
                "# def main():\n\n#     T = int(input())\n    \n#     for k in range(T):\n\n#         n = int(input())\n#         array = list(map(int, input().split(' ')))\n\n#         temp = sum(array)\n#         if temp%n == 0:\n#             ans = 0\n#         else:\n#             ans = 1\n        \n#         print(ans)\n\n# if __name__ == \"__main__\":\n#     main()\n\ndef main():\n\n    T = int(input())\n    for i in range(T):\n\n        h,w = list(map(int, input().split(' ')))\n        x_1 = list(map(int, input().split(' ')))\n        x_2 = list(map(int, input().split(' ')))\n        y_1 = list(map(int, input().split(' ')))\n        y_2 = list(map(int, input().split(' ')))\n\n\n        x_1_a = (x_1[len(x_1)-1]-x_1[1])*w\n        x_2_a = (x_2[len(x_2)-1]-x_2[1])*w\n        y_1_a = (y_1[len(y_1)-1]-y_1[1])*h\n        y_2_a = (y_2[len(y_2)-1]-y_2[1])*h\n\n        res = max(max(max(x_1_a, x_2_a), y_1_a), y_2_a)\n\n        print(res)\n        \nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "t = int(input())\n\nfor p in range(t):\n    w,h = map(int, input().split())\n    lis = []\n    for i in range(4):\n        lis.append(list(map(int, input().split())))\n    ans = 0\n    \n    lis = [sorted(i[1:]) for i in lis]\n    for i in range(2):\n        ans = max(ans, (lis[i][-1]-lis[i][0])*h)\n        \n    for j in range(2,4):\n        ans = max(ans, (lis[j][-1]-lis[j][0])*w)\n    print(ans)\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\n#import random\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\n#import math\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\ndx = [0,0,1,-1]\ndy = [1,-1,0,0]\nmod = 10**9 + 7\nmod1 = 998244353\n\nfor _ in range (ii()) :\n    w,h = il()\n\n    a = []\n\n    ans = 0\n\n    for i in range (2) :\n        x = il()\n        \n        mn = min(x[1:])\n        mx = max(x[1:])\n\n        ans = max(ans,(mx - mn) * h)\n\n    for i in range (2) :\n        x = il()\n        \n        mn = min(x[1:])\n        mx = max(x[1:])\n\n        ans = max(ans,(mx - mn) * w)\n\n    print(ans)\n        \n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nINF = 10 ** 19\n\ndef solve():\n    w, h = map(int,input().split())\n    x1 = list(map(int,input().split()))[1:]\n    x2 = list(map(int,input().split()))[1:]\n    y1 = list(map(int,input().split()))[1:]\n    y2 = list(map(int,input().split()))[1:]\n    ans = 0\n    if len(x1) >= 2:\n        ans = max(ans, (x1[-1] - x1[0]) * h)\n    if len(x2) >= 2:\n        ans = max(ans, (x2[-1] - x2[0]) * h)\n    if len(y1) >= 2:\n        ans = max(ans, (y1[-1] - y1[0]) * w)\n    if len(y2) >= 2:\n        ans = max(ans, (y2[-1] - y2[0]) * w)\n    print(ans)\n\n\n\n\n            \n\nt = int(input())\nfor _ in range(t):\n    solve()",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\nsys.setrecursionlimit(3*10**5)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\ngp=[]\nans=[]\nf=0\nw=[]\n\ndef dfs(i,prod,rem,n):\n    if rem==0:\n        while(i<len(n)):\n            prod*=int(n[i])\n            i+=1\n        return prod\n    if i==len(n):\n        return prod\n    mx=0\n    for j in range(9-int(n[i])):\n        mx=max(dfs(i+1,(int(n[i])+min(j,rem))*prod,rem-min(j,rem),n),mx)\n    return mx\nclass Disjoint_SU:\n    def __init__(self,n):\n        self.parent=[i for i in range(n)]\n        self.size=[1 for i in range(n)]\n    #find\n    def lake_de(self,a):\n        if a==self.parent[a]:\n            return a\n        self.parent[a]=self.lake_de(self.parent[a])\n        return self.parent[a]\n    #union\n    #by size\n    def jod(self,a,b):\n        x=self.lake_de(a)\n        y=self.lake_de(b)\n        #for cycle in graph\n        if x==y:\n            return True\n        if self.size[x]>self.size[y]:\n            self.size[x]+=self.size[y]\n            self.parent[y]=x\n        else:\n            self.size[y]+=self.size[x]\n            self.parent[x]=y\n        return False\nans=0\nh,w=0,0\ndef func(x1,y1,x2,y2,first,second,third,fourth):\n    global ans,h,w\n    for i in range(1,len(first)):\n        x3,y3=first[i],0\n        ans=max(ans,x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))\n    for i in range(1,len(second)):\n        x3,y3=second[i],h\n        ans=max(ans,x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))\n    for i in range(1,len(third)):\n        x3,y3=0,third[i]\n        ans=max(ans,x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))\n    for i in range(1,len(fourth)):\n        x3,y3=w,fourth[i]\n        ans=max(ans,x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))\n    return\ndef hnbhai(tc):\n    global ans,h,w\n    ans=0\n    x,y=0,0\n    w,h=sd()\n    first=sd()\n    second=sd()\n    third=sd()\n    fourth=sd()\n    ans=first[-1]-first[1]\n    ans*=h\n    ans=max(ans,h*(second[-1]-second[1]))\n    ans=max(ans,w*(third[-1]-third[1]),w*(fourth[-1]-fourth[1]))\n    print(ans)\n        \n    return\nfor _ in range(sb()):\n    hnbhai(_+1)\n##case\n\n#.\n",
                true
            ],
            [
                "cases = int(input())\nfor i in range(cases):\n    line = list(map(int, input().split()))\n    w,h = line[0],line[1]\n    firstLine = list(map(int,input().split()))\n    secondLine = list(map(int,input().split()))\n    thirdLine = list(map(int,input().split()))\n    fourthLine = list(map(int,input().split()))\n    xbase1, xbase2 = firstLine[1],firstLine[-1]\n    xbase3, xbase4 = secondLine[1],secondLine[-1]\n    xheight = h\n    ybase1, ybase2 = thirdLine[1],thirdLine[-1]\n    ybase3, ybase4 = fourthLine[1],fourthLine[-1]\n    yheight = w\n    print(max((xbase2-xbase1)*xheight, (ybase2-ybase1)*yheight, (xbase4-xbase3)*xheight, (ybase4-ybase3)*yheight ))",
                true
            ],
            [
                "for _ in range(int(input())):\n    w, h = map(int, input().split())\n    points = [list(map(int, input().split()))[1:] for _ in range(4)]\n    ans = 0\n    a = max(max(points[0]) - min(points[0]), max(points[1]) - min(points[1]))\n    b = max(max(points[2]) - min(points[2]), max(points[3]) - min(points[3]))\n    print(max(a * h, b * w))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    w,h = map(int,input().split())\n    l1 = list(map(int,input().split()))\n    l2 = list(map(int,input().split()))\n    l3 = list(map(int,input().split()))\n    l4 = list(map(int,input().split()))\n    \n    b1 = l1[-1]-l1[1]\n    b2 = l2[-1]-l2[1]\n    b3 = l3[-1]-l3[1]\n    b4 = l4[-1]-l4[1]\n    \n    if b1>b2:\n        r1=b1*h\n    else:\n        r1=b2*h\n    \n    if b3>b4:\n        r2=b3*w\n    else:\n        r2=b4*w\n        \n    print(max(r1,r2))",
                true
            ],
            [
                "t=int(input())\nfor _ in range(0,t):\n    w,h=map(int,input().split())\n    a=list(map(int,input().split()))\n    a.remove(a[0])\n    b=list(map(int,input().split()))\n    b.remove(b[0])\n    c=list(map(int,input().split()))\n    c.remove(c[0])\n    d=list(map(int,input().split()))\n    d.remove(d[0])\n    a_max=max(a)\n    a_min=min(a)\n    b_max=max(b)\n    b_min=min(b)\n    c_max=max(c)\n    c_min=min(c)\n    d_max=max(d)\n    d_min=min(d)\n    i=a_max-a_min\n    j=b_max-b_min\n    k=c_max-c_min\n    l=d_max-d_min\n    e=[]\n    x=i*h\n    e.append(x)\n    y=j*h\n    e.append(y)\n    z=k*w\n    e.append(z)\n    h=l*w\n    e.append(h)\n    print(max(e))",
                true
            ],
            [
                "import sys\nimport os.path\n \nif(os.path.exists('input.txt')) :\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    sys.stderr = open(\"error.txt\", \"w\")\n    \ndepth = 200001\nmod = 1000000007 \nlim = mod * mod\nsys.setrecursionlimit(depth) \n \nlinp = lambda: list(minp())\nminp = lambda: map(int, input().split())\n \nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\n\ndxy = [(1, 0),(-1, 0),(0, 1),(0, -1)]\n\ndef expo(a, b) :\n    if not b : return 1\n    v = expo(a, b//2)\n    v = (v * v) % mod\n    if b%2 : v = (v * a) % mod\n    return v\n\ndef modinv(a, b) :\n    d = expo(b, mod-2)\n    v = (a * d) % mod\n    return v\n\ndef checkPrime(n) :\n    if n < 4 : return True\n    if n%2 == 0 : return False\n    for i in range(3, int(sqrt(n))+1, 2) :\n        if n%i == 0 :\n            return False\n    return True    \n\ndef highestPowerof2(x):\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n\n    return x ^ (x >> 1)\n\nfor _ in range(int(input())) :\n    w, h = map(int, input().split())\n    a, b, c, d = linp(), linp(), linp(), linp()\n    ans1 = h * max(a[-1]-a[1], b[-1]-b[1])\n    ans2 = w * max(c[-1]-c[1], d[-1]-d[1])\n    print(max(ans1, ans2))",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\ndef func():\n    # case1: triangle with base on horizontal axis\n    width = 0\n    # for i in range(len(x_up)-1):\n    width = max(width, x_up[-1] - x_up[0])\n\n    # for i in range(len(x_down)-1):\n    width = max(width, x_down[-1] - x_down[0])\n\n    area = width * h\n\n    # case2:\n    height = 0\n    # for i in range(len(y_left) - 1):\n    height = max(height, y_left[-1] - y_left[0])\n\n    # for i in range(len(y_right) - 1):\n    height = max(height, y_right[-1] - y_right[0])\n\n    area = max(area, height * w)\n\n    print(area)\n\n\nfor _ in range(int(input())):\n    w, h = map(int, input().split())\n    x_down = list(map(int, input().split()))[1:]\n    x_up = list(map(int, input().split()))[1:]\n    y_left = list(map(int, input().split()))[1:]\n    y_right = list(map(int, input().split()))[1:]\n    func()\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    w, h = map(int, input().split())\n    f = 0\n    for i in range(4):\n        a = input().split()\n        for j in range(len(a)):\n            a[j] = int(a[j])\n        k = a[1:]\n        if i <= 1:\n            f = max(f, (k[len(k) - 1] - k[0]) * h)\n        else:\n            f = max(f, (k[len(k) - 1] - k[0]) * w)\n    print(f)",
                true
            ],
            [
                "\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\n\n\n\nt=inp()\n\n\nfor i in range (t):\n    \n    w,h=invr()\n\n    x1=inlt()\n    x2=inlt()\n    y1=inlt()\n    y2=inlt()\n    \n    l=[]\n    gx1=x1[-1]-x1[1]\n    l.append(gx1*h)\n\n    gx2=x2[-1]-x2[1]\n    l.append(gx2*h)\n\n    gy1=y1[-1]-y1[1]\n    l.append(gy1*w)\n\n    gy2=y2[-1]-y2[1]\n    l.append(gy2*w)\n\n    print(max(l))\n\n\n\n    \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "def ans(S1,S2,S3,S4,w,h):\n    return(max(max(max(S1)-min(S1),max(S2)-min(S2))*h,max(max(S3)-min(S3),max(S4)-min(S4))*w))\nfor _ in range(int(input())):\n    w,h = map(int,input().split(\" \"))\n    S1 = list(map(int,input().split(\" \")))[1::]\n    S2 = list(map(int,input().split(\" \")))[1::]\n    S3 = list(map(int,input().split(\" \")))[1::]\n    S4 = list(map(int,input().split(\" \")))[1::]\n    print(ans(S1,S2,S3,S4,w,h))",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    w, h = [int(x) for x in input().split()]\n    best = 0\n    for _ in range(2):\n        points = [int(x) for x in input().split()][1:]\n        points.sort()\n        best = max(best, (points[-1] - points[0])*h)\n    for _ in range(2):\n        points = [int(x) for x in input().split()][1:]\n        points.sort()\n        best = max(best, (points[-1] - points[0])*w)\n\n    print(best)\n\n",
                true
            ],
            [
                "#!/usr/bin/env python3\nimport math\n\nnb_cases = int(input())\n\nfor case in range(nb_cases):\n    w, h = [int(x) for x in input().split()]\n    x1 = [int(x) for x in input().split()]\n    x2 = [int(x) for x in input().split()]\n    y1 = [int(x) for x in input().split()]\n    y2 = [int(x) for x in input().split()]\n    x = max(x1[-1] - x1[1], x2[-1] - x2[1])\n    y = max(y1[-1] - y1[1], y2[-1] - y2[1])\n    print(max(x*h, y*w))",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    w,h=map(int,input().split())\n    w1=list(map(int,input().strip().split()))\n    w2=list(map(int,input().strip().split()))\n    h1=list(map(int,input().strip().split()))\n    h2=list(map(int,input().strip().split()))\n    s1=max(w2[-1]-w2[1],w1[-1]-w1[1])\n    a1=s1*h\n    s2=max(h2[-1]-h2[1],h1[-1]-h1[1])\n    a2=s2*w\n    print(max(a1,a2))",
                true
            ],
            [
                "\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\nlogging.basicConfig(format=\"%(message)s\", level=logging.WARNING,)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\n# 30 MINUTES ATLEAST !!!!\n\n###################################################################################################################\n\n\ndef slv():\n    w, h = map(int, input().split())\n    ans = 0\n    for i in range(4):\n        a = list(map(int, input().split()))[1:]\n        ans = max(ans, (a[-1] - a[0]) * (h if i < 2 else w))\n    print(ans)\n\n\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        slv()\n",
                true
            ],
            [
                "for iq in range(int(input())):\n    w,h=map(int,input().split())\n    t1=list(map(int, input().split()))\n    t2=list(map(int, input().split()))\n    g1 = list(map(int, input().split()))\n    g2 = list(map(int, input().split()))\n    mg=max(g1[-1]-g1[1],g2[-1]-g2[1])\n    mt = max(t1[-1] - t1[1], t2[-1] - t2[1])\n    print(max(mg*w,mt*h))",
                true
            ],
            [
                "# Educational Codeforces Round 119 (Rated for Div. 2)\n# B. Triangles on a Rectangle\n\n\ndef solve():\n    w, h = list(map(int, input().split()))\n\n    # Along the bottom of rectangle\n    x_l = list(map(int, input().split()))[1:]\n    best = h * (x_l[-1] - x_l[0])\n\n    # Along the top of rectangle\n    x_h = list(map(int, input().split()))[1:]\n    best = max(best, h * (x_h[-1] - x_h[0]))\n\n    # Along the left of rectangle\n    y_l = list(map(int, input().split()))[1:]\n    best = max(best, w * (y_l[-1] - y_l[0]))\n\n    # Along the right of rectangle\n    y_r = list(map(int, input().split()))[1:]\n    best = max(best, w * (y_r[-1] - y_r[0]))\n\n    print(best)\n\n\nfor _ in range(int(input())):\n    solve()\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    w, h = map(int, input().split())\n    O_hor = list(map(int, input().split()))\n    h_hor = list(map(int, input().split()))\n    O_ver = list(map(int, input().split()))\n    h_ver = list(map(int, input().split()))\n    a1 = (O_hor[-1] - O_hor[1])*h\n    a2 = (h_hor[-1] - h_hor[1])*h\n    a3 = (O_ver[-1] - O_ver[1])*w\n    a4 = (h_ver[-1] - h_ver[1])*w\n    print(max(a1, a2, a3, a4))",
                true
            ],
            [
                "\n#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"# paste here...\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\ndef solve(W, H, X1, X2, Y1, Y2):\n  a1 = (max(X1) - min(X1)) * H\n  a2 = (max(X2) - min(X2)) * H\n  a3 = (max(Y1) - min(Y1)) * W\n  a4 = (max(Y2) - min(Y2)) * W\n  return max(a1, a2, a3, a4)\n\nT0 = int(input())\nfor _ in range(T0):\n  W, H = map(int, input().split())\n  X1 = list(map(int, input().split()))[1:]\n  X2 = list(map(int, input().split()))[1:]\n  Y1 = list(map(int, input().split()))[1:]\n  Y2 = list(map(int, input().split()))[1:]\n  print(solve(W, H, X1, X2, Y1, Y2))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a = list(map(int, input().strip().split()))\n    x1 = list(map(int, input().strip().split()))\n    x2 = list(map(int, input().strip().split()))\n    y1 = list(map(int, input().strip().split()))\n    y2 = list(map(int, input().strip().split()))\n    basemax = max(x1[-1]-x1[1],x2[-1]-x2[1])\n    basemax2 = max(y1[-1]-y1[1],y2[-1]-y2[1])\n    area1 = basemax*a[1]\n    area2 = basemax2*a[0]\n    print(max(area1, area2))",
                true
            ],
            [
                "def squer(x1, y1, x2, y2, x3, y3):\n    A = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    return A\n\n\nt = int(input())\nfor i in range(t):\n    w, h = [int(o) for o in input().split()]\n    xd = [int(o) for o in input().split()[1:]]\n    xu = [int(o) for o in input().split()[1:]]\n    yl = [int(o) for o in input().split()[1:]]\n    yr = [int(o) for o in input().split()[1:]]\n    maxx = 0\n    for x in xu:\n        maxx = max(maxx, squer(xd[0], 0, xd[-1], 0, x, h))\n    for y in yl:\n        maxx = max(maxx, squer(xd[0], 0, xd[-1], 0, 0, y))\n    for y in yr:\n        maxx = max(maxx, squer(xd[0], 0, xd[-1], 0, w, y))\n\n    for x in xd:\n        maxx = max(maxx, squer(xu[0], h, xu[-1], h, x, 0))\n    for y in yl:\n        maxx = max(maxx, squer(xu[0], h, xu[-1], h, 0, y))\n    for y in yr:\n        maxx = max(maxx, squer(xu[0], h, xu[-1], h, w, y))\n\n    for x in xu:\n        maxx = max(maxx, squer(0, yl[0], 0, yl[-1], x, h))\n    for x in xd:\n        maxx = max(maxx, squer(0, yl[0], 0, yl[-1], x, 0))\n    for y in yr:\n        maxx = max(maxx, squer(0, yl[0], 0, yl[-1], w, y))\n\n    for x in xu:\n        maxx = max(maxx, squer(w, yr[0], w, yr[-1], x, h))\n    for y in yl:\n        maxx = max(maxx, squer(w, yr[0], w, yr[-1], 0, y))\n    for x in xd:\n        maxx = max(maxx, squer(w, yr[0], w, yr[-1], x, 0))\n\n    print(maxx)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    w, h = map(int, input().split())\n    l = [h, w]\n    area = 0\n    for i in range(4):\n        x = list(map(int, input().split()))\n        \n        area = max(area, (x[-1]-x[1])*l[i//2])\n    print(area)",
                true
            ],
            [
                "# cook your dish here\nimport math\nimport collections\ndef modInverse(p, q):\n    \n        mod = 998244353\n        expo = 0\n        expo = mod - 2\n\n        # Loop to find the value\n        # until the expo is not zero\n        while (expo):\n            if (expo & 1):\n                p = (p * q) % mod\n            q = (q * q) % mod\n            expo >>= 1\n        return p\n        \ndef answer(x,y,li):\n    s=[]\n    for p in range(0,len(li)-1):\n        s.append(li[p+1]-li[p])\n    s.append(int(1e18))\n    \n    def solu(s,fi,y):\n        m=0\n        for j in range(0,len(s)):\n            m=m+min(s[j],fi)\n        return(m>=y)\n        \n    low=1\n    high=int(1e18)\n    ans=0\n    while (low<high):\n        fi=(low+high)//2\n        if solu(s,fi,y):\n            high=fi\n            ans=fi\n        else:\n            low=fi+1\n    \n    return ans\n\n    \nt=int(input())\nfor i in range (0,t):\n    x,y=input().split()\n    x=int(x)\n    y=int(y)\n    x1=input().split()\n    x2=input().split()\n    y1=input().split()\n    y2=input().split()\n    if (int(x1[-1])-int(x1[1]))*y > (int(x2[-1])-int(x2[1]))*y:\n        ans1=(int(x1[-1])-int(x1[1]))*y\n    else:\n        ans1=(int(x2[-1])-int(x2[1]))*y\n        \n    if (int(y1[-1])-int(y1[1]))*x > (int(y2[-1])-int(y2[1]))*x:\n        ans2=(int(y1[-1])-int(y1[1]))*x\n    else:\n        ans2=(int(y2[-1])-int(y2[1]))*x\n    \n    \n    if ans1>ans2:\n        print(ans1)\n    else:\n        print(ans2)\n    \n    \n            \n            ",
                true
            ],
            [
                "\n\nentrada = int(input())\nfor i in range(entrada):\n  dos = [int(x) for x in input().split()]\n  stored = 0\n  alto = 0\n  for m in range(4):\n    un = [int(x) for x in input().split()]\n    \n    checar = un[-1] - un[1]\n    checar = checar*dos[0] if m > 1 else checar*dos[1]\n    if checar > stored:\n      stored =  checar\n\n  \n  print(stored)\n      \n  \n\n\n  \n    \n    \n",
                true
            ],
            [
                "def findmax(a):\n    return abs(a[len(a)-1]-a[1])\n\nt = int(input())\nfor _ in range(t):\n    w,h = map(int,input().split())\n    w1 = list(map(int,input().split()))\n    w2 = list(map(int,input().split()))\n    h1 = list(map(int,input().split()))\n    h2 = list(map(int,input().split()))\n    maxx = max(findmax(w1)*h,findmax(w2)*h,findmax(h1)*w,findmax(h2)*w)\n    print(maxx)",
                true
            ],
            [
                "from sys import stdin\nListe = stdin.read().split(\"\\n\")\nfor i in range(0,int(Liste[0])):\n        w = int(Liste[5*i+1].split()[0])\n        h = int(Liste[5*i+1].split()[1])\n        x = max(int(Liste[5*i+2].split()[-1])-int(Liste[5*i+2].split()[1]),int(Liste[5*i+3].split()[-1])-int(Liste[5*i+3].split()[1]))\n        y = max(int(Liste[5*i+4].split()[-1])-int(Liste[5*i+4].split()[1]),int(Liste[5*i+5].split()[-1])-int(Liste[5*i+5].split()[1]))\n        print(max(x*h,y*w))\n",
                true
            ],
            [
                "def solve_test(w, h, points_b, points_t, points_l, points_r):\n    def get_val(points, height):\n        return abs(points[0] - points[-1]) * height\n\n    largest = max(get_val(points_b, h), get_val(points_t, h), get_val(points_l, w), get_val(points_r, w))\n    print(largest)\n\n\nif __name__ == '__main__':\n    mode = 'o'\n\n    if mode == 'file':\n        f = open('input.txt', 'r')\n\n        def read():\n            return f.readline()\n    else:\n        read = input\n\n    testcases = int(read())\n\n    for _ in range(testcases):\n        w, h = tuple([int(inp) for inp in read().split(' ')])\n        points_b = [int(p) for p in read().split(' ')[1:]]\n        points_t = [int(p) for p in read().split(' ')[1:]]\n        points_l = [int(p) for p in read().split(' ')[1:]]\n        points_r = [int(p) for p in read().split(' ')[1:]]\n        solve_test(w, h, points_b, points_t, points_l, points_r)\n\n    if mode == 'file':\n        f.close()\n",
                true
            ],
            [
                "n = int(input())\n\nwhile n:\n    n -= 1\n    w,h = list(map(int,input().split()))\n\n    y0 = list(map(int,input().split()))\n    y00 = (y0[-1] - y0[1]) * h\n\n    yh = list(map(int,input().split()))\n    yhh = (yh[-1] - yh[1]) * h\n\n    x0 = list(map(int,input().split()))\n    x00 = (x0[-1] - x0[1]) * w\n\n    xw = list(map(int,input().split()))\n    xww = ( xw[-1] - xw[1] ) * w\n\n    m = max(y00,yhh,x00,xww)\n\n    print(m)",
                true
            ],
            [
                "#     __  __                __    _ __      ______                \n#    / / / /___ ___________/ /_  (_) /_    / ____/___ __________ _\n#   / /_/ / __ `/ ___/ ___/ __ \\/ / __/   / / __/ __ `/ ___/ __ `/\n#  / __  / /_/ / /  (__  ) / / / / /_    / /_/ / /_/ / /  / /_/ / \n# /_/ /_/\\__,_/_/  /____/_/ /_/_/\\__/____\\____/\\__,_/_/   \\__, /  \n#                                  /_____/               /____/   \n\nfrom collections import Counter\nfrom sys import *\nfrom collections import defaultdict as dd\nfrom math import *\n\n# sys.stdin = open('input.txt', 'r')  \n# sys.stdout = open('output.txt', 'w')\n\n#input functions\ndef inp():\n    return int(stdin.readline().strip())\ndef vinp():\n    return map(int,stdin.readline().strip().split())\ndef linp():\n    return list(map(int,stdin.readline().strip().split()))\ndef sinp(n = 1):\n    if n==1:\n        return stdin.readline().strip()\n    elif n==2:\n        return list(stdin.readline().strip())\n    else:\n        return list(stdin.readline().split())\n\n#output function\ndef pr(*x, end = \"\\n\"):\n    print(*x,end = end)\n\n#others\ndef mod(f, val = 1000000007):\n    return f % val\ndef csort(c):\n    sorted(c.items(), key=lambda pair: pair[1], reverse=True)\ndef indc(l,n):\n    c={}\n    for i in range(n):\n        c[l[i]]=c.get(l[i],[])+[i+1]\n    return c\n\nif __name__ ==\"__main__\":\n    cou=inp()\n    for _ in range(cou):\n        w,h = vinp()\n        l1 = linp()[1:]\n        l2 = linp()[1:]\n        l3 = linp()[1:]\n        l4 = linp()[1:]\n        ma1 = max(l1)\n        ma2 = max(l2)\n        ma3 = max(l3)\n        ma4 = max(l4)\n        mi1 = min(l1)\n        mi2 = min(l2)\n        mi3 = min(l3)\n        mi4 = min(l4)\n        l = [abs(ma1-mi1)*h, abs(ma2-mi2)*h, abs(ma3-mi3)*w, abs(ma4-mi4)*w]\n        pr(max(l))",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    w,h = list(map(int, input().split()))\n    x1 = list(map(int, input().split()))[1:]\n    x2 = list(map(int, input().split()))[1:]\n    y1 = list(map(int, input().split()))[1:]\n    y2 = list(map(int, input().split()))[1:]\n    z1 = max(x1)-min(x1)\n    z2 = max(x2)-min(x2)\n    z3 = max(y1)-min(y1)\n    z4 = max(y2)-min(y2)\n    z = max(z1,z2)\n    zz = max(z3,z4)\n    j = max(z*h,zz*w)\n    print(j)",
                true
            ],
            [
                "def solve(h, w, l1, l2, l3, l4):\n    a1 = (l1[-1] - l1[1]) * h\n    a2 = (l2[-1] - l2[1]) * h\n    a3 = (l3[-1] - l3[1]) * w\n    a4 = (l4[-1] - l4[1]) * w\n    return max(a1, a2, a3, a4)\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        w, h = map(int, input().split())\n        l1 = list(map(int, input().split()))\n        l2 = list(map(int, input().split()))\n        l3 = list(map(int, input().split()))\n        l4 = list(map(int, input().split()))\n        print(solve(h, w, l1, l2, l3, l4))\n\n\nif __name__ == \"__main__\":\n    main()\n",
                true
            ],
            [
                "import sys\ndef main():\n    pass\ndef binary(n):\n    # decimal to binary\n    return (bin(n).replace(\"0b\", \"\"))\ndef decimal(s):\n    # binary to decimal accepts only string\n    return (int(s, 2))\ndef isPrime(n):\n    # if  number is prime in \u221an time\n    if (n == 1):\n        return (False)\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    else:\n        root = int(n ** 0.5)\n        root += 1\n        for i in range(5, root,6):\n            if (n % i == 0 or n%(i+2)==0):\n                return (False)\n        return (True)\ndef lts(l):\n    # list to string ,no spaces\n    s = \"\".join(map(str, l))\n    return s\ndef power(x,n):\n    res=1\n    while(n>0):\n        if n&1:\n            res=res*x\n        x=x*x\n        n=n>>1\n    return res\ndef divisors_all(n):\n    i=1\n    while(i*i<=n):\n        if n%i==0:\n            print(i,end=\" \")\n        i+=1\n    while(i>0):\n        if n%i==0:\n            print(n//i,end=\" \")\n        i-=1\ndef gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\ndef prime_factors(n):\n    while(n%2==0):\n        print(2)\n        n=n//2\n    while(n%3==0):\n        print(3)\n        n=n//3\n    i=5\n    while(i*i<=n):\n        while(n%i==0):\n            print(i)\n            n=n//i\n        while(n%(i+2)==0):\n            print(i+2)\n            n=n//(i+2)\n        i+=6\n    if n>3:\n        print(n)\n#1000000007\nmod = int(1e9) + 7\ndef sinp(): return sys.stdin.readline().strip()\ndef zinp(): return int(input())\ndef zzinp(): return map(int, sys.stdin.readline().strip().split())\ndef llinp(): return list(map(int, sys.stdin.readline().strip().split()))\ndef p(xyz): print(xyz)\ndef p2(a, b): print(a, b)\nfor _ in range(zinp()):\n    l,h=zzinp()\n    l1=llinp()\n    l2=llinp()\n    l3=llinp()\n    l4=llinp()\n    a=b=c=d=0\n    if len(l1)>2:\n        a=abs(l1[1]-l1[-1])*h\n    if len(l2)>1:\n        b = abs(l2[1] - l2[-1]) * h\n    if len(l3) > 1:\n        c = abs(l3[1] - l3[-1]) * l\n    if len(l4) > 1:\n        d = abs(l4[1] - l4[-1]) * l\n    print(max(a,b,c,d))\n\n\n\n\n\n",
                true
            ],
            [
                "r = int(input())\nres = []\nfor i in range(r):\n    a, b = map(int, input().split())\n    x_1 = input().split()\n    x_max = int(x_1[-1]) - int(x_1[1])\n    x_2 = input().split()\n    x_max = max(int(x_2[-1]) - int(x_2[1]), x_max)\n    y_1 = input().split()\n    y_max = int(y_1[-1]) - int(y_1[1])\n    y_2 = input().split()\n    y_max = max(int(y_2[-1]) - int(y_2[1]), y_max)\n    res.append(max(x_max*b, y_max*a))\n    \nfor i in res:\n    print(i)\n    \n    ",
                true
            ],
            [
                "def solve():\n    w, h = map(int, input().split())\n    hoanh_duoi = list(input().split())\n    hoanh_tren = list(input().split())\n    tung_trai = list(input().split())\n    tung_phai = list(input().split())\n    max_hoanh = max(int(int(hoanh_duoi[-1]) - int(hoanh_duoi[1])), int(hoanh_tren[-1]) - int(hoanh_tren[1]))\n    max_tung = max(int(int(tung_trai[-1]) - int(tung_trai[1])), int(tung_phai[-1]) - int(tung_phai[1]))\n    print(max(max_hoanh*h, max_tung*w))\nfor i in range(int(input())):\n    solve()",
                true
            ],
            [
                "t = int(input())\nans = []\n\nfor i in range(t):\n    w, h = map(int, input().split())\n    a = list(map(int, input().split()))[1:]\n    dmin, dmax = min(a), max(a)\n    a = list(map(int, input().split()))[1:]\n    umin, umax = min(a), max(a)\n    a = list(map(int, input().split()))[1:]\n    lmin, lmax = min(a), max(a)\n    a = list(map(int, input().split()))[1:]\n    rmin, rmax = min(a), max(a)\n    temp = max((dmax - dmin) * h, (umax - umin) * h, (lmax - lmin) * w, (rmax - rmin) * w)\n    ans.append(temp)\nprint(*ans, sep='\\n')",
                true
            ],
            [
                "t = int(input())\nwhile t:\n    w, h = map(int, input().split())\n    h1 = []\n    h2 = []\n    v1 = []\n    v2 = []\n    info1 = list(map(int, input().split()))\n    info2 = list(map(int, input().split()))\n    h1 = info1[1:]\n    h2 = info2[1:]\n    h1.sort()\n    h2.sort()\n    info1 = list(map(int, input().split()))\n    info2 = list(map(int, input().split()))\n    v1 = info1[1:]\n    v2 = info2[1:]\n    v1.sort()\n    v2.sort()\n    ans = max((h1[-1]-h1[0])*h, (h2[-1]-h2[0])*h, (v1[-1]-v1[0])*w, (v2[-1]-v2[0])*w)\n    print(ans)\n    t-=1",
                true
            ],
            [
                "for _ in range(int(input())):\n    w, h = map(int, input().split())\n    x1 = list(map(int, input().split()))\n    x2 = list(map(int, input().split()))\n    y1 = list(map(int, input().split()))\n    y2 = list(map(int, input().split()))\n    x = x1[1:]\n    x3 = x2[1:]\n    y = y1[1:]\n    y3 = y2[1:]\n    r1 = (max(x)-min(x)) * h\n    r2 = (max(x3)-min(x3)) * h\n    r3 = (max(y) - min(y)) * w\n    r4 = (max(y3) - min(y3)) * w\n    print(max(r1,r2,r3,r4))",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\n\ndef answer():\n\n    base = max((x1[-1] - x1[1]) , (x2[-1] - x2[1]))\n    ans = base * h\n\n    base = max((y1[-1] - y1[1]) , (y2[-1] - y2[1]))\n    ans = max(ans , base * w)\n\n    return ans\n    \n\nfor T in range(int(input())):\n\n    w , h = map(int,input().split())\n\n    x1 = list(map(int,input().split()))\n    x2 = list(map(int,input().split()))\n    y1 = list(map(int,input().split()))\n    y2 = list(map(int,input().split()))\n\n    print(answer())\n",
                true
            ],
            [
                "\ndef solution():\n    w, h = map(int, input().split())\n    ay0 = [int(x) for x in input().split()]\n    ayh = [int(x) for x in input().split()]\n    ax0 = [int(x) for x in input().split()]\n    axw = [int(x) for x in input().split()]\n    return max([(-ay0[1]+ay0[-1])*h,(-ayh[1]+ayh[-1])*h,(-ax0[1]+ax0[-1])*w,(-axw[1]+axw[-1])*w])\n  \nt = int(input())\nfor _ in range(t):\n    print(solution())",
                true
            ],
            [
                "#1620 B\n\nt=int(input())\nfor _ in range(t):\n    w,h = map(int,input().split())\n    a = [int(i) for i in input().split()]\n    \n    b = [int(i) for i in input().split()]\n    \n    c = [int(i) for i in input().split()]\n    \n    d = [int(i) for i in input().split()]\n    \n    \n    ans = max(h*(a[-1] - a[1]),h*(b[-1]-b[1]), w*(c[-1] - c[1]), w*(d[-1] - d[1]))\n    \n    print(ans)\n",
                true
            ],
            [
                "from math import *\n \n#from math import factorial as fact, comb as ncr \nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\n\nfrom array import array\nfrom re import search\n \nli=lambda : list(map(int,input().split()))\narr=lambda a: array('i',a)\nbi=lambda n: bin(n).replace(\"0b\", \"\")\nyn=lambda f: print('NYOE S'[f::2])\nsbstr=lambda a,s: search('.*'.join(a),s)\n\n'''def isprime(a):\n    if a==2: return True\n    elif a%2==0: return False\n    n=3\n    while n<=a**0.5:\n        if a%n==0:\n            return False\n        n+=2\n    return True\n'''\n'''def nf(n,a):\n    b=a*a\n    c=b*a\n    d=c*a\n    e=n\n    ct=0\n    while e%a==0:\n        if e%d==0:\n            ct+=4\n            e=e//d\n        if e%c==0:\n            ct+=3\n            e=e//c\n        if e%b==0:\n            ct+=2\n            e=e//b\n        if e%a==0:\n            ct+=1\n            e=e//a\n    return ct\n'''\n\ndef dec_to_base(num,base):  \n    base_num = \"\"\n    while num>0:\n        dig = int(num%base)\n        if dig<10:\n            base_num += str(dig)\n        else:\n            base_num += chr(ord('A')+dig-10)  \n        num //= base\n    base_num = base_num[::-1]  \n    return base_num\n\ndef solve():\n    for _ in range(int(input())):\n        w,h=li()\n        px0=li()[1:]\n        pxh=li()[1:]\n        py0=li()[1:]\n        pyw=li()[1:]\n        print(max(h*(px0[-1]-px0[0]),h*(pxh[-1]-pxh[0]),w*(py0[-1]-py0[0]),w*(pyw[-1]-pyw[0])))\n\nsolve()",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    w, h = map(int, input().split())\n    x1 = list(map(int,input().split()))\n    x2 = list(map(int,input().split()))\n    y1 = list(map(int,input().split()))\n    y2 = list(map(int,input().split()))\n    a1 = h*(x1[-1]-x1[1])\n    a2 = h*(x2[-1]-x2[1])\n    a3 = w*(y1[-1]-y1[1])\n    a4 = w*(y2[-1]-y2[1])\n    print(max(a1,a2,a3,a4))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    w, h = [int(e) for e in input().split()]\n    _, *x1 = [(int(e), 0) for e in input().split()]\n    _, *x2 = [(int(e), h) for e in input().split()]\n    _, *y1 = [(0, int(e)) for e in input().split()]\n    _, *y2 = [(w, int(e)) for e in input().split()]\n    x1 = sorted(x1, key=lambda x: x[0])\n    x2 = sorted(x2, key=lambda x: x[0])\n    y1 = sorted(y1, key=lambda x: x[1])\n    y2 = sorted(y2, key=lambda x: x[1])\n    md = max(\n        (x1[-1][0] - x1[0][0]) * h,\n        (x2[-1][0] - x2[0][0]) * h,\n        (y1[-1][1] - y1[0][1]) * w,\n        (y2[-1][1] - y2[0][1]) * w,\n    )\n\n    print(md)\n",
                true
            ],
            [
                "R=lambda:list( map(int,input().split()) )\n \nTC,=R()\nwhile TC:\n    A=[]\n    TC=TC-1\n    w,h = R()\n    l1=R()[1:]\n    l2=R()[1:]\n    l3=R()[1:]\n    l4=R()[1:]\n    \n    MH=max(l3+l4)\n    MW=max(l1+l2)\n    \n    A.append( (max(l1)-min(l1)) * max(MH,h)   )\n    A.append( (max(l2)-min(l2)) * max( abs(MH-h), h    ) )\n    A.append(   (max(l3)-min(l3)) * max(MW, w)              )\n    A.append( (max(l4)-min(l4)) * max( abs(MW-w), w    ) )\n    print(max(A))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m=map(int,input().split())\n    x1=list(map(int,input().split()))\n    x2=list(map(int,input().split()))\n    y1=list(map(int,input().split()))\n    y2=list(map(int,input().split()))\n    \n    a1=x1[-1]-x1[1]\n    a2=x2[-1]-x2[1]\n    x=max(a1,a2)\n    a1=y1[-1]-y1[1]\n    a2=y2[-1]-y2[1]\n    y=max(a1,a2)\n    print(max(y*n,x*m))",
                true
            ],
            [
                "def solve(array,dim):\n    base_x1=array[0][-1]-array[0][0]\n    base_x2=array[1][-1]-array[1][0]\n    base_y1=array[2][-1]-array[2][0]\n    base_y2=array[3][-1]-array[3][0]\n    \n    max_area=max(base_x1*dim[1],base_x2*dim[1],base_y1*dim[0],base_y2*dim[0])\n    print(max_area)\n    \n    \n    \nt=int(input())\nfor test_case in range(t):\n    a=list(map(int,input().split()))\n    array=[]\n    for i in range(4):\n        array.append(sorted(list(map(int,input().split()))[1:]))\n    solve(array,a)\n        \n    ",
                true
            ],
            [
                "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\ninteractive = False\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\n\nflush = sys.stdout.flush\nif interactive and not testing:\n    input = sys.stdin.readline\nelse:\n    inputData = InputData()\n    input = inputData.input\n\ndef intin():\n    return(int(eval(input())))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(eval(input())))\ndef strin():\n    return eval(input())\ndef lout(l, sep=\"\\n\", toStr=True):\n    print((sep.join(list(map(str, l)) if toStr else l)))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print((args[0] if len(args)==1 else args))\n    if kargs: print([(k,v) for k,v in list(kargs.items())])\ndef ask(q):\n    sys.stdout.write(str(q)+'\\n')\n    flush()\n    return intin()\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\n\ndef main():\n    w,h = intlin()\n    h1 = intlin()[1:]\n    h2 = intlin()[1:]\n    w1 = intlin()[1:]\n    w2 = intlin()[1:]\n    return max((h1[-1]-h1[0])*h, (h2[-1]-h2[0])*h, (w1[-1]-w1[0])*w, (w2[-1]-w2[0])*w)\n\nanss = []\nfor _ in range(intin()):\n    anss.append(main())\n    # anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print((int(round(time() * 1000))  - start_time))\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    w, h = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    x = max((a[-1] - a[1]), b[-1] - b[1]) * h\n    y = max((c[-1] - c[1]), d[-1] - d[1]) * w\n    print(max(x, y))\n",
                true
            ],
            [
                "def check(x,mat,n,m):\n    flag=False\n    # we want n-1 go to shop so one shop have buy two gift\n    # this flag for this\n    pair=[False]*m\n    for i in range(n):\n        c=0\n        for j in range(m):\n            # print(i,j)\n            if mat[i][j]>=x:\n                pair[j]=True\n                c+=1\n        if c>1:\n            flag=True\n    if (not flag) and m>1:\n        return False\n \n    ans=sum(pair)\n    if ans==m:\n        return True\n \n    return False\n \n    \nimport sys\n \n \n \ndef solve():\n    for t in range(int(input())):\n        w,h=map(int,input().split())\n        h1=list(map(int,input().split()))\n        h2=list(map(int,input().split()))\n        v1=list(map(int,input().split()))\n        v2=list(map(int,input().split()))\n\n        arr=[(h1[-1]-h1[1])*h,(h2[-1]-h2[1])*h,(v1[-1]-v1[1])*w,(v2[-1]-v2[1])*w]\n        \n        print(max(arr))\n            \n        \n        \nsolve()",
                true
            ],
            [
                "for _ in range(int(input())):\n    w,h=map(int,input().split())\n    xa=list(map(int,input().split()))\n    xb=list(map(int,input().split()))\n    ya=list(map(int,input().split()))\n    yb=list(map(int,input().split()))\n    choices = [\n        (xa[-1]-xa[1])*h,(xb[-1]-xb[1])*h,(ya[-1]-ya[1])*w,(yb[-1]-yb[1])*w,]\n    res=max(choices)\n    print(res)\n",
                true
            ],
            [
                "n=int(input())\n\nlista=[]\nfor i in range(n):\n    q=input().split()\n    a = input().split()\n    a=[int(x) for x in a[1:]]\n    c = input().split()\n    c=[int(x) for x in c[1:]]\n    b = input().split()\n    b=[int(x) for x in b[1:]]\n    d = input().split()\n    d=[int(x) for x in d[1:]]\n    x=abs(a[0]-a[-1])*int(q[1])\n    y=abs(c[0]-c[-1])*int(q[1])\n    z=abs(b[0]-b[-1])*int(q[0])\n    w=abs(d[0]-d[-1])*int(q[0])\n    A=max(x,y,z,w)\n    print(A)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    w, h = map(int, input().split())\n    h1 = list(map(int, input().split()))\n    h2 = list(map(int, input().split()))\n    v1 = list(map(int, input().split()))\n    v2 = list(map(int, input().split()))\n    a1 = h1[-1] - h1[1]\n    a2 = h2[-1] - h2[1]\n    a3 = v1[-1] - v1[1]\n    a4 = v2[-1] - v2[1]\n    l1 = max(a1,a2) * h\n    l2 = max(a3,a4) * w\n    print(max(l1,l2))",
                true
            ],
            [
                "def area(x1,y1,x2,y2,x3,y3):\n    #print(x1,y1,x2,y2,x3,y3)\n    return abs((x1*(y2-y3))+(x2*(y3-y1))+(x3*(y1-y2)))\nfor _ in range(int(input())):\n    n,m=[int(a) for a in input().split()]\n    X=list(map(int,input().split()))\n    b=[]\n    for i in X:\n        b.append([i,0])\n    X=b\n    XX=list(map(int,input().split()))\n    b=[]\n    for i in XX:\n        b.append([i,m])\n    XX=b\n    Y=list(map(int,input().split()))\n    b=[]\n    for i in Y:\n        b.append([0,i])\n    Y=b\n    YY=list(map(int,input().split()))\n    b=[]\n    for i in YY:\n        b.append([n,i])\n    YY=b\n    ar=[]\n    #print(X)\n    for i in XX:\n        k=area(X[-1][0],X[-1][1],X[1][0],X[1][1],i[0],i[1])\n        ar.append(k)\n    for i in X:\n        k=area(XX[-1][0],XX[-1][1],XX[1][0],XX[1][1],i[0],i[1])\n        ar.append(k)\n    for i in YY:\n        k=area(Y[-1][0],Y[-1][1],Y[1][0],Y[1][1],i[0],i[1])\n        ar.append(k)\n    for i in Y:\n        k=area(YY[-1][0],YY[-1][1],YY[1][0],YY[1][1],i[0],i[1])\n        ar.append(k)\n    print(max(ar))\n    \n    \n    \n    \n    \n    \n        \n",
                true
            ],
            [
                "from sys import stdin\nimport math\n\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        x = stdin.readline().split()\n        w = int(x[0])\n        h = int(x[1])\n\n        w_1 = stdin.readline().split()[1:]\n        w_2 = stdin.readline().split()[1:]\n        h_1 = stdin.readline().split()[1:]\n        h_2 = stdin.readline().split()[1:]\n        \n        for u in range(len(w_1)):\n            w_1[u] = int(w_1[u])\n        for u in range(len(w_2)):\n            w_2[u] = int(w_2[u])\n        for u in range(len(h_1)):\n            h_1[u] = int(h_1[u])\n        for u in range(len(h_2)):\n            h_2[u] = int(h_2[u])\n\n        w_1.sort()\n        w_2.sort()\n        h_1.sort()\n        h_2.sort()\n\n        a = (w_1[-1]-w_1[0]) * h\n        b = max(((w_2[-1]-w_2[0]) * h), a)\n        c = (h_1[-1]-h_1[0]) * w\n        d = max(((h_2[-1]-h_2[0]) * w), c)\n        print(max(b,d))\n\n    return\n\n\n\nmain()\n",
                true
            ],
            [
                "tests = int(input())\n\nfor _ in range(tests):\n    w, h = map(int, input().split())\n    bottoms = list(map(int, input().split()))\n    tops = list(map(int, input().split()))\n    lefts = list(map(int, input().split()))\n    rights = list(map(int, input().split()))\n\n    print(max([ (bottoms[-1]-bottoms[1])*h, (tops[-1]-tops[1])*h, (lefts[-1]-lefts[1])*w, (rights[-1]-rights[1])*w ]))",
                true
            ],
            [
                "for _ in range(int(input())):\n    w,h=map(int,input().split())\n    a=list(map(int,input().split()))[1:]\n    b=list(map(int,input().split()))[1:]\n    c=list(map(int,input().split()))[1:]\n    d=list(map(int,input().split()))[1:]\n    u=max(a[-1]-a[0],b[-1]-b[0])*h\n    v=max(c[-1]-c[0],d[-1]-d[0])*w\n    print(max(u,v))",
                true
            ],
            [
                "import sys\ntokens = ''.join(sys.stdin.readlines()).split()[::-1]\n\ndef next(): return tokens.pop()\ndef nextInt(): return int(next())\ndef nextFloat(): return float(next())\ndef getIntArray(n): return [nextInt() for _ in range(n)]\ndef getFloatArray(n): return [nextFloat() for _ in range(n)]\ndef getStringArray(n): return [next() for _ in range(n)]\n\n\ntestcase = True\ndef solve(testcase = 1):\n    W, H = nextInt(), nextInt()\n    hori = [getIntArray(nextInt()), getIntArray(nextInt())]\n    vert = [getIntArray(nextInt()), getIntArray(nextInt())]\n\n    ans = 0\n    ans = max(ans, H * max(hori[0][-1] - hori[0][0], hori[1][-1] - hori[1][0]))\n    ans = max(ans, W * max(vert[0][-1] - vert[0][0], vert[1][-1] - vert[1][0]))\n    print(ans)\n\n    pass\n\n\nif testcase is None:\n    testcaseCount = 1\n    while tokens:\n        solve(testcaseCount)\n        testcaseCount += 1\nelse:\n    testcaseCount = nextInt() if testcase else 1\n    for tc in range(testcaseCount):\n        solve(tc + 1)\n    assert not tokens",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    w, h = map(int, input().split())\n    l1 = list(map(int, input().split()))[1:]\n    l2 = list(map(int, input().split()))[1:]\n    l3 = list(map(int, input().split()))[1:]\n    l4 = list(map(int, input().split()))[1:]\n    a = max((max(l1)-min(l1))*h, (max(l3)-min(l3))*w, (max(l2)-min(l2))*h, (max(l4)-min(l4))*w)\n    print(a)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    listt = list(map(int, input().split()))\n    w = listt[0]\n    h = listt[1]\n    x0 = list(map(int, input().split()))\n    mexx0 = x0[-1]-x0[1]\n    x1 = list(map(int, input().split()))\n    mexx1 = x1[-1]-x1[1]\n    y0 = list(map(int, input().split()))\n    mexy0 = y0[-1]-y0[1]\n    y1 = list(map(int, input().split()))\n    mexy1 = y1[-1]-y1[1]\n    mexx0 = max(mexx0,mexx1)\n    mexy0 = max(mexy0, mexy1)\n    print(max(mexx0*h,mexy0*w))",
                true
            ],
            [
                "for t in range(int(input())):\n    w, h = map(int, input().split())\n\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l3 = list(map(int, input().split()))\n    l4 = list(map(int, input().split()))\n\n    print(max(h*(l1[-1]-l1[1]), h*(l2[-1]-l2[1]), w*(l3[-1]-l3[1]), w*(l4[-1]-l4[1])))",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    w, h = map(int,input().split())\n    xyn = list(map(int, input().split()))[1:]\n    xym = list(map(int, input().split()))[1:]\n    xny = list(map(int, input().split()))[1:]\n    xmy = list(map(int, input().split()))[1:]\n    xynm = max(xyn)-min(xyn)\n    xymm = max(xym)-min(xym)\n    xnym = max(xny)-min(xny)\n    xmym = max(xmy)-min(xmy)\n    if max(xynm,xymm)*h > max(xnym,xmym)*w:\n        print(max(xynm,xymm)*h)\n    else:\n        print(max(xnym,xmym)*w)",
                true
            ],
            [
                "t = int(input())\nfor i in range(0,t):\n    w,h = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split()))\n    c = list(map(int,input().split()))\n    d = list(map(int,input().split()))\n    h1 = abs(a[-1] - a[1])\n    h2 = abs(b[-1] - b[1])\n    v1 = abs(c[-1] - c[1])\n    v2 = abs(d[-1] - d[1])\n    #print(h1,h2,v1,v2)\n    a1 = h1* h\n    a2 = h2 * h\n    a3 = v1 * w\n    a4 = v2* w\n    print(max(a1,a2,a3,a4))\n",
                true
            ],
            [
                "def area(x1, y1, x2, y2, x3, y3):\n    d = abs(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))\n    return int(d)\n\nT = int(input())\nfor t in range(T):\n    w, h = map(int, input().split())\n    s1 = list(map(int, input().split()))[1:]\n    s2 = list(map(int, input().split()))[1:]\n    s3 = list(map(int, input().split()))[1:]\n    s4 = list(map(int, input().split()))[1:]\n    \n    ans = -1\n    #First Area - \n    x1, x2 = s1[0], s1[-1]\n    ans = max(area(x1,0,x2,0,0,s3[-1]), ans)\n    for x3 in s2:\n        ans = max(area(x1, 0, x2, 0, x3, h), ans)\n    ans = max(area(x1,0,x2,0,w,s4[-1]), ans)\n    \n    #Second\n    x1, x2 = s2[0], s2[-1]\n    ans = max(area(x1,h,x2,h,0,s3[0]), ans)\n    for x3 in s1:\n        ans = max(area(x1, h, x2, h, x3, 0), ans)\n    ans = max(area(x1,h,x2,h,w,s4[0]), ans)\n    \n    #Third\n    y1, y2 = s3[0], s3[-1]\n    ans = max(area(0, y1, 0, y2, s1[-1], 0), ans)\n    for y3 in s4:\n        ans = max(area(0, y1, 0, y2, w, y3), ans)\n    ans = max(area(0, y1, 0, y2, s2[-1], h),ans)\n    \n    #Fourth\n    y1, y2 = s4[0], s4[-1]\n    ans = max(area(w, y1, w, y2, s1[0], 0), ans)\n    for y3 in s3:\n        ans = max(area(w, y1, w, y2, 0, y3), ans)\n    ans = max(area(w, y1, w, y2, s2[0], h), ans)\n    \n    \n    \n    \n    print(ans)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    w,h=map(int,input().split())\n    h1=list(map(int,input().split()))[1:]\n    h2=list(map(int,input().split()))[1:]\n    v1=list(map(int,input().split()))[1:]\n    v2=list(map(int,input().split()))[1:]\n    h1=max(max(h1)-min(h1),max(h2)-min(h2))\n    v=max(max(v1)-min(v1),max(v2)-min(v2))\n    print(max(v*w,h1*h))",
                true
            ],
            [
                "for q in range(int(input())):\n    w, h = map(int,input().split())\n    x_coords = list(map(int,input().split()))[1:]\n    x_coords2 = list(map(int, input().split()))[1:]\n    y_coords = list(map(int, input().split()))[1:]\n    y_coords2 = list(map(int, input().split()))[1:]\n\n    ans= []\n\n    base1 = x_coords[-1] - x_coords[0]\n    height1 = h\n    ans.append(base1*height1)\n    base1 = x_coords2[-1] - x_coords2[0]\n    ans.append(base1*height1)\n\n    base2 = y_coords[-1] - y_coords[0]\n    height2 = w\n    ans.append(base2*height2)\n    base2 = y_coords2[-1] - y_coords2[0]\n    ans.append(base2*height2)\n    print(max(ans))",
                true
            ],
            [
                "for _ in range(int(input())):\n    w,h = map(int,input().split())\n    w1 = list(map(int,input().split()))\n    w1 = w1[1:]\n    w2 = list(map(int,input().split()))\n    w2 = w2[1:]\n    h1 = list(map(int,input().split()))\n    h1 = h1[1:]\n    h2 = list(map(int,input().split()))\n    h2 = h2[1:]\n    area = h*(max(w1)-min(w1))\n    area1 = h*(max(w2)-min(w2))\n    area2 = w*(max(h1)-min(h1))\n    area3 = w*(max(h2)-min(h2))\n    print(max(area,area1,area2,area3))\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,y=map(int,input().split())\n    ans=0\n    for i in range(4):\n        l=list(map(int,input().split()))\n        if(i<2):\n            ans=max(ans,(l[-1]-l[1])*y)\n        else:\n            ans=max(ans,(l[-1]-l[1])*x)\n    print(ans)",
                true
            ],
            [
                "import sys\nfrom itertools import permutations\n\nn = int(sys.stdin.readline().rstrip(\"\\n\"))\nfor _ in range(n):\n    w, h = list(map(int,sys.stdin.readline().rstrip(\"\\n\").split(\" \")))\n    x1 = list(map(int,sys.stdin.readline().rstrip(\"\\n\").split(\" \")))\n    x2 = list(map(int,sys.stdin.readline().rstrip(\"\\n\").split(\" \")))\n    y1 = list(map(int,sys.stdin.readline().rstrip(\"\\n\").split(\" \")))\n    y2 = list(map(int,sys.stdin.readline().rstrip(\"\\n\").split(\" \")))\n    ans = 0\n    corner_points = [(x1[1],0), (x1[-1],0), (x2[1], h), (x2[-1],h), (0,y1[1]), (0,y1[-1]),(w,y2[1]),(w,y2[-1])]\n    for i in permutations(range(4),2):\n        p1 = corner_points[i[0]*2]\n        p2 = corner_points[i[0]*2+1]\n        p3 = corner_points[i[1]*2]\n        area = abs((p1[0]*p2[1]+ p2[0]*p3[1]+p3[0]*p1[1]-p2[0]*p1[1]-p3[0]*p2[1]-p1[0]*p3[1]))\n        ans = max(ans, area)\n    print(ans)\n",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    w, h = map(int, input().split())\n    h1 = input().split()\n    h2 = input().split()\n    v1 = input().split()\n    v2 = input().split()\n    print(max(h * max(int(h1[-1])-int(h1[1]), int(h2[-1])-int(h2[1])),\n              w * max(int(v1[-1])-int(v1[1]), int(v2[-1])-int(v2[1]))))\n",
                true
            ],
            [
                "a = int(input())\nfor x in range(a):\n    b,c = map(int,input().split())\n    e = list(map(int,input().split()))\n    f = list(map(int,input().split()))\n    g = list(map(int,input().split()))\n    h = list(map(int,input().split()))\n    j = max(c*(e[-1]-e[1]) , c * (f[-1]-f[1]) , b *(g[-1]-g[1]) , b* (h[-1]-h[1]))\n    print(j)",
                true
            ],
            [
                "\n# def hello(first_name,last_name,age) :\n#     print(\"Hello {} {},{} years old!\".format(first_name,last_name,age));\n#\n# hello(\"Nguyen\",'Thuan',19)\n\n# def multiply(number1,number2) :\n#     result=number2*number1;\n#     return  result;\n#     # return number1*number2;\n#\n# x= multiply(6,11);\n# print(x);\n\n# key work argument\n\n# def hello(first,middle,last):\n#     print(\"hello \"+first+' '+middle+' '+last);\n#\n# hello(last=\"code\",first=\"Bro\",middle=\"die\")\n\n# Nested functions calls\n\n# num=input(\"Enter a whole positive number : \");\n# num=float(num);\n# num=abs(num);\n# num=round(num);\n# print(num);\n\n# print(round(abs(float(input(\"Enter a whole positives number :\")))));\n\n# *Args\n\n# def add(*rest):\n#     sum=0;\n#     rest=list(rest);\n#\n#     for x in rest :\n#         sum+=x;\n#     return sum;\n#\n# print(add(1,2,3,4,5))\n\n### **Args\n\n# def hello(**kwargs):\n#     print(kwargs['title'])\n#     print(\"hello\",end=\" \");\n#     for key,value in kwargs.items() :\n#         print(value,end=\" \");\n#\n# hello(title=\"Mr. \",first=\"Thuan\",middle=\"Pro\",last=\"Code\");\nt = int(input())\nfor i in range(t):\n    w, h = map(int, input().split())\n    x1 = list(map(int, input().split()))\n    x2 = list(map(int, input().split()))\n    y1 = list(map(int, input().split()))\n    y2 = list(map(int, input().split()))\n    x1 = x1[1:]\n    x2 = x2[1:]\n    y1 = y1[1:]\n    y2 = y2[1:]\n    a1 = (max(x1) - min(x1)) * h\n    a2 = (max(x2) - min(x2)) * h\n    a3 = (max(y1) - min(y1)) * w\n    a4 = (max(y2) - min(y2)) * w\n    arr = [a1, a2, a3, a4]\n    print(max(arr))\n",
                true
            ],
            [
                "t=int(input())\n\n\ndef solve(h,arr,brr):\n    b=0\n    arr.sort()\n    brr.sort()\n    if len(arr)>1:\n        b=arr[len(arr)-1]-arr[0]\n    if len(brr)>1:\n        b=max(b,brr[len(brr)-1]-brr[0])\n\n    return b*h\nwhile t>0:\n    t-=1\n    w,h=[int(x) for x in input().split(' ')]\n    arr=[int(x) for x in input().split(' ')]\n    brr=[int(x) for x in input().split(' ')]\n    arr1=[int(x) for x in input().split(' ')]\n    brr1=[int(x) for x in input().split(' ')]\n    print(max(solve(h,list(arr[1:]),list(brr[1:])),solve(w,list(arr1[1:]),list(brr1[1:]))))\n",
                true
            ],
            [
                "def solve(w,h,horizntale0,horizntaleH,vertical0,verticalW):\n    a=(horizntale0[-1]-horizntale0[0])*h\n    b=(horizntaleH[-1]-horizntaleH[0])*h\n    c=(vertical0[-1]-vertical0[0])*w\n    d=(verticalW[-1]-verticalW[0])*w\n    print(max(a,b,c,d))\n\n\n\nt=int(input())\nfor _ in range(t):\n    w,h=list(map(int,input().strip().split()))\n    horizntale0=list(map(int,input().strip().split()))[1:]\n    horizntaleH=list(map(int,input().strip().split()))[1:]\n    vertical0=list(map(int,input().strip().split()))[1:]\n    verticalW=list(map(int,input().strip().split()))[1:]\n    solve(w,h,horizntale0,horizntaleH,vertical0,verticalW)",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\n\n#sys.stdin=open('input.txt','r')\nfor _ in range(int(input())):\n    w,h=map(int,input().split())\n    \n    \n    val=[]\n    for i in range(4):\n        ar1=list(map(int,input().split()))\n        v1=abs(ar1[-1]-ar1[1])\n        val.append(v1)\n        \n    ans=0\n    \n    ans=max(ans,val[0]*h)\n    ans=max(ans,val[1]*h)\n    ans=max(ans,val[2]*w)\n    ans=max(ans,val[3]*w)\n    print(ans)\n    ",
                true
            ],
            [
                "# cook your dish here\nt = int(input()) \nwhile t!=0:\n    w,h=[int(x) for x in input().split()]\n    x1 = [int(x) for x in input().split()]\n    x2 = [int(x) for x in input().split()]\n    y1 = [int(x) for x in input().split()]\n    y2 = [int(x) for x in input().split()]\n    x1 =x1[1:]\n    x2 =x2[1:]\n    y1 =y1[1:]\n    y2 =y2[1:]\n    x1.sort()\n    x2.sort()\n    y1.sort()\n    y2.sort()\n    x1max=x1[-1]-x1[0]\n    x2max=x2[-1]-x2[0]\n    y1max=y1[-1]-y1[0]\n    y2max=y2[-1]-y2[0]\n    maxmax = max([x1max*h,x2max*h,y1max*w,y2max*w])\n    print(maxmax)\n    t-=1",
                true
            ],
            [
                "N = int(input())\nfor i in range(N):\n    w, h = map(int, input().split())\n    max_area = 0\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l3 = list(map(int, input().split()))\n    l4 = list(map(int, input().split()))\n    max_area = max(max_area, (l1[-1] - l1[1]) * h)\n    max_area = max(max_area, (l2[-1] - l2[1]) * h)\n    max_area = max(max_area, (l3[-1] - l3[1]) * w)\n    max_area = max(max_area, (l4[-1] - l4[1]) * w)\n    print(max_area)",
                true
            ],
            [
                "for _ in range(int(input())):\n    w, h = map(int, input().split())\n    w1 = list(map(int, input().split()))\n    w2 = list(map(int, input().split()))\n    h1 = list(map(int, input().split()))\n    h2 = list(map(int, input().split()))\n    w1.pop(0)\n    w2.pop(0)\n    h1.pop(0)\n    h2.pop(0)\n    ans = [(max(w1) - min(w1)) * h, (max(w2) - min(w2)) * h, (max(h1) - min(h1)) * w, (max(h2) - min(h2)) * w]\n    print(max(ans))\n",
                true
            ],
            [
                "t = int(input())\nfor test_case in range(t):\n    w, h = map(int, input().split())\n    x_firstLine = list(map(int, input().split()))\n    x_secondLine = list(map(int, input().split()))\n    y_firstLine = list(map(int, input().split()))\n    y_secondLine = list(map(int, input().split()))\n    x_firstLine_distance = x_firstLine[-1] - x_firstLine[1]\n    x_secondLine_distance = x_secondLine[-1] - x_secondLine[1]\n    y_firstLine_distance = y_firstLine[-1] - y_firstLine[1]\n    y_secondLine_distance = y_secondLine[-1] - y_secondLine[1]\n\n    if x_firstLine_distance > x_secondLine_distance:\n        highest_distance_x = x_firstLine_distance\n    else:\n        highest_distance_x = x_secondLine_distance\n\n    if y_firstLine_distance > y_secondLine_distance:\n        highest_distance_y = y_firstLine_distance\n    else:\n        highest_distance_y = y_secondLine_distance\n\n    Area_1 = highest_distance_x * h\n    Area_2 = highest_distance_y * w\n    if Area_1 > Area_2:\n        print(Area_1)\n    else:\n        print(Area_2)\n\n",
                true
            ],
            [
                "#for line in sys.stdin.readlines()...line = line.strip()\n#list(map(int,input().split(\" \")))\n#list(itertools.permutations([..,..,..]))\n#list(itertools.combinations([..,..,..], 3)\n\nimport sys\nimport re\nimport math\nfrom math import log2 as lg\nfrom collections import deque\nimport random\nimport heapq\nimport itertools\nconst = 1000000007\nep = 1e-8\n\nn=int(input())\nfor i in range(n):\n    line = list(map(int,input().split()))\n    w,h=line[0],line[1]\n    best = 0\n    for j in range(4):\n        curr = list(map(int,input().split()))\n        if j==0 or j==1:best = max(best,(curr[-1]-curr[1])*h)\n        else: best = max(best,(curr[-1]-curr[1])*w)\n    print(best)\n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    res = []\n\n    w, h = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()][1:]\n    b = [int(x) for x in input().split()][1:]\n    c = [int(x) for x in input().split()][1:]\n    d = [int(x) for x in input().split()][1:]\n\n    res.append(h * (a[-1] - a[0]))\n    res.append(h * (b[-1] - b[0]))\n    res.append(w * (c[-1] - c[0]))\n    res.append(w * (d[-1] - d[0]))\n\n    print(max(res))",
                true
            ],
            [
                "def find_points(l : list):\n    if len(l) >= 2:\n        min_point, max_point = l[0], l[-1]\n        return True, min_point, max_point\n\n    else:\n        max_point = l[-1]\n        return False, 0, max_point\n\ntests = int(input())\nfor test in range(tests):\n    w, h = map(int, input().split())\n    up = list(map(int, input().split()))[1:]\n    down = list(map(int, input().split()))[1:]\n\n    right = list(map(int, input().split()))[1:]\n    left = list(map(int, input().split()))[1:]\n\n    up = find_points(up)\n    down = find_points(down)\n    right = find_points(right)\n    left = find_points(left)\n\n    ans_1 = (up[2] - up[1]) * h\n    ans_2 = (down[2] - down[1]) * h\n    ans_3 = (right[2] - right[1]) * w\n    ans_4 = (left[2] - left[1]) * w\n\n    print(max(ans_1, ans_2, ans_3, ans_4))",
                true
            ],
            [
                "for t in range(int(input())):\n    w, h = map(int, input().split(\" \"))\n    m = -1\n    for i in range(4):\n        a = list(map(int, input().split(\" \")))[1:]\n        if i < 2: m = max(m, (max(a) - min(a)) * h)\n        else: m = max(m, (max(a) - min(a)) * w)\n    print(m)\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    w, h = map(int, input().split())\n\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n    stol1 = list(map(int, input().split()))\n    stol2 = list(map(int, input().split()))\n\n    m = max((s1[-1] - s1[1]) * h, (s2[-1] - s2[1]) * h, (stol1[-1] - stol1[1]) * w, (stol2[-1] - stol2[1]) * w)\n\n\n\n    print(m)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    w,h=map(int,input().split())\n    l1=list(map(int,input().split()))\n    l2=list(map(int,input().split()))\n    l3=list(map(int,input().split()))\n    l4=list(map(int,input().split()))\n    b=[]\n    b.append(l1[-1]-l1[1])\n    b.append(l2[-1]-l2[1])\n    b.append(l3[-1]-l3[1])\n    b.append(l4[-1]-l4[1])\n    ans=[]\n    ans.append(h*b[0])\n    ans.append(h*b[1])\n    ans.append(w*b[2])\n    ans.append(w*b[3])\n    print(max(ans))",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    w,h = list(map(int,input().split()))\n    a = list(map(int,input().split()))[1:]\n    a1 = list(map(int,input().split()))[1:]\n    b = list(map(int,input().split()))[1:]\n    b1 = list(map(int,input().split()))[1:]\n    print(max(h*(max(a)-min(a)),h*(max(a1)-min(a1)),w*(max(b)-min(b)),w*(max(b1)-min(b1))))\n",
                true
            ],
            [
                "test=int(input())\nfor t in range(test):\n    l=list(map(int,input().split()))\n    w,h=l[0],l[1]\n    l1=list(map(int,input().split()))\n\n    l2 = list(map(int, input().split()))\n\n    l3 = list(map(int, input().split()))\n\n    l4 = list(map(int, input().split()))\n    \n    x1,x2=h*abs(l1[1]-l1[len(l1)-1]),h*abs(l2[1]-l2[len(l2)-1])\n    y1,y2=w*abs(l3[1]-l3[len(l3)-1]),w*abs(l4[1]-l4[len(l4)-1])\n    c=max(max(x1,x2),max(y1,y2))\n    print(c)\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "from collections import defaultdict\nfrom math import gcd\nfrom os import path, truncate\nfrom sys import int_info, stdin, stdout\nif path.exists('tc.txt'):\n    stdin = open('tc.txt', 'r')\ndef gmi(): return map(int, stdin.readline().strip().split())\ndef gms(): return map(str, stdin.readline().strip().split())\ndef gari(): return list(map(int, stdin.readline().strip().split()))\ndef gart(): return tuple(map(int, stdin.readline().strip().split()))\ndef gars(): return list(map(str, stdin.readline().strip().split()))\ndef gs(): return stdin.readline().strip()\ndef gls(): return list(stdin.readline().strip())\ndef gi(): return int(stdin.readline())\n\nfor _ in range(gi()):\n    w,h=map(int,input().split())\n    xw=list(map(int,input().split()))\n    xwh = list(map(int, input().split()))\n    yh = list(map(int, input().split()))\n    yhw = list(map(int, input().split()))\n    a=(xw[-1]-xw[1])*h\n    b=(xwh[-1]-xwh[1])*h\n    c=(yh[-1]-yh[1])*w\n    d=(yhw[-1]-yhw[1])*w\n    ab=max(a,b)\n    cd=max(c,d)\n    print(max(ab,cd))",
                true
            ],
            [
                "a = int(input())\ni = 0\nwhile i<a:\n    b = list(map(int,input().split(\" \")))\n    c = list(map(int,input().split(\" \")))\n    d = list(map(int,input().split(\" \")))\n    e = list(map(int,input().split(\" \")))\n    f = list(map(int,input().split(\" \")))\n    c.pop(0)\n    d.pop(0)\n    e.pop(0)\n    f.pop(0)\n    g = (max(c)-min(c))*b[1]\n    h = (max(d)-min(d))*b[1]\n    p = (max(e)-min(e))*b[0]\n    j = (max(f)-min(f))*b[0]\n    print(max(g,h,p,j))\n    i=i+1\n\n\n",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    w, h = map(int, input().split())\n    h1 = list(map(int, input().split()))\n    h2 = list(map(int, input().split()))\n    v1 = list(map(int, input().split()))\n    v2 = list(map(int, input().split()))\n    print(max((h1[-1]-h1[1])*h, (h2[-1]-h2[1]) *\n              h, (v1[-1]-v1[1])*w, (v2[-1]-v2[1])*w))\n",
                true
            ],
            [
                "t= int(input())\nres=[]\nfor i in range(t):\n    l=input().split()\n    w=int(l[0])\n    h=int(l[1])\n    max=0\n    for i in range(4):\n        s=input().split()\n        s=[int(j) for j in s]\n\n        if i==0 or i== 1:\n        \n            temp = (s[-1]-s[1])*h\n            if max<temp: max=temp\n            # print(\"temp is \",temp)\n            \n        \n        else:\n        \n            temp = (s[-1]-s[1])*w\n            if max<temp: max=temp\n            # print(\"temp is \",temp)\n            \n        \n    res.append(max)\n\nfor i in res:\n    print(i)\n\n\n\n\n",
                true
            ],
            [
                "# '''\n#      |\\_/|                  \n#      | @ @   Woof! \n#      |   <>              _  \n#      |  _/\\------____ ((| |))\n#      |               `--' |   \n#  ____|_       ___|   |___.' \n# /_/_____/____/_______|\n# I am here to guard this code, woof!\n# '''\n\n\n\nimport sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\n \nint_max = float('inf')\nint_min = -(float('inf'))\nmod = 10**9 + 7\nANS = []\n# infile = open(sys.argv[1], \"r\")\n# input = infile.readline\ninput = stdin.readline\n \ndef solve():\n    pass\n \nt = int(input())\n# t = 1\n \nfor i in range(t):\n    # n = int(input())\n    w, h = map(int, input().split())\n    a1 =  list(map(int, input().split()))\n    a2 =  list(map(int, input().split()))\n    b1 =  list(map(int, input().split()))\n    b2 =  list(map(int, input().split()))\n    # arr = list(input())\n    \n    maxx = -1\n    maxx = max(maxx, h*(a1[-1] - a1[1]), h*(a2[-1] - a2[1]))\n    maxx = max(maxx, w*(b1[-1] - b1[1]), w*(b2[-1] - b2[1]))\n    print(maxx)\n\n# print('\\n'.join(ANS))",
                true
            ],
            [
                "k = int(input())\nfor _ in range(k):\n    w, h = [int(x) for x in input().split()]\n    x1 = sorted([int(x) for x in input().split()][1:])\n    x2 = sorted([int(x) for x in input().split()][1:])\n    y1 = sorted([int(x) for x in input().split()][1:])\n    y2 = sorted([int(x) for x in input().split()][1:])\n    a = max(h * (x1[-1] - x1[0]), h * (x2[-1] - x2[0]),\n            w * (y1[-1] - y1[0]), w * (y2[-1] - y2[0]))\n    print(a)",
                true
            ],
            [
                "t = int(input())\n#import collections\n\nfor caseNr in range(1, t + 1):\n    #n = int(input())\n    w, h = list(map(int, input().split()))\n    #n2, p2 = input().split()\n    \n    #arr = list(map(int, input().split()))\n    #n, a, b = list(map(int, input().split()))\n    #board1 = list(map(int, input().split()))\n    #board2 = list(map(int, input().split()))\n    #num = int(input())\n    #arr = list(input())\n    #print(arr)\n    #string = str(input())\n    #print(arr)\n    #print(arr[0:2])\n    x0s = list(map(int, input().split()))\n    xhs = list(map(int, input().split()))\n    _0ys = list(map(int, input().split()))\n    wys = list(map(int, input().split()))\n    \n    x0s = [[f,0] for f in x0s[1:]]\n    xhs = [[f,h] for f in xhs[1:]]\n    _0ys = [[0,f] for f in _0ys[1:]]\n    wys = [[w,f] for f in wys[1:]]\n    \n    \"\"\"\n    print(x0s)\n    print(xhs)\n    print(_0ys)\n    print(wys)\n    \"\"\"\n    \n    cur_max = 0    \n\n    firstA = x0s[0]\n    firstB = x0s[-1]\n    #print(firstA)\n    #print(firstB)\n    for eleC in xhs:\n        #print(eleC)\n        cur_area = abs(firstA[0]*(firstB[1]-eleC[1])+firstB[0]*(eleC[1]-firstA[1])+eleC[0]*(firstA[1]-firstB[1]))\n        cur_max = max(cur_max,cur_area)\n    for eleC in _0ys:\n        #print(eleC)\n        cur_area = abs(firstA[0]*(firstB[1]-eleC[1])+firstB[0]*(eleC[1]-firstA[1])+eleC[0]*(firstA[1]-firstB[1]))\n        cur_max = max(cur_max,cur_area)\n    for eleC in wys:\n        #print(eleC)\n        cur_area = abs(firstA[0]*(firstB[1]-eleC[1])+firstB[0]*(eleC[1]-firstA[1])+eleC[0]*(firstA[1]-firstB[1]))\n        cur_max = max(cur_max,cur_area)\n                      \n    firstA = xhs[0]\n    firstB = xhs[-1]\n    for eleC in x0s:\n        cur_area = abs(firstA[0]*(firstB[1]-eleC[1])+firstB[0]*(eleC[1]-firstA[1])+eleC[0]*(firstA[1]-firstB[1]))\n        cur_max = max(cur_max,cur_area)\n    for eleC in _0ys:\n        cur_area = abs(firstA[0]*(firstB[1]-eleC[1])+firstB[0]*(eleC[1]-firstA[1])+eleC[0]*(firstA[1]-firstB[1]))\n        cur_max = max(cur_max,cur_area)\n    for eleC in wys:\n        cur_area = abs(firstA[0]*(firstB[1]-eleC[1])+firstB[0]*(eleC[1]-firstA[1])+eleC[0]*(firstA[1]-firstB[1]))\n        cur_max = max(cur_max,cur_area)\n                      \n    firstA = _0ys[0]\n    firstB = _0ys[-1]\n    for eleC in x0s:\n        cur_area = abs(firstA[0]*(firstB[1]-eleC[1])+firstB[0]*(eleC[1]-firstA[1])+eleC[0]*(firstA[1]-firstB[1]))\n        cur_max = max(cur_max,cur_area)\n    for eleC in xhs:\n        cur_area = abs(firstA[0]*(firstB[1]-eleC[1])+firstB[0]*(eleC[1]-firstA[1])+eleC[0]*(firstA[1]-firstB[1]))\n        cur_max = max(cur_max,cur_area)\n    for eleC in wys:\n        cur_area = abs(firstA[0]*(firstB[1]-eleC[1])+firstB[0]*(eleC[1]-firstA[1])+eleC[0]*(firstA[1]-firstB[1]))\n        cur_max = max(cur_max,cur_area)\n        \n    firstA = wys[0]\n    firstB = wys[-1]\n    for eleC in x0s:\n        cur_area = abs(firstA[0]*(firstB[1]-eleC[1])+firstB[0]*(eleC[1]-firstA[1])+eleC[0]*(firstA[1]-firstB[1]))\n        cur_max = max(cur_max,cur_area)\n    for eleC in xhs:\n        cur_area = abs(firstA[0]*(firstB[1]-eleC[1])+firstB[0]*(eleC[1]-firstA[1])+eleC[0]*(firstA[1]-firstB[1]))\n        cur_max = max(cur_max,cur_area)\n    for eleC in _0ys:\n        cur_area = abs(firstA[0]*(firstB[1]-eleC[1])+firstB[0]*(eleC[1]-firstA[1])+eleC[0]*(firstA[1]-firstB[1]))\n        cur_max = max(cur_max,cur_area)\n    \n    print(cur_max)",
                true
            ],
            [
                "a=int(input())\nside=[]\n\nfor i in range(a):\n    x,y=list(map(int,input().split(' ')))\n    i1=list(map(int,input().split(' ')))\n    i2=list(map(int,input().split(' ')))\n    i3=list(map(int,input().split(' ')))\n    i4=list(map(int,input().split(' ')))\n    \n    if i1[-1]-i1[1] > i2[-1]-i2[1] :\n        p1=[i1[1],i1[-1]]\n    else:\n        p1=[i2[1],i2[-1]]\n    \n    if i3[-1]-i3[1] > i4[-1]-i4[1] :\n        p2=[i3[1],i3[-1]]\n    else:\n        p2=[i4[1],i4[-1]]\n    \n    #print(\"x,y\",x,y)\n    #print(\"p1\",p1,y*(p1[1]-p1[0]))\n    #print(\"p2\",p2,x*(p2[1]-p2[0]))\n    aa=y*(p1[1]-p1[0])\n    bb=x*(p2[1]-p2[0])\n    if aa > bb:\n        print(aa)\n    else:\n        print(bb)\n    ",
                true
            ],
            [
                "def solve(A,B,C,D,w,h):\n    a=max(A)-min(A)\n    b=max(B)-min(B)\n    c=max(C)-min(C)\n    d=max(D)-min(D)\n    m1 = max(a,b)\n    m2 = max(c,d)\n    return(max(m1*h,m2*w))\nfor _ in range(int(input())):\n    w,h = map(int,input().split(\" \"))\n    A = list(map(int,input().split(\" \")))[1::]\n    B = list(map(int,input().split(\" \")))[1::]\n    C = list(map(int,input().split(\" \")))[1::]\n    D = list(map(int,input().split(\" \")))[1::]\n    print(solve(A,B,C,D,w,h))\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n   a,b=map(int,input().split())\n   a1=list(map(int,input().split()))\n   a2=list(map(int,input().split()))\n   a3=list(map(int,input().split()))\n   a4=list(map(int,input().split()))\n   res1=res2=res3=res4=0\n   if len(a1)>2:\n       res1=abs(a1[1]-a1[-1])*b\n   if len(a2) > 2:\n       res2 = abs(a2[1] - a2[-1]) *b\n   if len(a3) > 2:\n       res3 = abs(a3[1] - a3[-1]) * a\n   if len(a4) > 2:\n       res4= abs(a4[1] - a4[-1]) * a\n   print(max(res1,res2,res3,res4))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    w,h=map(int,input().split())\n    a1=list(map(int,input().split()))\n    a2=list(map(int,input().split()))\n    a3=list(map(int,input().split()))\n    a4=list(map(int,input().split()))\n    x1=a1[-1]-a1[1]\n    x2=a2[-1]-a2[1]\n    x3=a3[-1]-a3[1]\n    x4=a4[-1]-a4[1]\n    print(max(x1*h, x2*h, x3*w, x4*w))",
                true
            ],
            [
                "for _ in range(int(input())):\n    w, h = map(int, input().split())\n    _, *hor_b = map(int, input().split())\n    _, *hor_r = map(int, input().split())\n    _, *ver_b = map(int, input().split())\n    _, *ver_r = map(int, input().split())\n    A1 = h * (max(hor_b) - min(hor_b))\n    A2 = h * (max(hor_r) - min(hor_r))\n    A3 = w * (max(ver_b) - min(ver_b))\n    A4 = w * (max(ver_r) - min(ver_r))\n    print(max(A1, A2, A3, A4))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n  m, n = map(int, input().split())\n  res = 0\n  for i in range(4):\n    a = [int(x) for x in input().split()][1:]\n    res = max(res, (a[-1] - a[0]) * (n if i < 2 else m))\n  print(res)",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    w, h = tuple(map(int, input().split()))\n\n    l0h = list(map(int, input().split()))[1:]\n    lhh = list(map(int, input().split()))[1:]\n    l0v = list(map(int, input().split()))[1:]\n    lwv = list(map(int, input().split()))[1:]\n\n    areax, areay = max(l0h[-1] - l0h[0], lhh[-1] - lhh[0])*h, max(l0v[-1] - l0v[0], lwv[-1] - lwv[0])*w\n\n    print(max(areax, areay))\n    \n",
                true
            ],
            [
                "# number of test cases\nt = int(input())\ndim = []\nx_0 = []\nx_h = []\ny_0 = []\ny_w = []\nfor i in range(t):\n    dim.append(list(map(int, input().split())))\n    x_0.append([int(x) for x in input().split()])\n    x_h.append([int(x) for x in input().split()])\n    y_0.append([int(x) for x in input().split()])\n    y_w.append([int(x) for x in input().split()])\n\n# area of triangle = hb/2 where\nfor i in range(t):\n    x_0[i].pop(0)\n    x_h[i].pop(0)\n    y_0[i].pop(0)\n    y_w[i].pop(0)\n    w = dim[i][0]\n    h = dim[i][1]\n    x_0a = (max(x_0[i]) - min(x_0[i])) * h\n    x_ha = (max(x_h[i]) - min(x_h[i])) * h\n    y_0a = (max(y_0[i]) - min(y_0[i])) * w\n    y_wa = (max(y_w[i]) - min(y_w[i])) * w\n    ans = max([x_0a, x_ha, y_0a, y_wa])\n    print(ans)\n\n",
                true
            ],
            [
                "from sys import stdin \nfor _ in range(int(stdin.readline())):\n    w,h=map(int,stdin.readline().split())\n    y0=list(map(int,stdin.readline().split()))\n    yh=list(map(int,stdin.readline().split()))\n    x0=list(map(int,stdin.readline().split()))\n    xw=list(map(int,stdin.readline().split()))\n    a=(y0[-1]-y0[1])*h\n    b=(yh[-1]-yh[1])*h\n    c=(x0[-1]-x0[1])*w\n    d=(xw[-1]-xw[1])*w \n    print(max(a,b,c,d))",
                true
            ],
            [
                "t=int(input())\nfor k in range(t):\n    x,y=map(int,input().split())\n    l1=list(map(int,input().split()))\n    l2=list(map(int,input().split()))\n    l3=list(map(int,input().split()))\n    l4=list(map(int,input().split()))\n    m1=(l1[-1]-l1[1])*y\n    m2=(l2[-1]-l2[1])*y\n    m3=(l3[-1]-l3[1])*x\n    m4=(l4[-1]-l4[1])*x\n    res=max([m1,m2,m3,m4])\n    print(res)",
                true
            ],
            [
                "t = int(input())\nwhile t:\n    t -= 1\n    w,h = map(int,input().split())\n    h1 =  list(map(int,input().split()))\n    h2 = list(map(int,input().split()))\n    v1 =  list(map(int,input().split()))\n    v2 = list(map(int,input().split()))\n    mh = h*max((h1[-1] - h1[1]),(h2[-1] - h2[1]))\n    mv = w*max((v1[-1] - v1[1]),(v2[-1] - v2[1]))\n    print(max(mh,mv))",
                true
            ],
            [
                "# Get pair of points farthest from each other on both sides \n# and form triangle with point on opposite side\n\ncases = int(input())\n\nfor _ in range(cases):\n    w, h = map(int, input().split())\n    # y coordinate is 0\n    points_down = list(map(int, input().split()))[1:]\n    # y coordinate is h\n    points_up = list(map(int, input().split()))[1:]\n    # x coordinate is 0\n    points_left = list(map(int, input().split()))[1:]\n    # x coordinate is w\n    points_right = list(map(int, input().split()))[1:]\n\n    max_dist = 0\n    # bottom triangle\n    dist_down = points_down[-1] - points_down[0] \n    tri_down = dist_down * h\n    max_dist = max(tri_down, max_dist)\n    # upper triangle\n    dist_up = points_up[-1] - points_up[0] \n    tri_up = dist_up * h\n    max_dist = max(tri_up, max_dist)\n    # left tri\n    dist_left = points_left[-1] - points_left[0]\n    tri_left = dist_left * w\n    max_dist = max(tri_left, max_dist)\n    # right tri\n    dist_right = points_right[-1] - points_right[0]\n    tri_right = dist_right * w\n    max_dist = max(tri_right, max_dist)\n\n    print(max_dist)\n\n    ",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nA robot cleaner is placed on the floor of a rectangle room, surrounded by walls. The floor consists of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom, and columns of the floor are numbered from 1 to m from left to right. The cell on the intersection of the r-th row and the c-th column is denoted as (r,c). The initial position of the robot is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, that is, after one second, the robot moves from the cell (r, c) to (r + dr, c + dc). Initially dr = 1, dc = 1. If there is a vertical wall (the left or the right walls) in the movement direction, dc is reflected before the movement, so the new value of dc is -dc. And if there is a horizontal wall (the upper or lower walls), dr is reflected before the movement, so the new value of dr is -dr.\n\nEach second (including the moment before the robot starts moving), the robot cleans every cell lying in the same row or the same column as its position. There is only one dirty cell at (r_d, c_d). The job of the robot is to clean that dirty cell.\n\n<image> Illustration for the first example. The blue arc is the robot. The red star is the target dirty cell. Each second the robot cleans a row and a column, denoted by yellow stripes.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the time for the robot to do its job.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 \u2264 n, m \u2264 100, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m) \u2014 the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer \u2014 the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\nExample\n\nInput\n\n\n5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n\n\nOutput\n\n\n7\n10\n9\n3\n0\n\nNote\n\nIn the first example, the floor has the size of 10\u00d7 10. The initial position of the robot is (6, 1) and the position of the dirty cell is (2, 8). See the illustration of this example in the problem statement.\n\nIn the second example, the floor is the same, but the initial position of the robot is now (9, 9), and the position of the dirty cell is (1, 1). In this example, the robot went straight to the dirty cell and clean it. \n\n<image>\n\nIn the third example, the floor has the size 9 \u00d7 8. The initial position of the robot is (5, 6), and the position of the dirty cell is (2, 1). \n\n<image>\n\nIn the fourth example, the floor has the size 6 \u00d7 9. The initial position of the robot is (2, 2) and the position of the dirty cell is (5, 8). \n\n<image>\n\nIn the last example, the robot was already standing in the same column as the dirty cell, so it can clean the cell right away. \n\n<image>\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import heapq\nfrom collections import Counter\nimport math\nimport sys\ninput = sys.stdin.readline\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\ndef inis():\n    return(input().split())\n###################################################\n\n# # Code to find top 3 elements and their counts\n# # using most_common\n#\n# arr = [1, 3, 4, 1, 2, 1, 1, 3, 4, 3, 5, 1, 2, 5, 3, 4, 5]\n# counter = Counter(arr)\n# top_three = counter.most_common()\n# print(sorted(top_three))\n#\n#\n# # Python code to find 3 largest and 4 smallest\n# # elements of a list.\n#\n# grades = [110, 25, 38, 49, 20, 95, 33, 87, 80, 90, 110]\n# print(heapq.nlargest(3, grades))\n# print(heapq.nsmallest(4, grades))\n\n###########---------Code Here------------##############\nfor _ in range(inp()):\n    a, b, c, d, e, f = invr()\n    x = y = 1\n    t = 0\n    while c != e and d != f:\n        if c != a:\n            c += x\n        else:\n            x = -x\n            c += x\n        if d != b:\n            d += y\n        else:\n            y = -y\n            d += y\n        t += 1\n    print(t)\n",
                true
            ],
            [
                "class io:\n  s = input\n  i = lambda: int(io.s())\n  f = lambda: float(io.s())\n  ts = lambda: io.s().split()\n  ti = lambda: map(int, io.ts())\n  tf = lambda: map(float, io.ts())\n  ls = lambda: list(io.ts())\n  li = lambda: list(io.ti())\n  lf = lambda: list(io.tf())\n\nfor _ in range(int(input())):\n  n, m, rb, cb, rd, cd = io.li()\n\n  cnt = 0\n  dr = dc = 1\n  while rb != rd and cb != cd:\n    if rb + dr < 1 or rb + dr > n: dr = -dr\n    if cb + dc < 1 or cb + dc > m: dc = -dc\n    rb += dr\n    cb += dc\n    cnt += 1\n\n    # if cnt > 10: break\n    # print((rb, cb), (rd, cd))\n\n  print(cnt)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,rb,cb,rd,cd = map(int,input().split())\n    ans = 999999999999\n    if rb<=rd:\n        ans = min(ans,rd-rb)\n    else:\n        ans = min(ans,2*n -rb -rd)\n    if cb<=cd:\n        ans = min(ans,cd-cb)\n    else:\n        ans = min(ans,2*m -cb -cd)\n    print(ans)\n\n\n",
                true
            ],
            [
                "import sys, bisect, math\nfrom collections import deque, Counter\n\ninput = lambda: sys.stdin.readline().strip()\nceil = lambda x: math.ceil(x)\nmod = 10**9 + 7\n\ndef solve():\n    n,m,rb,cb,rd,cd = map(int, input().split())\n    cnt = 0\n    r,c = 1,1\n    while rb!=rd and cb!=cd:\n        if rb==n:\n            r=-1\n        if cb==m:\n            c=-1\n        rb+=r\n        cb+=c\n        cnt+=1\n    return cnt\n\n\nif __name__ == \"__main__\":\n    t=1\n    t = int(input())\n    for _ in range(t):\n        print(solve())",
                true
            ],
            [
                "#import sys\n#sys.stdin = open(\"input.txt\", \"r\")\n\n\ndef solve():\n    n, m, rb, cb, rd, cd = list(map(int, input().split()))\n    if rd >= rb:\n        rCount = rd - rb\n    else:\n        rCount = rb - rd + 2* (n-rb)\n    if cd >= cb:\n        cCount = cd - cb\n    else:\n        cCount = cb - cd + 2* (m-cb)\n    print(min(rCount, cCount))\n\nfor _ in range(int(input())):\n    solve()",
                true
            ],
            [
                "for _ in range(int(input())):\n    ct=0\n    n,m,rb,cb,rd,cd=map(int,input().split())\n    dx=1\n    dy=1\n    while rb !=rd and cb!=cd:\n        #print(rb,cb)\n        ct+=1\n        if rb+1>n:\n            dx=-1\n        if cb+1>m:\n            dy=-1\n        rb=rb+dx\n        cb=cb+dy\n    print(ct)",
                true
            ],
            [
                "if __name__ == \"__main__\":\n    t = int(input())\n    while t > 0:\n        t -= 1\n        rows, cols, row_bot, col_bot, row_dirt, col_dirt = list(map(int, input().split(\" \")))\n        row_time, col_time = 0, 0\n        if row_bot > row_dirt:\n            row_time = 2*rows - row_bot - row_dirt\n        else:\n            row_time = row_dirt - row_bot\n        if col_bot > col_dirt:\n            col_time = 2*cols - col_bot - col_dirt\n        else:\n            col_time = col_dirt - col_bot\n        print(min(row_time, col_time))\n",
                true
            ],
            [
                "cases = int(input())\n\nfor i in range(cases):\n  n,m,r_b,c_b,r_d,c_d = [int(x) for x in input().split()]\n  x = 1\n  y = 1\n  count = 0\n  while True:\n    if (r_b == r_d) or (c_b == c_d):\n      break\n    if r_b == n and y == 1:\n      y = -1\n    if c_b == m and x == 1:\n      x = -1\n    if r_b == 1 and y == -1:\n      y = 1\n    if c_b == 1 and x == -1:\n      x = 1\n\n    r_b += y\n    c_b += x\n    count += 1\n  print(count)",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools,copy,random\nfrom functools import reduce \nimport operator\n \n\ninf = 10**9+7\nmod = (10**9+7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // math.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(20000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\n#0\ndef find(i) :\n    if par[i] != i : par[i] = find(par[i]);\n    return par[i]\ndef union(a, b) :\n    a = find(a)\n    b = find(b)\n    if a == b : return False\n    par[a] = b\n    return True\n#par = [i for i in range(n)]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    return graph\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\n \ndef initGrid(h,w):\n    for i in range(h):\n        s = S()\n        grid.append(list(s))\n    return grid\n \ndef soe(limit):\n    a = [True] * limit                          # Initialize the primality list\n    a[0] = a[1] = False\n \n    for (i, isprime) in enumerate(a):\n        if isprime:\n            yield i\n            for n in range(i*i, limit, i):     # Mark factors non-prime\n                a[n] = False\n    return a\n\n################## Main (Author - 9th) ################## \n\nfor _ in range(I()):\n    n,m,sx,sy,ex,ey = LI()\n    cnt = 0\n    dr = 1\n    dc = 1\n    while not(sx == ex or sy == ey):\n        if sx+dc == n+1 or sx+dc == 0: #If we hit wall change dir\n            dc = -dc # 1 -> -1 -> 1.. etc\n            continue\n        if sy+dr == m+1 or sy+dr == 0: #If we hit wall change dir\n            dr = -dr #1 -> -1 -> 1.. etc\n            continue\n        sx+=dc #If we dont hit wall just increment sx and dy \n        sy+=dr\n        cnt+=1 #Everytime we are not hitting a wall increase cnt\n    print(cnt)",
                true
            ],
            [
                "import math\nimport itertools\nfrom sys import stdin, stdout\n\ndef test_case():\n    a = [int(x) for x in stdin.readline().rstrip().split()]\n    rows, cols, robot_row, robot_col, dirt_row, dirt_col = a\n\n    if dirt_col >= robot_col:\n        v = dirt_col - robot_col\n    else:\n        v = (cols - robot_col) + (cols - dirt_col)\n\n    if dirt_row >= robot_row:\n        h = dirt_row - robot_row\n    else:\n        h = (rows - robot_row) + (rows - dirt_row)\n\n    print(min(v, h))\n\n\nif __name__ == \"__main__\":\n    t = int(stdin.readline())\n    for i in range(t):\n        test_case()\n",
                true
            ],
            [
                "def res(size, bot_pos, dirty_pos):\n    if dirty_pos >= bot_pos:\n        return dirty_pos - bot_pos\n    else:\n        return (size - bot_pos) * 2 + bot_pos - dirty_pos\n\n\nfor _ in range(int(input())):\n    n, m, rb, cb, rd, cd = map(int, input().split())\n    print(min(res(n, rb, rd), res(m, cb, cd)))\n",
                true
            ],
            [
                "# cook your dish here\nfor _ in range(int(input())):\n    n,m,a,b,c,d=map(int,input().split())\n    # ans=5000\n    # ans1=5000\n    # if(b<=d or a<=c):\n    #     if(b<=d):\n    #         ans=d-b\n    #     if(a<=c):\n    #         ans1=c-a\n    #     print(min(ans,ans1))\n    #     continue\n    # else:\n    r=0\n    f=0\n    f1=0\n    for i in range(10010):\n        if(a==c or b==d):\n            break\n        if(a<n and f==0):\n            a+=1 \n        else:\n            if(a<=1):\n                f=0\n                continue\n            a-=1\n            f=1\n        if(b<m and f1==0):\n            b+=1 \n        else:\n            if(b<=1):\n                f1=0\n                continue\n            b-=1\n            f1=1\n        r+=1\n        # if(a==c or b==d):\n        #     break\n        # print(a,b)\n    print(r)\n                    \n                ",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n,m,rb,cb,rd,cd = [int(x) for x in input().split()]\n    countr = 0\n    countc = 0\n    if rd >= rb:\n        countr = rd-rb\n    else:\n        countr = (n-rb)+(n-rd)\n    \n    if cd >= cb:\n        countc = cd-cb\n    else:\n        countc = (m-cb)+(m-cd)\n    \n    print(min(countr,countc))",
                true
            ],
            [
                "# Coded with passion by Siddhant Tohan\n# \"As long as I have life, I guess all I can do is fight with all my might\"\n\nif __name__ == \"__main__\":\n  for _ in range(int(input())):\n    n,m,rb,cb,rd,cd = map(int, input().split())\n    r_time = None\n    c_time = None\n    if rb <= rd:\n      r_time = rd - rb \n    else:\n      r_time = n - rb + n - rd\n\n    if cb <= cd:\n      c_time = cd - cb \n    else:\n      c_time = m - cb + m - cd\n\n    print(min(r_time,c_time))\n\n    \n\n\n\n\n    \n",
                true
            ],
            [
                "# import sys\n# input = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, m, rb, cb, rd, cd = map(int, input().split())\n    ans = []\n    if (rb > rd):\n        ans.append((n - rb) + (n - rd))\n    else:\n        ans.append(rd - rb)\n    if (cb > cd):\n        ans.append((m - cb) + (m - cd))\n    else:\n        ans.append(cd - cb)\n    print(min(ans))",
                true
            ],
            [
                "for i in range(0,int(input())):\n    n,m,rb,cb,rd,cd=map(int,input().split())\n    if cb<=cd:\n        if rb<=rd:\n            print(min(rd-rb,cd-cb))\n        else:\n            print(min(2*n-rb-rd,cd-cb))\n    else:\n        if rb<=rd:\n            print(min(2*m-cd-cb,rd-rb))\n        else:\n            print(min(2*m-cd-cb,2*n-rb-rd))",
                true
            ],
            [
                "import math\nt = int(input())\nfor test in range(t):\n    n, m, xi, yi, xd, yd = map(int, input().split())\n    op1 = xd - xi\n    op2 = yd - yi\n    if op1 < 0:\n        op1 = abs(n-xi) + abs(n-xd)\n    if op2<0:\n        op2 = abs(m-yi) + abs(m - yd)\n    print(min(op1, op2))\n\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,rb,cb,rd,cd=map(int,input().split())\n    if rb<=rd and cb<=cd:\n        print(min(rd-rb,cd-cb))\n    elif rb<=rd:\n        print(min(rd-rb,2*m-(cb+cd)))\n    elif cb <= cd :\n        print(min(cd-cb,2*n-(rb+rd)))\n    else:\n        print(min(2*n-(rb+rd),2*m-(cb+cd)))",
                true
            ],
            [
                "# cook your dish here\nfor _ in range(int(input())):\n    l=list(map(int,input().split()))\n    a=l[4]-l[2]\n    b=l[5]-l[3]\n    if a>=0 and b>=0:\n        print(min(a,b))\n    elif a<0 and b>=0:\n        a=abs(a)+2*(l[0]-l[2])\n        print(min(a,b))\n    elif a>=0 and b<0:\n        b=abs(b)+2*(l[1]-l[3])\n        print(min(a,b))\n    else:\n        a=abs(a)+2*(l[0]-l[2])\n        b=abs(b)+2*(l[1]-l[3])\n        print(min(a,b))",
                true
            ],
            [
                "import sys\nimport os.path\nfrom collections import *\nimport math\nimport bisect\nimport heapq as hq\nfrom fractions import Fraction\nfrom random import randint\n\nif os.path.exists(\"input.txt\"):\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\ninput = sys.stdin.readline\n\n##########################################################\ndef solve():\n    n,m,r,c,x,y = [int(x) for x in input().split()]\n    r -= 1\n    c -= 1\n    x -= 1\n    y -= 1\n    dirx = 1\n    diry = 1\n\n    cnt = 0\n    while r != x and c != y:\n        u = r + dirx\n        v = c + diry\n        if u >= n or u < 0:\n            dirx *= -1  \n        if v < 0 or v >= m:\n            diry *= -1\n        r += dirx\n        c += diry\n        cnt += 1\n\n    print(cnt)\n\nt = int(input())\nwhile t:\n    t -= 1\n    solve()\n\n\n##########################################################\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, rb, cb, rd, cd = list(map(int,input().split()))\n    count = 0\n    robot = [rb, cb]\n    target = [rd, cd]\n    i = 1\n    j = 1\n    r_s = 0\n    c_s = 0\n    if rb == rd or cb == cd :\n        print(0)\n    else:\n        if rb > rd :\n            r_s = n - rb  + (n - rd)\n        if cb > cd :\n            c_s = m - cb + (m - cd)\n        if rb < rd :\n            r_s = rd - rb\n        if cd > cb:\n            c_s = cd - cb\n        print(min(r_s, c_s))\n\n",
                true
            ],
            [
                "t = int(input())\n\nwhile t > 0:\n    t -= 1\n    nums = [int(c) for c in input().split(\" \")]\n    n, m, rb, cb, rd, cd = nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]\n    ans = float(\"inf\")\n    if rd >= rb: # rows reach\n        ans = min(ans, rd-rb)\n    else:\n        ans = min(ans, 2*(n - rb) + rb - rd)\n    if cd >= cb:\n        ans = min(ans, cd - cb)\n    else:\n        ans = min(ans, 2*(m - cb) + cb - cd)\n    print(ans)",
                true
            ],
            [
                "for t in range(int(input())):\n    n,m,rb,cb,rd,cd=list(map(int,input().split()))\n    t=0\n    # if rb>rd and cb<cd:\n    #     t=(n-rb)+min(rb-rd,cd-cb)\n    # elif rb>rd and cb>cd:\n    #     if n-rb<=m-cb:\n    #         t=n-rb+m-(cb+n-rb)+min(rb+n-rb-cb-n+rb-rd,cb+n-rb+m-cb-n+rb-cd)\n    #     else:\n    #         t=m-cb+n-(rb+m-cb)+min(rb+m-cb+n-rb-m+cb-rd,cb+m-cb-n+rb-m+cb-cd)\n    # elif rb<rd and cb>cd:\n    #     t=m-cb+min(rd-rb-m+cb,cb+m-cb-cd)\n    # else:\n    #     t=min(cd-cb,rd-rb)\n    # print(t)\n    dr=1\n    dc=1\n    while rb!=rd and cb!=cd:\n        if rb+1>n:\n            dr=-1\n        if cb+1>m:\n            dc=-1\n        rb+=dr\n        cb+=dc\n        t+=1\n    print(t)\n            \n\n",
                true
            ],
            [
                "count = int(input())\n\nn = [0] * count\nm = [0] * count\nr = [0] * count\nc = [0] * count\nr_1 = [0] * count\nc_1 = [0] * count\n\nfor i in range(count):\n    n[i], m[i], r[i], c[i], r_1[i], c_1[i] = map(int, input().split())\n\ndef f(n, m, r, c, r_1, c_1):\n    t = 0\n    dr = 1\n    dc = 1\n    while r != r_1 and c != c_1:\n        if 1 > r + dr or r + dr > n:\n            dr = -1\n        if 1 > c + dc or c + dc > m:\n            dc = -1\n        r = r + dr\n        c = c + dc\n        t += 1\n    return t\n\nfor i in range(count):\n    print(f(n[i], m[i], r[i], c[i], r_1[i], c_1[i]))\n\n\n\n",
                true
            ],
            [
                "for t in range(int(input())):\n    n , m, rb, cb, rd, cd = map(int, input().split())\n    ans = 0\n    if rb == rd or cb == cd:\n        ans = 0\n        \n    elif rd > rb and cd < cb:\n        row = rd - rb\n        col = (m - cb) + (m - cd)\n        ans = min(row, col)\n        \n    elif rd < rb and cd > cb:\n        row = (n - rb) + (n - rd)\n        col = cd - cb\n        ans = min(row, col)\n        \n    elif rd > rb and cd > cb:\n        ans = min((rd-rb), (cd-cb))\n        \n    elif rd < rb and cd < cb:\n        row = (n - rb) + (n - rd)\n        col = (m - cb) + (m - cd)\n        ans = min(row, col)\n\n    print(ans)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n,m,rb,cb,rd,cd = map(int,input().split())\n    if rd>=rb:\n        h = rd-rb\n    else:\n        h = 2*n-(rb+rd)\n    if cd>=cb:\n        k = cd-cb\n    else:\n        k = 2*m-(cb+cd)\n    print(min(h,k))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n,m,x,y,a,b=map(int,input().split())\n    x1=x\n    y1=y\n    dx=1\n    dy=1\n    c=0\n    while True:\n        if x1==a or y1==b:\n            print(c)\n            break\n        if x1==n:\n            dx=-dx\n        if y1==m:\n            dy=-dy\n        x1+=dx\n        y1+=dy\n        c+=1\n\n",
                true
            ],
            [
                "a=int(input())\nfor i in range(a):\n    b=[int(j) for j in input().split()]\n    if (b[2]==b[4] or b[3]==b[5]):\n       print(\"0\")\n    else :\n        t1=0\n        t2=0\n\n        if(b[2]>b[4]):\n            t1=(b[0]-b[2])+(b[0]-b[4])\n        else:\n            t1=b[4]-b[2] \n        if(b[3]>b[5]):\n            t2=(b[1]-b[3])+(b[1]-b[5])\n        else:\n            t2=b[5]-b[3]\n        print(min(t1,t2)) ",
                true
            ],
            [
                "for i in range(int(input())):\n    n,m,a1,b1,a2,b2 = map(int,input().split())\n    if a2>=a1:\n        c1 = a2-a1\n    else:\n        c1 = n-a1+n-a2\n    if b2>=b1:\n        c2 = b2-b1\n    else:\n        c2 = m-b1+m-b2\n    print(min(c1,c2))",
                true
            ],
            [
                "import heapq\nfrom collections import Counter\nimport math\nimport sys\ninput = sys.stdin.readline\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\ndef inis():\n    return(input().split())\n###################################################\n\n# # Code to find top 3 elements and their counts\n# # using most_common\n#\n# arr = [1, 3, 4, 1, 2, 1, 1, 3, 4, 3, 5, 1, 2, 5, 3, 4, 5]\n# counter = Counter(arr)\n# top_three = counter.most_common()\n# print(sorted(top_three))\n#\n#\n# # Python code to find 3 largest and 4 smallest\n# # elements of a list.\n#\n# grades = [110, 25, 38, 49, 20, 95, 33, 87, 80, 90, 110]\n# print(heapq.nlargest(3, grades))\n# print(heapq.nsmallest(4, grades))\n\n###########---------Code Here------------##############\nfor _ in range(int(input())):\n    a, b, c, d, e, f = invr()\n    x = y = 1\n    t = 0\n    while c != e and d != f:\n        if c != a:\n            c += x\n        else:\n            x = -x\n            c += x\n        if d != b:\n            d += y\n        else:\n            y = -y\n            d += y\n        t += 1\n    print(t)\n",
                true
            ],
            [
                "def read_ints():\n    return [int(x) for x in input().rstrip().rsplit()]\n\n\nif __name__ == '__main__':\n    nn = int(input())\n\n    while nn > 0:\n        n, m, rb, cb, rd, cd = read_ints()\n\n        dr = 1\n        dc = 1\n\n        counter = 0\n        while True:\n            if rb == rd or cb == cd:\n                break\n            counter += 1\n            if rb + dr > n or rb + dr < 1:\n                dr *= -1\n            if cb + dc > m or cb + dc < 1:\n                dc *= -1\n            rb += dr\n            cb += dc\n\n        print(counter)\n\n        nn -= 1\n",
                true
            ],
            [
                "t = int(input())\nresultado = []\n\ndef robot(case, tempo, check, check_c):\n    posicao_atual = case[2:4]\n    n_row = case[0]\n    m_col = case[1]\n    row_b = case[2]\n    col_b = case[3]\n    row_d = case[4]\n    col_d = case[5]\n\n    while row_b != row_d and col_b != col_d and posicao_atual >= [0,0]:\n        if row_b < n_row and check == True:\n            row_b += 1\n            tempo +=1   \n        elif row_b == n_row: \n            row_b -= 1\n            tempo +=1\n            check = False\n        elif row_b < n_row and check == False:\n            row_b -= 1\n            tempo +=1\n\n\n        if col_b < m_col and check_c == True:\n            col_b += 1\n        elif col_b == m_col:\n            col_b -= 1\n            check_c = False\n        else:\n            col_b -= 1\n\n    return tempo\n\n\nfor i in range(t):\n    case = input().split()\n    case = [int(j) for j in case]\n    tempo = 0\n    check_row = True\n    check_col = True\n    x = (robot(case, tempo, check_row, check_col))\n    resultado.append(x)\n\nfor l in resultado:\n    print(l)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, rb, cb, rd, cd = map(int, input().split())\n    if rb > rd:\n        ud = 2 * n - rd - rb\n    else:\n        ud = rd - rb\n    if cb > cd:\n        rl = 2 * m - cd - cb\n    else:\n        rl = cd - cb\n    print(min(rl, ud))",
                true
            ],
            [
                "for i in range(int(input())):\n    n,m,rb,cb,rd,cd = map(int, input().split())\n    dr,dc = 1,1\n    ans = 0\n\n    while True:\n        if rb == rd or cb == cd:\n            print(ans)\n            break\n        if rb == n:\n            dr = -dr\n        if cb == m:\n            dc = -dc\n        rb+=dr\n        cb+=dc\n        ans+=1",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, rb, cb, rd, cd = map(int, input().split())\n    t = 0\n    r = 1\n    c = 1\n    while not (rb == rd or cb == cd):\n        t += 1\n        if rb == n or rb == 0:\n            r = -r\n        if cb == m or cb == 0:\n            c = -c\n        rb += r\n        cb += c\n    print(t)\n",
                true
            ],
            [
                "h = int(input())\nfor zzz in range(h):\n    n, m, rb, cb, rd, cd = map(int, input().split())\n    dr, dc, t = 1, 1, 0\n    while (rd != rb and cd != cb):\n        if rb == n:\n            dr = -dr\n        if cb == m:\n            dc = -dc\n        t += 1\n        rb += dr\n        cb += dc\n    print(t)\n",
                true
            ],
            [
                "def myfunction():\n    t = int(input())\n    for i in range(t):\n        r,c,x_r,y_r,x_d,y_d = [int(x) for x in input().split()]\n        count = 0\n        fr = 1\n        fc = 1\n        while True:\n            if x_r == x_d or y_r == y_d:\n                break\n            if fr+x_r>r or fr+x_r<1:\n                fr *= -1\n            if fc+y_r>c or fc+y_r<1:\n                fc *= -1\n            x_r += fr\n            y_r += fc\n            count+= 1\n        print(count)\n\nif __name__==\"__main__\":\n    myfunction()",
                true
            ],
            [
                "test_case=input('')\ntest_case=int(test_case)\nz=0\nwhile z<test_case:\n    l=[int(item) for item in input(\"\").split()]\n    i=l[2]\n    k=l[3]\n    count=0\n    flag=0\n    if l[2]==l[4] or l[3]==l[5]:\n        print(count)\n        flag=1\n    if flag==1:\n        z=z+1\n        continue\n    else:\n        while i<l[0] and k<l[1]:\n            l[2]=i+1\n            l[3]=k+1\n            count=count+1\n            if l[2]==l[4] or l[3]==l[5]:\n                print(count)\n                flag=1\n                break\n            i=i+1\n            k=k+1\n        if flag==1:\n            z=z+1\n            continue\n        if l[2]==l[0] and l[3]==l[1]:\n            i=l[2]\n            k=l[3]\n            while i>1 and k>1:\n                l[2]=i-1\n                l[3]=k-1\n                count=count+1\n                if l[2]==l[4] or l[3]==l[5]:\n                    print(count)\n                    flag=1\n                    break\n                i=i-1\n                k=k-1\n        if flag==1:\n            z=z+1\n            continue\n        elif l[2]==l[0]:\n            i=l[2]\n            k=l[3]\n            while i>1 and k<l[1]:\n                l[2]=i-1\n                l[3]=k+1\n                count=count+1\n                if l[2]==l[4] or l[3]==l[5]:\n                    print(count)\n                    flag=1\n                    break\n                i=i-1\n                k=k+1\n            if flag==1:\n                z=z+1\n                continue\n            if l[3]==l[1]:\n                i=l[2]           #i=7\n                k=l[3]           #k=8\n                while i>1 and k>1:    #7<9 and 8>1->8<9 and 7>1->false\n                    l[2]=i-1             #l[2]=8->9\n                    l[3]=k-1             #l[3]=7->6\n                    count=count+1        #count=3->4\n                    if l[2]==l[4] or l[3]==l[5]:\n                        print(count)\n                        flag=1\n                        break\n                    i=i-1\n                    k=k-1\n                if flag==1:\n                    z=z+1\n                    continue\n        else:\n            i=l[2]\n            k=l[3]\n            while i<l[0] and k>1:\n                l[2]=i+1\n                l[3]=k-1\n                count=count+1\n                if l[2]==l[4] or l[3]==l[5]:\n                    print(count)\n                    flag=1\n                    break\n                i=i+1\n                k=k-1\n            if flag==1:\n                z=z+1\n                continue\n            if l[2]==l[0]:\n                i=l[2]\n                k=l[3]\n                while i>1 and k>1:\n                    l[2]=i-1\n                    l[3]=k-1\n                    count=count+1\n                    if l[2]==l[4] or l[3]==l[5]:\n                        print(count)\n                        break\n                    i=i-1\n                    k=k-1\n    z=z+1",
                true
            ],
            [
                "t = int(input())\nfor z in range(t):\n    n,m,rb,cb,rd,cd = list(map(int, input().split()))\n    if rb == rd or cb == cd:\n        print(0)\n    else:\n        time = 0\n        row = 1\n        col = 1\n        while True:\n            if rb == rd or cb == cd:\n                break\n            if rb == n:\n                row = -1\n            if cb == m:\n                col = -1\n            rb+= row\n            cb+= col\n            time+=1\n        print(time)",
                true
            ],
            [
                "\ndef find(H,W,r1,b1,r2,b2,dr=1,db=1,num=0):\n    if r1==r2 or b1==b2:\n        print(num)\n    else:\n        if r1+dr>H or r1+dr<0:\n            dr *= -1\n        if b1+db>W or b1+db<0:\n            db *= -1\n        find(H,W,r1+dr,b1+db,r2,b2,dr,db,num+1)\n\nfor _ in range(int(input())):\n    H,W,r1,b1,r2,b2 = map(int,input().split())\n    find(H,W,r1,b1,r2,b2)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,rb,cb,rd,cd = map(int,input().split())\n    print(min((rd if rb<=rd else 2*n-rd) - rb,\n              (cd if cb<=cd else 2*m-cd) - cb))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    A =  list(map(int,input().split()))\n    n = A[0]\n    m = A[1]\n    rb = A[2]\n    cb = A[3]\n    rd = A[4]\n    cd = A[5]\n    l = []\n    if rb <= rd :\n        l.append(rd-rb)\n    else :\n        l.append(2*n - rb - rd)\n    if cb <= cd:\n        l.append(cd - cb)\n    else :\n        l.append(2*m - cb - cd)\n    m = float(\"inf\")\n    for i in l:\n        if m > i :\n            m = i\n    print(m)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n,m,rb,cb,rd,cd=map(int,input().split())\n    if rb==rd or cb==cd:\n        print(0)\n    elif rb>rd and cb<cd:\n        print(min(cd-cb,2*n-rb-rd))\n    elif rb<rd and cb>cd:\n        print(min(rd-rb,2*m-cd-cb))\n    elif rb<rd and cb<cd:\n        print(min(rd-rb,cd-cb))\n    else:\n        print(min(2*m-cb-cd,2*n-rb-rd))\n",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n, m, r, c, rd, cd = [int(i) for i in input().split()]\n    d1 = 0\n    d2 = 0\n    if rd < r:\n        d1 = 2 * (n - r) + r - rd\n    else:\n        d1 = rd - r\n\n    if cd < c:\n        d2 = 2 * (m - c) + c - cd\n    else:\n        d2 = cd - c\n    print(min(d1, d2))\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, rx, ry, cx, cy = map(int, input().split())\n    if rx > cx:\n        ans_x = 2 * (n - rx) + rx - cx\n    else:\n        ans_x = cx - rx\n    if ry > cy:\n        ans_y = 2 * (m - ry) + ry - cy\n    else:\n        ans_y = cy - ry\n    print(min(ans_x, ans_y))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n, m, rb, cb, rd, cd = tuple(map(int, input().rstrip().split()))\n    if rd >= rb:\n        r_time = rd - rb\n    else:\n        r_time = (n - rd) + (n - rb)\n\n    if cd >= cb:\n        c_time = cd - cb\n    else:\n        c_time = (m - cd) + (m - cb)\n\n    print(min(r_time, c_time))\n",
                true
            ],
            [
                "import sys\nfrom math import ceil,log2\ninput = sys.stdin.readline\ndef solve():\n    n,m,r,c,rr,cc = map(int,input().split())\n    dr,dc = 1,1\n    cnt = 0\n    while not (r==rr or c==cc):\n        if r+dr<= 0 or r+dr>n:\n            dr = -dr\n        if c+dc<=0 or c+dc>m:\n            dc = -dc\n        r+= dr\n        c+= dc\n        cnt += 1\n    return cnt\nt = int(input())\nfor i in range(t):\n    print(solve())\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,rb,cb,rd,cd = map(int,input().split())\n    ans = min(rd-rb if rb<=rd else (n-rb)+(n-rd), cd-cb if cb<=cd else (m-cb)+(m-cd))\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, rb, cb, rd, cd = map(int, input().split())\n    if rb<=rd:\n        x = rd-rb\n    else:\n        x = (2*n-rb-rd)\n    if cb<=cd:\n        y = cd-cb\n    else:\n        y = (2*m-cb-cd)\n    print(min(x,y))\n",
                true
            ],
            [
                "from sys import setrecursionlimit\n\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque\nfrom functools import lru_cache, reduce\nfrom heapq import heappush, heappop\nfrom math import sqrt, ceil, floor, log2\n\nT = int(input())\n\ndef rl(t = int):\n    return list(map(t, input().split()))\n\nfor t in range(1, T + 1):\n    n, m, sx, sy, tx, ty = rl()\n    dx, dy = 1, 1\n    if sx == 1:\n        dx = -1\n    if sy == 1:\n        dy = -1\n\n    ret = 0\n    while sx != tx and sy != ty:\n        if sx in [1, n]:\n            dx = 1 if dx == -1 else -1\n        if sy in [1, m]:\n            dy = 1 if dy == -1 else -1\n\n        sx += dx\n        sy += dy\n        ret += 1\n\n    print(ret)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a = list(map(int,input().split()))\n    rx,ry = 0,0\n    if a[2]>a[4]:\n        rx=1\n    if a[3]>a[5]:\n        ry=1\n        \n    if ((a[2]==a[4]) | (a[3]==a[5])):\n        print(0)\n    else:\n        res = min(abs(a[2]-a[4])+(a[0]-a[2])*rx*2,abs(a[3]-a[5])+(a[1]-a[3])*ry*2)\n        print(res)",
                true
            ],
            [
                "def time(n, m, r_b, c_b, r_d, c_d):\n\n    if r_b > r_d:\n        a = 2*n - r_b - r_d\n    else: a = r_d - r_b\n\n    if c_b > c_d:\n        b = 2*m - c_b - c_d\n    else: b = c_d - c_b\n\n    return min(a, b)\n\ntestCase = int(input())\n\noutpiutlist = []\n\nfor i in range(testCase):\n    n, m, r_b, c_b, r_d, c_d = input().split()\n    outpiutlist.append(time(int(n), int(m), int(r_b), int(c_b), int(r_d), int(c_d)))\n\nfor i in outpiutlist:\n    print(i)\n",
                true
            ],
            [
                "X = lambda : map(int,input().split())\nt,=X()\nfor i in range(t):\n    n,m,rb,cb,rd,cd=X()\n    time=0\n    indr=1\n    indc=1\n    while True:\n        if rb==rd or cb==cd:\n            break\n\n        if rb<n and cb<m:\n            rb+=indr\n            cb+=indc\n\n        else:\n            if rb==n:\n                indr=-1*indr\n            if cb==m:\n                indc=-1*indc\n            rb+=indr\n            cb+=indc\n\n        time+=1\n\n\n    print(time)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, x, y, r, c = map(int, input().split())\n    if y > c:\n        h = m - y + m - c\n    else:\n        h = c - y\n    if x > r:\n        v = n - x + n - r\n    else:\n        v = r - x\n    print(min(h,v))",
                true
            ],
            [
                "for i in range(int(input())):\n    n,m,rb,cb,rd,cd=list(map(int,input().split()))\n    print(min(rd-rb if rd>=rb else n-rb+n-rd,cd-cb if cd>=cb else m-cb+m-cd))",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,rx,ry,dx,dy=list(map(int,input().split()))\n    cnt=0\n    p1=1\n    p2=1\n    while rx!=dx and ry!=dy:\n        if rx==n:\n            p1=-p1\n        if ry==m:\n            p2=-p2\n        rx+=p1\n        ry+=p2\n        cnt+=1\n    print(cnt)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,rb,cb,rd,cd=map(int,input().split())\n    ans=0\n    s1,s2=1,1\n    while rb!=rd and cb!=cd:\n        if cb==m:\n            s2*=-1\n        if rb==n:\n            s1*=-1\n        cb+=s2\n        rb+=s1\n        ans+=1\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, m, rb, cb, rd, cd=map(int, input().split())\n    stepI, stepJ = 1,1\n    time=0\n    # print(n, m, rb, cb, rd, cd, time)\n    while rb!=rd and cb != cd:\n        if (rb == n and stepI==1) or (rb ==1 and stepI==-1):\n            stepI=0-stepI\n        if (cb == m and stepJ==1) or (cb ==1 and stepJ==-1):\n            stepJ=0-stepJ\n        rb+=stepI\n        cb+=stepJ\n        time+=1\n        # print('Robot is at (%d, %d) at time:%d' %(rb, cb, time))\n    print(time)",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n    # x = str(input())\n    # x = int(input())\n    # \u043d\u0430 \u0432\u0445\u043e\u0434 3 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 int\n    # rd,cd need a clean\n    n, m, rb, cb, rd, cd = map(int, input().split())\n    # \u0432\u0432\u043e\u0434 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443\n    #b = [int(x) for x in input().split()]\n    j1=1\n    i1=1\n    count = 0\n    while rb != rd and cb != cd:\n        if rb == n:\n            j1 = -1\n\n        if rb == 1:\n            j1 = 1\n\n        if cb == m:\n            i1 = -1\n\n        if cb == 1:\n            i1 = 1\n\n        rb += j1\n        cb += i1\n        count += 1\n    print(count)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,rb,rd,cb,cd=map(int,input().split())\n    arr=[cb-rb,cd-rd,(2*n-cb-rb),(2*m-cd-rd)]\n    minm=10**8\n    for i in arr:\n        if i<minm and i>=0:\n            minm=i\n    print(minm)",
                true
            ],
            [
                "for t in range(int(input())):\n    n,m,a,b,c,d=map(int, input().split())\n    print(min(c-a if c>=a else 2*(n-a)+a-c,d-b if d>=b else 2*(m-b)+b-d))",
                true
            ],
            [
                "def solve():\n    inp = map(int, input().split())\n    n, m, rB, cB, rd, cd = inp\n\n    if rd >= rB:\n        sy = rd-rB\n    else:\n        sy = 2*n-rd-rB\n\n    if cd >= cB:\n        sx = cd-cB\n    else:\n        sx = 2*m-cd-cB\n\n    print(min(sy, sx))\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ndef iinput(): return int(input())\ndef sinput(): return input().rstrip()\ndef i0input(): return int(input()) - 1\ndef linput(): return list(input().split())\ndef liinput(): return list(map(int, input().split()))\ndef miinput(): return map(int, input().split())\ndef li0input(): return list(map(lambda x: int(x) - 1, input().split()))\ndef mi0input(): return map(lambda x: int(x) - 1, input().split())\nINF = 10**20\nMOD = 1000000007\n\nt = iinput()\nfor _ in range(t):\n    n, m, rb, cb, rd, cd = liinput()\n    rb -= 1\n    cb -= 1\n    rd -= 1\n    cd -= 1\n    room = [[False for _ in range(m)] for _ in range(n)]\n    for i in range(m):\n        room[rd][i] = True\n    for i in range(n):\n        room[i][cd] = True\n    ctr = 0\n    dr = 1\n    dc = 1\n    while True:\n        if room[rb][cb]:\n            break\n        else:\n            ctr += 1\n            if rb + dr < 0 or n <= rb + dr:\n                dr *= -1\n            if not (0 <= cb + dc < m):\n                dc *= -1\n            rb += dr\n            cb += dc\n    print(ctr)\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n,m,a,b,c,d=map(int,input().split())\n    cost1=0\n    cost2=0\n    if a==c or b==d:\n        print(0)\n        continue\n    if c>a :\n        cost1=c-a\n    else:\n        cost1=(2*(n-a)+a-c)\n    if d>b:\n        cost2=d-b\n    else:\n        cost2=(2*(m-b)+b-d)\n    print(min(cost1,cost2))",
                true
            ],
            [
                "sr=lambda: input()\nir=lambda: int(sr())\nlr=lambda: list(map(int, sr().split()))\n\n# dr=lambda: float(sr())\n# dlr=lambda: list(map(float, sr().split()))\n\ninf = 10**18\n# mod = 10**9+7\nmod = 998244353\n\nif __name__=='__main__':\n    test = ir()\n    for t in range(test):\n        n,m,bh,bw,dh,dw = lr()\n        if bh <= dh:\n            dy = dh-bh\n        else:\n            dy = (n-bh)+(n-dh)\n        if bw <= dw:\n            dx = dw-bw\n        else:\n            dx = (m-bw)+(m-dw)\n        print(min(dy,dx))\n\n",
                true
            ],
            [
                "t = int(input())\nans = []\nfor i in range(t):\n    n, m, rb, cb, rd, cd = map(int, input().split())\n    dr, dc = 1, 1\n    sr, sc = rb, cb\n    time = 0\n    \"\"\"while rb != rd and cb != cd:\n        if rb in [1, n] and rb != sr:\n            dr = -dr\n        if cb in [1, m] and cb != sc:\n            dc = -dc\n        rb += dr\n        cb += dc\n\n        time += 1\n    else:\n        ans.append(time)\n    \"\"\"\n    #r\n    if rb < rd:\n        r_time = rd-rb\n    if rb > rd:\n        r_time = n-rb + n-rd\n    if rb == rd:\n        r_time = 0\n    #y\n    if cb < cd:\n        c_time = cd-cb\n    if cb > cd:\n        c_time = m-cb + m-cd\n    if cb == cd:\n        c_time = 0\n    \n    ans.append(min(r_time, c_time))\n\nfor _ in ans:\n    print(_)\n    \n    ",
                true
            ],
            [
                "import math\n\ncs = int(input())\nfor i in range(cs):\n    n, m, rb, cb, rd, cd = input().split()\n    n = int(n)\n    cd = int(cd)\n    m = int(m)\n    rb = int(rb)\n    cb = int(cb)\n    rd = int(rd)\n    sol = min(rd - rb if rd >= rb else n - rb + n - rd, cd - cb if cd >= cb else m - cb + m - cd)\n    print(sol)\n",
                true
            ],
            [
                "\n\ndef solve(n, m, robot_row, robot_collum, spot_row, spot_collum):\n    if robot_row == spot_row or robot_collum == spot_collum:\n        print(0)\n        return\n\n    if robot_collum < spot_collum:\n        collum_time = spot_collum - robot_collum\n    else:\n        collum_time = (m - robot_collum) + (m - spot_collum)\n\n    if robot_row < spot_row:\n        row_time = spot_row - robot_row\n    else:\n        row_time = (n - robot_row) + (n - spot_row)\n    # print(row_time, collum_time)\n    print(min(row_time, collum_time))\n\n\n# a = [\n#     [4, 5, 1, 2, 4, 1],\n#     [4, 5, 4, 1, 1, 2],\n#     [4, 5, 1, 1, 1, 1],\n#     [4, 5, 2, 3, 3, 5]\n# ]\n# a = [['10', '10', '6', '1', '2', '8'],\n# ['10', '10', '9', '9', '1', '1'],\n# ['9', '8', '5', '6', '2', '1'],\n# ['6', '9', '2', '2', '5', '8'],\n# ['2', '2', '1', '1', '2', '1']]\n# for k in a:\n#     solve(*[int(i) for i in k])\nt = int(input())\nfor i in range(t):\n    info = input().split(\" \")\n    # print(info)\n    solve(*[int(info[i]) for i in range(len(info))])\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    # n = int(input())\n    n,m,rx,ry,dx,dy = map(int,input().split())\n    # if rx == dx or ry == dy:\n    #     print(0)\n    # elif rx<dx and ry<dy:\n    #     print(min(dx-rx,dy-ry))\n    # elif rx<dx:\n    #     print(min(dx-rx,(n-dy) + (n-ry)))\n    # elif ry<dy:\n    #     print(min((m-dx) + (m-rx),dy - ry))\n    # else:\n    #     print(min((m-dx) + (m-rx),(n-dy) + (n-ry)))\n\n    ans = 0\n    i = rx\n    j = ry\n    mi = 1\n    mj = 1\n    while(i != dx and j != dy):\n        \n        if i+1>n:\n            mi = 0\n        if i-1<1:\n            mi = 1\n        if j+1>m:\n            mj = 0\n        if j-1<1:\n            mj = 1\n        if mi:\n            i = i+1\n        else:\n            i = i-1\n        if mj:\n            j = j+1\n        else:\n            j = j-1\n        ans = ans + 1\n    print(ans)\n            \n        \n        \n        \n    \n        ",
                true
            ],
            [
                "t=int(input())\nfor tt in range(t):\n  n,m,a,b,x,y=map(int,input().split())\n  ans=0\n  x1=1\n  y1=1\n  while a!=x and y!=b:\n    ans+=1\n    if a==n:\n      x1*=-1\n    if b==m:\n      y1*=-1\n    a+=x1\n    b+=y1\n  print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, rb, cb, rd, cd = list(map(int,input().split()))\n    count = 0\n    robot = [rb, cb]\n    target = [rd, cd]\n    i = 1\n    j = 1\n    while rb != rd and cb != cd :\n        if rb == n:\n            i = -1\n        if cb == m:\n            j = -1\n        rb += i\n        cb += j \n        count += 1\n        \n    print(count)\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    #n=int(input())\n    #a=list(map(int,input().split()))\n    #s=input()\n    n,m,a,b,ta,tb=map(int,input().split())\n    if a>ta:\n        v=2*(n-a)+a-ta\n    else:\n        v=ta-a\n    if b>tb:\n        h=2*(m-b)+b-tb\n    else:\n        h=tb-b\n    ans=min(h,v)\n    print(ans)",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n\n    n , m , rb , cb , rd , cd = map(int , input().split())\n    res = []\n    f , s = 1 , 1\n    if rb != rd and cb != cd:\n        if rb > rd:\n            res.append((n-rb)+(n-rd))\n        else:\n            res.append(abs(rb-rd))\n        if cb > cd:\n            res.append((m-cb)+(m-cd))\n        else:\n            res.append(abs(cb-cd))\n        print(min(res))\n    else:\n        print(0)",
                true
            ],
            [
                "import sys\n\nfor _ in range(int(sys.stdin.readline())):\n    n, m, x, y, z, w = map(int, sys.stdin.readline().split())\n    dx = dy = 1\n    ans = 0\n    while True:\n        if (x == z) or (y == w):\n            print(ans)\n            break\n        \n        if ((x == n) and (dx == 1)) or ((x == 0) and (dx == -1)):\n            dx *= -1\n        \n        if ((y == m) and (dy == 1)) or ((y == 0) and (dy == -1)):\n            dy *= -1\n        \n        x += dx\n        y += dy\n        ans += 1",
                true
            ],
            [
                "t =int(input())\nfor _ in range(t):\n    n,m,rb,cb,rd,cd = map(int, input().split())\n    r = rb\n    c = cb\n    dr=1\n    dc=1\n    time = 0\n    while(True):\n        #check\n        if r==rd or c==cd:\n            break;\n        rr=r+dr\n        cc=c+dc\n        if (rr<1 or rr>n):\n            dr*=-1\n        if (cc<1 or cc>m):\n            dc*=-1\n        r = r+dr\n        c = c+dc\n        time+=1\n    print(time)\n\n\n\n\n",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools,copy,random\nfrom functools import reduce \nimport operator\n \n\ninf = 10**9+7\nmod = (10**9+7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // math.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(20000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\n#0\ndef find(i) :\n    if par[i] != i : par[i] = find(par[i]);\n    return par[i]\ndef union(a, b) :\n    a = find(a)\n    b = find(b)\n    if a == b : return False\n    par[a] = b\n    return True\n#par = [i for i in range(n)]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    return graph\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\n \ndef initGrid(h,w):\n    for i in range(h):\n        s = S()\n        grid.append(list(s))\n    return grid\n \ndef soe(limit):\n    a = [True] * limit                          # Initialize the primality list\n    a[0] = a[1] = False\n \n    for (i, isprime) in enumerate(a):\n        if isprime:\n            yield i\n            for n in range(i*i, limit, i):     # Mark factors non-prime\n                a[n] = False\n    return a\n\n################## Main (Author - 9th) ################## \n\nfor _ in range(I()):\n    row,col,sx,sy,ex,ey = LI()\n    cnt = 0\n    dr = 1\n    dc = 1\n    while True:\n        if sx == ex or sy == ey:\n            break\n        if sx+dc == row+1 or sx+dc == 0:\n            dc = -dc\n            continue\n        if sy+dr == col+1 or sy+dr == 0:\n            dr = -dr\n            continue\n        sx+=dc\n        sy+=dr\n        cnt+=1\n    print(cnt)\n\n\n\n\n    \n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m,x,y,x1,y1=list(map(int,input().split()))\n    ans=0\n    c1,c2=1,1\n    while x!=x1 and y!=y1:\n        x=x+c1\n        y=y+c2\n        ans=ans+1\n        if x>n or x<1 or y>m or y<1:\n            ans=ans-1\n            if x>n or x<1:\n                x=x-c1\n                c1=(-1)*c1\n                y=y-c2\n            else:\n                y=y-c2\n                c2=(-1)*c2\n                x=x-c1\n    print(ans)\n            \n\n    \n                    \n        \n\n    \n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, x, y, xk, yk = map(int, input().split())\n    dx, dy = 1, 1\n    ans = 0\n    while True:\n        if x == xk or y == yk:\n            break\n        if x == n and dx == 1:\n            dx = -1\n        elif x == 1 and dx == -1:\n            dx = 1\n        if y == m and dy == 1:\n            dy = -1\n        elif y == 1 and dy == -1:\n            dy = 1\n        ans += 1\n        x += dx\n        y += dy\n    print(ans)\n",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve():\n  n, m, rb, cb, rd, cd = get_ints()\n\n  ans = 0\n\n  flag1 = 0\n  flag2 = 0\n\n  while True:\n    if rb == rd or cb == cd:\n      print(ans)\n      return\n    \n    if flag1 == 0:\n      if (rb+1) <= n:\n        rb += 1\n      else:\n        rb -= 1\n        flag1 = 1\n    else:\n      rb -= 1\n    \n    if flag2 == 0:\n      if (cb+1) <= m:\n        cb += 1\n      else:\n        cb -= 1\n        flag2 = 1\n    else:\n      cb -= 1\n\n    ans += 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT = get_int()\nwhile T:\n  solve()\n  T -= 1\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n,m,rb,cb,rd,cd=map(int,input().split())\n    move=[1,1]\n    time=0\n    while rd!=rb and cd!=cb:\n        if rb==n: move[0]=-1\n        if cb==m: move[1]=-1\n        rb+=move[0];cb+=move[1]\n        time+=1\n    print(time)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, m, r_b, c_b, r_d, c_d = map(int, input().split())\n\n    d_r, d_c = 1, 1\n    time = 0\n    while True:\n        if r_b == r_d or c_b == c_d:\n            print(time)\n            break\n        if r_b == 1:\n            d_r = 1 \n        if r_b == n:\n            d_r = -1\n        if c_b == 1:\n            d_c = 1\n        if c_b == m:\n            d_c = -1\n\n        r_b += d_r\n        c_b += d_c\n        time += 1\n\n",
                true
            ],
            [
                "def rc(r,c,rb,cb,rd,cd):\n    rr=rb\n    cc=cb\n    tt=0\n    dr=1\n    dc=1\n    while((cc!=cd)&(rr!=rd)):\n        if rr==r:\n            dr=-1\n        if cc==c:\n            dc=-1\n        cc=cc+dc\n        rr=rr+dr\n        tt=tt+1\n    return tt\nt=int(input())\nls=[]\nfor i in range(t):\n    s=str(input())\n    ls.append(s)\nla=[]\nfor s in ls:\n    lt=s.split(' ',)\n    r=int(lt[0])\n    c=int(lt[1])\n    rb=int(lt[2])\n    cb=int(lt[3])\n    rd=int(lt[4])\n    cd=int(lt[5])\n    ans=rc(r,c,rb,cb,rd,cd)\n    la.append(ans)\nfor x in la:\n    print(x)\n        ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, rb, cb, rd, cd = map(int, input().strip().split())\n\n    row = None\n    if rd == rb:\n        row = 0\n    elif rd < rb:\n        row = abs(n - rb) + abs(n - rd)\n    else:\n        row = abs(rb - rd)\n\n    col = None\n    if cd == cb:\n        col = 0\n    elif cd < cb:\n        col = abs(m - cb) + abs(m - cd)\n    else:\n        col = abs(cb - cd)\n    \n\n    print(min(row, col))",
                true
            ],
            [
                "import sys\n\n# sys.setrecursionlimit(200005)\nint1 = lambda x: int(x)-1\npDB = lambda *x: print(*x, end=\"\\n\", file=sys.stderr)\np2D = lambda x: print(*x, sep=\"\\n\", end=\"\\n\\n\", file=sys.stderr)\ndef II(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline().rstrip()\n# dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]\n# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n# inf = 18446744073709551615\ninf = 4294967295\n# md = 10**9+7\nmd = 998244353\n\ndef cost(i, s, h):\n    if i <= s: return s-i\n    return h-i+h-s\n\ndef solve():\n    h, w, i, j, s, t = LI()\n    # i, j, s, t = i-1, j-1, s-1, t-1\n    ans = min(cost(i, s, h), cost(j, t, w))\n    print(ans)\n\nfor testcase in range(II()):\n    solve()\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n\n    p = input()\n    p = p.split()\n\n    for i in range(len(p)):\n        p[i] = int(p[i])\n\n    a = p[4] - p[2]\n    b = p[5] - p[3]\n\n    if a == 0 or b == 0:\n        print(0)\n\n    elif a >= 0 and b >= 0:\n        print(min(a,b))\n\n    elif a >= 0 and b < 0:\n        temp = 2*(p[1] - p[3]) + p[3] - p[5]\n        print(min(a,temp))\n\n    elif b >= 0 and a < 0:\n        temp = 2*p[0] - p[2] - p[4]\n        print(min(b, temp))\n\n    else:\n        temp = 2*(p[1] - p[3]) + p[3] - p[5]\n        temp1 = 2*p[0] - p[2] - p[4]\n        print(min(temp,temp1))",
                true
            ],
            [
                "css = int(input())\nfor _ in range(css):\n    inputSet = [int(num) for num in input().split()]\n    n, m = inputSet[:2]\n    rb, cb = inputSet[2:4]\n    rd, cd = inputSet[4:]\n    verticalCost = rd-rb if rd>=rb else n-rb + n-rd\n    horizontalCost = cd-cb if cd>=cb else m-cb + m-cd\n    print(min(verticalCost, horizontalCost))",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, m, r, c, x, y = map(int, input().split())\n    temp = [x - r if r <= x else 2 * n - x - r, y - c if c <= y else 2 * m - y - c]\n    print(min(temp))",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    # n = int(input())\n    n,m,rx,ry,dx,dy = map(int,input().split())\n    if rx == dx or ry == dy:\n        print(0)\n    elif rx<dx and ry<dy:\n        print(min(dx-rx,dy-ry))\n    elif rx<dx:\n        print(min(dx-rx,(m-dy) + (m-ry)))\n    elif ry<dy:\n        print(min((n-dx) + (n-rx),dy - ry))\n    else:\n        print(min((n-dx) + (n-rx),(m-dy) + (m-ry)))\n\n    # ans = 0\n    # i = rx\n    # j = ry\n    # mi = 1\n    # mj = 1\n    # while(i != dx and j != dy):\n    #     if i == n:\n    #         mi = -1\n    #     if i == 1:\n    #         mi = 1\n    #     i = i + mi\n        \n    #     if j == m:\n    #         mj = -1\n    #     if j == 1:\n    #         mj = 1\n    #     j = j + mj\n        \n    #     ans = ans + 1\n    # print(ans)\n            \n        \n        \n        \n    \n        ",
                true
            ],
            [
                "T=int(input())\nfor _ in range(T):\n  H,W,a,b,c,d=map(int,input().split())\n  ans=float('inf')\n  if a<=c:\n    ans=min(ans,c-a)\n  if b<=d:\n    ans=min(ans,d-b)\n  this=0\n  ans=min(ans,H-a+H-c)\n  ans=min(ans,W-b+W-d)\n  print(ans)",
                true
            ],
            [
                "import math\n\ndef Solve():\n\n    n, m, a, b, c, d = map(int, input().split())\n\n    C = 0\n    r1, r2 = 1, 1\n    while a != c and b != d:\n        C = C + 1\n        if a == n:\n            r1 = -1\n        if b == m:\n            r2 = -1\n        if a == 1:\n            r1 = 1\n        if b == 1:\n            r2 = 1\n        a, b = a + r1, b + r2\n    print(C)\nq = int(input())\nwhile q > 0:\n    Solve()\n    q = q - 1",
                true
            ],
            [
                "for i in range(int(input())):\n    n,m,rb,cb,rd,cd=map(int,input().split())\n    ans1,ans2=rd-rb,cd-cb\n    if rb>rd:\n        ans1=2*n -rb-rd\n    if cb>cd:\n        ans2=2*m-cb-cd\n    print(min(ans1,ans2))    ",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n,m,rx,ry,mx,my = map(int,input().split())\n    t1x=0\n    t1y=0\n    dx=1\n    dy=1\n    if mx>=rx:\n        t1x = mx-rx\n    else:\n        t1x = 2*n-mx-rx\n    if my>=ry:\n        t1y = my-ry\n    else:\n        t1y = 2*m-my-ry\n    print(min(t1x,t1y))\n        \n",
                true
            ],
            [
                "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n,m,r,b,rd,bd=map(int,sys.stdin.readline().split())\n    rc=1\n    dc=1\n    t=0\n    while(r!=rd or b!=bd):\n        if(r==rd or b==bd):\n            break\n        if(r==n ):\n            rc=-1\n        if(b==m):\n            dc=-1\n        r=r+rc\n        b=b+dc\n        t+=1\n    print(t)",
                true
            ],
            [
                "debug = False\n\nif debug:\n    s = \"\"\"5\n    10 10 6 1 2 8\n    10 10 9 9 1 1\n    9 8 5 6 2 1\n    6 9 2 2 5 8\n    2 2 1 1 2 1\"\"\"\n    input_data = iter(s.split('\\n'))\nelse:\n    def func():\n        while 1:\n            yield input()\n\n\n    input_data = func()\n\n\ndef get_data():\n    n_data = int(next(input_data))\n    for _ in range(n_data):\n        n, m, cleaner_row, cleaner_column, mud_row, mud_column = map(int, next(input_data).split())\n        yield n, m, cleaner_row, cleaner_column, mud_row, mud_column\n\n\ndef solve(n, m, cleaner_row, cleaner_column, mud_row, mud_column, dr=1, dc=1):\n    steps = 0\n    while cleaner_row != mud_row and cleaner_column != mud_column:\n        if not (0 < cleaner_row + dr <= n):\n            dr = -dr\n        if not (0 < cleaner_column + dc <= m):\n            dc = -dc\n        cleaner_row = cleaner_row + dr\n        cleaner_column = cleaner_column + dc\n        steps += 1\n    print(steps)\n\n\ndef main():\n    for data in get_data():\n        solve(*data)\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "def find(n, m, rb, cb, rd, cd):\n    samerow = abs(rb-rd)\n    if rd < rb:\n        samerow = 2*n - rb - rd\n    samecol = abs(cb-cd)\n    if cd < cb:\n        samecol = 2*m - cb - cd\n    return min(samerow, samecol)\n\ncases = int(input())\nfor _ in range(cases):\n    line = input().split( )\n    n, m, rb, cb, rd, cd = int(line[0]), int(line[1]), int(line[2]), int(line[3]), int(line[4]), int(line[5])\n    print(find(n, m, rb, cb, rd, cd))",
                true
            ],
            [
                "for i in range(int(input())):\n    \n    rows, cols, x1, y1, x2, y2 = map(int, input().split())\n \n    if x2 >= x1:\n        x_value = x2 - x1\n    else:\n        x_value = 2*rows - (x1 + x2)\n \n    if y2 >= y1:\n        y_value = y2 - y1\n    else:\n        y_value = 2*cols - (y1 + y2)\n \n    ans = min(x_value, y_value)\n    print(ans)",
                true
            ],
            [
                "for i in range(int(input())):\n    n, m, rb, cb, rd, cd = map(int,input().split())\n    t = 0\n    dr = 1\n    dc =1\n    while rb != rd and cb != cd:\n        if rb == 1 and dr == -1:\n            dr = 1\n        if rb == n and dr == 1:\n            dr = -1\n        if cb == 1 and dc == -1:\n            dc = 1\n        if cb == m and dc == 1:\n            dc = -1\n        rb += dr\n        cb += dc\n        t+=1\n    print(t)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n,m,startRow,startCol,dirtyRow,dirtyCol = map(int, input().split())\n    if startRow<=dirtyRow and startCol<=dirtyCol:\n        print(min(dirtyRow-startRow, dirtyCol-startCol))\n    elif startRow<=dirtyRow or startCol<=dirtyCol:\n        if startRow<=dirtyRow:\n            print(min(dirtyRow-startRow, 2*(m-startCol) + (startCol-dirtyCol)))\n        else:\n            print(min(dirtyCol-startCol, 2*(n-startRow) + (startRow-dirtyRow)))\n    else:\n        print(min(2*(m-startCol) + (startCol-dirtyCol), 2*(n-startRow) + (startRow-dirtyRow)))\n\n",
                true
            ],
            [
                "import sys\n\nfor t in range(int(input())):\n    n, m, rb, cb, rd, cd = list(map(int, input().split(\" \")))\n    ans = sys.maxsize\n    tmp = cd - cb\n    if tmp > 0: ans = tmp\n    tmp = rd - rb\n    if tmp > 0:\n        ans = min(ans, tmp)\n    if cd - cb == 0 or rd - rb == 0: ans = 0\n    ans = min(ans, m - cb + m - cd, n - rb + n - rd)\n    print(ans)\n    ",
                true
            ],
            [
                "\ndef clean(n, m, xbot, ybot, xdirt, ydirt, count, dirx, diry):\n    # print( \"test:\", xbot, ybot, xdirt, ydirt, count )\n    if xbot == xdirt or ybot == ydirt:\n        print(count)\n        return\n    \n    \n    if xbot + dirx > n or xbot + dirx < 1:\n        dirx = -1*dirx\n    \n    if ybot + diry > m or ybot + diry < 1:\n        diry = -1*diry\n        \n    clean(n, m, xbot+dirx, ybot+diry, xdirt, ydirt, count+1, dirx, diry)\n    \n        \ndef main():\n    t = int(input())\n    for i in range(t):\n        testcase = input().split( \" \" )\n        clean( int(testcase[0]), int(testcase[1]), int(testcase[2]), int(testcase[3]), int(testcase[4]), int(testcase[5]), 0, 1, 1 )\n         \n\n\n    \n\nif __name__ == \"__main__\":\n    # print(add( \"99\", \"999\"))\n    main()",
                true
            ],
            [
                "n = int(input())\n\n\ndef canClean(rn, cn, rd, cd):\n    if (rn == rd or cn == cd):\n        return True\n    else:\n        return False\n\n\nli = []\nfor _ in range(n):\n    n, m, rn, cn, rd, cd = map(int, input().split())\n    dx = 1\n    dy = 1\n    t = 0\n    while(not canClean(rn, cn, rd, cd)):\n        if (rn + dy > n or rn + dy < 1):\n            dy *= -1\n        if (cn + dx > m or cn + dx < 1):\n            dx *= -1\n        rn = rn + dy\n        cn = cn + dx\n        t += 1\n    li.append(t)\nfor i in li:\n    print(i)",
                true
            ],
            [
                "x=int(input())\nwhile(x>0):\n    w=[int(i) for i in input().split()]\n    n=w[0]\n    c=w[1]\n    rb=w[2]\n    rc=w[3]\n    d=[w[4],w[5]]\n    s=1\n    if(d[0]-rb<0 and d[1]-rc>=0):\n        a=n-rb\n        t=min(d[1]-rc,n-d[0]+a)\n        print(t)\n    elif(d[0]-rb>=0 and d[1]-rc<0):\n        b=c-rc\n        t=min(d[0]-rb,c-d[1]+b)\n        print(t)\n    elif(d[0]-rb>=0 and d[1]-rc>=0):\n        t=min(d[0]-rb,d[1]-rc)\n        print(t)\n    else:\n        a=n-rb\n        b=c-rc\n        t=min(n-d[0]+a,c-d[1]+b)\n        print(t)\n    x-=1\n",
                true
            ],
            [
                "from __future__ import print_function \nfrom os import environ\nimport sys\nimport math\nfrom bisect import bisect_left\n# from collections import defaultdict\nif environ.get(\"epoweripi\"):\n    sys.stdin = open('../../input.txt', 'r')\n    sys.stdout = open('../../output.txt', 'w')\n\ninput = sys.stdin.readline\nmod = (10**9) + 7\ndef I(): return input().strip() \ndef II(): return int(input().strip())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\n\n#if using python3\nif sys.version[0]==\"3\":\n    print = sys.stdout.write \n    def P(z=''):    \n        print(str(z)+'\\n')\n    def LP(z=[]): \n        for i in z:\n            print(str(i)+' ')\n        print('\\n')\n#if using pypy2/python2\nelse:\n    def P(z=''):    \n        print(str(z))\n    def LP(z=[]): \n        for i in z:\n            print(str(i)+' ', end='')\n        print()\n\n######## mathematical functions\ndef gcd(a, b):\n    return a if b==0 else gcd(b, a%b)\ndef sieve(n):\n    isPrimes = [True for i in range(n+1)]\n    isPrimes[0], isPrimes[1] = False, False\n    p = 2\n    while p*p<=n:\n        if isPrimes[p]==True:\n            for j in range(p*p,n+1,p):\n                isPrimes[j] = False\n        p+=1\n    #return accordingly\ndef swap(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\n########\ndef solve():\n    n, m, pos_r, pos_c, rd, cd = MI()\n    count = 0\n    dr = 1\n    dc = 1\n    # P([pos_r])\n    while pos_r!=rd and pos_c!=cd:\n        if pos_r==n or pos_r==0:\n            dr = -dr\n        if pos_c==m or pos_c==0:\n            dc = -dc\n        # P([pos_r, pos_c, count])\n        pos_r += dr\n        pos_c += dc\n        count+=1\n\n    P(count)\n\n\n\n\n\n\n\n\n\n    \ndef main():\n    for _ in range(II()):\n        solve()\n\nif __name__==\"__main__\":\n    main()\n\n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    x,y,x1,y1,x2,y2=list(map(int,input().split()))\n    d=1\n    v=1\n    c=0\n    c1=0\n    while x1!=x2:\n        c+=1\n        if d==1 and x1!=x:\n            x1+=1\n        elif d==1 and x1==x:\n            d=-1\n            x1-=1\n        elif d==-1 and x1==0:\n            d=1\n            x1+=1\n        elif d==-1 and x1!=0:\n            x1-=1\n    while y1!=y2:\n        c1+=1\n        if v==1 and y1!=y:\n            y1+=1\n        elif v==1 and y1==y:\n            v=-1\n            y1-=1\n        elif v==-1 and y1==0:\n            v=1\n            y1+=1\n        elif v==-1 and y1!=0:\n            y1-=1\n    if c>c1:\n        print(c1)\n    else:\n        print(c)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n\nfor _ in range(int(input())):\n    n, m, rb, cb, rd, cd = map(int, input().split())\n    if rd >= rb and cd >= cb:\n        print(min(rd - rb, cd - cb))\n    elif rd >= rb:\n        print(min(rd - rb, (m - cb) * 2 + cb - cd))\n    elif cd >= cb:\n        print(min(cd - cb, (n - rb) * 2 + rb - rd))\n    else:\n        print(min((n - rb) * 2 + rb - rd, (m - cb) * 2 + cb - cd))\n",
                true
            ],
            [
                "t=int(input())\nres=[]\nfor i in range(t):\n    # n , m, rb, cb, rd, and cd \n    l=input().split()\n    l=[int(j) for j in l]\n    n=l[0]\n    m=l[1]\n    rb = l[2]\n    cb = l[3]\n    rd = l[4]\n    cd = l[5]\n\n    if (rb==rd or cb==cd): \n        res.append(0)\n    elif (rb<rd and cb<cd):\n        res.append(min(rd-rb,cd-cb))\n    else:\n        if (rb < rd) : \n            res.append(min(rd-rb,m-cd+m-cb))\n        elif(cb < cd):\n            res.append(min(n-rd+n-rb,cd-cb))\n        else:\n            # print(\"in req\")\n            res.append(min(n-rd+n-rb,m-cd+m-cb))\n\n\nfor i in res:\n    print(i)",
                true
            ],
            [
                "def do(n, m, rob_y, rob_x, dirt_y, dirt_x):\n    rx, ry = rob_x, rob_y\n    dx, dy = dirt_x, dirt_y\n    c = 0\n    ddx,ddy = 1,1\n    while True:\n        if (rx == dx) or (ry==dy):\n            break\n        if rx==m or rx==0:\n            ddx = -ddx\n        if ry==n or ry==0:\n            ddy = -ddy\n        rx += ddx\n        ry += ddy\n        c+=1\n    print(c)\n\nt = int(input())\nfor i in range(t):\n    n, m, rob_y, rob_x, dirt_y, dirt_x = list(map(int, input().split()))\n    do(n, m, rob_y, rob_x, dirt_y, dirt_x)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,x,y,a,b=map(int,input().split())\n\n    if x>a: d=(n-x)+(n-a)\n    else: d=a-x\n\n    if y>b: t=(m-y)+(m-b)\n    else: t=b-y\n\n    print(min(d,t))",
                true
            ],
            [
                "\n# imports from ollelapidus @codeforces\nfrom sys import stdin#, setrecursionlimit\nfrom heapq import heappush, heappop, heapify, heappushpop\n#setrecursionlimit(1000000)\nlines = stdin.read().splitlines()\nli = -1\ndef inp(): global li; li += 1; return lines[li]\ndef inpint(): global li; li += 1; return int(lines[li])\ndef inpints(change = 0): global li; li += 1; return [int(i) + change for i in lines[li].split()]\ndef inpfloat(): global li; li += 1; return float(lines[li])\ndef inpfloats(change = 0): global li; li += 1; return [float(i) + change for i in lines[li].split()]\n\nt = inpint()\n \nfor T in range(t):\n    R, C, rb, cb, rt,ct = inpints()\n    # print(m,n,rb,cb,rt,ct)\n\n    dr = 1\n    dc = 1\n    step = 0\n    while True:\n        if rb == rt or cb == ct:\n            break\n        \n        if rb + dr > R or rb + dr < 0:\n            dr = -dr\n        rb += dr\n        if cb + dc > C or cb + dc < 0:\n            dc = -dc\n        cb += dc\n        step += 1\n    \n    print(step)\n        ",
                true
            ],
            [
                "instances = int(input())\n\nfor i in range(instances):\n    data = [int(j) for j in input().split()]\n    n,m,r_b,c_b,r_d,c_d = data\n    dr,dc = 1,1\n    time = 0\n    while r_b != r_d and c_b != c_d:\n        if r_b == n:\n            dr = - dr\n        if c_b == m:\n            dc = -dc\n        r_b, c_b = r_b + dr, c_b + dc\n        time += 1\n    print(time)\n",
                true
            ],
            [
                "def main():\n    for i in range(int(input())):\n        print(f\"{solve(*parse())}\")\n\ndef parse():\n    n,m,rb,cb,rd,cd = input().split()\n    return int(n),int(m),int(rb),int(cb),int(rd),int(cd)\n\ndef solve(n,m,rb,cb,rd,cd):\n    dr = 1\n    dc = 1\n    c = 0\n    moves = 0\n    if rb == rd or cb == cd:\n        c = 1\n\n    if rb == n:\n        dr = dr*-1\n    if cb == m:\n        dc = dc*-1\n\n    while c == 0:\n        moves += 1\n        rb += dr\n        cb += dc\n        if rb == n or rb == 1:\n            dr = dr*-1\n        if cb == m or cb == 1:\n            dc = dc*-1\n        if rb == rd: \n            c = 1\n        if cb == cd:\n            c = 1\n    return moves \n\nif __name__ == \"__main__\":\n    main()\n",
                true
            ],
            [
                "##########################################################################\n#     Author : nesco   \n#     Created: Thu Dec 30 2021 21:15:26\n#     File   : A. Robot Cleaner\n##########################################################################\nimport sys,math,cmath,time,collections\n##########################################################################\n################# ---- THE ACTUAL CODE STARTS BELOW ---- #################\ndef solve():\n    n, m, rb, cb, rd, cd = invr()\n\n    dr = 1\n    cr = 1\n    cnt = 0\n\n    while True:\n        if rb == rd:\n            break\n\n        if cb == cd:\n            break\n\n        if rb == n:\n            dr = -1\n        elif rb == 1:\n            dr = 1\n\n        if cb == m:\n            cr = -1\n        elif cb == 1:\n            cr = 1\n\n        rb = rb + dr\n        cb = cb + cr\n\n        cnt = cnt + 1\n\n    print(cnt)\n\n################## ---- THE ACTUAL CODE ENDS ABOVE ---- ##################\n##########################################################################\n \ndef main():\n    global tt\n    t = inp()\n    for tt in range(1,t + 1):\n        solve()\n \n#---------------------- USER DEFINED INPUT FUNCTIONS --------------------#\ndef inp():   # input integer\n    return(int(input()))\ndef inlt():  # input list of integers\n    return(list(map(int,input().split())))\ndef inls():  # input list of strings\n    return(list(map(str,input().split())))\ndef insr():  # input string\n    return(input().strip())\ndef invr():  # input array\n    return(map(int,input().split()))\n \n#------------------ USER DEFINED PROGRAMMING FUNCTIONS ------------------#\n# are a and b coprime?\ndef is_coprime(x, y):\n    return gcd(x, y) == 1\n\n# gcd of two positive integers\ndef gcd(p,q):\n    while q != 0:\n        p, q = q, p%q\n    return p\n\n# set to list converter\ndef convert(set):\n    return list(set)\n\n# outputs unique values from list\ndef unique(list):\n    list_set = set(list)\n    unique_list = convert(list_set)\n    return unique_list\n\n# sorting string\ndef sort_string(string):\n    r = sorted(string)\n    return \"\".join(r)\n\n# reverse string\ndef reverse_string(string):\n    return string[::-1]\n\n# Convert string to list character-wise\ndef convert_to_list(string):\n    lis=[]\n    lis[:0]=string\n    return lis\n\n# list of all prime numbers up to n\ndef seive(n):\n    a = []\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p ** 2,n + 1, p): \n                prime[i] = False\n        p = p + 1\n    for p in range(2,n + 1): \n        if prime[p]: \n            a.append(p)\n    return(a)\n\ndef counter(a):\n    q = [0] * max(a)\n    for i in range(len(a)):\n        q[a[i] - 1] = q[a[i] - 1] + 1\n    return(q)\n \n# counts number of elements \ndef counter_elements(a):\n    q = dict()\n    for i in range(len(a)):\n        if a[i] not in q:\n            q[a[i]] = 0\n        q[a[i]] = q[a[i]] + 1\n    return(q)\n\n# counts number of letters in string\ndef string_counter(a):\n    q = [0] * 26\n    for i in range(len(a)):\n        q[ord(a[i]) - 97] = q[ord(a[i]) - 97] + 1\n    return(q)\n \n# returns factorial of n\ndef factorial(n,m = 1000000007):\n    q = 1\n    for i in range(n):\n        q = (q * (i + 1)) % m\n    return(q)\n\n# returns all (possible) factors of n\ndef factors(n):\n    q = []\n    for i in range(1,int(n ** 0.5) + 1):\n        if n % i == 0: q.append(i); q.append(n // i)\n    return(list(sorted(list(set(q)))))\n\n# returns prime factors of n\ndef prime_factors(n):\n    q = []\n    while n % 2 == 0: q.append(2); n = n // 2\n    for i in range(3,int(n ** 0.5) + 1,2):\n        while n % i == 0: q.append(i); n = n // i\n    if n > 2: q.append(n)\n    return(list(sorted(q)))\n\n# transpose matrix or vector (list)\ndef transpose(a):\n    n,m = len(a),len(a[0])\n    b = [[0] * n for i in range(m)]\n    for i in range(m): \n        for j in range(n): \n            b[i][j] = a[j][i]\n    return(b)\n\n# returns boolean if x is power of two\ndef power_two(x):\n    return (x and (not(x & (x - 1))))\n\n# returns ceil of division\ndef ceil(a, b):\n    return -(-a // b)\n#-----------------------------------------------------------------------#\n    \nmain()",
                true
            ],
            [
                "# import time\ndef checker(rb, cb, rd, cd):\n    if rb == rd or cb == cd:\n        return 1\n    else:\n        return 0\n\ndef main():\n    _t = int(input())\n    # robots position => rb, cb\n    # dirt position => rd, cd\n    for m in range(_t):\n        n, m, rb, cb, rd, cd = map(int, input().split())\n        rb, cb, rd, cd = rb - 1, cb - 1, rd - 1, cd  - 1        \n        check1 = checker(rb, cb, rd, cd)\n        if check1 == 1:\n            print(0)\n            continue\n        answer = 0\n        # Changing positions now\n        if rb == 0:\n            x_mover = -1\n        else:\n            x_mover = 1\n        if cb == 0:\n            y_mover = -1\n        else:\n            y_mover = 1\n        while True:\n            if rb == n-1 or rb == 0:\n                x_mover *= -1\n            if cb == m - 1 or cb == 0:\n                y_mover *= -1\n            # if rb < n-1 and cb < m - 1:\n            rb += x_mover\n            cb += y_mover\n            check2 = checker(rb, cb, rd, cd)\n            if check2 == 1:\n                print(answer + 1)\n                break\n            else:\n                # print(f\"rb {rb} and cb {cb} and x_mover {x_mover} and y_mover {y_mover}\")\n                answer += 1\n            # time.sleep(1)\nmain()\n\n",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(0, n):\n    x = 1\n    y = 1\n    n, m, rb, cb, rd, cd = map(int, input().split())\n    c = 0\n    while True:\n        if rb == rd or cb == cd:\n            print(c)\n            break\n        if rb == 1:\n            y = 1\n        if rb == n:\n            y = -1\n        if cb == 1:\n            x = 1\n        if cb == m:\n            x = -1\n\n        rb += y\n        cb += x\n\n        c += 1\n",
                true
            ],
            [
                "t = int(input())\n\nwhile t != 0:\n    rows, cols, ini_row, ini_col, final_row, final_col = map(int, input().split())\n\n    if ini_row <= final_row:\n        row_steps = final_row - ini_row\n    else:\n        row_steps = (rows - ini_row) + (rows - final_row)\n    \n    if ini_col <= final_col:\n        col_steps = final_col - ini_col\n    else:\n        col_steps = (cols - ini_col) + (cols - final_col)\n    \n    ans = min(row_steps, col_steps)\n\n    print(ans)\n\n    t -= 1\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n , m, rb, cb, rd, cd = map(int,input().split())\n    if rb==rd or cb==cd:\n        print(0)\n    else:\n        dr=1\n        dc=1\n        x=0\n        while rb!=rd and cb!=cd:\n            if rb==n:\n                dr*=-1\n            if cb==m:\n                dc*=-1\n            rb+=dr\n            cb+=dc\n            #print(rb,cb)\n            x+=1\n        print(x)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,rb,cb,rd,cd=list(map(int,input().split()))\n    row=1\n    col=1\n    ans=0\n    while rb!=rd and cb!=cd:\n        if rb==n:\n            row = -1\n        if cb==m:\n            col = -1\n        rb,cb= rb+row,cb+col\n        ans+=1\n    print(ans)",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nA string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "n=int(input())\nfor i in range(n):\n  a=input()\n  y=\"YES\"\n  o=len(a)//2\n  if o==0 or len(a)%2!=0 or a.count(a[0:o])!=2:\n    y=\"NO\"\n  print(y)\n",
                true
            ],
            [
                "a=int(input())\nans=[]\nq=[]\nfor i in range(a):\n    b=input()\n    q.append(b)\nfor i in q:\n    l=len(i)\n    if l%2 ==1:\n        print(\"NO\")\n    else:\n        x=i[0:int(l/2)]\n        y=i[int(l/2):]\n        if x == y :\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for i in range(int(input())):\n    s = input()\n    if len(s)%2 != 0:\n        print('NO')\n        continue\n    j = len(s)//2\n    i = 0\n    flag = False\n    while j < len(s):\n        if s[i] != s[j]:\n            flag = True\n            break\n        i += 1\n        j += 1\n    if flag:\n        print('NO')\n    else:\n        print('YES')\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a = input()\n    if len(a)%2 == 1:\n        print(\"NO\")\n    else:\n        if a[:len(a)//2] == a[len(a)//2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "import sys\nfor _ in range(int(sys.stdin.readline())):\n    s=input()\n    if(len(s)%2==1):\n        print(\"NO\")\n        continue\n    x=len(s)//2\n    if(s[:x]==s[x:]):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "N = int(input())\nfor _ in range(N):\n    S = input()\n    ls = len(S)\n    if ls % 2 != 0:\n        print(\"NO\")\n    else:\n        if S[0 : ls // 2] == S[ls // 2 :]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
                true
            ],
            [
                "n = int(input())\nwhile(n):\n    n -=1\n    sr = input()\n\n    if(len(sr)%2==0):\n        a = len(sr)//2\n        count =0\n        for i in range(a):\n            sum1 = sr[i]\n            sum2 =sr[a+i]\n            if(sum1==sum2):\n                count +=1\n        if(count==a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    n = len(s)\n    flag = 1\n    if n % 2 == 0:\n        p1, p2 = 0, n//2\n        for i in range(n//2):\n            if s[p1] != s[p2]:\n                flag = 0\n                break\n            else:\n                flag = 1\n            p1 += 1\n            p2 += 1\n        if flag == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        print(\"NO\")\n            ",
                true
            ],
            [
                "n = int(input())\n\narr = []\nfor i in range(n):\n    arr.append(input())\n\nfor st in arr:\n    l = len(st)\n    if l % 2 == 0:\n        # print(st[0:l//2] , st[l//2:])\n        if st[:l//2] == st[l//2:]:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s=input()\n    l=len(s)\n    if(l%2!=0):\n        l1=s[0:int(l/2)]\n        l2=s[int(l/2)+1:0]\n    else:\n        l1=s[0:int(l/2)]\n        l2=s[int(l/2):]\n    l11=list(l1)\n    l22=list(l2)\n    # print(l22)\n    if(l!=1):\n     if(l11==l22):\n        print(\"YES\")\n     else:\n        print(\"NO\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "#Mamma don't raises quitter.................................................\n#manan is improving, keep hustling manan bhai ;)\nfrom collections import deque as de\nimport math\nimport sys\nfrom math import sqrt as sq\nfrom math import floor as fl\nfrom math import ceil as ce\nfrom sys import stdin, stdout\nimport time\n\nsys.setrecursionlimit(10**7)\nfrom collections import Counter as cnt\nfrom functools import  reduce\n\nfrom itertools import groupby as gb\n#from fractions import Fraction as fr\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom typing import Coroutine\n\ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    \nclass My_stack():\n    def __init__(self):\n        self.data = []\n    def my_push(self, x):\n        return (self.data.append(x))\n    def my_pop(self):\n        return (self.data.pop())\n    def __iter__(self):\n        return iter(self.data)\n    def my_peak(self):\n        return (self.data[-1])\n    def my_contains(self, x):\n        return (self.data.count(x))\n    def my_show_all(self):\n        return (self.data)\n    def isEmpty(self):\n      return len(self.data)==0\n    def len(self):\n        return len(self.data)\n    \n\narrStack = My_stack() \n\nclass graph():\n    def __init__(self):\n        self.graphdict = {}\n    def add_edge(self, node, neighbor):\n        if node not in self.graphdict:\n            self.graphdict[node]=[neighbor]\n        else:\n            self.graphdict[node].append(neighbor)\n    def show_edge(self):\n        for node in self.graphdict:\n            for neighbors in self.graphdict:\n                print(node, neighbors)\n    def show_graph(self):\n        return self.graphdict\n\n    \n\n\n    \n            \n\n#decimal to binary   \ndef decimalToBinary(n): \n    return bin(n).replace(\"0b\", \"\")\n#binary to decimal\ndef binarytodecimal(n):\n    return int(n,2)\n\ndef isPrime(n) : \n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\ndef get_prime_factors(number):\n    prime_factors = []\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number = number / 2\n    for i in range(3, int(math.sqrt(number)) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(int(i))\n            number = number / i\n\n    if number > 2:\n        prime_factors.append(int(number))\n    return prime_factors\n\ndef get_frequency(list):\n    dic={}\n    for ele in list:\n        if ele in dic:\n            dic[ele] += 1\n        else:\n            dic[ele] = 1\n    return dic\n\ndef Log2(x): \n    return (math.log10(x) / \n            math.log10(2)); \n\n \n# Function to get product of digits\ndef getProduct(n):\n    product = 1\n    while (n != 0):\n        product = product * (n % 10)\n        n = n // 10\n    return product\n#fucntion to find regular bracket sequence\ndef regularBracketsequence(str,arrStack):\n    for i in range(len(str)):\n        if str[i] =='(':\n            arrStack.my_push(str[i])\n        else:\n            if arrStack.isEmpty():\n                return False\n            else:\n                arrStack.my_pop()\n    if arrStack.isEmpty():\n        return True\n    else:\n        return False\n\n#function to find LCM of two numbers\ndef lcm(x,y):\n   lcm = (x*y)//math.gcd(x,y)\n   return lcm\n\ndef isPowerOfTwo(n): \n    return (math.ceil(Log2(n)) == math.floor(Log2(n))); \n#to check whether the given sorted sequnce is forming an AP or not....\ndef checkisap(list):\n    d=list[1]-list[0]\n    for i in range(2,len(list)):\n        temp=list[i]-list[i-1]\n        if temp !=d:\n            return False\n    return True\n\n#seive of erathanos\ndef primes_method5(n):\n    out ={}\n    sieve = [True] * (n+1)\n    for p in range(2, n+1):\n        if (sieve[p]):\n            out[p]=1\n            for i in range(p, n+1, p):\n                sieve[i] = False\n    return out\n#fucntion to get unique number to a cell in a matrix\ndef id(i, j, col): #one based indexing and columnwise numeration\n    ans= (i-1)*col\n    ans+=j\n    return ans\n\n#function to get the sum of digits\ndef getSum(n): \n      \n    strr = str(n)\n    list_of_number = list(map(int, strr.strip()))\n    return sum(list_of_number)\ndef checkperfectsquare(n):\n    if (ce(sq(n)) == fl(sq(n))):\n        return True\n    else:\n        return False\n#this used for selecting r objects from n ojects\ndef combinatrics(n,r):\n    num=n\n    deno=n-r\n    pr=1\n    for i in range(num,deno,-1):\n        pr*=i\n    an=1\n    for i in range(1,r+1):\n        an*=i\n    ans=pr//an\n    return ans\n#ceil  function gives wrong answer after 10^17 so i have to create my own :)\n# because i don't want to doubt on my solution of 900-1000 problem set.\ndef ceildiv(x,y): \n    return (x+y-1)//y \n  \ndef di():return map(int, input().split())\ndef ii():return int(input())\ndef li():return list(map(int, input().split()))\ndef si():return list(map(str, input()))\ndef indict():\n    dic = {}\n    for index, value in enumerate(input().split()):\n        dic[int(value)] = int(index)\n    return dic\ndef frqdict(): \n    # by default it is for integer input. :)\n    dic={}\n    for index, value in enumerate(input()):\n        if value not in dic:\n            dic[value] =1\n        else:\n            dic[value] +=1\n    return dic\n\n#sys.stdin = open('input.txt', 'r')\n#sys.stdout = open('output.txt', 'w')\n#practice like your never won\n#perform like you never lost\nt=ii()\nwhile t:\n    t-=1\n    s=si()\n    ln=len(s)\n    if ln%2:\n        print(\"NO\")\n    else:\n        if s[:ln//2]==s[ln//2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n        \n        \n    \n\n    \n\n                \n            \n    ",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    s = input()\n\n    if len(s) % 2:\n        print(\"NO\")\n    else:\n        if s[0 : len(s) // 2] == s[len(s) // 2 :]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
                true
            ],
            [
                "\n\nfor t in range(int(input())):\n    s = input()\n    if len(s) % 2 == 0 and s.count(s[:len(s)//2]) >= 2:\n        print('YES')\n\n    else:\n        print('NO')",
                true
            ],
            [
                "for i in range(int(input())):\n    s=input()\n    if len(s)%2!=0:\n        print(\"NO\")\n    else:\n        s1=s[0:len(s)//2]\n        s2=s[len(s)//2:len(s)]\n        if s1==s2:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "# cook your dish here\nfrom collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, log2, sqrt, gcd\nimport bisect\nimport copy\nfrom itertools import combinations\nimport sys\nimport heapq\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef input(): return sys.stdin.readline().strip()\n\n\n\nfor _ in range(int(input())):\n    s=input()\n    n=len(s)\n    if n%2==1:\n        print(\"NO\")\n    else:\n        n1=n//2\n        s1=s[:n1]\n        s2=s[n1:]\n        if s1==s2:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "def process(s):\n\n    if len(s)%2==1:\n        return False\n\n    else: return s[0:int(len(s)/2)]==s[int(len(s)/2):]\n\n\n\nt = int(input())\n\nfor i in range(t):\n    \n    s = input()\n\n    b = process(s)\n    if(b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n",
                true
            ],
            [
                "from collections import defaultdict\n\nfor _ in range(int(input())):\n    s = input()\n    ok = True\n    if len(s)%2 !=0:\n        ok = False\n    mid = len(s)//2\n    for i in range(mid):\n        if s[i]!=s[i+mid]:\n            ok = False\n    \n    \n    if ok:\n        print('YES')\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "# from math import gcd\n# from collections import Counter\nfor _ in range(int(input())):\n    s=input().strip()\n    if s[:len(s)//2]*2==s:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "import sys\n# from abc import abstractmethod\n# from collections import deque\nimport math\nfrom typing import AnyStr \n# import heapq\n# import random\n# import copy\n# from decimal import Decimal\n# from collections import defaultdict\n# from typing import AnyStr\n\nINF = int(1e15 + 1)\nmod = 1000000007\n\nread = sys.stdin.readline\nsys.setrecursionlimit(10**5)\ndx = [0 , 1, 0, -1]\ndy = [-1, 0, 1, 0]\nseg = []\n\ndef power(bottom, up):\n    if up == 1:\n        return bottom\n    elif up == 0:\n        return 1\n    tmp = power(bottom, int(up // 2))\n    if up % 2 == 0:\n        return (tmp * tmp) % mod\n    else:\n        return (tmp * tmp * bottom) % mod\n\ndef ccw(p1, p2, p3):\n    a = p2[0] - p1[0]\n    b = p2[1] - p1[1]\n\n    c = p3[0] - p1[0]\n    d = p3[1] - p1[1]\n\n    tmp = a * d - b * c\n\n    if tmp > 0:\n        return 1\n    elif tmp == 0:\n        return 0\n    else:\n        return -1\n\ndef lower_bound(item):\n    left =0 \n    right = len(queue)\n\n    while left < right:\n        mid = int((left + right) // 2)\n        if queue[mid] > item:\n            right = mid\n        elif queue[mid] <= item:\n            left = mid + 1\n\n    return int((left + right)// 2)\n\ndef make_seg(left, right, node):\n    if left == right:\n        seg[node] = arr[left - 1]\n        return seg[node]\n    \n    mid = int((left + right) // 2)\n    seg[node] = make_seg(left , mid , node * 2)\n    seg[node] += make_seg(mid + 1 , right , node * 2 + 1)\n\n    return seg[node]\n\ndef seg_replace(left , right, node,index, diff):\n    if index < left or index > right:\n        return\n\n    seg[node] += diff\n    if left == right:\n        return\n    \n    mid = (left + right) // 2\n    seg_replace(left , mid , node * 2 , index, diff)\n    seg_replace(mid + 1 , right , node *2 + 1, index,  diff)\n\n\ndef seg_sum(left, right, start , end, node):\n    if start <= left and right <= end:\n        return seg[node]\n\n    if end < left or start > right:\n        return 0\n\n    mid = (left+right) // 2\n\n    return seg_sum(left , mid , start , end, node * 2) + seg_sum(mid + 1 , right , start , end, node * 2 + 1)\n\ndef lazy_seg_replace(left, right, node,  start, end , diff):\n    if seg_lazy[node] != 0:\n        seg[node] += seg_lazy[node] * (right - left + 1)\n\n        if left != right:\n            seg_lazy[node * 2] += seg_lazy[node]\n            seg_lazy[node * 2 + 1] += seg_lazy[node]\n        \n        seg_lazy[node] = 0\n\n    if start<= left and right <= end:\n        seg_lazy[node] += diff\n        seg[node] += seg_lazy[node] * (right - left + 1)\n\n        if left != right:\n            seg_lazy[node * 2] += seg_lazy[node]\n            seg_lazy[node * 2 + 1] += seg_lazy[node]\n        \n        seg_lazy[node] = 0\n        return seg[node]\n    \n    if end < left or start > right:\n        return seg[node]\n    \n\n    mid = (left + right) // 2\n\n    seg[node] = lazy_seg_replace(left, mid, node * 2 , start , end, diff)\n    seg[node] += lazy_seg_replace(mid + 1 , right , node * 2 + 1 , start , end , diff)\n\n    return seg[node]\n\ndef lazy_seg_sum(left , right, node , start , end):\n    # print(left , right , start, end)\n    if seg_lazy[node] != 0:\n        seg[node] += seg_lazy[node] * (right - left + 1)\n\n        if left != right:\n            seg_lazy[node * 2] += seg_lazy[node]\n            seg_lazy[node * 2 + 1] += seg_lazy[node]\n        \n        seg_lazy[node] = 0\n    \n    if start <= left and right <= end:\n        tmp = seg[node]\n        seg[node] = 0\n        return tmp\n    \n    if end < left or right < start:\n        return 0\n    \n    mid = (left+ right) // 2\n    if mid >= end:\n        tmp = lazy_seg_sum(left , mid , node * 2 , start , end)\n    else:\n        tmp = lazy_seg_sum(mid + 1 , right , node * 2  + 1, start , end)\n\n    seg[node] -= tmp\n    return tmp\n    # return lazy_seg_sum(left , mid , node * 2 , start , end) + lazy_seg_sum(mid + 1 , right , node * 2 + 1 , start,  end) \n        \ndef seg_index(left , right,  node , idx):\n    seg[node] -= 1\n    if left == right:\n        return left\n    mid = (left + right) // 2\n    if seg[node * 2] < idx:\n        return seg_index(mid + 1 , right , node * 2 + 1 , idx - seg[node * 2])\n    else:\n        return seg_index(left , mid , node * 2 , idx )\n    \n\nnum = int(read())\n\nanswer_li = []\n\nfor _ in range(num):\n    word = list(read().strip())\n\n    if len(word) %2 != 0:\n        answer_li.append(\"NO\")\n        continue\n# arr = list(read().strip())\n# print(arr)\n\n    chk = True\n# print(word)\n    for idx in range(len(word) // 2):\n        if word[idx] != word[idx + len(word) // 2]:\n            chk = False\n            break\n    \n    if chk:\n        answer_li.append(\"YES\")\n    else:\n        answer_li.append(\"NO\")\n    # dp = [0 for _ in range(len(word))]\n    # k = 0\n    # for idx in range(1 , len(word)):\n    #     while k>0 and word[k] != word[idx]:\n    #         k = dp[k-1]\n        \n    #     if word[k] == word[idx]:\n    #         k += 1\n    #         dp[idx] = k\n\n    # # print(dp)\n\n    # if dp[-1] == len(word) // 2:\n    #     answer_li.append(\"YES\")\n    # else:\n    #     answer_li.append(\"NO\")\n\n\nprint(\"\\n\".join(answer_li))\n# answer = 0\n# answer_idx = 0\n# for idx in range(len(word)):\n#     if dp[idx] > answer:\n#         answer = dp[idx]\n#         answer_idx = 1\n#     elif dp[idx] == answer:\n#         answer_idx += 1\n\n# if answer == 0:\n#     print(-1)\n# else:\n#     print(answer , answer_idx)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s=input()\n    n=len(s)\n    if(s[:n//2]==s[n//2:]):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n            ",
                true
            ],
            [
                "t=int(input())\nterm=1\nfor i in range(t):\n    n=input()\n    if len(n)%2!=0:\n        term=0\n    else:\n        for i in range((len(n)//2)):\n            if n[i]!=n[(len(n)//2)+i]:\n                term=0\n                break\n            else:\n                term=1\n                \n    if term==0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "def Solve():\n    string1 = input()\n    len1 = len(string1) // 2\n    print(\"YES\" if string1[:len1] == string1[len1:] else \"NO\")\n    \nfor _ in range(int(input())):\n    Solve()",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s=input()\n    if(len(s)>1):\n        l=len(s)//2\n        s1=s[0:l:]\n        s2=s[l:len(s):]\n        if(s1==s2):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "for t in range(int(input())):\n                                 s=input()\n                                 flag=0\n                                                                  \n                                 if len(s)%2==0:\n                                                                  for i in range(len(s)//2):\n                                                                                                   if s[i]==s[i+len(s)//2]:\n                                                                                                                                    flag=1\n                                                                                                   else:\n                                                                                                                                    flag=0\n                                                                                                                                    break\n                                                                 \n                                 if flag==1:\n                                                                  print(\"YES\")\n                                 else:\n                                                                  print(\"NO\")\n                                                                  ",
                true
            ],
            [
                "t=int(input())\nwhile(t>0):\n    #print(t)\n    text=input()\n    #print(text)\n    \n    if(len(text)%2==0):\n        if(text[0:int(len(text)/2)]==text[int(len(text)/2):]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    \n    else:\n        print(\"NO\")\n    \n    \n    t-=1",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    if n%2 ==0:\n        if s[:n//2] == s[n//2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        \n    else:\n        print(\"NO\")",
                true
            ],
            [
                "import sys\n\nt = int(input())\nresult = 'NO'\nfor i in range(t):\n    word = str(input())\n    if len(word) % 2 == 0:\n        if word[:int(len(word)/2)] == word[int(len(word)/2) : len(word)]:\n            result = 'YES'\n        else:\n            result = 'NO'\n    else:\n        result = 'NO'\n    print(result)\n\n\n\n\n",
                true
            ],
            [
                "s = []\nfor _ in range(int(input())):\n    s.append(str(input()))\nfor i in s:\n    x = len(i) // 2\n    if i[x:] == i[:x]:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    a=input()\n    if a[0:len(a)//2]==a[len(a)//2:]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "n = int(input())\nBREAK_OUT_FOR = False \n\nfor i in range(0,n):\n    two_words = input()\n    if len(two_words) % 2 == 1:\n        print(\"NO\")\n    else:\n        size_two_words = int(len(two_words)/2)\n        for j in range(0,size_two_words):\n            if two_words[j] != two_words[j+size_two_words]:\n                BREAK_OUT_FOR = True\n                break\n                \n        if BREAK_OUT_FOR:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n        BREAK_OUT_FOR = False",
                true
            ],
            [
                "'''\n\nWelcome to GDB Online.\nGDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,\nC#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.\nCode, Compile, Run and Debug online from anywhere in world.\n\n'''\na = int(input(\"\"))\nfor i in range(a):\n    m = 1\n    string = list(input(\"\"))\n    length = len(string)\n    l2 = int(length/2)\n    if(length%2 != 0):\n        print(\"NO\")\n        m = 0\n    else:\n        for j in range(l2):\n            if(string[j] != string[j+l2]):\n                print(\"NO\")\n                m = 0\n                break\n    if(m == 1):\n        print(\"YES\")\n    ",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    st = input()\n\n    if len(st) %2 != 0:\n        print(\"NO\")\n    else:\n        start = st[:len(st)//2]\n        end = st[len(st)//2:]\n        if start == end:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    if(len(s)%2!=0):\n        print('NO')\n    else:\n        s1 = s[:len(s)//2]\n        s2 = s[len(s)//2:]\n        if(s1==s2):\n            print('YES')\n        else:\n            print('NO')",
                true
            ],
            [
                "def check(s):\n    if len(s) % 2 == 0:\n        l = len(s)\n        \n        if s[:int((l/2))] == s[int(l/2):]:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n\n\nfor i in range(int(input())):\n    s = input()\n    check(s)",
                true
            ],
            [
                "from math import inf, gcd, log, log2, floor, ceil\nfrom collections import Counter, defaultdict\n#from sortedcontainers import SortedList\nDIRS = [[1,0], [0,1],[0,-1],[-1,0]]\nMOD = 10**9+7\ndef get_lines():\n    while 1:\n        try:\n            yield input()\n        except:\n            break\n\n#lines = [x for x in get_lines()]\nmatrix = 0\narray = 0\nif matrix:\n    A = []\n    for line in lines:\n        A.append([int(x) for x in line])\n    R, C = len(A), len(A[0])\n\nif array:\n    A = [int(x) for x in lines]\n    N = len(A)\n\nN = int(input())\n\n\n#N = int(lines[0])\nfor _ in range(N):\n    x = input()\n    if len(x) & 1:\n        print('NO')\n        continue\n    if x[len(x)//2:] == x[:len(x)//2]:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    T = int(input())\n    for _ in [0] * T:\n        S = input()\n\n        l = len(S)\n        ans = \"NO\"\n        if not l % 2:\n            s1 = S[: l // 2]\n            s2 = S[l // 2 :]\n            if s1 == s2:\n                ans = \"YES\"\n        print(ans)\n\n\nmain()\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    l = len(s)\n    if l % 2 != 0:\n        print(\"NO\")\n    else:\n        if s[0:l//2:] == s[(l//2)::]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "t=int(input())\n\nwhile t:\n    s=input()\n    n=len(s)\n    h=(n/2)\n    if(n%2==0):\n        s1=s[0:int(h)]\n        s2=s[int(h):int(n)]\n        if s1==s2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n    \n    t-=1",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s=(input())\n    l=len(s)\n    if l%2 != 0:\n        print(\"NO\")\n    else:\n        if s[:l//2] == s[l//2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s=input()\n    l=len(s)\n    if l%2==0:\n        if s[0:l//2]==s[l//2:l]:\n            print('YES')\n        else:\n            print(\"NO\")\n    else:\n        print('NO')",
                true
            ],
            [
                "for _ in range(int(input())):\n  ss = input()\n\n  if len(ss) % 2 != 0:\n    print(\"NO\")\n\n  else:\n    f, s = ss[:len(ss) // 2], ss[len(ss) // 2:]\n\n    if f == s:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\na = []\ns = 0\nfor i in range(t):\n    a.append(input())\n    b = len(a[i])\n    if b % 2 == 0:\n        for j in range(b//2):\n            if a[i][j] == a[i][b//2+j]:\n                s += 1\n        if s == (b//2):\n            print(\"YES\")\n            s = 0\n        else:\n            s = 0\n            print('NO')\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for t in range(int(input())):\n    s=input()\n    k=len(s)\n    f=1\n    if(k%2==1):\n        f=0\n    else:\n        p1 = (k//2)-1\n        p2=k-1\n        while(p1>=0 and p2>=(k//2)):\n            if(s[p1]!=s[p2]):\n                f=0\n                break\n            p1-=1\n            p2-=1\n    if(f):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    a = input(\"\");\n    s = len(a);\n    if s%2==0:\n        if a[0:int(s/2)] == a[int(s/2):]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "n = int(input())\nlist1 = []\nfor i in range(n):\n    list1.append(input())\n#print(list1)\nfor i in list1:\n    #print(i)\n    if len(i) % 2 != 0:\n        print(\"NO\")\n        continue\n    for j in range(len(i)//2):\n        if j == len(i)//2 - 1:\n            if i[j] == i[len(i) // 2 + j]:\n                print(\"YES\")\n        if i[j] == i[len(i)//2 + j]:\n            #print(i[j], i[len(i)//2 + j])\n            continue\n        else:\n            print(\"NO\")\n            break",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    k = len(s)\n    if k&1 :\n        print(\"NO\")\n    else:\n        j = (k//2)\n        if(s[:j] == s[j:]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
                true
            ],
            [
                "import math, os, io, heapq\nfrom sys import stdin, stdout\nfrom collections import Counter, deque, defaultdict\nfrom itertools import product\nimport bisect\n\n\n# For fast i/o\n# def inp():\n#     return io.BytesIO(os.read(0,os.fstat(0).st_size)).readline().strip().decode()\n# input = inp\n\n# def println(v, end='\\n'):\n#     stdout.write(str(v) + end)\n\ndef getList(method=int):\n    return list(map(method, input().split()))\n\n\ndef getInt():\n    return int(input())\n\n\ndef solve():\n    s = input()\n    n = len(s)\n\n    if n % 2:\n        return \"NO\"\n\n    k = n // 2\n    for i in range(k):\n        if s[i] != s[i+k]:\n            return \"NO\"\n\n    return \"YES\"\n\n\nfor _ in range(getInt()):\n    print(solve())\n",
                true
            ],
            [
                "for i in range(int(input())):\n  s = input()\n  n = len(s)\n  if n % 2 != 0:\n    print('NO')\n    continue\n  if s[:n // 2] == s[n//2:]:\n    print('YES')\n  else:\n    print('NO')",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    if len(s)%2==1:\n        print(\"NO\")\n    else:\n        for i in range(1,len(s)//2+1):\n            if s.count(s[:i])*len(s[:i])==len(s) and s.count(s[:i])%2==0:\n                print(\"YES\");break\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    s=input()\n    n=len(s)\n    if n%2==0:\n        if s[:n//2]==s[(n//2):]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "\n\n\nt = int(input())\nfor _ in range(t):\n    s = list(input())\n    if len(s)%2==0:\n        n = len(s)//2\n        if s[:n]==s[n:]:\n            print(\"YES\")\n        else:\n            print('NO')\n    else:\n        print(\"NO\")\n\n",
                true
            ],
            [
                "qu = []\nfor _ in range(int(input())):\n    qu.append(input())\n\nfor q in qu:\n    s = q\n    if len(s) % 2 == 1:\n        print('NO')\n    else:\n        mid = len(s) // 2\n        s1 = s[:mid]\n        s2 = s[mid:]\n        if s1 == s2:\n            print('YES')\n        else:\n            print('NO')",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    if s[:len(s)//2] == s[len(s)//2:]:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "p=int(input())\nwhile(p):\n    s=str(input())\n    if len(s)%2!=0:\n        print(\"NO\")\n    else:\n        n=len(s)//2\n        if s[:n]==s[n:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    p-=1",
                true
            ],
            [
                "t = int(input())\nfor k in range(t):\n    s = input()\n    d = len(s)\n    if s[0:d//2] == s[d//2:]:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t=int(input())\nfor i in range(0,t):\n    s=input()\n    a=len(s)\n    if(a%2==0):\n        if(s[0:a//2]==s[a//2:]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    print('YES' if len(s) % 2 == 0 and s[:len(s) // 2] == s[len(s) // 2::] else 'NO')",
                true
            ],
            [
                "for t in range(int(input())):\n    s=str(input())\n    ans=0\n    if(len(s)%2==0):\n       for i in range(0,len(s)//2):\n         if(s[i]!=s[i+len(s)//2]):\n            ans=1\n    else:\n        ans=1\n\n\n    if(ans==1):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    s = input()\n    l = len(s)\n    if(l%2 != 0):\n        print(\"NO\")\n        continue\n    s1 = s[:l//2]\n    s2 = s[l//2:]\n    if(s1 == s2):\n        print(\"YES\")\n        continue\n    print(\"NO\")",
                true
            ],
            [
                "def func(s):\n    n = len(s)\n    \n    if n%2 != 0 :\n        return False\n    \n    if s[:n//2] == s[n//2 :]:\n        return True\n    \n    else:\n        return False\n\n\nt = int(input())\nfor i in range(t):\n    s = input()\n    if func(s):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "from __future__ import unicode_literals\nfrom __future__ import print_function\nimport time\nimport math\nimport random\n#main\na= int(input())\ni=0\nwhile i<a:\n    j=0\n    str=input()\n    if (len(str)%2==1):\n        print(\"NO\")\n    else:\n        not_same=0\n        length=len(str)\n        slider1=0\n        slider2=int(length/2)\n        while slider2<length:\n            if str[slider1]!=str[slider2]:\n                not_same=1\n                break\n            slider2+=1\n            slider1+=1\n        if not_same==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    i+=1#end of cycl",
                true
            ],
            [
                "for _ in range(int(input())):\n    st=input()\n    n=len(st)\n    if len(st)%2!=0:\n        print(\"NO\")\n    else:\n        if st[:len(st)//2]==st[n//2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "# Link:\n# https://codeforces.com/problemset/problem/1619/A\n\ndef is_square_string(string: str):\n    result = False\n    length = len(string)\n\n    # length must be divisible by 2\n    if length%2 == 0:\n        # split the string in half\n        length_half = int(length/2)\n        string1 = string[:length_half]\n        string2 = string[length_half:]\n\n        # check if they are equal\n        if string1 == string2:\n            result = True\n\n    return result\n\ncases = int(input())\n\nfor i in range(0, cases):\n    string = input()\n    if is_square_string(string):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "import math\nt=int(input())\nfor i in range(t):\n    s=input()\n    if s[0:math.ceil(len(s)/2)]==s[math.ceil(len(s)/2):]:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "tests = int(input())\nfor _ in range(tests):\n    s = input()\n    if len(s)%2!=0:\n        print(\"NO\")\n    else:\n        if s[:len(s)//2] == s[len(s)//2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "def find(s):\n    n = len(s)\n    if n %2 == 1:\n        return 'NO'\n    left = s[0:int(n/2)]\n    right = s[int(n/2): n]\n    if left == right:\n        return 'YES'\n    return 'NO'\n\ncases = int(input())\nfor _ in range(cases):\n    s = input()\n    print(find(s))",
                true
            ],
            [
                "x=int(input())\nfor i in range(x):\n    a=input()\n    if a[0:len(a)//2]==a[len(a)//2:len(a)]:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "\"\"\"\n ___   _   _    ___  __   ___ _  _     __   ____ ___ _  _   _\n|__   /_\\  |\\ |  |  |  | |__  |__|     |_|  |__   |  |__|  /_\\\n___| /   \\ | \\|  |  |__| ___| |  |     |__| |___  |  |  | /   \\\n\n\"\"\"\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    flag = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x = s[i:j+1]\n            y = s[j+1:j+1+j-i+1]\n            if(x == y and n == len(x)+len(y)):\n                flag = 1\n                break\n        if(flag):\n            break\n    if(flag or (n == 2 and s[0] == s[1])):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    if len(s) % 2:\n        print('NO')\n    elif s[:len(s) // 2] == s[len(s) // 2:]:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    l = len(s)\n    if l % 2:\n        print('NO')\n    else:\n        if s[:l//2] == s[l//2:]:\n            print('YES')\n        else:\n            print('NO')\n",
                true
            ],
            [
                "v=int(input())\n#v=int(input())\nfor k in range(v):\n#for k in range(v):\n    input_string=input()\n    mid=len(input_string)//2\n    fhalf=input_string[:mid]\n    shalf=input_string[mid:]\n    if(fhalf==shalf):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n#if(fhalf==shalf):\n#print(\"YES\")\n#else:\n#print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    for i in range(len(s)):\n        if s[:i+1]==s[i+1:]:\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "#import math\nT=int(input())\nfor t in range(T):\n  #n=int(input())\n  #x,y=map(int,input().split())\n  #lst=list(map(int,input().split()))\n  s=input()\n  #dct=dict()\n  #for i in lst:\n    #dct[i]=0\n  #for i in lst:\n    #dct[i]+=1\n  # start your code from here\n  if len(s)%2!=0:\n      print('NO')\n      continue\n  if s[:len(s)//2]==s[len(s)//2:]:\n      print('YES')\n  else:\n      print('NO')",
                true
            ],
            [
                "\n\nt = int(input())\nfor i in range(t):\n    string = input()\n\n    if len(string)%2 == 1:\n        print(\"NO\")\n        continue\n\n    if string[:int(len(string)/2)] != string[int(len(string)/2):]:\n        print(\"NO\")\n        continue    \n\n    print(\"YES\")\n",
                true
            ],
            [
                "f=int(input())\nfor i in range(f):\n  n=input()\n  if(len(n)%2!=0):\n    print(\"NO\")\n  else:\n    l=list(n)\n    h=[]\n    s=\"\"\n    l=len(n)\n    t=l//2\n    for i in range(t):\n      h.append(n[i])\n    s=s.join(h)\n    if (n[t:].find(s) == -1):\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    a=input()\n    b=len(a)\n    c=int(b/2)\n    flag=0\n    if(b%2!=0):\n        flag=0\n        \n    else:\n        if(a[0:c]==a[c:b]):\n            flag=1\n            \n    if(flag==0):\n        print('NO')\n    else:\n        print('YES')\n    \n    ",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    s = input()\n    n = len(s)\n    if s[0:(n//2)]==s[n//2:n] and n>1:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    strg = str(input())\n    if len(strg)%2!=0:\n        print(\"NO\")\n    else:\n        mid = len(strg)//2\n        if strg[:mid] == strg[mid:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    l = len(s)\n    if(l % 2 == 0):\n        half_len = l // 2\n        check = False\n        for j in range(half_len):\n            if(s[j] != s[j + half_len]):\n                print(\"NO\")\n                check = True\n                break\n        if(not check):\n            print(\"YES\")\n        \n    else:\n        print(\"NO\")",
                true
            ],
            [
                "import math\n\ndef input_int():\n    return int(input())\n    \ndef input_multiple():\n    return map(int, input().split())\n\nt = input_int()\n\nwhile t>0:\n    s = input()\n    if len(s)%2==0:\n        i, h = 0, len(s)//2\n        flag = True\n        while i<h:\n            if s[i]!=s[h+i]:\n                flag = False\n                break\n            i+=1\n        if flag:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    t -= 1",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    s=input()\n    if len(s)%2==0:\n        t=len(s)//2\n        if s[0:t]==s[t:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n   \n        \n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n  s = input()\n  if s[:len(s) // 2] == s[len(s) // 2:]:\n    print(\"YES\")\n  else:\n    print(\"NO\")",
                true
            ],
            [
                "count = int(input())\ncnt = 0\nfor i in range(count):\n    words = input()\n    size = len(words)\n    if (size % 2) == 1:\n        print(\"NO\")\n    else:\n        middle = (size // 2)\n        for j in range(middle):\n            if words[j] == words[middle]:\n                j += 1\n                middle += 1\n                cnt += 1\n                if middle == size and cnt == (size/2):\n                    print(\"YES\")\n            else:\n                print(\"NO\")\n                break\n    cnt = 0\n    \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    if len(s)%2 == 1:\n        print(\"NO\")\n        continue\n    n = int(len(s)/2)\n    if s[:n] == s[n:]:\n        print(\"YES\")\n    else: print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    string = input()\n    length_of_str = len(string)\n    \n    if length_of_str % 2 != 0:\n        print('NO')\n    \n    else:\n        half_length_of_str = int(length_of_str/2)\n        if string[:half_length_of_str] == string[half_length_of_str:]:\n            print('YES')\n        else:\n            print('NO')\n",
                true
            ],
            [
                "\"\"\"\nA. Square String?\n\"\"\"\ndef solution() :\n    t = int(input())\n    for i in range(t) :\n        s = input()\n        n = len(s)\n        if n % 2 == 0 :\n            flag = True\n            index1, index2 = 0, n // 2\n            while index1 < index2 and index2 < n :\n                if s[index1] != s[index2] :\n                    flag = False\n                    break\n                index1 += 1\n                index2 += 1\n            if flag :\n                print(\"YES\")\n            else :\n                print(\"NO\")\n        else :\n            print(\"NO\")\n        \nsolution()",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(0, t):\n    s = input()\n    l = len(s)\n    if l%2 == 0:\n        d = int(l/2)\n        s1 = s[:d]\n        s2 = s[d:]\n        if s1 == s2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "for i in range(int(input())):\n    string=input()\n    if(len(string)%2==1):\n        print(\"NO\")\n    else:\n        if(string[:len(string)//2:1]==string[len(string)//2::]):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=input()\n    l=len(n)\n    if l%2==1:\n        print(\"NO\")\n    else:\n        k=l//2\n        if n[:k]==n[k:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "a = int(input())\ndata = []\nfor i in range(a):\n    x = input()\n    data.append(x)\n\ndef filt(g):\n    if len(g) % 2 == 1:\n        return \"NO\"\n    else:\n        hlf = int(len(g)/2)\n        if g[:hlf] == g[hlf:]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n#filt(\"asdf\")\nsol = list(map(filt,data))\nfor i in sol:\n    print(i)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s=input()\n    l=len(s)\n    if(l%2==0):\n        k=''\n        a=''\n        l=l-1\n        m=int(l/2)\n        for j in range(m+1):\n            k=k+s[j]\n        f=m+1\n        while(f<=l):\n            a=a+s[f]\n            f=f+1\n        if(a==k):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "for i in range(int(input())):\n    s = input()\n    \n    if len(s)%2 != 0:\n        print(\"NO\")\n    else:\n        k = int(len(s)/2)\n        if s[:k] == s[k:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nwhile(t):\n    t-= 1\n    s = input()\n    l = len(s)\n    if(l%2==1):\n        print('NO')\n    else:\n        temp = s[0:l//2]\n        if(temp*2==s):\n            print('YES') \n        else:\n            print('NO')",
                true
            ],
            [
                "t = int(input())\n\nres = []\n\nfor i in range(t):\n    s = input()\n    l = len(s)\n    if l % 2 == 1:\n        res.append('NO')\n    else:\n        i, m, square = 0, l // 2, True\n        while m < l:\n            if s[i] != s[m]:\n                square = False\n                break\n            i += 1\n            m += 1\n        if square:\n            res.append('YES')\n        else:\n            res.append('NO')\n\nfor r in res:\n    print(r)",
                true
            ],
            [
                "def answer():\n    \n    s = input()\n    n = len(s)\n    if s[:n//2] == s[n//2:]:\n        print('YES')\n    else:\n        print('NO')\n\nfor _ in range(int(input())):\n    answer()\n",
                true
            ],
            [
                "t = int(input())\ny = []\n\nfor i in range(0, t):\n    n = input()\n    if len(n) % 2 != 0:\n        y.append(\"NO\")\n    else:\n        a = int(len(n) / 2)\n        if n[:a] == n[a:]:\n            y.append(\"YES\")\n        else:\n            y.append(\"NO\")\n\nfor j in range(0, t):\n    print(y[j])\n    \n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    n = len(s)\n    if n % 2 == 1:\n        print('NO')\n    elif s[:n//2] == s[n//2:]:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "\nt = int(input())\nfor i in range(t):\n    a = input()\n    if len(a)%2==1:\n        print(\"NO\")\n    else:\n        n = len(a)//2\n        if a[0:n] == a[n:len(a)]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    if len(s) % 2 != 0:\n        print(\"NO\")\n        continue\n    flag = True\n    i, j =len(s)//2 - 1, len(s) - 1\n    while i >= 0:\n        if s[i] != s[j]:\n            flag = False\n            break\n        i -= 1\n        j -= 1\n    if flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "# '''\n#      |\\_/|                  \n#      | @ @   Woof! \n#      |   <>              _  \n#      |  _/\\------____ ((| |))\n#      |               `--' |   \n#  ____|_       ___|   |___.' \n# /_/_____/____/_______|\n# I am here to guard this code, woof!\n# '''\n\n\n\nimport sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\n \nint_max = float('inf')\nint_min = -(float('inf'))\nmod = 10**9 + 7\nANS = []\n# infile = open(sys.argv[1], \"r\")\n# input = infile.readline\ninput = stdin.readline\n \ndef solve():\n    pass\n \nt = int(input())\n# t = 1\n \nfor i in range(t):\n    # n = int(input())\n    # n, k = map(int, input().split())\n    # arr =  list(map(int, input().split()))\n    # arr = list(input())\n    s = input().strip()\n\n    n = len(s)\n    if n%2 == 1:\n        print(\"NO\")\n        continue\n    if s[:n//2] == s[n//2: n]:\n        print(\"YES\")\n    else:\n        print('NO')\n\n# print('\\n'.join(ANS))",
                true
            ],
            [
                "def isSquare(s):\n    if len(s)%2==1:\n        return False\n\n    return True if s[:len(s)//2]==s[len(s)//2:] else False\n\nfor _ in range(int(input())):\n    print(\"YES\") if isSquare(input()) else print(\"NO\")\n\n    ",
                true
            ],
            [
                "for i in range(int(input())):\n    s=input()\n    le=len(s)\n    mid=(len(s))//2\n    if le%2==1 :\n        print(\"NO\")\n        continue\n    \n    if s[:mid]==s[mid:]:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "import sys\nt=int(input().rstrip())\ninput_list=[]\nfor i in range(t):\n  input_list.append(input().rstrip())\n\nwhile input_list:\n  s=input_list.pop(0)\n  if len(s)%2!=0:\n    print(\"NO\")\n    continue\n  if s[:len(s)//2]==s[len(s)//2:]:\n    print(\"YES\")\n  else:\n    print(\"NO\")",
                true
            ],
            [
                "t=int(input())\ninput_list=[]\nfor i in range(t):\n  input_list.append(input())\n\nwhile input_list:\n  s=input_list.pop(0)\n  if len(s)%2!=0:\n    print(\"NO\")\n    continue\n  if s[:len(s)//2]==s[len(s)//2:]:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = str(input())\n    n = len(s)\n    if s[0:n//2] == s[n//2:n]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    r = []\n    a = []\n    \n    if len(s)%2 != 0:\n        print(\"NO\")\n    else:\n        for i in range((len(s))//2):\n            r.append(s[i])\n        for j in range((len(s))//2,len(s)):\n            a.append(s[j])\n        if r == a:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "import math\ndef solve():\n    for t in range(int(input())):\n        s=input()\n        if len(s)%2==0:\n            m=len(s)//2\n            t=s[:m]==s[m:]\n            if t:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n       \n        \nsolve()\n",
                true
            ],
            [
                "a=int(input())\nfor i in range(a):\n    b=input()\n    if len(b)%2!=0:\n        print(\"NO\")\n    else:\n        c=len(b)//2\n        if b[:c]==b[c:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for i in range(int(input())):\n    s = input()\n    n = len(s)\n    if n%2:\n        print(\"NO\")\n    else:\n        if s[:n//2]==s[n//2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "sus = int(input())\nfor i in range (sus):\n                    maa=input()\n                    boo=len(maa)\n                    if boo%2==1:\n                                        print(\"NO\")\n                                        continue\n                    half=boo//2\n                    if maa[:half]==maa[half:]:\n                                        print(\"YES\")\n                    else:\n                                        print(\"NO\")",
                true
            ],
            [
                "#!/usr/bin/env python3\nimport sys, os, getpass\nimport math, random\nimport functools, itertools, collections, heapq, bisect\nfrom collections import Counter, defaultdict, deque\ninput = sys.stdin.readline \n\ndef read_matrix(rows):\n    return [list(map(int,input().split())) for _ in range(rows)]\n\ndef read_strings(rows):\n    return [input().strip() for _ in range(rows)]\n\ndef readint():\n    return int(input())\n\ndef readstr():\n    return list(map(str, input().split()))\n\ncases = readint()\n\ndef solve(s):\n    for i in range(len(s)):\n        if s[:i] == s[i:]:\n            return \"YES\"\n    return \"NO\"\n    \nfor _ in range(int(cases)):\n    arr = readstr()\n    orig = solve(arr[0])\n    print(orig)\n",
                true
            ],
            [
                "t = int(input())\ni = 0\nans = []\nwhile i < t:\n    f = input()\n    if len(f) % 2 == 0:\n        if f[0:(len(f) // 2 )] == f[(len(f) // 2):]:\n            ans.append('YES')\n        else:\n            ans.append('NO')\n    else:\n        ans.append('NO')\n    i += 1\nfor j in ans:\n    print(j)\n\n",
                true
            ],
            [
                "TestNumbers = int(input())\nfor i in range(TestNumbers):\n    word = input()\n    if len(word) == 1:\n        print(\"NO\")\n    elif len(word) % 2 != 0:\n        print(\"NO\")\n    else:\n        word1 = word[0:(len(word) // 2)]\n        word2 = word[(len(word) // 2):]\n        if word1 == word2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    str1=input()\n    n=len(str1)\n    if n%2==0:\n        if str1[0:int(n/2)]==str1[int(n/2):n]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "for x in range(int(input())):\n    n=input()\n    if len(n)%2==0:\n        s=len(n)//2\n        c=0\n        for y in range(s):\n            \n            if n[y]==n[s+y]:\n                c+=1\n            else:\n                break\n           \n                \n        \n        if c==s:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "def func():\n    s = input()\n    l = len(s)\n    if (l % 2 == 0 and s[:l//2] == s[l//2:]):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\ndef main():\n    for i in range(int(input())):\n        func()\n\n\nmain()",
                true
            ],
            [
                "n = int(input())\ncount = 0\nwhile count != n:\n    inputs = str(input())\n    count += 1\n    list1 = []\n    list1[:0] = inputs\n    length = len(list1)\n    if (length % 2) == 0 and length != 1:\n        middle_index = length // 2\n        first_half = list1[:middle_index]\n        second_half = list1[middle_index:]\n        if first_half == second_half:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s=input()\n    if (s[:len(s)//2]==s[len(s)//2:]): print(\"YES\")\n    else: print(\"NO\")\n",
                true
            ],
            [
                "t=int(input())\nfor o in range(t):\n    n=input()\n    if len(n)%2!=0:\n        print(\"NO\")\n    else:\n        d=len(n)//2\n        b=n[0:d]\n        c=n[d:]\n        #print(b,c)\n        if b==c:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    s = input()\n    if len(s) % 2 != 0:\n        print('NO')\n        continue\n    if s[0: len(s)//2] == s[len(s)//2:]:\n        print('YES')\n    else:\n        print('NO')\n\n\n",
                true
            ],
            [
                "n = int(input())\n\n# st = []\n# for i in range(n):\n#     st.append(input())\n\nfor i in range(n):\n    st = input()\n    l = len(st)\n    if l % 2 == 0:\n        # print(st[0:l//2] , st[l//2:])\n        if st[:l//2] == st[l//2:]:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "t = int(input())\nwhile t!=0:\n    s = input()\n    if len(s)%2==0:\n        if s[0:len(s)//2]==s[len(s)//2:len(s)]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n    t-=1",
                true
            ],
            [
                "n=int(input())\nfor i in range(0,n):\n    s=input()\n    l=len(s)\n    if(l%2!=0):\n        fg=0\n    else :\n        d=int(l/2)\n        for j in  range(0,d):\n            if(s[j]==s[d+j]):\n                fg=1\n            else:\n                 fg=0\n                 break\n    if(fg==0):\n        print(\"NO\")\n    else :\n        print(\"YES\")\n",
                true
            ],
            [
                "t = int(input())\nwhile(t>0):\n    s=input()\n    count=0\n    l = len(s)\n    m=l//2\n    if(l%2!=0):\n        print(\"NO\")\n    else:\n        for i in range(0,m):\n            if s[i]==s[i+m]:\n                    count+=1\n        if count==m:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    \n    t-=1",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    l=len(s)//2\n    print(\"YES\" if s[:l]==s[l:] else \"NO\")",
                true
            ],
            [
                "import sys\nfor _ in range(int(sys.stdin.readline())):\n    s=sys.stdin.readline()[:-1]\n    l=len(s)//2\n    print(\"YES\" if s[:l]==s[l:] else \"NO\")",
                true
            ],
            [
                "m = int(input())\nfor i in range(m):\n    a = input()\n    b = list(a)\n    b1 = b[len(a)//2:]\n    b2 = b[:len(a)//2]\n    if len(a)%2!=0:\n        print(\"NO\")\n    else:\n        if b1 == b2:\n            print(\"YES\")\n        else: print(\"NO\")\n",
                true
            ],
            [
                "import sys\nimport os.path\nfrom collections import *\nimport math\nimport bisect\nimport heapq as hq\nfrom fractions import Fraction\nfrom random import randint\n\nif os.path.exists(\"input.txt\"):\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\ninput = sys.stdin.readline\n\n##########################################################\ndef solve():\n    s = input().strip('\\n')\n    if len(s) % 2:\n        print(\"NO\")\n        return\n    n = len(s)\n    if(s[:n // 2] == s[n //2 :]):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \nt = int(input())\nwhile t:\n    t -= 1\n    solve()\n\n\n##########################################################\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a=input()\n    if(len(a)%2!=0):\n        print(\"NO\")\n    else:\n        l=len(a)//2\n        b=a[:l]\n        c=a[l:]\n        f=0\n        for i in range(l):\n            if b[i]!=c[i]:\n                f+=1\n                break\n        if f==1:\n            print(\"NO\")\n        else:print(\"YES\")",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    st = input()\n    t = len(st)\n    sub = ''\n    sub1 = ''\n    if t % 2 != 0:\n        print(\"NO\")\n    else:\n        sub = st[0:t // 2]\n        sub1 = st[t // 2:t]\n        if sub == sub1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
                true
            ],
            [
                "t= int(input())\nwhile(t>0):\n    n=input()\n    length = len(n)\n    if length%2!=0:\n        print(\"NO\")\n    else:\n        if n[:int(length/2)] == n[int(length/2):]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    t-=1",
                true
            ],
            [
                "for i in range(int(input())):\n    s=input('')\n    if len(s)%2!=0:\n        print(\"NO\")\n    else:\n        x=int(len(s)/2)\n        for j in range(x):\n            if s[j]!=s[x+j]:\n               res=\"NO\"\n               break\n            else:\n                res=\"YES\"\n                continue\n        print(res)\n\"\"\"NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\"\"\"\n",
                true
            ],
            [
                "t=int(input())\np=[]\nfor i in range(t):\n    s=str(input())\n    l1=[]\n    l2=[]\n    if len(s)%2==0:\n        k=len(s)//2\n        l1=s[:k]\n        l2=s[k:]\n        if l1==l2:\n            p.append(\"YES\")\n        else:\n            p.append(\"NO\")\n    else:\n        p.append(\"NO\")\nprint(*p,sep=\"\\n\")\n",
                true
            ],
            [
                "for i in range(int(input())):\n    s = input()\n    n = len(s)\n    if n % 2:\n        print(\"NO\")\n    else:\n        print(\"YES\" if s[:n//2] == s[n//2:] else \"NO\")",
                true
            ],
            [
                "t=int(input())\nwhile t>0:\n   n=input()\n   if(len(n)%2!=0):\n      print(\"NO\")\n   else:\n      a=len(n)//2\n      if(n[:len(n)//2]==n[len(n)//2:]):\n         print(\"YES\")\n      else:\n         print(\"NO\")\n   t-=1",
                true
            ],
            [
                "from sys import stdin \n\ntest = int(stdin.readline())\n\nfor t in range(test):\n    s = stdin.readline().rstrip()\n    \n    if len(s)%2==1:\n        print(\"NO\")\n    else:\n        if s[:len(s)//2] == s[len(s)//2:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(0, t):\n    \n  string = input()\n\n  if len(string) % 2 == 0 and string[0:int(len(string)/2)] == string[int(len(string)/2):]:\n    print(\"YES\")\n  else:\n    print(\"NO\")",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nA total of n depots are located on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. You must collect the required number of goods from the origin, deliver them to the respective depots, and then return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for t in range(int(input())):\n    n, m = map(int, input().split())\n    ns = list(map(int, input().split()))\n    ps = []\n    nes = []\n    for i in ns:\n        if i > 0:\n            ps.append(i)\n        else:\n            nes.append(i)\n\n    total = 0\n    if ps:\n        ps.sort()\n        for i in range(len(ps) - 1, -1, -m):\n            total += ps[i] * 2\n    if nes:\n        nes.sort()\n        nes = nes[::-1]\n        for i in range(len(nes) - 1, -1, -m):\n            total -= nes[i] * 2\n    if ps == []:\n        total += nes[-1]\n    elif nes == []:\n        total -= ps[-1]\n    else:\n        total -= max(-nes[-1], ps[-1])\n    print(total)",
                true
            ],
            [
                "for t in range(int(input())):\n    n, k = tuple(map(int, input().split()));x = sorted(list(map(int, input().split())));negative = list(filter(lambda k: k < 0, x));positive = list(filter(lambda k: k > 0, x))\n    cost = sum([2 * (-negative[i]) for i in range(0, len(negative), k)]) + sum([2 * positive[i] for i in range(len(positive) - 1, -1, -k)])\n    if len(negative) and len(positive):cost -= max((-negative[0]), positive[-1])\n    elif len(negative):cost -= (-negative[0])\n    elif len(positive):cost -= positive[-1]\n    print(cost)\n",
                true
            ],
            [
                "import sys\nfrom collections import deque\nimport math\nfrom bisect import bisect_left\nfrom functools import cmp_to_key\ndef II():\n    return int(sys.stdin.readline())\n \ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n    return map(int, sys.stdin.readline().split())\n \ndef SI():\n    return sys.stdin.readline().strip()\n \ndef FACT(n, mod):\n    s = 1\n    facts = [1]\n    for i in range(1,n+1):\n        s*=i\n        s%=mod\n        facts.append(s)\n    return facts[n]\n \ndef C(n, k, mod):\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\n \ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\n\nfor _ in range(II()):\n    n,k = MI()\n    a = LI()\n    x = []\n    y = []\n    for i in a:\n        if i>0:\n            x.append(i)\n        elif i < 0:\n            y.append(-i)\n    x.sort(reverse=True)\n    y.sort(reverse=True)\n    m = 0\n    if x:\n        m = max(x)\n    if y:\n        m = max(m,max(y))\n    ans = -m\n    if x:\n        for i in range(0, len(x), k):\n            ans+=2*x[i]\n    if y:\n        for i in range(0, len(y), k):\n            ans+=2*y[i]\n    print(ans)\n\n    \n",
                true
            ],
            [
                "kl = int(input())\nfor kkl in range(kl):\n  n, k = map(int, input().split())\n  a= [int(i) for i in input().split()]\n  b=[]\n  dl=1\n  for i in range(n):\n    if a[i]!=0:\n      b.append(a[i])\n      dl+=1\n  b.append(0)\n  b.sort()\n  i0 = b.index(0)\n  kp= dl-i0-1\n  kh=kp//k\n  rs=kp%k\n  rz=b[i0+rs]\n  for i in range(kh):\n    rz+=b[i0+rs+k*(i+1)]\n  kh=i0//k\n  rs=i0%k\n  rz+=abs(b[i0-rs])\n  for i in range(kh):\n    rz+=abs(b[i0 -(rs+k*(i+1))])\n  \n  rz*=2\n  \n  print(rz - max(-b[0], abs(b[dl-1])))\n\n    ",
                true
            ],
            [
                "cases = int(input())\nfor i in range(cases):\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    pos = list(filter(lambda x: x>=0, arr))\n    pos.sort()\n    neg = list(map(abs ,filter(lambda x: x<0, arr)))\n    neg.sort()\n    if neg and pos:\n        if max(pos)>max(neg):\n            count = 0\n            n = len(neg)\n            p = n-1\n            while p>=0:\n                count += (2*neg[p])\n                p -= k\n            n = len(pos)\n            p = n-1\n            while p>=0:\n                if p == (n-1):\n                    count += pos[n-1]\n                else:\n                    count += (2*pos[p])\n                p -= k\n        else:\n            count = 0\n            n = len(pos)\n            p = n-1\n            while p>=0:\n                count += (2*pos[p])\n                p -= k\n            n = len(neg)\n            p = n-1\n            while p>=0:\n                if p == (n-1):\n                    count += neg[n-1]\n                else:\n                    count += (2*neg[p])\n                p -= k\n    elif pos:\n        count = 0\n        p = n-1\n        while p>=0:\n            if p == (n-1):\n                count += pos[n-1]\n            else:\n                count += (2*pos[p])\n            p -= k \n    else:\n        count = 0\n        p = n-1\n        while p>=0:\n            if p == (n-1):\n                count += neg[n-1]\n            else:\n                count += (2*neg[p])\n            p -= k\n    print(count)\n\n",
                true
            ],
            [
                "from collections import defaultdict as dd\nimport math\nimport sys\ninput=sys.stdin.readline\ndef nn():\n    return int(input())\n \ndef li():\n    return list(input())\n \ndef mi():\n    return map(int, input().split())\n \ndef lm():\n    return list(map(int, input().split()))\n \n \n \ndef solve():\n    n ,k= mi()\n    nums = lm()\n    \n    left = []\n    right = []\n    for num in nums:\n        if num<0:\n            left.append(num)\n        else:\n            right.append(num)\n    left.sort()\n    right.sort()\n    dist = 0\n    i=0\n    while k*i<len(left):\n        dist+=-2*left[k*i]\n        i+=1\n    i=0\n    while k*i<len(right):\n        dist+=2 * right[-k*i-1]\n        i+=1\n    if len(left)==0:\n        dist -= right[-1]\n    elif len(right)==0:\n        dist -= -left[0]\n    else:    \n        dist -= max(right[-1], -left[0])\n    \n    print(dist)\n    \n    \nq=nn()\nfor _ in range(q):\n    solve()",
                true
            ],
            [
                "for ii in range(int(input())):\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    x,y=[],[]\n    for jj in range(n):\n        if a[jj]>=0:\n            x.append(a[jj])\n        else:\n            y.append(abs(a[jj]))\n    x,y=sorted(x),sorted(y)\n    if not x:\n        ans=y[-1]\n        for jj in range(len(y)-1-q,-1,-q):\n            ans+=2*abs(y[jj])\n        print(ans)\n    elif not y:\n        ans=x[-1]\n        for jj in range(len(x)-1-q,-1,-q):\n            ans+=2*abs(x[jj])\n        print(ans)\n    elif x[-1]>y[-1]:\n        ans=x[-1]\n        for jj in range(len(x)-q-1,-1,-q):\n            ans+=2*abs(x[jj])\n        for kk in range(len(y)-1,-1,-q):\n            ans+=2*abs(y[kk])\n        print(ans)\n    else:\n        ans=y[-1]\n        for jj in range(len(x)-1,-1,-q):\n            ans+=2*abs(x[jj])\n        for kk in range(len(y)-q-1,-1,-q):\n            ans+=2*abs(y[kk])\n        print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    x=list(map(int,input().split()))\n    xp=[]\n    xn=[]\n    for i in range(n):\n        if x[i]>=0:\n            xp.append(x[i])\n        else:\n            xn.append(abs(x[i]))\n    xp.sort()\n    xn.sort()\n    xp=[0]+xp\n    xn=[0]+xn\n    \n    pn=len(xp)\n    nn=len(xn)\n    ans1=0\n    ans2=0\n    if pn>1:\n        if (pn-1)%k==0:\n            ans1=sum(xp[:pn:k])*2-xp[-1]\n        else:\n            rem=(pn-1)%k\n            ans1=sum(xp[rem:pn:k])*2-xp[-1]\n    #print(xp)\n    #print(ans1)\n    if nn>1:\n        if (nn-1)%k==0:\n            ans2=sum(xn[:nn:k])*2-xn[-1]\n        else:\n            rem=(nn-1)%k\n            ans2=sum(xn[rem:nn:k])*2-xn[-1]    \n    #print(xn)\n    #print(ans2)\n    ans=ans1+ans2\n    ans+=min(xp[-1],xn[-1])\n    print(ans)\n",
                true
            ],
            [
                "R = lambda: map(int, input().split())\nt,=R()\nwhile t:\n t-=1;n,k=R();a=b,c=[[],[]]\n for x in sorted(R()):a[x>0]+=abs(x),\n print(2*(sum(b[::k]+c[::-k]))-max([0]+b[:1]+c[-1:]))",
                true
            ],
            [
                "#     __  __                __    _ __      ______                \n#    / / / /___ ___________/ /_  (_) /_    / ____/___ __________ _\n#   / /_/ / __ `/ ___/ ___/ __ \\/ / __/   / / __/ __ `/ ___/ __ `/\n#  / __  / /_/ / /  (__  ) / / / / /_    / /_/ / /_/ / /  / /_/ / \n# /_/ /_/\\__,_/_/  /____/_/ /_/_/\\__/____\\____/\\__,_/_/   \\__, /  \n#                                  /_____/               /____/   \n\nfrom collections import Counter\nfrom sys import *\nfrom collections import defaultdict as dd\nfrom math import *\n\n# sys.stdin = open('input.txt', 'r')  \n# sys.stdout = open('output.txt', 'w')\n\n#input functions\ndef inp():\n    return int(stdin.readline().strip())\ndef vinp():\n    return map(int,stdin.readline().strip().split())\ndef linp():\n    return list(map(int,stdin.readline().strip().split()))\ndef sinp(n = 1):\n    if n==1:\n        return stdin.readline().strip()\n    elif n==2:\n        return list(stdin.readline().strip())\n    else:\n        return list(stdin.readline().split())\n\n#output function\ndef pr(*x, end = \"\\n\"):\n    print(*x,end = end)\n\n#others\ndef mod(f, val = 1000000007):\n    return f % val\ndef csort(c):\n    sorted(c.items(), key=lambda pair: pair[1], reverse=True)\ndef indc(l,n):\n    c={}\n    for i in range(n):\n        c[l[i]]=c.get(l[i],[])+[i+1]\n    return c\ndef ok(x,y):\n    l = x.copy()\n    l.sort()\n    t,ans=1,0\n    while l!=[]:\n        t2=l[-1]\n        i=1\n        while i<k+1 and len(l):\n            del l[-1]\n            i+=1\n        if (not y) and (t==1):\n            ans+=t2\n        else:\n            ans+=2*t2\n        t+=1\n    return ans\nif __name__ ==\"__main__\":\n    cou=inp()\n    for _ in range(cou):\n        n,k = vinp()\n        l = linp()\n        a,b = [],[]\n        for i in l:\n            if i>0:\n                a.append(i)\n            else:\n                b.append(abs(i))\n        pr(min((ok(b, False) + ok(a, True)),(ok(a, False) + ok(b, True))))",
                true
            ],
            [
                "import sys,os,io\ninput = sys.stdin.readline # for strings\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline # for non-strings\n\nPI = 3.141592653589793238460\nINF =  float('inf')\nMOD  = 1000000007\n# MOD = 998244353\n\n\ndef bin32(num):\n    return '{0:032b}'.format(num)\n\ndef add(x,y):\n    return (x+y)%MOD\n\ndef sub(x,y):\n    return (x-y+MOD)%MOD\n\ndef mul(x,y):\n    return (x*y)%MOD\n\ndef gcd(x,y):\n    if y == 0:\n        return x\n    return gcd(y,x%y)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\ndef power(x,y):\n    res = 1\n    x%=MOD\n    while y!=0:\n        if y&1 :\n            res = mul(res,x)\n        y>>=1\n        x = mul(x,x)\n        \n    return res\n        \ndef mod_inv(n):\n    return power(n,MOD-2)\n\ndef prob(p,q):\n    return mul(p,power(q,MOD-2))    \n  \ndef ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef ls():\n    return [i for i in input().split()]\n\nfor t in range(ii()):\n    t+=1\n    n,k = li()\n    a = li()\n\n    pos = []\n    neg = []\n    for i in a:\n        if i > 0:\n            pos.append(i)\n        elif i < 0:\n            neg.append(-i)\n    pos.sort()\n    neg.sort()\n    ans = 0\n    if len(pos) == 0 and len(neg) == 0:\n        print(0)\n        continue\n\n    x = pos[:max(0 , len(pos)-k)]\n    x.reverse()\n    i = 0\n    # print(x)\n    while i < len(x):\n        ans+= 2*x[i]\n        i+=k\n    \n    x = neg[:max(0 , len(neg)-k)]\n    x.reverse()\n    i = 0\n    # print(x)\n    while i < len(x):\n        ans+= 2*x[i]\n        i+=k\n    \n    if len(pos) == 0:\n        ans+= neg[-1]\n    if len(neg) == 0:\n        ans+= pos[-1]\n    if len(neg) > 0 and len(pos) > 0:\n        ans+= 2*min(pos[-1],neg[-1])\n        ans+= max(neg[-1] , pos[-1])\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()))\n    a.sort()\n    ans=0\n    i=0\n    while i<n:\n        if a[i]<0:\n            ans+=2*abs(a[i])\n        i+=k\n    i=n-1\n    while i>=0:\n        if a[i]>0:\n            ans+=2*a[i]\n        i-=k\n    maxx=max(abs(a[0]),abs(a[n-1]))\n    print(ans-maxx)\n",
                true
            ],
            [
                "import sys\n\n# sys.setrecursionlimit(200005)\nint1 = lambda x: int(x)-1\npDB = lambda *x: print(*x, end=\"\\n\", file=sys.stderr)\np2D = lambda x: print(*x, sep=\"\\n\", end=\"\\n\\n\", file=sys.stderr)\ndef II(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline().rstrip()\n# dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]\n# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n# inf = 18446744073709551615\ninf = 4294967295\n# md = 10**9+7\nmd = 998244353\n\ndef cal(aa, k):\n    if not aa: return 0\n    n = len(aa)\n    ans = 0\n    for i in range(n-1, -1, -k):\n        ans += aa[i]*2\n    return ans\n\ndef solve():\n    n, k = LI()\n    aa = LI()\n    ll, rr = [], []\n    for a in aa:\n        if a > 0: rr.append(a)\n        else: ll.append(-a)\n    ll.sort()\n    rr.sort()\n    mx = 0\n    if ll: mx = max(mx, ll[-1])\n    if rr: mx = max(mx, rr[-1])\n    ans = cal(ll, k)+cal(rr, k)-mx\n    print(ans)\n\nfor testcase in range(II()):\n    solve()\n",
                true
            ],
            [
                "\ndef fun(arr,k):\n    n=len(arr)\n    x=0\n    for i in range(n-1,-1,-1*k):\n        x+=(2*arr[i])\n\n    return x\n\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    a=[int(x) for x in input().split()]\n\n    ans=0\n    a1=[]\n    a2=[]\n    \n    for i in range(n):\n        if a[i]>0:\n            a1.append(a[i])\n        \n        elif a[i]<0:\n            a2.append(-1*a[i])\n\n    a1.sort()\n    a2.sort()\n\n    mx=0\n\n    if a1:\n        mx=max(mx,a1[-1])\n    if a2:\n        mx=max(mx,a2[-1])\n    \n    \n    print(fun(a1,k)+fun(a2,k)-mx)\n",
                true
            ],
            [
                "def solveee(a,left):\n    inn=sorted(a)\n    ans=0\n    fgh=1\n    while(len(inn)):\n        t=inn[-1]\n        i=1\n        while(i<=k and len(inn)):\n            del inn[-1]\n            i+=1\n        if(fgh ==1 and not(left)):\n            ans+=t\n        else:\n            ans+=t*2\n        fgh+=1\n    return ans\ndef func(a,b):\n    return solveee(a,True)+solveee(b,False)\nt=int(input())\nwhile(t):\n    t=t-1\n    n,k=map(int,input().split())\n    pos,neg=[],[]\n    cc=list(map(int,input().split()))\n    for i in range(n):\n        if(cc[i]>=0):\n            pos.append(cc[i])\n        else:\n            neg.append(abs(cc[i]))\n    t1=func(pos,neg)\n    t2=func(neg,pos)\n    print(min(t1,t2))",
                true
            ],
            [
                "for t in range(int(input())):\n  n, k = tuple(map(int, input().split()))\n  x = list(map(int, input().split()))\n  x.sort()\n  negative = list(filter(lambda k: k < 0, x))\n  positive = list(filter(lambda k: k > 0, x))\n  \n  cost = 0\n\n  for i in range(0,len(negative),k):\n    cost += 2*(-negative[i])\n  for i in range(len(positive)-1,-1,-k):\n    cost += 2*positive[i]\n\n  if len(negative) > 0 and len(positive) > 0:\n    cost -= max((-negative[0]), positive[-1])\n  elif len(negative) > 0:\n    cost -= (-negative[0])\n  elif len(positive) > 0:\n    cost -= positive[-1]\n\n  print(cost)\n\n",
                true
            ],
            [
                "from sys import stdin\n\n\ndef read_input():\n    n, k = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))  # read several integers of a line.\n    return n, k, x\n\n\ndef solve(n, k, x):\n    if n == 1:\n        return abs(x[0])\n\n    answer = 0\n\n    x.sort()\n\n    l, r = 0, n - 1\n\n    if abs(x[0]) > abs(x[-1]) or x[-1] < 0:  # left is longer\n        answer += abs(x[0])\n        cnt = 0\n        while cnt < k and x[l] <= 0:\n            cnt += 1\n            l += 1\n    else:  # right is longer\n        answer += abs(x[-1])\n        cnt = 0\n        while cnt < k and x[r] >= 0:\n            cnt += 1\n            r -= 1\n\n    cnt = 0\n    max_dist = 0\n    while l <= r and x[l] < 0:\n        max_dist = max(max_dist, abs(x[l]))\n        cnt += 1\n        if cnt == k:\n            answer += max_dist * 2\n            max_dist = 0\n            cnt = 0\n        l += 1\n    \n    if cnt > 0:\n        answer += max_dist * 2\n        max_dist = 0\n        cnt = 0\n\n    while l <= r and x[l] == 0:\n        l += 1\n\n    while l <= r:\n        max_dist = max(max_dist, abs(x[r]))\n        cnt += 1\n        if cnt == k:\n            answer += max_dist * 2\n            max_dist = 0\n            cnt = 0\n        r -= 1\n\n    if cnt > 0:\n        answer += max_dist * 2\n        max_dist = 0\n        cnt = 0\n\n    return answer\n\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        input = read_input()\n        answer = solve(*input)\n        print(answer)\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "from sys import stdin, stdout\nrd = lambda: list(map(int, stdin.readline().split()))\nrds = lambda: stdin.readline().rstrip()\nii = lambda: int(stdin.readline())\nINF = 1 << 62\nmod = 10**9 + 7\n\n\ndef _f(ar, k):\n    \n    if not ar:\n        return 0, 0\n\n    if len(ar) <= k:\n        # full array\n        return 0, ar[-1]\n\n    first = 0\n    lim = len(ar) - k\n    \n    i = lim-1\n    while i >= 0:\n        first += 2 * ar[i]\n        i -= k\n\n    last = ar[-1]\n\n    return first, last\n\nfor _ in range(ii()):\n    n, k = rd()\n    xs = rd()\n    \n    rs = [abs(x) for x in xs if x > 0]\n    ls = [abs(x) for x in xs if x < 0]\n\n    rs.sort()\n    ls.sort()\n    \n    rf, rl = _f(rs, k)\n    lf, ll = _f(ls, k)\n    \n    #print('rf', rf, 'rl', rl)\n    #print('lf', lf, 'll', ll)\n\n    # right return lefr\n    res1 = rf + 2 * rl + lf + ll\n    res2 = lf + 2 * ll + rf + rl\n\n    print(min(res1, res2))\n        \n\n#stdout.write(' '.join(map(str, ar)))\n#stdout.write(f'{res}')\n\n",
                true
            ],
            [
                "import sys\nimport math\nimport collections\nimport heapq\n\ndy = [1, 0, -1, 0]\ndx = [0, 1, 0, -1]\n\nr = lambda: sys.stdin.readline().rstrip()\nMIS = lambda: map(int, r().split())\n\n\nfor _ in range(int(r())):\n    N, K = MIS()\n    L = list(MIS())\n    P = []\n    M = []\n    for i in L:\n        if i > 0:\n            P.append(i)\n        else:\n            M.append(-i)\n    P.sort(reverse=1)\n    M.sort(reverse=1)\n    ans = 0\n    a = 0\n    for i in range(0, len(P), K):\n        ans += max(P[i:i+K])\n        a = max(a, max(P[i:i+K]))\n\n    for i in range(0, len(M), K):\n        ans += max(M[i:i+K])\n        a = max(a, max(M[i:i+K]))\n\n    print(ans*2-a)\n\n\"\"\"\n1 \n9 5\n-3 -4 -5 -6 0 0 1 2 3 4 7\n\"\"\"",
                true
            ],
            [
                "from sys import stdin,stdout,setrecursionlimit\nfrom math import gcd,sqrt,factorial,pi,inf\nfrom collections import deque,defaultdict\nfrom bisect import bisect,bisect_left\nfrom time import time\nfrom itertools import permutations as per\nfrom heapq import heapify,heappush,heappop,heappushpop\ninput=stdin.readline\nR=lambda:map(int,input().split())\nI=lambda:int(input())\nS=lambda:input().rstrip('\\r\\n')\nL=lambda:list(R())\nP=lambda x:stdout.write(str(x)+'\\n')\nlcm=lambda x,y:(x*y)//gcd(x,y)\nnCr=lambda x,y:(f[x]*inv((f[y]*f[x-y])%N))%N\ninv=lambda x:pow(x,N-2,N)\nsumx=lambda x:(x**2+x)//2\nN=10**9+7\n\ndef get(a):\n    ans=0\n    a=a[::-1]\n    for i in range(0,len(a),k):\n        ans+=a[i]\n    return ans*2\n\nfor _ in range(I()):\n    n,k=R()\n    a=L()\n    x=sorted([abs(i) for i in a if i<0])\n    y=sorted([i for i in a if i>=0])\n    #print(y)\n    ans=0\n    if x and y:\n        if x[-1]>y[-1]:\n            ans-=x[-1]\n        else:\n            ans-=y[-1]\n        ans += get(x)\n        ans += get(y)\n    elif x:\n        ans-=x[-1]\n        ans+=get(x)\n    else:\n        ans-=y[-1]\n        ans+=get(y)\n    print(ans)\n\n",
                true
            ],
            [
                "#import sys\n#sys.stdin=open('input.txt','r')\n#sys.stdout=open('output.txt','w')\n\n\ndef solve():\n    n,k=map(int,input().split())\n    l=list(map(int,input().split()))\n    r=[]\n    q=[]\n    for i in l:\n        \n        if(i>=0):\n            #print(i\n            q.append(i)\n        else:\n            r.append(i)\n    ans=[]\n    q.sort()\n    r.sort(reverse=True)\n    #print(r)\n    m=len(q)\n    x=len(r)\n    if(m>0):\n        val=m-1\n        ans.append(q[val])\n        val-=k\n        while(val>=0):\n            ans.append(q[val])\n            val-=k\n    #print(ans)\n    if(x>0):\n        val=x-1\n        ans.append(-r[val])\n        val-=k\n        while(val>=0):\n            ans.append(-r[val])\n            val-=k\n    answer=0\n    #print(ans)\n    ans.sort()\n    for i in range(len(ans)-1):\n        answer+=ans[i]*2\n    answer+=ans[len(ans)-1]\n    print(answer)\n\n\n\n\nt=int(input())\nwhile(t!=0):\n    solve()\n    t-=1\n",
                true
            ],
            [
                "def fun(n,arr,k):\n    cost=0\n    i=0\n    if not(arr):\n        return 0\n    arr=arr[::-1]\n    if k==1:\n        return 2*sum(arr)\n    while(i<n):\n        cost+=arr[i]+arr[min(i+k-1,n-1)]\n        for i in range(i,min(n,i+k)-1):\n            cost+=abs(arr[i]-arr[i+1])\n        i+=2\n    return cost\ndef fun2(a1,a2):\n    x=0\n    y=0\n    if a1:\n        x=max(a1)\n    if a2:\n        y=max(a2)\n    return max(x,y)\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    arr=list(map(int,input().split()))\n    a1=[]\n    a2=[]\n    al=0\n    bl=0\n    for i in range(n):\n        if arr[i]<=0:\n            a1.append(abs(arr[i]))\n            al+=1\n        else:\n            a2.append(arr[i])\n            bl+=1\n    a1.sort()\n    a2.sort()\n    print(fun(al,a1,k)+fun(bl,a2,k)-fun2(a1,a2))",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n,k = list(map(int, input().split()))\n    x = [int(h) for h in input().split()]\n    x1 = []\n    x2 = []\n    for y in x:\n        if y<0:\n            x1.append(-y)\n        else:\n            x2.append(y)\n    sum = 0\n    x1.sort()\n    x2.sort()\n    y1 = []\n    y2 = []\n    while(len(x1)>k):\n        y1.append(x1[len(x1)-1])\n        x1 = x1[:len(x1)-k]\n    if x1!=[]:\n        y1.append(x1[len(x1)-1])\n    while(len(x2)>k):\n        y2.append(x2[len(x2)-1])\n        x2 = x2[:len(x2)-k]\n    if x2!=[]:\n        y2.append(x2[len(x2)-1])\n    y = 0\n    if y1!= []:\n        y = max(y,y1[0])\n    if y2!= []:\n        y = max(y,y2[0])\n    sum-=y\n    for x in y1:\n        sum+=2*x\n    for x in y2:\n        sum+=2*x\n    print(sum)",
                true
            ],
            [
                "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n,k=map(int,stdin.readline().split())\n    arr=list(map(int,stdin.readline().split()))\n    R=[]\n    L=[]\n    for i in arr:\n        if i>0:\n            R.append(i)\n        else:\n            L.append(abs(i)) \n    R.sort(reverse=True)\n    L.sort(reverse=True)\n    #print(L,R)\n    ans=0 \n    if R!=[]:\n      ans=R[0]\n      d=R[0]\n      v=k\n      for i in R:\n        #print(ans)\n        if v==0:\n            ans+=(2*i)\n            v=k \n        v-=1\n    if len(L)>0:\n        ans+=L[0] \n        v=k\n        if len(R)>0:\n          if L[0]<R[0]:\n            ans+=L[0]\n          else:\n            ans+=R[0]\n        for i in L:\n            #print(ans)\n            if v==0:\n                ans+=(2*i)\n                v=k \n            v-=1\n    print(ans)",
                true
            ],
            [
                "import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\n\nt = int(inpu())\nfor _ in range(t):\n    n, k = map(int, inpu().split())\n    x = list(map(int, inpu().split()))\n    y = [guy for guy in x if guy < 0]\n    x = [guy for guy in x if guy > 0]\n    x.sort()\n    y.sort(reverse = True)\n    ind = len(x) - 1\n    tot = 0\n    while ind >= 0:\n        tot += 2 * x[ind]\n        ind -= k\n    ind = len(y) - 1\n    while ind >= 0:\n        tot -= 2 * y[ind]\n        ind -= k\n    if len(y) == len(x) == 0:\n        print(0)\n        continue\n    if len(y) == 0:\n        tot -= x[-1]\n    elif len(x) == 0:\n        tot += y[-1]\n    else:\n        tot -= max(x[-1], -y[-1])\n    print(tot)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n  n, k = map(int, input().split())\n  a = list(map(int, input().split()))\n  a.sort()\n\n  pa = list(filter(lambda x: x > 0, reversed(a)))\n  na = list(map(lambda x: -x, filter(lambda x: x < 0, a)))\n\n  c = 0\n  for i in range(0, len(pa), k):\n    # print(pa[i], end=' ')\n    c += pa[i] * 2\n  if len(pa) and i + k != len(pa) and False:\n    # print(pa[-1], end=' ')\n    c += pa[-1] * 2\n  # print()\n\n  for i in range(0, len(na), k):\n    # print(na[i], end=' ')\n    c += na[i] * 2\n  if len(na) and i + k != len(na) and False:\n    # print(na[-1], end=' ')\n    c += na[-1] * 2\n  # print()\n\n  c -= max(pa[0] if len(pa) else 0, na[0] if len(na) else 0)\n  print(c)\n",
                true
            ],
            [
                "R = lambda: map(int, input().split())\nt,=R()\nwhile t:\n t-=1;n,k=R();a=b,c=[[],[]]\n for x in sorted(R()):a[x>0]+=abs(x),\n print(2*sum(b[::k]+c[::-k])-max(b[:1]+c[-1:]))",
                true
            ],
            [
                "# cook your dish here\nimport sys\n#import random\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\n#import math\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\ndx = [0,0,1,-1]\ndy = [1,-1,0,0]\nmod = 10**9 + 7\nmod1 = 998244353\n\nfor _ in range (ii()) :\n    n,k = il()\n    a = il()\n\n    a.sort()\n\n    j = -1\n\n    c = []\n    \n    for i in range (n) :\n        if (a[i] > 0) :\n            break\n        if (i <= j) :\n            continue\n        for mn in range (k) :\n            if (i + mn >= n) :\n                break\n            if (a[i] < 0 and a[i+mn] > 0) :\n                break\n            j = i + mn\n\n        c.append(2*abs(a[i]))\n    #print(c)\n    j = n\n    for i in range (n-1,-1,-1) :\n        if (a[i] < 0) :\n            break\n        if (i >= j) :\n            continue\n        for mn in range (k) :\n            if(i - mn < 0) :\n                break\n            if (a[i] > 0 and a[i-mn] < 0) :\n                break\n            j = i - mn\n\n        c.append(2*abs(a[i]))\n\n    c.sort()\n\n    #print(c)\n\n    s = sum(c)\n    s -= c[-1]//2\n\n    print(s)\n",
                true
            ],
            [
                "import math,sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());mod1=1000000007;mod2=998244353\nfor _ in range(I()):\n    n,k=M()\n    a=L()\n    b=[];c=a.count(0);ans=0\n    for i in a:\n        if i!=0:b.append(i)\n    b.append(0);b.sort()\n    p=b.index(0);l=len(b)\n    i=min(p,k);j=max(l-1-k,p);i1=i;j1=j\n    ans+=abs(b[i])+abs(b[j])\n    while i!=p:\n        ans+=abs(b[i]-b[min(p,i+k)])+2*abs(b[min(p,i+k)])\n        i=min(p,i+k)\n    while j!=p:\n        ans+=abs(b[j]-b[max(p,j-k)])+2*abs(b[max(p,j-k)])\n        j=max(p,j-k)\n    a1=abs(b[j1])+abs(b[j1]-b[-1])+abs(b[-1])+abs(b[0])\n    a2=abs(b[i1])+abs(b[0]-b[i1])+abs(b[0])+abs(b[-1])\n    ans+=min(a1,a2)\n    print(ans)",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    li=list(map(int,input().split()))\n    ans=0\n    pos=[]\n    neg=[]\n    for i in range(n):\n        if li[i]>0:\n            pos.append(li[i])\n        else:\n            neg.append(-li[i])\n    pos.sort()\n    neg.sort()\n    ans=0 \n    p=len(pos)\n    p=p-k \n    x=len(neg)\n    x=x-k\n    for i in range(p):\n        if(i%k==(p-1)%k):\n            ans=ans+2*pos[i]\n    for i in range(x):\n        if(i%k==(x-1)%k):\n            ans=ans+2*neg[i]\n    if(len(pos)==0 or len(neg)==0):\n        if(len(pos)!=0):\n            ans=ans+pos[-1]\n        elif(len(neg)!=0):\n            ans=ans+neg[-1]\n    else:\n        ans=ans+min(pos[-1],neg[-1])+pos[-1]+neg[-1]\n    print(ans)",
                true
            ],
            [
                "from sys import stdin,stdout\nimport math\n\n#  list(map(int,stdin.readline().split()))        int(stdin.readline()\n\nfor _ in range(int(stdin.readline())):\n    n,k = map(int,stdin.readline().split())\n    a = list(map(int,stdin.readline().split()))\n    a1 = []\n    a2 = []\n    for i in a:\n        if i<0:\n            a1.append(i*-1)\n        elif i>0:\n            a2.append(i)\n    a1.sort()\n    a2.sort()\n    ans = 0\n    n1 = len(a1)\n    n2 = len(a2)\n    for i in range(n2-1-k,-1,-k):\n        ans+=2*a2[i]\n    for i in range(n1-1-k,-1,-k):\n        ans+=2*a1[i]\n    if n1>0 and n2>0:\n        if a1[-1]>a2[-1]:\n            ans+=a1[-1]\n            ans+=2*a2[-1]\n        else:\n            ans+=a2[-1]\n            ans+=2*a1[-1]\n    elif n1>0:\n        ans+=a1[-1]\n    elif n2>0:\n        ans+=a2[-1]\n    print(ans)",
                true
            ],
            [
                "import sys\nimport os.path\nfrom collections import *\nimport math\nimport bisect\nimport heapq as hq\nfrom fractions import Fraction\nfrom random import randint\n\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\ninput = sys.stdin.readline\n\n##########################################################\ndef solve():\n    n,k = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    brr = [0]\n    crr = [0]\n    for i in range(n):\n        if arr[i] < 0:\n            brr.append(-arr[i])\n        else:\n            crr.append(arr[i])\n    while(len(brr) % k != 0):\n        brr.append(0)\n    while(len(crr) % k != 0):\n        crr.append(0)\n    \n    dist = 0\n\n    brr.sort()\n    crr.sort()\n\n    for i in range(k - 1,len(brr),k):\n        dist += 2 * brr[i]\n    \n    for i in range(k - 1,len(crr),k):\n        dist += 2 * crr[i]\n    \n    print(min(dist - brr[-1], dist - crr[-1]))\n\nt = int(input())\nwhile t:\n    t -= 1\n    solve()\n\n##########################################################\n",
                true
            ],
            [
                "from collections import Counter\nfrom queue import Queue\nimport math\n\n\nif __name__ == '__main__':\n    '''\n    Test case:\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n    '''\n    T = int(input())\n    for t in range(T):\n        n, k = [int(s) for s in input().split(' ')]\n        A = [int(s) for s in input().split(' ')]\n        A.sort()\n        ans = 0\n        for idx in range((n + k - 1) // k):\n            if A[idx * k] < 0:\n                ans += -A[idx * k] * 2\n            else:\n                break\n\n        A.reverse()\n        for idx in range((n + k - 1) // k):\n            if A[idx * k] >= 0:\n                ans += A[idx * k] * 2\n            else:\n                break\n        ans -= max(abs(A[0]), abs(A[-1]))\n        print(ans)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nc = []\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    xneg = list(map(int, input().split()))\n    xneg.sort()\n    xpos = []\n\n    for e in range(n-1, -1, -1):\n        if xneg[e] > 0:\n            xpos.append(xneg.pop())\n        elif xneg[e] == 0:\n            xneg.pop()\n        else:\n            break\n\n    endp = 0\n    dist = 0\n    xneg += [0] * (k-(len(xneg)%k))\n    xpos += [0] * (k-(len(xpos)%k))\n\n    for i in range(0, len(xneg), k):\n        dist += abs(xneg[i]) * 2\n        if i==0:\n            endp = max(endp, abs(xneg[i]))\n\n    for i in range(0, len(xpos), k):\n        dist += xpos[i] * 2\n        if i==0:\n            endp = max(endp, xpos[i])\n    print(dist-endp)\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n,k=map(int,input().split())\n    l=list(map(int,input().split()))\n    l1=list(filter(lambda x:x<0,l))\n    l2=list(filter(lambda x: x>=0,l))\n    l1=list(map(abs,l1))\n    l1.sort()\n    l2.sort()\n    # print(l1)\n    # print(l2)\n    c1=0\n    c2=0\n    for i in range(len(l2)-1,-1,-k):\n        c2+=l2[i]*2\n    for i in range(len(l1)-1,-1,-k):\n        c1+=l1[i]*2\n    c=0\n    if(len(l1)>0 and len(l2)>0):\n        c=c1+c2-max(max(l1),max(l2))\n    elif (len(l1)>0):\n        c=c1-max(l1)\n    elif (len(l2)>0):\n        c=c2-max(l2)\n    print(c)",
                true
            ],
            [
                "import sys\n\n\ndef calculate(array, m, o=False):\n    count = 0\n    for i in range(len(array) - 1, -1, -m):\n        count += 2 * array[i]\n    if not o:\n        count -= array[-1]\n    return count\n\n\nfor _ in range(int(input())):\n\n    n, k = list(map(int, sys.stdin.readline().split()))\n    arr = list(map(int, sys.stdin.readline().split()))\n    left = []\n    right = []\n    for num in arr:\n        if num < 0:\n            left.append(-num)\n        elif num > 0:\n            right.append(num)\n\n    left.sort()\n    right.sort()\n\n    if left and right:\n\n        if left[-1] > right[-1]:\n            x1 = calculate(left, k)\n            x2 = calculate(right, k, True)\n        else:\n            x1 = calculate(left, k, True)\n            x2 = calculate(right, k)\n        print(x1 + x2)\n    elif left:\n        x = calculate(left, k)\n        print(x)\n    elif right:\n        x = calculate(right, k)\n        print(x)\n    else:\n        print(0)\n",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    arr=list(map(int,input().split())) \n    a=[]\n    b=[]\n    for el in arr:\n        if el>=0:\n            a.append(el)\n        elif el<0:\n            b.append(el)\n    if a:\n        a.sort(reverse=True)\n    if b :\n        b.sort()\n    ans=[]\n    i=0\n    while i<len(a):\n        ans.append(a[i])\n        i+=k\n        \n    i=0\n    while i<len(b):\n        ans.append(-b[i])\n        i+=k\n    ans.sort()\n    res=0\n    for el in ans:\n        res+=2*el\n    res-=ans[-1]\n    print(res)",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\n\ndef solve(L, k):\n    n=len(L)\n    if n==0:return 0\n    r=n%k\n    if r==0:r=k\n    res1=0\n    res2=0\n    for i in range(0, n, k):\n        a,b=L[i],L[min(i+k-1, n-1)]\n        if a*b<0:\n            res1+=2*(abs(a)+abs(b))\n        else:\n            res1+=2*max(abs(a), abs(b))\n    \n    for i in range(r-k, n, k):\n        a,b=L[max(i, 0)], L[i+k-1]\n        if a*b<0:\n            res2+=2*(abs(a)+abs(b))\n        else:\n            res2+=2*max(abs(a), abs(b))\n    return min(res1, res2)\n\nfor _ in ' '*int(input()):\n    n,k=map(int,input().split())\n    L=list(map(int,input().split()))\n    L.sort()\n    L1=[]\n    L2=[]\n    for i in L:\n        if i<0:L1.append(i)\n        elif i>0:L2.append(i)\n        else:continue\n    res=solve(L1,k)+solve(L2,k)\n    res-=max(abs(L[0]), abs(L[-1]))\n    print(res)",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools,copy,random\nfrom functools import reduce \nimport operator\n \ninf = float('inf')\nmod = 10**9+7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // fractions.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(20000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\n \ndef find(i) :\n    if par[i] != i : par[i] = find(par[i]);\n    return par[i]\ndef union(a, b) :\n    a = find(a)\n    b = find(b)\n    if a == b : return False\n    par[a] = b\n    return True\n#par = [i for i in range(n)]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    return graph\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\n \ndef initGrid(h,w):\n    for i in range(h):\n        s = S()\n        grid.append(list(s))\n    return grid\n \ndef soe(limit):\n    a = [True] * limit                          # Initialize the primality list\n    a[0] = a[1] = False\n \n    for (i, isprime) in enumerate(a):\n        if isprime:\n            yield i\n            for n in range(i*i, limit, i):     # Mark factors non-prime\n                a[n] = False\n    return a\n\n################## Main (Author - 9th) ################## \ndef fix(a,k):\n    res = [0]\n    for i in range(0,len(a),k):\n        res.append(abs(a[i])*2)\n    return sorted(res)\n\nfor _ in range(I()):\n    n,k = LI()\n    a = LI()\n    pos = []\n    neg = []\n    for i in a:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    pos.sort(key=lambda x:-x)\n    neg.sort()\n    newPos = fix(pos,k)\n    newNeg = fix(neg,k)\n    if newNeg[-1] < newPos[-1]:\n        newNeg, newPos = newPos, newNeg\n    mx = newNeg[-1]\n    newNeg.pop(-1)\n    mx //= 2\n    print(((sum(newNeg)+sum(newPos))+mx))\n   \n",
                true
            ],
            [
                "def minimiseDistance(n,k,array):\n    # array.sort()\n    left = []\n    right = []\n    for x in range(n):\n        if array[x]<0:\n\n            left.append(abs(array[x]))\n        elif array[x] > 0:\n\n            right.append(array[x])\n\n    if not left and not right:\n        return 0\n\n\n    right.sort()\n    qR = len(right)\n    dist = 0\n    rem = qR %k\n    if rem == 0:\n        i = rem\n    else:\n        dist += right[rem-1]*2\n        i = rem\n\n    while i < qR:\n        i+= k\n        dist += right[i-1]*2\n\n        # print(i)\n\n    left.sort()\n    qL = len(left)\n    rem = qL %k\n\n    if rem == 0:\n        i = rem\n    else:\n        dist += left[rem-1]*2\n        i = rem\n\n\n    while i < qL:\n        i+= k\n        dist += left[i-1]*2\n\n    if not left:\n        dist -= right[-1]\n    elif not right:\n        dist -= left[-1]\n    else:\n        dist -= max(left[-1],right[-1])\n\n    return dist\n\nt = int(input())\nfor _ in range(t):\n    n,k = map(int,input().split())\n    l = list(map(int,input().split()))\n    print(minimiseDistance(n,k,l))",
                true
            ],
            [
                "'''\n      ___           ___                         ___                       ___           ___                         ___\n     /\\__\\         /\\  \\         _____         /\\  \\                     /\\  \\         /\\  \\                       /\\__\\\n    /:/ _/_        \\:\\  \\       /::\\  \\        \\:\\  \\       ___         /::\\  \\       |::\\  \\         ___         /:/ _/_\n   /:/ /\\  \\        \\:\\  \\     /:/\\:\\  \\        \\:\\  \\     /\\__\\       /:/\\:\\__\\      |:|:\\  \\       /\\__\\       /:/ /\\  \\\n  /:/ /::\\  \\   ___  \\:\\  \\   /:/  \\:\\__\\   ___ /::\\  \\   /:/__/      /:/ /:/  /    __|:|\\:\\  \\     /:/  /      /:/ /::\\  \\\n /:/_/:/\\:\\__\\ /\\  \\  \\:\\__\\ /:/__/ \\:|__| /\\  /:/\\:\\__\\ /::\\  \\     /:/_/:/__/___ /::::|_\\:\\__\\   /:/__/      /:/_/:/\\:\\__\\\n \\:\\/:/ /:/  / \\:\\  \\ /:/  / \\:\\  \\ /:/  / \\:\\/:/  \\/__/ \\/\\:\\  \\__  \\:\\/:::::/  / \\:\\~~\\  \\/__/  /::\\  \\      \\:\\/:/ /:/  /\n  \\::/ /:/  /   \\:\\  /:/  /   \\:\\  /:/  /   \\::/__/       ~~\\:\\/\\__\\  \\::/~~/~~~~   \\:\\  \\       /:/\\:\\  \\      \\::/ /:/  /\n   \\/_/:/  /     \\:\\/:/  /     \\:\\/:/  /     \\:\\  \\          \\::/  /   \\:\\~~\\        \\:\\  \\      \\/__\\:\\  \\      \\/_/:/  /\n     /:/  /       \\::/  /       \\::/  /       \\:\\__\\         /:/  /     \\:\\__\\        \\:\\__\\          \\:\\__\\       /:/  /\n     \\/__/         \\/__/         \\/__/         \\/__/         \\/__/       \\/__/         \\/__/           \\/__/       \\/__/\n\n'''\n\"\"\"\n\u2591\u2591\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2588\n\u2591\u2584\u2580\u2591\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2591\u2591\u2588\u2591\n\u2591\u2588\u2591\u2584\u2591\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2591\u2584\u2591\u2588\u2591\n\u2591\u2588\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2591\n\u2591\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2591\n\u2584\u2588\u2580\u2588\u2580\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2580\u2580\u2588\u2588\u2588\n\u2588\u2588\u2591\u2591\u2580\u2588\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2588\u2580\u2591\u2591\u2588\u2588\n\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2580\u2591\u2591\u2591\u2591\u2580\u2588\u2591\u2591\u2591\u2591\u2588\u2588\n\u2588\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2588\u2588\n\u2591\u2580\u2588\u2588\u2588\u2584\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2584\u2588\u2588\u2588\u2580\u2591\n\u2591\u2591\u2591\u2580\u2588\u2588\u2584\u2591\u2580\u2588\u2588\u2580\u2591\u2584\u2588\u2588\u2580\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\"\"\"\nimport sys\nimport math\nimport collections\nimport operator as op\nimport heapq as hq\nfrom collections import deque\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2, floor, log\nfrom bisect import bisect_right, bisect_left, bisect\nfrom itertools import permutations\n\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\nfrom functools import reduce\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(2**20)\n\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom  # or / in Python 2\n\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return (list(factors))\n\ndef isPowerOfTwo(x):\n    return (x and (not(x & (x - 1))))\n\ndef distance(a,k):\n    n = len(a)\n    st = n%k\n    if st == 0:\n        st = k\n    ans = 0\n    for i in range(st-1, n, k):\n        ans += 2*a[i]\n    return ans\n\nMOD = 1000000007  # 10^9 + 7\nPMOD = 998244353\nLOGN = 30\n# alp = 'abcdefghijklmnopqrstuvwxyz'\nalp = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nN = 2 * 100005 + 1\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    n,k = list(map(int, stdin.readline().rstrip().split()))\n    # K = int(stdin.readline())\n    # n = int(stdin.readline())\n    # n, h = list(map(int, input().rstrip().split()))\n    a = list(map(int, stdin.readline().rstrip().split()))\n    # s = str(stdin.readline().strip('\\n'))\n    # s = list(stdin.readline().strip('\\n'))\n    # m = str(stdin.readline())\n    # c = list(map(int, stdin.readline().rstrip().split())) \n    A = []\n    B = []\n    for i in range(n):\n        if(a[i]<0):\n            B.append(-a[i])\n        else:\n            A.append(a[i])\n    A.sort()\n    B.sort()\n    ans = distance(A, k) + distance(B, k)\n    mx = -1\n    if (len(A) != 0):\n        mx = max(mx, A[-1])\n    if (len(B) != 0):\n        mx = max(mx, B[-1])\n    print(ans - mx)\n",
                true
            ],
            [
                "problem_num = int(input())\nfor i in range(problem_num):\n    nk = input()\n    nk = nk.split()\n    n = int(nk[0]);k = int(nk[1])\n    x = input()\n    arr = x.split()\n    pos = [int(a) for a in arr if int(a) >= 0]\n    neg = [abs(int(a)) for a in arr if int(a) < 0]\n    pos.sort(reverse=True)\n    pos = pos[::k]\n    neg.sort(reverse=True)\n    neg = neg[::k]\n    max_value = max(pos + neg)\n    print(2*sum(pos+neg)-max_value)\n\n\n",
                true
            ],
            [
                "from math import ceil, log2, floor,sqrt,gcd\nfrom collections import defaultdict,deque\nfrom bisect import bisect_left\nimport sys\nimport os.path\nfrom itertools import permutations\nsys.setrecursionlimit(200000)\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r+\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\n\n# input = sys.stdin.readline\n# print=sys.stdout.write\ndef MI():\n    return map(int, input().split())\n\nmod=10**9+7\n\n \n\ndef solve(testcase):\n    # n = int(input())\n    n,k=MI()\n    a = list(MI())\n    a.sort() \n    b=[]\n    c=[]\n    for i in range(n):\n        if a[i]>0:\n            b.append(a[i])\n        if a[i]<0:\n            c.append(a[i])\n   \n    n1=len(b)\n    n2=len(c)\n    ans=0\n    if n1:\n        count=0\n        for i in range(n1-1,-1,-1):\n            count+=1\n            if count==k:\n                if i!=0:\n                    ans+=2*abs(b[i-1])\n                count=0\n        ans+=b[n1-1]\n\n    if n2:\n        count=0\n        for i in range(n2-1):\n            count+=1\n            if count==k:\n                if i!=n2-1:\n                    ans+=2*abs(c[i+1])\n                count=0\n        ans+=abs(c[0])\n    if n1 and n2:\n        ans+=min(b[n1-1],abs(c[0]))\n    print(ans)\n\n        \n\n\n                \n\n            \n        \n\n\n    \n\nt=int(input())\n# t=1\nfor _ in range(t):\n    solve(_+1)",
                true
            ],
            [
                "#Author:harshal_509\nfrom collections import *\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    l=list(map(int,input().split()))\n    a=[]\n    b=[]\n    for i in range(n):\n        if(l[i]>=0):\n            a.append(l[i])\n        else:\n            b.append(l[i])\n    ans=0\n    a.sort()\n    b.sort(reverse=True)\n    p=len(a)\n    q=len(b)\n    ks=[]\n    if(p>0):\n        c=p-1\n        ks.append(a[c])\n        c-=k\n        while(c>=0):\n            ks.append(a[c])\n            c-=k\n    if(q>0):\n        c=q-1\n        ks.append(-b[c])\n        c-=k\n        while(c>=0):\n            ks.append(-b[c])\n            c-=k\n    ans=0\n    ks.sort()\n    x=len(ks)\n    for i in range(x-1):\n        ans+=ks[i]*2\n    ans+=ks[-1]\n    print(ans)\n            \n",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\nI = lambda : list(map(int,input().split()))\n\ndef ans(ar,k):\n    an = 0\n    for i in range(len(ar)-k-1,-1,-k):\n        an+=2*abs(ar[i])\n    return an\n\nt,=I()\nfor _ in range(t):\n    n, k = I()\n    l = sorted(I())\n    ix = n\n    for i in range(n):\n        if l[i]>0:\n            ix=i;break\n    neg = l[:ix];pos = l[ix:]\n    an = ans(neg[::-1],k)+ans(pos,k)\n    if neg and pos:\n        an += min(abs(neg[0]) + 2*pos[-1],pos[-1]+2*abs(neg[0]))\n    elif pos:\n        an+=pos[-1]\n    elif neg:\n        an+=(-neg[0])\n    print(an)",
                true
            ],
            [
                "#!/bin/python3\n\nimport sys\nimport math\n\ninput = sys.stdin.readline\n\nMAX = sys.maxsize\nMIN = -sys.maxsize - 1\n\n# UTILITIES\n\ndef inp():\n    return int(input())\n\ndef inpl():\n    return list(map(int, input().split()))\n\ndef inpstr():\n    return list(map(str, input().split()))\n\ndef findMaxCrossingSubarray(arr, low, mid, high):\n    sum = 0\n    leftSum = MIN\n    rightSum = MIN\n\n    i = mid\n    while i >= low:\n        sum += arr[i]\n        if sum > leftSum:\n            leftSum = sum\n            maxLeft = i\n        i -= 1\n\n    sum = 0\n    j = mid + 1\n    while j <= high:\n        sum += arr[j]\n        if sum > rightSum:\n            rightSum = sum\n            maxRight = j\n        j += 1\n\n    return maxLeft, maxRight, leftSum + rightSum\n\ndef findMaxSubarray(arr, low, high):\n    if high == low:\n        return low, high, arr[low]\n    else:\n        mid = math.floor((low + high) / 2)\n\n        leftLow, leftHigh, leftSum = findMaxSubarray(arr, low, mid)\n        rightLow, rightHigh, rightSum = findMaxSubarray(arr, mid + 1, high)\n        crossLow, crossHigh, crossSum = findMaxCrossingSubarray(arr, low, mid, high)\n\n        if leftSum >= rightSum and leftSum >= crossSum:\n            return leftLow, leftHigh, leftSum\n        elif rightSum >= leftSum and rightSum >= crossSum:\n            return rightLow, rightHigh, rightSum\n        else:\n            return crossLow, crossHigh, crossSum\n\ndef binarySearch(x, mid, arr, n):\n    if x == arr[mid - 1] or (x > arr[mid - 2] and x < arr[mid - 1]) or (mid == 1 and x < arr[mid - 1]):\n        return mid\n    elif x > arr[mid - 1]:\n        return binarySearch(x, mid + math.ceil((n - mid) / 2), arr, n)\n    else:\n        return binarySearch(x, mid - math.ceil(mid / 2), arr, mid)\n\n# SOLUTION\n\ndef solve(n, k, arr):\n    res = 0\n\n    m = max(arr) if max(arr) > abs(min(arr)) else abs(min(arr))\n\n    minL = []\n    maxL = []\n\n    for x in arr:\n        if x > 0:\n            maxL.append(x)\n        else:\n            minL.append(x)\n\n    minL.sort()\n    maxL.sort(reverse=True)\n\n    for x in range(0, len(maxL), k):\n        res += maxL[x] * 2\n\n    for x in range(0, len(minL), k):\n        res += abs(minL[x]) * 2\n\n    res -= m\n\n    return res\n\nif __name__ == \"__main__\":\n    res = []\n    iter = inp()\n    i = 0\n    while i < iter:\n        nk = inpl()\n        arr = inpl()\n        result = solve(nk[0], nk[1], arr)\n        res.append(result)\n        i += 1\n\n    for r in res:\n        print(str(r))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    pos = []\n    neg = []\n    maxp = 0\n    for a in arr:\n        if a > 0:\n            pos.append(a)\n            if a > maxp: maxp = a\n        elif a < 0:\n            neg.append(-a)\n            if (-a) > maxp: maxp = -a\n    pos.sort()\n    neg.sort()\n    pos.reverse()\n    neg.reverse()\n    res = 0\n    for i in range(0, len(pos), k):\n        res += pos[i]\n        res += pos[i]\n    for i in range(0, len(neg), k):\n        res += neg[i]\n        res += neg[i]\n    print(res - maxp)\n",
                true
            ],
            [
                "import math,sys\n#from itertools import permutations, combinations;import heapq,random;\nfrom collections import defaultdict,deque\nimport bisect as bi\ndef yes():print('YES')\ndef no():print('NO')\n#sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');\ndef I():return (int(sys.stdin.readline()))\ndef In():return(map(int,sys.stdin.readline().split()))\ndef Sn():return sys.stdin.readline().strip()\n#sys.setrecursionlimit(1500)\ndef dict(a):\n    d={} \n    for x in a:\n        if d.get(x,-1)!=-1:\n            d[x]+=1\n        else:\n            d[x]=1\n    return d\ndef find_gt(a, x):\n    'Find leftmost value greater than x'\n    i = bi.bisect_left(a, x)\n    if i != len(a):\n        return i\n    else:            \n        return -1\ndef main():\n    try:\n        n,k=In()\n        l=list(In())\n        l.sort()\n\n        # mn,mx=sum(l[0:k]),sum(l[len(l)-k:len(l)])\n        mn,mx=l[0],l[-1]\n        if mn>=0 and mx>=0:\n            if k==1:\n                ans = 0\n                for i in range(n-1,-1,-1):\n                    if i==n-1:\n                        ans+=l[i]\n                    else:\n                        ans+=2*l[i]\n                print(ans)\n                return\n\n            ans = 0\n            op=k\n            ok=1\n            for i in range(n-1,-1,-1):\n                if op==1:\n                    op=k\n                else:\n                    if op==k:\n                        if ok:\n                            ok=0\n                            ans+=l[i]\n                        else:\n                            ans+=2*l[i]\n                    op-=1\n            print(ans)\n            return\n        elif mn<=0 and mx<=0:\n            if k==1:\n                ans = 0\n                for i in range(n):\n                    if i==0:\n                        ans+=abs(l[i])\n                    else:\n                        ans+=2*abs(l[i])\n                print(ans)\n                return\n            ans =0 \n            op = k\n            ok=1\n            for i in range(n):\n                if op ==1 :\n                    op = k\n                else:\n                    if op==k:\n                        if ok:\n                            ans+=abs(l[i])\n                            ok=0\n                        else:\n                            ans+=2*abs(l[i])\n                    op-=1\n            print(ans)\n            return\n        else:\n            if abs(mn)>abs(mx):\n                if k==1:\n                    ans = 0\n                    for i in range(n):\n                        if i==0:\n                            ans+=abs(l[i])\n                        else:\n                            ans+=2*abs(l[i])\n                    print(ans)\n                    return\n                \n                neg,pos= [],[]\n                for x in l:\n                    if x<=0:\n                        neg.append(x)\n                    else:\n                        pos.append(x)\n                ans =0 \n                op = k\n                ok=1\n                for i in range(len(neg)):\n                    if op ==1 :\n                        op = k\n                    else:\n                        if op==k:\n                            if ok:\n                                ans+=abs(neg[i])\n                                ok=0\n                            else:\n                                ans+=2*abs(neg[i])\n                        op-=1\n                op= k\n                for i in range(len(pos)-1,-1,-1):\n                    if op==1:\n                        op=k\n                    else:\n                        if op==k:\n                            ans+=2*pos[i]\n                        op-=1\n                print(ans)\n                return\n            else:\n                if k==1:\n                    ans = 0\n                    for i in range(n-1,-1,-1):\n                        if i==n-1:\n                            ans+=abs(l[i])\n                        else:\n                            ans+=2*abs(l[i])\n                    print(ans)\n                    return\n\n                neg,pos= [],[]\n                for x in l:\n                    if x<=0:\n                        neg.append(x)\n                    else:\n                        pos.append(x)\n                ans =0 \n                op = k\n                ok=1\n                for i in range(len(neg)):\n                    if op==1:\n                        op=k\n                    else:\n                        if op==k:\n                            ans+=2*abs(neg[i])\n                        op-=1\n                op=k\n                for i in range(len(pos)-1,-1,-1):\n                    if op==1:\n                        op=k\n                    else:\n                        if op==k:\n                            if ok:\n                                ok=0\n                                ans+=pos[i]\n                            else:\n                                ans+=2*pos[i]\n                        op-=1\n                print(ans)\n                return\n\n\n    except:\n        pass\n        \nM = 998244353\nP = 1000000007\n \nif __name__ == '__main__':\n    for _ in range(I()):main()\n    #for _ in range(1):main()\n#End#\n\n#        ******************* All The Best *******************   #",
                true
            ],
            [
                "#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"4\n# 5 1\n# 1 2 3 4 5\n# 9 3\n# -5 -10 -15 6 5 8 3 7 4\n# 5 3\n# 2 2 3 3 3\n# 4 2\n# 1000000000 1000000000 1000000000 1000000000\n\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\ndef calc(K, Na, Xa):\n    if Na == 0:\n        return 0\n    \n    ans = 0\n    i = Na\n    first = True\n    while i > 0:\n        if first:\n            ans += Xa[i-1]\n            first = False\n        else:\n            ans += Xa[i-1]*2\n        i -= K\n    return ans\n\ndef solve(N, K, X):\n    X1, X2 = [], []\n    for x in X:\n        if x > 0:\n            X1.append(x)\n        else:\n            X2.append(-x)\n    X1.sort()\n    X2.sort()\n    N1 = len(X1)\n    N2 = len(X2)\n\n    if (not X1) and (not X2):\n        return 0\n    elif X1 and (not X2):\n        return calc(K, N1, X1)\n    elif (not X1) and X2:\n        return calc(K, N2, X2)\n\n    d1 = calc(K, N1, X1)\n    d2 = calc(K, N2, X2)\n    ans1 = d1 + X1[-1] + d2\n    ans2 = d2 + X2[-1] + d1\n    ans = min(ans1, ans2)\n    return ans\n        \n\n\n\nT0 = int(input())\nfor _ in range(T0):\n    N, K = map(int, input().split())\n    X = list(map(int, input().split()))\n    print(solve(N, K, X))",
                true
            ],
            [
                "# by the authority of GOD     author: Kritarth Sharma #\nimport sys\nfrom collections import defaultdict,deque\nfrom bisect import bisect_left\nimport math\ninput=sys.stdin.readline\ndef inp():\n    l=list(map(int,input().split()))\n    return l\n\nfor _ in range(int(input())):\n        n,k=inp()\n        l=inp()\n        l= [i for i in l if i != 0]\n        n=len(l)\n        p=[]\n        n=[]\n        for i in l:\n            if i>0:\n                p.append(i)\n            else:\n                n.append(i)\n        p.sort(reverse=True)\n        n.sort()\n        s=0\n        for i in range(0,len(p),k):\n            s+=2*p[i]\n        for i in range(0,len(n),k):\n            s+=2*abs(n[i])\n        n.append(0)\n        p.append(0)\n        s-=max(p[0],abs(n[0]))\n        print(s)\n",
                true
            ],
            [
                "t = int(input())\nfor q in range(t):\n    n,k= [int(x) for x in input().split()]\n    arr = [int(x) for x in  input().split()]\n    pos =[]\n    neg = []\n    ind = 0\n    for i in range(n):\n        if arr[i]<0:\n            neg.append(-arr[i])\n        elif arr[i]>0:\n            pos.append(arr[i])    \n    g = len(neg)\n    p = len(pos)\n    pos.sort()\n    neg.sort()\n    ans = 0\n    pans = 0\n    pi = p-1\n    while(pi>= 0):\n        pans += 2*pos[pi]\n        pi-=k\n    gans  = 0\n    gi = g-1\n    while(gi>= 0):\n        gans += 2*neg[gi]\n        gi-=k\n    subp = 0\n    if pos:\n        subp = pos[p-1]\n    subn = 0    \n    if neg   :\n        subn = neg[g-1]\n    ans = gans + pans - max(subp, subn)\n    print(ans)\n    # print(pans, gans, max(subp, subn) )\n\n\n\n\n\n",
                true
            ],
            [
                "from collections import defaultdict, Counter,deque\nfrom math import sqrt, log10, log, floor, factorial,gcd\nfrom bisect import bisect_left, bisect_right,insort\nfrom itertools import permutations,combinations\nimport sys, io, os\ninput = sys.stdin.readline\n# input=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# sys.setrecursionlimit(10000)\ninf = float('inf')\nmod = 10 ** 9 + 7\ndef yn(a): print(\"YES\" if a else \"NO\")\nceil = lambda a, b: (a + b - 1) // b\ndef get(pos):\n    return pos[::-k]\nt = int(input())\nfor i in range(t):\n    n,k=[int(i) for i in input().split()]\n    l=[int(i) for i in input().split()]\n    pos=[i for i in l if i>=0]\n    neg=[-i for i in l if i<0]\n    pos.sort()\n    neg.sort()\n    arr1=get(pos)\n    arr2=get(neg)\n    arr=sorted(arr1+arr2)\n    print(2*sum(arr)-max(arr))\n\n",
                true
            ],
            [
                "cases = int(input())\nfor loop in range(cases):\n    n, k = input().split(\" \")\n    posdata = input().split(\" \")\n    negdata = []\n    for i in range(len(posdata) - 1, -1, -1):\n        posdata[i] = int(posdata[i])\n        if posdata[i] < -0:\n            negdata.append(posdata.pop(i) * -1)\n    posdata = sorted(posdata)\n    negdata = sorted(negdata)\n\n    tot = 0\n    most = -1\n    for data in [posdata, negdata]:\n        while len(data) > 0:\n            dist = data[-1]\n            for i in range(int(k)):\n                if len(data) > 0:\n                    del data[-1]\n            tot += dist * 2\n            if most == -1 or dist > most:\n                most = dist\n\n    tot -= most\n\n    print(tot)\n",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\ndef answer(a , b):\n\n    ans , i = 0 , 0\n    while(i < len(a)):\n        ans += 2 * a[i]\n\n        i += k\n\n    i = len(b)%k - 1\n    if(i == -1):i = k - 1\n    while(i < len(b)):\n        ans += 2 * b[i]\n\n        i += k\n\n    if(len(b)):ans -= b[-1]\n\n    return ans\n    \n\n  \nfor T in range(int(input())):\n\n    n , k = map(int,input().split())\n\n    a = list(map(int,input().split()))\n\n    pos , neg = [] , []\n    for i in range(n):\n\n        if(a[i] < 0):neg.append(-a[i])\n        else:pos.append(a[i])\n\n    val1 = answer(sorted(neg, reverse = True) , sorted(pos))\n    val2 = answer(sorted(pos , reverse = True) , sorted(neg))\n\n    print(min(val1 , val2))\n",
                true
            ],
            [
                "def walk(n, k ,L):\n    if n == 0:\n        return 0\n    if n <= k:\n        return L[-1]\n    ## L contains only >0\n    dist = 0\n    q = int(n/k)\n    r = n - q*k\n    if r != 0:\n        for i in range(q):\n            dist += 2*L[i*k+r-1]\n        dist += L[-1]\n        return dist\n    if r == 0:\n        for i in range(1, q):\n            dist += 2*L[i*k-1]\n        dist += L[-1]\n        return dist\n\ncases = int(input())\nfor wow in range(cases):\n    line1 = input().split( )\n    n = int(line1[0])\n    k = int(line1[1])\n    long = input().split( )\n    L1 = []\n    n1 = 0\n    L2 = []\n    n2 = 0\n    for elem in long:\n        elem = int(elem)\n        if elem > 0:\n            L1.append(elem)\n            n1 += 1\n        elif elem < 0:\n            L2.append(-elem)\n            n2 += 1\n    L1.sort()\n    L2.sort()\n    if n1 == 0:\n        print(walk(n2, k, L2))\n    elif n2 == 0:\n        print(walk(n1, k, L1))\n    else:\n        if L1[-1] > L2[-1]:\n            print(walk(n1, k, L1) + walk(n2, k, L2) + L2[-1])\n        else:\n            print(walk(n1, k, L1) + walk(n2, k, L2) + L1[-1])",
                true
            ],
            [
                "import collections\n\ndef readLine():\n    return list(map(int, input().strip().split()))\n\ndef readInt():\n    return int(input())\n\ndef readString():\n    return input()\n\ndef tcase():\n    t = readInt()\n    for _ in range(t):\n        solve()\n\ndef solve():\n    n, k = readLine()\n    arr = readLine()\n    pos = []\n    neg = []\n    for a in arr:\n        if a >= 0:\n            pos.append(a)\n        else:\n            neg.append(-a)\n    pos.sort()\n    neg.sort()\n    maximum = 0\n    if pos:\n        maximum = max(maximum, max(pos))\n    if neg:\n        maximum = max(maximum, max(neg))\n\n    def count(arr):\n        na = len(arr)\n        ans = 0\n        for i in range(na-1, -1, -k):\n            ans += arr[i] * 2\n        return ans\n    print(count(pos) + count(neg) - maximum)\n    \n\n    \n    \n\n\ntcase()\n# solve()",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,k = map(int,input().split())\n    l = list(map(int,input().split()))\n    tk = k\n    pa = []\n    na = []\n    for i in l:\n        if i>=0:\n            pa.append(i)\n        else:\n            na.append(i)\n    pa.sort()\n    na.sort()\n    na.reverse()\n    p=len(pa)\n    q=len(na)\n    arr = []\n\n    \n    if p>0:\n        temp=p-1\n        arr.append(pa[temp])\n        temp-=k\n        while temp>=0:\n            arr.append(pa[temp])\n            temp-=k\n    if q>0:\n        temp=q-1\n        arr.append(-na[temp])\n        temp-=k\n        while temp>=0:\n            arr.append(-na[temp])\n            temp-=k\n    ans = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        ans += arr[i]*2\n    ans += arr[-1]\n    print(ans)\n\n    \n    # l.sort()\n    # i = 0\n    # ans=0\n    # while i<n:\n    #     while k>0 and i<n:\n    #         if i==0:\n    #             ans+=l[i]\n    #         else:\n    #             ans+=l[i]-l[i-1]\n    #         i+=1\n    #         k-=1\n    #     if i==n:\n    #         break\n    #     else:\n    #         ans+=2*l[i-1]\n    #     k = tk\n    # print(ans)\n",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools,copy,random\nfrom functools import reduce \nimport operator\n \ninf = float('inf')\nmod = 10**9+7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // fractions.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(20000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\n \ndef find(i) :\n    if par[i] != i : par[i] = find(par[i]);\n    return par[i]\ndef union(a, b) :\n    a = find(a)\n    b = find(b)\n    if a == b : return False\n    par[a] = b\n    return True\n#par = [i for i in range(n)]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    return graph\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\n \ndef initGrid(h,w):\n    for i in range(h):\n        s = S()\n        grid.append(list(s))\n    return grid\n \ndef soe(limit):\n    a = [True] * limit                          # Initialize the primality list\n    a[0] = a[1] = False\n \n    for (i, isprime) in enumerate(a):\n        if isprime:\n            yield i\n            for n in range(i*i, limit, i):     # Mark factors non-prime\n                a[n] = False\n    return a\n\n################## Main (Author - 9th) ################## \ndef fix(a,k):\n    res = [0]\n    for i in range(0,len(a),k):\n        res.append(abs(a[i])*2)\n    return sorted(res)\n\nfor _ in range(I()):\n    n,k = LI()\n    a = LI()\n    pos = []\n    neg = []\n    for i in a:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    pos.sort()\n    neg.sort()\n    pos = pos[::-1]\n    newPos = fix(pos,k)\n    newNeg = fix(neg,k)\n    if newNeg[-1] > newPos[-1]:\n        mx = newNeg[-1]\n        newNeg.pop(-1)\n        mx //= 2\n        print(((sum(newNeg)+sum(newPos))+mx))\n    else:\n        mx = newPos[-1]\n        newPos.pop(-1)\n        mx //= 2\n        print(((sum(newNeg)+sum(newPos))+mx))\n\n    \n\n\n\n    ",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\ndef positive_dist(x, n, k, last):\n    cur = n - 1\n    total = 0\n    while cur >= 0 and x[cur] > 0:\n        total += 2*x[cur]\n        cur -= k\n    if last and x[-1] > 0:\n        total -= x[-1]\n    return total\n\ndef negative_dist(x, n, k, last):\n    cur = 0\n    total = 0\n    while cur < n and x[cur] < 0:\n        total -= 2*(x[cur])\n        cur += k\n    if last and x[0] < 0:\n        total += x[0]\n    return total\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    x = [int(i) for i in input().split()]\n    x.sort()\n    if x[0] >= 0:\n        print(positive_dist(x, n, k, True))\n    elif x[-1] <= 0:\n        print(negative_dist(x, n, k, True))\n    elif abs(x[0]) > abs(x[-1]):\n        print(positive_dist(x, n, k, False) + negative_dist(x, n, k, True))\n    else:\n        print(positive_dist(x, n, k, True) + negative_dist(x, n, k, False))\n",
                true
            ],
            [
                "import math,sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());mod1=1000000007;mod2=998244353\nfor _ in range(I()):\n    n,k=M()\n    a=L()\n    b=[i for i in a if i!=0];ans=0\n    b.append(0);b.sort()\n    p=b.index(0)\n    i=min(p,k);j=max(len(b)-1-k,p);i1=i;j1=j\n    ans+=abs(b[i])+b[j]\n    while i!=p:\n        ans+=b[min(p,i+k)]-b[i]+2*abs(b[min(p,i+k)])\n        i=min(p,i+k)\n    while j!=p:\n        ans+=b[j]-b[max(p,j-k)]+2*b[max(p,j-k)]\n        j=max(p,j-k)\n    a1=b[j1]+2*b[-1]-b[j1]-b[0]\n    a2=abs(b[i1])+b[i1]-2*b[0]+b[-1]\n    ans+=min(a1,a2)\n    print(ans)",
                true
            ],
            [
                "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\n#from decimal import Decimal \n \n#from statistics import mode\n \nfrom itertools import combinations as cb\n \ndef int_arr(): return list(map(int, sys.stdin.readline().strip().split()))\n \ndef str_arr(): return list(map(str, sys.stdin.readline().strip().split()))\n \ndef input(): return sys.stdin.readline().strip()\n \n \n\n\n# sys.stdin = open('Hilbert Hotel/input.txt', 'r')\n# sys.stdout = open('Hilbert Hotel/output.txt', 'w')\n\n\nfor _ in range(int(input())):\n    n,k=int_arr()\n    arr=int_arr()\n    ans=0\n    neg=[]\n    pos=[]\n    for i in arr:\n        if i<0:\n            neg.append(abs(i))\n        else:\n            pos.append(i)\n\n\n    neg.sort()\n    pos.sort()\n    chp=[]\n    chn=[]\n    for i in range(len(pos)):\n        if i<k:\n            chp.append(pos[i]*2)\n        else:\n            chp.append(pos[i]*2+chp[i-k])\n            \n    for i in range(len(neg)):\n        if i<k:\n            chn.append(neg[i]*2)\n        else:\n            chn.append(neg[i]*2+chn[i-k])\n    if len(pos)>0 and len(neg)>0:\n        ans=chp[-1]+chn[-1]-max(pos[-1],neg[-1])\n    elif len(pos)>0:\n        ans=chp[-1]-pos[-1]\n    else:\n        ans=chn[-1]-neg[-1]\n    \n\n\n\n\n\n    # if len(neg)>0:\n    #     n_mx=max(neg)\n\n    # if len(pos)>0:\n    #     p_mx=max(pos)\n    \n    # pm=0\n    # nm=0\n    # ans=0\n    # for i in range(-1,len(pos)-1,-1):\n    #     if pos[i]==p_mx:\n    #         pos.pop()\n    #     else:\n    #         break\n\n    # for i in range(-1,len(neg)-1,-1):\n    #     if neg[i]==n_mx:\n    #         neg.pop()\n    #     else:\n    #         break\n    \n    \n    # for i in range(0,len(pos),k):\n    #     ans+=arr[i]*2\n    \n    # if len(pos)%k!=0:\n    #     x=0\n    #     y=0\n\n    #     x+=pos[-1]\n    #     x+=\n\n\n\n    # for i in range(0,len(pos),k):\n    #     ans+=pos[i]*2\n    # if len(pos)>0:\n    #     ans-=pos[-1]\n    # if len(pos)%k!=0:\n    #     ans+=pos[-1]\n\n    # for i in range(0,len(neg),k):\n    #     ans+=neg[i]*2\n    # if len(neg)>0:\n    #     ans-=neg[-1]\n    # if len(neg)%k!=0:\n    #     ans+=neg[-1]\n\n    # if len(pos)>0 and len(neg)>0:\n    #     ans+=min(pos[-1],neg[-1])\n    \n    print(ans)\n    \n\n",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b, c = [], []\n\n    for x in a:\n        if x > 0:\n            b.append(x)\n        elif x < 0:\n            c.append(-x)\n\n    nb, nc = len(b), len(c)\n    res = 0\n\n    b.sort()\n    c.sort()\n\n    if nb == nc == 0:\n        print(0)\n        continue\n\n    if nc == 0:\n        nb, nc = nc, nb\n        b, c = c, b\n        \n    if (nb > 0 and nc > 0) and max(b) > max(c):\n        nb, nc = nc, nb\n        b, c = c, b\n\n    if nb:\n        for x in range(nb - 1, -1, -k):\n            res += b[x] * 2\n\n    for x in range(nc - 1, -1, -k):\n        res += c[x] * 2\n\n    print(res - c[-1])",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n,k=map(int, input().split())\n    arr=list(map(int, input().split()))\n    arr1,arr2=[],[]\n    for x in arr:\n        if x>-1:\n            arr1.append(x)\n        else:\n            arr2.append(abs(x))\n    arr1.sort(reverse=True)\n    arr2.sort(reverse=True)\n    ans=0\n    if arr2 and arr1:\n        if arr1[0]>arr2[0]:\n            arr2,arr1=arr1,arr2\n    for i in range(0,len(arr1),k):\n        if i==0:\n            if arr2:\n                ans+=2*(arr1[i])\n            else:\n                ans+=arr1[i]\n        else:\n            ans+=2*(arr1[i])\n    for i in range(0,len(arr2),k):\n        if i==0:\n            ans+=arr2[i]\n        else:\n            ans+=2*(arr2[i])\n    print(ans)\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    X = list(map(int,input().split()))\n    X.sort()\n    left = []\n    right = []\n    for j in X:\n        if j<0:\n            left.append(j)\n        else:\n            right.append(j)\n    ans = 0 \n    if  len(right)>0 and len(left)>0 and abs(min(left))<max(right):\n        ans = 0 \n        j = len(right) - 1\n        while (j>=0):\n            ans += 2*right[j]\n            j -= k \n        j = 0 \n        while (j<len(left)):\n            ans += 2*abs(left[j])\n            j+= k\n        ans -= max(right)\n    elif len(right)>0 and len(left)>0 and abs(min(left))>=max(right):\n        ans = 0 \n        j = len(right) - 1\n        while (j>=0):\n            ans +=2*right[j]\n            j -= k\n        j = 0 \n        while (j<len(left)):\n            ans += 2*abs(left[j])\n            j+= k\n        ans -= abs(min(left))\n    elif len(right) == 0:\n        ans = 0 \n        \n        j = 0 \n        while (j<len(left)):\n            ans += 2*abs(left[j])\n            j+= k\n        ans -= abs(left[0])\n    elif len(left) == 0:\n        ans = 0 \n        j = len(right) - 1\n        while (j>=0):\n            ans += 2*right[j]\n            j -= k\n        ans -= right[-1]\n    print(ans)\n        \n        \n        \n        \n",
                true
            ],
            [
                "import math\nt=int(input())\nfor i in range(t):\n    (n,k)=map(int, input().split(' '))\n    x=list(map(int, input().split(' ')))\n    x.sort()\n    counter=0\n    while counter!=n:\n        if x[counter]>0:\n            break\n        counter+=1\n    neg=x[:counter]\n    pos=x[counter:]\n    pos.reverse()\n    lneg=len(neg)\n    lpos=len(pos)\n    neg_trips=math.ceil(lneg/k)\n    pos_trips=math.ceil(lpos/k)\n    theta=0\n    sum1=0\n    while theta<neg_trips:\n        sum1+=2*abs(neg[theta*k])\n        theta+=1\n    delta=0\n    sum2=0\n    while delta<pos_trips:\n        sum2+=2*pos[delta*k]\n        delta+=1\n    sum3=0\n    sum4=0\n    if lneg!=0:\n        sum3=abs(neg[0])\n    if lpos!=0:\n        sum4=pos[0]\n    ans=sum1+sum2-max(sum3,sum4)\n    print(ans)",
                true
            ],
            [
                "R = lambda: map(int, input().split())\nt,=R()\nwhile t:\n t-=1;n,k=R();a=b,c=[[],[]]\n for x in sorted(R()):a[x>0]+=abs(x),\n print(2*(sum(b[::k]+c[::-k]))-max(b[:1]+c[-1:]))",
                true
            ],
            [
                "from sys import stdin, stdout, setrecursionlimit as srl\nfrom threading import stack_size\nfrom collections import deque, defaultdict as dd\nfrom math import gcd, ceil, sqrt\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\n\n#srl(int(1e6))\n#input = stdin.readline\nflush = stdout.flush\n\np = int(1e9+7)\n\ntc = 1\ntc = int(input())\nfor _ in range(1, tc+1):\n    # print(f\"Case #{_}: \", end = '')\n\n    n, k = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n\n    left, right = [0], [0]\n    for i in m:\n        if (i > 0):\n            right.append(i)\n        else:\n            left.append(-i)\n\n    left.sort(reverse = True)\n    right.sort(reverse = True)\n\n    ans = -max(left[0], right[0])\n\n    for i in range(0, len(left), k):\n        ans += 2*left[i]\n\n    for i in range(0, len(right), k):\n        ans += 2*right[i]\n\n    print(ans)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ndef cal(o,k):\n    now = k\n    prev = 0\n    cnt = 0\n    q = 0\n    if len(o) != 0:\n        q = o[0]\n\n    while len(o) > 0:\n        if now > 0:\n            ele = o.pop()\n            cnt += abs(ele-prev)\n            prev = ele\n            now -= 1\n\n        else:\n            cnt += abs(prev)\n            now = k\n            prev = 0\n\n        # print(o,cnt)\n\n    return cnt+q\n\nfor _ in range(int(input())):\n    n,k = map(int,input().split())\n    l = list(map(int,input().split()))\n    l1 = []\n    l2 = []\n    e1, e2 = -1, -1\n    for i in l:\n        if i < 0:\n            l1.append(-1*i)\n            e1 = max(e1,-1*i)\n            continue\n\n        l2.append(i)\n        e2 = max(e2,i)\n\n    l1.sort()\n    l2.sort()\n    # print(l1)\n    # print(l2)\n    ans = cal(l1, k) + cal(l2, k) - max(e1, e2)\n    print(ans)",
                true
            ],
            [
                "#!/usr/local/bin/python3\n\ndef trySide(side, k):\n    if len(side) == 0:\n        return 0, 0\n    distance = 0\n    lastVisited = -1 \n    if len(side) % k != 0:\n        lastVisited += (len(side) % k)\n        distance += 2*side[lastVisited]\n    while lastVisited + k < len(side):\n        lastVisited += k\n        distance += 2*side[lastVisited]\n    distanceIfStopped = distance - side[-1]\n    return distance, distanceIfStopped\n\nt = int(input())\nfor _ in range(t):\n    n,k = map(int, input().split())\n    arr = sorted(list(map(int, input().split())))\n    n = len(arr)\n    leftSide = [abs(x) for x in arr if x < 0][::-1]\n    rightSide = [x for x in arr if x >= 0]\n    leftNoStop, leftStop = trySide(leftSide, k)\n    rightNoStop, rightStop = trySide(rightSide, k)\n    result = min(leftNoStop + rightStop, rightNoStop + leftStop)\n    print(result)",
                true
            ],
            [
                "import heapq;import sys;import math;from collections import deque;from bisect import bisect_left,bisect_right;I=sys.stdin.readline;II=lambda :int(I());IN=lambda x:map(int,x.split());FN=lambda x:map(float,x.split());L=lambda x:list(IN(x));M=1000000007;P=print;T=True;F=False\nfor _ in range(II()):\n    n,k=IN(I())\n    l=L(I())\n    l.sort()\n    f=0;n2=n-1;n1=n\n    for i in range(n):\n        if(l[i]>=0):\n            n2=min(n2,i-1)\n        if(l[i]>0):\n            n1=i\n            break\n    \n    # d=[0];l=0\n    # for i in a:\n    #     d.append(a-l)\n    #     l=i\n    i=n\n    ans=0\n    while(i>n1):\n        ans+=2*l[max(i-1,n1)]\n        i=i-k\n    if(n1<n):\n        ans-=l[-1]\n    i=0\n    while(i<=n2):\n        ans-=2*l[i]\n        i=i+k\n    if(n2>-1):\n        ans+=l[0]\n    if(n1<n and n2>-1):\n        ans+=min(l[-1],abs(l[0]))\n    print(ans)\n\n",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    li=list(map(int,input().split()))\n    ans=0\n    pos=[]\n    neg=[]\n    for i in range(n):\n        if li[i]>0:\n            pos.append(li[i])\n        else:\n            neg.append(-li[i])\n    pos.sort(reverse=True)\n    neg.sort(reverse=True)\n    ans=0 \n    for i in range(k,len(pos)):\n        if(i%k==0):\n            ans=ans+2*pos[i]\n    for i in range(k,len(neg)):\n        if(i%k==0):\n            ans=ans+2*neg[i]\n    if(len(pos)==0 or len(neg)==0):\n        if(len(pos)!=0):\n            ans=ans+pos[0]\n        elif(len(neg)!=0):\n            ans=ans+neg[0]\n    else:\n        ans=ans+min(pos[0],neg[0])+pos[0]+neg[0]\n    print(ans)",
                true
            ],
            [
                "def readArr(): return [int(x) for x in input().split()]\n\ndef solve():\n    n, k = readArr()\n    arr = readArr()\n    a, b = [], []\n    for el in arr:\n        if el > 0:\n            a.append(el)\n        elif el < 0:\n            b.append(-el)\n\n    a.sort()\n    b.sort()\n\n    def get_min_dist(x):\n        dist = 0\n        for i in range(len(x)-1, -1, -k):\n            if (i == len(x)-1): dist += x[i]\n            else: dist += 2*x[i]\n        return dist\n\n    def get_max_dist(x):\n        dist = 0\n        for i in range(len(x)-1, -1, -k):\n            dist += 2*x[i]\n        return dist\n\n    ans = min(get_min_dist(a) + get_max_dist(b), get_max_dist(a) + get_min_dist(b))\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    T = int(input())\n    for _ in range(T):\n        solve()\n",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve():\n  n, k = get_ints()\n  arr = get_list()\n\n  arr.sort()\n\n  neg = []\n  pos = []\n\n  for ele in arr:\n    if ele < 0:\n      neg.append(ele)\n    \n    if ele > 0:\n      pos.append(ele)\n  \n  l1 = len(neg)\n  l2 = len(pos)\n\n  if l1 == 0 and l2 == 0:\n    print(0)\n    return\n\n\n  # No Negatives\n  if l1 == 0:\n    if k >= l2:\n      print(pos[-1])\n      return\n\n    rem = l2 % k\n    ans = 0\n\n\n    if rem == 0:\n      for i in range(k-1, l2-k, k):\n        ans += 2*pos[i]\n      \n      ans += pos[-1]\n      print(ans)\n      return\n    else:\n      for i in range(k-1, l2, k):\n        ans += 2*pos[i]\n      \n      ans += pos[-1]\n\n      ans1 = ans\n\n      ans2 = 0\n\n      for i in range(rem-1, l2-1, k):\n        ans2 += 2*pos[i]\n      \n      ans2 += pos[-1]\n\n      ans = min(ans1, ans2)\n      print(ans)\n      return\n\n      \n  # No Positives\n  if l2 == 0:\n    for i, ele in enumerate(neg):\n      neg[i] = abs(neg[i])\n\n    neg.sort()\n    pos = neg[:]\n    l2 = len(pos)\n\n    if k >= l2:\n      print(pos[-1])\n      return\n\n    rem = l2 % k\n    ans = 0\n\n    if rem == 0:\n      for i in range(k-1, l2-k, k):\n        ans += 2*pos[i]\n      \n      ans += pos[-1]\n      print(ans)\n      return\n    else:\n      for i in range(k-1, l2, k):\n        ans += 2*pos[i]\n      \n      ans += pos[-1]\n\n      ans1 = ans\n\n      ans2 = 0\n\n      for i in range(rem-1, l2-1, k):\n        ans2 += 2*pos[i]\n      \n      ans2 += pos[-1]\n\n      ans = min(ans1, ans2)\n      print(ans)\n      return\n\n\n\n  ans = 0\n\n  # print(pos)\n\n  for i in range(l1):\n    neg[i] = abs(neg[i])\n\n  neg.sort()\n\n  if k >= l1:\n    ans += 0\n  else:\n    # print(neg)\n\n    rem = l1%k\n\n    if rem == 0:\n      for i in range(k-1, l1-k, k):\n        ans += 2*neg[i]\n    else:\n      temp1 = 0\n      for i in range(k-1, l1, k):\n        temp1 += 2*neg[i]\n      \n      temp2 = 0\n      for i in range(rem-1, l1-1, k):\n        temp2 += 2*neg[i]\n      \n      ans += min(temp1, temp2)\n    \n\n\n\n  if k >= l2:\n    ans += 0\n  else:\n    rem = l2%k\n    if rem == 0:\n      for i in range(k-1, l2-k, k):\n        ans += 2*pos[i]\n    else:\n      temp1 = 0\n      for i in range(k-1, l2, k):\n        temp1 += 2*pos[i]\n      \n      temp2 = 0\n      for i in range(rem-1, l2-1, k):\n        temp2 += 2*pos[i]\n      \n      ans += min(temp1, temp2)\n  \n  ans1 = ans\n  ans2 = ans\n\n  ans1 += 2*pos[-1] + neg[-1]\n  ans2 += 2*neg[-1] + pos[-1]\n\n  ans = min(ans1, ans2)\n\n  print(ans)\n\n\n\n\n\n\n\nT = get_int()\nwhile T:\n  solve()\n  T -= 1\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nget_int = lambda : int(input().rstrip())\nget_arr = lambda : [int(w) for w in input().split()]\n\n\nt = get_int()\n\ndef get_ost(t):\n    if t % k == 0:\n        return k\n    else:\n        return t % k\n\nfor _ in range(t):\n    n, k = get_arr()\n    a = get_arr()\n    a.sort()\n    an = [-w for w in a if w < 0][::-1]\n    ap = [w for w in a if w >= 0]\n    inf = (sum(an) + sum(ap)) * 2\n    total1, total2 = inf, inf\n\n    sz_neg = len(an)\n    sz_pos = len(ap)\n\n    an_rev = an[::-1]\n    ap_rev = ap[::-1]\n\n    if sz_pos != 0:\n        total1 = 0\n        if sz_neg != 0:\n            total1 += 2 * sum(an_rev[:sz_neg:k])\n        total1 += 2 * sum(ap[get_ost(sz_pos) - 1:sz_pos - 1:k])\n        total1 += ap[sz_pos - 1]\n    if sz_neg != 0:\n        total2 = 0\n        if sz_pos != 0:\n            total2 += 2 * sum(ap_rev[:sz_pos:k])\n        total2 += 2 * sum(an[get_ost(sz_neg) - 1:sz_neg - 1:k])\n        total2 += an[sz_neg - 1]\n    print(min(total1, total2))\n",
                true
            ],
            [
                "def int_input():\n    a = int(input())\n    return a\n\ndef int_list_input():\n    a = list(map(int,input().split()))\n    return a\n\ndef solve():\n    n,k = int_list_input()\n    arr = int_list_input()\n    ans = 0\n    \n    arr.sort()\n    pos = [0]\n    neg = [0]\n    \n    i = n-1\n    while i >= 0:\n        if arr[i] < 0:\n            break\n        pos.append(arr[i])\n        i = i-k\n    \n    \n    i = 0\n    while i < n:\n        if arr[i] > 0:\n            break\n        neg.append(abs(arr[i]))\n        i = i+k\n    \n    ans = 2*sum(pos) + 2*sum(neg)\n    ans -= max(max(pos),max(neg))\n    \n    print(ans)\n\nif __name__ == '__main__':\n    \n    for _ in range(int(input())):\n        solve()\n    \n    #print(\"Case\",str(n)+\":\",str(ans))",
                true
            ],
            [
                "from sys import stdin\ninput=stdin.readline\nrn=lambda:int(input())\nrns=lambda:map(int,input().split())\nrl=lambda:list(map(int,input().split()))\nrs=lambda:input().strip()\nYN=lambda x:print('YES') if x else print('NO')\nceil_div=lambda a,b:-(-a//b)\nmod=10**9+7\n\nfor _ in range(rn()):\n    n,k=rns()\n    x=rl()\n    x.sort()\n    neg=[i for i in x if i<0]\n    pos=[i for i in x if i>0]\n    a=len(neg)\n    b=len(pos)\n    neg.reverse()\n    mins=[0,0]\n    if a>0:\n        mins[0]=-neg[-1]\n    if b>0:\n        mins[1]=pos[-1]\n    def solve(arr,k):\n        if not arr:\n            return 0\n        ends=[]\n        while arr:\n            app=arr[-1]\n            for i in range(min(k,len(arr))):\n                arr.pop()\n            ends.append(app)\n        pans=2*abs(sum(ends))-abs(ends[0])\n        return pans\n    ans=solve(pos,k)+solve(neg,k)\n    ans+=min(mins)\n    print(ans)\n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    arr.sort()\n    pos = []\n    neg = []\n\n    for j in arr:\n        if j >= 0:\n            pos.append(j)\n        else:\n            neg.append(j)\n\n    ans = 0\n\n    pos = pos[::-1]\n    start = 0\n\n    while start < len(pos):\n        ans += 2 * pos[start]\n        start += k\n\n\n    start = 0\n    while start < len(neg):\n        ans += 2 * abs(neg[start])\n        start += k\n\n    print(ans - max(abs(arr[0]), abs(arr[-1])))\n\n\n",
                true
            ],
            [
                "def anss(a,k):\n    ans = 0\n    n = len(a)\n    curr = 0\n\n    while curr!=n-1:\n        if(curr == 0):\n            next = curr + (n-1)%k\n            if(next == 0):\n                next = curr + k\n        else:\n            next = curr + k\n\n        if next >= n-1:\n            ans += a[-1]\n            curr = n-1\n        else:\n            ans += 2*a[next]\n            curr = next\n    return ans\n\nfor _ in range(int(input())):\n    n,k = map(int,input().split())\n    b = list(map(int,input().split()))\n    pos = [0]\n    neg = [0]\n    for i in b:\n        if(i>0):\n            pos.append(i)\n        elif(i<0):\n            neg.append(-1*i)\n    pos.sort()\n    neg.sort()\n    ansPos = anss(pos,k)\n    ansNeg = anss(neg,k)\n    if(len(pos)==1 or len(neg) == 1):\n        print(ansPos + ansNeg)\n        continue\n    else:\n        print(ansNeg +ansPos + min(pos[-1],neg[-1]))\n\n\n",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\na=int(input())\nfor i in range(a):\n\n    n,k=map(int,input().split())\n    z=list(map(int,input().split()))\n    \n    g1=[]\n    g2=[]\n    for i in range(len(z)):\n        if(z[i]>0):\n            g1.append(z[i])\n        elif(z[i]<0):\n            g2.append(z[i])\n    \n  \n    \n\n    for i in range(len(g2)):\n        g2[i]=abs(g2[i])\n    g1.sort(reverse=True)\n    g2.sort(reverse=True)\n\n    total=0\n    gt=0\n    kk=0\n    for i in range(len(g1)):\n        kk=max(g1[i],kk)\n        if(i==len(g1)-1 or (i+1)%k==0):\n            total+=2*kk\n            kk=0\n    kk=0\n    \n    for i in range(len(g2)):\n        kk=max(g2[i],kk)\n        if(i==len(g2)-1 or (i+1)%k==0):\n            gt+=2*kk\n            kk=0\n\n    tt=0\n    rt=0\n    c1=0\n  \n    g1.sort(reverse=True)\n    g2.sort(reverse=True)\n    for i in range(len(g1)):\n        c1=max(g1[i],c1)\n        if((i+1)%k==0 or i==len(g1)-1):\n            if(tt==0):\n                tt+=c1\n            else:\n                tt+=2*c1\n            c1=0\n    c1=0\n    c2=0\n    for i in range(len(g2)):\n        c2=max(g2[i],c2)\n        if((i+1)%k==0 or i==len(g2)-1):\n            if(rt==0):\n                rt+=c2\n            else:\n                rt+=2*c2\n            c2=0\n    \n    print(min(total+rt,gt+tt))\n    \n   \n            \n    \n",
                true
            ],
            [
                "def worst(X, K):\n    if len(X)==0: return 0\n    L = len(X)\n    total= 0\n    total += X[-1]*2\n    L -= K\n    while L>0:\n        total += X[L-1]*2\n        L -= K\n    return total\n    \ndef best(X, K):\n    if len(X)==0: return 0\n    L = len(X)\n    total= 0\n    total += X[-1]\n    L -= K\n    while L>0:    \n        total += X[L-1]*2\n        L -= K\n    return total\n    \ndef solve():\n    [N, K] = [int(x) for x in input().split()]\n    D = [int(x) for x in input().split()]\n    POS = [x for x in D if x > 0]\n    NEG = [-x for x in D if x < 0]\n    POS.sort()\n    NEG.sort()\n    res = best(POS, K) + worst(NEG, K)\n    res2 = best(NEG, K) + worst(POS, K)\n    return min(res, res2)  \n\nT = int(input())\nfor i in range(T):\n    print(solve())\n\n    \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    x = list(map(int, input().split()))\n    if k == 1:\n        ans = 0\n        m = 0 # max\n        for i in range(n):\n            ans += abs(x[i])\n            if abs(x[i]) > m: m = abs(x[i])\n        ans *= 2\n        ans -= m\n    else:\n        # k > 1\n        ans = 0\n        a = []\n        b = []\n        for i in range(n):\n            if x[i] > 0:\n                a += [x[i]]\n            elif x[i] < 0:\n                b += [abs(x[i])]\n        a = sorted(a, reverse = True)\n        b = sorted(b, reverse = True)\n        for i in range(0, len(a), k):\n            ans += a[i]\n        for i in range(0, len(b), k):\n            ans += b[i]\n        ans *= 2\n        if len(a) > 0 and len(b) > 0:\n            ans -= max(a[0], b[0])\n        elif len(a) > 0:\n            ans -= a[0]\n        elif len(b) > 0:\n            ans -= b[0]\n    print(ans)",
                true
            ],
            [
                "def solve(a):\n    global ans, k\n    last = 0\n    m = len(a)\n    for i in range(m-1, -1, -1):\n        ans += abs(a[i] - last)\n        last = a[i]\n        if i % k == 0:\n            ans += abs(a[i])\n            last = 0\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    x = list(map(int, input().split()))\n    x.sort(reverse=True)\n    ans = 0\n    x = [i for i in x if i != 0]\n    n = len(x)\n    neg = [i for i in x if i < 0]\n    pos = [i for i in x if i > 0]\n    neg = neg[::-1]\n    solve(neg)\n    solve(pos)\n    if pos and neg:\n        sub = max(abs(pos[0]), abs(neg[0]))\n        ans -= sub\n    elif pos:\n        ans -= pos[0]\n    elif neg:\n        ans -= -neg[0]\n    print(ans)",
                true
            ],
            [
                "def func(N,K,arr):\n\n    ps,ne = sorted([i for i in arr if i > 0]),sorted([i for i in arr if i < 0])\n\n    mn1,mn2 = 0,0\n\n    it1,it2 = len(ps)-K-1,0\n\n    while it1 >=0:\n\n        mn1 += ps[it1]*2\n        it1 -= K\n\n    while it2 < len(ne):\n\n        mn1 += abs(ne[it2])*2\n        it2 += K\n\n    pt1,pt2 = len(ps)-1,K\n\n    while pt1 >= 0:\n        mn2 += ps[pt1]*2\n        pt1 -= K\n\n    while pt2 < len(ne):\n        mn2 += abs(ne[pt2])*2\n        pt2 += K\n\n    if ps:\n\n        mn1 += ps[-1]\n\n    if ne:\n        mn2 += abs(ne[0])\n\n\n    return min(mn1,mn2)\n\n\n\n\nfor t in range(int(input())):\n\n    N,K = map(int,input().split())\n    arr = list(map(int,input().split()))\n\n    print(func(N,K,arr))\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nAn important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several (as many as they want) times per meeting.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import heapq\nsr=lambda: input()\nir=lambda: int(sr())\nlr=lambda: list(map(int, sr().split()))\n\ninf=10**18\n# mod=10**9+7\nmod = 998244353\n\nif __name__=='__main__':\n    test = ir()\n    for t in range(test):\n        n=ir()\n        a=lr()\n        h = []\n        ans = []\n        for ind,num in enumerate(a):\n            if num > 0:\n                heapq.heappush(h, (-num, ind+1))\n        while len(h) > 1:\n            num1, ind1 = heapq.heappop(h)\n            num2, ind2 = heapq.heappop(h)\n            ans.append([ind1, ind2])\n            num1+=1\n            num2+=1\n            if num1 < 0:\n                heapq.heappush(h, (num1, ind1))\n            if num2 < 0:\n                heapq.heappush(h, (num2, ind2))\n        print(len(ans))\n        for l in ans:\n            print(*l, sep=' ')",
                true
            ],
            [
                "import heapq\n\ndef solve():\n    n = int(input())\n    h = []\n    for i, v in enumerate(input().split(), 1):\n        v = int(v)\n        if v == 0:\n            continue\n        heapq.heappush(h, (-v, i))\n    ans = []\n    while len(h) > 1:\n        a, i = heapq.heappop(h)\n        b, j = heapq.heappop(h)\n        ans.append((i, j))\n        if a < -1:\n            heapq.heappush(h, (a + 1, i))\n        if b < -1:\n            heapq.heappush(h, (b + 1, j))\n        # print(h)\n\n    print(len(ans))\n    for line in ans:\n        print(*line)\n\nfor _ in range(int(input())):\n    solve()\n",
                true
            ],
            [
                "import sys\nfrom collections import Counter\nfrom itertools import chain\nfrom itertools import permutations\nimport math\nimport heapq\n#sys.stdin = open(\"input.txt\")\n\nnum_cases = int(sys.stdin.readline().strip())\n\nfor case in range(1, num_cases+1):\n    N = int(sys.stdin.readline().strip())\n    A = list(map(int, sys.stdin.readline().split()))\n    #print(N, A)\n    new_A = []\n    for index, value in enumerate(A):\n        new_A.append([-value, index+1])\n\n    heapq.heapify(new_A)\n    count = 0\n    ans = []\n    while 1:\n        alpha = heapq.heappop(new_A)\n        beta = heapq.heappop(new_A)\n        #print(\"WARNING\", alpha, beta)\n        if beta[0] == 0:\n            break\n        else:\n            count += 1\n            ans.append([alpha[1], beta[1]])\n            heapq.heappush(new_A, [alpha[0] + 1, alpha[1]])\n            heapq.heappush(new_A, [beta[0] + 1, beta[1]])\n\n    print(count)\n    for answer in ans:\n        print(*answer)",
                true
            ],
            [
                "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = []\n    for i in range(n):\n        q.append((-a[i], i+1))\n    heapq.heapify(q)\n    ans = 0\n    l = []\n    while True:\n        x1, y1 = heapq.heappop(q)\n        x2, y2 = heapq.heappop(q)\n        x1 = -x1\n        x2 = -x2\n        if x1 == 0 or x2 == 0:\n            break\n        ans+=1\n        \n        l.append([y1, y2])\n        heapq.heappush(q, (-max(x1-1, 0), y1))\n        heapq.heappush(q, (-max(x2-1, 0), y2))\n    print(ans)\n    for x, y in l:\n        print(x, y)\n        ",
                true
            ],
            [
                "import heapq\nimport sys\ninput=sys.stdin.readline\nfor _ in range(int(input())):\n    n=int(input())\n    ar=list(map(int,input().split()))\n    heap=[[-ar[i],i] for i in range(n)]\n    heapq.heapify(heap)\n    ans=0\n    pair=[]\n    while True:\n        x1=heapq.heappop(heap)\n        x2=heapq.heappop(heap)\n        if(x1[0]==0 or x2[0]==0):\n            break\n        else:\n            ans+=1\n            pair.append([x1[1]+1,x2[1]+1])\n            heapq.heappush(heap, [x1[0]+1,x1[1]])\n            heapq.heappush(heap, [x2[0]+1,x2[1]])\n    print(ans)\n    for i in pair:\n        print(*i)\n            \n        ",
                true
            ],
            [
                "from heapq import heapify,heappush,heappop,heappushpop\nfrom collections import defaultdict as dd, deque as dq,Counter as C\nfrom math import factorial as f ,ceil,gcd,sqrt,log\nfrom bisect import bisect_left as bl ,bisect_right as br\nfrom itertools import combinations as c,permutations as p\nfrom math import factorial as f ,ceil,gcd,sqrt,log\nfrom sys import stdin\ninput = stdin.readline\nmp = lambda : map(int,input().split())\nit = lambda: int(input())\nls = lambda : list(input().strip().split())\nmt = lambda  r : [ ls() for _ in range(r)]\nlcm = lambda a,b : (a*b)//gcd(a,b)\ndef fibo_n(n):\n    return (((1+sqrt(5))/2)**n)/sqrt(5)\nfor _ in range(it()):\n    a = it()\n    b = list(mp())\n    for i in range(a):\n        b[i]*=-1\n    k = list(zip(b,range(1,a+1)))\n    heapify(k)\n    ans =[]\n    while True:\n        fst ,pos1 = heappop(k)\n        scd ,pos2 = heappop(k)\n        if fst!=0 and scd!=0:\n            fst+=1\n            scd+=1\n            ans.append([pos1,pos2])\n            heappush(k,(fst,pos1))\n            heappush(k,(scd,pos2))\n        else:\n            break\n    print(len(ans))\n    for i in ans:\n        print(*i)",
                true
            ],
            [
                "import sys\n\nimport heapq\n\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve(n, arr):\n  final = []\n\n  temp = []\n\n  for i, ele in enumerate(arr):\n    if ele != 0:\n      temp.append([-ele, i+1])\n  \n  heapq.heapify(temp)\n  l = len(temp)\n\n  while l > 1:\n    f = heapq.heappop(temp)\n    s = heapq.heappop(temp)\n\n    l -= 2\n\n    c1 = abs(f[0])\n    c2 = abs(s[0])\n\n    c1 -= 1\n    c2 -= 1\n\n    final.append([f[1], s[1]])\n\n    if c1 > 0:\n      heapq.heappush(temp, [-c1, f[1]])\n      l += 1\n    \n    if c2 > 0:\n      heapq.heappush(temp, [-c2, s[1]])\n      l += 1\n  \n\n  sys.stdout.write(str(len(final)) + \"\\n\")\n  for ele in final:\n    sys.stdout.write(\" \".join(map(str, ele)) + \"\\n\")\n\n\n\nT = get_int()\nwhile T:\n  n = get_int()\n  arr = get_list()\n  solve(n, arr)\n  T -= 1\n",
                true
            ],
            [
                "from heapq import heapify, heappop, heappush\n\nfor _ in range(int(input())):\n    s = int(input())\n    r = list(map(int,input().split()))\n    m = []\n    result = []\n    count = 0\n    for i,e in enumerate(r):\n        if e!= 0:\n            m.append((-1*e,i+1))\n    heapify(m)\n    while len(m) > 1:\n        x,y = heappop(m)\n        x = -x\n        a,b = heappop(m)\n        a = -a\n        count += 1\n        result.append((y,b))\n        if x-1 != 0:\n            heappush(m, (-1*(x-1), y))\n        if a-1 != 0:\n            heappush(m, (-1*(a-1), b))\n    print(count)\n    for i in result:\n        x,y = i\n        print(x,y)",
                true
            ],
            [
                "import sys\nimport math\nimport heapq\nfrom collections import defaultdict as dd\nfrom collections import OrderedDict as od\nfrom collections import deque\nfrom itertools import permutations as pp\nfrom itertools import combinations as cc\nfrom sys import stdin\nfrom functools import cmp_to_key as ctk\nfrom functools import lru_cache\nfrom bisect import bisect_left as bs_l\nfrom bisect import bisect_right as bs_r\ninput = sys.stdin.readline\nmod=10**9+7\nsys.setrecursionlimit(10**5)\ndef comparator(x,y):\n    if x[0]==y[0]:\n        return x[1]-y[1]\n    return True\ndef ncr(n, r):\n    if n < r: return 0\n    return fc[n] * pow(fc[r] * fc[n - r] % mod, mod - 2, mod) % mod\nT=int(input())\nfor _ in range(T):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    hp=[]\n    for i in range(n):\n        if arr[i]>0:\n            heapq.heappush(hp,[-arr[i],i])\n    ll=[]\n    while len(hp)>1:\n        l1,l2=heapq.heappop(hp),heapq.heappop(hp)\n        x,y=l1[0],l2[0]\n        if x<0 and y<0:\n            ll.append([l1[1]+1,l2[1]+1])\n            heapq.heappush(hp,[x+1,l1[1]])\n            heapq.heappush(hp,[y+1,l2[1]])\n        else:\n            break\n    print(len(ll))\n    for i in ll:\n        print(*i)\n",
                true
            ],
            [
                "import heapq\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    heap = []\n    ans = []\n    x = 1\n    for element in arr:\n        if element != 0:\n            heapq.heappush(heap, (-element, x)) # We need a max heap\n        x += 1\n\n    while len(heap) > 1:\n        first, id1 = heapq.heappop(heap)\n        second, id2 = heapq.heappop(heap)\n\n        if first + 1 != 0:\n            heapq.heappush(heap, (first + 1, id1))\n        if second + 1 != 0:\n            heapq.heappush(heap, (second + 1, id2))\n        ans.append((id1, id2))\n\n    print(len(ans))\n    for i, j in ans:\n        print(i, j)\n\n\n\n",
                true
            ],
            [
                "import heapq\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n\n    a = [int(x) for x in input().split()]\n\n    h = []\n\n    for i in range(n):\n        h.append((-a[i], i))\n    heapq.heapify(h)\n\n    meetings = []\n\n    while True:\n        # print(h)\n        a = heapq.heappop(h)\n        b = heapq.heappop(h)\n        # print(a, b)\n\n        if b[0] == 0:\n            break\n\n        meetings.append((a[1] + 1, b[1] + 1))\n        a = a[0] + 1, a[1]\n        b = b[0] + 1, b[1]\n\n        heapq.heappush(h, a)\n        heapq.heappush(h, b)\n\n    print(len(meetings))\n\n    for i, j in meetings:\n        print(i, j)\n",
                true
            ],
            [
                "import heapq\nfrom heapq import heapify,heappop,heappush,heappushpop,heapreplace\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    x=[]\n    for i in range(n):\n        if a[i]==0:\n            continue\n        x.append([-a[i],i+1])\n    heapify(x)\n    ans=[]\n    while True:\n        if len(x)<=1:\n            break\n        mx,pos1=heappop(x)\n        mn,pos2=heappop(x)\n        mn+=1\n        mx+=1\n        ans.append([pos1,pos2])\n        if mn!=0:\n            heappush(x,[mn,pos2])\n        if mx!=0:\n            heappush(x, [mx, pos1])\n    print(len(ans))\n    for i in range(len(ans)):\n        print(*ans[i])",
                true
            ],
            [
                "import collections\nimport math \nfrom functools import lru_cache\nimport heapq\n\ndef process(tc, N, A):\n    res = 0\n    h = []\n    out = []\n    for i in range(N):\n        if A[i] > 0:\n            heapq.heappush(h, (-A[i], i + 1))\n    while len(h) > 1:\n        fc, f = heapq.heappop(h)\n        sc, s = heapq.heappop(h)\n        res += 1\n        fc += 1\n        sc += 1\n        out.append([f, s])\n        if fc < 0:\n            heapq.heappush(h, (fc, f))\n        if sc < 0:\n            heapq.heappush(h, (sc, s))\n    print(res)\n    if res:\n        for v in out:\n            print(*v)\n    \n\n\ntcs = int(input())\nfor tc in range(tcs):\n    N = int(input())\n    A = list(map(int, input().split()))\n    process(tc + 1, N, A)",
                true
            ],
            [
                "from collections import deque, defaultdict, Counter\nfrom itertools import product, groupby, permutations, combinations, accumulate, zip_longest, \\\n    combinations_with_replacement\nfrom math import gcd, floor, inf, log2, sqrt, log10, factorial\nfrom bisect import bisect_right, bisect_left, insort_left\nfrom statistics import mode\nfrom string import ascii_lowercase, ascii_uppercase\nfrom heapq import heapify, heappop, heappush, heappushpop, heapreplace, nlargest, nsmallest, \\\n    merge\nfrom copy import deepcopy\nfrom random import shuffle\n \ncases = int(input())\nfor _ in range(cases):\n    num = int(input())\n    arr = list(map(int, input().split()))\n \n    new_arr = [(-n, i) for i, n in enumerate(arr, start=1)]\n \n    heapify(new_arr)\n    ans = []\n    while len(new_arr) > 1:\n        n1, p1 = heappop(new_arr)\n        n2, p2 = heappop(new_arr)\n        if n1 == 0 or n2 == 0:\n            break\n        ans.append([p1, p2])\n        n1 += 1\n        n2 += 1\n \n        if n1 != 0:\n            heappush(new_arr, (n1, p1))\n        if n2 != 0:\n            heappush(new_arr, (n2, p2))\n    print(len(ans))\n    for i, j in ans:\n        print(i, j)",
                true
            ],
            [
                "'''Author- Akshit Monga'''\nfrom sys import stdin, stdout\ninput = stdin.readline\nimport heapq\nt = int(input())\nfor _ in range(t):\n    n=int(input())\n    a=[int(x) for x in input().split()]\n    vals=[]\n    for i in range(n):\n        if a[i]:\n            vals.append((-a[i],i))\n    heapq.heapify(vals)\n    ans=[]\n    while 1:\n        if len(vals)<=1:\n            break\n        a=heapq.heappop(vals)\n        b=heapq.heappop(vals)\n        ans.append((a[1]+1,b[1]+1))\n        p=(a[0]+1,a[1])\n        if p[0]<0:\n            heapq.heappush(vals,p)\n        p = (b[0]+1, b[1])\n        if p[0]<0:\n            heapq.heappush(vals, p)\n    print(len(ans))\n    for i in ans:\n        print(*i)",
                true
            ],
            [
                "import sys\nimport math\nimport collections\nimport heapq\ndy = [1, 0, -1, 0]\ndx = [0, 1, 0, -1]\n\nr = sys.stdin.readline\n\nfor _ in range(int(r())):\n    N = int(r())\n    L = list(map(int, r().split()))\n    pq = []\n    for i in range(N):\n        if (L[i]): heapq.heappush(pq, [-L[i], i+1])\n\n    ansL = []\n\n    while len(pq) > 1:\n        a = heapq.heappop(pq)\n        b = heapq.heappop(pq)\n        if a[0]+1 < 0:\n            heapq.heappush(pq, [a[0]+1, a[1]])\n\n        if b[0]+1 < 0:\n            heapq.heappush(pq, [b[0] + 1, b[1]])\n        ansL.append((a[1], b[1]))\n    print(len(ansL))\n    for i in ansL:\n        print(*i)",
                true
            ],
            [
                "# max_heap: (remain, index)\n# if remain == 0: don't push\n# len(max_heap) == 0 or 1: finish\nimport heapq\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ans, ans_list = 0, []\n    q = []\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        idx = i + 1\n        heapq.heappush(q, [-a[i], idx])\n\n    while True:\n        if len(q) in [0, 1]:\n            break\n        x, y = heapq.heappop(q), heapq.heappop(q)\n        x[0] += 1\n        y[0] += 1\n        ans += 1\n        ans_list.append((x[1], y[1]))\n        if x[0]:\n            heapq.heappush(q, x)\n        if y[0]:\n            heapq.heappush(q, y)\n\n    print(ans)\n    for answer in ans_list:\n        print(*answer)\n",
                true
            ],
            [
                "from heapq import heapify, heappop, heappush\n \nfor _ in range(int(input())):\n    s = int(input())\n    r = list(map(int,input().split()))\n    m = []\n    result = []\n    count = 0\n    for i,e in enumerate(r):\n        if e!= 0:\n            m.append((-1*e,i+1))\n    heapify(m)\n    while len(m) > 1:\n        x,y = heappop(m)\n        x = -x\n        a,b = heappop(m)\n        a = -a\n        count += a\n        result.append((y,b))\n        x-=1\n        a-=1\n        if x>0:\n            heappush(m,(-x,y))\n        if a>0:\n            heappush(m,(-a,b))\n    print(len(result))\n    for x,y in result:\n        print(x,y)\n        ",
                true
            ],
            [
                "from collections import Counter, defaultdict,deque\nfrom sys import stdin,stdout\nfrom heapq import heapify,heappop,heappush\nimport io , os , sys\n#input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\ninput = stdin.readline\nfrom collections import OrderedDict\nfrom bisect import bisect_left , bisect_right\n\n\n \nmod = 998244353 \n \ndef mapinput():\n    return  map(int, input().split())\n \ndef listinput():\n    return [int(i) for i in input().split()]\n\ndef intinput():\n    return int(input())\n \ndef strinput():\n    return input().strip()\n \ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n    ans = []\n    for p in range(n + 1):\n        if prime[p]:\n            ans.append(p)\n    return ans\n \ndef writ(ss):\n    stdout.write(str(ss) + \"\\n\")\n \ndef mult(a , b, mod):\n    return ((a% mod) * (b%mod) ) % mod\n\n# def binn(arr , val):\n#     low = 0\n#     high = len(arr) -1 \n#     while low<= high:\n        \n#         mid = (low + high) >> 1 \n#         #print(low , high , mid , arr[mid] , val)\n#         if arr[mid] == val:\n#             return [mid]\n#         elif arr[mid] < val:\n#             low = mid + 1 \n#         else:\n#             high = mid -1\n        \n#         aa = [low , high]\n#         for i in range(-2,2):\n#             if 0 <= mid + i < len(arr) :\n#                 aa.append(mid+i)\n#         aa = set(aa)\n#         return aa\n\nfor test in range(intinput()):\n    def solve():\n        n = intinput()\n        arr = listinput()\n        maxh = [ [-arr[i] , i ] for i in range(n) if arr[i]!=0 ]\n        heapify(maxh)\n        ans = []\n        maxi = max(arr)\n        ansans = sum(arr) \n        while len(maxh) > 1:\n            ele1 = heappop(maxh)\n            ele2 = heappop(maxh)\n            ans.append((ele1[1],ele2[1]))\n            ele1[0] += 1\n            ele2[0] += 1\n            if ele1[0] != 0:\n                heappush(maxh , ele1)\n            if ele2[0] !=0:\n                heappush(maxh , ele2)\n        print(len(ans))\n        for i in ans:\n            ss = str(i[0]+1) + \" \"+ str(i[1] + 1)\n            writ(ss)\n\n    solve()\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nimport heapq\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    h = []\n    people = 0\n    for i in range(n):\n        if a[i] > 0:\n            people += 1\n            heapq.heappush(h, (-a[i], i))\n            \n    total = 0\n    meetings = []\n    while people > 1:\n        x, i = heapq.heappop(h)\n        y, j = heapq.heappop(h)\n        x += 1\n        y += 1\n        total += 1\n        meetings.append(str(i + 1) + \" \" + str(j + 1))\n        if x < 0:\n            heapq.heappush(h, (x, i))\n        if y < 0:\n            heapq.heappush(h, (y, j))\n        if x == 0:\n            people -= 1\n        if y == 0:\n            people -= 1\n    print(total)\n    if total > 0:\n        print(\"\\n\".join(meetings))\n",
                true
            ],
            [
                "'''input\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n'''\nfrom heapq import heappop,heappush\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    soc=list(map(int,input().split()))\n\n    heap=[]\n    for i in range(len(soc)):\n        if soc[i]>0:\n            heappush(heap,(-soc[i],i+1))\n\n\n    sol=[]\n    while len(heap)>1:\n        s1,i1=heappop(heap)\n        s2,i2=heappop(heap)\n        sol.append([i1, i2])\n        s1+=1\n        s2+=1\n        if s1<0:\n            heappush(heap,(s1,i1))\n        if s2<0:\n            heappush(heap,(s2,i2))\n\n    print(len(sol))\n    for i,j in sol:\n        print(i,j)\n",
                true
            ],
            [
                "import heapq\nt= int(input())\nfor case in range(t):\n  n = int(input())\n  a = list(map(int,input().split()))\n  ans =[]\n  q =[]\n  for i in range(n):\n    heapq.heappush(q,(-a[i],i+1))\n\n  while q:\n    value1,node1 = heapq.heappop(q)\n    value2,node2=heapq.heappop(q)\n    if value1==0 or value2==0:\n      break\n    value1*=-1\n    value2*=-1\n    \n    ans.append([node1,node2])\n    heapq.heappush(q,(-(value1-1),node1))\n    heapq.heappush(q,(-(value2-1),node2))\n\n    \n  m = len(ans)\n  print(m)\n  for i in range(m):\n    print(*ans[i])",
                true
            ],
            [
                "from heapq import *\nfor u in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    l=[]\n    ans=[]\n    for i in range(n):\n        if(a[i]>0):\n            heappush(l,(-a[i],i+1))\n    while(len(l)>1):\n        a,b=heappop(l)\n        x,y=heappop(l)\n        ans.append([b,y])\n        a,x=-a,-x\n        a-=1\n        x-=1\n        if(a>0):\n            heappush(l,(-a,b))\n        if(x>0):\n            heappush(l,(-x,y))\n    print(len(ans))\n    for i in ans:\n        print(*i)\n",
                true
            ],
            [
                "import sys\nimport math\nimport heapq\nfrom collections import defaultdict as dd\nfrom collections import OrderedDict as od\nfrom collections import deque\nfrom itertools import permutations as pp\nfrom itertools import combinations as cc\nfrom sys import stdin\nfrom functools import cmp_to_key as ctk\nfrom functools import lru_cache\nfrom bisect import bisect_left as bs_l\nfrom bisect import bisect_right as bs_r\ninput = sys.stdin.readline\nmod=10**9+7\nsys.setrecursionlimit(10**5)\ndef comparator(x,y):\n    if x[0]==y[0]:\n        return x[1]-y[1]\n    return True\ndef ncr(n, r):\n    if n < r: return 0\n    return fc[n] * pow(fc[r] * fc[n - r] % mod, mod - 2, mod) % mod\nT=int(input())\nfor _ in range(T):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    hp=[]\n    for i in range(n):\n        if arr[i]>0:\n            heapq.heappush(hp,[-arr[i],i])\n    ll=[]\n    while len(hp)>1:\n        l1,l2=heapq.heappop(hp),heapq.heappop(hp)\n        x,y=-l1[0],-l2[0]\n        if x<1 or y<1:\n            break\n        ll.append([l1[1]+1,l2[1]+1])\n        heapq.heappush(hp,[-x+1,l1[1]])\n        heapq.heappush(hp,[-y+1,l2[1]])\n    print(len(ll))\n    for i in ll:\n        print(*i)\n",
                true
            ],
            [
                "import heapq\nimport math\nimport sys\nimport collections\nimport bisect\n#import time\nimport random\nimport itertools\nimport string\nfrom collections import Counter,defaultdict\ndef get_ints():return map(int, sys.stdin.readline().strip().split())\ndef get_list():return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string():return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    n=int(input())\n    temp=get_list()\n    arr=[]\n    for i,j in enumerate(temp):\n        if j==0:continue\n        arr.append([-j,(i+1)])\n    heapq.heapify(arr)\n    ans=[]\n    while len(arr)>1:\n        m1,p1=heapq.heappop(arr)\n        m2,p2=heapq.heappop(arr)\n        ans.append([p1,p2])\n        m1+=1\n        m2+=1\n        if m1!=0:\n            heapq.heappush(arr,[m1,p1])\n        if m2!=0:\n            heapq.heappush(arr,[m2,p2])\n    print(len(ans))\n    for i in ans:\n        print(*i)",
                true
            ],
            [
                "from sys import stdin\nimport heapq\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a = [[-a[i], i + 1] for i in range(n) if a[i] != 0]\n    heapq.heapify(a)\n    ans = []\n    while len(a)>=2:\n        biggest=heapq.heappop(a)\n        second_biggest=heapq.heappop(a)\n        ans.append([biggest[1],second_biggest[1]])\n        biggest[0]=biggest[0]+1\n        second_biggest[0]=second_biggest[0]+1\n        if biggest[0]!=0:\n            heapq.heappush(a,biggest)\n        if second_biggest[0]!=0:\n            heapq.heappush(a,second_biggest)\n    print(len(ans))\n    for i in ans:\n        print(*i)",
                true
            ],
            [
                "from heapq import heappush,heappop\nfor t in range(int(input())):\n n=input()\n a=list(map(int,input().split()))\n q=[]\n ans=[]\n x=1\n for c in a:\n  if c!=0:heappush(q,(-c,x))\n  x+=1\n while len(q)>1:\n  c,x=heappop(q)\n  d,y=heappop(q)\n  if c+1!=0:heappush(q,(c+1,x))\n  if d+1!=0:heappush(q,(d+1,y))\n  ans+=(x,y),\n print(len(ans))\n for i,j in ans:print(i,j)",
                true
            ],
            [
                "\nimport heapq\nfor i in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    x = []\n    for i in range(n):\n        if l[i]>0:\n            x.append([-l[i],i])\n    heapq.heapify(x)\n    a=0\n    ans=[]\n    while len(x)>1:\n        xx=heapq.heappop(x)\n        yy=heapq.heappop(x)\n        a += 1\n        xx[0] += 1\n        yy[0] += 1\n        ans.append([xx[1]+1,yy[1]+1])\n        if xx[0]<0:\n            heapq.heappush(x,xx)\n        if yy[0]<0:\n            heapq.heappush(x,yy)\n    print(a)\n    for i in ans:\n        print(*i)",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby, accumulate\nfrom copy import deepcopy\nMOD = 10**9+7\nINF = float('inf')\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n    n = int(input())\n    A = rl()\n    count = 0\n    heap = [(-a, i) for i, a in enumerate(A) if a != 0]\n    heapify(heap)\n    res = []\n    while len(heap) > 1:\n        count += 1\n        x, y = heappop(heap), heappop(heap)\n        res.append((x[1]+1, y[1]+1))\n        if x[0] + 1 != 0:\n            heappush(heap, (x[0]+1, x[1]))\n        if y[0] + 1 != 0:\n            heappush(heap, (y[0]+1, y[1]))\n\n    print(count)\n\n    for i in range(count):\n        print(*res[i])",
                true
            ],
            [
                "from sys import stdin\nimport heapq\ninput = stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a = [[-a[i], i+1] for i in range(n) if a[i] != 0]\n    heapq.heapify(a)\n    \n    ans = []\n    while len(a) >= 2:\n        biggest = heapq.heappop(a)\n        second_biggest = heapq.heappop(a)\n        ans.append((biggest[1], second_biggest[1]))\n        biggest[0] += 1\n        if biggest[0] != 0:\n            heapq.heappush(a, biggest)\n        second_biggest[0] += 1\n        if second_biggest[0] != 0:\n            heapq.heappush(a, second_biggest)\n        \n    print(len(ans))\n    for v in ans:\n        print(*v)",
                true
            ],
            [
                "import heapq\nfrom sys import stdin\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, stdin.readline().split()))\n    a = [[-a[i], i+1] for i in range(n) if a[i] != 0]\n    meetings = []\n    heapq.heapify(a)\n\n    while len(a) >= 2:\n        largest, largestidx = heapq.heappop(a)\n        second, secondidx = heapq.heappop(a)\n\n        meetings.append((largestidx, secondidx))\n\n        largest += 1\n        second += 1\n\n        if largest != 0:\n            heapq.heappush(a, [largest, largestidx])\n        if second != 0:\n            heapq.heappush(a, [second, secondidx])\n\n    print(len(meetings))\n    for i, j in meetings:\n        print(i, j)",
                true
            ],
            [
                "inf = float('inf')\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\nimport array\n\n# sys.setrecursionlimit(10 ** 9)\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef maps(): return [int(i) for i in input().split()]\n\n\nlogging.basicConfig(\n    format=\"%(message)s\",\n    level=logging.WARNING,\n)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n# 2559\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\n\nfrom heapq import heapify, heappop, heappush\n\nfor _ in range(*maps()):\n    n, = maps()\n    a = [*maps()]\n    h = []\n    for i, j in enumerate(a):\n        h.append((-j, i + 1))\n    heapify(h)\n    ans = []\n    while h:\n        x, i = heappop(h)\n        y, ii = heappop(h)\n        if x == 0 or y == 0:\n            break\n        heappush(h, (x + 1, i))\n        heappush(h, (y + 1, ii))\n        ans.append((i, ii))\n    print(len(ans))\n    [print(*i) for i in ans]\n",
                true
            ],
            [
                "import sys\nimport collections as cc\nimport heapq as hp\ninput = sys.stdin.readline\nI = lambda :list(map(int,input().split()))\ndef heap_remove(heap, value):\n  tombstones[value] = tombstones.get(value, 0) + 1\n  while len(heap) and heap[0] in tombstones and tombstones[heap[0]]:\n      heappop(heap)\nfor tc in range(int(input())):\n    n, = I()\n    ar = I()\n    mx = []\n    for i in range(n):\n        if ar[i]>0:\n            hp.heappush(mx,[-ar[i],i])\n    ans=0\n    temp = []\n    while len(mx)>1:\n        #print(mx)\n        l = hp.heappop(mx)\n        r = hp.heappop(mx)\n        l[0] = l[0]*-1\n        r[0] = r[0]*-1\n        #print(l[0],r[0],l[0]-1,r[0]-1)\n        temp.append([l[1]+1,r[1]+1])\n        l[0]-=1\n        r[0]-=1\n        ans+=1\n        if l[0]>0:\n            hp.heappush(mx,[-(l[0]),l[1]])\n        if r[0]>0:\n            hp.heappush(mx,[-(r[0]),r[1]])\n        #print(mx)\n        #print()\n\n    print(ans)\n    for i in temp:\n        print(*i)\n\n",
                true
            ],
            [
                "import math\nfrom collections import Counter, defaultdict\nfrom functools import lru_cache\nfrom queue import PriorityQueue\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    q = PriorityQueue()\n    for i in range(n):\n        if arr[i] > 0:\n            q.put((-arr[i], i))\n    count = 0\n    ans = []\n    while not q.empty():\n        temp1, ind1 = q.get()\n        temp1 *= -1\n        # print(temp1, ind1)\n        if not q.empty():\n            temp2, ind2 = q.get()\n            temp2 *= -1\n            count += 1\n            ans.append([ind1 + 1, ind2 + 1])\n            if temp1 - 1 > 0:\n                q.put((-(temp1 - 1), ind1))\n            if temp2 - 1 > 0:\n                q.put((-(temp2 - 1), ind2))\n        else:\n            break\n    print(count)\n    for i in ans:\n        l, r = i\n        print(l, r)\n",
                true
            ],
            [
                "from heapq import heappush, heappop\n\ndef solve(nums, N):\n    h = []\n    for i, num in enumerate(nums):\n        if num == 0: continue\n        heappush(h, (-num, i+1))\n    \n    k, pairs = 0, []\n    while len(h) >= 2:\n        n1, i1 = heappop(h)\n        n2, i2 = heappop(h)\n        pairs.append((i1, i2))\n        k += 1\n        if n1 < -1: heappush(h, (n1+1, i1))\n        if n2 < -1: heappush(h, (n2+1, i2))\n    return k, pairs\n\n    \n \ndef main():\n    from sys import stdin\n    \n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        N = int(stdin.readline().strip())\n        nums = list(map(int, stdin.readline().strip().split()))\n        k, pairs = solve(nums, N)\n        print(k)\n        for i,j in pairs:\n            print(f'{i} {j}')\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "import heapq        \n\nfrom queue import PriorityQueue as PQ\n\n\nn=int(input())\nfor i in range(n):\n    pq=PQ()\n    ans=0\n    length=int(input())\n    data=list(map(int,input().split()))\n    for j in range(length):\n        if data[j]!=0:\n            pq.put((-data[j],j+1))\n    ans=[]\n    count=0\n    while pq.qsize()>1:\n        a=pq.get()\n        b=pq.get()\n        count+=1\n        ans.append((a[1],b[1]))\n        if b[0]!=-1:\n            pq.put((b[0]+1,b[1]))\n        if a[0]!=-1:\n            pq.put((a[0]+1,a[1]))\n    print(count)\n    for i in ans:\n        print(i[0],i[1])\n",
                true
            ],
            [
                "import sys,math,itertools\nfrom collections import Counter,deque,defaultdict\nfrom bisect import bisect_left,bisect_right \nfrom heapq import heappop,heappush,heapify\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\ndef inpl_1(): return list(map(lambda x:int(x)-1, sys.stdin.readline().split()))\ndef inps(): return sys.stdin.readline()\ndef inpsl(x): tmp = sys.stdin.readline(); return list(tmp[:x])\ndef err(x): print(x); exit()\n\nfor _ in range(inp()):\n    n = inp()\n    a = inpl()\n    q = []\n    for i,x in enumerate(a):\n        if x==0: continue\n        heappush(q,(-x,i))\n    res = []\n    while q:\n        ax,ai = heappop(q)\n        if not q: break\n        bx,bi = heappop(q)\n        res.append((ai+1,bi+1))\n        ax += 1; bx += 1\n        if ax:\n            heappush(q,(ax,ai))\n        if bx:\n            heappush(q,(bx,bi))\n    print(len(res))\n    for x in res:\n        print(*x)\n    ",
                true
            ],
            [
                "# This code is contributed by Siddharth\n\n\nfrom sys import *\ninput = stdin.readline\n\n\n\nimport threading\nfrom bisect import *\nimport math\nfrom collections import *\nimport operator\nfrom heapq import *\nfrom itertools import *\ninf=10**19\nmod=10**9+9\nMOD=998244353\nS1 = 'abcdefghijklmnopqrstuvwxyz'\nS2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ndrow = [0, 1, 0, -1]\ndcol = [-1, 0, 1, 0]\n# inverse modulo power pow(a,-1,mod) - it only works on py 3.8 ( *not in pypy )\nsetrecursionlimit(200005)\ndef asc(c):\n    return ord(c)-97+1\n\n\n\n# ==========================================> Code Starts Here <=====================================================================)\n\n\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    for i in range(n):\n        a[i]=(-1*a[i],i+1)\n    heapify(a)\n    ans=[]\n    while len(a)>1:\n        temp1=heappop(a)\n        temp2=heappop(a)\n        if temp1[0]==0:\n            continue\n        elif temp2[0]==0:\n            heappush(a,temp1)\n        else:\n            ans.append((temp1[1],temp2[1]))\n            heappush(a,((abs(temp1[0])-1)*-1,temp1[1]))\n            heappush(a,((abs(temp2[0])-1)*-1,temp2[1]))\n    print(len(ans))\n    for i in ans:\n        print(*i)\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "from heapq import heappush, heappop\ndef mgc(a,n):\n  mp = {}\n  h = []\n  tot = 0\n  ans = []\n  for i in range(n):\n    heappush(h,[-a[i],i+1])\n  while True:\n    first_person= heappop(h)\n    second_person = heappop(h)\n    if second_person[0]==0:\n      break\n    first_person[0]+=1\n    second_person[0]+=1\n    ans.append([first_person[1],second_person[1]])\n    heappush(h,first_person)\n    heappush(h,second_person)\n  print(len(ans))\n  for i in ans:\n    print(*i)\n\n\n\n\nfor _ in range(int(input())):\n  n = int(input())\n  a = list(map(int,input().split()))\n  mgc(a,n)",
                true
            ],
            [
                "import queue\nt = int(input())\n \nfor i in range(t):\n    ans = []\n    n = int(input())\n    talk = list(map(int, input().split()))\n    q = queue.PriorityQueue()\n    for i in range(len(talk)):\n        if talk[i] != 0:\n            q.put([-1*talk[i], i])\n    while len(q.queue) >1:\n        a = q.get()\n        b = q.get()\n        a[0] += 1\n        b[0] += 1\n        ans.append([a[1]+1, b[1]+1])\n        if a[0] !=0:\n            q.put(a)\n        if b[0] !=0:\n            q.put(b)\n    print(len(ans))\n    for i in ans:\n        print(*i)",
                true
            ],
            [
                "import heapq\nfor ik in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a=[(-a[i],i) for i in range(n)]\n    heapq.heapify(a)\n    ans=[]\n    while(True):\n        q=heapq.heappop(a)\n        q1=heapq.heappop(a)\n        if q[0]==0 or q1[0]==0:\n            break\n        ans.append((q[1]+1,q1[1]+1))\n        heapq.heappush(a,(q[0]+1,q[1]))\n        heapq.heappush(a,(q1[0]+1, q1[1]))\n    print(len(ans))\n    for i in ans:\n        print(*i)",
                true
            ],
            [
                "import sys\nfrom math import sqrt,ceil,floor,gcd\nfrom collections import Counter\nimport heapq\n\ninput = lambda:sys.stdin.readline()\n\ndef int_arr(): return list(map(int,input().split()))\ndef str_arr(): return list(map(str,input().split()))\ndef get_str(): return map(str,input().split())\ndef get_int(): return map(int,input().split())\ndef get_flo(): return map(float,input().split())\ndef lcm(a,b): return (a*b) // gcd(a,b)\n\nmod = 1000000007\n\ndef solve(n,arr):\n    out = []\n    for i in range(n):\n        if arr[i] > 0:\n            out.append([-arr[i],i])\n\n    heapq.heapify(out)\n    c = 0\n    ans = []\n    while len(out) > 1:\n        x = heapq.heappop(out)\n        y = heapq.heappop(out)\n        c += 1\n        x[0] += 1;y[0] += 1\n        ans.append([x[1]+1,y[1]+1])\n\n        if x[0] < 0:\n            heapq.heappush(out,x)\n\n        if y[0] < 0:\n            heapq.heappush(out,y)\n\n    print(c)\n    for i in ans:\n        print(*i)\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    solve(n,arr) ",
                true
            ],
            [
                "from heapq import heapify,heappop,heappush\ndef f():\n    n=int(input())\n    l=list(map(int,input().split()))\n    m=[]\n    for i,x in enumerate(l):\n        if x!=0:\n            m.append((-x,i+1))\n    heapify(m)\n    c=0\n    t=[]\n    while len(m)>1:\n        a,b=heappop(m)\n        x,y=heappop(m)\n        c+=1\n        t.append([b,y])\n        a+=1\n        x+=1\n        if a!=0:\n            heappush(m,(a,b))\n        if x!=0:\n            heappush(m,(x,y))\n    print(len(t))\n    for i in t:\n        print(*i)\n    \nfor _ in range(int(input())):\n    f()",
                true
            ],
            [
                "import sys\nimport bisect\nfrom heapq import heappop, heappush\n# from queue import PriorityQueue\ninput = sys.stdin.readline\n_ = 1\n_ = int(input())\nwhile _ > 0:\n    _ -= 1\n\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    l1 = []\n    ans = []\n\n    for x in range(n):\n        if l[x] > 0:\n            heappush(l1, (-l[x], x+1))\n    # l1.sort()\n    # print(l1)\n\n    while len(l1) > 1:\n        ele1, r1 = heappop(l1)\n        ele2, r2 = heappop(l1)\n        ans.append((r1, r2))\n        ele1 *= -1\n        ele1 -= 1\n        ele2 *= -1\n        ele2 -= 1\n        if ele1>0:\n            heappush(l1, (-ele1, r1))\n        if ele2 >0 :\n            heappush(l1, (-ele2, r2))\n    print(len(ans))\n    # print(ans)\n    for x in ans:\n        print(f\"{x[0]} {x[1]}\")\n    # print()\n",
                true
            ],
            [
                "import heapq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    people = list(map(int,input().split()))\n    \n    h = []\n    for i in range(n):\n        if people[i]!=0:\n            heapq.heappush(h,[-people[i],i])\n    ans = []\n    while len(h)>1:\n        a = heapq.heappop(h)\n        b = heapq.heappop(h)\n        a[0] = a[0]+1\n        b[0] = b[0]+1\n        if a[0]!=0:\n            heapq.heappush(h,a)\n        if b[0]!=0:\n            heapq.heappush(h,b)\n        ans.append([a[1]+1,b[1]+1])\n        \n    print(len(ans))\n    for r in ans:\n        print(*r)",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nAndi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n\nNote\n\nThe following illustrates the first example.\n\n<image>\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "from sys import stdin\n\ndef main():\n    input = stdin.readline\n    n,m = [int(i) for i in input().split()]\n    words = [(input(), i) for i in range(n)]\n    words.sort(key=lambda x: tuple(-ord(x[0][i]) if i&1 else ord(x[0][i]) for i in range(len(x[0]))))\n    print(\" \".join(map(str, [i[1]+1 for i in words])))\n\n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "l0 = [chr(x) for x in range(65, 91)]\nl1 = reversed(l0)\ndic = dict(zip(l0, l1))\na, b = map(int, input().split())\nl2 = []\nfor _ in range(a):\n    s = list(input())\n    for i in range(1, b, 2):\n        s[i] = dic[s[i]]\n    l2.append(''.join(s))\nl3 = sorted(range(a), key=lambda x: l2[x])\nprint(*[i+1 for i in l3])\n",
                true
            ],
            [
                "n, m = list(map(int, input().split()))\nl = []\nfor _ in range(n):\n    book = list(input())\n    book[1::2]= map(lambda x : chr(155-ord(x) ), book[1::2])\n    l.append(book)\n \nprint(*sorted(range(1, n+1), key = lambda x : l[x-1]))",
                true
            ],
            [
                "import sys\n\npl=1\nsys.setrecursionlimit(10**5)\nif pl:\n    input=sys.stdin.readline\nelse:    \n    sys.stdin=open('input.txt', 'r')\n    sys.stdout=open('outpt.txt','w')\n\ndef li():\n    return [int(xxx) for xxx in input().split()]\ndef fi():\n    return int(input())\ndef si():\n    return list(input().rstrip())    \ndef mi():\n    return     map(int,input().split())    \ndef ff():\n    sys.stdout.flush()\ndef google(tc,*ans):\n    print(\"Case #\"+str(tc)+\":\",*ans)    \ndef bits(i,n):\n    p=bin(i)[2:]\n    return (n-len(p))*\"0\"+p            \n\nt=1\nf=t    \nmod=10**9+7    \n\n\nwhile t:\n    t-=1\n    n,m=mi()\n    a=[]\n    for i in range(n):\n        s=si()\n        p=\"\"\n        for j in range(m):\n            if j%2==0:\n                p+=s[j]\n            else:\n                w=ord(s[j])-ord('a')\n                p+=chr(ord('a')+25-w)\n        a.append([p,i+1])\n    a.sort()\n    for i in a:\n        print(i[1],end=\" \")                        \n",
                true
            ],
            [
                "def main():\n    \n    lista = []\n    line, lenght = input().split()\n    line = int(line)\n    lenght = int(lenght)\n    dicio: dict = {}\n    \n    for i in range(line):    \n        text = input()\n        dicio[text] = i+1\n        lista.append(text)\n    \n    for i in range (lenght - 1, -1 , -1):\n        \n        if (i + 1) % 2 != 0:\n            lista.sort(key=lambda x: x[i])\n        \n        else:\n            lista.sort(key=lambda x: x[i], reverse=True)\n    \n    for word in lista:\n        print(dicio[word], end=' ')\n    \nif __name__ == '__main__':\n    main()\n                                                                          ",
                true
            ],
            [
                "# import functools\n# def customSort(aa,bb):\n#     a = aa[1]\n#     b = bb[1]\n#     for i in range(len(a)):\n#         if a[i] == b[i]:\n#             continue\n#         if (i+1) % 2 != 0:\n#             if a[i] < b[i]:\n#                 return -1\n#             return 1\n#         else:\n#             if a[i] > b[i]:\n#                 return -1\n#             return 1\n#     return 0\n\n# n, m =[int(x) for x in input().strip().split()]\n# strings = [\"\"]*n\n# for i in range(n):\n#     strings[i] = (i+1, input().rstrip())\n\n# strings.sort(key = functools.cmp_to_key(customSort))\n# print(' '.join([str(x[0]) for x in strings]))\n\nn, m =[int(x) for x in input().strip().split()]\n\ndef encode(x):\n    accum = 1\n    res = 0\n    base_A = ord('A')\n    base_Z = ord('Z')\n    for idx in range(m,0,-1):\n        c = x[idx-1]\n        if idx % 2 != 0:\n            res += (ord(c) - base_A)*accum\n        else:\n            res += (base_Z - ord(c) )*accum\n        accum *= 26\n    return res\n\n\nstrings = [[0,0] for _ in range(n)]\nfor i in range(n):\n    x = input().rstrip()\n    strings[i] = (i+1, encode(x))\n\nstrings.sort(key=lambda x: x[1])\nprint(' '.join([str(x[0]) for x in strings]))",
                true
            ],
            [
                "n , m = map(int, input().split())\nc = lambda x : chr(ord(\"Z\")-ord(x)+ord(\"A\"))\np = lambda x, ind: x if ind%2==0 else c(x)\nfor_sort = lambda x: x[1]\nlam = lambda x,i: [i+1,[p(x[j],j) for j in range(m)]]\nprint(*[i[0] for i in sorted([(lam(input(),i)) for i in range(n)], key=for_sort)])",
                true
            ],
            [
                "\n\n\n\nn,m = list(map(int,input().split()))\narr = []\nfor i in range(n):\n    arr.append([list(input()),i+1])\n#print(arr)\nalps = list(map(chr, range(65, 91)))\nd = {}\nfor a in range(len(alps)):\n    d[alps[a]] = alps[len(alps)-1-a]\n#print(d)\n#print(arr[1][0][1])\n\nfor i in range(n):\n    for j in range(m):\n        if j%2:\n            arr[i][0][j] = d[arr[i][0][j]]\n\narr.sort()\nfor i in range(n):\n    print(arr[i][1],end = \" \")\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "if __name__ == \"__main__\":\n    n, m = input().split(\" \")\n    n = int(n)\n    m = int(m)\n    \n    strings = []\n    str_idxs = {}\n    sol = []\n    \n    for i in range(n):\n        string = input()\n        s = [None] * m\n        for j in range(1, m, 2):\n            c = ord(string[j]) - ord(\"A\")\n            s[j] = chr(ord(\"A\") + (25 - c))\n        for j, letter in enumerate(s):\n            if letter == None:\n                s[j] = string[j]  \n        aux = \"\"\n        new_s = aux.join(s)\n        str_idxs[new_s] = i + 1\n        sol.append(new_s)\n            \n    sol.sort()\n    for i in range(n):\n         print(str_idxs[sol[i]], end=\" \")\n                                                                                    ",
                true
            ],
            [
                "n,m=map(int,input().split())\nl=[(lambda x:[i+1,[x[j]if j%2==0 else chr(155-ord(x[j]))for j in range(m)]])(input())for i in range(n)]\nprint(*[i[0]for i in sorted(l,key=lambda x:x[1])])",
                true
            ],
            [
                "n , m = map(int, input().split())\n\nl = [(lambda x: [i+1,[x[j] if j%2==0 else chr(ord(\"Z\")-ord(x[j])+ord(\"A\")) for j in range(m)]])(input()) for i in range(n)]\nprint(*[i[0] for i in sorted(l, key=lambda x: x[1])])",
                true
            ],
            [
                "l0 = [chr(x) for x in range(65, 91)]\nl1 = reversed(l0)\ndic = dict(zip(l0, l1))\na, b = map(int, input().split())\nl2 = []\nfor _ in range(a):\n    s = list(input())\n    for i in range(1, b, 2):\n        s[i] = dic[s[i]]\n    l2.append(''.join(s))\nl3 = sorted(range(a), key=lambda x: l2[x])\nfor i in range(a):\n    l3[i] += 1\nprint(*l3)\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nBerland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\n\n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for i in range(int(input())):\n    n, p, s = int(input()), [int(i) for i in input().split()], input()\n    p = sorted(zip(s, p, range(n)))\n    w = [0] * n\n    for i in range(n):\n        w[p[i][2]] = i + 1\n    print(*w)\n    zip()",
                true
            ],
            [
                "from sys import stdin\n\nfor _ in range(int(stdin.readline())):\n    n=int(stdin.readline())\n    arr=list(map(int,stdin.readline().split()))\n    s=input()\n    d={} \n    for i in range(n):\n        d[arr[i]]=i+1 \n    z=[] \n    o=[]\n    for i in range(n):\n        if s[i]==\"0\":\n            z.append(i)\n        else:\n            o.append(i)\n    z.sort(key=lambda x:arr[x])\n    o.sort(key=lambda x:arr[x])\n    ans=[0 for i in range(n)]\n    k=1\n    for i in z:\n        ans[i]=k\n        k+=1\n    for i in o:\n        ans[i]=k \n        k+=1\n    if z==[] or o==[]:\n        print(*arr)\n    else:\n        print(*ans)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    n = int(input())\n    rankings = [int(x) for x in input().split()]\n    feedback = [int(x) for x in input().strip()] # 0 for bad, 1 for good\n    \n    # print(n)\n    # print(rankings)\n    # print(feedback)\n    # print()\n    \n    goods = []\n    bads = []\n    for rank, fb, i in zip(rankings, feedback, range(n)):\n        if fb:\n            goods += [(rank,i)]\n        else:\n            bads += [(rank,i)]\n    \n    arr = sorted(bads) + sorted(goods)\n    # print(arr)\n    ans = [None for _ in range(n)]\n    for i, (_, old_i) in enumerate(arr):\n        ans[old_i] = i+1\n    print(*ans)\n    # get new rankings \n    # ",
                true
            ],
            [
                "for i in range(int(input())):\n  N = int(input())\n  P = list(map(int, input().split()))\n  S = input()\n  G = 1\n  B = 1\n  L = []\n  for j in range(N):\n    if S[j] == '0':\n      B += 1\n    L.append((P[j], j))\n\n  k = 1\n  g = B\n  L.sort()\n  ans = [-1] * N\n  for j in range(N):\n    if S[L[j][1]] == '0':\n      ans[L[j][1]] = k\n      k += 1\n    else:\n      ans[L[j][1]] = g\n      g += 1\n  print(*ans)\n",
                true
            ],
            [
                "from math import *\n\n#from math import factorial as fact, comb as ncr \nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\n\nfrom array import array\nfrom re import search\n\ninp=lambda : int(input())\nli=lambda : list(map(int,input().split()))\nls=lambda : list(input())\narr=lambda a: array('i',a)\nbi=lambda n: bin(n).replace(\"0b\", \"\")\nyn=lambda f: print('NYOE S'[f::2])\nsbstr=lambda a,s: search('.*'.join(a),s)\n\n\n'''def isprime(a):\n    if a==2: return True\n    elif a%2==0: return False\n    n=3\n    while n<=a**0.5:\n        if a%n==0:\n            return False\n        n+=2\n    return True\n'''\n'''def nf(n,a):\n    b=a*a\n    c=b*a\n    d=c*a\n    e=n\n    ct=0\n    while e%a==0:\n        if e%d==0:\n            ct+=4\n            e=e//d\n        if e%c==0:\n            ct+=3\n            e=e//c\n        if e%b==0:\n            ct+=2\n            e=e//b\n        if e%a==0:\n            ct+=1\n            e=e//a\n    return ct\n'''\n\n\ndef solve():\n    for _ in range(inp()):\n        n=inp()\n        p=li()\n        s=input()\n        d=sorted([[p[i],i] for i in range(n) if s[i]=='0'])\n        l=sorted([[p[i],i] for i in range(n) if s[i]=='1'])\n        ans=[0]*n\n        for i in range(len(d)):\n            ans[d[i][1]]=i+1\n        for i in range(len(l)):\n            ans[l[i][1]]=i+1+len(d)\n        print(*ans)\n\nsolve()",
                true
            ],
            [
                "\nfrom sys import stdin,stdout,setrecursionlimit\n\n\nt = 1\nt = int(stdin.readline())\n\nfor _ in range(t):\n    n = int(stdin.readline())\n    #s = stdin.readline().strip('\\n')\n    p = list(map(int, stdin.readline().rstrip().split()))\n    s = stdin.readline().strip('\\n')\n    tmp = [int(i) for i in s]\n    s = tmp\n    \n    d = {}\n    l = {}\n    arr_d = []\n    arr_l = []\n    for i in range(n):\n        if s[i]==1:\n            d[p[i]] = i\n            arr_d.append((p[i],i))\n        else:\n            l[p[i]] = i\n            arr_l.append((p[i],i))\n    ln = len(l)\n    arr_d.sort()\n    arr_l.sort()\n    ans = [-1]*n\n    c = 1\n    for i in arr_l:\n        ans[i[1]] = c\n        c += 1\n    for i in arr_d:\n        ans[i[1]] = c\n        c += 1\n    print(*ans)\n    # a = []\n    # b = []\n    # for i in range(n):\n    #     if p[i]>mi and p[i]<mx:\n    #         if s[i] == 0:\n    #             a.append([p[i],i])\n    #         else:\n    #             b.append([p[i],i])\n    # a.sort()\n    # b.sort()\n    # print(a)\n    # print(b)\n    # print(len(a),len(b))\n            \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
                true
            ],
            [
                "T = int(input())\nfor testcase in range(1,T+1):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = list(input())\n    q = [0 for i in range(n)]\n    newvalue = [int(s[k])*(n+1)+p[k] for k in range(n)]\n    enum = list(enumerate(newvalue))\n    mylist = sorted(enum, key=lambda x: x[1])\n    for i,value in enumerate(mylist):\n        q[value[0]] = i+1\n    print(*q)\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    ar=list(map(int,input().split()))\n    s=input()\n    ar_zip=sorted(zip(s,ar,range(n)))\n    list1=[0]*n\n    for i in range(n):\n        list1[ar_zip[i][2]]=i+1\n    print(*list1)",
                true
            ],
            [
                "\nimport bisect\n\nmod = 10 ** 9 + 7\neps = 10 ** -9\n\n\ndef __gcd(a, b):\n    return a if b == 0 else __gcd(b, a % b)\n    \n\ndef __lcm(a, b):\n    return a * b / __gcd(a, b)\n\n\ndef __fact(n):\n    return 1 if n == 1 else n * __fact(n - 1)\n\n\ndef __mex(a):\n    mex = 0\n    a.sort()\n    for x in a:\n        if x <= mex:\n            mex += 1\n        else:\n            break\n    return mex\n\ndef __dist(x1, y1, x2, y2):\n    return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\ndef __getprimes(n):\n    isprime = [True for i in range(n + 1)]\n    primes = []\n     \n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i * i, n + 1, i):\n                isprime[j] = False\n    for i in range(2, n + 1):\n        if isprime[i]:\n            primes.append(i)\n    return primes\n\ndef __modInverse(a, m):\n    \n    m0 = m\n    y = 0\n    x = 1\n    if (m == 1):\n        return 0\n    \n    while(a > 1):\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = y\n        y = x - q * y\n        x = t\n    if (x < 0):\n        x = x + m0\n    return x\n    \n    \n    \ndef __isprime(n):\n    if n < 2:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n    \ndef __cntprimediv(n):\n    ret = 0\n    x = n\n    i = 2\n    while i * i <= x:\n        while n % i == 0:\n            n //= i\n            ret += 1\n        i += 1\n    if n > 1:\n        ret += 1\n    return ret\n    \ndef __primefactors(n):\n    ret = []\n    x = n\n    i = 2\n    while i * i <= x:\n        while n % i == 0:\n            ret.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        ret.append(n)\n    return ret\n    \n\ndef __sumdigit(n):\n    ret = 0\n    while n > 0:\n        ret += n % 10\n        n //= 10\n    return ret\n\ndef __zfunc(s):\n    n = len(s)\n    z = [0 for i in range(n)]\n    l = 0\n    r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 1\n    return z\n    \n    \ndef __to(n, x):\n    ret = ''\n    while n > 0:\n        q = n % x\n        if q < 10:\n            ret += str(q)\n        else:\n            ret += chr(q - 10 + ord('a'))\n        n //= x\n    return ret[::-1]\n    \n    \ndef solve(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    a = []\n    b = []\n    for i in range(n):\n        if s[i] == '1':\n            a.append([arr[i], i])\n        else:\n            b.append([arr[i], i])\n    ans = [0 for i in range(n)]\n    a.sort(reverse=True)\n    val = n\n    b.sort()\n    for x in a:\n        ans[x[1]] = val\n        val -= 1\n    val = 1\n    for x in b:\n        ans[x[1]] = val\n        val += 1\n    print(*ans)\n    \nt = 1\nt = int(input())\n\n\nfor i in range(t):\n    solve(i + 1)",
                true
            ],
            [
                "\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split())) \n        s = input()\n\n        ans = [-1 for _ in range(n)]\n        l = []\n        for i in range(n):\n            l.append([s[i], arr[i], i])\n\n        l = sorted(l)\n        for i in range(n):\n            ans[l[i][2]] = i + 1\n\n        print(\" \".join(list(map(str, ans))))\n\n\nsolve()",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    s = list(input().rstrip())\n\n    like = []\n    dislike = []\n\n    for i in range(n):\n        if s[i] == '1':\n            like.append([arr[i],0])\n        else:\n            dislike.append([arr[i],0])\n\n    like.sort()\n    dislike.sort()\n\n    for i in range(1,len(dislike)+1):\n        dislike[i-1][1] = i\n    \n    for i in range(1,len(like)+1):\n        like[i-1][1] = i+len(dislike)\n\n    dic = {}\n\n    for i,j in dislike:\n        dic[i] = j\n    for i,j in like:\n        dic[i] = j\n    \n    ans = [dic[arr[i]]for i in range(n)]\n    print(' '.join(map(str,ans)))",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    j = int(input())\n    arr = [int(i) for i in input().split()]\n    s = [int(i) for i in list(input())]\n    oks = s.count(1)\n    res = [0 for i in range(j)]\n    ups = {}\n    downs = {}\n    for k in range(len(s)):\n        if s[k]:\n            ups[k] = arr[k]\n        else:\n            downs[k] = arr[k]\n    ups = dict(sorted(ups.items(), key=lambda item: item[1]))\n    downs = dict(sorted(downs.items(), key=lambda item: item[1]))\n    o = 1\n    for k,v in downs.items():\n        res[k] = o\n        o+=1\n    for k,v in ups.items():\n        res[k] = o\n        o+=1\n    print(\" \".join([str(i) for i in res]))",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int,input().split()))\n    s = input()\n    l = [[s[i], p[i], i] for i in range(n)]\n    l.sort()\n    q = [-1 for i in range(n)]\n    for i in range(n):\n        q[l[i][2]] = i + 1\n    print(*q)",
                true
            ],
            [
                "from math import ceil, log2, floor,sqrt,gcd\nfrom collections import defaultdict,deque\nfrom bisect import bisect_left\nimport sys\nimport os.path\nfrom itertools import permutations\nsys.setrecursionlimit(200000)\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r+\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\n\n# input = sys.stdin.readline\n# print=sys.stdout.write\ndef MI():\n    return map(int, input().split())\nmod=10**9+7\n\n\ndef solve(testcase):\n    # input()\n    n = int(input())\n    # l1,l2,l3=MI()\n    # n,k1=MI()\n    a=list(MI())\n    s=input()\n    d=defaultdict(list)\n    for i in range(n):\n        d[s[i]].append([a[i],i])\n    # print(d)\n    if len(d['0'])==0:\n        print(*a)\n    else:\n        st=len(d['0'])+1\n        liked=list(d['1'])\n        liked.sort()\n        disliked=list(d['0'])\n        disliked.sort()\n        ans=[0]*(n)\n        c=1\n        \n        for i in range(len(liked)):\n            ans[liked[i][1]]=st\n            st+=1\n        for i in range(len(disliked)):\n            ans[disliked[i][1]]=c\n            c+=1\n        print(*ans)\n        \n\n\n\n    \n    \n\n    \n\nt=int(input())\n# t=1\nfor _ in range(t):\n    solve(_+1)\n\n",
                true
            ],
            [
                "for t in range(int(input())):\n    n = int(input())\n    p = [int(s) for s in input().rstrip().split()]\n    vote = input().rstrip()\n    ls = []\n    for i in range(n):\n        ls.append([vote[i], p[i], i])\n    ls.sort(key=lambda v: (v[0], v[1]))\n    for i in range(n):\n        ls[i].append(i + 1)\n    ls.sort(key=lambda v: v[2])\n    print(' '.join([str(v[-1]) for v in ls]))\n",
                true
            ],
            [
                "import sys\nimport math\nfrom math import gcd,sqrt,log2,ceil,floor\nimport heapq as hq\nfrom bisect import bisect_right, bisect_left, bisect\nimport itertools\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\nfrom sys import stdin, stdout, setrecursionlimit\ndef isPowerOfTwo(x):\n    return (x and (not(x & (x - 1))))\nMOD = int(1e9) + 7\nalp = 'abcdefghijklmnopqrstuvwxyz'\nv = {'a':1, 'e':1, 'i':1, 'o':1, 'u':1}\nc = {}\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    # l,r = list(map(int, stdin.readline().rstrip().split()))\n    # digits = list(stdin.readline().strip('\\n'))\n    s = list(stdin.readline().strip('\\n'))\n    # b = list(stdin.readline().strip('\\n'))\n    # t = str(stdin.readline().strip('\\n'))\n    N = n\n    A = [0]*n\n    b = []\n    for i in range(n):\n        b.append([a[i], s[i], i])\n    b.sort()\n    for i in range(n-1,-1,-1):\n        if b[i][1] == '1':\n            A[b[i][2]] = N\n            N -= 1\n    for i in range(n-1,-1,-1):\n        if b[i][1] == '0':\n            A[b[i][2]] = N\n            N -= 1\n    print(*A)",
                true
            ],
            [
                "# '''\n#      |\\_/|                  \n#      | @ @   Woof! \n#      |   <>              _  \n#      |  _/\\------____ ((| |))\n#      |               `--' |   \n#  ____|_       ___|   |___.' \n# /_/_____/____/_______|\n# I am here to guard this code, woof!\n# '''\n\n\n\nimport sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\n \nint_max = float('inf')\nint_min = -(float('inf'))\nmod = 10**9 + 7\nANS = []\n# infile = open(sys.argv[1], \"r\")\n# input = infile.readline\ninput = stdin.readline\n \ndef solve():\n    pass\n \nt = int(input())\n# t = 1\n \nfor i in range(t):\n    n = int(input())\n    # n, k = map(int, input().split())\n    arr =  list(map(int, input().split()))\n    # arr = list(input())\n    s = input().strip()\n    ind = [0]*(n+1)\n    for i in range(n):\n        ind[arr[i]] = i + 1\n\n    lk = []\n    dk = []\n    for i in range(n):\n        if s[i] == \"0\":\n            dk.append(arr[i])\n        else:\n            lk.append(arr[i])\n    \n    lk.sort()\n    dk.sort()\n    # print(lk)\n    out = [0]*(n+1)\n    curr = 1\n    for i in dk:\n        out[ind[i]] = curr\n        curr += 1\n    \n    for i in lk:\n        out[ind[i]] = curr\n        curr += 1\n    \n    out.pop(0)\n    print(*out)\n\n    \n\n# print('\\n'.join(ANS))",
                true
            ],
            [
                "ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    rating = [int(c) for c in input()]\n    new_nums = [(rating[i], nums[i], i) for i in range(n)]\n    idx_map = {nums[i]: i for i in range(n)}\n    new_nums.sort()\n\n    i = 0\n    temp = [0]*n\n    for _, num, _ in new_nums:\n        temp[idx_map[num]] = i+1\n        i += 1\n    ans.append(temp)\nfor a in ans:\n    print(*a)\n    \n\n\n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    inra = list(map(int, input().split()))\n    pos = [0 for i in range(n+1)]\n    nera = [0 for i in range(n)]\n    bm = input()\n    o = []\n    z = []\n    for j in range(n):\n        pos[inra[j]] = j\n        if bm[j] == \"0\":\n            z.append(inra[j])\n        else:\n            o.append(inra[j])\n    z.sort()\n    o.sort()\n    x = 1\n    for j in z:\n        nera[pos[j]] = x\n        x += 1\n    for j in o:\n        nera[pos[j]] = x\n        x += 1\n    print(*nera)",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools,copy,random\nfrom functools import reduce \nimport operator\n \n\ninf = 10**9+7\nmod = (10**9+7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // math.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(20000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\n#0\ndef find(i) :\n    if par[i] != i : par[i] = find(par[i]);\n    return par[i]\ndef union(a, b) :\n    a = find(a)\n    b = find(b)\n    if a == b : return False\n    par[a] = b\n    return True\n#par = [i for i in range(n)]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    return graph\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\n \ndef initGrid(h,w):\n    for i in range(h):\n        s = S()\n        grid.append(list(s))\n    return grid\n \ndef soe(limit):\n    a = [True] * limit                          # Initialize the primality list\n    a[0] = a[1] = False\n \n    for (i, isprime) in enumerate(a):\n        if isprime:\n            yield i\n            for n in range(i*i, limit, i):     # Mark factors non-prime\n                a[n] = False\n    return a\n\n################## Main (Author - 9th) ################## \n\nfor _ in range(I()):\n    n = I()\n    a = LI()\n    b = S()\n    b = [int(i) for i in b]\n    newA = []\n    for i in range(n):\n        newA.append((a[i],b[i],i))\n    newA.sort()\n    ans = [0]*n\n    i = 0\n    cur = 1\n    while i < n:\n        if newA[i][1] == 0:\n            ans[newA[i][2]] = cur\n            cur+=1\n        i+=1\n    i = 0\n    while i < n:\n        if newA[i][1] == 1:\n            ans[newA[i][2]] = cur\n            cur+=1\n        i+=1\n       \n    print(*ans)\n\n\n  \n    \n",
                true
            ],
            [
                "def pl(line, func):\n    return [func(i) for i in line.split()]\n\nip = input \nn = int(ip())\nfor i in range(n):\n    song_cnt = int(ip())\n    songs = pl(ip(), int)\n    res = ip()\n    \n    order = sorted(range(song_cnt), key=lambda x: songs[x] + (res[x] == '1') * 2e6)\n    songs.sort()\n\n    ans = [-1] * song_cnt\n    for song_id, val in zip(order, songs):\n        ans[song_id] = val \n    \n    print(' '.join(str(i) for i in ans))\n    \n    \n    \n    \n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    s = input()\n    mx,mn,dict,c = [],[],{},1 \n    for i in range(n):\n        dict[arr[i]] = i\n        if s[i] == '0':\n            mn.append(arr[i])\n        else:\n            mx.append(arr[i])   \n    ans = [None for i in range(n)]                     \n    mx.sort()\n    mn.sort()\n    for i in range(len(mn)):\n        ans[dict[mn[i]]] = c\n        c+=1\n    for i in range(len(mx)):\n        ans[dict[mx[i]]] = c\n        c+=1  \n    print(*ans)       \n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    s = input()\n    l = sorted([[s[i], p[i], i] for i in range(n)])\n    q = [-1 for i in range(n)]\n    for i in range(n):\n        q[l[i][2]] = i + 1\n    print(*q)",
                true
            ],
            [
                "T = int(input())\n\ndef solve():\n    N = int(input())\n    P = list(map(int,input().split()))\n    S = input()\n\n    like = []\n    dislike = []\n\n    for i,c in enumerate(S):\n        if c == '0':\n            dislike.append((P[i],i))\n        else:\n            like.append((P[i],i))\n\n    like = sorted(like)\n    dislike = sorted(dislike)\n\n\n\n    ans = [None for _ in range(N)]\n\n    value = 0\n    for _, idx in dislike:\n        ans[idx] = str(value+1)\n        value += 1\n    for _, idx in like:\n        ans[idx] = str(value+1)\n        value += 1\n    print(\" \".join(ans))\n\nfor _ in range(T):\n    solve()\n\n",
                true
            ],
            [
                "from collections import defaultdict\n\n\nfor t in range(int(input())):\n\n    N = int(input())\n    arr = list(map(int,input().split()))\n    S = input()\n\n    ans = [-1 for i in range(N)]\n    num = 1\n    lk = []\n    dk = []\n\n    for i in range(N):\n\n        if S[i] == '0':\n            dk.append(arr[i])\n\n        else:\n            lk.append(arr[i])\n\n\n    lk.sort()\n    dk.sort()\n    D = defaultdict(int)\n\n    for i in dk:\n        D[i] = num\n        num += 1\n\n    for i in lk:\n        D[i] = num\n        num += 1\n\n    for i in range(N):\n\n        ans[i] = D[arr[i]]\n\n    print(*ans)\n\n",
                true
            ],
            [
                "from collections import *\nfor _ in range(int(input())):\n    n=int(input())\n    pi=list(map(int,input().split()))\n    s=str(input())\n    g=[]\n    l=[]\n    gg=defaultdict(int)\n    ll=defaultdict(int)\n    for i in range(n):\n        if s[i]==\"1\":\n            g.append(pi[i])\n        else:\n            l.append(pi[i])\n    g.sort()\n    l.sort()\n    v=1\n    for i in range(len(l)):\n        ll[l[i]]=v\n        v+=1\n    for i in range(len(g)):\n        ll[g[i]]=v\n        v+=1\n    ans=[]\n    for i in range(n):\n        ans.append(ll[pi[i]])\n    print(*ans)",
                true
            ],
            [
                "t = int(input())\n#import collections\n \nfor caseNr in range(1, t + 1):\n    n = int(input())\n    #n, k = list(map(int,input().split()))\n    parr = list(map(int, input().split()))\n    likes = str(input())\n    #arr = list(map(int, input().split()))\n    #n, a, b = list(map(int, input().split()))\n    #board1 = list(map(int, input().split()))\n    #board2 = list(map(int, input().split()))\n    #num = int(input())\n    #arr = list(input())\n    #print(arr)\n    #print(arr)\n    #print(arr[0:2])\n    \n    \n    positives = []\n    negatives = []\n    for i in range(n):\n        if likes[i] == '1':\n            positives.append([parr[i],i])\n        else:\n            negatives.append([parr[i],i])\n            \n    possibles = n-len(positives)\n    possibles = range(possibles+1,n+1)\n    possibles_n = range(1,n-len(positives)+1)       \n    \n    positives.sort()\n    negatives.sort()\n    \n    ans = [0]*n\n    \n    for j in range(len(positives)):\n        cur = positives[j]\n        ans[cur[1]] = possibles[j]\n\n    for k in range(n-len(positives)):\n        cur = negatives[k]\n        ans[cur[1]] = possibles_n[k]\n    \n    sum_ = 0\n    for i,a in enumerate(ans):\n        sum_ += abs(a-parr[i])\n    \n    print(*ans)\n            \n    \n    \n            \n            \n        \n        \n    \n    \n ",
                true
            ],
            [
                "t=int(input())\nwhile(t):\n    n=int(input())\n    A=list(map(int,input().split(\" \")))\n    s=str(input())\n    D={}\n    B,C=[],[]\n    for i in range(n):\n        D[A[i]]=i\n    for i in range(n):\n        if(s[i]=='1'):\n            B.append(A[i])\n        else:\n            C.append(A[i])\n    B.sort()\n    C.sort()\n    ans=[0]*n\n    m=len(B)\n    if(m==len(A)):\n        m=1\n    else:\n        m=n-m+1\n    for i in range(len(B)):\n        ans[D[B[i]]]=m\n        m=m+1\n    m=1\n    for i in range(len(C)):\n        ans[D[C[i]]]=m\n        m=m+1\n    print(*ans)\n    t=t-1",
                true
            ],
            [
                "def solution(n, ratings, likes):\n    ans = [0 for _ in ratings]\n    c = 1\n    posL = []\n    posR = []\n    for i, l in enumerate(likes):\n        if l == '0':\n            posL.append((i, ratings[i]))\n        else:\n            posR.append((i, ratings[i]))\n    \n    for idx, _ in sorted(posL, key=lambda x: x[1]):\n        ans[idx] = c\n        c += 1\n\n    for idx, _ in sorted(posR, key=lambda x: x[1]):\n        ans[idx] = c\n        c += 1\n    \n    return ans\n\nfor _ in range(int(input())):\n    n = int(input())\n    ratings = list(map(int, input().strip().split()))\n    likes = list(input().strip())\n\n    print(*solution(n, ratings, likes))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    p=list(map(int,input().split()))\n    s=input()\n    a=[]\n    b=[]\n    o=[-1]*n\n    for j in range(n):\n        o[p[j]-1]=j+1\n    for j in range(n):\n        if s[o[j]-1]==\"1\":\n            a.append(o[j])\n        else:\n            b.append(o[j])\n    z=[]\n    z+=b\n    z+=a\n    ans=[-1]*n\n    for j in range(n):\n        ans[z[j]-1]=j+1\n    print(*ans)\n",
                true
            ],
            [
                "\ndef do(p_arr, s_arr):\n    l = len(s_arr)\n    q_arr = [0]*l\n\n    ones_arr = [p_arr[i] for i in range(l) if s_arr[i]==1]\n    ones_index = [i for i in range(l) if s_arr[i]==1]\n    ones_total = [[ones_arr[i], ones_index[i]] for i in range(len(ones_arr))]\n    ones_total.sort()\n    ones_index = [i[1] for i in ones_total]\n\n    #bubbleSort(ones_arr, ones_index)\n\n\n    zeros_arr = [p_arr[i] for i in range(l) if s_arr[i] == 0]\n    zeros_index = [i for i in range(l) if s_arr[i] == 0]\n    zeros_total = [[zeros_arr[i], zeros_index[i]] for i in range(len(zeros_arr))]\n    #bubbleSort(zeros_arr, zeros_index)\n    zeros_total.sort()\n    zeros_index = [i[1] for i in zeros_total]\n\n    bigg = list(range(l-len(ones_arr)+1, l+1))\n    small = list(range(1, l - len(ones_arr) + 1))\n\n    for j in range(len(ones_arr)):\n        q_arr[ones_index[j]] = bigg[j]\n\n    for j in range(len(zeros_arr)):\n        q_arr[zeros_index[j]] = small[j]\n\n    print(*q_arr)\n\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p_arr = list(map(int, input().split()))\n    s_arr = input()\n    s_arr = [int(a) for a in s_arr]\n    do(p_arr,s_arr)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\nt = int(input())\n\nfor i in range(t):\n    s = int(input())\n    song = list(map(int, input().split()))\n    vote = input().rstrip()\n\n    like = []\n    dislike = []\n\n    for j in range(s):\n        if vote[j] == '1':\n            like.append([song[j] ,j])\n        else:\n            dislike.append([song[j], j])\n\n    like.sort(key = lambda x: -x[0])\n    dislike.sort(key = lambda x: -x[0])\n\n    result = [0] * s\n    num = s\n    for i in range(len(like)):\n        result[like[i][1]] = num\n        num -= 1\n    for i in range(len(dislike)):\n        result[dislike[i][1]] = num\n        num -= 1\n    print(' '.join(list(map(str, result))) + '\\n')",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split(\" \")]\n    s = input()\n    arr2 = [1]*n\n    zeros = s.count('0')\n    for i in range(n):\n        arr2[arr[i]-1] = i\n    ans = [1]*n\n    z = 0\n    o = 0\n    for i in range(n):\n        idx = arr2[i]\n        if s[idx] == '0':\n            ans[idx] = z + 1\n            z += 1\n        else:\n            ans[idx] = o+zeros+1\n            o += 1\n    print(*ans, sep=\" \")\n\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    p=list(map(int,input().split()))\n    s=input()\n    lst=[]\n    lstt=[]\n    for i in range(n):\n        if int(s[i])==1:\n            lstt.append([p[i],i])\n        else:\n            lst.append([p[i],i])\n    lst.sort()\n    lstt.sort()\n    lsttt=[]\n    for j in range(1,n+1):\n        if j<=len(lst):\n            lst[j-1][0]=j\n            lsttt.append([lst[j-1][1],lst[j-1][0]])\n        else:\n            \n            lstt[(j-len(lst))-1][0]=j\n            lsttt.append([lstt[(j-len(lst))-1][1],lstt[(j-len(lst))-1][0]])\n    lsttt.sort()\n    for i in range(n):\n        lsttt[i]=lsttt[i][1]\n    print(*lsttt)\n        \n            \n        \n        ",
                true
            ],
            [
                "import sys\nimport math\nfrom collections import deque,Counter\nfrom sys import stdin\n\n#sys.setrecursionlimit(10**7)\n\nint1=lambda x: int(x)-1\nstinput=lambda :stdin.readline()[:-1]\nii=lambda :int(stinput())\nmi=lambda :map(int, stdin.readline().split())\nli=lambda :list(mi())\nmi1=lambda :map(int1, stdin.readline().split())\nli1=lambda :list(mi1())\nmis=lambda :map(str, stdin.readline().split())\nlis=lambda :list(mis())\n\nfrom collections import defaultdict\n#d=defaultdict(int)\n#d=defaultdict(lambda:1)\n\nimport heapq\n#heapq.heapify(hq)\n#heapq.heappop(hq)\n#heapq.heappush(hq,1)\n\nmod=10**9+7\nMod=998244353\nINF=10**18\nans=0\n\nt=ii()\nfor _ in range(t):\n  n=ii()\n  p=li1()\n  s=input()\n  c1=[]\n  c0=[]\n  for i in range(n):\n    if s[i]=='0':\n      c0.append((p[i],i))\n    else:\n      c1.append((p[i],i))\n  ans=[0]*n\n  c0.sort()\n  c1.sort()\n  tmp=1\n  for x,y in c0:\n    ans[y]=tmp\n    tmp+=1\n  for x,y in c1:\n    ans[y]=tmp\n    tmp+=1\n  print(*ans)",
                true
            ],
            [
                "from sys import stdin, stdout\nfrom itertools import repeat\ndef solve(ab=abs):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(), repeat(10, n)))\n    s = stdin.readline().strip()\n    b = [(s[i], x, i) for i, x in enumerate(a)]\n    b.sort()\n    c = [0] * n\n    for i, x in enumerate(b):\n        c[x[2]] = i + 1\n    stdout.write(' '.join(map(str, c)))\n    stdout.write('\\n')\n\nT = int(stdin.readline())\nfor t in range(T):\n    solve()\n\n",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    b = sorted(zip(s, arr, range(n)))\n    ans = [0]*n\n    for i in range(n):\n        ans[b[i][2]] = i+1\n    return ans\n\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor i in range(t):\n    print(*solve())",
                true
            ],
            [
                "t=int(input())\nimport sys\nfor _ in range(t):\n    d=dict()\n    st1=[]\n    st2=[]\n    n=int(sys.stdin.readline())\n    m=list(map(int,sys.stdin.readline().split()))\n    s=sys.stdin.readline()\n    for i in range(n):\n        d[m[i]]=i\n    for i in range(n,0,-1):\n        if s[d[i]]=='1':\n            st1.append(d[i])\n        else:\n            st2.append(d[i])\n    score=n\n    ans=[0]*n\n    for i in range(len(st1)):\n        ans[st1[i]]=score\n        score-=1\n    for i in range(len(st2)):\n        ans[st2[i]]=score\n        score-=1\n    #print(st1,st2,d)\n    print(*ans)\n    #dif=0\n    #for i in range(len(ans)):\n    #    dif+=abs(ans[i]-\n            \n",
                true
            ],
            [
                "def solve(arr, n):\n    memo = {}\n    for i in range(len(arr)):\n        memo[arr[i]] = i\n    arr.sort()\n    ans = [0]*len(arr)\n    for i in range(len(arr)):\n        ans[memo[arr[i]]] = n\n        n += 1\n    return ans[::-1]\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = list(input())\n    zero = []\n    one = []\n    for i in range(n):\n        if s[i] == '1':\n            one.append(arr[i])\n        else:\n            zero.append(arr[i])\n    sol_zero = solve(zero, 1)\n    sol_one = solve(one, len(zero)+1)\n    # print(zero, sol_zero)\n    # print(one, sol_one)\n    sol = []\n    # print(s)\n    for i in s:\n        # print(sol_zero, sol_one)\n        if i == '1':\n            sol.append(sol_one.pop())\n        else:\n            sol.append(sol_zero.pop())\n    print(' '.join(list(map(str, sol))))\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [int(i) for i in input().split()]\n    s = str(input())\n    \n    temp = []\n\n    \n    disliked=[]\n    liked = []\n  \n    q=[0]*n\n    \n    for i in range(len(s)):\n        if s[i] == '1':\n            liked.append([p[i],i])\n        else:\n            disliked.append([p[i],i])\n    \n    liked.sort()\n    disliked.sort()\n    x=1\n\n    for element in disliked + liked:\n        q[element[1]] = x\n        x+=1\n        \n    print(*q)         \n\n            \n        \n    \n    \n\n            ",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\nsys.setrecursionlimit(3*10**5)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\ndef hnbhai(tc):\n    n=sb()\n    a=sd()\n    s=sa()\n    one=[]\n    zero=[]\n    for i in range(n):\n        if s[i]=='1':\n            one.append([a[i],i])\n        else:\n            zero.append([a[i],i])\n    one.sort()\n    zero.sort()\n    if len(one)==0 or len(zero)==0:\n        print(*a)\n        return\n    ans=[0]*n\n    strt=1\n    for i in range(len(zero)):\n        ans[zero[i][1]]=strt\n        strt+=1\n    for i in range(len(one)):\n        ans[one[i][1]]=strt\n        strt+=1\n    print(*ans)\n    return\nfor _ in range(sb()):\n    hnbhai(_+1)\n",
                true
            ],
            [
                "import math\n\n\n\nfor _ in range(int(input())):\n\n    n = int(input())\n    songs = list(map(int, input().split()))\n    ratings = input()\n\n    arr = []\n    # sort based on ratings\n    for i in range(n):\n        arr.append([ratings[i], songs[i], i])\n    arr.sort()\n\n    ans = [-1 for x in range(n)]\n    for i in range(n):\n        ans[arr[i][2]] = i + 1\n\n    print(*ans)\n\n",
                true
            ],
            [
                "sr=lambda: input()\nir=lambda: int(sr())\nlr=lambda: list(map(int, sr().split()))\n\n# dr=lambda: float(sr())\n# dlr=lambda: list(map(float, sr().split()))\n\ninf = 10**18\n# mod = 10**9+7\nmod = 998244353\n\nif __name__=='__main__':\n    test = ir()\n    for t in range(test):\n        n=ir()\n        a=lr()\n        s=sr()\n        song_score_rate = []\n        for i in range(n):\n            song_score_rate.append([i+1, a[i], int(s[i])])\n        song_score_rate.sort(key=lambda x:x[1])\n        ans1=[]\n        ans2=[]\n        for song, score, rate in song_score_rate:\n            if rate == 0:\n                ans1.append(song)\n            else:\n                ans2.append(song)\n        ans = [-1 for i in range(n)]\n        now = 1\n        for num in ans1:\n            ans[num-1] = now\n            now+=1\n        for num in ans2:\n            ans[num-1] = now\n            now+=1\n        print(*ans,sep=' ')",
                true
            ],
            [
                "t = int(input())\ndef sol(n, p, s):\n    res = p[::1]\n    sl = [int(x) for x in s]\n    disliked = n - sum(sl)\n    if disliked == 0:\n        return res\n    b, a = 1, disliked+1 \n    x = []\n    y = []\n    for i, v in enumerate(sl):\n        if v == 1:\n            x.append([i, p[i]])\n        else:\n            y.append([i, p[i]])\n    \n    x.sort(key=lambda num: num[1])\n    y.sort(key=lambda num: num[1])\n    # print(x, y)\n    for i in range(len(x)):\n        # x[i][1] = a\n        res[x[i][0]] = a\n        a += 1\n    for i in range(len(y)):\n        # y[i][1] = b \n        res[y[i][0]] = b\n        b += 1 \n    return res\n    \n        \n        \nwhile t:\n    t -= 1 \n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    \n    res = sol(n, p, s)\n    print(*res)\n                \n    ",
                true
            ],
            [
                "import sys\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    mas=list(map(int,sys.stdin.readline().split()))\n    s=sys.stdin.readline()\n    c=s.count('1')\n    if c<n:\n        masp=[0]*c\n        masn=[0]*(n-c)\n        a=0\n        b=0\n        for i in range(n):\n            if s[i]=='1':\n                masp[a]=[mas[i],i]\n                a+=1\n            else:\n                masn[b]=[mas[i],i]\n                b+=1\n        masp.sort(reverse=True)\n        masn.sort(reverse=True)\n        otv=[0]*n\n        a=n\n        b=n-c\n        for i in range(len(masp)):\n            #print(masp[i],a)\n            otv[masp[i][1]]=a\n            a-=1\n        for i in range(len(masn)):\n            otv[masn[i][1]]=b\n            b-=1\n        print(*otv)\n    else:\n        print(*mas)\n",
                true
            ],
            [
                "def solve(n, p, s):\n    idx = list(range(n))\n    idx.sort(key = lambda i: (s[i], p[i]))\n    ans = [0] * n\n    for i in range(n):\n        ans[idx[i]] = i + 1\n    return ans\n\ntests = int(input())\nfor test in range(tests):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    print(*solve(n, p, s))\n",
                true
            ],
            [
                "# cook your dish here\n# cook your dish here\n#-------------------imports-------#\nimport sys\nimport io,os\nimport string\nfrom io import BytesIO, IOBase\nfrom os import path\nfrom collections import Counter,OrderedDict\nimport itertools\n\nfrom itertools import chain, combinations\nimport math\nimport random\nimport bisect\nfrom functools import reduce\nfrom sys import stdin,stdout\nfrom collections import OrderedDict\nfrom math import gcd,floor,sqrt,log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl,bisect_right as br\n\n\n#------------------ONLINE JUDGE OR NOT-------#\n\nif(path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\",\"r\")\n    sys.stdout = open(\"output.txt\",\"w\")\nelse:\n    input = sys.stdin.readline\n    # input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\n\n\nsys.setrecursionlimit(100000000)\n\n\n\n#---------------------pre made and input functions-------#\nsimp    =lambda: int(input())\nstrng  =lambda: input().strip()\njn     =lambda x,l: x.join(map(str,l))\nstrl   =lambda: list(input().strip())\nmul    =lambda: map(int,input().strip().split())\nmulf   =lambda: map(float,input().strip().split())\nseq    =lambda: list(map(int,input().strip().split()))\nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\nflush  =lambda: stdout.flush()\nstdstr =lambda: stdin.readline()\nstdint =lambda: int(stdin.readline())\nstdpr  =lambda x: stdout.write(str(x))\n\n\n#------------functions---------------------\n\n#---------------------input-------\n\nn = simp()\n\n\ndef if_its_binaryform_palindrome(n):\n\n    res = 0\n\n    k = n\n    while k > 0:\n        #to finish the job\n        res = (res << 1) | (k & 1)\n        k = k >> 1  \n\n    return n == res\n\n\n\n\n\n\ndef solve(a,d):\n\n    dd = [0]*len(a)\n    rr = {}\n    s = {}\n    for j in range(len(d)):\n        if d[j]=='0':\n            rr[j] = a[j]\n        else:\n            s[j] = a[j]\n\n    i = 0\n    rrr = {k: v for k, v in sorted(rr.items(), key=lambda item: item[1])}\n    sss = {k: v for k, v in sorted(s.items(), key=lambda item: item[1])}\n    rr_r = {}\n    ss_s = {}\n\n    # print(sss)\n    while i < len(rr):\n        rr_r[i] = i+1\n        i+=1\n\n    j = 0\n        \n    while j<len(sss):\n\n        ss_s[i] = i+1\n\n        i+=1\n        j+=1 \n\n    # print(ss_s)         \n    # for i in range(len(rr)+1,len(s)+1):\n    #     ss_s[i] = i-1\n\n    # # print(rr_r)\n    # print(ss_s)     \n    zeroes = dict(zip(rrr.keys(), rr_r.values()))\n    first = dict(zip(sss.keys(), ss_s.values()))\n\n    # print(first)\n    \n    if len(zeroes)!=0:\n\n        for i,j in zeroes.items():\n            dd[i] = j\n    \n\n    if len(first)!=0:\n        for i,j in first.items():\n            dd[i] = j     \n\n    return dd    \n  \n\n                \n\n            \n\n\n    # i = 1\n    # r = len(d)\n    # rr = []\n    # j = 0\n    # while j<len(d):\n    #     if d[j]=='0':\n    #         rr.append(i)\n    #         i+=1\n    #     else:\n    #         rr.append(r)\n    #         r-=1\n    #     j+=1\n    # return rr            \n\n\n \n\nfor i in range(n):\n    d = simp()\n    a = seq()\n    r = strng()\n    # d = seq()\n    print(*solve(a,r))\n    # r = strng()\n    # t = strng()\n    # d = strng()\n    # t = seq()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef seive(n):\n    \"\"\" preprocessing  \"\"\"\n \n    prime = [1 for i in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n         \n        # this is prime number.\n        if (prime[p] == 1):\n             \n            # Update all multiples of p in array\n            for i in range(p ** 2, n + 1, p):\n                prime[i] = 0\n                \n        p += 1\n    prime[0]= 0\n    prime[1]= 0\n    \n    # print(prime)\n    for i in range(1,n+1):\n        prime[i] += prime[i-1]\n        \n    return prime\n\ndef list_of_prime_sieve(n):\n\n    #an array of True True\n    primes = [True]*(n+1)\n    #changing o and 1 to False\n    primes[0]==primes[1]==False\n\n    #now for every true we find\n    for i in range(2,int(n**(1/2))+1):\n        if primes[i]==True:\n            #we change their multiples to False\n            for j in  range(i*i,n+1,i):\n                primes[j]=False\n\n\n    list_primes = []\n    for i in range(2,len(primes)):\n        if primes[i]==True:\n            list_primes.append(i)\n\n    return list_primes\n\ndef count_primes(a):\n    return len(list_of_prime_sieve(a))    \n\n\ndef gcdoftwo(a,b):\n\n    #log(min(a,b))\n    if a == 0:\n        return b\n    else:\n        return gcdoftwo(b%a,a)\n\ndef lcm(a,b): return (a*b//(gcdoftwo(a,b)))        \n\ndef gcdofList(A): \n    res = A[0]\n    for c in A[1::]:\n        res = gcdoftwo(res , c) \n        if res == 1:\n            return res\n    return res         \n\ndef binpow(a,b):\n\n    #to calc a^b in log(n) time\n\n\n    res = 1\n\n\n    while b>0:\n\n        if b&1:\n            res = res*a\n        a = a*a\n        b>>=1\n    return res        \n\ndef fibo_in_logn(n):\n    if n == 0:\n        return [0, 1]\n\n    p = fibo_in_logn(n >> 1)\n    c = p.first * (2 * p.second - p.first)\n    d = p.first * p.first + p.second * p.second\n    if n & 1:\n        return {d, c + d}\n    else:\n        return {c, d}\n\n\n\n\n\ndef x_n_mod_m(a,b,m):\n\n    #to calculate x^n mod m\n\n    a  = a%m \n\n    res = 1\n    while b>0:\n        if b&1:\n            res = res*a%m \n        a = a*a%m\n        b>>=1\n\n    return res\n\n\n\n\ndef change_array(count,t):\n\n    emp = []\n    for i in range(len(t)):\n        emp.append(count[t[i]])\n    return emp    \n\n\n\n\n# prime = []\n\ndef simpleSieve(limit):\n\n    mark = [True for i in range(limit + 1)]\n    p = 2\n    while (p * p <= limit):\n        if (mark[p] == True):\n            for i in range(p * p, limit + 1, p):\n                mark[i] = False\n        p += 1\n    for p in range(2, limit):\n        if mark[p]:\n            prime.append(p)\n            # print(p,end = \" \")\n    return prime        \n\ndef segmentedSieve(n):\n    limit = int(math.floor(math.sqrt(n)) + 1)\n    t = []\n    t += simpleSieve(limit)\n\n    low = limit\n    high = limit * 2\n    while low < n:\n        if high >= n:\n            high = n\n\n        mark = [True for i in range(limit + 1)]\n\n        for i in range(len(prime)):\n\n            loLim = int(math.floor(low / prime[i]) *\n                                        prime[i])\n            if loLim < low:\n                loLim += prime[i]\n            for j in range(loLim, high, prime[i]):\n                mark[j - low] = False\n\n        # t = []        \n        for i in range(low, high):\n            if mark[i - low]:\n                t.append(i)\n                # print(i, end = \" \")\n\n        low = low + limit\n        high = high + limit\n\n    return t\n\n\n\n\nmod=1000000007\n\ndef occurrences(string, sub):\n    count = start = 0\n    while True:\n        start = string.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "for _ in range((int)(input())):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    s = input()\n    l = sorted([[s[i], p[i], i] for i in range(n)])\n    q = [-1 for i in range(n)]\n    for i in range(n):\n        q[l[i][2]] = i + 1\n    print(*q)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    arr=[int(i) for i in input().split()]\n    s=input()\n    l=[]\n    for i in range(len(s)):\n        l.append([arr[i],int(s[i]),i])\n    l.sort()\n    dic={0:[],1:[]}\n    for i in l:\n        dic[i[1]].append(i[2])\n    res=[0 for i in range(len(s))]\n    c=1\n    for i in dic[0]:\n        res[i]=c\n        c+=1\n    for i in dic[1]:\n        res[i]=c\n        c+=1\n    print(*res)\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int , input().split()))\n    s = input()\n    like = {}\n    dis = {}\n    for i in range(n):\n        if s[i]=='1':\n            like[arr[i]]=0\n        else:\n            dis[arr[i]]=0\n    k = len(dis)\n    k+=1\n    for e in sorted(like):\n        like[e]=k\n        k+=1\n    k = 1    \n    for e in sorted(dis):\n        dis[e]=k\n        k+=1\n        \n    for i in  range(n-1):\n        if s[i]=='1':\n            print(like[arr[i]] , end = \" \")\n        else:\n            print(dis[arr[i]] , end = \" \")\n    if s[-1] == '1':\n        print(like[arr[-1]])\n    else:\n        print(dis[arr[-1]])\n            \n            \n        \n        \n    ",
                true
            ],
            [
                "# cook your dish here\ndef func(n,s,p):\n    q = [0]*n \n    temp = []\n    for i in range(n):\n        temp.append([s[i],p[i],i])\n    temp = sorted(temp)\n    for i in range(n):\n        q[temp[i][2]]= (i+1)\n    print(*q)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(map(int,input().split()))\n    s = input()\n    func(n,s,p)\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n  N = int(input())\n  P = list(map(int,input().split()))\n  S = input()\n  \n  pos = [-1] * (N + 1)\n  lis_0 =  []\n  lis_1 = []\n  for i in range(N):\n    p = P[i]\n    pos[p] =  i\n    if S[i] == \"0\":\n      lis_0.append(p)\n    else:\n      lis_1.append(p)\n      \n  lis_0.sort()\n  lis_1.sort()\n  ans = [-1] * N\n  ct = 1\n  for p in lis_0:\n    i = pos[p]\n    ans[i]  = ct\n    ct += 1\n  for p in lis_1:\n    i = pos[p]\n    ans[i]  = ct\n    ct += 1\n    \n  print(*ans)\n  \n    \n    \n    \n           \n\n    ",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n    # x = str(input())\n    n = int(input())\n    # \u043d\u0430 \u0432\u0445\u043e\u0434 3 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 int\n    #a, b, c = map(int, input().split())\n    # \u0432\u0432\u043e\u0434 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443\n\n    y = []\n    z = []\n    a = [int(x) for x in input().split()]\n\n    for i in range(n):\n        y.append(0)\n        z.append(0)\n\n    for i in range(n):\n        z[a[i]-1] = i\n    s = str(input())\n    q = b = 0\n\n    for i in range(n):\n        if(s[i] == '1'):\n            q += 1\n            \n    b = n-q\n    t1 = 1\n    t2 = b+1\n\n    for i in range(n):\n        if(s[z[i]] == '0'):\n            y[z[i]] = t1\n            t1 += 1\n        else:\n            y[z[i]] = t2\n            t2 += 1\n\n    print(*y)\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    b = []\n    c = []\n    ans = [0] * n\n    val = 1\n    for i in range(n):\n        if s[i] == '0':\n            b.append([a[i], i])\n            c.append(val)\n            val += 1\n    b.sort()\n    for i in range(len(b)):\n        ans[b[i][1]] = c[i]\n\n    b = []\n    c = []\n    for i in range(n):\n        if s[i] == '1':\n            b.append([a[i], i])\n            c.append(val)\n            val += 1\n    b.sort()\n    for i in range(len(b)):\n        ans[b[i][1]] = c[i]\n    print(*ans)\n",
                true
            ],
            [
                "cases = int(input())\nfor _ in range(cases):\n    num = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n\n    likes = [n for n, i in zip(arr,s) if i == \"1\"]\n    hates = [n for n, i in zip(arr,s) if i == \"0\"]\n    l_num = num-len(likes)\n    likes.sort()\n    lst1 = list(range(l_num+1, num+1))\n    hates.sort()\n    lst2 = list(range(1, l_num+1))\n    likes_map = {n: p for n, p in zip(likes, lst1)}\n\n    hates_map = {n: p for n, p in zip(hates, lst2)}\n\n    ans = []\n    likes_map.update(hates_map)\n    # print(likes_map)\n    for n in arr:\n        ans.append(likes_map[n])\n\n    print(*ans)",
                true
            ],
            [
                "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    ss = set(s)\n    if \"1\" not in ss or \"0\" not in ss: print(*p)\n    else:\n        ones = []\n        zeroes = []\n        i = 0\n        while i < n:\n            if s[i] == \"1\": ones.append([p[i], i])\n            else: zeroes.append([p[i], i])\n            i += 1\n        ones.sort()\n        zeroes.sort()\n        a = [0] * n\n        num = 0\n        for ele, idx in zeroes:\n            num += 1\n            a[idx] = num\n        for ele, idx in ones:\n            num += 1\n            a[idx] = num \n        print(*a)       \n\n\"\"\"for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    mySet = set(s)\"\"\"\n",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int,input().split()))\n    s = list(map(int,input().strip()))\n    liked,disliked = [],[]\n    for i in range(n):\n        if s[i]:\n            liked.append((p[i],i))\n        else:\n            disliked.append((p[i],i))\n    liked.sort()\n    disliked.sort()\n    cnt,ans=1,[0]*n\n    for i,j in disliked:\n        ans[j]=cnt\n        cnt+=1\n    for i,j in liked:\n        ans[j]=cnt\n        cnt+=1\n    print(*ans)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    rate = list(map(int, input().split()))\n    s = list(input().strip())\n    s = [int(s[j]) for j in range(n)]\n    perm = [j + 1 for j in range(n)]\n    ans = [0] * n\n    like = {}\n    dislike = {}\n    for j in range(n):\n        if s[j] == 1:\n            like[rate[j]] = j\n        else:\n            dislike[rate[j]] = j\n    temp = list(dislike.keys())\n    x = len(temp)\n    temp.sort()\n    a = 0\n    for j in temp:\n        ans[dislike[j]] = str(perm[a])\n        a += 1\n    temp = list(like.keys())\n    x = len(temp)\n    temp.sort()\n    for j in temp:\n        ans[like[j]] = str(perm[a])\n        a += 1\n    print(\" \".join(ans))",
                true
            ],
            [
                "def Sort_Tuple(tup): \n    tup.sort(key = lambda x: x[0]) \n    return tup \nfor _ in range(int(input())):\n    n=int(input())\n    arr = list(map(int,input().split()))\n    s=input()\n    arr1=[]\n    arr2=[]\n    arr5=[0]*n\n\n    for i in range(len(s)):\n        if s[i]=='1':\n            arr1.append([arr[i],i])\n        else:\n            arr2.append([arr[i],i])\n\n    arr3= Sort_Tuple(arr1)\n    arr4= Sort_Tuple(arr2)\n    for i in range(len(arr3)):\n        arr3[i][0] = (n-len(arr3)+i+1)\n    for i in range(len(arr3)):\n        arr5[arr3[i][1]] =arr3[i][0]\n    for i in range(len(arr4)):\n        arr4[i][0] = i+1\n    for i in range(len(arr4)):\n        arr5[arr4[i][1]] =arr4[i][0]\n    print(' '.join(str(item) for item in arr5))\n\n\n    \n    \n    \n",
                true
            ],
            [
                "t=int(input())\nfor j in range(0,t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    s=input()\n    f=[]\n    q=[]\n    d=[]\n    for i in range(0,n):\n        q.append(0)\n        d.append(0)\n        f.append(\"0\")\n    for i in range(0,n):\n        q[l[i]-1]=i+1\n        if(s[i]==\"1\"):\n            f[l[i]-1]=\"1\"\n    c=n\n    for i in range(0,n):\n        if(f[n-i-1]==\"1\"):\n            d[q[n-i-1]-1]=str(c)\n            c-=1\n    for i in range(0,n):\n        if(f[n-i-1]==\"0\"):\n            d[q[n-i-1]-1]=str(c)\n            c-=1\n    print(\" \".join(d))\n            \n        \n",
                true
            ],
            [
                "# \ucc38\uace0: https://codeforces.com/contest/1622/submission/140823464\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = [0] * n\n\n    s = input()\n    liked, disliked = [], []\n    for i in range(n):\n        song = i + 1\n        if s[i] == '1':\n            liked.append((p[i], i))\n        else:\n            disliked.append((p[i], i))\n    liked.sort()\n    disliked.sort()\n\n    for i in range(len(disliked)):\n        q[disliked[i][1]] = i + 1\n    for i in range(len(liked)):\n        q[liked[i][1]] = len(disliked) + i + 1\n\n    print(*q)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    p = *(map(int, input().split())),\n    s = input()\n    good = []\n    bad = []\n    for i in range(n):\n        if s[i] == '1': good.append(p[i])\n        else: bad.append(p[i])\n    d = {rating: index for index, rating in enumerate(sorted(bad), 1)}\n    d.update({rating: index for index, rating in enumerate(sorted(good), len(bad)+1)})\n    print(' '.join(str(d[rating]) for rating in p))",
                true
            ],
            [
                "result = []\n\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = list(map(int, list(input())))\n    # separate\n    count = s.count(0)\n    zeros = sorted([[p[i], i] for i in range(n) if s[i] == 0])\n    ones = sorted([[p[i], i] for i in range(n) if s[i] == 1])\n    # generate answer\n    answer = [None for i in range(n)]\n    for i, (value, index) in enumerate(zeros):\n        answer[index] = i + 1\n    for i, (value, index) in enumerate(ones):\n        answer[index] = count + i + 1\n    result.append(answer)\n\nprint('\\n'.join(map(lambda x: ' '.join(map(str, x)), result)))\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n   n = int(input())\n   li = list(map(int,input().split()))\n   d = {}\n   s = input()\n   d['0']=[]\n   d['1']=[]\n   for i in range(n):\n      d[s[i]].append(li[i])\n   e = d.copy()\n   e['0'].sort()\n   e['1'].sort()\n   ans = [0]*n \n   c = 1 \n   #print(e)\n   for i in e['0']:\n      ans[i-1] = c \n      c+=1 \n   for i in e['1']:\n      ans[i-1] = c \n      c+=1 \n   kemp = []\n   for i in li:\n      kemp.append(ans[i-1])\n   print(*kemp)",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    t=int(input())\n    a=list(map(int,input().split()))\n    s=input()\n    a0=[]\n    a1=[]\n    for j in range(len(a)):\n        if(s[j]==\"0\"):\n            a0.append([a[j],j])\n        else:\n            a1.append([a[j],j])\n    a0.sort(reverse=True)\n    a1.sort(reverse=True)\n    ans=[]\n    #print(a0,a1)\n    k=len(a)\n    for h in range(len(a1)):\n        ans.append([a1[h][1],k])\n        k=k-1\n    for h in range(len(a0)):\n        ans.append([a0[h][1],k])\n        k=k-1\n    ans.sort()\n    ans1=[]\n    for j in range(len(ans)):\n        ans1.append(ans[j][1])\n    print(*ans1)",
                true
            ],
            [
                "import sys, collections, math, bisect, heapq, random, functools,io,os,copy\ninput = sys.stdin.readline\nout = sys.stdout.flush\ndef rep():\n    a = list(map(int,input().split()))\n    return a\n\ndef sep():\n    a = list(input().split())\n    return a\n\n\nclass UnionFind:\n    def __init__(self, x) -> None:\n        self.uf = [-1] * x\n\n    def find(self, x):\n        r = x\n        while self.uf[x] >= 0:\n            x = self.uf[x]\n\n        while r != x:\n            self.uf[r], r = x, self.uf[r]\n        return x\n\n    def union(self, x, y):\n        ux, uy = self.find(x), self.find(y)\n        if ux == uy:\n            return\n        if self.uf[ux] >= self.uf[uy]:\n            self.uf[uy] += self.uf[ux]\n            self.uf[ux] = uy\n        else:\n            self.uf[ux] += self.uf[uy]\n            self.uf[uy] = ux\n        return\n\n    def __print__(self):\n        return self.uf\n\n\ndef spfa(x,g,n):\n    dis = [float('inf') for i in range(n)]\n    dis[x] = 0\n    state = [False for i in range(n)]\n    state[x] = True\n    queue = collections.deque()\n    queue.append(x)\n    while queue:\n        cur = queue.popleft()\n        state[cur] = False\n        for next_ in g[cur]:\n            if dis[next_] > dis[cur] + 1:\n                dis[next_] = dis[cur] + 1\n                if state[next_] == False:\n                    state[next_] = True\n                    queue.append(next_)\n    return dis\n\n\ndef gcd(x,y):\n    if y == 0:\n        return x\n    return gcd(y,x % y)\n\n\ndef solve():\n    n = int(input())\n    a = rep()\n    s = input().rstrip('\\n')\n    right,left = [],[]\n\n    for i in range(n):\n        if s[i] == '1':\n            left.append([a[i],i])\n        else:\n            right.append([a[i],i])\n\n    left.sort(key = lambda x:x[0])\n    right.sort(key = lambda x:-x[0])\n    m = {}\n    cnt = len(right)\n    l = cnt + 1\n    for i in range(len(left)):\n        cur,id = left[i]\n        m[id] = l\n        l += 1\n    r = cnt\n    for i in range(len(right)):\n        cur,id = right[i]\n        m[id] = r\n        r -= 1\n    ans = []\n    for i in range(n):\n        ans.append(m[i])\n    print(*ans)\n\n\n\nif __name__ == '__main__':\n    for i in range(int(input())):\n        solve()",
                true
            ],
            [
                "from sys import setrecursionlimit\n\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque\nfrom functools import lru_cache, reduce\nfrom heapq import heappush, heappop\nfrom math import sqrt, ceil, floor, log2\n\nT = int(input())\n\ndef rl(t = int):\n    return list(map(t, input().split()))\n\nfor t in range(1, T + 1):\n    n = int(input())\n    p = rl()\n    s = rl(str)[0]\n    liked = set(i for i in range(n) if s[i] == '1')\n\n    ret = [-1 for _ in range(n)]\n    cur = n\n    k = lambda i: p[i]\n    for i in sorted(liked, key = k, reverse = True):\n        ret[i] = cur\n        cur -= 1\n\n    notLiked = set(i for i in range(n) if s[i] == '0')\n    for i in sorted(notLiked, key = k, reverse = True):\n        ret[i] = cur\n        cur -= 1\n\n    print(' '.join(map(str, ret)))\n",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\n\n\nfor _ in range(inp()):\n    n=inp()\n    a=0\n    b=n-1\n    l=inlt()\n    s=list(map(int,insr()))\n    index=[i for i in range(n)]\n    zp=list(zip(s,l,index))\n    zp.sort()\n    # print(zp)\n    ans=[0 for i in range(n)]\n    l.sort()\n    zero= s.count(0)\n    cnt=1\n    for i in range(n):\n        if zero :\n            ans[zp[i][2]]=cnt\n            cnt+=1\n            zero-=1\n        else:\n            ans[zp[i][2]]=cnt\n            cnt+=1\n    print(*ans)",
                true
            ],
            [
                "from collections import defaultdict\ninum = lambda: int(input())\nimap = lambda: map(int,input().split())\nilist = lambda: list(map(int, input().split()))\nfor t in range(inum()):\n    n = inum()\n    arr = ilist()\n    w = input()\n    res = [-1 for i in range(n)]\n    cnt, one, zero = 1, [], []\n    for i in range(n):\n        if w[i] == '1':\n            one.append(arr[i])\n        else:\n            zero.append(arr[i])\n    # print(one, zero)\n    one, zero, = sorted(one), sorted(zero)\n    hp = defaultdict(int)\n    for i in zero:\n        hp[i] = cnt\n        cnt += 1\n    for i in one:\n        hp[i] = cnt\n        cnt += 1\n    for i in range(n):\n        res[i] = hp[arr[i]]\n    print(*res)",
                true
            ],
            [
                "#import sys\n#sys.stdin = open(\"input.txt\", \"r\")\n\nfor ___ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = list(map(int,list(input())))\n    ratingToIdx = [i for i in range(0, n+1)]\n    ratingToLike = [i for i in range(n+1)]\n    for i in range(n):\n        ratingToIdx[p[i]] = i+1\n        ratingToLike[p[i]] = s[i]\n    q1, q2 = [], []\n    for i in range(1, n+1):\n        if ratingToLike[i] == 0:\n            q1.append(ratingToIdx[i])\n        else:\n            q2.append(ratingToIdx[i])\n    newIdx = [-1] + q1 + q2\n    for i in range(n):\n        p[newIdx[i+1]-1] = i+1\n    print(\" \".join(map(str, p)))\n    ",
                true
            ],
            [
                "z=int(input())\nfor i in range(z):\n    q = []\n    g = int(input())\n    g1 = [int(i) for i in input().split()]\n    \n    h = input()\n    l=len(h)\n    r = [0] * l\n    for k in range(l):\n        a=((h[k], g1[k], k))\n        q.append(a)\n    q = sorted(q, key=lambda p: (p[0], p[1]))\n    \n    for o, u in enumerate(q):\n        r[u[2]] = str(o + 1)\n    if 1+1==2:\n        r1=r\n        r2=r1\n        print(\" \".join(r2))",
                true
            ],
            [
                "# cook your dish here\ndef semiSort(arr1, arr2):\n    #it will sort arr2 as per arr 1\n    sortedArr1 = sorted(arr1)\n    sortedArr2 = sorted(arr2)\n    newArr2 = [-1]*len(arr2)\n    indexArr1 = {}\n    for i in range(len(arr1)):\n        indexArr1[arr1[i]] = i\n    d = {}\n    for i in range(len(arr1)):\n        d[i] = indexArr1[sortedArr1[i]]\n        newArr2[d[i]] = sortedArr2[i]\n    return newArr2\n        \n# print(semiSort([3,1,2],[4,7,9]))\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(map(int,input().split()))\n    s = input()\n    sortedP = sorted(p)\n    liked = []\n    disliked = []\n    # p.sort(reverse=True)\n    p1 = []\n    p2 = []\n    for i in range(n):\n        if(s[i]==\"1\"):\n            liked.append(i)\n            p1.append(p[i])\n        else:\n            disliked.append(i)\n            p2.append(p[i])\n    ptmp = sortedP[n-len(liked):n]\n    ptmp2 = sortedP[0:len(disliked)]\n    ans = [-1]*n\n    p1 = semiSort(p1, ptmp)\n    p2 = semiSort(p2, ptmp2)\n    for i in range(len(liked)):\n        ans[liked[i]] = p1[i]\n    for i in range(len(disliked)):\n        ans[disliked[i]] = p2[i]\n    print(*ans)",
                true
            ],
            [
                "def bm(n,r,lr,ld):\n    c=0\n    for x in ld:\n        if x==0:\n            c=c+1\n    ad=r[:c]\n    al=r[c:]\n    if (len(ad)==0)|(len(al)==0):\n        tr=[]\n        for x in lr:\n            tr.append(str(x))\n        return ' '.join(tr)\n    vl=[]\n    vd=[]\n    for i in range(len(lr)):\n        if ld[i]==1:\n            vl.append(lr[i])\n        else:\n            vd.append(lr[i])\n    vl.sort()\n    vd.sort()\n    dd={}\n    for z in zip(vd,ad):\n        dd[z[0]]=z[1]\n    dl={}\n    for z in zip(vl,al):\n        dl[z[0]]=z[1]\n    fa=[]\n    for i in range(len(lr)):\n        if ld[i]==1:\n            fa.append(dl.get(lr[i]))\n        else:\n            fa.append(dd.get(lr[i]))\n    tr=[]\n    for x in fa:\n        tr.append(str(x))\n    return ' '.join(tr)\nt=int(input())\nln=[]\nls1=[]\nls2=[]\nfor x in range(t):\n    n=int(input())\n    s1=str(input())\n    s2=str(input())\n    ln.append(n)\n    ls1.append(s1)\n    ls2.append(s2)\nla=[]\nfor i in range(len(ls1)):\n    n=ln[i]\n    r=[a for a in range(1,ln[i]+1)]\n    ar=ls1[i].split(' ',)\n    lr=[]\n    for y in ar:\n        lr.append(int(y))\n    sr=ls2[i]\n    ldt=list(sr)\n    ld=[]\n    for z in ldt:\n        ld.append(int(z))\n    ans=bm(n,r,lr,ld)\n    la.append(ans)\nfor x in la:\n    print(x)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    liked = []\n    disliked = []\n    for i in range(n):\n        if s[i]==\"1\":\n            liked.append([p[i],i])\n        else:\n            disliked.append([p[i],i])\n    liked.sort()\n    disliked.sort()\n    perm = 1\n    final = [0]*n\n    for _ in disliked:\n        final[_[1]] = perm\n        perm+=1\n    for _ in liked: \n        final[_[1]] = perm\n        perm+=1\n    print(*final)",
                true
            ],
            [
                "from sys import stdin, stdout\nrd = lambda: list(map(int, stdin.readline().split()))\nrds = lambda: stdin.readline().rstrip()\nii = lambda: int(stdin.readline())\nINF = 1 << 62\nmod = 10**9 + 7\n\nfor _ in range(ii()):\n    n = ii()\n    ps = rd()\n    rs = rds()\n    \n    z = []\n    o = []\n    for p, r in zip(ps, rs):\n        if r == '0':\n            z.append(p)\n        else:\n            o.append(p)\n    \n    z.sort()\n    o.sort()\n    m = {}\n    for i, x in enumerate(z):\n        m[x] = i+1\n    for j, y in enumerate(o):\n        m[y] = j+1+len(z)\n    \n    ans = []\n    for x in ps:\n        ans.append(m[x])\n\n    print(*ans)\n\n#stdout.write(' '.join(map(str, ar)))\n#stdout.write(f'{res}')\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    s = input()\n    zero = []\n    one = []\n    d = {}\n    for i in a:\n        d[i] = 0\n        \n        \n        \n    for i in range(len(s)):\n        if s[i] == '0':\n            zero.append(a[i])\n        elif s[i] == '1':\n            one.append(a[i])\n    zero.sort()\n    one.sort()\n    x = 1\n    for i in zero:\n        d[i] = x\n        x += 1\n    for i in one:\n        d[i] = x\n        x += 1\n    \n    \n    print(*d.values())\n            \n",
                true
            ],
            [
                "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, sqrt, factorial, pi, inf\nfrom collections import deque, defaultdict\nfrom bisect import bisect, bisect_left\nfrom time import time\nfrom itertools import permutations as per\nfrom heapq import heapify, heappush, heappop, heappushpop\n\ninput = stdin.readline\nR = lambda: map(int, input().split())\nI = lambda: int(input())\nS = lambda: input().rstrip('\\r\\n')\nL = lambda: list(R())\nP = lambda x: stdout.write(str(x) + '\\n')\nlcm = lambda x, y: (x * y) // gcd(x, y)\nnCr = lambda x, y: (f[x] * inv((f[y] * f[x - y]) % N)) % N\ninv = lambda x: pow(x, N - 2, N)\nsumx = lambda x: (x ** 2 + x) // 2\nN = 10 ** 9 + 7\n\nfor _ in range(I()):\n    n=I()\n    a=L()\n    s=[int(i) for i in S()]\n    d=[]\n    e=[]\n    ind=[0]*(n+1)\n    for i in range(n):\n        ind[a[i]]=i\n    for i in range(n):\n        if not s[i]:\n            d+=a[i],\n        else:\n            e+=a[i],\n    d.sort(reverse=True)\n    e.sort()\n    for i in range(s.count(0)):\n        a[ind[d[-1]]]=i+1\n        d.pop()\n    for i in range(s.count(1)):\n        a[ind[e[-1]]]=n-i\n        e.pop()\n    print(*a)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n= int(input())\n    A = list(map(int,input().split()))\n    s = input()\n    d ={}\n    for i in range(n):\n        d[A[i]] = s[i]\n        \n    l = sorted(list(d.keys()))\n    c0 = s.count('0')\n    c1 = s.count('1')\n    if c1==0 or c0==0:\n        print(*A)\n    else:\n        st0,st1 = 1,c0+1\n        g = 1\n        ans = {}\n        for i in l:\n            if d[i] == '1':\n                ans[g] = st1\n                st1 += 1\n            else:\n                ans[g] = st0\n                st0 += 1\n            g += 1\n        out = []\n        for i in A:\n            k = ans[i]\n            out.append(k)\n        print(*out)",
                true
            ],
            [
                "import math,sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());mod1=1000000007;mod2=998244353\n\nfor _ in range(I()):\n    n=I();p=L();s=S()\n    a=[];b=[];ans=[0]*n\n    for i in range(n):\n        if s[i]=='1':\n            a.append((p[i],i))\n        else:\n            b.append((p[i],i))\n    a.sort(key=lambda x:x[0])\n    b.sort(key=lambda x:x[0])\n    k=len(a);j=len(b);t=0\n    for i in range(n-k+1,n+1):\n        ans[a[t][1]]=i;t+=1\n    for i in range(j):\n        ans[b[i][1]]=i+1\n    print(*ans)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    # a,b,c = map(int,input().split())\n    a = list(map(int,input().split()))\n    s = input()\n    d = {}\n    one = s.count(\"1\")\n    start = n-one+1\n    \n    zero = n - one\n    \n    \n    ones = []\n    zeroes = []\n    for i in range(n):\n        if s[i] == \"1\":\n            ones.append(a[i])\n        else:\n            zeroes.append(a[i])\n    ones.sort()\n    zeroes.sort()\n    do = {}\n    dz = {}\n    for i in range(one):\n        do[ones[i]] = start\n        start += 1\n    \n    ss = 1\n    for i in range(zero):\n        dz[zeroes[i]] = ss\n        ss += 1\n        \n    p = []\n    for i in range(n):\n        if s[i] == \"1\":\n            p.append(do[a[i]])\n        else:\n            p.append(dz[a[i]])\n    \n    print(*p)\n            \n    \n\n            \n    \n    \n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nCQXYM found a rectangle A of size n \u00d7 m. There are n rows and m columns of blocks. Each block of the rectangle is an obsidian block or empty. CQXYM can change an obsidian block to an empty block or an empty block to an obsidian block in one operation.\n\nA rectangle M size of a \u00d7 b is called a portal if and only if it satisfies the following conditions:\n\n  * a \u2265 5,b \u2265 4. \n  * For all 1 < x < a, blocks M_{x,1} and M_{x,b} are obsidian blocks. \n  * For all 1 < x < b, blocks M_{1,x} and M_{a,x} are obsidian blocks. \n  * For all 1<x<a,1<y<b, block M_{x,y} is an empty block. \n  * M_{1, 1}, M_{1, b}, M_{a, 1}, M_{a, b} can be any type. \n\nNote that the there must be a rows and b columns, not b rows and a columns.\n\nNote that corners can be any type\n\nCQXYM wants to know the minimum number of operations he needs to make at least one sub-rectangle a portal.\n\nInput\n\nThe first line contains an integer t (t \u2265 1), which is the number of test cases.\n\nFor each test case, the first line contains two integers n and m (5 \u2264 n \u2264 400, 4 \u2264 m \u2264 400). \n\nThen n lines follow, each line contains m characters 0 or 1. If the j-th character of i-th line is 0, block A_{i,j} is an empty block. Otherwise, block A_{i,j} is an obsidian block.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 400.\n\nIt is guaranteed that the sum of m over all test cases does not exceed 400.\n\nOutput\n\nOutput t answers, and each answer in a line.\n\nExamples\n\nInput\n\n\n1\n5 4\n1000\n0000\n0110\n0000\n0001\n\n\nOutput\n\n\n12\n\n\nInput\n\n\n1\n9 9\n001010001\n101110100\n000010011\n100000001\n101010101\n110001111\n000001111\n111100000\n000110000\n\n\nOutput\n\n\n5\n\nNote\n\nIn the first test case, the final portal is like this:\n    \n    \n      \n    1110  \n    1001  \n    1001  \n    1001  \n    0111  \n    \nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import sys;input=sys.stdin.readline\nT, = map(int, input().split())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    X = [[0]*(M+1)]\n    for _ in range(N):\n        X.append([0]+[int(c) for c in input().strip()])\n    Y = [[0]*(M+1) for _ in range(N+1)]\n    for i in range(N+1):\n        for j in range(M+1):\n            Y[i][j] = X[i][j]\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            X[i][j] += - X[i-1][j-1] + X[i][j-1] + X[i-1][j]\n    R = 10**18\n    L = []\n    for i in range(5, N+1):\n        for j in range(4, M+1):\n            x = i-4\n            y = j-3\n            r = X[i-1][j-1]-X[x][j-1]-X[i-1][y]+X[x][y]\n            rrr = (X[i-1][j]+X[i][j-1]-X[i-1][j-1]-r-(X[x-1][j]+X[i][y-1]-X[x-1][y-1]))\n            r2 = rrr-Y[x][j]-Y[i][y]-Y[x][y]\n            rr = r+(2*(i-x+1-2)+2*(j-y+1-2))-r2\n            L.append((rr, x, y))\n    L.sort(key=lambda x:x[0])\n    for i in range(min(len(L), 23)):\n        _, x, y = L[i]\n#        print(x, y)\n        for i in range(x+4, N+1):\n            for j in range(y+3, M+1):\n                r = X[i-1][j-1]-X[x][j-1]-X[i-1][y]+X[x][y]\n                rrr = (X[i-1][j]+X[i][j-1]-X[i-1][j-1]-r-(X[x-1][j]+X[i][y-1]-X[x-1][y-1]))\n                r2 = rrr-Y[x][j]-Y[i][y]-Y[x][y]\n                rr = r+(2*(i-x+1-2)+2*(j-y+1-2))-r2\n                if R > rr:\n                    R = rr\n    print(R)",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nCQXYM is counting permutations length of 2n.\n\nA permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nA permutation p(length of 2n) will be counted only if the number of i satisfying p_i<p_{i+1} is no less than n. For example:\n\n  * Permutation [1, 2, 3, 4] will count, because the number of such i that p_i<p_{i+1} equals 3 (i = 1, i = 2, i = 3).\n  * Permutation [3, 2, 1, 4] won't count, because the number of such i that p_i<p_{i+1} equals 1 (i = 3). \n\n\n\nCQXYM wants you to help him to count the number of such permutations modulo 1000000007 (10^9+7).\n\nIn addition, [modulo operation](https://en.wikipedia.org/wiki/Modulo_operation) is to get the remainder. For example:\n\n  * 7 mod 3=1, because 7 = 3 \u22c5 2 + 1, \n  * 15 mod 4=3, because 15 = 4 \u22c5 3 + 3. \n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (t \u2265 1) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains an integer n(1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5\n\nOutput\n\nFor each test case, print the answer in a single line.\n\nExample\n\nInput\n\n\n4\n1\n2\n9\n91234\n\n\nOutput\n\n\n1\n12\n830455698\n890287984\n\nNote\n\nn=1, there is only one permutation that satisfies the condition: [1,2].\n\nIn permutation [1,2], p_1<p_2, and there is one i=1 satisfy the condition. Since 1 \u2265 n, this permutation should be counted. In permutation [2,1], p_1>p_2. Because 0<n, this permutation should not be counted.\n\nn=2, there are 12 permutations: [1,2,3,4],[1,2,4,3],[1,3,2,4],[1,3,4,2],[1,4,2,3],[2,1,3,4],[2,3,1,4],[2,3,4,1],[2,4,1,3],[3,1,2,4],[3,4,1,2],[4,1,2,3].\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "from sys import stdin, gettrace\n\nif gettrace():\n    def inputi():\n        return input()\nelse:\n    def input():\n        return next(stdin)[:-1]\n\n\n    def inputi():\n        return stdin.buffer.readline()\n\nLIMIT = 200001\nMOD = 1000000007\n\ndef solve(factorial):\n    n = int(input())\n    print( (factorial[2*n]*pow(2, MOD-2, MOD))%MOD)\n\ndef main():\n    factorial = [1]\n    for i in range(1, LIMIT):\n        factorial.append((factorial[-1]*i)%MOD)\n    t = int(input())\n    for _ in range(t):\n        solve(factorial)\n\n\nif __name__ == \"__main__\":\n    main()\n",
                true
            ],
            [
                "rr = lambda: input().strip()\nrrm = lambda: map(int,rr().split())\n\nM = 10**9 + 7\ndef fac(x):\n    prod = 1\n    for i in range(3,x+1):\n        prod = (prod*i)%M\n    return prod\n\ndef solve():\n    n = int(rr())\n    ans = fac(2*n)\n    ans = ans\n\n    return ans%M\n\nT = int(rr())\nfor _ in range(T):\n    ans = solve()\n\n    print(ans)",
                true
            ],
            [
                "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    ans = 1\n    for i in range(3, 2*n+1):\n        ans = (ans*i)%1000000007\n    print(ans)",
                true
            ],
            [
                "import sys;input=sys.stdin.readline\ndef get():\n    return input().strip()\nfor _ in range(int(get())):\n    n=int(get())\n    ans=1\n    for i in range(1,2*n+1):\n        if i==2:\n            continue\n        ans=((ans%1000000007)*(i%1000000007))%1000000007\n    print(ans)",
                true
            ],
            [
                "import sys\nimport os\nfrom io import BytesIO\n\nif sys.version_info[0] < 3:\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n\nf = sys.stdin\nif os.environ.get('USER') == \"loic\":\n    f = open(\"data.in\")\n\nline = lambda: f.readline().strip('\\r\\n').split()\n\ndef write(w):\n    sys.stdout.write(w)\n    sys.stdout.write(\"\\n\")\n\ndef factorial_modulo(limit):\n    fact = [1]\n    for i in range(1, limit+1):\n        fact.append(fact[-1] * i % M)\n    return fact\n\ndef inv_modulo_all(limit):\n    mod_inv = [0,1]\n    for i in range(2, limit+1):\n        mod_inv.append(M - (M // i) * mod_inv[M % i] % M)\n    return mod_inv\n\ndef factorial_modulo_inverse(limit):\n    mod_inv = inv_modulo_all(limit)\n    fact_inv = [1,1]\n    for i in range(2, limit+1):\n        fact_inv.append(fact_inv[-1] * mod_inv[i] % M)\n    return fact_inv\n\ndef solve():\n    res = FACT[2*N] * FACT_INV[2]\n    res %= M\n    \n    return str(res)\n\nM = 10**9 + 7\nZ = 200001\nFACT = factorial_modulo(Z)\n\nT = int(line()[0])\nfor test in range(1,T+1):\n    N = int(line()[0])\n    FACT_INV = factorial_modulo_inverse(2)\n    \n    write(solve())\n    \nf.close()\n",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve(n):\n  ans = 1\n  M = 10**9 + 7\n\n  for i in range(3, n+1):\n    ans *= i\n    ans = ans%M\n  \n  # ans = ans//2\n\n  print(ans)\n\n\n\nT = get_int()\nwhile T:\n  n = get_int()\n  n *= 2\n  solve(n)\n  T -= 1\n",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\n\n#\n# sys.setrecursionlimit(400000)\ndef I(): return input().strip()\n\n\ndef II(): return int(input().strip())\n\n\ndef LI(): return [*map(int, input().strip().split())]\n\n\nimport copy, string, math, time, functools, random, fractions\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom itertools import permutations, combinations, groupby\nfrom operator import itemgetter\nimport decimal\n\nfrom collections import *\n\nfor _ in range(II()):\n    def factoriall(ll, pp):\n        m = 1\n        if ll>2:\n            for i in range(3, ll + 1):\n                m = (m * i) % pp\n        return m\n    n = II()\n    l = (10**9)+7\n\n\n\n    xx = 2*n\n\n\n\n\n\n    z = factoriall(xx,l)\n    print(z)\n\n\n\n\n\n",
                true
            ],
            [
                "from math import ceil,gcd,factorial\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom array import array\nfrom collections import Counter as ctr\nfrom collections import deque as dq\n\ndef li():\n    return list(map(int,input().split()))\ndef arr(a):\n    return array('i',a)\ndef f(n,p):\n    result = 3\n    for i in range(4, n + 1):\n        result = (result * i) % p\n    return result\n\ndef solve():\n    p=10**9+7\n    for _ in range(int(input())):\n        n=int(input())\n        if n==1:\n            print(1)\n        else:\n            print(f(2*n,p))\n\nsolve()\n",
                true
            ],
            [
                "for t in range(int(input())):\n    n = int(input())\n    y = 1\n    for k in range(3, 2*n + 1):\n        y = (y*k)%1000000007\n    print(y)\n\n\n",
                true
            ],
            [
                "loop=int(input())\nmd=1000000007\nfor i in range(loop):\n    n=int(input())\n    res=1\n    for i in range(2*n,2,-1):\n        res=(res*i)%md\n    res=res%md\n    print(res)",
                true
            ],
            [
                "fact = [1 for i in range(200002)]\nfor i in range(1,len(fact)):\n    fact[i] = ((fact[i-1]%1000000007)*(i%1000000007))\n\nT = int(input())\nfor t in range(T):\n    n = int(input())\n\n    print((fact[2*n]//2)%1000000007)\n\n\n",
                true
            ],
            [
                "i=2;a=[1]*3\nwhile i<4**9:i+=1;a+=a[-1]*i%(10**9+7),\nfor s in[*open(0)][1:]:print(a[int(s)*2])",
                true
            ],
            [
                "def fact(n):\n    m = 1000000007\n    global ff\n    ff=1\n    for i in range(3, 2*n+1):\n        ff= (ff*i)%m\n    return(ff)\nfor i in range(int(input())):\n    a=int(input())\n    print(fact(a))",
                true
            ],
            [
                "t=int(input())\nwhile t>0:\n    n=int(input())\n    mod=pow(10,9)+7\n    if n==1:\n        print(\"1\")\n    else:\n        pro=1\n        for i in range(3,2*n+1):\n            pro=(pro*i)%mod\n        print(pro)\n    t=t-1",
                true
            ],
            [
                "MOD=1000000007\nfact=[[] for i in range(200005)]\nfact[0]=1\nfor i in range(1,200000):\n    fact[i]=(fact[i-1]*i)%MOD\nfor _ in range(int(input())):\n    n=int(input())\n    print((n*fact[2*n-1])%MOD)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    M = 1000000007\n    f = 1\n    for i in range(3, 2*n + 1):\n        f = (f * i) % M \n    \n    print(f%M)",
                true
            ],
            [
                "# '''\n#      |\\_/|                  \n#      | @ @   Woof! \n#      |   <>              _  \n#      |  _/\\------____ ((| |))\n#      |               `--' |   \n#  ____|_       ___|   |___.' \n# /_/_____/____/_______|\n# I am here to guard this code, woof!\n# '''\n \nimport sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, modf, sqrt, log, log2, log10\nfrom collections import Counter\n \nint_max = float('inf')\nint_min = -(float('inf'))\nmod = 10**9 + 7\nANS = []\n# infile = open(sys.argv[1], \"r\")\n# input = infile.readline\ninput = stdin.readline\n \ndef solve():\n    pass\n \nt = int(input())\n# t = 1\n \nfor i in range(t):\n    n = int(input())\n    # n, k = map(int, input().split())\n    # arr =  list(map(int, input().split()))\n    # arr = list(input())\n    # s = input().strip()\n    ans = 1\n    if n == 1:\n        print(ans)\n        continue\n    else:\n        for i in range(3, 2*n + 1):\n            ans *= i\n            ans %= mod\n\n        print(ans)\n   \nprint('\\n'.join(ANS))",
                true
            ],
            [
                "t = int(input())\n\nyo = (10**9)+7\n\nfor i in range(t) :\n    n=  int(input())\n    arr = [0,0,1]\n\n    for j in range(3 , 2*n+1) :\n        arr.append(((arr[j-1]%yo)*(j%yo))%yo)\n\n    print(arr[-1])",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    ans=1\n    for k in range(3, 2*n+1):\n        ans*=k\n        ans%=1000000007\n    print(ans)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 1\n    for i in range(3,(2*n)+1):\n        ans *= i\n        ans %= 1000000007\n    print(ans)",
                true
            ],
            [
                "import sys,os,io\ninput = sys.stdin.readline # for strings\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline # for non-strings\n\nPI = 3.141592653589793238460\nINF =  float('inf')\nMOD  = 1000000007\n# MOD = 998244353\n\n\ndef bin32(num):\n    return '{0:032b}'.format(num)\n\ndef add(x,y):\n    return (x+y)%MOD\n\ndef sub(x,y):\n    return (x-y+MOD)%MOD\n\ndef mul(x,y):\n    return (x*y)%MOD\n\ndef gcd(x,y):\n    if y == 0:\n        return x\n    return gcd(y,x%y)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\ndef power(x,y):\n    res = 1\n    x%=MOD\n    while y!=0:\n        if y&1 :\n            res = mul(res,x)\n        y>>=1\n        x = mul(x,x)\n        \n    return res\n        \ndef mod_inv(n):\n    return power(n,MOD-2)\n\ndef prob(p,q):\n    return mul(p,power(q,MOD-2))    \n  \ndef ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef ls():\n    return [i for i in input().split()]\n\nfact = [1]\nfor i in range(1 , 2*(10**5) + 5):\n    fact.append(mul(fact[-1] , i))\n\n\nfor t in range(ii()):\n    n = ii()\n    print((fact[2*n]*mod_inv(2))%MOD)\n",
                true
            ],
            [
                "T=int(input())\nfor i in range(T):\n    n=int(input())\n    ans=1\n    for j in range(2,2*n):\n        ans=ans*(j+1)\n        ans=ans%1000000007\n    print(round(ans%1000000007))",
                true
            ],
            [
                "\nimport sys\n\nmod = 1000000007\n\nfact = [1]*(200002)\nfor i in range(3,200002):\n    fact[i] = (i*(fact[i-1]%mod)) % mod\n\nfor _ in range(int(input().strip())):\n    n = int(input().strip())\n    ans = ((fact[n*2])%mod)\n    print(ans)\n\n\n# def factorials_by_memo(n,memo={}):\n#     if(n in memo):\n#         return memo[n]\n#     if(n==1 or n==0):\n#         return 1\n#     memo[n] = n*factorials_by_memo(n-1,memo)%mod\n#     return memo[n]%mod\n\n    \n# m = factorials_by_memo(500)\n# print(m)\n\n\n\n# for _ in range(int(input().strip())):\n#     n = int(input().strip())\n#     ans = math.factorial(2*n)%mod //2\n#     print(ans)\n    ",
                true
            ],
            [
                "n = int(input())\nfor time in range(n):\n    t = int(input())\n    ans = 1\n    for x in range(1, 2 * t + 1):\n        if x != 2:\n            ans = (ans * x) % 1000000007\n    print(ans)\n",
                true
            ],
            [
                "mod = 10**9+7\nfact = [1, 1]\nfor i in range(2, 300010):\n    fact.append((fact[-1]*i)%mod)\n\nfor nt in range(int(input())):\n    n = int(input())*2\n    print ((fact[n]*pow(2, mod-2, mod))%mod)\n\n\n",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\n \n \ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n \ndef inst():\n    return input().strip()\n \ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n \nmod = 998244353\n \ndef qmod(a, b):\n    res = 1\n    while b:\n        if b&1:\n            res = (res*a)%mod\n        b >>= 1\n        a = (a*a)%mod\n    return res\n \ndef inv(a):\n    return qmod(a, mod-2)\n \n \ndef my_main():\n    kase = inp()\n    pans = []\n    for _ in range(kase):\n        n = inp()\n        ans = 1\n        for i in range(1, 2*n+1):\n            if i==2:\n                continue\n            ans *= i\n            ans %= 1000000007\n        pans.append(str(ans))\n \n    print('\\n'.join(pans))\n \nmy_main()\n",
                true
            ],
            [
                "def cqxym(x,m):\n    facti=1\n    for i in range(3,2*x+1):\n        facti=(facti*i)%m\n    return facti\n\nif __name__ == \"__main__\":\n    test=int(eval(input()))\n    for _ in range(test):\n        m=1000000007\n        x=int(eval(input()))\n        print((cqxym(x,m)))\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    n *= 2\n    ans = 0.5\n    for i in range(1, n+1):\n        ans*=i\n        ans%=1000000007 \n    print(int(ans))\n\n",
                true
            ],
            [
                "import sys\n\npl=1\nsys.setrecursionlimit(10**5)\nif pl:\n    input=sys.stdin.readline\nelse:    \n    sys.stdin=open('input.txt', 'r')\n    sys.stdout=open('outpt.txt','w')\n\ndef li():\n    return [int(xxx) for xxx in input().split()]\ndef fi():\n    return int(input())\ndef si():\n    return list(input().rstrip())    \ndef mi():\n    return     map(int,input().split())    \ndef ff():\n    sys.stdout.flush()\ndef google(tc,*ans):\n    print(\"Case #\"+str(tc)+\":\",*ans)    \ndef bits(i,n):\n    p=bin(i)[2:]\n    return (n-len(p))*\"0\"+p            \n\nt=fi()\nf=t    \nmod=10**9+7    \n\ndef check(a):\n    p=0\n    for i in range(len(a)-1):\n        if a[i]<a[i+1]:\n            p+=1\n    return p>=n        \nfa=[1]*(3*10**5+2)\nfor i in range(1,3*10**5+1):\n    fa[i]=i*fa[i-1]%mod\nwhile t:\n    t-=1\n    n=fi()        \n    print((n*fa[2*n-1])%mod)        \n\n",
                true
            ],
            [
                "def read_nums():\n    return [int(x) for x in input().split()]\n\n\ndef solve():\n    n, = read_nums()\n    res = 1\n    for i in range(3, 2 * n + 1):\n        res = (res * i) % 1000000007\n    print(res)\n\n\ndef main():\n    t, = read_nums()\n    for _ in range(t):\n        solve()\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "t = int(input())\nMOD = 10 ** 9 + 7\nfor _ in range(t):\n    n = int(input())\n    fac = 1\n    flag = 0\n    for i in range(1,2*n+1):\n        fac %= MOD\n        fac *= i\n\n    fac //= 2\n    fac %= MOD\n\n    print(fac)",
                true
            ],
            [
                "\nfor i in range(int(input())):\n\n    MOD = 1000000007\n\n    ans = 1\n\n    n = int(input())\n\n    n *= 2\n\n    while n > 2:\n        ans *= n\n        ans %= MOD\n        n -= 1\n\n    print(ans)\n",
                true
            ],
            [
                "def f(n):\n    pmod=7+10**9\n    ss=1\n    for i in range(3,n+1):\n        ss=(ss*i)%pmod\n    return ss\nt= int(input())\nl=[]\nfor k in range(t):\n    n=int(input())\n    l.append((f(2*n)))\nfor j in l:\n    print(j)\n",
                true
            ],
            [
                "\nt = int(input())\nMOD = 1000000007\nfor _ in range(t):\n    n = int(input())\n\n    fact = 1\n    for i in range(3, 2*n+1):\n        fact = (fact * i) % MOD\n    print((fact) % MOD)\n",
                true
            ],
            [
                "t=int(input())\nwhile(t>0):\n  t-=1\n  n=int(input())\n  cnt=1\n  for i in range(1,2*n):\n    cnt*=i\n    cnt%=1000000007\n  cnt*=n\n  cnt%=1000000007\n  print(cnt)\n",
                true
            ],
            [
                "\n\n\nans=[1,1]\npri=pow(10,9)+7\nfor i in range(1,(2*pow(10,5))+5):\n    ans.append(ans[-1]*(i+1))\n    ans[-1]%=pri\n\na=int(input())\nfor i in range(a):\n    s=int(input())\n    t=ans[(2*s)-1]\n\n    print(t*(s)%pri)\n",
                true
            ],
            [
                "t=int(input())\nwhile t>0:\n    n=int(input())\n    ans=1\n    mod=1000000007\n    for i in range(2*n,2,-1):\n        ans=(ans*i)%mod\n    ans=ans%mod\n    print(ans)\n    t=t-1",
                true
            ],
            [
                "def f(a):\n    s=1\n    for i in range(3,a+1):\n        s*=i\n        s%=1000000007\n    return s\nfor i in range(int(input())):\n    x=int(input())\n    print(f(x*2))\n",
                true
            ],
            [
                "def myfct(x):\n    ans = 1\n    for i in range(3, x + 1):\n        ans *= i\n        ans %= m\n    return ans \nm = 1000000007\nfor _ in range(eval(input())):\n   n = eval(input())\n   print(myfct(n * 2))\n",
                true
            ],
            [
                "mod = 10**9+7\nfactorial = [1]\nfor i in range(1,2*10**5+5):\n    factorial.append((factorial[-1]*i)%mod)\n\nfor _ in range(int(input())):\n    n = int(input())*2\n    print((factorial[n-1]*n//2)%mod)\n",
                true
            ],
            [
                "def factorial(n):\n    mod=1000000007\n    fact_fun=1\n    for i in range(3,(2*n)+1):\n        fact_fun=(fact_fun*i)%mod\n    return fact_fun\nfor i in range(int(input())):\n    a=int(input())\n    print(factorial(a))",
                true
            ],
            [
                "M = (10**9)+7\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    N = 2*n\n    if N==2:\n        print(1)\n    else:\n        ans = N\n        while N>3:\n            ans = (ans%M)*((N-1)%M)\n            N-=1\n        print(ans%M)",
                true
            ],
            [
                "fac = [1, 1, 1]\nmod = 10**9 + 7\nfor i in range(3,212345):\n  fac.append(i * fac[-1] % mod)\nfor _ in range(int(input())):\n  n = int(input())\n  print(fac[2*n])",
                true
            ],
            [
                "\nt = int(input())\nwhile t>0:\n    n = int(input())\n    res = 1\n    for i in range(2*n,2,-1):\n        res = (res*i)%1000000007\n    res = res%1000000007\n    print(res)\n    t=t-1",
                true
            ],
            [
                "t, f = int(input()), [0] * 200001\nf[2] = 1\nfor x in range(3, 200001): f[x] = f[x - 1] * x % 1000000007\nfor x in range(t): print(f[int(input()) << 1])",
                true
            ],
            [
                "itm=int(input())\nn=[]\nm=[]\nfor i in range(itm):\n  n.append(input())\n  n[i]=int(n[i])\n  ir=n[i] * 2\n  ans=1\n  for j in range(3, ir+1):\n    ans= ans*j % 1000000007 \n  m.append(ans)\nfor i in range(itm):\n  print(m[i])",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=2*int(input())\n    f=1\n    for i in range(3,n+1):\n        f=(f*i)%(10**9+7)\n    print(f)",
                true
            ],
            [
                "from sys import stdin\n\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    res = 1\n    for i in range(1, 2 * n + 1):\n        res *= i\n        if i != 2*n:\n            res %= 10 ** 9 + 7\n    print((res // 2) % (10 ** 9 + 7))\n",
                true
            ],
            [
                "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    # arr = list(map(int,input().split()))\n    res = 1\n    mod = 1000000007\n    i = 2*n\n    while(i>=3):\n        res = (res*i)%mod\n        i-=1\n    print(res%mod)",
                true
            ],
            [
                "# \u3067\u3064oO(YOU PLAY WITH THE CARDS YOU'RE DEALT..)\nimport sys\nMOD = 1000000007\ndef main(n):\n    ans = 1\n    for i in range(3, 2 * n + 1):\n        ans = ans * i % MOD\n    return ans\n\nif __name__ == '__main__':\n    input = sys.stdin.readline\n    T = int(input())\n    for _ in range(T):\n        n = int(input())\n        print(main(n))\n",
                true
            ],
            [
                "def sfac(n):\n    if(n==2):\n        return 1\n    elif(n==4):\n        return 12\n    elif(n==6):\n        return 30*12\n    ans=1\n    for i in range(3,n+1):\n        # print(ans,i)\n        ans*=i\n        ans=ans%1000000007\n        # print(ans)\n    return ans\nfor fghj in range(int(input())):\n    n=int(input())\n    print(sfac(2*n))",
                true
            ],
            [
                "import itertools\nfrom collections import defaultdict\nM = 10**9+7\nt = int(input())\n\ndef solve():\n  n = int(input())\n  if n == 1:\n    print(1)\n    return\n  elif n == 2:\n    print(12)\n    return\n  add = 18\n  prev = 30\n  sum_n = 360\n  for _ in range(n-3):\n    add += 8\n    prev += add\n    sum_n = sum_n * prev % M\n  print(sum_n)\n  \nfor _ in range(t):\n  solve()\n\n##1 1\n##2 12: 1 | 2 2 3 -> 12\n##3 360: 2 2 3 | 2 5 3 -> 30\n##4 20160: 2 2 3 2 5 3 | 2 2 2 7 -> 56\n##5 1814400: 2 2 3 2 5 3 2 2 2 7 | 2 3 3 5 -> 90\n##0\n##12 -> 12\n##30 -> 18\n##56 -> 26\n##90 -> 34\n\n\n",
                true
            ],
            [
                "t=int(input())\nn=[[2*int(input()),_] for _ in range(t)]\nn.sort()\nans=[1]*t\nprev=2\nan=1\nfor i in range(t):\n    k=n[i][0]\n    if k<=2:\n        ans[n[i][1]]=an\n    else:\n        while prev<k:\n            prev+=1\n            an=(an*prev)%1000000007\n        ans[n[i][1]]=an%1000000007\nprint(*ans,sep='\\n')\n",
                true
            ],
            [
                "\nn=int(input())\n\n\nmod = 1000000007\nfor j in range(n):\n    x=int(input())\n    ans=1\n    for i in range(2*x, 2, -1):\n        ans=(ans*i)%mod\n\n    ans=ans%mod\n    print(ans)\n\n",
                true
            ],
            [
                "import math\nfor i in range(int(input())):\n    a=int(input())\n    mod=10**9+7\n    if a==1:\n        print(1)\n    else:\n        u=2*a-1\n        ans=a\n        while u!=0:\n            ans=(ans*u)%mod\n            u-=1\n        print(ans)\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    bhanu=int(input())\n    ans=1\n    modull=1000000007\n    i=bhanu*2\n    while(i>2):\n        ans=(ans*i)%modull\n        i-=1\n    ans=ans%modull\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a = int(input())\n    r = 1\n    for i in range(3, 2 * a + 1):\n        r = (r * i) % (10**9+7)\n    print(r)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    fac=1\n    fac1=0\n    modulo=1000000007\n    b=2*n\n    a,bic=fac,fac1\n    mi=min(a,bic)\n    ma=max(a,bic)\n    for j in range(3,b+1):\n        tin=fac%modulo\n        jin=j%modulo\n        count=tin*jin\n        fac=count%modulo\n    fac=fac+mi+ma\n    out=mi+ma\n    print(fac-out)",
                true
            ],
            [
                "testcase=int(input())\nwhile testcase:\n    n=int(input())\n    fac=int(1)\n    for i in range(1,int(2*n+1)):\n        if(i!=2):\n            fac=(fac*i)%(10**9+7)\n    print(fac)\n    testcase-=1",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    f=1\n    k=(10**9)+7\n    for i in range(3,(2*n)+1):\n        f=(f*i)%k\n    print((f)%k)\n",
                true
            ],
            [
                "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\n\nimport copy\n\n \ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\n \ninput = inf.readline\n# sys.stdout = open('output.txt', 'w')\n \ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\n\ndef read_one_float():\n    return float(input().rstrip('\\n'))\n \n \ndef read_list_of_ints():\n    res = [int(val) for val in (input().rstrip('\\n')).split()]\n    return res\n\n\ndef read_list_of_ints_zero():\n    return [int(val) - 1 for val in (input().rstrip('\\n')).split()]\n\n\ndef read_str():\n    return input().rstrip()\n\n\ndef bfs(q, graph, dist):\n    while len(q):\n        cur_v = q.popleft()\n\n        for to in graph[cur_v]:\n            if dist[to] == -1:\n                dist[to] = dist[cur_v] + 1\n                q.append(to)\n\n\ndef sort_vert(n, graph):\n    dist = [-1] * n\n    q = deque()\n    dist[0] = 0\n\n    q.append(0)\n    bfs(q, graph, dist)\n\n    vertices = []\n    for vert, dist in enumerste(dist):\n        verticies.append((dist, vert))\n\n    verticies.sort()\n    res = [vert for (dist, vert) in verticies]\n\n    return res\n\n\ndef main():\n    # tests = read_one_int()\n\n    # for _ in range(tests):\n    #     vert = read_one_int()\n    #     v_w = []\n    #     for _ in range(n):\n    #         v_w.append(read_list_of_ints())\n\n    #     graph = {}\n    #     for _ in range(n - 1):\n    #         u, v = read_list_of_ints_zero()\n    #         if u not in graph:\n    #             graph[u] = [v]\n    #         else:\n    #             graph[u].append(v)\n    #         if v not in graph:\n    #             graph[v] = [u]\n    #         else:\n    #             graph[v].append(u)\n\n    #     vertices = sort_vertices(vert, graph)\n\n    #     cache = [[None, None] for _ in range(n)]\n\n    #     def f(prev_v, op):\n    #         pass\n\n\n    tests = read_one_int()\n    mod = 10**9 + 7\n\n    def mult(a, b, mod):\n        return ((a % mod) * (b % mod)) % mod\n\n    for _ in range(tests):\n        n = read_one_int()\n        n *= 2\n\n        res = 1\n        for i in range(3, n + 1):\n            res = mult(res, i, mod)\n\n        print(res)\n\nif __name__== '__main__':\n    main()\n",
                true
            ],
            [
                "\"\"  \n\n\"@author: Almas Turganbayev\" \n\n\"\"\n\nimport math as m\nfrom collections import deque\n\ndef RI():\n    return int(input())\ndef RF():\n    return float(input())\ndef RS():\n    return str(input())\ndef RIs():\n    return [int(x) for x in input().split()]\n\n\ndef isPrime(x: int) -> bool:\n    if x == 2:\n        return True\n    if x <= 1 or x%2 == 0:\n        return False\n    for i in range(3, int(m.sqrt(x)) + 1):\n        if x%i == 0:\n            return False\n    return True\n\ndef fact(x):\n    if x == 1:\n        return 1\n    return x*fact(x-1)\n\ndef perfectSquare(x: int) -> bool:\n    y = int(m.sqrt(x))\n    return y*y == x\n\ndef gcd(a: int, b: int) -> int:\n    return a if b == 0 else gcd(b, a%b)\n\ndef lcm(a: int, b: int) -> int:\n    return (a*b)//gcd(a,b)\n            \ndef biNum(x: int):\n    return \"{0:b}\".format(x)\n\ndef floatPoint(x: int, y: int):\n    s = \"{0:.\"+str(y)+\"f}\"\n    return s.format(x)\n\ndef main():\n    n = RI()\n    k = 2*n\n    INF = 1000000007\n    ans = 1\n    while k >= 3:\n        ans = (ans*k)%INF\n        k -= 1;\n    ans %= INF\n    print(ans)\n        \nif __name__ == \"__main__\":\n    t = 1\n    t = RI()\n    while t:\n        main()\n        t -= 1\n    ",
                true
            ],
            [
                "t=int(input())\nmod=1000000007\nfor i in range(0,t):\n    n=int(input())\n    ans=1\n    for j in range(3,2*n+1):\n        ans=ans*j%mod\n    print(ans)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n_ = 1\n_ = int(input())\nwhile _ > 0:\n    _ -= 1\n\n    n = int(input())\n    ans = 1\n    for x in range(3, 2*n+1):\n        ans *= x\n        ans %= 10**9+7\n    print(ans)\n",
                true
            ],
            [
                "# A. CQXYM Count Permutations\ndef calc(n,mod=10**9+7):\n    return (((dp[-1] * ((n-1)%mod))%mod)*(n%mod))%mod\ndp = [1]\nfor i in range(2,10**5+1):\n    dp.append(calc(2*i))\nfor _ in range(int(input())):\n    print(dp[int(input())-1])",
                true
            ],
            [
                "def f(a):\n    s=1\n    for i in range(3,a+1):\n        s*=i\n        s%=1000000007\n    return s\nfor i in range(int(input())):\n    x=int(input())\n    print(f(2*x))",
                true
            ],
            [
                "def main():\n    n = int(input())\n    ans = 1\n    for i in range(3, 2 * n + 1):\n        ans *= i\n        ans %= 1000000007\n    print(ans)\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        main()\n",
                true
            ],
            [
                "import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\nfor _ in range(int(inpu())) :\n    n = int(inpu())\n    mod = 10**9 + 7\n    ans = 0.5\n    for i in range(2, n*2 + 1) :\n        ans*=i\n        ans%=mod\n    prin(str(int(ans)) + '\\n')\n",
                true
            ],
            [
                "mod=1e9+7\nfor _ in range(int(input())):\n    n=int(input())\n    f=1\n    for i in range(3,2*n+1):\n        f=int((f*i)%mod)\n    print(f)\n    \n    \n",
                true
            ],
            [
                "for i in range(int(input())):\n    n =int(input())\n    n+=n\n    fact=1\n    for i in range(3,n+1):\n        fact*=i\n        fact%=1000000007\n    print(fact)",
                true
            ],
            [
                "from math import factorial\n\nMOD = 10**9 + 7\n\n\ndef solve(n):\n    result = 1\n    for i in range(1, (2 * n) + 1):\n        result = (result * i) % MOD\n\n    # print(result)\n    if result % 2:\n        return (result + MOD) // 2\n    else:\n        return ((result // 2) + MOD) % MOD\n\n\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        n = int(input())\n        print(solve(n))\n",
                true
            ],
            [
                "mod=10**9+7\nd={}\nd[2]=1\ntemp=1\nfor i in range(3,200001):\n    temp *=i%mod\n    temp %=mod\n    d[i]=temp\nfor _ in range(int(input())):\n    n=int(input())\n    print(d[2 * n])",
                true
            ],
            [
                "module = 10**9 + 7\nfactorial = [1, 1]\nfor num in range(3, 2 * 10**5 + 2):\n    factorial.append((factorial[-1] * num) % module)\n\nfor _ in range(int(input())):\n    n = int(input())\n    print(factorial[2 * n - 1])\n",
                true
            ],
            [
                "def modFact(n, p):\n    if n >= p:\n        return 0\n\n    result = 1\n    for i in range(3, n + 1):\n        result = (result * i) % p\n\n    return result\n\nt=int(input())\nfor i in range(t):\n    n = int(input()); \n    p = 1000000007\n    print (modFact(2*n, p))",
                true
            ],
            [
                "import sys \n#from fractions import Fraction\n#import re\n#sys.stdin=open('.in','r')\n#sys.stdout=open('.out','w')\n#import math \n#import random\n#import time\n#sys.setrecursionlimit(int(1e5))\ninput = sys.stdin.readline\n \n############ ---- USER DEFINED INPUT FUNCTIONS ---- ############\ndef inp():\n    return(int(input()))\ndef inara():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\n################################################################\n############ ---- THE ACTUAL CODE STARTS BELOW ---- ############\n\nMOD=10**9+7\ntwo=pow(2,MOD-2,MOD)\n\nfact=[1 for i in range(2*10**5+5)]\nfor i in range(1,2*10**5+1):\n    fact[i]=fact[i-1]*i\n    fact[i]%=MOD\n\nfor _ in range(inp()):\n    ans=fact[2*inp()]*two\n    ans%=MOD\n    print(ans)\n",
                true
            ],
            [
                "t = int(input())\nmod = 1000000007\nfor k in range(t):\n    out = 1\n    n = int(input())\n    for i in range(3,n*2+1):\n        out *= i\n        out %= mod\n    print(out)",
                true
            ],
            [
                "\"\"\"\nfrom itertools import permutations\nfor n in range(1, 7):\n    a = list(permutations(range(1, n * 2 + 1)))\n    print(len(a), end=' ')\n    cnt = 0\n    for i in a:\n        k = 0\n        for j in range(len(i) - 1):\n            if i[j] < i[j + 1]:\n                k += 1\n        if k >= n:\n            cnt += 1\n    print(cnt)\n\"\"\"\n\ndef f(x):\n    x *= 2\n    a = 1\n    for i in range(3, x + 1):\n        a *= i % (10 ** 9 + 7)\n        a %= (10 ** 9 + 7)\n    return a\n\nt = int(input())\nfor i in range(t):\n    print(f(int(input())))",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\n#from collections import Counter\n# def bubblesort(myList):\n#  for i in range(0,len(myList)-1):\n#   for j in range(0,len(myList)-i-1):\n#   if myList[j] > myList[j+1]:\n#     myList[j],myList[j+1]=myList[j+1],myList[j]\n#     return myList\n    \n\n       #countingSort(array, size)\ntest_case =inp();\ncurrent_test=0;\nwhile current_test < test_case:\n  current_test+=1 \n  n=inp();\n  ans = 1;\n  i = 3;\n  hell = 1000000007;\n  while i <= 2*n:\n    ans *=i;\n    i=i+1;\n    ans%=hell;\n  print(ans)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n  n = int(input())\n  ans = 1\n  for i in range(3,2*n+1):\n      ans=(ans*i)%1000000007\n  print(ans)  \n\n\n",
                true
            ],
            [
                "t=int(input())\nfor p in range(t):\n    n=int(input())\n    MOD=1000000007\n    ans=1\n    for i in range(3,2*n+1,1):\n        ans=(ans*i)%MOD\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    mod = 1000000007\n    res = 1\n    for i in range(3 , (2 * n)+1):\n        res = (res * i) % mod\n    print(res)",
                true
            ],
            [
                "mod=10**9+7\nans=[1]\nt=1\nfor i in range(1,2*(10**5)+1):\n    ans.append((t*i//2)%mod)\n    t=(t*i)%mod\nfor _ in range(int(input())):\n    n=int(input())\n    print(ans[2*n])",
                true
            ],
            [
                "import math\nMOD = 1000000007\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    ans = 1\n    for i in range(1, 2*n+1):\n        ans *= i\n        ans %= MOD\n    print((pow(2, MOD-2, MOD) * ans)%MOD)\n",
                true
            ],
            [
                "import math\nimport sys\nimport operator as op\nfrom functools import reduce\nfrom collections import OrderedDict\n\n\nclass Input:\n    @staticmethod\n    def string():\n        return str(input())\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\n\nclass Output:\n    @staticmethod\n    def print(res):\n        print(res)\n\n    @staticmethod\n    def string(res):\n        print(str(res))\n\n    @staticmethod\n    def list(res):\n        print(' '.join(str(x) for x in res))\n\n\nclass Algorithms:\n    @staticmethod\n    def isPrime(n):\n        return all(n % i != 0 for i in range(2, int(math.sqrt(n) + 1)))\n\n    @staticmethod\n    def getPrimeNumbers(n):\n        a = [1]\n        for num in range(2, n):\n            if all(num % i != 0 for i in range(2, int(math.sqrt(num) + 1))):\n                a.append(num)\n        return a\n\n    # \u0424\u0430\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f - \u0420\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0438\n    @staticmethod\n    def factorization(n):\n        res = {}\n        for i in range(2, n * n):\n            cnt = 0\n            while n % i == 0:\n                cnt += 1\n                n = n / i\n            if cnt > 0:\n                res[i] = cnt\n        if n > 1:\n            res[n] = 1\n        return res\n\n    # \u041d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0431\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c (\u041d\u041e\u0414)\n    @staticmethod\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            a = a % b\n            return Algorithms.gcd(b, a)\n\n    # \u041d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043e\u0431\u0449\u0435\u0435 \u043a\u0440\u0430\u0442\u043d\u043e\u0435 (\u041d\u041e\u041a)\n    @staticmethod\n    def lcm(a, b):\n        return abs(a * b) // Algorithms.gcd(a, b)\n\n    # \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438 =  0, 1, 1, 2, 3, 5, 8, 13, 21, 34\n    @staticmethod\n    def fibonacci(n):\n        a = [0, 1]\n        for i in range(2, n + 1):\n            a.append(a[i - 1] - a[i - 2])\n        return a[n]\n\n    @staticmethod\n    def z_func(s):\n        n = len(s)\n        z = [0] * n\n        l = r = 0\n        for i in range(1, n):\n            if r >= i:\n                z[i] = min(z[i - l], r - i + 1)\n            while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n                z[i] += 1\n            if i + z[i] - 1 > r:\n                l = i\n                r = i + z[i] - 1\n        return z\n\n    @staticmethod\n    def faktorial(n):\n        factorial = 1\n        for i in range(3, n + 1):\n            factorial *= i\n            factorial = factorial % (math.pow(10, 9) + 7)\n\n        return factorial\n\ndef solve():\n    n = Input.int()\n    p = 2 * n\n    print(int(Algorithms.faktorial(p)))\n\n\n#query_count = 1\nquery_count = Input.int()\nwhile query_count:\n    query_count -= 1\n    solve()",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    p=1\n    m = 1000000007\n    for j in range(2,2*n):\n        p=((p%m)*((j+1)%m))%m\n\n    p=p%m\n    print(p)",
                true
            ],
            [
                "MOD = 10**9+7\nclass ModInt:\n    def __init__(self, x):\n        self.x = x % MOD\n\n    def __str__(self):\n        return str(self.x)\n\n    __repr__ = __str__\n\n    def __add__(self, other):\n        return (\n            ModInt(self.x + other.x) if isinstance(other, ModInt) else\n            ModInt(self.x + other)\n        )\n\n    def __sub__(self, other):\n        return (\n            ModInt(self.x - other.x) if isinstance(other, ModInt) else\n            ModInt(self.x - other)\n        )\n\n    def __mul__(self, other):\n        return (\n            ModInt(self.x * other.x) if isinstance(other, ModInt) else\n            ModInt(self.x * other)\n        )\n\n    def __truediv__(self, other):\n        return (\n            ModInt(\n                self.x * pow(other.x, MOD - 2, MOD)\n            ) if isinstance(other, ModInt) else\n            ModInt(self.x * pow(other, MOD - 2, MOD))\n        )\n\n    def __pow__(self, other):\n        return (\n            ModInt(pow(self.x, other.x, MOD)) if isinstance(other, ModInt) else\n            ModInt(pow(self.x, other, MOD))\n        )\n\n    __radd__ = __add__\n\n    def __rsub__(self, other):\n        return (\n            ModInt(other.x - self.x) if isinstance(other, ModInt) else\n            ModInt(other - self.x)\n        )\n\n    __rmul__ = __mul__\n\n    def __rtruediv__(self, other):\n        return (\n            ModInt(\n                other.x * pow(self.x, MOD - 2, MOD)\n            ) if isinstance(other, ModInt) else\n            ModInt(other * pow(self.x, MOD - 2, MOD))\n        )\n\n    def __rpow__(self, other):\n        return (\n            ModInt(pow(other.x, self.x, MOD)) if isinstance(other, ModInt) else\n            ModInt(pow(other, self.x, MOD))\n        )\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**5)\nINF = 10**18\n\ndef solve():\n    N = int(input())\n    ans = ModInt(1)\n    for i in range(2,2*N+1):\n        ans *= i\n\n    print(ans/2)\n\nQ = int(input())\nfor _ in range(Q):\n    solve()",
                true
            ],
            [
                "#    ____                       _   _                _     _ _   \n#   / ___| __ _ _ __ __ _      | | | | __ _ _ __ ___| |__ (_) |_ \n#  | |  _ / _` | '__/ _` |_____| |_| |/ _` | '__/ __| '_ \\| | __|\n#  | |_| | (_| | | | (_| |_____|  _  | (_| | |  \\__ \\ | | | | |_ \n#   \\____|\\__,_|_|  \\__, |     |_| |_|\\__,_|_|  |___/_| |_|_|\\__|\n#                   |___/                                        \n\nfrom typing import Counter\nimport sys\nfrom collections import defaultdict as dd\nfrom math import *\n\ndef vinp():\n    return map(int,input().split())\ndef linp():\n    return list(map(int,input().split()))\ndef sinp():\n    return input()\ndef inp():\n    return int(input())\ndef mod(f):\n    return f % 1000000007\ndef pr(*x):\n    print(*x)\ndef finp():\n    f=open(\"input.txt\",\"r\")\n    f=f.read().split(\"\\n\")\n    return f\ndef finp():\n    f=open(\"input.txt\",\"r\")\n    f=f.read().split(\"\\n\")\n    return f\ndef fout():\n    return open(\"output.txt\",\"w\")\ndef fpr(f,x):\n    f.write(x+\"\\n\")\ndef csort(c):\n    sorted(c.items(), key=lambda pair: pair[1], reverse=True)\ndef indc(l,n):\n    c={}\n    for i in range(n):\n        c[l[i]]=c.get(l[i],[])+[i+1]\n    return c\n\nif __name__ ==\"__main__\":\n    cou=inp()\n    for _ in range(cou):\n        n = inp()\n        f = 1\n        for i in range(3,2*n +1):\n            f = mod(f * i)\n        pr(f)",
                true
            ],
            [
                "import sys \nimport math \ninput = lambda:sys.stdin.readline().strip()\nt = int(input())\nmod = 10**9+7\ndef solve(n):\n    num = 1\n    for i in range(n):\n        num = (num*(i+1))%mod \n    return num*pow(2,mod-2,mod)%mod\nwhile t:\n    t-=1\n    n = int(input())\n    print(solve(2*n))",
                true
            ],
            [
                "cn = 10**9 + 7\nc = 2 * cn\nf = [1]\nfor i in range(1, (10**5) * 2 + 5):\n    f.append((f[-1] * i) % c)\n\nfor i in range(int(input())):\n    n = int(input())\n    print(f[2 * n] // 2)\n\n",
                true
            ],
            [
                "mod = 1000000007\n\ndef solve():\n    n = int(input())\n    \n    ans = 1\n    for i in range(3, 2*n+1):\n        ans = ans*i % mod\n    \n    return ans\n\nt = int(input())\nfor _ in range(t):\n    print(solve())\n",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n = int(input())\n    a = 1 \n    for i in range(3,2*n+1):\n        a =a * i%(10**9 + 7)\n    print(a)",
                true
            ],
            [
                "mod = 1000000007 \n\ndef solve(n):\n    mul_ = 1 \n    for i in range(3, (2*n)+1):\n        mul_  = (mul_ * i) % mod\n\n    return (mul_) \n\nfor _ in range(int(input())):\n    n = int(input())\n\n    print(solve(n))\n",
                true
            ],
            [
                "# Return 1/2(2n!) as answer  for given n moduluo (10^9 + 7)\n# f[1] = \n# f[i]=((i<<1)-1ll)*f[i-1]%1000000007*(i<<1)%1000000007;\n# f[i] = 2n * (2n - 1) * f[i-1] \nR = lambda:map(int, input().split())\nlimit = 10**5\nmod = 10**9 + 7\n\nl = [None] * (limit+1)\n# The trouble that i was facing was due to\n# dividing by 2 post mod operation, the better move here\n# proved was to not even consider i = 2 for calculation\n\n# for 3*i !\nl[1] = 1\ni = 2\nwhile i <= limit:\n    l[i] = ((2*i)-1)*l[i-1]%mod*(2*i)%mod\n    i += 1\n\nfor s in [*open(0)][1:]:\n    print(l[int(s)])\n\n'''f=[1]\nfor i in range(3,8**6):\n    print(i)\n    f+=f[-1]*i%(10**9+7),'''",
                true
            ],
            [
                "Q = int(input())\n\n\n# \u9006\u5143\nmod = 10**9 + 7\n# mod = \u7d20\u6570\n_inv_t = {}\n_inv_t[1] = 1\n_inv_t[0] = 0\ndef inv(x, mod):\n  x %= mod\n  if x not in _inv_t:\n    _inv_t[x] = inv(mod % x, mod) * (mod - mod // x) % mod\n  return _inv_t[x]\n\ndef main():\n  N = int(input())\n  ans = 1\n  mod = 10**9 + 7\n  for i in range(1,2*N+1):\n    ans *= i\n    ans %= mod\n    \n  print((ans * inv(2, mod)) % mod)\n  \nfor _ in range(Q):\n  main()",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    #n,m,k=map(int,input().split())\n    #a=list(map(int,input().split()))\n    n=int(input())\n    m=1000000007\n    if(n==1):\n        print(1)\n        continue\n    s=1\n    for i in range(3,2*n+1,1):\n        s=(s*i)%m\n    print(s)\n",
                true
            ],
            [
                "t = int(input())\nwhile t > 0:\n    n = int(input())\n    res = 1\n    for i in range(2*n, 2, -1):\n        res = (res*i) % 1000000007\n    res %= 1000000007\n    print(res)\n    t -= 1",
                true
            ],
            [
                "# Return 1/2(2n!) as answer  for given n moduluo (10^9 + 7)\n# f[1] = \n# f[i]=((i<<1)-1ll)*f[i-1]%1000000007*(i<<1)%1000000007;\n# f[i] = (2n - 1) * f[i-1] * 2n\nR = lambda:map(int, input().split())\nlimit = 200000\nmod = 10**9 + 7\n\nl = [None] * (limit+1)\n# The trouble that i was facing was due to\n# dividing by 2 post mod operation, the better move here\n# proved was to not even consider i = 2 for calculation\ni = 3 \nl[2] = 1\nwhile i <= limit:\n    l[i] = (l[i-1]*i)%(10**9+7)\n    i += 1\n\nfor s in [*open(0)][1:]:\n    print(l[int(s) * 2])\n\n'''f=[1]\nfor i in range(3,8**6):\n    print(i)\n    f+=f[-1]*i%(10**9+7),'''",
                true
            ],
            [
                "T = int(input())\n\nfor t in range(T):\n    n = int(input())\n    n = 2*n\n    fact = 1/2\n\n    for i in range(2, n+1):\n        fact *= i\n        fact = fact % (10**9+7)\n\n    print(int(fact))\n",
                true
            ],
            [
                "def fast_factorial(n, p=1000000007):\n    n = 2*n\n    \n    if n >= p:\n        return 0\n\n    ans = 1\n\n    for i in range(3, n + 1):\n        ans = (ans * i) % p\n\n    return ans\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(fast_factorial(n))",
                true
            ],
            [
                "# fast factorial function for big numbers\ndef factorial(n):\n    for i in range(3, n):\n        n = n*i\n        n %= 1000000007\n    return n\n\n\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        print(factorial(2*n))\n",
                true
            ],
            [
                "def factorial(n):\n    product = 1\n    mult = 1000000007\n    for i in range(3,(2*n)+1):\n        product = (product*i)%mult\n    return product\ninp = int(input())\nfor k in range(inp):\n    inp1 = int(input())\n    print(factorial(inp1))",
                true
            ],
            [
                "for t in range(int(input())):\n    n = int(input())\n    v = 1\n    for i in range(3, 2 * n + 1):\n        v = (v * i) % 1000000007\n    print(v)\n",
                true
            ],
            [
                "# Har har mahadev\n# author : @ harsh kanani\n\nfor _ in range(int(input())):\n    n = int(input())\n    fact = 1\n    for j in range(3, 2 * n + 1):\n        fact = (fact * j) % (10 ** 9 + 7)\n    print(fact)",
                true
            ],
            [
                "md = 1000000007*2\nfor _ in range(int(input())):\n    a = 1\n    for i in range(2*int(input())):\n        a = (a*(i+1))%md\n        \n    print(a//2)",
                true
            ],
            [
                "res = \"\"\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 1\n    for i in range(3, 2*n+1):\n        ans *= i\n        ans %= 1000000007\n    res += str(ans) + \"\\n\"\nprint(res)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\nmod = (10**9) + 7\ndef add(a , b):return ((a%mod) + (b%mod))%mod\ndef mul(a , b):return ((a%mod) * (b%mod))%mod\ndef div(a , b):return mul((a%mod) , pow(b , mod - 2 , mod))\n\n\ndef answer():\n\n    f = 1\n    for i in range(1 , 2*n + 1):\n        f = mul(f , i)\n\n    return div(f , 2)\n        \n    \nfor T in range(int(input())):\n\n    n = int(input())\n    \n\n    print(answer())\n",
                true
            ],
            [
                "import math;import heapq;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());H=1000000000+7\nfor _ in range(I()):\n    n=I()\n    s=p=1\n    for i in range(1,2*n+1):\n        if i==2:\n            continue\n        s=(s * i%H)%H\n    print(s)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    m = 1000000007\n    res=1\n    for i in range(2*n,2,-1):\n        res = (res*i)%m\n    print(res%m)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a = int(input())\n    b = 1\n    for i in range(3, a*2+1):\n        b *= i\n        b = b%(10**9+7)\n    print(b)\n",
                true
            ],
            [
                "inp1 = int(input())\nfor i in range(inp1):\n    n = int(input())\n    a = 1000000007\n    b = 1\n    for j in range(3,2*n+1):\n        b = b*j%a\n    print(b)\n    \n",
                true
            ],
            [
                "from collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nfrom time import time\n\nMOD = 1000000007\nMAX = sys.maxsize\nMIN = -sys.maxsize\n\nt = 0\n\nclass get: \n    def int():\n        return list(map(int,input().split()))\n    def str():\n        return input().split()\n    def float():\n        return list(map(float,input().split()))\n    def map():\n        return map(int,input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x))+1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result,item)\n    return result\n\ndef LCM(a,b):\n    return (a*b)//(math.gcd(a,b))\n\ndef solve():\n    global t\n    t0 = time()\n    # Code is below\n    \n    n = int(input())\n    n = 2*n\n    if n == 2:\n        print(1)\n    else:\n        res = 1\n        for i in range(3,n+1):\n            res = res*i\n            res = res%MOD\n        print(res)\n    \n    # Code is above\n    t1 = time()\n    t += t1 - t0\n\nfor _ in range(int(input())):\n    solve()\n    \n#print(f\"Time taken = {round(t,3)} seconds\")",
                true
            ],
            [
                "def cuantas(n):\n    if n >= 3:\n        res = 3\n        for i in range(4, 2*n+1):\n            res *= i\n            res = res%1000000007\n        return res\n    elif n == 1:\n        return 1\n    else:\n        return 12\n\nN = int(input())\nfor i in range(N):\n    print(cuantas(int(input())))",
                true
            ],
            [
                "fact_arr = [1,1,1]\nfor i in range(3, 200001):\n    fact_arr.append(fact_arr[i - 1] * i % int(1e9 + 7))\nfor _ in range(int(input())):\n    n = 2 * int(input())\n    print(int((int((fact_arr[n])) % (1e9+7))))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    f=1\n    n=int(input())\n    mod=10**9+7\n    flag=0\n    for i in range(1,2*n+1):\n        f*=i\n        if not f%2:\n            if not flag:\n                f//=2\n                flag=1\n        f%=mod\n    print(f)",
                true
            ],
            [
                "from math import factorial\nn=int(input())\nfor i in range(n):\n    a=int(input())\n    s=1\n    for i in range (3,2*a+1):\n        s*=i\n        s%=10**9+7\n    print(s)\n        \n    \n    \n",
                true
            ],
            [
                "def factorial():\n    global n\n    a = 1\n    for j in range(3, n * 2 + 1):\n        a = (a * j) % 1000000007\n    return a\n\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    fact_n = factorial()\n    print(fact_n % 1000000007)\n",
                true
            ],
            [
                "from sys import stdin,stdout\nimport math\nimport bisect\nfrom collections import defaultdict, Counter\n\ninput=stdin.readline\n\ndef inp(): return map(int,input().split())\n\nmod=10**9+7\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n\n    result = 1\n    for i in range(3, n + 1):\n        result = (result * i) % p\n\n    return result\n\nfor _ in range(int(input())):\n    n=int(input())\n    print(modFact(2*n,mod))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    fact = 1\n    for j in range(3,2*n+1):\n        fact = (fact*j)%(10**9+7)\n    print(fact)",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    n=int(input())\n    f=1\n    m=10**9+7\n\n    for i in range(3,2*n+1):\n        f=(f*i)%m\n\n    print(f)\n    \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    n *= 2\n    fact = 1\n    for i in range(3,n+1):\n        fact *= i\n        fact = fact%(10**9 + 7)\n    print(fact%(10**9 + 7))",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nCQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for _ in range(int(input())):n, m, k = map(int, input().split());print('YES') if (k == 3 and m == (n * (n - 1)) // 2) or (k > 3 and m >= n - 1 and m <= (n * (n - 1)) // 2) or (n == 1 and m == 0 and k > 1) else print('NO')",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c = map(int,input().split())\n    t = ((a)*(a-1))//2\n    if b<a-1 or b>t:\n        print(\"NO\")\n    elif c <= 2 and a==2:\n        print(\"NO\")\n    elif c<=1 and a==1:\n        print(\"NO\")\n    elif a>=3 and (b<t and c<=3 or b>=t and c<=2):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n            \n",
                true
            ],
            [
                "import math\nimport sys\nimport operator as op\nfrom functools import reduce\nfrom collections import OrderedDict\n\n\nclass Input:\n    @staticmethod\n    def string():\n        return str(input())\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\n\nclass Output:\n    @staticmethod\n    def print(res):\n        print(res)\n\n    @staticmethod\n    def string(res):\n        print(str(res))\n\n    @staticmethod\n    def list(res):\n        print(' '.join(str(x) for x in res))\n\n\nclass Algorithms:\n    @staticmethod\n    def isPrime(n):\n        return all(n % i != 0 for i in range(2, int(math.sqrt(n) + 1)))\n\n    @staticmethod\n    def getPrimeNumbers(n):\n        a = [1]\n        for num in range(2, n):\n            if all(num % i != 0 for i in range(2, int(math.sqrt(num) + 1))):\n                a.append(num)\n        return a\n\n    # \u0424\u0430\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f - \u0420\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0438\n    @staticmethod\n    def factorization(n):\n        res = {}\n        for i in range(2, n * n):\n            cnt = 0\n            while n % i == 0:\n                cnt += 1\n                n = n / i\n            if cnt > 0:\n                res[i] = cnt\n        if n > 1:\n            res[n] = 1\n        return res\n\n    # \u041d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0431\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c (\u041d\u041e\u0414)\n    @staticmethod\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            a = a % b\n            return Algorithms.gcd(b, a)\n\n    # \u041d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043e\u0431\u0449\u0435\u0435 \u043a\u0440\u0430\u0442\u043d\u043e\u0435 (\u041d\u041e\u041a)\n    @staticmethod\n    def lcm(a, b):\n        return abs(a * b) // Algorithms.gcd(a, b)\n\n    # \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438 =  0, 1, 1, 2, 3, 5, 8, 13, 21, 34\n    @staticmethod\n    def fibonacci(n):\n        a = [0, 1]\n        for i in range(2, n + 1):\n            a.append(a[i - 1] - a[i - 2])\n        return a[n]\n\n    @staticmethod\n    def z_func(s):\n        n = len(s)\n        z = [0] * n\n        l = r = 0\n        for i in range(1, n):\n            if r >= i:\n                z[i] = min(z[i - l], r - i + 1)\n            while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n                z[i] += 1\n            if i + z[i] - 1 > r:\n                l = i\n                r = i + z[i] - 1\n        return z\n\n    @staticmethod\n    def faktorial(n):\n        factorial = 1\n        for i in range(3, n + 1):\n            factorial *= i\n            factorial = factorial % (math.pow(10, 9) + 7)\n\n        return factorial\n\n\n\ndef solve():\n    n, m, k = Input.list_int()\n    if n - m < 2 and  (n * (n - 1)) / 2 == m and k - 1 > 1:\n        print('YES')\n    elif n - m < 2 and (n * (n - 1)) / 2 > m and k - 1 > 2:\n        print('YES')\n    elif n - m < 2 and m == 0 and k - 1 > 0:\n        print('YES')\n    else:\n        print('NO')\n\n\n#query_count = 1\nquery_count = Input.int()\nwhile query_count:\n    query_count -= 1\n    solve()",
                true
            ],
            [
                "from sys import stdin\n\n\ndef read_input():\n    n, m, k = map(int, stdin.readline().split())     # read two integers of a line.\n    return n, m, k\n\n\ndef solve(n, m, k):\n    if k == 0 or k == 1:\n        return 'NO'\n    elif k == 2:\n        if n == 1 and m == 0:\n            return 'YES'\n        else:\n            return 'NO'\n    elif k == 3:\n        if m == n * (n - 1) // 2:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        if m >= n - 1 and m <= n * (n - 1) // 2:\n            return 'YES'\n        else:\n            return 'NO'\n\n\ndef main():\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n, m, k = read_input()\n        answer = solve(n, m, k)\n        print(answer)\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,k = list(map(int, input().split()))\n    answer = \"NO\"\n    if (m==0 and m==n-1 and k>=2) or ((m>=n-1 and m<=n*(n-1)//2) and ((m==n*(n-1)//2 and k>=3) or (k>=4))):\n        answer = \"YES\"\n    print(answer)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(400000)\ndef I(): return input().strip()\ndef II(): return int(input().strip())\ndef LI(): return [*map(int, input().strip().split())]\nimport copy, string, math, time, functools, fractions\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom itertools import permutations, chain, combinations, groupby\nfrom operator import itemgetter\nfrom types import GeneratorType  # for recursion\nfrom typing import Iterable, TypeVar, Union  # for sorted set\n\n\nfor _ in range(II()):\n    n, m, k = LI()\n    k -= 2\n    if n == 1:\n        if m == 0 and k >= 0:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    if m > (n * (n - 1)) // 2:\n        print('NO')\n        continue\n    if m == (n * (n - 1)) // 2:\n        if k >= 1:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    if m >= n - 1:\n        if k >= 2:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    print('NO')\n\n\n",
                true
            ],
            [
                "import sys\n \ninput = sys.stdin.readline\n \nrep = int(input())\n \nfor i in range(rep):\n    n, m, k = map(int, input().split())\n    if k <= 1:\n        print('NO')\n        continue\n    if n == 1:\n        if m == 0: print('YES')\n        else: print('NO')\n        continue\n        \n    a, b = n - 1, (n * (n - 1)) // 2\n    if a <= m <= b and k >= 4: \n        print('YES')\n    elif m == b and k >= 3:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "n = int(input())\nfor time in range(n):\n    a, b, c = (int(i) for i in input().split())\n    if a == 1 and b == 0 and c >= 2:\n        print(\"YES\")\n    elif c < 3 or a > b + 1 or b > a * (a - 1) / 2:\n        print(\"NO\")\n    elif b == a * (a - 1) / 2 and c >= 3:\n        print(\"YES\")\n    elif c >= 4:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, k = list(map(int, input().split()))\n    bad = 0\n    if m < n - 1:\n        bad = 1\n    elif m > n * (n - 1) / 2:\n        bad = 1\n    else:\n        if n == 1:\n            d = 0\n        elif n == 2:\n            d = 1\n        elif m == n * (n - 1) / 2:\n            d = 1\n        else:\n            d = 2\n        if k - 1 <= d:\n            bad = 1\n\n    if bad:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n, m, k = map(int, input().split())\n    if m < n-1 or m > n*(n-1)/2:\n        print('NO')\n    elif m == n*(n-1)/2 and k > 2:\n        print('YES')    \n    elif n == 1 and m == 0:\n        if k > 1:\n            print('YES')\n        else:\n            print('NO')\n    elif m >= n-1 and m < n*(n-1)/2 and k > 3:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\n\nt = int(input())\n\nwhile(t>0):\n    n, m, k = map(int, input().split())\n    \n    if (k==3 and m==(n*(n-1))//2) or (k>3 and m>=n-1 and m<=(n*(n-1))//2) or (n==1 and m==0 and k>1):\n        print('YES')\n    else:\n        print('NO')\n    \n    t-=1",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n, m, k = map(int, input().split())\n    if n == 1:\n        if m == 0 and k >= 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif n*(n-1)/2 >= m >= n-1:\n        if k >= 4:\n            print(\"YES\")\n        elif k == 3:\n            if m == n*(n-1)/2:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nwhile t > 0:\n    n, m, k = map(int, input().split())\n    res = \"\"\n    if (n*(n-1)/2 < m) or (n-1 > m):\n        res = \"NO\"\n    elif (k <= 1) and (n == 1):\n        res = \"NO\"\n    elif (k <= 2) and (n == 2):\n        res = \"NO\"\n    elif (n >= 3) and ((m < n*(n-1)/2) and (k <= 3) or (n-1 > m) or (m >= n*(n-1)/2) and (k <= 2)):\n        res = \"NO\"\n    else:\n        res = \"YES\"\n    print(res)\n    t -= 1",
                true
            ],
            [
                "# https://codeforces.com/problemset/problem/1581/B\n\n\nfrom sys import stdin,stdout\n\ninput=stdin.readline\n\ndef inp(): return map(int,input().split())\n\nfor _ in range(int(input())):\n    n,m,k=inp()\n    if k<=1:\n        print(\"NO\")\n    elif k==2:\n        if n==1 and m==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif k==3:\n        if m==(n*(n-1))//2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if m>=(n-1) and m<=(n*(n-1))//2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\n\nclass Node:\n    def __init__(self,value) -> None:\n        self.value = value\n        self.next = None\n\n    @staticmethod\n    def print_list(head):\n        curr = head\n        while curr!=None:\n            print(curr.value, end=\" \")\n            curr = curr.next\n        print(\"\")\n\nimport math\n\ndef modInverse(b,m):\n    g = math.gcd(b, m)\n    if (g != 1):\n        return -1\n    else:\n        return pow(b, m - 2, m)\n\ndef modDivide(a,b,m):\n    a = a % m\n    inv = modInverse(b,m)\n    return (inv*a) % m\n\nmod = 10**9+7\ndef fact(n):\n    x = 1\n    for k in range(1,2*n+1):\n        x = (x * k)%mod\n    return x\n\ndef main():\n    n,m,k = map(int,input().split())\n    k-=1\n    if m>=n-1 and m<=(n)*(n-1)//2:\n        if m==0:\n            if k>=1:\n                ans = \"YES\"\n            else:\n                ans = \"NO\"\n        elif m==(n)*(n-1)//2:\n            if k>=2:\n                ans = \"YES\"\n            else:\n                ans = \"NO\"\n        else:\n            if k>=3:\n                ans = \"YES\"\n            else:\n                ans = \"NO\"\n    else:\n        ans = \"NO\"\n    print(ans)\n\nfor _t in range(int(input())):\n    main()",
                true
            ],
            [
                "import sys\n#import random\nfrom bisect import bisect_right as lb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\nmod = 10**9 + 7\n\n\nfor _ in range (ii()) :\n    n,m,k = il()\n\n    if (k <= 1) :\n        print(\"NO\")\n        continue\n\n    if (n == 1) :\n        if (m == 0) :\n            prinT(\"YES\")\n        else :\n            prinT(\"NO\")\n        continue\n\n    if (m < n-1 or m > ((n*(n-1))//2)) :\n        prinT(\"NO\")\n        continue\n\n    t = (n*(n-1))//2\n\n    d = 0\n\n    if (m == t) :\n        d = 1\n    else :\n        d = 2\n\n    if (d < k-1) :\n        prinT(\"YES\")\n    else :\n        prinT(\"NO\")\n    \n    \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,k=map(int,input().split())\n    if m<n-1 or m>n*(n-1)//2:\n        print('NO')\n        continue\n    if n==1:\n        if 0<k-1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        if m==n*(n-1)//2:\n            r=1\n        else:\n            r=2\n        if r<k-1:\n            print('YES')\n        else:\n            print('NO')\n",
                true
            ],
            [
                "tc = int(input())\n\nfor t in range(tc):\n    n, m, k = map(int, input().split())\n\n    diam = 10\n    pos = False\n    full_graph_n = int(n*((n-1)/2))\n    if m > full_graph_n:\n        pos = False\n    elif n == 1:\n        diam = 0\n        pos = True\n    elif m == full_graph_n:\n        diam = 1\n        pos = True\n    elif m >= n-1:\n        diam = 2\n        pos = True\n    if diam < k-1 and pos:\n        print('YES')\n    else:\n        print('NO')\n    \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,k=map(int,input().split())\n    if(n==1):\n        if(m==0):\n            if k<=1:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if(k<=2):\n            print(\"NO\")\n        elif k==3:\n            if(m==(n*(n-1))//2):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if(m>=n-1 and m<=(n*(n-1))//2):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n    ",
                true
            ],
            [
                "ans = []\nfor _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    if (k >= 2 and n == 1 and m == 0) or (k == 3 and m == n*(n-1)//2) or (k > 3 and n-1 <= m and m <= n*(n-1)//2):\n        ans.append(\"YES\")\n    else:\n        ans.append(\"NO\")\nfor i in ans:\n    print(i)            ",
                true
            ],
            [
                "import math\n \nfor q in range(int(input())):\n    #n = int(input())\n    n, m, k= list(map(int, input().split()))                                       \n    k-=1\n    temp2 = n*(n-1)//2\n    temp =temp2-m\n    temp = temp+1 if m!=n-1 else n-1\n    #print(temp ,k)\n    if n==1 and k>0 and m==0:\n        print(\"YES\")\n    elif m>temp2:\n        print(\"NO\")\n    \n    elif m==temp2 and k>1:\n        print(\"YES\")\n    elif  m==n-1 and k>2:\n        print(\"YES\")\n    elif m<n-1:\n        print(\"NO\")\n    elif 2<k:\n        print(\"YES\")\n    else:\n        \n        \n        print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n,m,k=map(int, input().split())\n    if not (n * (n - 1) // 2 >= m >= n - 1):\n        print(\"NO\")\n        continue\n    if k < 2:\n        print(\"NO\")\n        continue\n    if k == 2:\n        if n == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        continue\n    if k == 3:\n        if m == n * (n - 1) // 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        continue\n    print(\"YES\")\n",
                true
            ],
            [
                "#                                               be n\u0103m \u2764xod\u0103\u2764\n# Created by Ali Heydari\nt = int(input())\nfor i in range(t):\n    n, m, k = [int(i) for i in input().split(' ')]\n    if (k > 1 and n == 1 and m == 0) or (k == 3 and m == n*(n-1)//2) or (k > 3 and n - 1 <= m <= n*(n-1)//2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "import math\nfrom collections import defaultdict, Counter\nfrom bisect import bisect_left\nfrom sys import stdin\n\ninput = stdin.readline\n    \nt = int(input())\n# a = list(map(int, input().split()))\nfor _ in range(t):\n    n,m,k = list(map(int, input().split()))\n    if m > n*(n-1)//2 or m < n-1:\n        print('NO')\n    elif k <= 1:\n        print('NO')\n    elif m == 0 or n ==1:\n        print('YES')\n    elif m < n-1 or m > (n*(n-1))//2:\n        print('NO')\n    elif m == (n*(n-1))//2:\n        if k > 2:\n            print('YES')\n        else:\n            print('NO')\n    elif k > 3:\n        print('YES')\n    else:\n        print('NO')\n    ",
                true
            ],
            [
                "\nt=int(input())\n\nfor _ in range(t):\n    n,m,k=map(int,input().split())\n\n    if n*(n-1)//2<m or k-2<0 or m<n-1:\n        print(\"NO\")\n        continue\n\n    if k==2:\n        if m==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if k==3:\n            if n*(n-1)//2==m:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor tc in range(t):\n    # n = int(input())\n    n,m,k = map(int,input().split())\n    if(k<=1 and n==1):\n        print(\"NO\")\n        continue\n    elif(n==2 and k<=2):\n        print(\"NO\")\n        continue\n    if(n-1>m or m>n*(n-1)//2):\n        print(\"NO\")\n        continue\n    elif(n>=3 and (m<n*(n-1)//2 and k<=3 or n-1>m or m>=n*(n-1)//2 and k<=2)):\n        print(\"NO\")\n        continue\n    else:\n        print(\"YES\")\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n,m,k = map(int,input().split())\n    if k<=1:\n        print(\"NO\")\n    elif k==2:\n        if n>1:\n            print(\"NO\")\n        else:\n            if m==0:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n    elif k==3:\n        if m==(n*(n-1))//2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if m>=n-1 and m<=(n*(n-1))//2:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for t in range(int(input())):\n    n,m,k = map(int,input().split())\n    d,e = (n*(n-1))//2,n-1\n    if n==1:\n        if (m==0 and k>1):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif n==2:\n        if (m==1 and k>2):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if m>=e and m<=d :\n            if d==m :\n                if k>2:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                if k>3:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "#Mamma don't raises quitter.................................................\n#manan is improving, keep hustling manan bhai ;)\nfrom collections import deque as de\nimport math\nimport sys\nfrom math import sqrt as sq\nfrom math import floor as fl\nfrom math import ceil as ce\nfrom sys import getfilesystemencodeerrors, stdin, stdout\nsys.setrecursionlimit(10**7)\nfrom collections import Counter as cnt\nfrom functools import  reduce\n\nfrom itertools import groupby as gb\n#from fractions import Fraction as fr\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom typing import Coroutine\n\ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    \nclass My_stack():\n    def __init__(self):\n        self.data = []\n    def my_push(self, x):\n        return (self.data.append(x))\n    def my_pop(self):\n        return (self.data.pop())\n    def __iter__(self):\n        return iter(self.data)\n    def my_peak(self):\n        return (self.data[-1])\n    def my_contains(self, x):\n        return (self.data.count(x))\n    def my_show_all(self):\n        return (self.data)\n    def isEmpty(self):\n      return len(self.data)==0\n    def len(self):\n        return len(self.data)\n    \n\narrStack = My_stack() \n\nclass graph():\n    def __init__(self):\n        self.graphdict = {}\n    def add_edge(self, node, neighbor):\n        if node not in self.graphdict:\n            self.graphdict[node]=[neighbor]\n        else:\n            self.graphdict[node].append(neighbor)\n    def show_edge(self):\n        for node in self.graphdict:\n            for neighbors in self.graphdict:\n                print(node, neighbors)\n    def show_graph(self):\n        return self.graphdict\n\n    \n\n\n    \n            \n\n#decimal to binary   \ndef decimalToBinary(n): \n    return bin(n).replace(\"0b\", \"\")\n#binary to decimal\ndef binarytodecimal(n):\n    return int(n,2)\n\ndef isPrime(n) : \n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\ndef get_prime_factors(number):\n    prime_factors = []\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number = number / 2\n    for i in range(3, int(math.sqrt(number)) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(int(i))\n            number = number / i\n\n    if number > 2:\n        prime_factors.append(int(number))\n    return prime_factors\n\ndef get_frequency(list):\n    dic={}\n    for ele in list:\n        if ele in dic:\n            dic[ele] += 1\n        else:\n            dic[ele] = 1\n    return dic\ndef Log2(x): \n    return (math.log10(x) / \n            math.log10(2)); \n\n \n# Function to get product of digits\ndef getProduct(n):\n    product = 1\n    while (n != 0):\n        product = product * (n % 10)\n        n = n // 10\n    return product\n#fucntion to find regular bracket sequence\ndef regularBracketsequence(str,arrStack):\n    for i in range(len(str)):\n        if str[i] =='(':\n            arrStack.my_push(str[i])\n        else:\n            if arrStack.isEmpty():\n                return False\n            else:\n                arrStack.my_pop()\n    if arrStack.isEmpty():\n        return True\n    else:\n        return False\n\n#function to find LCM of two numbers\ndef lcm(x,y):\n   lcm = (x*y)//math.gcd(x,y)\n   return lcm\n\ndef isPowerOfTwo(n): \n    return (math.ceil(Log2(n)) == math.floor(Log2(n))); \n#to check whether the given sorted sequnce is forming an AP or not....\ndef checkisap(list):\n    d=list[1]-list[0]\n    for i in range(2,len(list)):\n        temp=list[i]-list[i-1]\n        if temp !=d:\n            return False\n    return True\n\n#seive of erathanos\ndef primes_method5(n):\n    out ={}\n    sieve = [True] * (n+1)\n    for p in range(2, n+1):\n        if (sieve[p]):\n            out[p]=1\n            for i in range(p, n+1, p):\n                sieve[i] = False\n    return out\n#fucntion to get unique number to a cell in a matrix\ndef id(i, j, col): #one based indexing and columnwise numeration\n    ans= (i-1)*col\n    ans+=j\n    return ans\n\n#function to get the sum of digits\ndef getSum(n): \n      \n    strr = str(n)\n    list_of_number = list(map(int, strr.strip()))\n    return sum(list_of_number)\ndef checkperfectsquare(n):\n    if (ce(sq(n)) == fl(sq(n))):\n        return True\n    else:\n        return False\n#ceil  function gives wrong answer after 10^17 so i have to create my own :)\n# because i don't want to doubt on my solution of 900-1000 problem set.\ndef ceildiv(x,y): \n    return (x+y-1)//y \n  \ndef di():return map(int, input().split())\ndef ii():return int(input())\ndef li():return list(map(int, input().split()))\ndef si():return list(map(str, input()))\ndef indict():\n    dic = {}\n    for index, value in enumerate(input().split()):\n        dic[int(value)] = int(index)\n    return dic\ndef frqdict(): \n    # by default it is for integer input. :)\n    dic={}\n    for index, value in enumerate(input()):\n        if value not in dic:\n            dic[value] =1\n        else:\n            dic[value] +=1\n    return dic\n\n#sys.stdin = open('input.txt', 'r')\n#sys.stdout = open('output.txt', 'w')\n#practice like your never won\n#perform like you never lost\n \ndef func(n, m, k):\n    if m > n * (n - 1) // 2:\n        return \"NO\"\n    if k <= 1:\n        return \"NO\"\n    if k == 2:\n        if n == 1 and m == 0:\n            return \"YES\"\n        return \"NO\"\n    if k == 3:\n        if m == n * (n - 1) // 2:\n            return \"YES\"\n        return \"NO\"\n    if m < n - 1:\n        return \"NO\"\n    return \"YES\"\n \nt=ii()\nwhile t:\n    t-=1\n    n,m, k=di()\n    ans=func(n,m,k)\n    print(ans)\n\n\n        \n        \n    \n        \n\n\n        \n    \n    \n\n        \n\n            \n            \n\n\n\n\n\n\n\n\n        \n        \n\n    \n            \n\n\n        \n            \n\n\n\n\n\n    \n\n\n\n\n\n\n        \n\n    \n    \n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat, permutations\nimport math\nimport heapq\n\n\nMOD = int(1e9+7)\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inpf(force_list=False):\n    re = list(map(float, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\ndef lcm(x, y):\n    return x*y/(gcd(x,y))\n\ndef qmod(a, b, mod=MOD):\n    res = 1\n    while b:\n        if b&1:\n            res = (res*a)%mod\n        b >>= 1\n        a = (a*a)%mod\n        # print b\n    return res\n\ndef inv(a):\n    return qmod(a, MOD-2)\n\ndef query(num):\n    print(num)\n    stdout.flush()\n    return inp()\n\ndef C(n, k):\n    return fac[n] * inv((fac[k]*fac[n-k])%MOD)%MOD\n\n\ndef my_main():\n    kase = inp()\n    pans = []\n    cur = []\n    for _ in range(kase):\n        n, m, k = inp()\n        k-=2\n        if k<0:\n            pans.append(\"NO\")\n            continue\n        if n == 1 and m==0:\n            pans.append(\"YES\")\n            continue\n        mx = n*(n-1)/2\n        if k==1 and m == mx:\n            pans.append(\"YES\")\n            continue\n        if k>=2 and n-1 <= m <= mx:\n            pans.append(\"YES\")\n            continue\n        pans.append(\"NO\")\n    # print len(pans)\n    print('\\n'.join(pans))\n\nmy_main()\n\n",
                true
            ],
            [
                "T = int(input())\nfor _ in range(T):\n    n,m,k = map(int, input().strip().split())\n\n    if m > (n*(n-1)/2):\n        print('NO')\n    elif m < n-1:\n        print('NO')\n    elif n == 2:\n        if k > 2 :\n            print('YES')\n        else:\n            print('NO')\n    elif n == 1:\n        if k > 1:\n            print('YES')\n        else:\n            print('NO')\n    elif 1 + int(m != n*(n-1)//2) < k-1:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "import sys,math,itertools\nfrom collections import Counter,deque,defaultdict\nfrom bisect import bisect_left,bisect_right \nfrom heapq import heappop,heappush,heapify\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\ndef inpl_1(): return list(map(lambda x:int(x)-1, sys.stdin.readline().split()))\ndef inps(): return sys.stdin.readline()\ndef inpsl(x): tmp = sys.stdin.readline(); return list(tmp[:x])\ndef err(x): print(x); exit()\n\nfor _ in range(inp()):\n    n,m,k = inpl()\n    if m < n-1 or m > n*(n-1)//2:\n        print('NO')\n        continue\n    if (n,k) == (1,2):\n        print('YES')\n        continue\n    dist = 1 if m == n*(n-1)//2 else 2\n    if dist < k-1:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "import sys;input=sys.stdin.readline\ndef get():\n    return input().strip()\nfor _ in range(int(get())):\n    n,m,k=map(int,input().split())\n    k=k-2\n    if m>(n*(n-1))//2:\n        print(\"NO\")\n    elif m<(n-1):\n        print(\"NO\")\n    else:\n        if k>=2:\n            print(\"YES\")\n        elif k==1 and m==(n*(n-1))//2:\n            print(\"YES\")\n        elif k==0 and n==1:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,k = map(int,input().split())\n    if m>=n-1 and m<=(n*(n-1))//2:\n        if n == 1:\n            if k>=2:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        if m == (n*(n-1)//2):\n            if k>=3:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if k>=4:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n    else:\n        print(\"NO\")\n        \n    \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    nd = n * (n - 1) // 2\n    if m < n - 1 or m > nd:\n        print('NO')\n    elif n == 1:\n        print(['NO', 'YES'][k > 1])\n    elif m < nd:\n        print(['NO', 'YES'][k > 3])\n    else:\n        print(['NO', 'YES'][k > 2])",
                true
            ],
            [
                "def solve(n, m, k):\n\n    if m > n * (n - 1) // 2:  # multiedges\n        return False\n\n    if m < n - 1:  # Unconnected\n        return False\n\n    if n == 1:  # Single node\n        return True if k > 1 else False\n\n    elif m < n * (n - 1) // 2:  # Simple Graph, maximum diameter is 2\n        return True if k > 3 else False\n\n    else:  # Tree\n        return True if k > 2 else False\n\n\nt = int(input())\nfor i in range(t):\n    n, m, k = map(int, input().split())\n    print(\"YES\") if solve(n, m, k) else print(\"NO\")\n",
                true
            ],
            [
                "from math import sqrt,gcd,ceil,floor,log,factorial\nfrom itertools import permutations,combinations\nfrom collections import Counter, defaultdict\nimport collections,sys,threading\nimport collections,sys,threading\n#sys.setrecursionlimit(10**9)\n#threading.stack_size(10**8)\ninput=sys.stdin.readline\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().split())\ndef msi(): return map(str,input().split())\ndef li(): return list(mi())\n\nt=ii()\nfor _ in range(t):\n    n,m,k=mi()\n    \n    if k<=1:\n        print('NO')\n        \n    elif k==2:\n        if n<=1 and m==0:\n            print('YES')\n            \n        else:\n            print('NO')\n            \n    else:\n        if n-1<=m<=(n*(n-1))//2:\n            if m==(n*(n-1))//2:\n                if k>2:\n                    print('YES')\n                    \n                else:\n                    print('NO')\n                    \n            else:\n                if k>3:\n                    print('YES')\n                    \n                else:\n                    print('NO')\n            \n            \n        else:\n            print('NO')\n        \n        \n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    if n==1 and m==0 and k>1:\n        print(\"YES\")\n        continue\n    if m<(n-1):\n        print('NO')\n    \n    else:\n        e = n*(n-1)//2\n        if (e==m and k>=3) or (e>m and k>=4):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for i in range(int(input())):\n    n,m,k = map(int, input().split())\n    if n == 1 and m == 0: \n        d = 0\n    elif n-1 > m:\n        print(\"NO\")\n        continue\n    else:\n        me=n * (n-1) / 2 \n        if me==m:\n            d= 1\n        elif m > me:\n            print(\"NO\")\n            continue\n        else:\n            d = 2\n    if d< k-1:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "from sys import stdin,stdout\nimport math\nimport bisect\nfrom collections import defaultdict, Counter\n\ninput=stdin.readline\n\ndef inp(): return map(int,input().split())\n\nfor _ in range(int(input())):\n    n,m,k=inp()\n    if k<=1:\n        print(\"NO\")\n    elif k==2:\n        if n==1 and m==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif k==3:\n        if m==(n*(n-1))//2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if m>=(n-1) and m<=(n*(n-1))//2:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for fghj in range(int(input())):\n    n,m,k=list(map(int,input().split()))\n    if(m<n-1 or m>n*(n-1)/2):\n        print(\"NO\")\n        continue\n    if(n==1 and m==0 and k>1):\n        print(\"YES\")\n        continue\n    if(m==n*(n-1)/2):\n        dia=1\n    else:\n        dia=2\n    req=k-1\n    if(dia<req):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t=int(input())\n\nfor tests in range(t):\n    n,m,k=map(int,input().split(' '))\n\n    if m>(n*(n-1))//2:\n        print('NO')\n        continue\n    elif m<n-1:\n        print('NO')\n        continue\n    elif k-1>2:\n        print('YES')\n    elif k-1<=0:\n        print('NO')\n    elif k-1==1:\n        if n==1:\n            print('YES')\n        else:\n            print('NO')\n    elif m==(n*(n-1))//2 and k-1==2:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "for _ in range(int(input())) :\n    n, m, k = map(int, input().split())\n    p = (n - 1) * (n - 2) // 2\n    if k <= 1 or m < n - 1:\n        print(\"NO\")\n    elif k == 2 :\n        if m == 0:\n            print(\"YES\")\n        else :\n            print(\"NO\")\n    elif m >= p + n - 1 :\n        if m > p + n - 1:\n            print(\"NO\")\n        else :\n            print(\"YES\")\n    elif k >= 4 :\n        print(\"YES\")\n    else :\n        print(\"NO\")\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nfor nt in range(int(input())):\n    n, m, k = map(int,input().split())\n    if k<=1:\n        print (\"NO\")\n        continue\n\n    if m<n-1:\n        print (\"NO\")\n        continue\n\n    if m>(n*(n-1))//2:\n        print (\"NO\")\n        continue\n\n    if n==1:\n        print (\"YES\")\n        continue\n\n    if m==(n*(n-1))//2:\n        if k>2:\n            print (\"YES\")\n        else:\n            print (\"NO\")\n        continue\n\n    if k>3:\n        print (\"YES\")\n    else:\n        print (\"NO\")\n\n\n",
                true
            ],
            [
                "import sys\nimport string\nfrom decimal import Decimal\nfrom math import log, sqrt, floor\n############ ---- Input Functions ---- ############\n# input = sys.stdin.readline\n\n\ndef inp():\n    return(int(input()))\n\n\ndef inplist():\n    return(list(map(int, input().split())))\n\n\ndef inpstrlist():\n    s = input()\n    return(list(s[:len(s)]))\n\n\ndef invr():\n    return(map(int, input().split()))\n############ ---- Output Functions ---- ############\n\n\nt = int(input())\nfor _ in range(t):\n    n, m, k = invr()\n\n    if m < n-1:\n        print(\"NO\")\n        continue\n\n    max_edges = n*(n-1)//2\n    if m > max_edges:\n        print(\"NO\")\n        continue\n\n    if k == 0 or k == 1:\n        print(\"NO\")\n        continue\n\n    elif k == 2:\n        if m == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n    elif k == 3:\n        if m == max_edges:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "#Since we can for the graph, the best graph for this sort of problem is something like a tree but with 1 parent and (n-1) children, thus the diameter of the graph will always be 2 (You can check by sketching)\nfor t in range(int(input())):\n    n, m, k = map(int, input().split())\n    Kn = (n*(n-1))//2  #Number of nodes in a complete graph K with n nodes\n    if(Kn < m or (n-1)>m): #If Kn is less than m then there are self-loops, and if n-1 is less than m then the graph is not connected\n        print(\"NO\")\n    elif(n ==1):\n        if(k<=1):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        d = 2 #We set d here equal to 2 because this is the diameter in most cases\n        if(m == Kn):\n            d = 1 #The diamete in the case of a complete graph\n        if(d < (k-1)):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m,k = list(map(int, input().split()))\n    answer = \"NO\"\n    if m==0 and m==n-1 and k>=2:\n        answer = \"YES\"\n    elif(m>=n-1 and m<=n*(n-1)//2):\n        if m==n*(n-1)//2 and k>=3:\n            answer = \"YES\"\n        elif k>=4:\n            answer = \"YES\"\n    print(answer)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    answer = 'YES'\n    n, m, k = map(int, input().split())\n    if k <= 2:\n        if n != 1 or k != 2 or m != 0:\n            answer = \"NO\"\n    if k == 3:\n        if m != (n * (n-1)) // 2:\n            answer = \"NO\"\n    if k >= 3:\n        if not(n-1 <= m <= (n * (n-1)) // 2):\n            answer = \"NO\"\n    print(answer)",
                true
            ],
            [
                "def solution():\n  n,m,k = map(int,input().split())\n  if n*(n-1)/2<m or n-1>m : \n    print(\"NO\")\n  elif(k<=1 and n==1):\n    print(\"NO\")\n  elif((k<=2 and n==2)):\n        print(\"NO\")\n  elif(n>=3and(m<n*(n-1)/2 and k<=3 or n-1>m or m>=n*(n-1)/2 and k<=2)):\n    print(\"NO\")\n  else:\n    print(\"YES\")\n\nt = int(input())\nfor loop in range(t):\n  solution()",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\na=int(input())\nfor i in range(a):\n    n,m,k=map(int,input().split())\n\n    if(m<n-1 or m>(n*(n-1))//2):\n        print('NO')\n        continue\n\n    edges=n*(n-1)//2\n    if(k>3):\n        print('YES')\n        continue\n    if(k==3):\n        if(m==edges):\n            print('YES')\n        else:\n            print('NO')\n    if(k<=2):\n        if(k==2 and n==1):\n            print('YES')\n            continue\n        print('NO')\n",
                true
            ],
            [
                "import sys\n\nt = int(sys.stdin.readline())\n\nfor test in range(t):\n    n, m, k = map(int, sys.stdin.readline().split())\n    least = n - 1\n    most = n * (n-1) // 2\n    ans = \"NO\"\n    if least <= m <= most:\n        if k > 3:\n            ans = \"YES\"\n        else:\n            if k == 3 and m == most:\n                ans = \"YES\"\n            if k == 2 and n == 1:\n                ans = \"YES\"\n    print(ans)",
                true
            ],
            [
                "import sys\nreadline = sys.stdin.readline\n\nT = int(readline())\n\nfor t in range(T):\n  N,M,K = map(int,readline().split())\n  tree = N - 1\n  if M < tree:\n    print(\"NO\")\n    continue\n  \n  allpat = N * (N - 1) // 2\n  \n  if allpat < M:\n    print(\"NO\")\n    continue\n    \n  min_val = 2\n  \n  if allpat == M:\n    min_val = 1\n    \n  if N == 1 and M == 0:\n    min_val = 0\n    \n  if min_val < K - 1:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n",
                true
            ],
            [
                "from sys import stdin, stdout\ndef get_ints(): return map(int, stdin.readline().strip().split())\ndef printi(s): return stdout.write(s+'\\n')\nt=int(input())\nfor _ in range(t):\n    n,m,k=get_ints()\n    f=2\n    l=(n*(n-1))//2\n    if(l<m or n-1>m):\n        print(\"NO\")\n    elif(n==1):\n        if(m!=0 or k<=1):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if(m==l):\n            f=1\n        if(f<(k-1)):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "t=int(input())\ndef mm(l,n):\n\n    if l==0 or l==1:\n        return(l)\n    if l==n*(n-1)/2 and l>1:\n        return(1)    \n    else:\n        return(2)\nx=0\nwhile x<t:\n     li=list(map(int,input().split()))\n     n=li[0]\n     l=li[1]\n     k=li[2]\n     if l>(n-1)*n/2 or l<n-1:\n        print(\"NO\")\n     else:\n         if mm(l,n)<k-1:\n             print(\"YES\")\n         else:\n             print(\"NO\")\n     x=x+1",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n\n    if m == n * (n - 1) // 2 and n != 1:\n        if k >= 3:\n            print('YES')\n        else:\n            print('NO')\n    elif m > n * (n - 1) // 2:\n        print('NO')\n    elif n - m >= 2:\n        print('NO')\n    elif n == 1:\n        if k >= 2:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        if k >= 4:\n            print('YES')\n        else:\n            print('NO')\n",
                true
            ],
            [
                "def solve(n, m, k):\n    if n * (n - 1) // 2 < m or m < n - 1:\n        return False\n    if n == 1:\n        if k > 1:\n            return True\n        else:\n            return False\n    elif m < n * (n - 1) // 2:\n        if k > 3:\n            return True\n        else:\n            return False\n    else:\n        if k > 2:\n            return True\n        else:\n            return False\n\n\nt = int(input())\nfor i in range(t):\n    n, m, k = map(int, input().split())\n    ans = solve(n, m, k)\n    if ans:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    if m < n-1 or m > n*(n-1)//2:\n        print('NO')\n    else:\n        if k >= 4:\n            print('YES')\n        elif k == 2:\n            print('YES' if n==1 else 'NO')\n        elif k == 3:\n            print('YES' if m==n*(n-1)//2 else 'NO')\n        else:\n            print('NO')",
                true
            ],
            [
                "from sys import stdin\nimport collections, heapq, bisect, math\n \ninput = stdin.readline\n \ndef rint():\n    return int(input())\ndef rstr():\n    return input().strip()\ndef rlstr():\n    return list(input().strip().split())\ndef rlint():\n    return list(map(int, input().split()))\n\ndef main():\n    n , m , k = rlint()\n    k -= 1\n\n    if n*(n - 1) // 2 < m or m < n - 1 :\n        print('NO')\n        return \n\n    if n == 1 :\n        if k > 0 :\n            print('YES')\n\n        else :\n            print('NO')\n\n        return \n\n    if m == n*(n - 1) // 2 :\n        if k > 1 :\n            print('YES')\n\n        else :\n            print('NO')\n\n        return \n\n    if k > 2 :\n        print('YES')\n\n    else :\n        print('NO')\n                \nif __name__ == \"__main__\":\n    for _ in range(rint()) :\n        main()",
                true
            ],
            [
                "t = int(input())\nwhile t:\n    n,m,k = map(int, input().split())\n    mx = ((n)*(n-1))/2\n    mn = (n-1)\n    if m>mx: print('NO')\n    elif m<mn: print('NO')\n    elif k<=1: print('NO')\n    elif k==2: \n        if n==1: print('YES')\n        else: print('NO')\n    elif k==3:\n        if m==mx: print('YES')\n        else: print('NO')\n    else:\n        print('YES')\n    \n    t -= 1",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\n#sys.setrecursionlimit(10**7)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\n#Fenwick Tree point update range sum\ndef update_it(bit,i,val):\n    n=len(bit)\n    while(i<n):\n        bit[i]+=val\n        i+=i&(-i)\ndef get_ans(bit,i):\n    n=len(bit)\n    tot=0\n    while(i>0):\n        tot+=bit[i]\n        i-=i&(-i)\n    return tot\n\ndef hnbhai(tc):\n    n,m,k=sd()\n    if k<=1:\n        print(\"NO\")\n        return\n    if n==1:\n        print(\"YES\" if m==0 else \"NO\")\n        return\n    \n    if m<n-1 or m>(n*(n-1)//2):\n        print(\"NO\")\n        return\n    mx=n*(n-1)//2\n    if mx==m:\n        tot=1\n    else:\n        tot=2\n    if tot<k-1:\n        print(\"YES\")\n        return\n    print(\"NO\")\nfor _ in range(sb()):\n    hnbhai(_+1)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, m, k = map(int, input().split())\n    k -= 2\n    if 2*m > n*(n-1) or m < n-1:\n        print('NO')\n    else:\n        if k > 1:\n            print('YES')\n        else:\n            if k == 1:\n                if 2*m == n*(n-1):\n                    print('YES')\n                else:\n                    print('NO')\n            else:\n                if n == 1:\n                    if k >= 0:\n                        print('YES')\n                    else:\n                        print('NO')\n                else:\n                    print('NO')",
                true
            ],
            [
                "import sys \n#from fractions import Fraction\n#import re\n#sys.stdin=open('.in','r')\n#sys.stdout=open('.out','w')\n#import math \n#import random\n#import time\n#sys.setrecursionlimit(int(1e5))\ninput = sys.stdin.readline\n \n############ ---- USER DEFINED INPUT FUNCTIONS ---- ############\ndef inp():\n    return(int(input()))\ndef inara():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\n################################################################\n############ ---- THE ACTUAL CODE STARTS BELOW ---- ############\n\nfor _ in range(inp()):\n    n,m,k=invr()\n    flag=True\n    if m<n-1:\n        flag=False\n    elif 2*m>n*(n-1):\n        flag=False\n    elif k<=1:\n        flag=False\n    elif k==2:\n        if n!=1:\n            flag=False\n    elif k==3:\n        if 2*m<n*(n-1):\n            flag=False\n    \n    print(\"YES\" if flag else \"NO\")\n",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby, accumulate\nfrom copy import deepcopy\nMOD = 10**9+7\nINF = float('inf')\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n    n, m, k = rl()\n    if n == 1:\n        if m > 0 or k <= 1:\n            print('NO')\n        else:\n            print('YES') \n    elif m < n - 1 or k <= 2:\n        print('NO')\n    elif k == 3 and n * (n-1) // 2 != m:\n        print('NO')\n    elif m > n * (n-1) // 2:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "\n\ndef c(n):\n    return n*(n-1)//2\n\ndef solve(n, m, k):\n    if n==1:\n        ## dia is 0\n        if m==0 and k>=2:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==2:\n        ## dia is 1\n        if m==1 and k>=3:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if m < n-1:\n        return \"NO\"\n    if m < c(n):\n        ## diameter is 2\n        if k>3:\n            return \"YES\"\n    elif m == c(n):\n        ## dai is always 1\n        if k>=3:\n            return \"YES\"\n    return \"NO\"\nfor case in range(int(input())):\n    n, m, k = map(int, input().split())\n    ans = solve(n, m, k)\n    print(ans)\n",
                true
            ],
            [
                "#Since we can for the graph, the best graph for this sort of problem is something like a tree but with 1 parent and (n-1) children, thus the diameter of the graph will always be 2 (You can check by sketching)\nfor t in range(int(input())):\n    n, m, k = map(int, input().split())\n    Kn = (n*(n-1))//2  #Number of nodes in a complete graph K with n nodes\n    if(Kn < m or (n-1)>m): #If Kn is less than m then there are self-loops, and if n-1 is less than m then the graph is not connected\n        print(\"NO\")\n    elif(n ==1):\n        if(k > 1):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        d = 2 #We set d here equal to 2 because this is the diameter in most cases\n        if(m == Kn):\n            d = 1 #The diamete in the case of a complete graph\n        if(d < (k-1)):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n \n \n ",
                true
            ],
            [
                "# task 1581B\n\nt = int (input())\n\nfor i in range(0,t):\n    n,m,k = map(int, input().split(' '))\n    maxr = n * (n-1) / 2\n    if (m >= n-1) and (m < maxr) and 2 < k-1:\n        print ('YES')\n    elif m == maxr and 1 < k-1:\n        print ('YES')\n    elif (n == 1) and (m == 0) and (k >= 2):\n        print ('YES')\n    else:\n        print ('NO')\n\n",
                true
            ],
            [
                "t = int(input())\n\n\ndef f(n, m, k):\n    if k <= 1:\n        return False\n    if m > (n * (n-1) / 2):\n        return False\n    if (k - 2) == 0:\n        return n == 1\n    if (k - 2) == 1:\n        return m == (n) * (n - 1) // (2)\n    if (k - 2) >= 2:\n        return m >= (n - 1)\n\nfor _ in range(t):\n    n, m, k = map(int, input().split())\n\n    ok = f(n, m, k)\n    if ok:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n,m, k=map(int,input().split())\n    k -= 2\n    if n == 1 and m == 0 and k >= 0:\n        print(\"YES\")\n    elif k <1 or m < n-1 or m >n*(n-1)//2:\n        print(\"NO\")\n    elif k == 1:\n        if m == n*(n-1)//2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nCasimir has a rectangular piece of paper with a checkered field of size n \u00d7 m. Initially, all cells of the field are white.\n\nLet us denote the cell with coordinates i vertically and j horizontally by (i, j). The upper left cell will be referred to as (1, 1) and the lower right cell as (n, m).\n\nCasimir draws ticks of different sizes on the field. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: \n\n  1. First, the center cell (i, j) is painted black. \n  2. Then exactly d cells on the top-left diagonally to the center and exactly d cells on the top-right diagonally to the center are also painted black. \n  3. That is all the cells with coordinates (i - h, j \u00b1 h) for all h between 0 and d are painted. In particular, a tick consists of 2d + 1 black cells. \n\n\n\nAn already painted cell will remain black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3.\n\n<image>\n\nYou are given a description of a checkered field of size n \u00d7 m. Casimir claims that this field came about after he drew some (possibly 0) ticks on it. The ticks could be of different sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks).\n\nDetermine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "t=int(input())\nwhile t:\n    t-=1\n    nums=list(map(int,input().split()))\n    n,m,k=nums[0],nums[1],nums[2]\n    graph=[[] for _ in range(n)]\n    points=set()\n    for i in range(n):\n        word=input()\n        for j in range(m):\n            graph[i].append(word[j])\n            if word[j]=='*':points.add((i,j))\n    \n    check=set()\n    qualified=set()\n    def ops(radius):\n        for posx in range(n):\n            for posy in range(m):\n                #print(posx,posy,n)\n                if posy-radius<0 or posy+radius>=m:continue\n                if posx-radius<0:continue\n                if graph[posx][posy] != '*':continue\n                flag1=all(graph[posx-h][posy-h]=='*' for h in range(1,radius+1))\n                flag2=all(graph[posx-h][posy+h]=='*' for h in range(1,radius+1))\n                if flag1 and flag2:\n                    if (posx,posy) not in qualified:qualified.add((posx,posy))\n                    else:continue\n                    for h in range(radius+1):\n                        check.add((posx-h,posy-h))\n                        check.add((posx-h,posy+h))\n        return\n    \n    for i in range(min(n,m),k-1,-1):\n        ops(i)\n    #print(points)\n    #print(check)\n    \n    print(['NO','YES'][check==points])",
                true
            ],
            [
                "\ndef do(mat, i, j, k, n, m):\n    o = 1\n    ret = [[i,j]]\n    while i-o >=0 and j+o <m and j-o >=0 and mat[i-o][j+o] == '*' and mat[i-o][j-o] == '*':\n        ret.append([i-o, j+o])\n        ret.append([i-o, j-o])\n        o += 1\n    \n    if len(ret) >= 2*k + 1:\n        return ret\n    return []\n\n\n\n\n\n\nT = int(input())\nfor t in range(T):\n    n,m,k = map(int, input().split())\n    mat = [ list(input()) for i in range(n)]\n\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == '*':\n                a = do(mat, i, j, k, n, m)\n                if a:\n                    stars.extend(a)\n    \n    for ip in stars:\n        if ip:\n            mat[ip[0]][ip[1]] = '.'\n\n    \n    for i in range(n):\n        if '*' in mat[i]:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n    \n",
                true
            ],
            [
                "def add(visited,i,j,d,grid):\n    n,m = len(grid),len(grid[0])\n    left = 0\n    right = 0\n    ci,cj = i,j\n    while i >= 0 and j >= 0 and grid[i][j] == '*':\n        left += 1\n        i -= 1\n        j -= 1\n\n    i,j = ci,cj\n    while i >= 0 and j < m and grid[i][j] == '*':\n        right += 1\n        i -= 1\n        j += 1\n\n    #print(ci,cj,left,right,d)\n    if min(left,right) > d:\n        k = min(left,right)\n        i,j,ck = ci,cj,k\n        while i >= 0 and j >= 0 and k > 0:\n            visited.add((i,j))\n            i -= 1\n            j -= 1\n            k -= 1\n\n        k = ck\n\n        i,j = ci,cj\n        while i >= 0 and j < m and k > 0:\n            visited.add((i,j))\n            i -= 1\n            j += 1\n            k -= 1\n\ndef valley(grid,i,j):\n    n,m = len(grid),len(grid[0])\n    if i-1 >= 0 and j+1 < m and j-1 >= 0 and grid[i-1][j+1] == '*' and grid[i-1][j-1] == '*':\n        return True\n\n    return False\n\ndef solve(grid,n,m,k,ans):\n    valley_points = []\n    total = 0\n    visited = set()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and valley(grid,i,j):\n                valley_points.append((i,j))\n                \n            if grid[i][j] == '*':\n                total += 1\n\n    for p in valley_points:\n        add(visited,p[0],p[1],k,grid)\n\n    #print(visited,total)\n    if len(visited) != total:\n        ans.append('NO')\n        return\n\n    ans.append('YES')\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        n,m,k = map(int,input().split())\n        grid = []\n        for j in range(n):\n            grid.append(input())\n            \n        solve(grid,n,m,k,ans)\n\n    print('\\n'.join(ans))\n    \nmain()\n",
                true
            ],
            [
                "def get_size(possible_solution, matrix, i, j, m):\n    offset = 1\n    while i - offset >= 0 and j - offset >= 0 and j + offset < m and matrix[i-offset][j-offset] == '*' and matrix[i-offset][j+offset] == '*':\n        offset += 1\n    return offset - 1\n\n\ndef draw(possible_solution, matrix, i, j, m):\n    offset = 1\n    while i - offset >= 0 and j - offset >= 0 and j + offset < m and matrix[i-offset][j-offset] == '*' and matrix[i-offset][j+offset] == '*':\n        possible_solution[i-offset][j-offset] = True\n        possible_solution[i-offset][j+offset] = True\n        offset += 1\n\n\ndef solve():\n    n, m, k = [int(s) for s in input().split(\" \")]\n    matrix = []\n    for row in range(n):\n        matrix.append(list(input()))\n\n    possible_solution = [[False for j in range(m)] for i in range(n)]\n    for i in range(1, n):\n        for j in range(1, m-1):\n            if matrix[i][j] == '*':\n                if matrix[i-1][j-1] == '*' and matrix[i-1][j+1] == '*':\n                    if get_size(possible_solution, matrix, i, j, m) >= k:\n                        possible_solution[i][j] = True\n                        draw(possible_solution, matrix, i, j, m)\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '*' and possible_solution[i][j] == False:\n                print(\"NO\")\n                return\n    print(\"YES\")\n    return\n\n\nt = int(input())\nfor i in range(1, t + 1):\n    solve()\n",
                true
            ],
            [
                "for nt in range(int(input())):\n    n, m, upper = map(int,input().split())\n    g = []\n    d = []\n    for i in range(n):\n        g.append(list(input()))\n        d.append([0]*m)\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]==\"*\" and d[i][j]==0:\n                maxx = -1\n                for k in range(min(i, j, m-j-1)+1):\n                    if g[i-k][j-k]==\"*\" and g[i-k][j+k]==\"*\":\n                        maxx += 1\n                    else:\n                        break\n                if maxx>=upper:\n                    d[i][j] = 1\n                    for k in range(maxx+1):\n                        d[i-k][j-k] = 1\n                        d[i-k][j+k] = 1\n\n    ans = \"YES\"\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]==\"*\" and d[i][j]==0:\n                ans = \"NO\"\n                break\n    print (ans)\n\n\n",
                true
            ],
            [
                "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log2, ceil\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom bisect import insort\nfrom collections import Counter\nfrom collections import deque\nfrom heapq import heappush,heappop,heapify\nfrom itertools import permutations,combinations\nfrom itertools import accumulate as ac\nfrom random import randint as ri\nmod = int(1e9)+7\nmod = 998244353\n \nip = lambda : int(stdin.readline())\ninp = lambda: map(int,stdin.readline().split())\nips = lambda: stdin.readline().rstrip()\nout = lambda x : stdout.write(str(x)+\"\\n\")\n\n\nt = ip()\nfor _ in range(t):\n    n,m,k = inp()\n    arr = []\n    for i in range(n):\n        arr.append(ips())\n\n    dic = {}\n\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == \"*\":\n                tup = (i,j)\n                dic[tup] = False\n\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == \"*\":\n                d = 0\n                x = i\n                y = j\n                pt = 0\n                pos = [[x,y]]\n                while x>=0:\n                    x -= 1\n                    pt += 1\n                    \n                    if 0<= y-pt <= y+pt <= m-1:\n                        if arr[x][y-pt] == arr[x][y+pt] == \"*\":\n                            d += 1\n                            pos.append([x,y-pt])\n                            pos.append([x,y+pt])\n                        else:\n                            break\n                    else:\n                        break\n                \n                if d>= k:\n                    \n                    for ii in pos:\n                        tup = tuple(ii)\n                        dic[tup] = True\n            \n    flag = True\n\n    for i in dic:\n        flag = dic[i] and flag\n\n    if flag:\n        ans = \"YES\"\n    else:\n        ans = \"NO\"\n\n    print(ans)\n    \n                \n                \n                \n                \n    \n    \n\n    \n            \n            \n            \n        \n    \n            \n    \n        \n    \n        \n                    \n        \n        \n                    \n    \n    \n    \n    \n            \n                \n        \n            \n    \n    \n            \n\n            \n\n            \n            \n\n            \n\n            \n            \n            \n\n    \n    \n",
                true
            ],
            [
                "import sys\nINF = 10**20\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n \n \n\"\"\"\nFacts and Data representation\nConstructive? Top bottom up down\n\"\"\"\n\ndef solve():\n  n, m, k = I()\n  a = []\n\n  centres = []\n  for i in range(n):\n    a.append(input())\n    if i:\n      for j in range(1, m - 1):\n        if a[i][j] == a[i - 1][j - 1] == a[i - 1][j + 1] == '*':\n          centres.append((i, j))\n\n  visited = [[0] * m for i in range(n)]\n  for A, B in centres:\n    if A < k or B < k:\n      continue\n\n    cur = 1\n    while A - cur >= 0 and B - cur >= 0 and B + cur < m:\n      if a[A - cur][B - cur] == '.' or a[A - cur][B + cur] == '.':\n        break\n      cur += 1\n    if cur > k:\n      visited[A][B] = 1\n      cur = 1\n      while A - cur >= 0 and B - cur >= 0 and B + cur < m:\n        if a[A - cur][B - cur] == '.' or a[A - cur][B + cur] == '.':\n          break\n        visited[A - cur][B - cur] = visited[A - cur][B + cur] = 1\n        cur += 1\n\n  for i in range(n):\n    for j in range(m):\n      if a[i][j] == '*' and not visited[i][j]:\n        print('NO')\n        return\n  print('YES')\n\nt, = I()\nwhile t:\n  solve()\n  t -= 1\n",
                true
            ],
            [
                "def prettyprint(i,j,res):\n    print(i,j,res)\n    for line in f:\n        print(*line)\n\ndef test(i,j):\n    global f\n    if i < d:\n        return False\n    if j < d:\n        return False\n    if j+d >= m:\n        return False\n    for k in range(1,d+1):\n        if f[i-k][j-k] == \".\":\n            return False\n        else:\n            f[i-k][j-k] = \"m\"\n        if f[i-k][j+k] == \".\":\n            return False\n        else:\n            f[i-k][j+k] = \"m\"\n    k = d+1\n    while k <= i and j >= k and j+k < m and f[i-k][j-k] != \".\" and f[i-k][j+k] != \".\":\n        f[i - k][j - k] = \"m\"\n        f[i - k][j + k] = \"m\"\n        k += 1\n    return True\n\ndef test2(i,j):\n    global f\n    if i < d:\n        return False\n    if j < d:\n        return False\n    if j+d >= m:\n        return False\n    for k in range(1,d+1):\n        if f[i-k][j-k] == \".\":\n            return False\n        if f[i-k][j+k] == \".\":\n            return False\n    return True\n\nT = int(input())\nfor testcase in range(1,T+1):\n    n,m,d = list(map(int, input().split()))\n    f = []\n    for i in range(n):\n        f.append(list(input()))\n    res = True\n    for i in range(n-1,-1,-1):\n        for j in range(m):\n            if f[i][j] == \"*\":\n                res = test(i,j)\n                #prettyprint(i,j,res)\n            elif f[i][j] == \"m\":\n                mres = test2(i,j)\n                #prettyprint(i,j,mres)\n                if mres:\n                    mres = test(i,j)\n            if res == False:\n                break\n        if res == False:\n            break\n    if res:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for i in range(int(input())):\n    n,m,k=list(map(int,input().split()))\n    a=[[j for j in input()] for i in range(n)]\n    b=[[0 for j in range(m)] for i in range(n)]\n    for d in range(k,n):\n        for i in range(d,n):\n            for j in range(d,m-d):\n                if a[i][j]!='*':\n                    continue\n                for l in range(1,d+1):\n                    if a[i-l][j-l]!='*' or a[i-l][j+l]!='*':\n                        break\n                else:\n                    b[i][j]=1\n                    for l in range(1,d+1):\n                        b[i-l][j-l]=1\n                        b[i-l][j+l]=1\n    z=1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]=='*' and b[i][j]==0:\n                print('NO')\n                z=0\n                break\n        if z==0:\n            break\n    if z:\n        print('YES')",
                true
            ],
            [
                "import math\nimport collections\nfrom functools import lru_cache\nimport heapq\n\ndef process(case, n, m, k, G):\n    # print(n, m, k, G)\n    verified = [[0 for _ in range(m)] for _ in range(n)]\n    def check(x, y, G, k, verified):\n        # root\n        c = 0\n        for d in range(m + n):\n            if 0 <= x - d <= n - 1 and 0 <= y - d <= m - 1 and 0 <= y + d <= m - 1 and G[x - d][y - d] == \"*\" and G[x - d][y + d] == \"*\":\n                c += 1\n            else:\n                break\n        # print(c, x, y)\n        if c > k:\n            for d in range(m + n):\n                if 0 <= x - d <= n - 1 and 0 <= y - d <= m - 1 and 0 <= y + d <= m - 1 and G[x - d][y - d] == \"*\" and G[x - d][y + d] == \"*\":\n                    verified[x - d][y - d] = 1\n                    verified[x - d][y + d] = 1\n                else:\n                    break\n\n\n    for i in range(n):\n        for j in range(m):\n            if G[i][j] == \"*\":\n                check(i, j, G, k, verified)\n\n    for i in range(n):\n        for j in range(m):\n            if G[i][j] == \"*\" and verified[i][j] != 1:\n                print(\"NO\")\n                return\n\n    print(\"YES\")                \n\n\ntcs = int(input())\nfor tc in range(tcs):\n    # n = int(input())\n    n, m, k = list(map(int, input().split()))\n    G = []\n    for _ in range(n):\n        G.append(input().rstrip())\n    # N, X, T = list(map(int, input().split()))\n    process(tc + 1, n, m, k, G)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    a = [list(input()) for _ in range(n)][::-1]\n\n    new = [['.'] * m for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*':\n                h = 0\n                while (i+h < n) and (j-h) >= 0 and (j+h) < m and a[i+h][j-h] == a[i+h][j+h] == '*':\n                    h += 1\n\n                if h > k:\n                    for f in range(h):\n                        new[i+f][j-f] = new[i+f][j+f] = '*'\n\n    if new == a:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "def solve(n, m, k, grid):\n    \n    # go thru the grid from bottom to the top\n    for i in range(n-1, -1, -1):\n        for j in range(m):\n            if not grid[i][j]:\n                continue\n\n            # let's start building a 'tick` with i,j as its root\n            # we will be doing this until go beyond the boundaries of the grid\n            # or encouter any 0 \n\n            # measure the size of this tick \n            d = 0\n            \n            # until any of the indices go beyond the boundaries\n            #left = j - d - 1\n            #right = j + d + 1\n            #h = i - d - 1\n\n            while j - d - 1 >= 0 and j + d + 1 < m and i - d - 1 >= 0:\n                if grid[i-d-1][j-d-1] == 0 or grid[i-d-1][j+d+1] == 0:\n                    break\n                # we cannot mark cells here, because we have the condition d >= k\n                # we will mark them later, after we determined d\n                # grid[h][left] = 2\n                # grid[h][right] = 2\n                d += 1\n\n            # mark the cells\n            if d >= k:\n                for l in range(d+1):\n                    grid[i-l][j-l] = 2\n                    grid[i-l][j+l] = 2\n    \n    # check the grid\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                return \"NO\"\n    \n    return \"YES\"\n\n\nt = int(input())\n\nfor _ in range(t):\n    n, m , k = [int(x) for x in input().split()]\n    grid = []\n    for __ in range(n):\n        row = []\n        for c in input():\n            if c == '.':\n                row.append(0)\n            else:\n                row.append(1)\n        grid.append(row)\n        \n    print(solve(n, m, k, grid))\n",
                true
            ],
            [
                "inf = float('inf')\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\nimport array\n\n# sys.setrecursionlimit(10 ** 9)\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef maps(): return [int(i) for i in input().split()]\n\n\nlogging.basicConfig(\n    format=\"%(message)s\",\n    level=logging.WARNING,\n)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\n\nfor __ in range(*maps()):\n    n, m, k = maps()\n    arr = [[i for i in input()] for _ in range(n)]\n    check = [[False for __ in range(m)] for ___ in range(n)]\n\n    def func(size):\n        ok = False\n        for i in range(n):\n            for j in range(m):\n                if arr[i][j] == '*':\n                    ii = i - 1\n                    j1 = j - 1\n                    j2 = j + 1\n                    s = 0\n                    painted = True\n                    while ii < n and j1 >= 0 and j1 < m and j2 >= 0 and j2 < m and s < size and ii >= 0:\n                        if arr[ii][j1] == arr[ii][j2] == '*':\n                            if check[ii][j1] == False or check[ii][j2] == False:\n                                painted = False\n                            ii -= 1\n                            j1 -= 1\n                            j2 += 1\n                            s += 1\n                        else:\n                            break\n                    if check[i][j] == False:\n                        painted = False\n\n                    if s == size and not painted:\n                        check[i][j] = True\n                        ii = i - 1\n                        j1 = j - 1\n                        j2 = j + 1\n                        s = 0\n                        ok = True\n                        while ii < n and j1 >= 0 and j1 < m and j2 >= 0 and j2 < m and s < size:\n                            if arr[ii][j1] == arr[ii][j2] == '*':\n                                check[ii][j1] = check[ii][j2] = True\n                                ii -= 1\n                                j1 -= 1\n                                j2 += 1\n                                s += 1\n                            else:\n                                break\n        return ok\n    ans = 'YES'\n    # iff = False\n    for sz in range(n + 1, 0, -1):\n        x = func(sz)\n        if x and sz < k:\n            ans = 'NO'\n    #     if x:\n    #         iff = True\n\n    # if not iff:\n    #     ans = 'NO'\n\n    if func(0):\n        ans = 'NO'\n\n    print(ans)\n",
                true
            ],
            [
                "import sys\nimport math\nfrom bisect import bisect_left\nimport heapq\nfrom collections import deque\nfrom itertools import product, permutations\nimport random\ndef II():\n    return int(sys.stdin.readline())\n \ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n    return map(int, sys.stdin.readline().split())\n \ndef SI():\n    return sys.stdin.readline().strip()\n \ndef C(n, k, mod):\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\n \ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\n\ndef helper(a, n):\n    b = [0 for i in range(len(a))]\n    for i in range(len(a)):\n        b[(i-n)%len(a)] = a[i]\n    return b\n\n\nfor _ in range(II()):\n    n,m,k = MI()\n    l = []\n    boo = True\n    v = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        l.append(list(SI()))\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == '*':\n                for x in range(k, n+1):\n                    boo = True\n                    for y in range(x+1):\n                        if i-y < 0 or j+y >=m or j-y < 0:\n                            boo = False\n                            break\n                        if not l[i-y][j+y] == l[i-y][j-y] == '*':\n                            boo = False\n                            break\n                    if boo:\n                        for y in range(x+1):\n                            v[i-y][j+y] = v[i-y][j-y] = '*'\n    boo = l == v\n    print('YES' if boo else 'NO')",
                true
            ],
            [
                "#!/usr/bin/env pypy3\nfrom sys import stdin\n\nlines = [line.strip() for line in stdin]\nt = int(lines[0])\nln = 1\nfor _ in range(t):\n    n, m, k = map(int, lines[ln].split())\n    ln += 1\n    g = [[1 if c == \"*\" else 0 for c in lines[ln+i]] for i in range(n) ]\n    \n    ln += n\n\n    ng = [[0]*m for i in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            for d in range(k, 20):\n                if not (i - d >= 0 and j - d >= 0 and j+d < m): break\n                \n                if all((g[i-h][j-h] and g[i-h][j+h]) for h in range(d+1)):\n                    for h in range(d+1):\n                        ng[i-h][j-h] = 1\n                        ng[i-h][j+h] = 1\n\n    print(\"YES\" if g == ng else \"NO\")\n\n",
                true
            ],
            [
                "try:\n    t=int(input())\n    for i in range(t):\n        n,m,k=map(int,input().split())\n        a=[]\n        for j in range(n):\n            x=input()\n            a.append(list(x))\n        done={}\n        possible=1\n        for j in range(n-1,-1,-1):\n            for j2 in range(m-1,-1,-1):\n                #print(\"j %d j2 %d \"%(j,j2))\n                if a[j][j2]==\"*\":\n                    #print(\"star %d %d \"%(j,j2))\n                    count=0\n                    for i2 in range(j-1,-1,-1):\n                        if j2+count+1<m and j2-count-1>=0:\n                            #print(\"check : \",i2,j2+count+1,j2-count-1)\n                            if a[i2][j2+count+1]==\"*\" and a[i2][j2-count-1]==\"*\":\n                                count+=1\n                                #print(count)\n                                #done[(i2,j2+count)]=1\n                                #done[(i2,j2-count)]=1\n                            else:\n                                break\n                    if count>=k:\n                        done[(j,j2)]=1\n                        count=0\n                        for i2 in range(j-1,-1,-1):\n                            if j2+count+1<m and j2-count-1>=0:\n                                #print(\"check : \",i2,j2+count+1,j2-count-1)\n                                if a[i2][j2+count+1]==\"*\" and a[i2][j2-count-1]==\"*\":\n                                    count+=1\n                                    #print(count)\n                                    done[(i2,j2+count)]=1\n                                    done[(i2,j2-count)]=1\n                                else:\n                                    break\n                    if done.setdefault((j,j2),0)==0:\n                        possible=0\n                        break\n            if possible==0:\n                break\n        if possible==1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\nexcept:\n    pass\n",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\ndef find(x,y):\n    val = 1\n    while y-val>=0 and y+val<m and x-val>=0:\n        if mat[x-val][y-val]==\"*\" and mat[x-val][y+val]==\"*\":\n            val+=1\n        else:\n            break\n    return val-1\n\ndef mark(x,y,val):\n    for i in range(val+1):\n        visited[x-i][y-i]=0\n        visited[x-i][y+i]=0\n\nfor _ in range(int(input())):\n    n,m,k = map(int,input().split())\n    mat,visited = [],[]\n    for i in range(n):\n        l = list(input())\n        mat.append(l)\n        visited.append([1 if x==\"*\" else 0 for x in l])\n    # print(mat,visited)\n    for i in range(k,n):\n        for j in range(k,m-k):\n            if mat[i][j]==\"*\":\n                x = find(i,j)\n                if x>=k:\n                    mark(i,j,x)\n    s = 0\n    for i in visited:\n        s+=sum(i)\n    print(\"NO\" if s>0 else 'YES')",
                true
            ],
            [
                "import sys\n#sys.setrecursionlimit(20000)\n#from collections import deque #Counter\n#from itertools import accumulate\n#from functools import product\n#import math\n\n\ndef rall():\n    return sys.stdin.readlines()\ndef rl():\n    return sys.stdin.readline().strip()\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr( something='' ):\n    sys.stdout.write( str(something) + '\\n')\ndef pra( array ):\n    sys.stdout.write( ' '.join([str(x) for x in array]) + '\\n')\n\n\ndef solve(array):\n    return array\n\n\nif __name__ == '__main__':\n\n    NT = int( rl() )\n    #a,b = map(int,rl().split(' '))\n\n    for _ in range(NT):\n        n,m,k = map(int, rl().split(' '))\n        grid = []\n        for _ in range(n):\n            row = [1 if c=='*' else 0 for c in rl()]\n            grid.append(row)\n        #grid = grid[::-1]\n\n        needs = set()\n        for r in range(n):\n            for c in range(m):\n                if grid[r][c]==1:\n                    needs.add((r,c))\n\n        len_neg  = [[x for x in row] for row in grid]\n        len_pos  = [[x for x in row] for row in grid]\n        min_tick  = [ [0]*m for _ in range(n)]\n\n        can_cover = set()\n        feasible = True\n        for r in range(1,n):\n            row = grid[r]\n            for c in range(1,m-1):\n                #print(r,c)\n                if row[c] == 0:\n                    pass\n                else: # has 1\n                    len_neg[r][c] = len_neg[r-1][c-1] + 1\n                    len_pos[r][c] = len_pos[r-1][c+1] + 1\n                    #min_tick[r][c] = min(len_neg[r][c],len_pos[r][c])\n                    minsize = min(len_neg[r][c],len_pos[r][c])\n                    if minsize > k:\n                        min_tick[r][c] = minsize\n                        # then can make tick of that size\n                        can_cover.add( (r,c) )\n                        for o in range(1,minsize):\n                            if r-o >= 0:\n                                if c-o >= 0:\n                                    can_cover.add( (r-o,c-o) )\n                                if c+o<m:\n                                    can_cover.add( (r-o,c+o) )\n\n        '''\n        print('needs:',needs)\n        print('can_cover:',can_cover)\n        print('grid:')\n        for row in len_neg:\n            print('  ',row)\n        print('len_neg:')\n        for row in len_neg:\n            print('  ',row)\n        print('len_pos:')\n        for row in len_pos:\n            print('  ',row)\n        print('min_tick:')\n        for row in min_tick:\n            print('  ',row)\n        '''\n\n        #print(needs-can_cover)\n        print('YES' if len(needs-can_cover)==0 else 'NO')\n\n",
                true
            ],
            [
                "I=input\nfor _ in[0]*int(I()):\n n,m,k=map(int,I().split());*a,=''.join(I()for _ in[0]*n);n*=m;f=0\n while n:\n  n-=1;l=0;j=n\n  while l<=min(n%m,m-n%m-1,n//m)and a[j-l]<'.'>a[j+l]:l+=1;j-=m\n  if l>k:\n   while l:l-=1;j+=m;a[j-l]=a[j+l]='!'\n  f|=a[n]=='*'\n print('YNEOS'[f::2])",
                true
            ],
            [
                "for i in range(int(input())):\n    m,n,k=map(int,input().split())\n    ma=[]\n    for i in range(m):\n        q=input()\n        l=[]\n        for o in q:\n            l.append(o)\n        ma.append(l)    \n    p=[['.' for i in range(n)]for j in range(m)]\n    for j in range(m):\n        for h in range(n):\n            count=1\n            flag=0\n            if ma[j][h]=='*':\n                row=j-1\n                col1=h-1\n                col2=h+1\n                while True:\n                    if col1<0 or row<0 or col2>=n:\n                        break\n                    if ma[row][col1]!=\"*\" or ma[row][col2]!=\"*\":\n                        break\n                    count+=2\n                    row-=1\n                    col1-=1\n                    col2+=1\n                if count>=2*k+1:\n                    flag=1\n                if flag==1:\n                    p[j][h]=\"*\"\n                    row=j-1\n                    col1=h-1\n                    col2=h+1\n                    while True:\n                        if col1<0 or row<0 or col2>=n:\n                            break\n                        if ma[row][col1]!=\"*\" or ma[row][col2]!=\"*\":\n                            break\n                        p[row][col1]=\"*\"\n                        p[row][col2]=\"*\"\n                        row-=1\n                        col1-=1\n                        col2+=1\n    if p==ma:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n                    \n                    ",
                true
            ],
            [
                "# This code is contributed by Siddharth\n\n\nfrom sys import *\ninput = stdin.readline\n\n\n\nimport threading\nfrom bisect import *\nimport math\nfrom collections import *\nimport operator\nfrom heapq import *\nfrom itertools import *\ninf=10**19\nmod=10**9+9\nMOD=998244353\nS1 = 'abcdefghijklmnopqrstuvwxyz'\nS2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ndrow = [0, 1, 0, -1]\ndcol = [-1, 0, 1, 0]\n# inverse modulo power pow(a,-1,mod) - it only works on py 3.8 ( *not in pypy )\nsetrecursionlimit(200005)\ndef asc(c):\n    return ord(c)-97+1\n\n\n\n# ==========================================> Code Starts Here <=====================================================================)\n\n\ndef check(x,y):\n    i=x\n    j=y\n    cnt1=0\n    while i-1>=0 and j-1>=0 and mat[i-1][j-1]=='*' :\n        cnt1+=1\n        i-=1\n        j-=1\n    cnt2=0\n    while x-1>=0 and y+1<m and mat[x-1][y+1]=='*':\n        cnt2+=1\n        x-=1\n        y+=1\n    return min(cnt1,cnt2)\n\ndef solve(val,x,y):\n    ans[x][y]='*'\n    i=x-1\n    j=y-1\n    for _ in range(val):\n        ans[i][j]='*'\n        i-=1\n        j-=1\n    x-=1\n    y+=1\n    for _ in range(val):\n        ans[x][y]='*'\n        x-=1\n        y+=1\n\ndef wow():\n    for i in range(n):\n        if mat[i]!=ans[i]:\n            return False\n    return True\n\nfor _ in range(int(input())):\n    n,m,k=map(int,input().split())\n    mat=[]\n    for _ in range(n):\n        row=list(input())[:-1]\n        mat.append(row)\n    ans=[['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j]=='*':\n                get=check(i,j)\n                if get>=k:\n                    solve(get,i,j)\n\n    if wow():\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    \n    n,m,k= list(map(int,input().split()))\n    arr=[]\n    \n    for i in range(n):\n        x= input()\n        for j in range(m):\n            if x[j]==\"*\":\n                arr.append((i,j))\n   \n    arr= sorted(arr,key=lambda x: (-x[0],x[1]))\n    arrset= set(arr)\n    seen=set()\n    \n    for xy in arr:\n        cout=0\n        r=xy[0]\n        cr=xy[1]\n        cl=xy[1]\n        f=True\n        temp=set()\n        \n        while f:\n            if (r-1,cr+1) in arrset and (r-1,cl-1) in arrset:\n                cout+=1\n                temp.add((r-1,cr+1))\n                temp.add((r-1,cl-1))\n                cr+=1\n                cl-=1\n                r-=1\n            \n                \n            else:\n                f=False\n        \n        if cout>=k:\n            seen.add(xy)\n            seen.update(temp)\n            \n    # print(arr)\n    # print(seen)        \n    if len(seen)==len(arr):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n   \n    \n    \n    \n    \n    \n    \n    \n    \n                \n                \n    \n    \n",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\nn_test = int(input())\n\nboard = []\nrow, col, min_size = 0, 0, 0\n\ndef is_possible(r, c):\n    global row, col, min_size, board\n    if board[r][c] == '*' or board[r][c] == 'z':\n        # count left_up\n        cl = 0\n        while r-cl >= 0 and c - cl >= 0:\n            if board[r-cl][c-cl] == '*' or board[r-cl][c-cl] == 'z':\n                cl += 1\n            else:\n                break\n        \n        cr = 0\n        while r-cr >= 0 and c + cr < col:\n            if board[r-cr][c+cr] == '*' or board[r-cr][c+cr] == 'z':\n                cr += 1\n            else:\n                break\n\n        siz = min(cr, cl)\n\n        #print('ans', r,c, siz, board[r][c])\n        if siz <= min_size and board[r][c] == '*':\n            return False\n        if siz > min_size:\n            for i in range(siz):\n                board[r-i][c-i] = 'z'\n                board[r-i][c+i] = 'z'\n            \n    return True\n\nfor i in range(n_test):\n    row, col, min_size = map(int, input().split())\n    board = []\n    for _ in range(row):\n        temp = input()\n        temp_list = []\n        for i in range(len(temp)):\n            temp_list.append(temp[i])\n        board.append(temp_list)\n    flag = False\n    for _r in range(1,row+1):\n        for _c in range(1,col+1):\n            if board[row-_r][col-_c] == '*' or board[row-_r][col-_c] ==  'z':\n                if not is_possible(row-_r, col-_c):\n                    flag = True\n                    break\n        if flag:\n            break\n    if flag:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n    ",
                true
            ],
            [
                "def readField(n):\n  field = []\n  for i in range(n):\n    field.append(input())  \n  return field\n\ndef initDotTable(n, m):\n  table = []\n  for i in range(n):\n    row = []\n    for j in range(m):\n      row.append('0')\n    table.append(row)\n  return table\n\ndef getTick(field,y,x,k):\n  m = len(field[0])\n  tick = [[y,x]]\n  d = 1\n  while y-d>=0 and x-d>=0 and x+d<m and field[y-d][x-d] == '*' and field[y-d][x+d] == '*':\n    tick.append([y-d,x-d])\n    tick.append([y-d,x+d])\n    d+=1\n  if d-1<k:\n    return []\n  else:\n    return tick\n\nt = int(input())\nfor tc in range(t):\n  n,m,k = map(int,input().split())\n  field = readField(n)\n  table = initDotTable(n,m)\n  ct = 0\n  for row in field:\n    for cell in row:\n      if cell == '*': ct+=1\n  if ct == 0:\n    print(\"YES\")\n  elif n==1 or m<3:\n    print(\"NO\")\n  else:\n    for y in range(k,n):\n      for x in range(k,m-k):\n        if field[y][x] == '*':\n          tick = getTick(field, y, x, k)\n          if len(tick) > 0:\n            #mark tick\n            for pt in tick:\n              table[pt[0]][pt[1]] = 'X'\n    isValid = True\n    for y in range(n):\n      if not isValid: break\n      for x in range(m):\n        if field[y][x] == '*' and table[y][x] == '0':\n          isValid = False\n          break\n    if isValid:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n\n",
                true
            ],
            [
                "from math import gcd\nfor i in range(int(input())):\n    n,m,t=map(int,input().split())\n    vis=[[0]*m for i in range(n)]\n    #print(vis)\n    ans='YES'\n    l=[]\n    for i in range(n):\n        l.append(input())\n    for i in range(n-1,0,-1):\n        for j in range(m):\n            if l[i][j]=='*':\n                d=1\n                for k in range(i-1,-1,-1):\n                    if j-d>=0 and j+d<m:\n                        if l[k][j-d]=='*' and l[k][j+d]=='*':\n                            vis[k][j-d]+=1\n                            vis[k][j+d]+=1\n                            d+=1\n                        else:\n                            break\n                \n                if d>t:\n                    vis[i][j]=1\n                    continue\n                else:\n                    d=1\n                    for k in range(i-1,-1,-1):\n                        if j-d>=0 and j+d<m:\n                            if l[k][j-d]=='*' and l[k][j+d]=='*':\n                                vis[k][j-d]-=1\n                                vis[k][j+d]-=1\n                                d+=1\n                            else:\n                                break\n    #print(vis)           \n    for i in range(n):\n        for j in range(m):\n            if l[i][j]=='*' and vis[i][j]==0:\n                ans='NO'\n    print(ans)",
                true
            ],
            [
                "#import io,os\n#input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\ndef main(t):\n\n\n    m,n,k = map(int,input().split())\n    grid = []\n\n    for i in range(m):\n        grid.append(input())\n        \n    visited = [[False for j in range(n)]  for i in range(m)]\n\n    left = [[0 for j in range(n)] for i in range(m)]\n    right = [[0 for j in range(n)] for i in range(m)]\n\n\n\n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j]=='*':\n                if i>0 and j>0 and grid[i-1][j-1]=='*':  left[i][j] = left[i-1][j-1] + 1\n                if i>0 and j+1<n and grid[i-1][j+1]=='*':  right[i][j] = right[i-1][j+1] + 1\n\n    for i in range(m):\n        for j in range(n):\n            num = min(left[i][j],right[i][j])\n            if num>=k:\n                li = i\n                lj = j\n                ri = i\n                rj = j\n                visited[i][j] = True\n                while num>0:\n                    li -= 1\n                    lj -= 1\n                    ri -= 1\n                    rj += 1\n                    visited[li][lj] = True\n                    visited[ri][rj] = True\n                    num -= 1\n\n#    print(left)\n#    print(right)\n#    print(visited)\n    ans = \"YES\"\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j]=='*' and not visited[i][j]:\n                ans = \"NO\"\n\n                    \n\n            \n\n    print(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT = int(input())\nt = 1\nwhile t<=T:\n    main(t)\n    t += 1\n",
                true
            ],
            [
                "import math\nimport sys\nfrom sys import stdout\nfrom collections import deque\n\nclass SeqTree:\n    tree = [0] * 1\n    size = 0\n    def init(self, n):\n        self.size = 1\n        while self.size < n:\n            self.size = self.size * 2\n        self.tree = [[math.inf, 0]] * (2 * self.size - 1)\n\n    def set(self, i, v):\n        self.setWithPos(i, v, 0, 0, self.size)\n\n    def build(self, a):\n        n = len(a)\n        self.init(n)\n        self.buildWithPos(a, 0, 0, self.size)\n\n    def sum(self, l, r):\n        return self.sumWithPos(l, r, 0, 0, self.size)\n\n    def min(self, l, r):\n        return self.minWithPos(l, r, 0, 0, self.size)\n\n    def buildWithPos(self, a, x, lx, rx):\n        if rx - lx == 1:\n            if lx < len(a):\n                self.tree[x] = [a[lx], 1]\n        else:\n            m = (lx + rx) // 2\n            self.buildWithPos(a, 2 * x + 1, lx, m)\n            self.buildWithPos(a, 2 * x + 2, m, rx)\n            var1 = self.tree[2 * x + 1]\n            var2 = self.tree[2 * x + 2]\n            res = [math.inf, 0]\n            if var1[0] == var2[0]:\n                res = [var1[0], var1[1] + var2[1]]\n            elif var1[0] < var2[0]:\n                res = var1\n            else:\n                res = var2\n            self.tree[x] = res\n\n    def setWithPos(self, i, v, x, lx, rx):\n        if rx - lx == 1:\n            self.tree[x] = [v, 1]\n            return\n        m = (lx + rx) // 2\n        if i < m:\n            self.setWithPos(i, v, 2 * x + 1, lx, m)\n        else:\n            self.setWithPos(i, v, 2 * x + 2, m, rx)\n        var1 = self.tree[2 * x + 1]\n        var2 = self.tree[2 * x + 2]\n        res = [math.inf, 0]\n        if var1[0] == var2[0]:\n            res[0] = var1[0]\n            res[1] = var1[1] + var2[1]\n        elif var1[0] < var2[0]:\n            res = var1\n        else:\n            res = var2\n        self.tree[x] = res\n\n    def sumWithPos(self, l, r, x, lx, rx):\n        if lx >= r or l >= rx:\n            return 0\n        if lx >= l and rx <= r:\n            return self.tree[x]\n        m = (lx + rx) // 2\n        s1 = self.sumWithPos(l, r, 2 * x + 1, lx, m)\n        s2 = self.sumWithPos(l, r, 2 * x + 2, m, rx)\n        return s1 + s2\n\n    def minWithPos(self, l, r, x, lx, rx):\n        if lx >= r or l >= rx:\n            return [math.inf, 0]\n        if lx >= l and rx <= r:\n            return self.tree[x]\n        m = (lx + rx) // 2\n        var1 = self.minWithPos(l, r, 2 * x + 1, lx, m)\n        var2 = self.minWithPos(l, r, 2 * x + 2, m, rx)\n        res = [math.inf, 0]\n        if var1[0] == var2[0]:\n            res[0] = var1[0]\n            res[1] = var1[1] + var2[1]\n        elif var1[0] < var2[0]:\n            res = var1\n        else:\n            res = var2\n        return res\n\nclass IO:\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\n    @staticmethod\n    def implode(sep, array):\n        return sep.join(str(x) for x in array)\n\ndef solve():\n    n, m, k = IO.list_int()\n    res = [];\n    myres = [];\n    ac = [0]\n    mch = 0\n    v = 0\n    for i in range(n):\n        myres.append([0] * m)\n        res.append(input())\n\n    def check(i, j):\n        ctr = 0\n        for x in range(22):\n            if i - x < 0:\n                break;\n            if j - x < 0 or j + x >= m:\n                break\n            if res[i - x][j - x] == '*' == res[i - x][j + x]:\n                ctr += 1\n            else:\n                break\n        return ctr > k\n\n    def write(i, j):\n        for x in range(n):\n            if i - x < 0:\n                return True\n            if j - x < 0 or j + x >= m:\n                return False\n\n            if res[i - x][j - x] == '*' == res[i - x][j + x]:\n                if myres[i - x][j - x] == 0:\n                    ac[0] += 1\n                if myres[i - x][j + x] == 0:\n                    ac[0] += 1\n                myres[i - x][j - x] = myres[i - x][j + x] = 1\n            else:\n                return False\n\n    for i in range(n - 1, 0, -1):\n        for j in range(m):\n            if res[i][j] == '*':\n                if check(i, j):\n                    mch += 1;\n                    prev = ac\n                    write(i, j)\n                    if ac != prev:\n                        v += 1\n    for i in range(n):\n        for j in range(m):\n            if (res[i][j] == '*' and myres[i][j] != 1) or (res[i][j] == '.' and myres[i][j] != 0):\n                print('NO')\n                return\n\n    print('YES')\n\n\n\n\n\n# query_count = 1\nquery_count = IO.int()\nwhile query_count:\n    query_count -= 1\n    solve()\n",
                true
            ],
            [
                "import sys,math,itertools\nfrom collections import Counter,deque,defaultdict\nfrom bisect import bisect_left,bisect_right \nfrom heapq import heappop,heappush,heapify\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\ndef inpl_1(): return list(map(lambda x:int(x)-1, sys.stdin.readline().split()))\ndef inps(): return sys.stdin.readline()\ndef inpsl(x): tmp = sys.stdin.readline(); return list(tmp[:x])\ndef err(x): print(x); exit()\n\nfor _ in range(inp()):\n    n,m,k = inpl()\n    s = [input() for _ in range(n)]\n    seen = [[0]*m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if s[i][j] == '.': continue\n            for h in range(100):\n                n0i,n0j = i-h,j-h\n                n1i,n1j = i-h,j+h\n                if 0<=n0i<n and 0<=n1i<n and 0<=n0j<m and 0<=n1j<m and s[n0i][n0j] == s[n1i][n1j] == '*':\n                    continue\n                else:\n                    break\n            if h-1 < k: continue\n            for d in range(h):\n                n0i,n0j = i-d,j-d\n                n1i,n1j = i-d,j+d\n                seen[n0i][n0j] = 1\n                seen[n1i][n1j] = 1\n    res = 1\n    for i in range(n):\n        for j in range(m):\n            if s[i][j] == '*' and not seen[i][j]:\n                res = 0\n    print('YES' if res else 'NO')",
                true
            ],
            [
                "import math;import heapq;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());H=1000000000+7\nfor _ in range(I()):\n    n,m,k=M()\n    l=[]\n    d=[[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        l.append(S())\n    for i in range(n):\n        for j in range(m):\n            if l[i][j]=='*':\n                h=1\n                while i-h>=0 and j-h>=0 and j+h<m and l[i-h][j-h]=='*' and l[i-h][j+h]=='*':\n                    h+=1\n                if h-1>=k:\n                    for t in range(h):\n                        d[i-t][j-t]=1\n                        d[i-t][j+t]=1\n    f=0\n    for i in range(n):\n        for j in range(m):\n            if d[i][j]==0 and l[i][j]=='*':\n                f=1\n                break\n        if f==1:\n            break\n    if f==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "#!/usr/bin/env pypy3\nfrom sys import stdin\n\nlines = [line.strip() for line in stdin]\nt = int(lines[0])\nln = 1\nfor _ in range(t):\n    n, m, k = map(int, lines[ln].split())\n    ln += 1\n    g = [[int(c == \"*\") for c in lines[ln+i]] for i in range(n)]\n    ln += n\n\n    # reachable\n    r = [[0]*m for i in range(n)]\n\n    for i in range(k, n):\n        for j in range(k, m-k):\n            # check size k tick\n            if not all((g[i-h][j-h] and g[i-h][j+h]) for h in range(k+1)):\n                continue\n\n            # mark size k tick\n            for h in range(k+1):\n                r[i-h][j-h] = r[i-h][j+h] = 1\n\n            # try increasing d from k\n            d = k+1\n            while i - d >= 0 and j - d >= 0 and j+d < m and \\\n                g[i-d][j-d] and g[i-d][j+d]:\n                    r[i-d][j-d] = r[i-d][j+d] = 1\n                    d += 1\n\n\n    print(\"YES\" if g == r else \"NO\")\n\n",
                true
            ],
            [
                "import sys\nimport collections as cc\nimport heapq as hp\ninput = sys.stdin.readline\nI = lambda :list(map(int,input().split()))\ntry:\n\n    for tc in range(int(input())):\n        n,m,k = I()\n        ar = [list(input().strip()) for i in range(n)]\n        # for i in ar:\n        #     print(*i)\n        #print()\n        visi = set()\n        def ch(i,j):\n            ii,jj = i,j\n            left = 0\n            right = 0\n            while (ii>=0 and jj>=0 and ii<n and jj<m and ar[ii][jj]=='*'):\n                #print(ii,jj,ar[ii][jj],\"left\")\n\n                ii-=1\n                jj-=1\n                left+=1\n\n            ii,jj = i,j\n            while (ii>=0 and jj>=0 and ii<n and jj<m and ar[ii][jj]=='*'):\n                #print(ii,jj,ar[ii][jj],\"rigght\")\n\n                ii-=1\n                jj+=1\n                right+=1\n            te = min(left,right)\n            # if te-1:\n            #     #print(i,j,te-1)\n            #     pass\n\n            le,re = te,te\n            ii,jj = i,j\n            if te-1>=k:\n                #print(i,j,\"tta\",te-1)    \n                while le:\n                    le-=1\n                    #print(ii,jj)\n                    visi.add((ii,jj))\n                    ii-=1\n                    jj-=1\n                ii,jj = i,j\n                while re:\n                    re-=1\n                    visi.add((ii,jj))\n                    ii-=1\n                    jj+=1\n\n            return te-1\n\n        ans = 0\n        x = set()\n        for i in range(n-1,-1,-1):\n            for j in range(m):\n                if ar[i][j]=='*':\n                    now = ch(i,j)\n                    if now<k and (i,j) in visi:\n                        continue\n                    x.add(now)\n        if x:\n\n            if min(x)>=k:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\nexcept Exception as e:\n    print(sys.exc_info(),e)\n\n",
                true
            ],
            [
                "\ndef naiveSolve():\n    \n    \n    \n    return\n\n\n\ndef solve():\n    \n    \n    \n    return\n\n\n\ndef main():\n    \n    t=int(input())\n    allans=[]\n    for _ in range(t):\n        n,m,k=readIntArr()\n        grid=[]\n        for __ in range(n):\n            grid.append(input())\n        \n        arr=[['.' for __ in range(m)] for ___ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j]=='*':\n                    d=0\n                    i1=i\n                    j1=j2=j\n                    while i1-1>=0 and j1-1>=0 and j2+1<m\\\n                        and grid[i1-1][j1-1]==grid[i1-1][j2+1]=='*':\n                        d+=1\n                        i1-=1\n                        j1-=1\n                        j2+=1\n                    if d>=k:\n                        i1=i;\n                        j1=j2=j\n                        for __ in range(d+1):\n                            arr[i1][j1]=arr[i1][j2]='*'\n                            i1-=1\n                            j1-=1\n                            j2+=1\n        ans='YES'\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j]!=arr[i][j]:\n                    ans='NO'\n        allans.append(ans)\n                    \n        \n    multiLineArrayPrint(allans)\n    \n    return\n\n\nimport sys\n# input=sys.stdin.buffer.readline #FOR READING PURE INTEGER INPUTS (space separation ok)\ninput=lambda: sys.stdin.readline().rstrip(\"\\r\\n\") #FOR READING STRING/TEXT INPUTS.\n\ndef oneLineArrayPrint(arr):\n    print(' '.join([str(x) for x in arr]))\ndef multiLineArrayPrint(arr):\n    print('\\n'.join([str(x) for x in arr]))\ndef multiLineArrayOfArraysPrint(arr):\n    print('\\n'.join([' '.join([str(x) for x in y]) for y in arr]))\n \ndef readIntArr():\n    return [int(x) for x in input().split()]\n# def readFloatArr():\n#     return [float(x) for x in input().split()]\n \ndef makeArr(defaultValFactory,dimensionArr): # eg. makeArr(lambda:0,[n,m])\n    dv=defaultValFactory;da=dimensionArr\n    if len(da)==1:return [dv() for _ in range(da[0])]\n    else:return [makeArr(dv,da[1:]) for _ in range(da[0])]\n \ndef queryInteractive(x):\n    print('{}'.format(x))\n    sys.stdout.flush()\n    return int(input())\n \ndef answerInteractive(ans):\n    print('! {}'.format(ans))\n    sys.stdout.flush()\n \ninf=float('inf')\n# MOD=10**9+7\n# MOD=998244353\n\nfrom math import gcd,floor,ceil\n# from math import floor,ceil # for Python2\n \nfor _abc in range(1):\n    main()\n",
                true
            ],
            [
                "def check_con(a,n,m,x,y,k):\n    X = x\n    Y = y\n    cnt1 = 0\n    cnt2 = 0\n    x-=1\n    y-=1\n    while x>=0 and y>=0:\n        if a[x][y]=='*':\n            cnt1+=1\n        else:\n            break\n        x-=1\n        y-=1\n    X-=1\n    Y+=1\n    while X>=0 and Y<m:\n        if a[X][Y]=='*':\n            cnt2+=1\n        else:\n            break\n        X-=1\n        Y+=1\n    return min(cnt1,cnt2)\n\nfor _ in range(int(input())):\n    n,m,k = map(int,input().split())\n    K = k\n    a = []\n    for i in range(n):\n        x = input()\n        a.append([])\n        for j in x:\n            a[-1].append(j)\n    check = [[False for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]=='*':\n                cnt = check_con(a,n,m,i,j,K)\n                if cnt>=K:\n                    check[i][j] = True\n                    for k in range(cnt):\n                        check[i-k-1][j-k-1] = True\n                        check[i-k-1][j+k+1] = True\n    fcheck = False\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]=='*' and not check[i][j]:\n                fcheck = True\n                break\n            elif a[i][j]!='*' and check[i][j]:\n                fcheck = True\n                break\n        if fcheck:\n            break\n    if fcheck:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    flag = True\n    n,m,k = map(int,input().split())\n    a = [[-1]*m for i in range(n)]\n    for i in range(n):\n        s = input()\n        for j in range(m):\n            if s[j]=='*':\n                a[i][j] = 1\n    for row in range(n-1,-1,-1):\n        for col in range(m):\n            if a[row][col]==1:\n                mx = 0\n                while (col-mx)>=0 and (col+mx)<=m-1 and (row-mx)>=0 and a[row-mx][col-mx]>=0 and a[row-mx][col+mx]>=0:           \n                    mx+=1\n                mx-=1\n                if mx<k:\n                    print(\"NO\")\n                    flag = False\n                else:\n                    for i in range(mx+1):\n                        a[row-i][col-i] = 0\n                        a[row-i][col+i] = 0\n            elif a[row][col]==0:\n                mx = 0\n                while (col-mx)>=0 and (col+mx)<=m-1 and (row-mx)>=0 and a[row-mx][col-mx]>=0 and a[row-mx][col+mx]>=0:           \n                    mx+=1\n                mx-=1\n                if mx>=k:\n                    for i in range(mx+1):\n                        a[row-i][col-i] = 0\n                        a[row-i][col+i] = 0\n                    \n            if not flag:\n                break\n        if not flag:\n            break\n    if flag:\n        print(\"YES\")",
                true
            ],
            [
                "import sys\n#import random\nfrom bisect import bisect_right as lb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\nmod = 10**9 + 7\n\nfor _ in range (ii()) :\n    n,m,k = il()\n\n    a = []\n\n    for i in range (n) :\n        a.append(list(ip()))\n\n    vis = [[0 for i in range (m)] for j in range (n)]\n\n    fl = 1\n\n    for i in range (n-1,-1,-1) :\n        for j in range (m-1,-1,-1) :\n            if (a[i][j] == '.') :\n                continue\n\n            k1 = i\n            k2 = j\n            d = 0\n\n            while ( k1-d >=0 and k2-d>=0 and k2+d<m and a[k1-d][k2-d] == \"*\" and a[k1-d][k2+d] == \"*\") :\n                d += 1\n\n            d -= 1\n\n            if (d < k and vis[i][j] == 0) :\n                fl = 0\n                break\n\n            if (d < k) :\n                continue\n            \n            for mn in range (d+1) :\n                vis[k1-mn][k2-mn] = 1\n                vis[k1-mn][k2+mn] = 1\n\n        if (fl == 0) :\n            break\n\n\n    if (fl == 1) :\n        print(\"YES\")\n    else :\n        print(\"NO\")\n",
                true
            ],
            [
                "from sys import stdin\ninput=stdin.readline\nrn=lambda:int(input())\nrns=lambda:map(int,input().split())\nrl=lambda:list(map(int,input().split()))\nrs=lambda:input().strip()\nYN=lambda x:print('YES') if x else print('NO')\nmod=10**9+7\n\nfor _ in range(rn()):\n    n,m,k=rns()\n    grid=[rs() for _ in range(n)]\n    # print(grid)\n    seen = [[0]*m for _ in range(n)]\n    ans=True\n    for row in range(n-1,-1,-1):\n        for col in range(m):\n            if grid[row][col]=='*':\n                d=0\n                i=1\n                j=1\n                new_cells=[]\n                while row-i>=0 and col-j>=0 and col+j<m and grid[row-i][col-j]==grid[row-i][col+j]=='*':\n                    d+=1\n                    new_cells.append((row-i,col-j))\n                    new_cells.append((row - i, col + j))\n                    i+=1\n                    j+=1\n                if d>=k:\n                    seen[row][col]=1\n                    for r,c in new_cells:\n                        seen[r][c]=1\n                if not seen[row][col] and (d==0 or d<k):\n                    # print(row,col)\n                    ans=False\n                    break\n    YN(ans)",
                true
            ],
            [
                "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Sep 30 12:12:51 2021\n\n@author: Ajay Varma\n\"\"\"\n\ndef solve():\n    m,n,k=map(int,input().split())\n    dp=[0]*m\n    for i in range(m):\n        dp[i]=list(input())\n    for i in range(1,m):\n        for j in range(1,n):\n            if dp[i][j]==\".\":\n                continue\n            o,p,y=i-1,j-1,j+1\n            res=0\n            while o>=0 and p>=0 and y<n:\n\n                if dp[o][p] in (\"*\",2) and dp[o][y] in (\"*\",2):\n                    res+=1\n                else:\n                    break\n                o-=1\n                p-=1\n                y+=1\n            if res>=k:\n                dp[i][j]=2\n                q=j\n                y=j\n                for f in range(i-1,i-res-1,-1):\n                    q-=1\n                    y+=1\n                    dp[f][q]=2\n                    dp[f][y]=2\n    for i in range(m):\n        for j in range(n):\n            if dp[i][j]==\"*\":\n                return \"NO\"\n                \n    return \"YES\"\nfor i in range(int(input())):\n    print(solve())\n                    ",
                true
            ],
            [
                "t = int(input())\n\n\ndef node(x, y, dis):\n    for i in range(1, dis + 1):\n        if a[x - i][y - i] == 0 or a[x - i][y + i] == 0:\n            return 0\n    boo[x][y] = 1\n    for i in range(1, dis + 1):\n        boo[x - i][y - i] = 1\n        boo[x - i][y + i] = 1\n    return 1\n\n\ndef check(x, y):\n    c = 0\n    for dis in range(k, n - x):\n        if y + dis >= m or y + dis * 2 >= m:\n            return\n        if a[x + dis][y + dis] == 1:\n            if node(x + dis, y + dis, dis) == 0:\n                continue\n            else:\n                c = 1\n                continue\n    return c\n\n\ndef f():\n    for x in range(n):\n        for y in range(m):\n            if a[x][y]:\n                if check(x, y) == 0 and boo[x][y] == 0:\n                    print(\"NO\")\n                    return\n\n    for x in range(n):\n        for y in range(m):\n            if a[x][y] != boo[x][y]:\n                print(\"NO\")\n                return\n\n    print(\"YES\")\n\n\nwhile t:\n    n, m, k = list(map(int, input().split()))\n    a = []\n\n    for i in range(n):\n        s = [1 if j == '*' else 0 for j in input()]\n        a.append(s)\n\n    boo = [[0 for i in a[j]] for j in range(n)]\n\n    f()\n\n    t -= 1\n",
                true
            ],
            [
                "for cycle in range(int(input())):\n    n,m,k = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append([x=='*' for x in input()])\n\n    b = [[0]*m for x in range(n)]\n\n    for x in range(m):\n        for y in range(n):\n            if a[y][x]:\n                depth = 0\n                while depth < n:\n                    if y-depth < 0 or x-depth < 0 or x+depth >= m:\n                        break #oi!\n                    if not (a[y-depth][x-depth] and a[y-depth][x+depth]):\n                        break #oioi!\n                    depth += 1\n                if depth > k: # \u0432\u0441\u0435 \u0445\u043e\u0440\u043e\u0448\u043e!!!\n                    for i in range(0, depth):\n                        b[y-i][x-i] = b[y-i][x+i] = 1\n\n    # print('\\n'.join([''.join(str(x) for x in stroke) for stroke in b]))\n    print('YNEOS'[a!=b::2])",
                true
            ],
            [
                "\n\nfor _ in range(int(input())):\n    n, m, k = list(map(int, input().split()))\n    lst = [0] * n\n    for i in range(n):\n        lst[n - 1 - i] = list(input())\n    for i in range(n):\n        for j in range(m):\n            kor = []\n            ks = 0\n            if lst[i][j] == '*' or lst[i][j] == '0':\n                kor += [[i, j]]\n                x, y1, y2 = i, j, j\n                while x+1 < n and y1-1 > -1 and y2+1 < m:\n                    x += 1\n                    y1 -= 1\n                    y2 += 1\n                    if (lst[x][y1] == lst[x][y2] == '*') or (lst[x][y1] == lst[x][y2] == '0') or ((lst[x][y1] == '*' or lst[x][y1] == '0') and (lst[x][y2] == '*' or lst[x][y2] == '0')):\n                        kor += [[x, y1]]\n                        kor += [[x, y2]]\n                        ks += 1\n                    else:\n                        break\n                if ks >= k:\n                    for z in kor:\n                        lst[z[0]][z[1]] = '0'\n    cnt = 0\n    for i in lst:\n        for j in i:\n            if j == '*':\n                cnt += 1\n                print('NO')\n                break\n        if cnt:\n            break\n    if not cnt:\n        print('YES')\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n  n, m, k = map(int, input().split())\n  f = []\n  for _ in range(n):\n    tmp = list(input())\n    f.append(tmp)\n  #\u59cb\u70b9\u3092\u5168\u63a2\u7d22\u3057\u3001\u5857\u308c\u305f\u3089*\u3092#\u306b\u7f6e\u304d\u63db\u3048\u3002\u6700\u5f8c\u3001*\u304c\u6b8b\u3063\u3061\u3083\u3046\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\n\n  for i in range(n):\n    for j in range(m):\n      if f[i][j] == \"*\" or f[i][j] == \"#\":\n        h = 1\n        while i-h >= 0 and j-h >= 0 and j+h < m and (f[i-h][j-h] ==  \"*\" or f[i-h][j-h] ==  \"#\") and (f[i-h][j+h] ==  \"*\" or f[i-h][j+h] ==   \"#\"):\n          h += 1\n        h -= 1\n        if h >= k:\n          for H in range(h+1):\n            f[i-H][j-H] = \"#\"\n            f[i-H][j+H] = \"#\"\n\n  check = 0\n  for i in range(n):\n    for j in range(m):\n      if f[i][j] == \"*\":\n        check = 1\n\n  if check == 0:\n    print(\"YES\")\n  else:\n    print(\"NO\")",
                true
            ],
            [
                "\n# du vill maximera alltid, eftersom > k e fine. centrum f\u00f6r ticks kan deduceras nedifr\u00e5n och upp samt med visited arr\n# kan inte anv\u00e4nda visited f\u00f6r det kan vara s\u00e5 att du vill anv\u00e4nda igen en redan imarkerad ruta som base\n# ocks\u00e5, att anv\u00e4nda alla rutor som \u00e4r ifyllda som base, fungerar om du ignorerar cases d\u00e4r k inte framg\u00e5r\n\n\nfor _ in range(int(input())):\n    n,m,k = map(int,input().split())\n    \n    b=[]\n    for r in range(n):\n        b.append(input())\n    \n    tst=[['.' for c in range(m)] for r in range(n)]\n\n    for rr in range(n):\n        for cc in range(m):\n\n            if b[rr][cc] != '*':\n                continue\n\n            # kan anv\u00e4ndas som bas, om det g\u00f6rs, f\u00f6rs\u00f6k fylla i s\u00e5 mkt som m\u00f6jligt (ocks\u00e5 ifyllt i original)\n            # ignorera om lesser than k\n            dright = dleft = 0\n            r = rr\n            c = cc\n            while ( r-1 >= 0 ) and ( c-1 >= 0 ):\n                if b[r-1][c-1] == '*':\n                    dleft+=1\n                    r-=1\n                    c-=1\n                else:\n                    break\n            \n            r=rr\n            c=cc\n            while ( r-1 >= 0 ) and ( c+1 < m ):\n                if b[r-1][c+1] == '*':\n                    dright +=1\n                    r-=1\n                    c+=1\n                else:\n                    break\n            \n            d=min(dright,dleft)\n            if d >= k:\n                # paint it\n                \n                lcnt = 0\n                while lcnt <= d:\n                    tst[rr-lcnt][cc-lcnt] ='*'\n                    lcnt+=1\n                rcnt=0\n                while rcnt <= d:\n                    tst[rr-rcnt][cc+rcnt] = '*'\n                    rcnt += 1\n    \n    same = True\n    for r in range(n):\n        if not same:\n            break\n        for c in range(m):\n            if b[r][c] != tst[r][c]:\n                same = False\n                break\n\n    \n    if same:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n",
                true
            ],
            [
                "import sys\nimport math\nfrom math import factorial, inf, gcd, sqrt\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nfrom bisect import *\nimport random\nfrom sys import stdin, stdout\nsys.setrecursionlimit(10**5)\n\n\ndef inp():\n    return stdin.readline().strip()\n\n\ndef iinp():\n    return int(inp())\n\n\ndef mp():\n    return map(int, inp().split())\n\n\ndef lmp():\n    return list(mp())\n\n\nt = iinp()\nfor i in range(t):\n    m, n, k = mp()\n    a = []\n    for i in range(m):\n        a.append(list(inp()))\n    l = [[0] * n for i in range(m)]\n    r = [[0] * n for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] == '*':\n                if l[i][j] == 0:\n                    l[i][j] = 1\n                    k1, k2 = i + 1, j - 1\n                    while 0 <= k1 < m and 0 <= k2 < n and a[k1][k2] == '*':\n                        l[k1][k2] = max(l[k1][k2], l[k1 - 1][k2 + 1] + 1)\n                        k1 += 1\n                        k2 -= 1\n                if r[i][j] == 0:\n                    r[i][j] = 1\n                    k1, k2 = i + 1, j + 1\n                    while 0 <= k1 < m and 0 <= k2 < n and a[k1][k2] == '*':\n                        r[k1][k2] = max(r[k1][k2], r[k1 - 1][k2 - 1] + 1)\n                        k1 += 1\n                        k2 += 1\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] != '.' and l[i][j] > k and r[i][j] > k:\n                c = min(l[i][j], r[i][j])\n                a[i][j] = '#'\n                for t in range(c):\n                    a[i - t][j - t] = a[i - t][j + t] = '#'\n    print('YES' if all(a[i][j] != '*' for i in range(m)\n                       for j in range(n)) else 'NO')\n",
                true
            ],
            [
                "import sys\n#import random\nfrom bisect import bisect_right as lb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\nmod = 10**9 + 7\n\nfor _ in range (ii()) :\n    n,m,k = il()\n\n    a = []\n\n    for i in range (n) :\n        a.append(list(ip()))\n\n    vis = [[0 for i in range (m)] for j in range (n)]\n\n    fl = 1\n\n    for i in range (n-1,-1,-1) :\n        for j in range (m-1,-1,-1) :\n            if (a[i][j] == '.') :\n                continue\n\n            k1 = i\n            k2 = j\n            d = 0\n\n            while ( k1-d >=0 and k2-d>=0 and k2+d<m and a[k1-d][k2-d] == \"*\" and a[k1-d][k2+d] == \"*\") :\n                d += 1\n\n            d -= 1\n\n            if (d < k and vis[i][j] == 0) :\n                fl = 0\n                break\n\n            if (d < k) :\n                continue\n            \n            for mn in range (d+1) :\n                vis[k1-mn][k2-mn] = 1\n                vis[k1-mn][k2+mn] = 1\n\n        if (fl == 0) :\n            break\n\n    for i in range (n) :\n        for j in range (m) :\n            if (a[i][j] == \".\") :\n                continue\n\n            if (vis[i][j] == 0) :\n                fl = 0\n\n\n    if (fl == 1) :\n        print(\"YES\")\n    else :\n        print(\"NO\")\n",
                true
            ],
            [
                "def solve():\n    n, m, k = map(int, input().split())\n    field = [input() for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n\n    def check(x, y):\n        # breakpoint()\n        d = 0\n        while True:\n            xl = x - d\n            xr = x + d\n            yh = y - d\n            if yh < 0 or xl < 0 or xr >= m:\n                break\n            if field[yh][xl] == field[yh][xr] == '*':\n                d += 1\n            else:\n                break\n        if d > k:\n            for i in range(d):\n                xl = x - i\n                xr = x + i\n                yh = y - i\n                visited[yh][xl] = visited[yh][xr] = True\n        return visited[y][x]\n\n\n    for y in range(n - 1, -1, -1):\n        for x in range(m):\n            if field[y][x] == '*' and not check(x, y):\n                print('NO')\n                return\n\n    print('YES')\n\n\nfor _ in range(int(input())):\n    solve()\n",
                true
            ],
            [
                "for u in range(int(input())):\n    n,m,k=map(int,input().split())\n    l=[]\n    for i in range(n):\n        l.append(list(input()))\n    f=0\n    d=[[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if(l[i][j]=='*'):\n                d[i][j]=1\n    for i in range(n-1,-1,-1):\n        for j in range(m-1,-1,-1):\n            if(l[i][j]=='*'):\n                a,b=i-1,j-1\n                x,y=i-1,j+1\n                q=0\n                p=[[i,j]]\n                while(a>=0 and b>=0 and l[a][b]=='*' and x>=0 and y<m and l[x][y]=='*'):\n                    p.append([a,b])\n                    p.append([x,y])\n                    a-=1\n                    b-=1\n                    x-=1\n                    y+=1\n                    q+=1\n                if(q>=k):\n                    for ll in p:\n                        d[ll[0]][ll[1]]=0\n\n    for i in range(n):\n        for j in range(m):\n            if(d[i][j]==1):\n                f=1\n                break\n    if(f==0):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "from sys import stdin\n\n\ndef read_input():\n    n, m, k = map(int, stdin.readline().split())\n    a = ['.' * (m + 2)]\n    for _ in range(1, n + 1):\n        a.append('.' + stdin.readline().rstrip() + '.')\n    return n, m, k, a\n\n\ndef solve(n, m, k, a):\n    check = [[False] * (m + 2) for _ in range(n + 1)]\n    for i in range(n, 0, -1):\n        for j in range(1, m + 1):\n            if a[i][j] == '*':\n                d = 0\n                while a[i-d-1][j-d-1] == '*' and a[i-d-1][j+d+1] == '*':\n                    d += 1\n                if d >= k:\n                    d = 0\n                    check[i][j] = True\n                    while a[i-d-1][j-d-1] == '*' and a[i-d-1][j+d+1] == '*':\n                        check[i-d-1][j-d-1] = check[i-d-1][j+d+1] = True\n                        d += 1\n\n    for i in range(n, 0, -1):\n        for j in range(1, m + 1):\n            if a[i][j] == '*' and check[i][j] == False:\n                return 'NO'\n\n    return 'YES'\n\n\ndef main():\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n, m, k, a = read_input()\n        answer = solve(n, m, k, a)\n        print(answer)\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, m, k = map(int, input().split())\n    s = [list(input().rstrip()) for _ in range(n)]\n    for i in range(k, n):\n        for j in range(k, m - k):\n            if s[i][j] == \".\":\n                continue\n            c1 = 0\n            i0, j0 = i - 1, j - 1\n            while 0 <= i0 < n and 0 <= j0 < m:\n                if not s[i0][j0] == \".\":\n                    c1 += 1\n                else:\n                    break\n                i0 -= 1\n                j0 -= 1\n            c2 = 0\n            i0, j0 = i - 1, j + 1\n            while 0 <= i0 < n and 0 <= j0 < m:\n                if not s[i0][j0] == \".\":\n                    c2 += 1\n                else:\n                    break\n                i0 -= 1\n                j0 += 1\n            c = min(c1, c2)\n            if c >= k:\n                s[i][j] = \"@\"\n                i0, j0 = i - 1, j - 1\n                for _ in range(c):\n                    s[i0][j0] = \"@\"\n                    i0 -= 1\n                    j0 -= 1\n                i0, j0 = i - 1, j + 1\n                for _ in range(c):\n                    s[i0][j0] = \"@\"\n                    i0 -= 1\n                    j0 += 1\n    ans = \"YES\"\n    for i in range(n):\n        for j in range(m):\n            if s[i][j] == \"*\":\n                ans = \"NO\"\n                break\n        if ans == \"NO\":\n            break\n    print(ans)",
                true
            ],
            [
                "from heapq import heappush,heappop\nfrom collections import deque\nt=int(input())\nfor i in range(t):\n    n,m,k=map(int,input().split())\n    mat=[]\n    for i in range(n):\n        s=input()\n        mat.append(s)\n    vis=[[0 for i in range(m)] for j in range(n)]\n    for i in range(n-1,-1,-1):\n        for j in range(m):\n            if mat[i][j]==\"*\":\n                x=i-1\n                y=j-1\n                c=0\n                while x>=0 and y>=0 and mat[x][y]==\"*\":\n                    c+=1\n                    x-=1\n                    y-=1\n                x=i-1\n                y=j+1\n                d=0\n                while x>=0 and y<m and mat[x][y]==\"*\":\n                    d+=1\n                    x-=1\n                    y+=1\n                if min(c,d)>=k:\n                    mn=min(c,d)\n                    vis[i][j]=1\n                    x=i-1\n                    y=j-1\n                    c=1\n                    while c<=mn and x>=0 and y>=0:\n                        vis[x][y]=1\n                        c+=1\n                        x-=1\n                        y-=1\n                    x=i-1\n                    y=j+1\n                    d=1\n                    while d<=mn and x>=0 and y<m:\n                        vis[x][y]=1\n                        d+=1\n                        x-=1\n                        y+=1\n    b=1\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j]==\"*\":\n                if vis[i][j]==0:\n                    b=0\n                    break\n    if b==1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n                    \n                ",
                true
            ],
            [
                "\ndef solve(grid, R, C, K):\n    status = [row[:] for row in grid]\n    rem = sum(v for row in grid for v in row)\n\n    for r in range(1, R):\n        for c in range(1, C):\n            if status[r][c] == 0: continue\n            mxk = 0\n            for k in range(1, R):\n                if r-k < 0 or c-k < 0 or c+k >= C: break\n                if grid[r-k][c-k] == 0 or grid[r-k][c+k] == 0: break\n                if k >= K: mxk = k\n            if mxk > 0:  # can put base here\n                status[r][c] = 0\n                rem -= 1\n                for k in range(1, mxk+1):\n                    rem -= status[r-k][c-k] + status[r-k][c+k]\n                    status[r-k][c-k] = 0\n                    status[r-k][c+k] = 0\n    return rem == 0\n \ndef main():\n    from sys import stdin\n    \n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        R, C, K = map(int, stdin.readline().strip().split())\n        grid = []\n        for _ in range(R):\n            row = stdin.readline().strip()\n            row = [1 if v=='*' else 0 for v in row]  # 1 = painted\n            grid.append(row)\n        out = solve(grid, R, C, K)\n        print('YES' if out else 'NO')\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "#!/usr/bin/env pypy3\nfrom sys import stdin\n\nlines = [line.strip() for line in stdin]\nt = int(lines[0])\nln = 1\nfor _ in range(t):\n    n, m, k = map(int, lines[ln].split())\n    ln += 1\n    g = [[int(c == \"*\") for c in lines[ln+i]] for i in range(n)]\n    ln += n\n\n    r = [[0]*m for i in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            for d in range(k, 20):\n                if not (i - d >= 0 and j - d >= 0 and j+d < m): break\n                \n                if all((g[i-h][j-h] and g[i-h][j+h]) for h in range(d+1)):\n                    for h in range(d+1):\n                        r[i-h][j-h] = r[i-h][j+h] = 1\n\n    print(\"YES\" if g == r else \"NO\")\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n,m,k=map(int,input().split())\n    l=[]\n    for i in range(n):l.append([*input()])\n    l=l[::-1]\n    for nuz in range(0,n-k):\n        for d in range(k,m-k):\n            if l[nuz][d]=='*'or l[nuz][d]=='_':\n                i=0\n                if 1==1:\n                    i=0\n                    while True:\n                        if d-i<0 or d+i>=m or nuz+i>=n or l[nuz+i][d+i]=='.' or l[nuz+i][d-i]=='.':break\n                        i+=1\n                    if i>k:\n                        ff=i\n                        i=0\n                        while ff:\n                            l[nuz+i][d+i]='_'\n                            l[nuz+i][d-i]='_'\n                            i+=1\n                            ff-=1\n    g=1\n    for x in range(n):\n        for i in range(m):\n            if l[x][i]=='*':g=0;break\n    print(['NO','YES'][g])\n            \n",
                true
            ],
            [
                "import sys\nreadline = sys.stdin.readline\n\nT = int(readline())\nfor t in range(T):\n  N,M,K = map(int,readline().split())\n  S = [list(readline().rstrip()) for i in range(N)]\n  for i in range(N):\n    for j in range(M):\n      if S[i][j] == \".\":\n        continue\n      for d in range(K + 1):\n        if i - d < 0 or j - d < 0 or M <= j + d:\n          break\n        if S[i - d][j - d] == \".\" or S[i - d][j + d] == \".\":\n          break\n      else:\n        d = 0\n        while True:\n          if 0 <= i - d and 0 <= j - d and j + d < M:\n            if S[i - d][j - d] != \".\" and S[i - d][j + d] != \".\":\n              S[i - d][j - d] = \"o\"\n              S[i - d][j + d] = \"o\"\n            else:\n              break\n            d += 1\n          else:\n            break\n  ok = True\n  for i in range(N):\n    for j in range(M):\n      if S[i][j] == \"*\":\n        ok = False\n        break\n    if not ok:\n      break\n  if ok:\n    print(\"YES\")\n  else:\n    print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    k += 1\n    a = []\n    b = []\n    for i in range(n):\n        s = input()\n        for j in range(m):\n            if s[j] == '*':\n                a.append((j, i))\n    for y in range(n, -1, -1):\n        for x in range(m, -1, -1):\n            bb = []\n            i = 0\n            while True:\n                if (x+i,y-i) in a:\n                    bb.append((x+i,y-i))\n                else:\n                    break\n                if (x-i,y-i) in a:\n                    bb.append((x-i,y-i))\n                else:\n                    break\n                if i >= k-1:\n                    b += bb\n                i += 1\n    if set(a) == set(b):\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n, m, k = map(int, input().split());a = [list(input().strip()) for i in range(n)];b = [['.'] * m for i in range(n)]\n    for x in range(n):\n        for y in range(m):\n            if a[x][y] == '*':\n                d = 0\n                for i in range(1, x + 1):\n                    if y - i >= 0 and y + i < m and a[x-i][y-i] == '*' and a[x-i][y+i] == '*':d = i\n                    else:break\n                if d >= k:\n                    for i in range(d + 1):b[x - i][y - i] = '*';b[x - i][y + i] = '*'\n    print(['NO','YES'][a == b])",
                true
            ],
            [
                "intput = lambda : map(int, input().split())\nxdirs = ((-1, -1), (-1,1), (1,-1), (1,1))\n\ndef process(r, c, g):\n    # print('\\n\\nstart of tick:')\n    # print(r,c)\n    seen = { (r,c) }\n    i, j = r-1, c-1\n    k, l = r-1, c+1\n    size = 0\n    while g[i][j] == g[k][l] == '*':\n        size += 1\n        # print(f\"{i, j}  |  {k, l}\")\n        seen.add( (i,j) )\n        seen.add( (k,l) )\n        i, j = i-1, j-1\n        k, l = k-1, l+1\n    # print(f\"ret: {(size, seen)}\")\n    return (size, seen)\n\ndef solve():\n    marks = 0\n    ticks = []\n    seen = set()\n    n, m, k = intput()\n    grid = ['.'*(m+2)]\n    grid += ['.' + input() + '.' for _ in range(n)]\n    grid += ['.'*(m+2)]\n    # print('\\n\\n')\n    # for g in grid: print(g)\n    for r in range(1, n+1):\n        for c in range(1, m+1):\n            if grid[r][c] != '*': continue\n            marks += 1\n            if grid[r-1][c-1] == '.': continue\n            if grid[r-1][c+1] == '.': continue\n            p = process(r, c, grid)\n            ticks.append(p)\n    if marks == 0: return \"YES\"\n    for s,t in reversed(sorted(ticks)):\n        # print(s,t)\n        if s < k: break\n        for (x,y) in t:\n            seen.add( (x,y) )\n        # print(f\"seen: {seen}\")\n        if len(seen) == marks:\n            return \"YES\"\n    return \"NO\"\n\nt, = intput()\nfor i in range(t):\n    # print(f\"\\nCASE {i+1}\\n\")\n    print( solve() )\n",
                true
            ],
            [
                "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n,m,k = [int(i) for i in sys.stdin.readline().split()]\n    g = [list(sys.stdin.readline().strip()) for i in range(n)]\n    def fill(a,b):\n        for i in range(1, k+1):\n            if not (0<=a-i<n and 0<=b-i and b+i<m and g[a-i][b-i] != '.' and g[a-i][b+i] != '.'):\n                return\n        for i in range(k+1):\n            g[a-i][b-i] = g[a-i][b+i] = '+'\n        i = k+1\n        while 1:\n            if 0<=a-i<n and 0<=b-i and b+i<m and g[a-i][b-i] != '.' and g[a-i][b+i] != '.':\n                g[a-i][b-i] = g[a-i][b+i] = '+'\n            else:\n                return\n            i+=1\n    def check():\n        for i in range(n):\n            for j in range(m):\n                if g[i][j] == '*':\n                    return False\n        return True\n\n    for i in range(n):\n        for j in range(m):\n            if g[i][j] != '.':\n                fill(i, j)\n    sys.stdout.write('YES\\n' if check() else 'NO\\n')\n",
                true
            ],
            [
                "def solve():\n    n,m,k=map(int,input().split())\n    l=[]\n    for i in range(n):\n        l.append(list(input()))\n    for i in range(k-1,n):\n        for j in range(m):\n            if(l[i][j]=='*' or l[i][j]=='!'):\n                h=1;uu=1\n                for r in range(i-1,-1,-1):\n                    if(j+h<m and j-h>-1 and (l[r][j+h]=='*' or l[r][j+h]=='!') and (l[r][j-h]=='*' or l[r][j-h]=='!')):\n                        uu+=1;h+=1\n                    else:\n                        break\n                if(uu>k):\n                    h=1\n                    for r in range(i-1,-1,-1):\n                        if(j+h<m and j-h>-1 and (l[r][j+h]=='*' or l[r][j+h]=='!') and (l[r][j-h]=='*' or l[r][j-h]=='!')):\n                            l[r][j+h]='!';l[i][j]='!';l[r][j-h]='!'\n                            h+=1\n                        else:\n                            break\n                # for ii in l:\n                #     print(*ii)\n                # print()\n    c=0\n    for ii in l:\n        for i in ii:\n            if(i=='*'):\n                c=1\n                break\n    if c==0:\n        print('YES')\n    else:\n        print('NO')\n \nt=int(input())\nwhile(t):\n   solve()\n   t-=1",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n,m,k=map(int,input().split())\n    matrix=[ list(input()) for _ in range(n)]\n    seen = {'*', '1'}\n    for i in range(1,n):\n        for j in range(m):\n            if matrix[i][j] == '*' or matrix[i][j] == '1':\n                    u = 1\n                    h = 1\n                    for s in range(i-1,-1,-1):\n                            if j-h>=0 and j+h<m and (matrix[s][j-h] in seen and matrix[s][j+h] in seen):\n                                h+=1\n                                u+=1\n                            else:\n                                break\n\n                    if u>k:\n                        h = 1\n                        for s in range(i-1, -1, -1):\n                            if j - h >= 0 and j + h < m and (matrix[s][j - h] in seen and matrix[s][j + h] in seen):\n                                matrix[i][j] = '1'\n                                matrix[s][j-h]='1'\n                                matrix[s][j+h]='1'\n                                h+=1\n                            else:\n                                break\n\n\n\n    f=0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]=='*':\n                f=1\n                break\n    if f==0:\n        print('YES')\n    else:\n        print('NO')\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "\n\nfor i in  range(int(input())):\n\n    n,m , k = map(int,input().split())\n\n\n    t= []\n\n    for i in range(n):\n        t.append(list(input()))\n\n    ma ={}\n    h=0\n\n    for i in range(n-1,-1,-1):\n\n        for j in range(m):\n\n\n\n            if t[i][j] =='*':\n\n                po=[(i,j)]\n                high=0\n                piche = j-1\n                aage = j+1\n                for up in range(i-1,-1,-1):\n\n                    if piche <0 or aage >m-1:\n                        break\n                    if t[up][piche] =='*' and t[up][aage]=='*':\n                        high +=1\n                        po.append((up,piche))\n                        po.append((up,aage))\n                        piche-=1\n                        aage+=1\n                    else:\n                        break\n                if high >= k:\n                    for x in po:\n                        ma[x]=1\n                else:\n                    if (i,j) in ma:\n                        continue\n                    else:\n                        print('NO')\n                        h+=1\n                        break\n        if h>0:\n            break\n\n\n    if h==0:\n        print('YES')\n            \n                \n                    \n\n\n                \n",
                true
            ],
            [
                "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m,k=map(int,input().split())\n    g=[]\n    visited=[]\n    for i in range(n):\n        g.append(input())\n        visited.append([0]*m)\n    c=[]\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]=='*':\n                if i-1>=0 and j+1<m and j-1>=0 and g[i-1][j+1]=='*' and g[i-1][j-1]=='*':\n                    c.append([i,j])\n    # print(c)\n    f=0\n    for i in range(len(c)):\n        x,y=c[i]\n        x1,y1,x2,y2=x,y,x,y\n        l1=0\n        while x1>=0 and y1>=0 and g[x1][y1]=='*':\n            l1+=1\n            x1-=1\n            y1-=1\n        l2=0\n        while x2>=0 and y2<m and g[x2][y2]=='*':\n            l2+=1\n            x2-=1\n            y2+=1\n        d=min(l1-1,l2-1)\n        if d>=k:\n            x1,y1,x2,y2=x,y,x,y\n            l1=0\n            while x1>=0 and y1>=0 and g[x1][y1]=='*':\n                visited[x1][y1]=1\n                l1+=1\n                x1-=1\n                y1-=1\n                if l1==d+1:\n                    break\n            l2=0\n            while x2>=0 and y2<m and g[x2][y2]=='*':\n                visited[x2][y2]=1\n                l2+=1\n                x2-=1\n                y2+=1\n                if l2==d+1:\n                    break\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]=='*' and visited[i][j]==0:\n                f=1\n                break\n        if f:\n            break\n    if f:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "\nimport copy\n\nt = int(input())\nfor _ in range(t):\n    n, m, k = list(map(int, input().split()))\n    ls = [list(input()) for _ in range(n)]\n    lc = copy.deepcopy(ls)\n\n    for i in range(n):\n        for j in range(m):\n            if ls[i][j] == \"*\":\n                # checking for the pattern\n                f = True\n                for d in range(k+1):\n                    if i-d < 0 or j + d >= m or j-d < 0 or ls[i-d][j+d] != ls[i-d][j-d] or ls[i-d][j-d] != \"*\":\n                        f = False\n                        break\n\n                if f:\n                    # making the changes\n                    lc[i][j] = '.'\n                    for d in range(1, n):\n                        if (i-d >= 0 and j+d < m and ls[i-d+1][j+d-1] == \"*\" and ls[i - d][j + d] == '*') \\\n                                and (i-d >= 0 and j-d >= 0 and ls[i-d+1][j-d+1] == \"*\" and ls[i - d][j - d] == \"*\"):\n                            lc[i - d][j + d] = '.'\n                            lc[i - d][j - d] = \".\"\n                        else:\n                            break\n\n    ans = True\n    for i in range(n):\n        for j in range(m):\n            if lc[i][j] != '.':\n                ans = False\n                break\n\n    if ans:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
                true
            ],
            [
                "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\n\nimport copy\n\n \ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\n \ninput = inf.readline\n# sys.stdout = open('output.txt', 'w')\n \ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\n\ndef read_one_float():\n    return float(input().rstrip('\\n'))\n \n \ndef read_list_of_ints():\n    res = [int(val) for val in (input().rstrip('\\n')).split()]\n    return res\n\n\ndef read_list_of_ints_zero():\n    return [int(val) - 1 for val in (input().rstrip('\\n')).split()]\n\n\ndef read_str():\n    return input().rstrip()\n\n\ndef count_height(i, j, field, k):\n    height = 0\n    res = set()\n    res.add((i, j))\n    w1 = j\n    w2 = j\n\n    for h in range(i - 1, -1, -1):\n        w1 -= 1\n        w2 += 1\n\n        if w1 >= 0 and w2 < len(field[0]):\n            if field[h][w1] == '*' and field[h][w2] == '*':\n                height += 1\n                res.add((h, w1))\n                res.add((h, w2))\n            else:\n                break\n        else:\n            break\n\n    if height >= k:\n        return res\n    else:\n        return None\n\n\ndef main():\n    tests = read_one_int()\n\n    for _ in range(tests):\n        n, m, k = read_list_of_ints()\n        field = []\n        painted = set()\n        tick_cells = set()\n\n        for i in range(n):\n            field.append(read_str())\n            for j in range(m):\n                if field[-1][j] == '*':\n                    painted.add((i, j))\n\n        for i in range(n - 1, -1, -1):\n            for j in range(m):\n                if field[i][j] == '.':\n                    continue\n\n                cur_tick = count_height(i, j, field, k)\n\n                if cur_tick is not None:\n                    tick_cells.update(cur_tick)\n        # print('------')\n        # print(painted)\n        # print(tick_cells)\n\n        if painted == tick_cells:\n            print('YES')\n        else:\n            print('NO')\n\n\nif __name__== '__main__':\n    main()\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n\n    n, m, d = list(map(int , input().split()))\n\n    mat = []\n    for r in range(n):\n        mat.append(list(input()))\n\n    vis = [[0] * m for r in range(n)]\n\n\n    for r in range(n):\n        for c in range(m):\n            if mat[r][c] == '.':\n                continue\n                \n            cnt1 = 0\n            r1, c1 = r - 1, c - 1\n            while r1 >= 0 and c1 >= 0 and mat[r1][c1] == '*':\n                cnt1 += 1\n                r1 -= 1\n                c1 -= 1\n                            \n            cnt2 = 0\n            r1, c1 = r - 1, c + 1\n            while r1 >= 0 and c1 < m and mat[r1][c1] == '*':\n                cnt2 += 1\n                r1 -= 1\n                c1 += 1\n\n            if min(cnt1, cnt2) >= d:\n                vis[r][c] = 1\n\n                lim = min(cnt1, cnt2)\n                r1, c1 = r - 1, c - 1\n                cnt = 0\n                while r1 >= 0 and c1 >= 0 and mat[r1][c1] == '*' and cnt < lim:\n                    vis[r1][c1] = 1\n                    r1 -= 1\n                    c1 -= 1\n                    cnt += 1\n                                \n                r1, c1 = r - 1, c + 1\n                cnt = 0\n                while r1 >= 0 and c1 < m  and mat[r1][c1] == '*' and cnt < lim:\n                    vis[r1][c1] = 1\n                    r1 -= 1\n                    c1 += 1\n                    cnt += 1\n\n    ans = True\n    for r in range(n):\n        for c in range(m):\n            if mat[r][c] == '*' and vis[r][c] == 0:\n                ans = False\n                break\n    \n    # for row in vis:\n    #     print(row)\n\n    if ans:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n , m , k = map(int , input().split())\n    vis = []\n    grid = []\n    flag = 1\n    for i in range(n):\n        vis.append([-1]*m)\n    for i in range(n):\n        grid.append(list(input()))\n    for i in range(n-1 , -1 , -1):\n        for j in range(m):\n            if grid[i][j] == '*':\n                #print('center')\n                l = 1\n                count = 0\n                x = i-1\n                while j-l>= 0 and j+l<m and x>=0:\n                    #print('enter')\n                    if grid[x][j+l] == '*' and grid[x][j-l] == '*':\n                        count += 1\n                        x -= 1\n                        l += 1\n                    else:\n                        break\n                if count >= k:\n                    l = 1\n                    x = i-1\n                    while j-l>= 0 and j+l<m and x>=0:\n                        if grid[x][j+l] == '*' and grid[x][j-l] == '*':\n                            vis[x][j+l] = 1\n                            vis[x][j-l] = 1\n                            x -= 1\n                            l += 1\n                        else:\n                            break\n                else:\n                    if vis[i][j] == 1:\n                        pass\n                    else:\n                        flag = 0\n                        break\n                #print(vis)\n        if flag == 0:\n            break\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')\n",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby, accumulate\nfrom copy import deepcopy\nMOD = 10**9+7\nINF = float('inf')\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\ndef visit(i, j):\n    visited = set()\n    temp = set()\n    temp.add((i, j))\n    t = k\n    while i + 1 < n and j + 1 < m and t > 0:\n        i, j = i + 1, j + 1\n        if grid[i][j] == '.':\n            break\n        temp.add((i, j))\n        t -= 1\n\n    if t != 0:\n        return set()\n\n    t = k\n    while i < n and j < m and grid[i][j] == '*':\n        res = check(i, j, t)\n        temp.add((i, j))\n        if res:\n            visited |= res\n            visited |= temp\n\n        \n        t += 1\n        i, j = i + 1, j + 1\n\n    return visited\n\ndef check(i, j, t):\n    v = set()\n    while i > 0 and j + 1 < m and t > 0:\n        i, j = i - 1, j + 1\n        if grid[i][j] == '.':\n            break\n\n        v.add((i, j))\n        t -= 1\n\n    if t == 0:\n        return v\n    else:\n        return set()\n\n\nfor _ in range(int(input())):\n    n, m, k = rl()\n    grid = [rs() for _ in range(n)]\n    possible = set()\n    flag = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                continue\n\n            possible |= visit(i, j)\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and (i, j) not in possible:\n                # print(i, j)\n                flag = False\n                break\n\n        if not flag:\n            break\n\n    print('YES') if flag else print('NO')",
                true
            ],
            [
                "'''input\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n'''\nimport math\nt=int(input())\nfor _ in range(t):\n    n,m,k=map(int,input().split())\n    grid=[]\n    for i in range(n):\n        grid.append(input())\n\n    marked=set()\n    visited=set()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='*':\n                marked.add((i,j))\n\n    \n    for r,c in marked:\n        temp=set()\n        lrow,lcol=r-1,c-1\n        rrow,rcol=r-1,c+1\n        s=0\n        while lrow>=0 and lcol>=0 and rcol<m and (lrow,lcol) in marked and (rrow,rcol) in marked:\n            temp.add((lrow,lcol))\n            temp.add((rrow,rcol))\n            s+=1\n            rrow-=1\n            lrow-=1\n            rcol+=1\n            lcol-=1\n        if s>=k:\n            visited=visited.union(temp)\n            visited.add((r,c))\n\n    if len(visited)==len(marked):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
                true
            ],
            [
                "def isValidTick(mat, i, j):\n    steps = 0\n    j1 = j2 = j\n    while i >= 0 and j1 >= 0 and j2 < len(mat[0]):\n        if mat[i][j1] == '.' or mat[i][j2] == '.':\n            break\n        steps += 1\n        i -= 1\n        j1 -= 1\n        j2 += 1\n\n    return steps - 1\n\n\ndef clean_stars(mat, i, j, d):\n    j1 = j2 = j\n    while i >= 0 and j1 >= 0 and j2 < len(mat[0]) and d:\n        mat[i][j1] = '.'\n        mat[i][j2] = '.'\n\n        i -= 1\n        j1 -= 1\n        j2 += 1\n        d -= 1\n\n\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        r, c, k = list(map(int, input().split()))\n        mat = []\n        for i in range(r):\n            mat.append(list(input()))\n        # for row in mat:\n        #     print(row)\n\n        clean_positions = []\n        for i in range(k, r):\n            for j in range(k, c - k):\n                d = isValidTick(mat, i, j)\n                if d >= k:\n                    clean_positions.append((i, j, d + 1))\n\n        for i, j, d in clean_positions:\n            clean_stars(mat, i, j, d)\n\n        valid = True\n        for row in mat:\n            if '*' in row:\n                valid = False\n                break\n\n        if valid:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
                true
            ],
            [
                "for _ in range(int(input().strip())):\n    n,m,k = map(int, input().strip().split())\n    # matrix = [ list(input().strip()) for i in range(n)]\n    # print(matrix)\n\n    visited = [[0 for  i in range(m)] for j in range(n)]\n    # flag = 0\n\n    for i in range(n):\n        s = input().strip()\n        for j in range(m):\n            if(s[j]=='*'):\n                visited[i][j] = 1\n    \n\n    for i in range(n-1,-1,-1):\n        for j in range(m):\n            if(visited[i][j]==0):\n                continue\n\n            l = 0\n            while(j>l and l+j+1<m and i>l):\n                if(visited[i-l-1][j-l-1]==0 or visited[i-l-1][j+l+1]==0):\n                    break\n                l+=1\n            \n            if(l>=k):\n                for d in range(l+1):\n                    visited[i-d][j-d] = 2\n                    visited[i-d][j+d] = 2\n    \n    flag = True\n    for i in range(n):\n        for j in range(m):\n            if(visited[i][j]==1):\n                flag = False\n    \n    if(flag):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n\n    # for i in range(n-1, 0, -1):\n    #     for j in range(1,m-1):\n    #         if(matrix[i][j]=='*' and matrix[i-1][j-1]=='*' and matrix[i-1][j+1]=='*' and (visited[i-1][j-1]==False or visited[i-1][j+1]==False)):\n    #             visited[i][j]=True\n    #             u =1\n\n                \n    #             steps = 0\n    #             while(u<n and i-u>=0 and j+u<=m-1 and j-u>=0):\n    #                 if(matrix[i-u][j+u]=='*' and matrix[i-u][j-u]=='*'):\n    #                     visited[i-u][j+u] =  True\n    #                     visited[i-u][j-u] = True\n    #                     steps+=1   \n    #                 else:\n    #                     break\n                    \n    #                 u+=1\n    #             # print(steps)\n    #             if(steps<k ):\n    #                 # print(\"here\",steps)\n    #                 flag = 1\n    #                 break\n            \n    #         elif(matrix[i][j]=='*' and visited[i][j]==False and (matrix[i-1][j-1]=='.' or matrix[i-1][j+1]=='.') ):\n    #             flag = 1\n    #             break\n        \n    #     if(flag==1):\n    #         break\n    \n    \n    # for i in range(m):\n    #     if(matrix[0][i]=='*' and visited[0][i]==False):\n    #         flag  = 1\n    #         break\n        \n    \n    # for i in range(n):\n    #     if(matrix[i][0]=='*' and visited[i][0]==False):\n    #         flag = 1\n    #         break\n    #     if(matrix[i][m-1]=='*' and visited[i][m-1]==False):\n    #         flag = 1\n    #         break\n\n    \n\n\n    # # if((visited[0][0]==False and matrix[0][0]=='*') or (visited[0][m-1]==False and matrix[0][m-1]=='*') or (visited[n-1][0]==False and matrix[n-1][0]=='*') or (visited[n-1][m-1]==False and matrix[n-1][m-1]=='*')):\n    # #     flag =1\n\n    # # print(visited)\n    # if(flag==1):\n    #     print(\"NO\")\n    # else:\n    #     print(\"YES\")\n\n                    \n                    \n",
                true
            ],
            [
                "def check(field, n, m):\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                return False\n    return True\n\nt = int(input())\nfor p in range(t):\n    n, m, k = [int(n) for n in input().split()]\n    field = [['.' for j in range(m)] for i in range(n)]\n    for i in range(n):\n        field[i] = list(input())\n    \n    last = n - 1\n    start = -1\n    for i in range(n-1, -1, -1):\n        for j in range(0 , m):\n            if field[i][j] == '.':\n                continue\n            len = 0\n            while i - len > 0 and j - len > 0 and j + len + 1 < m :\n                if field[i - len - 1][j - len - 1] == '.' or field[i - len - 1][j + len + 1] == '.':\n                    break\n                len += 1 \n            if len >= k:\n                for p in range(len+1):\n                    field[i - p][j - p] = '-'\n                    field[i - p][j + p] = '-'\n\n    print(\"YES\") if check(field, n, m)  else print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    original = []\n    for i in range(n):\n        a = list(input())\n        original.append(a)\n    temporary = [[\".\" for i in range(m)] for j in range(n)]\n    for row in range(n):\n        for column in range(m):\n            if original[row][column] == \"*\":\n                count_till_now = 0\n                #times = 1\n                for times in range(1, row+1):\n                    if (column+times) < m and (column-times) >= 0 and original[row-times][column+times] == \"*\" and original[row-times][column-times] == \"*\":\n                        count_till_now = times\n                    #times += 1\n                    else:\n                        break\n                if count_till_now >= k:\n                    for i in range(count_till_now + 1):\n                        temporary[row-i][column-i] = \"*\"\n                        temporary[row-i][column+i] = \"*\"\n    if temporary == original:\n        print(\"YES\")\n    else:\n        print(\"NO\")                        ",
                true
            ],
            [
                "import bisect\nimport collections\nimport copy\nimport fractions\nimport functools\nimport heapq\nimport math\nimport random\nimport sys\n\n\ndef _p(str):\n    sys.stdout.write(str+'\\n')\ndef _i():\n    return sys.stdin.readline()\n\ndef draw_largest_tick_possible(n, m, k, field):\n    tick_coords = []\n    for d in range(200):\n        if n-d == -1 or m-d == -1 or m+d >= len(field[0]) or field[n-d][m-d] == '.' or field[n-d][m+d] == '.':\n            break\n        tick_coords.append((n-d,m-d))\n        tick_coords.append((n-d,m+d))\n\n    if len(tick_coords)/2 > k:\n        for x, y in tick_coords:\n            field[x][y] = '-'\n\nif __name__ == '__main__':\n\n    T = int(_i())\n\n    for t in range(T):\n        N, M, K = tuple(map(int, _i().split()))\n        field = []\n        for n in range(N):\n            field.append([ch for ch in _i().strip()])\n\n        for n in range(N-1, -1, -1):\n            for m in range(M):\n                if field[n][m] == '*' or field[n][m] == '-':\n                    draw_largest_tick_possible(n, m, K, field)\n\n        if all(\n            not any(\n                ch == '*' for ch in row\n            ) for row in field\n        ):\n            _p(\"YES\")\n        else:\n            _p(\"NO\")\n\n    sys.stdout.flush()\n",
                true
            ],
            [
                "import sys\nfrom collections import deque\n# sys.stdin = open(\"input.txt\", \"r\")\ninput = sys.stdin.readline\n \n \nT = int(input())\nwhile T:\n    T -= 1\n    n, m, k = map(int, input().split())\n    field = [list(input()) for _ in range(n)]\n    ch = [[0 for _ in range(m)] for _ in range(n)]\n    queue = deque()\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                queue.append([i, j])\n    \n    while queue:\n        x, y = queue.popleft()\n        h = 0\n        while True:\n            if 0 <= x-h and 0 <= y-h and y+h < m and field[x-h][y-h] == '*' and field[x-h][y+h] == '*':\n                h += 1\n            else:\n                h -= 1\n                break\n        if h >= k:\n            for i in range(h+1):\n                ch[x-i][y-i] = 1\n                ch[x-i][y+i] = 1\n    flag = 0\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not ch[i][j]:\n                print('NO')\n                flag = 1\n                break\n        if flag:\n            break\n    if not flag:\n        print('YES')",
                true
            ],
            [
                "from collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, log2, sqrt, gcd\nimport bisect\nimport copy\nfrom itertools import combinations\nimport sys\nimport heapq\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef input(): return sys.stdin.readline().strip()\n\n\n# for _ in range(int(input())):\n#         n=int(input())\n#         arr=get_array()\n#         val=[]\n#         for i in range(len(arr)):\n#             heapq.heappush(val,[-arr[i],i])\n#\n#         ans=[]\n#         while True:\n#             if len(val)==1:\n#                 break\n#             val1=heapq.heappop(val)\n#             val2=heapq.heappop(val)\n#\n#             if -val1[0]<=0 or -val2[0]<=0:\n#                 break\n#             if abs(val1[0])>=abs(val2[0]):\n#                 for k in range(abs(val2[0])):\n#                         ans.append([val1[1]+1,val2[1]+1])\n#                 rem=abs(val1[0])-abs(val2[0])\n#                 heapq.heappush(val,[-rem,val1[1]])\n#             else:\n#                 for k in range(abs(val1[0])):\n#                         ans.append([val2[1]+1,val1[1]+1])\n#                 rem=abs(val2[0])-abs(val1[0])\n#                 heapq.heappush(val,[-rem,val2[1]])\n#\n#         print(len(ans))\n#         for i in range(len(ans)):\n#             print(*ans[i])\n#\n\n\nfor _ in range(int(input())):\n    n,m,k=get_ints()\n    arr=[]\n    for i in range(n):\n        s=input()\n        arr.append(s)\n\n    dp=[[False for i in range(m)]for j in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j]==\"*\":\n                p, q = i, j\n                r, s = i, j\n                tot=0\n                while True:\n                    p-=1\n                    q-=1\n                    r-=1\n                    s+=1\n                    if p>=0 and r>=0 and q>=0 and s<m and arr[p][q]==\"*\" and arr[r][s]==\"*\":\n                        tot+=1\n                    else:\n                        break\n                if tot>=k:\n                    dp[i][j]=True\n                    p, q = i, j\n                    r, s = i, j\n                    for j in range(tot):\n                        p -= 1\n                        q -= 1\n                        r -= 1\n                        s += 1\n                        dp[p][q]=True\n                        dp[r][s]=True\n\n    flag=True\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j]==\"*\" and dp[i][j]==False:\n                flag=False\n                break\n\n    if flag==False:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n",
                true
            ],
            [
                "intput = lambda : map(int, input().split())\n\ndef process(r, c, K, g, s):\n    seen = { (r,c) }\n    i, j = r-1, c-1\n    k, l = r-1, c+1\n    size = 0\n    while g[i][j] == g[k][l] == '*':\n        size += 1\n        seen.add( (i,j) )\n        seen.add( (k,l) )\n        i, j = i-1, j-1\n        k, l = k-1, l+1\n    if size >= K:\n        s |= seen\n\ndef solve():\n    marks = 0\n    ticks = []\n    seen = set()\n    n, m, k = intput()\n    grid = ['.'*(m+2)]\n    grid += ['.' + input() + '.' for _ in range(n)]\n    grid += ['.'*(m+2)]\n    for r in range(1, n+1):\n        for c in range(1, m+1):\n            if grid[r][c] != '*': continue\n            marks += 1\n            if grid[r-1][c-1] == '.': continue\n            if grid[r-1][c+1] == '.': continue\n            process(r, c, k, grid, seen)\n            \n    return \"YES\" if len(seen) == marks else \"NO\"\n\n\nt, = intput()\nfor i in range(t):\n    print( solve() )\n",
                true
            ],
            [
                "import sys\n \ninput = sys.stdin.readline\n \ndef solve():\n    n, m, k = map(int, input().split())\n    a = [list(input().strip()) for i in range(n)]\n    b = [['.'] * m for i in range(n)]\n    for x in range(n):\n        for y in range(m):\n            if a[x][y] == '*':\n                d = 0\n                for i in range(1, x + 1):\n                    if y - i >= 0 and y + i < m \\\n                    and a[x-i][y-i] == '*' and a[x-i][y+i] == '*':\n                        d = i\n                    else:\n                        break\n                if d >= k:\n                    for i in range(d + 1):\n                        b[x-i][y-i] = '*'\n                        b[x-i][y+i] = '*'\n    print(['NO','YES'][a == b])\n \nfor i in range(int(input())):\n    solve()",
                true
            ],
            [
                "# C. ticks\ndef check(board,ticks,k):\n    painted = set()\n    for row,col in ticks:\n        tmp = set()\n        leg = 0\n        while True:\n            if 0<=row-leg and 0<=col-leg and col+leg<=m-1 and board[row-leg][col-leg] == '*' and board[row-leg][col+leg] == '*':\n                tmp.add((row-leg,col-leg))\n                tmp.add((row-leg,col+leg))\n                leg += 1\n            else:\n                if leg-1 >= k: \n                    painted = painted.union(tmp)\n                break\n    for coord in ticks:\n        if coord not in painted:\n            return False\n    return True\n\nfor case in range(int(input())):\n    n, m, k = map(int,input().split())\n    board = [[] for _ in range(n)]\n    ticks_removed = set()\n    ticks = []\n    for i in range(n):\n        tmp = input()\n        for idx, letter in enumerate(tmp):\n            if letter == '*':\n                ticks.append((i,idx)) # memory of (row,col) of tick\n            board[i].append(letter)\n    print('YES' if check(board,ticks,k) else 'NO')",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\n\ndef myfun(a,visited,n,m):\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*' and visited[i][j] == False:\n                return False\n            elif a[i][j] == '.' and visited[i][j] == True:\n                return False\n    return True\n\n\ndef main():\n    n,m,k = map(int,input().split())\n    a = []\n    visited = []\n    for _ in range(n):\n        a.append(input())\n        visited.append([False]*m)\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*':\n                k1,k2,k3,k4 = i,j, j, -1\n                while k1>=0 and k2>=0 and k3<=m:\n                    if a[k1][k2]=='*' and a[k1][k3]=='*':\n                        k4+=1\n                    else:\n                        break\n                    k1,k2,k3 = k1-1,k2-1,k3+1\n                if k4>=k:\n                    k1,k2,k3 = i,j, j\n                    while k1>=0 and k2>=0 and k3<=m:\n                        if a[k1][k2]=='*' and a[k1][k3]=='*':\n                            visited[k1][k2] = True\n                            visited[k1][k3] = True\n                        else:\n                            break\n                        k1,k2,k3 = k1-1,k2-1,k3+1\n    if myfun(a,visited,n,m):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nfor _t in range(int(input())):\n    main()",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**5)\nINF = 10**18\n\ndef solve():\n    N,M,K = map(int,input().split())\n    field = [list(input()) for _ in range(N)]\n    check = set()\n    for y in range(N):\n        for x in range(M):\n            if field[y][x] == \"*\":\n                check.add((y,x))\n\n    # print(*field, sep=\"\\n\")\n    ans = set()\n    for y in range(N-1,K-1,-1):\n        for x in range(M):\n            if field[y][x] == \"*\":\n                h = 0\n                while 0 <= y-h and 0 <= x-h and x+h < M:\n                    if field[y-h][x-h] == \"*\" and field[y-h][x+h] == \"*\":\n                        h += 1\n                    else:\n                        break\n                if h > K:\n                    for i in range(h):\n                        ly,lx = y-i,x-i\n                        ry,rx = y-i,x+i\n                        ans.add((ly,lx))\n                        ans.add((ry,rx))\n    for c in check:\n        if c not in ans:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")    \n\nQ = int(input())\nfor _ in range(Q):\n    solve()",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, m, k = [int(i) for i in input().strip().split()]\n    f = []\n    for _ in range(n):\n        f.append(list(input()))\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if f[i][j] != \".\":\n                flag = True\n                for h in range(1, k + 1):\n                    try:\n                        if not (f[i - h][j + h] != \".\"\n                                and f[i - h][j - h] != \".\" and i - h >= 0\n                                and j - h >= 0):\n                            flag = False\n                            break\n                    except IndexError:\n                        flag = False\n                        break\n                if flag:\n                    h = 0\n                    while True:\n                        try:\n                            if (f[i - h][j + h] != \".\"\n                                    and f[i - h][j - h] != \".\" and i - h >= 0\n                                    and j - h >= 0):\n                                f[i - h][j + h] = \"0\"\n                                f[i - h][j - h] = \"0\"\n                            else:\n                                break\n                        except IndexError:\n                            break\n                        h += 1\n    ans = \"YES\"\n    for i in range(n):\n        for j in range(m):\n            if f[i][j] == \"*\":\n                ans = \"NO\"\n    print(ans)\n",
                true
            ],
            [
                "import sys\n\n\ndef input():\n    return sys.stdin.readline().strip('\\n')\n\n\ndef cin_int_ls():\n    return list(map(int, input().split()))\n\n\ndef cin_int():\n    return int(input())\n\n\nfrom collections import Counter\n\n\ndef sv(data, k):\n    left = Counter()\n    right = Counter()\n    top = {}\n    all_start = set()\n    for i in range(len(data)):\n        for j in range(len(data[0])):\n            if data[i][j] == '*':\n                all_start.add((i, j))\n                left[(i, j)] = left[(i - 1, j - 1)] + 1\n                right[(i, j)] = right[(i - 1, j + 1)] + 1\n                l, r = left[(i, j)], right[(i, j)]\n                if l - 1 >= k and r - 1 >= k:\n                    top[(i, j)] = min(l, r)\n    for p, d in top.items():\n        x, y = p\n        rm = set()\n        for i in range(d):\n            rm.add((x - i, y - i))\n            rm.add((x - i, y + i))\n        all_start -= rm\n    if all_start:\n        return 'NO'\n    else:\n        return 'YES'\n\n\nfor _ in range(cin_int()):\n    n, m, k = cin_int_ls()\n    data = []\n    for _ in range(n):\n        data.append(input())\n    print(sv(data, k))\n",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve(n, m, k, arr):\n  store = {}\n\n  row = n - 1\n\n  while row >= 0:\n    for i in range(m):\n      if arr[row][i] == '.':\n        continue\n\n      # if (row, i) in store:\n      #   continue\n\n      leftTravel = 0\n      tRow = row - 1\n      tCol = i - 1\n\n      while (tRow >= 0 and tCol >= 0) and (arr[tRow][tCol] == '*'):\n        leftTravel += 1\n        tRow -= 1\n        tCol -= 1\n\n\n      rightTravel = 0\n      tRow = row - 1\n      tCol = i + 1\n\n      while (tRow >= 0 and tCol < m) and (arr[tRow][tCol] == '*'):\n        rightTravel += 1\n        tRow -= 1\n        tCol += 1\n      \n      temp = min(leftTravel, rightTravel)\n\n      if temp >= k:\n        store[(row, i)] = 1\n\n\n        rightTravel = 0\n        tRow = row - 1\n        tCol = i + 1\n\n        while rightTravel < temp:\n          store[(tRow, tCol)] = 1\n          tRow -= 1\n          tCol += 1\n          rightTravel += 1\n        \n        leftTravel = 0\n        tRow = row - 1\n        tCol = i - 1\n\n        while leftTravel < temp:\n          store[(tRow, tCol)] = 1\n          tRow -= 1\n          tCol -= 1\n          leftTravel += 1\n\n    row -= 1\n  \n  for i in range(n):\n    for j in range(m):\n      if arr[i][j] == '.':\n        continue\n\n      if (i, j) not in store:\n        print(\"NO\")\n        return\n\n  print(\"YES\")\n\n\n\n\n\nT = get_int()\nwhile T:\n  n, m, k = get_ints()\n  arr = []\n\n  tempN = n\n  while tempN:\n    s = get_string()\n    arr.append(s)\n    tempN -= 1\n\n  solve(n, m, k, arr)\n  T -= 1\n",
                true
            ],
            [
                "import sys\nimport math\nfrom math import factorial, inf, gcd, sqrt\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nfrom bisect import *\nimport random\nfrom sys import stdin, stdout\nsys.setrecursionlimit(10**5)\n\n\ndef inp():\n    return stdin.readline().strip()\n\n\ndef iinp():\n    return int(inp())\n\n\ndef mp():\n    return map(int, inp().split())\n\n\ndef lmp():\n    return list(mp())\n\n\nt = iinp()\nfor i in range(t):\n    m, n, k = mp()\n    a = [list(inp()) for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] != '.':\n                ok = 0\n                while 0 <= i - ok < m and 0 <= j - ok < n and 0 <= j + ok < n and a[\n                        i - ok][j - ok] != '.' and a[i - ok][j + ok] != '.':\n                    ok += 1\n                if ok > k:\n                    for t in range(ok):\n                        a[i - t][j - t] = a[i - t][j + t] = '#'\n    print('YES' if all(j != '*' for i in a for j in i) else 'NO')\n",
                true
            ],
            [
                "import time\nimport os,sys\nfrom datetime import datetime\nfrom math import floor,sqrt,gcd,factorial,ceil,log2\nfrom collections import Counter,defaultdict\nimport bisect\nfrom itertools import chain\nfrom collections import deque\nfrom sys import maxsize as INT_MAX\nfrom itertools import permutations\nfrom collections import deque\nimport heapq\n#import threading\n'''Dont use setrecursionlimit in pypy'''\n#sys.setrecursionlimit(int(1e9)+500)\n#threading.stack_size(0x2000000)\nONLINE_JUDGE,INF,mod=False,float('inf'),int(1e9)+7\nif os.path.exists('D:\\\\vimstuff'):\n    ONLINE_JUDGE=True\n    sys.stdin=open('D:\\\\vimstuff\\\\inp.txt','r')\n    sys.stdout=open('D:\\\\vimstuff\\\\out.txt','w')\n'''def ceil(a,b):\n    return(int((a+b-1)/b))'''\n\ndef readint():\n    return int(sys.stdin.readline())\ndef readstr():\n    return sys.stdin.readline()\ndef readlst():\n    return list(map(int, sys.stdin.readline().strip().split()))\ndef readmul():\n    return map(int, sys.stdin.readline().strip().split())\ndef mulfloat():    return map(float, sys.stdin.readline().strip().split())\ndef flush():\n    return sys.stdout.flush()\ndef power_two(x):\n    return (1<<x)\ndef lcm(a,b):\n    return a*b//gcd(a,b)\n\ndef countGreater(arr,n, k):\n    l = 0\n    r = n - 1\n    leftGreater = n\n    while (l <= r):\n        m = int(l + (r - l) / 2)\n        if (arr[m] >= k):\n            leftGreater = m\n            r = m - 1\n        else:\n            l = m + 1\n            return (n - leftGreater)\n\ndef lower_bound(arr,n,val):\n    l,r=-1,n\n    while r>l+1:\n        m=int((l+r)>>1)\n        if arr[m]<val:\n            l=m\n        else:\n            r=m\n    return r\n\ndef upper_bound(arr,n,val):\n    l,r=-1,n\n    while r>l+1:\n        m=int((l+r)>>1)\n        if arr[m]<=val:\n            l=m\n        else:\n            r=m\n    return l\n\ndef binpow(a,n,mod):\n    res=1\n    while n:\n        if n&1:\n            res=(res*a)%mod\n            n-=1\n        a=(a*a)%mod\n        n=n>>1\n    return res\n\ndef printmat(l,seperate=True):\n    for i in range(0,len(l)):\n        if(seperate):\n            print(*l[i],sep=\" \")\n        else:\n            print(*l[i],sep=\"\")\n\ndef is_perfect_square(num):\n    #print(num)\n    temp = num**(0.5)\n    #print(temp)\n    return (temp//1)==temp\n\ndef find(res):\n    n1=res\n    while par[n1]!=n1:\n        par[n1]=par[par[n1]]\n        n1=par[n1]\n    return n1\n\ndef union(u,v):\n    p1,p2=find(u),find(v)\n    if p1==p2:\n        return 0\n    if(rank[p1]>rank[p2]):\n        p1,p2=p2,p1\n    par[p1]=p2\n    rank[p2]+=rank[p1]\n    return 1\n\nclass PriorityQueue:\n    def __init__(self, elements = None):\n        if(elements == None):\n            self.elements = list()\n        elif type(elements) == list:\n            heapq.heapify(elements)\n            self.elements = elements\n        self.cnt=0\n    def __str__(self):\n        return str(self.elements)\n    # for checking if the queue is empty\n    def isEmpty(self):\n        return len(self.elements) == 0\n    # for inserting an element in the queue\n    def push(self, element):\n        heapq.heappush(self.elements, element)\n        self.cnt+=1\n    # for popping an element based on Priority\n    def pop(self):\n        self.cnt-=1\n        return heapq.heappop(self.elements)\n    def getlen(self):\n        return self.cnt\n\n\n\n'''\nc-space = to copy\no-space= to open file\n,-space=to run prog\n:noh= to get rid of text highlight\n\n1. Implement after understanding properly don't do in vain.\n2. Check corner cases.\n3. Use python if there is recursion,try-catch,dictionary.\n4. Use pypy if heavy loop,list slice.\n'''\n\ndef checkstar(s):\n    for i in range(len(s)):\n        for j in range(len(s[0])):\n            if s[i][j]=='*':\n                return True\n    return False\n\ndef john_3_16():\n    n,m,k=readmul()\n    s=[]\n    for _ in range(n):\n        s.append([i for i in input()])\n    vis=[[False for _ in range(m)]for _ in range(n)]\n    if checkstar(s)==False:\n        print('YES')\n        return\n    if k>=n:\n        print('NO')\n        return\n    ro=k\n    while ro<n:\n        for j in range(m):\n            if s[ro][j]==\"*\":\n                w,dis=1,0\n                for h in range(ro-1,-1,-1):\n                    if(j+w<m and j-w>=0 and s[h][w+j]=='*' and s[h][w+j]==s[h][j-w]):\n                        dis+=1\n                    else:\n                        break\n                    w+=1\n                if dis>=k:\n                    vis[ro][j]=True\n                    w=1\n                    for h in range(ro-1,-1,-1):\n                        if(j+w<m and j-w>=0 and s[h][w+j]==s[h][j-w] and s[h][w+j]=='*'):\n                            vis[h][w+j],vis[h][j-w]=True,True\n                        else:\n                            break\n                        w+=1\n\n\n        ro+=1\n    #print(vis)\n    for i in range(n):\n        for j in range(m):\n            if s[i][j]=='*' and vis[i][j]==False:\n                print('NO')\n                return\n    print('YES')\n    return\n\n\n\ndef main():\n    tc=readint()\n    #tc=1\n    #cnt=0\n    start=time.time()\n    #cnt=1\n    while tc:\n        john_3_16()\n        tc-=1\n        #cnt+=1\n    if ONLINE_JUDGE:\n        print(f'{(time.time()-start)*1000}ms')\n        pass\nmain()\n\n",
                true
            ],
            [
                "def ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().split())\ndef msi(): return map(str,input().split())\ndef li(): return list(mi())\n\nt=ii()\nfor _ in range(t):\n    n,m,k=mi()\n    #star=0\n    mat=[[0 for j in range(m)] for i in range(n)]\n    res=[[0 for j in range(m)] for i in range(n)]\n    #dp=[[0 for j in range(m)] for i in range(n)]\n    #visited=[[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        s=si()\n        #star+=s.count('*')\n        for j in range(m):\n            mat[i][j]=s[j]\n            \n    #ticks=[]\n        \n    for i in range(n-1,-1,-1):\n        for j in range(m-1,-1,-1):\n            if i==0 or j==0 or j==m-1:\n                if mat[i][j]=='.':\n                    res[i][j]=mat[i][j]\n                \n            else:\n                if mat[i][j]=='*':\n                    if mat[i-1][j-1]=='*' and mat[i-1][j+1]=='*':\n                        \n                        size=0\n                        a,b,c=i-1,j-1,j+1\n                        while a>=0 and b>=0 and c<m and mat[a][b]=='*' and mat[a][c]=='*':\n                            a-=1\n                            b-=1\n                            c+=1\n                            size+=1\n                            \n                        if size>=k:\n                            a,b,c=i-1,j-1,j+1\n                            res[i][j]='*'\n                            while a>=0 and b>=0 and c<m and mat[a][b]=='*' and mat[a][c]=='*':\n                                res[a][b]='*'\n                                res[a][c]='*'\n                                a-=1\n                                b-=1\n                                c+=1\n                                #size+=1\n                                \n                else:\n                    res[i][j]=mat[i][j]\n    \n    #print(mat)\n    #print(res)\n    #print(ticks)\n    if mat==res:\n        print('YES')\n            \n    else:\n        print('NO')",
                true
            ],
            [
                "def test():\n    #n = int(input(\"\"))\n    #a = list(map(int, input().split(\" \")))\n    t = int(input())\n    for _ in range(t):\n        n, m, k = map(int, input().split(\" \"))\n        board = []\n        for ___ in range(n):\n            board.append(input())\n        for i in range(n-1, -1, -1):\n            for j in range(m):\n                if board[i][j] in ['*', '&']:\n                    is_vi = True\n                    for h in range(1, min(m-1-j, j, i) + 1):\n                        if min(m-1-j, j, i) < k:\n                            continue\n                        if board[i-h][j+h] == '.' or board[i-h][j-h] == '.':\n                            is_vi = False\n                        if is_vi:\n                            if board[i-h][j+h] in ['*', '&'] and board[i-h][j-h] in ['*', '&']:\n                                l_i = list(board[i])\n                                l_i[j] = '&'\n                                board[i] = ''.join(l_i)\n                                l_i__h = list(board[i-h])\n                                l_i__h[j+h] = '&'\n                                l_i__h[j-h] = '&'\n                                board[i-h] = ''.join(l_i__h)\n\n        flag = True\n        for i in range(n):\n            for j in range(m):\n                if board[i][j] == '*':\n                    flag = False\n        if flag:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n                            \n\ntest()",
                true
            ],
            [
                "import sys, heapq\n\ntc = int(sys.stdin.readline())\nfor _ in range(tc):\n    n, m, k = map(int, sys.stdin.readline().split())\n    arr = [list(sys.stdin.readline().rstrip()) for _ in range(n)]\n    check = [[False] * m for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if arr[i][j] == '*':\n                left = 0\n                right = 0\n                nx, ny = i, j\n                while 0 <= nx - 1 < n and 0 <= ny - 1 < m and arr[nx - 1][ny - 1] == '*':\n                    left += 1\n                    nx -= 1\n                    ny -= 1\n                nx, ny = i, j\n                while 0 <= nx - 1 < n and 0 <= ny + 1 < m and arr[nx - 1][ny + 1] == '*':\n                    right += 1\n                    nx -= 1\n                    ny += 1\n                if min(left, right) >= k:\n                    x, y = i, j\n                    for p in range(min(left, right) + 1):\n                        check[x - p][y - p] = True\n                        check[x - p][y + p] = True\n    can = True\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == '*' and not check[i][j]:\n                can = False\n    print('YES' if can else 'NO')",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n,m,lim=map(int,input().split())\n    mat=[]\n    test=[]\n    for i in range(n):\n        s=input()\n        row=[]\n        for j in range(m):\n            if(s[j]=='*'):\n                row.append(1)\n            else:\n                row.append(0)\n        mat.append(row)\n        test.append([0]*m)\n    for i in range(n):\n        for j in range(m):\n            if(mat[i][j]==0):\n                continue\n            count=1\n            while(1):\n                x=i-count\n                y1=j+count\n                y2=j-count\n                if(0<=x<n and 0<=y1<m and 0<=y2<m):\n                    if(mat[x][y1]==1 and mat[x][y2]==1):\n                        pass\n                    else:\n                        break\n                else:\n                    break\n                count+=1\n            if(count>=(lim+1)):\n                for k in range(count):\n                    x=i-k\n                    y1=j-k\n                    y2=j+k \n                    test[x][y1]=1\n                    test[x][y2]=1\n    flag=True\n    for i in range(n):\n        for j in range(m):\n            if(mat[i][j]!=test[i][j]):\n                flag=False\n    if(flag):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "def max_k(arr, x, y, n, m):\n    i, j1, j2 = x, y, y\n    k = 0\n    while (0 <= i - k < n and 0 <= j1 - k < m and 0 <= j2 + k < m and\n           arr[i - k][j1 - k] == '*' and arr[i - k][j2 + k] == '*'):\n        k += 1\n    return k - 1\n\n\ndef solve():\n    n, m, k = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n\n    colored = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '.':\n                continue\n\n            mk = max_k(a, i, j, n, m)\n            if mk < k:\n                continue\n\n            for delta in range(mk + 1):\n                colored[i-delta][j-delta] = 1\n                colored[i-delta][j+delta] = 1\n\n    # print()\n    # for i in range(n):\n    #     print(*colored[i], sep=' ')\n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*' and not colored[i][j]:\n                print(\"NO\")\n                return\n    print(\"YES\")\n\n\"\"\"\n\n\n\"\"\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\n\n\nmain()\n",
                true
            ],
            [
                "import sys\nimport math\nfrom bisect import bisect_right as br\n\n#from statistics import mode\n\nfrom itertools import combinations as cb\n\ndef int_arr(): return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr(): return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input(): return sys.stdin.readline().strip()\n\n\n#sys.stdout = open('d/output.txt', 'w')\n#sys.stdin = open('d/input.txt', 'r')\n\ndef up(ci,cj,d,ch):\n\n    ti=ci-1\n    tj=cj+1\n    td=d\n    x=0\n    temp=[]\n    flag=1\n    while ti>=0 and tj<m:\n        \n        if td==0:\n            break\n        if arr[ti][tj]=='.':\n            flag=0\n            break\n        temp.append([ti,tj])\n        td-=1\n        ti-=1\n        tj+=1\n    if flag==1 and td==0:\n        for i in temp:\n            arr[i[0]][i[1]]='d'\n        for i in ch:\n            arr[i[0]][i[1]]='d'\n    \n\n\n\n\nfor _ in range(int(input())):\n    n,m,k=int_arr()\n    arr=[]\n    for i in range(n):\n        arr.append([j for j in input()])\n\n\n    for i in range(n):\n\n        for j in range(m):\n            ch=[]\n            if arr[i][j]=='.':\n                continue\n\n            ci=i\n            cj=j\n            d=-1\n            #ch.append([ci,cj])\n            while ci<n and cj<m:\n                if arr[ci][cj]=='.':\n                    break\n                ch.append([ci,cj])\n                d+=1\n                if d<k:\n                    ci+=1\n                    cj+=1\n                    \n                    continue\n                up(ci,cj,d,ch)\n                ci+=1\n                cj+=1\n            \n\n    flag=1\n    for l in arr:\n        for u in l:\n            if u=='*':\n                print('NO')\n                flag=0\n                break\n        if flag==0:\n            break\n    else:\n        print(\"YES\")\n        \n        \n\n\n\n",
                true
            ],
            [
                "import sys\ninput = lambda :sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    n,m,k=map(int,input().split())\n    a = [input() for _ in range(n)]\n    def check(x,y):\n        return x>=0 and y>=0 and y<m and a[x][y]=='*'\n    points = set()\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]=='.':\n                continue\n            x,y = i,j;\n            st1,st2=[],[]\n            while check(x,y):\n                st1.append((x,y));\n                x-=1;y-=1\n            x,y =i,j\n            while check(x,y):\n                st2.append((x,y))\n                x-=1;y+=1\n            mn = min(len(st1),len(st2))\n            if len(st1)-1>=k and len(st2)-1>=k:\n                # print(i,j,st1,st2)\n                for K in range(mn):\n                    points.add(st1[K])\n                    points.add(st2[K])\n    ans = \"YES\"\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*' and (i,j) not in points:\n                ans = \"NO\"\n                break;\n    print(ans)",
                true
            ],
            [
                "import sys\nreadline=sys.stdin.readline\n\nT=int(readline())\nfor _ in range(T):\n    N,M,K=map(int,readline().split())\n    grid=[list(readline().rstrip()) for i in range(N)]\n    grid_=[[\".\" for m in range(M)] for n in range(N)]\n    for k in range(K,11):\n        for n in range(N):\n            for m in range(M):\n                if 0<=n-k and 0<=m-k and m+k<M:\n                    bl=True\n                    if grid[n][m]==\".\":\n                        bl=False\n                    for i in range(1,k+1):\n                        if grid[n-i][m-i]==\".\":\n                            bl=False\n                        if grid[n-i][m+i]==\".\":\n                            bl=False\n                    if bl:\n                        grid_[n][m]=\"*\"\n                        for i in range(1,k+1):\n                            grid_[n-i][m-i]=\"*\"\n                            grid_[n-i][m+i]=\"*\"\n    if grid==grid_:\n        ans=\"YES\"\n    else:\n        ans=\"NO\"\n    print(ans)",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nCasimir has a string s which consists of capital Latin letters 'A', 'B', and 'C' only. Each turn he can choose to do one of the two following actions:\n\n  * he can either erase exactly one letter 'A' and exactly one letter 'B' from arbitrary places of the string (these letters don't have to be adjacent); \n  * or he can erase exactly one letter 'B' and exactly one letter 'C' from arbitrary places in the string (these letters don't have to be adjacent). \n\n\n\nTherefore, each turn the length of the string is decreased exactly by 2. All turns are independent so for each turn, Casimir can choose any of two possible actions.\n\nFor example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by erasing the first occurrence of 'B' and the second occurrence of 'A'). There are also many other options for a turn aside from this particular example.\n\nFor a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "from collections import Counter\n     \nt = int(input())\n     \nfor i in range(t):\n    s = input()\n        \n    c = Counter(s)\n        \n    x = c['A'] + c['C'] == c['B']\n    print('YES' if x else 'NO')",
                true
            ],
            [
                "a=input()\nwhile True:\n    try:\n        cin=input()\n        ca=0\n        cb=0\n        cc=0\n        for i in cin:\n            if i==\"A\":\n                ca+=1\n            if i==\"B\":\n                cb+=1\n            if i==\"C\":\n                cc+=1\n        if ca==(cb-cc):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    except:\n        break",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    x = input()\n    if x.count('A')+x.count('C') == x.count('B'):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "from sys import stdin, stdout\n#stdin = open('Casimir String Solitaire.txt', 'r') \ndef II(): return int(stdin.readline())\ndef SI(): return stdin.readline()[:-1]\n\n\ndef solve():\n    s = SI()\n    l = len(s)\n    if l == 0:\n        stdout.write(\"YES\\n\")\n        return \n    a, b, c = 0, 0, 0\n    for x in s:\n        if x == 'A':\n            a += 1\n        elif x == 'B':\n            b+= 1\n        elif x == 'C':\n            c+= 1\n    l = b - a - c\n    if l == 0:\n        stdout.write(\"YES\\n\")\n    else:\n        stdout.write(\"NO\\n\")\n\nt=II()\nfor _ in range(t):\n    solve()",
                true
            ],
            [
                "for i in range(int(input())):\n    s = input()\n    a = b = 0\n    for i in s:\n        if i == 'A' or i == 'C':\n            a += 1\n        else:\n            b += 1\n    print('YES' if a == b else 'NO')",
                true
            ],
            [
                "a = int(input())\n\nfor i in  range(   a):\n    a=input()\n    ac=0\n    bc=0\n    cc=0\n    for j in range(len(a)):\n        if a[j]==\"A\":\n            ac=ac+1\n        if a[j]==\"B\":\n            bc=bc+1    \n        if a[j]==\"C\":\n            cc=cc+1\n    if(bc==ac+cc):\n        print(\"YES\")\n    else:\n        print(\"NO\")            ",
                true
            ],
            [
                "t=int(input())\nfor tt in range(t):\n    s=input()\n    if(s.count('A')+s.count('C')==s.count('B')):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for tc in range(int(input())):\n    s=input()\n    count1,count2,count3=0,0,0\n    for i in range(len(s)):\n        if(s[i]=='A'):\n            count1+=1\n        if(s[i]=='B'):\n            count2+=1\n        if(s[i]=='C'):\n            count3+=1\n    if(count1+count3==count2):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    sr=input()\n    b=sr.count('B')\n    a=sr.count('A')\n    c=sr.count('C')\n    \n    if b==a+c:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "b=0\nt=int(input())\nfor i in range (t):\n    l=input()\n    if l.count('B')==len(l)/2 :\n        print(\"YES\")\n    else :\n         print(\"NO\")",
                true
            ],
            [
                "\nn = int(input())\na = []\nx = 0\nb = 0\nc = 0\nfor i in range(n):\n    a.append(input())\n\nfor i in range(len(a)):\n\n    for j in range(len(a[i])):\n        if a[i][j] == \"B\":\n            b += 1\n        elif a[i][j] == \"C\":\n            c += 1\n        elif a[i][j] == \"A\":\n            x += 1\n    if x + c == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    x = 0\n    b = 0        \n    c = 0    ",
                true
            ],
            [
                "# cook your dish here\nfor _ in range(int(input())):\n      s=input()\n      a=s.count(\"A\")\n      b=s.count(\"B\")\n      c=s.count(\"C\")\n      if(a+c==b):\n            print(\"YES\")\n      else:\n            print(\"NO\")",
                true
            ],
            [
                "import sys\nfrom collections import Counter \ninput = lambda:sys.stdin.readline().strip()\nt = int(input())\nwhile t:\n    t-=1\n    s = Counter(input())\n    if (s['A']+s['C'])==s['B']:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    ",
                true
            ],
            [
                "from collections import Counter\nimport sys, io, os\n\ninput = sys.stdin.readline # for strings\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline # for non-strings\n\ndef solve():\n    T = int(input())\n    for _ in range(T):\n        S = input().strip()\n        c = Counter(S)\n        if c['B']>0 and c['B']==(c['A']+c['C']):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__==\"__main__\":\n    solve()\n\n",
                true
            ],
            [
                "def print_hi(st):\n    # Use a breakpoint in the code line below to debug your script.\n    aa = 0\n    bb = 0\n    cc = 0\n    for j in range(len(st)):\n        if st[j] == 'A':\n            aa += 1\n        elif st[j] == 'B':\n            bb += 1\n        elif st[j] == 'C':\n            cc += 1\n    if len(st) % 2 != 0:\n        print('NO')\n    else:\n        if bb == aa + cc:\n            print('YES')\n        else:\n            print('NO')\n\n\n# Press the green button in the gutter to run the script.\nif __name__ == '__main__':\n    t = int(input())\n    for i in range(t):\n        st = input()\n        print_hi(st)\n",
                true
            ],
            [
                "t=int (input()) \nwhile(t != 0):\n    s = input()\n    a = s.count('A') \n    b = s.count('B')\n    c = s.count('C')\n    if(a+c == b):\n      print(\"YES\")\n    else:\n      print(\"NO\")\n    t -= 1",
                true
            ],
            [
                "from bisect import bisect_left as bl\nn=int(input())\nfor i in range(n):\n    s=input()\n    a=s.count(\"A\")\n    b=s.count(\"B\")\n    c=s.count(\"C\")\n    if(a+c==b):\n        print(\"YES\")\n    else:print(\"NO\")\n            \n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    s=input()\n    print('YES' if s.count('B')==(s.count('A')+s.count('C')) else 'NO')",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    cnt = 0\n    for e in s:\n        if e == 'B':\n            cnt += 1\n    print(['NO', 'YES'][cnt == len(s) - cnt])",
                true
            ],
            [
                "for _  in range(int(input())):\n    a=input()\n    ac=bc=cc=0\n    for i in a:\n        if i=='A':\n            ac+=1\n        elif i=='B':\n            bc+=1 \n        elif i=='C':\n            cc+=1 \n    if ac+cc==bc:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for i in range(int(input())):\n    x = input()\n    val = 0\n    if len(x)%2==0:\n        if x.count(\"B\")==len(x)/2:\n            val=1\n    if val==1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "t=int(input())\nwhile(t>0):\n    s=input()\n    a=s.count('A')\n    b=s.count('B')\n    c=s.count('C')\n    if(a+c == b):\n        print('YES')\n    elif(((a==0) and (b==c)) or ((c==0) and (a==b))):\n        print('YES')\n    else:\n        print('NO')\n    t=t-1\n",
                true
            ],
            [
                "for i in range(int(input())):\n    s=input()\n    print('YES' if s.count('B')==(s.count('A')+s.count('C')) else 'NO')\n    \n    ",
                true
            ],
            [
                "def get_counts(s):\n    a_count = 0\n    b_count = 0\n    c_count = 0\n\n    for i in s:\n        if i == 'A':\n            a_count += 1\n        elif i == 'B':\n            b_count += 1\n        elif i == 'C':\n            c_count += 1\n\n    return a_count, b_count, c_count\n\n\ndef solution():\n    t = eval(input())\n    result = []\n    while t > 0:\n        s = input()\n        a, b, c = get_counts(s)\n        if b == a + c:\n            result.append('YES')\n        else:\n            result.append('NO')\n        t -= 1\n\n    for i in result:\n        print(i)\n\n\nsolution()\n\n",
                true
            ],
            [
                "T=int(input())\nwhile T:\n    T-=1\n    ch=input()\n    a=ch.count('A')\n    b=ch.count('B')\n    c=ch.count('C')\n    if a+c==b:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "n = int(input())\nfor _ in range(n):\n    s = input()\n    ac = bc = cc = 0\n    for ele in s:\n        if ele == 'A':\n            ac += 1\n        elif ele == 'B':\n            bc += 1\n        else:\n            cc += 1\n    if bc == (ac + cc):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "from collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom math import inf\n\nri = lambda : map(int, input().split())\nro = lambda : int(input())\n\ndef solve():\n    s = input()\n    n = len(s)\n    if n & 1:\n        print(\"NO\")\n        return\n    cnt = defaultdict(int)\n    for c in s:\n        cnt[c] += 1\n    a,b,c = \"A\",\"B\",\"C\"\n    if cnt[b] < cnt[a]:\n        print(\"NO\")\n        return\n    cnt[b] -= cnt[a]\n    if cnt[b] < cnt[c]:\n        print(\"NO\")\n        return\n    cnt[b] -= cnt[c]\n    if cnt[b] == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = 1\nt = int(input())\nwhile t:\n    t -= 1\n    solve()\n\n",
                true
            ],
            [
                "x = int(input())\nwhile True:\n    p = input()\n    q = 0\n    r = 0\n    for j in p:\n        if j == 'C' or j == 'A':\n            q=q+1\n        else:\n            r=r+1\n    if q == r:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    x=x-1\n    if x>0:\n        continue\n    else:\n        break",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n  s = str(input())\n  A = 0; B = 0; C = 0\n  if len(s) % 2 == 1:\n    print(\"NO\")\n  else:\n    for j in range(len(s)):\n      if s[j] == \"B\":\n        B += 1\n      elif s[j] == \"A\":\n        A += 1\n      elif s[j] == \"C\":\n        C += 1\n    if B == (A + C):\n      print(\"YES\")\n    else:\n      print(\"NO\")",
                true
            ],
            [
                "t =int(input())\nwhile t>0:\n    t-=1\n    s = input()\n    m,n,k = 0,0,0\n    for i in range(len(s)):\n        if s[i] == 'A':\n            m+=1\n        elif s[i] == 'B':\n            n+=1\n        else:\n            k+=1\n    if n == m+k:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\nfor _ in range(int(inpu())) :\n    s = inpu().rstrip('\\n')\n    if s.count('A') + s.count('C') == s.count('B'):\n        prin(\"YES\\n\")\n    else :\n        prin(\"NO\\n\")\n",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    d = Counter(s)\n    if d.get(\"B\") == None:\n        print(\"NO\")\n    else:\n        a=c=0\n        if d.get(\"A\") != None:\n            a = d[\"A\"]\n        if d.get(\"C\") != None:\n            c = d[\"C\"]\n        if (a+c) == d[\"B\"]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n  l = input()\n  p = len(l.split('A'))-1\n  r = len(l.split('C'))-1\n  q = len(l.split('B'))-1\n  if q==p+r:\n    print(\"YES\")\n  else:\n    print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    cnt = s.count('B')\n    if cnt != len(s)//2 or len(s) % 2 != 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(0,t):\n    str=input()\n    x=len(str)\n    a=str.count('A')\n    b=str.count('B')\n    c=str.count('C')\n    if(a+c==b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n        ",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    s=list(s)\n    if s.count('B')==s.count('A')+s.count('C'):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    if len(s) % 2 == 0:\n        while 'A' in s and 'B' in s:\n            s = s.replace('A', '', 1)\n            s = s.replace('B', '', 1)\n        while 'B' in s and 'C' in s:\n            s = s.replace('B', '', 1)\n            s = s.replace('C', '', 1)\n        if s:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "for s in range(int(input())):\n    s=input()\n    if s.count('B')==s.count('A')+s.count('C'):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    ",
                true
            ],
            [
                "n = int(input())\nfor j in range(n):\n    s = input()\n    ca = 0\n    cb = 0\n    cc = 0\n    for i in s:\n        if i == \"A\":\n            ca += 1\n        elif i == \"B\":\n            cb += 1\n        else:\n            cc += 1\n    print(\"YES\" if cb == ca + cc else \"NO\")",
                true
            ],
            [
                "T = int(eval(input()))\n\nfor t in range(1, T + 1):\n    s = input().strip()\n    ct = {el: 0 for el in \"ABC\"}\n    for ch in s:\n        ct[ch] = ct.get(ch, 0) + 1\n\n    print((\"YES\" if ct['B'] == ct['A'] + ct['C'] else \"NO\"))\n\n",
                true
            ],
            [
                "for s in[*open(0)][1:]:print('YNEOS'[2*s.count('B')!=len(s)-1::2])",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    s=input()\n    a=s.count(\"A\")\n    b=s.count(\"B\")\n    c=s.count(\"C\")\n    if b>=a:\n        b=b-a\n        if b==c:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if b>=c:\n            b=b-c\n            if b==a:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\nfor i in range (t):\n    s = input()\n    count_a = 0\n    count_b = 0\n    count_c = 0\n    for j in range(len(s)):\n        if s[j] == \"A\":\n            count_a += 1\n        elif s[j] == \"B\":\n            count_b += 1\n        else:\n            count_c += 1\n    if count_b == count_c + count_a:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "def check(val):    \n    x=val.count('A')\n    y=val.count('B')\n    z=val.count('C')\n\n    if(x-y > 0):\n        print(\"NO\")\n    elif(z-y>0):\n        print(\"NO\")\n    elif(x-y<0 and z+(x-y)==0):\n        print(\"YES\")\n    elif(z-y<0 and x+(z-y)==0):\n        print(\"YES\")\n    elif(x-y==0 and z>0):\n        print(\"NO\")\n    elif(z-y==0 and x>0):\n        print(\"NO\")\n    elif(x-y==0 and z==0 or (z-y==0 and x==0)):\n        print(\"YES\")\n    elif((x+y)!=z):\n        print(\"NO\")\n\ntrials=int(input())\nli=[]\n\nfor i in range(0,trials):\n    temp=input()\n    li.append(temp)\nfor l in li:\n    check(l)\n\n",
                true
            ],
            [
                "test=int(input());\nfor t in range(test):\n    s=input();\n    a=0;\n    b=0;\n    c=0;\n    for i in s:\n        if i=='A':\n            a=a+1;\n        elif i=='B':\n            b=b+1;\n        elif i=='C':\n            c=c+1;\n    if (a+c==b):\n        print(\"YES\");\n    else:\n        print(\"NO\");\n        ",
                true
            ],
            [
                "# cook your dish here\nfor _ in range(int(input())):\n    ip = input()\n    \n    ip=list(ip)\n    while 'A' in ip  and 'B' in ip or 'B' in ip and 'C' in ip:\n        if 'A' in ip and 'B' in ip:\n            ip.remove('B')\n            ip.remove('A')\n        elif 'B' in ip and 'C' in ip:\n            ip.remove('B')\n            ip.remove('C')\n    if len(ip)==0:\n        print('YES')\n    else:\n        print('NO')\n    ",
                true
            ],
            [
                "for i in range(int(input())):\n    l = list(input())\n    a = l.count('A')\n    b = l.count('B')\n    c = l.count('C')\n    if b == 0:\n        print('NO')\n    elif len(set(l)) == 3:\n        if b == c+a:\n            print('YES')\n        else:\n              print('NO')\n    else:\n        if a == 0:\n            if b == c:\n                print('YES')\n            else:\n                print('NO')\n        elif c == 0:\n            if b == a :\n                print('YES')\n            else:\n                print('NO')",
                true
            ],
            [
                "from collections import defaultdict\n\nm = int(input())\nans = []\nfor _ in range(m):\n\n    d = defaultdict(int)\n    s = str(input())\n    for i in s:\n        d[i] += 1\n    ans.append(\"YES\" if d[\"A\"] + d[\"C\"] == d[\"B\"] else \"NO\")\n\nfor i in ans:\n    print(i)",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    ch=input()\n    A=ch.count(\"A\")\n    B=ch.count(\"B\")\n    C=ch.count(\"C\")\n    if B==A+C:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "hm = int(input())\n\nfor _ in range(hm):\n    inp = list(input())\n    ac = inp.count(\"A\") + inp.count(\"C\")\n    b = inp.count(\"B\")\n    if ac - b == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "import math as m\nx=int(input())\ny=[str(input()) for i in range(x)]\ndef f(s,z):\n    return len(s)-len(s.replace(z, ''))\n\nfor i in range(len(y)): \n    if(f(y[i], 'A')+f(y[i], 'B')==f(y[i], 'C') and f(y[i], 'A')==f(y[i], 'B') and f(y[i], 'A')!= 1or f(y[i], 'A')+f(y[i], 'B')==f(y[i], 'C') and f(y[i], 'B')==f(y[i], 'C') ):                     \n    \n        print('YES')\n    else:\n        if(f(y[i], 'B')+f(y[i], 'C')==f(y[i], 'A') and f(y[i], 'B')==f(y[i], 'C') and f(y[i], 'B')!=1 or f(y[i], 'B')+f(y[i], 'C')==f(y[i], 'A') and f(y[i], 'B')==f(y[i], 'A') ):                     \n            print('YES')\n        else:\n            if(f(y[i], 'C')+f(y[i], 'A')==f(y[i], 'B') and f(y[i], 'C')==f(y[i], 'A') and  f(y[i], 'C')!=1 or f(y[i], 'C')+f(y[i], 'A')==f(y[i], 'B') and f(y[i], 'C')==f(y[i], 'B') or f(y[i], 'C')+f(y[i], 'A')==f(y[i], 'B') and f(y[i], 'A')==f(y[i], 'B') ):                     \n                print('YES')\n            else:\n                if(f(y[i], 'C')+f(y[i], 'A')==f(y[i], 'B')):\n                    print('YES')\n                else:\n                    print('NO')",
                true
            ],
            [
                "for t in range(int(input())):\n    s=input()\n    ca=0\n    cb=0\n    cc=0\n    for i in s:\n        if i==\"A\":\n            ca=ca+1\n        elif i==\"B\":\n            cb=cb+1\n        else:\n            cc=cc+1\n    if cb==ca+cc:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n            ",
                true
            ],
            [
                "from collections import Counter\n\n\ndef main():\n    s = input()\n    c = Counter(s)\n    if c['A'] + c['C'] == c['B']:\n        print('YES')\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    t = int(input())\n    while t > 0:\n        t -= 1\n        main()\n",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\nfrom collections import Counter\n\ndef solve(s):\n    count = Counter(s)\n    a = count['A']\n    b = count['B']\n    c = count['C']\n    return a + c == b\n    \n \nT = int(input())\nfor _ in range(T):\n    s = input().strip()\n    if solve(s):\n        print('YES')\n    else:\n        print('NO')\n\n    \n",
                true
            ],
            [
                "from collections import defaultdict as df\nimport sys\ninput = lambda : sys.stdin.readline().rstrip()\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    cnt = df(int)\n    for l in s:\n        cnt[l] += 1\n    a = cnt['A']\n    b = cnt['B']\n    c = cnt['C']\n    if a + c != b:\n        print('NO')\n    else:\n        print('YES')\n    #n,k = map(int, input().split())\n    #n = int(input())\n    #arr = list(map(int, input().split()))\n    #s = sum(arr)\n    #remain = s%n\n    #not_remain = n - remain\n    #print(remain * not_remain)\n    \n    #print()\n    \n",
                true
            ],
            [
                "# cook your dish here\nt = int(input())\nfor i in range(t):\n    s = input()\n    n = len(s)\n    if n%2==0:\n        b = s.count('B')\n        a = s.count('A')\n        c = s.count('C')\n        if b!=n//2:\n            print('NO')\n        else:\n            if a==n//2 or c==n//2 or a+c==n//2:\n                print('YES')\n            else:\n                print('NO')\n    else:\n        print('NO')",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n  s = input()\n  a = s.count('A')\n  b = s.count('B')\n  c = s.count('C')\n  \n  if b >= a and b >= c and c+a == b:\n    print(\"YES\")\n  else:\n    print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nwhile t > 0:\n    s = input()\n    countA, countB, countC = 0, 0, 0\n    res = \"\"\n    for i in s:\n        if i == 'A':\n            countA += 1\n        elif i == 'B':\n            countB += 1\n        else:\n            countC += 1\n    if countB == (countA + countC):\n        res = \"YES\"\n    else:\n        res = \"NO\"\n    print(res)\n    t -= 1\n",
                true
            ],
            [
                "t = int(input())\n\nwhile t>0:\n    n = input()\n    d = {'A':0 , 'B': 0 , 'C': 0}\n    for i in n:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 0\n        \n    if d['A']+d['C']==d['B']:\n        print('YES')\n    else:\n        print('NO')\n    \n    t-=1",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    s = input().rstrip()\n    a = s.count('A')\n    b = s.count('B')\n    c = s.count('C')\n    if a+c == b:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "t=int(input())\nfor i in range(0,t):\n    s=input()\n    v=0\n    c1=s.count('A')\n    c2=s.count('B')\n    c3=s.count('C')\n    if(c2>(c1+c3)):\n        v+=2*(c1+c3)\n    elif(c2<=(c1+c3)):\n        v+=2*c2\n    if((len(s)-v)==0):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "t=int(input())\nwhile(t!=0):\n    t-=1\n    s=input()\n    if(len(s)%2!=0):\n        print(\"NO\")    \n    else:\n        a=s.count(\"A\")   \n        b=s.count(\"B\")\n        c=s.count(\"C\")   \n\n        if(b==a+c):\n            print(\"YES\")\n        else:\n            print(\"NO\")    \n\n\n        ",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    b = s.count('B')\n    if len(s) - b == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "inp1 = int(input())\nfor i in range(inp1):\n    inp2 = input()\n    if inp2.count(\"A\")+inp2.count(\"C\") == inp2.count(\"B\"):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n\n\n\n",
                true
            ],
            [
                "if __name__ == '__main__':\n    for t in range(int(input())):\n        s = input()\n        a = s.count('A')\n        b = s.count('B')\n        c = len(s) - a - b\n\n        print('YES' if a + c == b else 'NO')",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    a=s.count(\"A\")\n    b=s.count(\"B\")\n    c=s.count(\"C\")\n    if (a+c==b) or (a==0 and b==c) or (c==0 and b==a):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    ",
                true
            ],
            [
                "T =int(input());\nfor i in range(T):\n    s =input()\n    a =[]\n    a[:0] =s\n    if(a.count('A') + a.count('C')==a.count('B')):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n    \n        \n##    n =int(input())\n##    a =[int(x) for x in input().split()]\n##    for i in input(1,len(a)+1):\n##        if(min(a[i-1 : len(a)]) ==a[i-1]):\n##            pass\n##        else:\n##            var =min(a[i-1 : len(a)])\n##            var_idx =a.index(var)\n            \n            \n            \n        \n    \n",
                true
            ],
            [
                "def main(string):\n    if len(set(string)) == 1:\n        return 'NO'\n    elif 'B' not in string:\n        return 'NO'\n    elif 'A' not in string:\n        if string.count('B') == string.count('C'):\n            return 'YES'\n        return 'NO'\n    elif 'C' not in string:\n        if string.count('B') == string.count('A'):\n            return 'YES'\n        return 'NO'\n    else:\n        if string.count('B') == string.count('A') + string.count('C'):\n            return 'YES'\n        return 'NO'\n\nfor _ in range(int(input())):\n    print(main(input()))",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    ca = s.count(\"A\")\n    cb = s.count(\"B\")\n    cc = s.count(\"C\")\n    if (cb-ca - cc==0):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=\"\".join(sorted(input()))\n    while \"AB\" in s or \"BA\" in s:\n        s=s.replace(\"AB\",\"\").replace(\"BA\",\"\")\n    while \"BC\" in s or \"CB\" in s:\n        s=s.replace(\"BC\",\"\").replace(\"CB\",\"\")\n    if len(s)==0: print(\"YES\")\n    else: print(\"NO\")\n    \n    \n",
                true
            ],
            [
                "for i in range(int(input())):\n    s=input()\n    b=0\n    n=len(s)\n    for item in s:\n        if item==\"B\":\n            b+=1\n    if n%2!=0:\n        print(\"NO\")\n    else:\n        if b==int(n/2):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n            \n        \n        ",
                true
            ],
            [
                "import sys\nfrom math import ceil\nfrom collections import defaultdict, Counter\n\nTEST = 0\n\nif TEST == 1:\n    input_file = open(\"inputA.txt\", \"r\")\n    input_from_file = input_file.readlines()\n\ndef read_int():\n    if TEST:\n        return int(input_from_file.pop(0))\n    else:\n        return int(sys.stdin.readline())\n\ndef read_ints():\n    if TEST:\n        return list(map(int, input_from_file.pop(0).rstrip().split()))\n    else:\n        return list(map(int, sys.stdin.readline().split()))\n\ndef read_str_to_list():\n    if TEST:\n        in1 = input_from_file.pop(0).rstrip()\n    else:\n        in1 = sys.stdin.readline().rstrip()\n    return [x for x in in1]\n\ndef read_int_to_list():\n    if TEST:\n        in1 = input_from_file.pop(0).rstrip()\n    else:\n        in1 = sys.stdin.readline().rstrip()\n    return [int(x) for x in in1]\n\n\n\n\ntests = read_int()\nfor test in range(tests):\n    # n = read_int()\n    s = read_str_to_list()\n    countA, countB, countC = 0,0,0\n    for c in s:\n        if c is 'A':\n            countA += 1\n        elif c is 'B':\n            countB += 1\n        else:\n            countC += 1\n\n    if countB == countC + countA:\n        print('YES')\n    else:\n        print('NO')\n\n\n\n",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n    s = input()\n    a_c = s.count(\"A\")\n    b_c = s.count(\"B\")\n    c_c = s.count(\"C\")\n    if (a_c <= b_c) and ((b_c - a_c) == c_c):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n      s = input()\n      d = {'A' : 0, 'B' : 0, 'C' : 0}\n      for i in s:\n            d[i] += 1\n      if d['B'] == d['A'] + d['C']:\n            print('YES')\n      else:\n            print('NO')\n",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    a = input()\n    q1 = 0\n    q2 = 0\n    q3 = 0\n    for e in range(len(a)):\n        if a[e] == 'A':\n            q1 += 1\n        elif a[e] == 'B':\n            q2 += 1\n        elif a[e] == 'C':\n            q3 += 1\n    if q1 + q3 == q2:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "num = int(input())\nar = []\n\nfor i in range(num):\n    ar.append(input())\n    \nfor i in range(num):\n    \n    if ar[i].count(\"B\") == len(ar[i]) / 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "def casimir(N):\n    b = 0\n    for i in N:\n        if i == \"B\":\n            b += 1\n    a = float(len(N)/2)\n    if a == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor i in range(t):\n    A = str(input())\n    casimir(A)",
                true
            ],
            [
                "n = int(input())\nfor _ in range(n):\n    t = input()\n    a = t.count('A')\n    b = t.count('B')\n    c = t.count('C')\n    if (a == b and c == 0) or (c == b and a == 0) or ( b - c - a == 0):\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "for _ in range(int(input())):\n   s=input()\n   n=len(s)\n   c = 0\n   b = 0\n   a = 0\n   if n<2:\n       print('NO')\n\n   else:\n      for i in range(n):\n\n        if s[i]=='A':\n            a+=1\n        elif s[i]=='B':\n            b+=1\n        else:\n            c+=1\n      if a+c==b:\n       print('YES')\n      else:\n       print('NO')\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    ch = input()\n    a = ch.count('A')\n    b = ch.count('B')\n    c = ch.count('C')\n    if b == a + c :\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    if s.count('B') == s.count('A')+s.count('C'):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "for i in range(int(input())):\n    s = input()\n    if s.count('A')+s.count('C') == s.count('B'):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "def cst(s):\n    a = s.count(\"A\")\n    b = s.count(\"B\")\n    c = s.count(\"C\")\n    if len(s)==0:\n        return True\n    if c==0:\n        return a==b;\n    elif a==0:\n        return b==c;\n    \n    elif b==0:\n        return False;\n    \n    return (a+c)==b;\n\nfor _ in range(int(input())):\n    flg = cst(str(input()))\n\n    if flg:\n        print(\"YES\");\n    else:\n        print(\"NO\");",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    if s.count('A')+s.count('C')==s.count('B'):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "for _ in range(int(input())):\n    l = input()\n    s_a_c, s_b = 0, 0\n    for el in l:\n        if el in ['A', 'C']:\n            s_a_c += 1\n        else:\n            s_b += 1\n    if s_a_c == s_b:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Sep 28 18:36:01 2021\n\n@author: rhysa\n\"\"\"\n\ncount = int(input())\nfor i in range(0, count):\n    string = input()\n    aCount = string.count(\"A\")\n    bCount = string.count(\"B\")\n    cCount = string.count(\"C\")\n    acCount = aCount + cCount\n    if len(string) % 2 != 0:\n        print(\"NO\")\n    else:\n        \n        if (acCount) == bCount:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=input()\n    a=n.count('A')\n    b=n.count('B')\n    c=n.count('C')\n    if(a+c==b):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "import sys\nreadline=sys.stdin.readline\n\nT=int(readline())\nfor _ in range(T):\n    S=readline().rstrip()\n    A,B,C=0,0,0\n    for s in S:\n        if s==\"A\":\n            A+=1\n        elif s==\"B\":\n            B+=1\n        else:\n            C+=1\n    if A+C==B:\n        ans=\"YES\"\n    else:\n        ans=\"NO\"\n    print(ans)",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    acnt = bcnt = ccnt = 0\n\n    for c in input():\n        if c == 'A':\n            acnt += 1\n        elif c == 'B':\n            bcnt += 1\n        elif c == 'C':\n            ccnt += 1\n    if acnt + ccnt == bcnt:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s=input()\n    x=0\n    y=0\n    z=0\n    for i in range(len(s)):\n        if(s[i]==\"A\"):\n            x=x+1 \n        if(s[i]==\"B\"):\n            y=y+1 \n        if(s[i]==\"C\"):\n            z=z+1 \n        \n    if(x+z==y):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve(s):\n  a = 0\n  b = 0\n  c = 0\n\n  for ele in s:\n    if ele == 'A':\n      a += 1\n    elif ele == 'B':\n      b += 1\n    else:\n      c += 1\n  \n  if a+c != b:\n    print('NO')\n  else:\n    print('YES')\n\n\nT = get_int()\nwhile T:\n  s = get_string()\n  solve(s)\n  T -= 1\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    s=input()\n    a=s.count('A')\n    b=s.count('B')\n    c=s.count('C')\n    if b==a+c:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "a = int(input())\n\nfor _ in range(a):\n    n = input()\n    a = n.count(\"A\")\n    b = n.count(\"B\")\n    c = n.count(\"C\")\n    if b == 0:\n        print(\"NO\")\n        continue\n    if a == 0 and c == b or c == 0 and a == b:\n        print(\"YES\")\n        continue\n    if a > 0 and c > 0 and a + c == b:\n        print('YES')\n        continue\n    else:\n        print(\"NO\")\n        continue",
                true
            ],
            [
                "def f(s:list):\n    if len(s)<2:\n        return 'no'\n    ca = s.count('A')\n    i = 0\n    while i<ca:\n        s.remove('A')\n        if 'B' in s:\n            s.remove('B')\n        else:\n            return 'no'\n        i += 1\n    i = 0\n    cb = s.count('B')\n    while i<cb:\n        s.remove('B')\n        if 'C' in s:\n            s.remove('C')\n        else:\n            return 'no'\n        i += 1\n\n    if s:\n        return 'no'\n    else:\n        return 'yes'\n\n\nt = int(input())\nfor i in range(t):\n    s = list(input())\n    print(f(s).upper())\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    a=b=c=0\n    for i in s:\n        if i=='A':\n            a+=1\n        elif i=='B':\n            b+=1\n        else:\n            c+=1\n    d=a+c\n    if d==b:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "from collections import Counter\n\nfor _ in range(int(input())):\n    s = list(input())\n    c = Counter(s)\n    if c['B']==c['A']+c['C']:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    c = Counter(s)\n    if((c['B']-c['A'])==c['C']):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    a,b,c = 0,0,0\n    for l in s:\n        if l == 'A':\n            a+=1\n        elif l == 'B':\n            b+=1\n        else:\n            c+=1\n    if a+c == b:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "import math\nimport sys\nimport collections\nimport bisect\nimport time\nimport random\nimport itertools\nimport string\nfrom collections import Counter,defaultdict\ndef get_ints():return map(int, sys.stdin.readline().strip().split())\ndef get_list():return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string():return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    s=list(get_string())\n    a,b,c=s.count(\"A\"),s.count(\"B\"),s.count(\"C\")\n    if b>=a and b-a==c:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    a, b, c = 0, 0, 0\n    for i in range(len(s)):\n        if(s[i] == \"A\"):\n            a += 1\n        if(s[i] == \"B\"):\n            b += 1\n        if(s[i] == \"C\"):\n            c += 1\n            \n    if((a + c) == b):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "n=int(input())\nfor i in range(0,n):\n    l=list(map(str,input()))\n    while(('A' in l) and ('B' in l)):\n        l.remove('A')\n        l.remove('B')\n    while(('C' in l) and ('B' in l)):\n        l.remove('C')\n        l.remove('B')\n    if len(l)==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\nwhile t > 0:\n    n = input()\n    k = len(n)\n    ao = 0\n    bo = 0\n    co = 0\n    for i in range(k):\n        if n[i] == \"A\":\n            ao = ao + 1\n        elif (n[i] == \"B\"):\n            bo = bo + 1\n        elif (n[i]==\"C\"):\n            co = co + 1\n\n    if (ao + co == bo):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    t=t-1",
                true
            ],
            [
                "def test():\n    #n = int(input(\"\"))\n    #a = list(map(int, input().split(\"\")))\n    t = int(input())\n    for _ in range(t):\n        d = [0, 0, 0]\n        s = input()\n        for c in s:\n            if c == 'A':\n                d[0] += 1\n            elif c == 'B':\n                d[1] += 1\n            else:\n                d[2] += 1\n        if d[0] + d[2] == d[1]:\n            print('YES')\n        else:\n            print('NO')\n    \ntest()",
                true
            ],
            [
                "def prob1():\n    t=int(input())\n    for i in range(t):\n        s=input(\"\")\n        nummap={'A':0,'B':0,'C':0}\n        for j in range(len(s)):\n            nummap[s[j]]+=1\n        nummap['B']=nummap['B']-nummap['A']-nummap['C']\n        if nummap['B']==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\nif __name__==\"__main__\":\n    prob1()",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    a = 0\n    b = 0\n    c = 0\n    inpt = input()\n    for j in inpt:\n        if j == 'A':\n            a = a + 1\n        elif j == 'B':\n            b = b + 1\n        else:\n            c = c + 1\n\n    if len(inpt) % 2 == 0 and len(inpt) / 2 == b:\n\n        if a == b or c == b or a + c == b:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "t=int(input())\nwhile t:\n    t-=1\n    s=input()\n    a=s.count('B')\n    if a==len(s)//2 and len(s)%2==0:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "for _ in range(int(input())):\n    a=input()\n    A=a.count(\"A\")\n    B=a.count(\"B\")\n    C=a.count(\"C\")\n    if A+C==B:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(eval(input())):\n    s = input().strip()\n    print(\"YES\" if s.count(\"A\") + s.count(\"C\") == s.count(\"B\") else \"NO\")\n",
                true
            ],
            [
                "from collections import Counter\n\n\nt = int(input())\nfor _ in range(t) :\n    c = Counter(input())\n    print(\"YES\" if c.get('A', 0) + c.get('C', 0) == c.get('B', 0) else \"NO\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s=list(input())\n    acount=s.count('A')\n    bcount=s.count('B')\n    ccount=s.count('C')\n    length=len(s)\n    ab_min=min(acount,bcount)\n    length=length-(2*ab_min)\n    acount=acount-ab_min\n    bcount=bcount-ab_min\n    length=length-(2*min(bcount,ccount))\n    if(length==0):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    ",
                true
            ],
            [
                "\n\n\n\nt = int(input())\nfor _ in range(t):\n    \n    \n    s = input()\n\n    a,b,c = 0,0,0\n\n    for x in s:\n        if(x==\"A\"):\n            a+=1\n        elif(x==\"B\"):\n            b+=1\n        else:\n            c+=1\n\n    if(a+c==b):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "def split(n):\n    return [char for char in n]\n\nfor _ in range(int(input())):\n    n=input()\n    n=split(n)\n    a=n.count('A')\n    b=n.count('B')\n    c=n.count('C')\n    if (a==b and c==0) or (b==c and a==0) or (a<b and b-a-c==0):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor x in range(t) :\n    s = input()\n    if(s.count('B') == s.count('A') + s.count('C')):\n        print(\"YES\")\n    else :\n        print(\"NO\")",
                true
            ],
            [
                "from collections import Counter\nt = int(input())\n\ndef solve():\n    s = input()\n    c = Counter(s)\n    c[\"B\"] -= c[\"C\"]\n    c[\"B\"] -= c[\"A\"]\n    if c[\"B\"] == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n            \nfor _ in range(t):\n    solve()\n    \n\n\n\n    \n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    s=[i for i in input()]\n    while(s.count('B')!=0 and s.count('C')!=0):\n        s.remove('B')\n        s.remove('C')\n    while(s.count('A')!=0 and s.count('B')!=0):\n        s.remove('A')\n        s.remove('B')\n    if(len(s)==0):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    s = str(input())\n    for i in range(int(len(s)/2)):\n        s = s.replace(\"AB\",\"\")\n        s = s.replace(\"BC\",\"\")\n        s = s.replace(\"CB\",\"\")\n        s = s.replace(\"BA\",\"\")\n    if(len(s) == 0):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    a = s.count('A')\n    b = s.count('B')\n    c = s.count('C')\n    if a > 0 and b > 0 and c > 0:\n        if b == (a + c):\n            print('YES')\n        else:\n            print('NO')\n    elif a > 0 and b > 0 and c == 0:\n        if a == b:\n            print('YES')\n        else:\n            print('NO')\n    elif c > 0 and b > 0:\n        if c == b:\n            print('YES')\n        else:\n            print('NO')\n    else:\n            print('NO')",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\n#sys.setrecursionlimit(10**7)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\ndef hnbhai(tc):\n    s=sa()\n    a=s.count('A')\n    b=s.count('B')\n    c=s.count('C')\n    if a+c==b:\n        print(\"YES\")\n        return\n    print(\"NO\")\nfor _ in range(sb()):\n    hnbhai(_+1)\n",
                true
            ],
            [
                "def check(s):\n    a,b,c = 0,0,0\n    for i in s:\n        if(i=='A'):\n            a += 1\n        elif(i=='B'):\n            b += 1\n        elif(i =='C'):\n            c += 1\n    if(a+c==b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\nfor t in range(int(input())):\n    s = input()\n    check(s)",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n    s = input()\n    w = (s.count('A') + s.count('C'))\n    if w == (s.count('B')):\n        print(\"YES\")\n    else: print(\"NO\")",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    c = Counter(input())\n    print(\"YES\" if (c['B']-c['A'])==c['C'] else \"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = list(input())\n    if s.count('B') != s.count('A') + s.count('C'):\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n\ndef get_integers():\n    return map(int, input().strip().split())\n\n\ndef solve(s: str):\n    storage = [0]*3\n    for char in s:\n        if char == 'A':\n            storage[0] += 1\n        elif char == 'B':\n            storage[1] += 1\n        elif char == 'C':\n            storage[2] += 1\n    if storage[0] + storage[2] == storage[1]:\n        return \"YES\"\n    return \"NO\"\n\n\nt = int(input().strip())\nfor _ in range(t):\n    s = input().strip()\n    ans = solve(s)\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    a = s.count(\"A\")\n    b = s.count(\"B\")\n    c = s.count(\"C\")\n\n    # print(a,b,c)\n\n    if a == c and 2*a == b:\n        print(\"YES\")\n    elif (a+c) == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "import math\nfrom collections import defaultdict, Counter\n# import sys\n# sys.stdin = open('input.txt', 'r')  \n# sys.stdout = open('output.txt', 'w+')\n\n\n\n\nfor t in range(int(input())):\n    s = input()\n    d = Counter(s)\n    if d['C']+d['A']==d['B']:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    if len(s) & 1 or s.count('B') != len(s) // 2:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "#from takeIO import io\n#io()\nfor _ in range(int(input())):\n    S=input()\n    Hm={\"A\":0,\"B\":0,\"C\":0}\n    for i in S:\n        Hm[i]+=1\n    a=Hm[\"A\"]\n    b=Hm[\"B\"]\n    c=Hm[\"C\"]\n    b-=a\n    if b==c:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "i = int(input())\nfor j in range (i):\n    s = input()\n    count =0\n    for i in s:\n        if i == 'A':\n            count += 1\n        elif i == 'B':\n            count -= 1\n        elif i== 'C':\n            count += 1\n    if count == 0:\n        print(\"YES\")\n        \n    else :\n        print(\"NO\")",
                true
            ],
            [
                "tc = int(input())\nwhile tc != 0:\n    arr = input()\n\n    size =  len(arr)\n\n    if size%2 != 0:\n        print(\"NO\")\n    else:\n        i=0\n        counta = 0\n        countb = 0\n        while i<size:\n            if arr[i] == 'A' or arr[i] == 'C':\n                counta += 1\n            if arr[i] == 'B':\n                countb += 1\n\n            i +=1\n\n        if counta == countb:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n            \n\n\n    tc -= 1\n",
                true
            ],
            [
                "for i in range(int(input())):\n    s=input()\n    a=s.count('A')\n    b=s.count('B')\n    c=s.count('C')\n    if a+c==b:print('YES')\n    else:print('NO')\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    l=[i for i in input()]\n    if len(l)%2==1: print('NO')\n    else:\n        if l.count('B')==l.count('A')+l.count('C'): print('YES')\n        else: print('NO')",
                true
            ],
            [
                "t = int(input())\nfor l in range(t):\n    s = input()\n    ch = s\n    i = 0\n    a = 0\n    b = 0\n    c = 0\n    j = (len(ch))\n\n    for i in range (j):\n        if (ch[i]==\"A\"):\n            a+=1\n        elif (ch[i]==\"B\"):\n            b+=1\n        elif (ch[i]==\"C\"):\n            c+=1\n\n    if (b<a):\n        print(\"NO\")\n        continue\n    b=b-a\n    if (b == c):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for i in range(int(input())):\n    a=input()\n    if(a.count('B')==a.count('A')+a.count('C')):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n  a=input()\n  c=0\n  if(a==\"AB\" or a==\"BC\" or a==\"CB\" or a==\"BA\"):\n    print(\"YES\")\n  elif(len(a)%2!=0 or len(a)<=2):\n    print(\"NO\")\n  else:\n    for P in a:\n      if P=='B':\n       c=c+1\n    if(c==len(a)//2):\n        print(\"YES\")\n    else:\n        print(\"NO\") \n\n        \n\n\n  \n\n\n\n  \n   \n\n\n\n\n \n  ",
                true
            ],
            [
                "t = int(input())\nwhile(t):\n    s = input()\n    a = s.count('A')\n    b = s.count('B')\n    c = s.count('C')\n    min_ab = min(a, b)\n    min_bc = min(b, c)\n    if min_ab > -1:\n        a = a-min_ab\n        b = b - min_ab\n    if min_bc > -1:\n        b = b - min_bc\n        c = c- min_bc\n    if a == b == c:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    t-=1",
                true
            ],
            [
                "from collections import deque, Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial, log2\nfrom heapq import heapify, heappush, heappop\n\n# import sys\n# sys.setrecursionlimit(10**7) \n\nMOD = 10**9 + 7\ninf = float(\"inf\")\nans_ = []\n\ndef nin():return int(input())\ndef ninf():return int(file.readline())\n\ndef st():return (input().strip())\ndef stf():return (file.readline().strip())\n\ndef read(): return list(map(int, input().strip().split()))\ndef readf():return list(map(int, file.readline().strip().split()))\n\ndef readfl(): return list(map(float, input().strip().split()))\ndef readffl():return list(map(float, file.readline().strip().split()))\n\n\n# file = open(\"input.txt\", \"r\")\ndef solve():\n    for _ in range(nin()):\n        s = st()\n        dic = dfd(int)\n        for i in s:dic[i] += 1\n        \n        if dic[\"B\"] == dic[\"A\"]+dic[\"C\"]:\n            ans_.append(\"YES\")\n        else:\n            ans_.append(\"NO\")\n        \n        \nsolve()\n\nfor i in ans_:\n    print(i)\n    \n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    a=s.count('A')\n    b=s.count('B')\n    c=s.count('C')\n    if ((a==b and c==0) or (a==0 and b==c) or (b>a and c==b-a) or (b>c and a==b-c)):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "import sys;input=sys.stdin.readline\ndef get():\n    return input().strip()\nfor _ in range(int(get())):\n    l=list(get())\n    a=len(l)\n    c=0\n    while True:\n        f=0\n        if \"A\" in l and \"B\" in l and c < 2:\n            l.remove(\"A\")\n            l.remove(\"B\")\n            f=1\n        if \"C\" in l and \"B\" in l and c < 2:\n            l.remove(\"C\")\n            l.remove(\"B\")\n            f=1\n        if f==0:\n            break\n    if len(l)==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
                true
            ],
            [
                "t=int(input())\nwhile(t>0):\n    n=input()\n    res=list(n)\n    res=sorted(res)\n    \n    \n    ca=res.count('A')\n    cb=res.count('B')\n    cc=res.count('C')\n    if(ca>cb):\n        print(\"NO\")\n    elif(ca<=cb):\n        x=cb-ca\n        if(x==cc):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n    t=t-1\n            ",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nFrog Gorf is traveling through Swamp kingdom. Unfortunately, after a poor jump, he fell into a well of n meters depth. Now Gorf is on the bottom of the well and has a long way up.\n\nThe surface of the well's walls vary in quality: somewhere they are slippery, but somewhere have convenient ledges. In other words, if Gorf is on x meters below ground level, then in one jump he can go up on any integer distance from 0 to a_x meters inclusive. (Note that Gorf can't jump down, only up).\n\nUnfortunately, Gorf has to take a break after each jump (including jump on 0 meters). And after jumping up to position x meters below ground level, he'll slip exactly b_x meters down while resting.\n\nCalculate the minimum number of jumps Gorf needs to reach ground level.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 300 000) \u2014 the depth of the well.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 i), where a_i is the maximum height Gorf can jump from i meters below ground level.\n\nThe third line contains n integers b_1, b_2, \u2026, b_n (0 \u2264 b_i \u2264 n - i), where b_i is the distance Gorf will slip down if he takes a break on i meters below ground level.\n\nOutput\n\nIf Gorf can't reach ground level, print -1. Otherwise, firstly print integer k \u2014 the minimum possible number of jumps.\n\nThen print the sequence d_1,\\,d_2, \u2026,\\,d_k where d_j is the depth Gorf'll reach after the j-th jump, but before he'll slip down during the break. Ground level is equal to 0.\n\nIf there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n\n3\n0 2 2\n1 1 0\n\n\nOutput\n\n\n2\n1 0 \n\n\nInput\n\n\n2\n1 1\n1 0\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n10\n0 1 2 3 5 5 6 7 8 5\n9 8 7 1 5 4 3 2 0 0\n\n\nOutput\n\n\n3\n9 4 0 \n\nNote\n\nIn the first example, Gorf is on the bottom of the well and jump to the height 1 meter below ground level. After that he slip down by meter and stays on height 2 meters below ground level. Now, from here, he can reach ground level in one jump.\n\nIn the second example, Gorf can jump to one meter below ground level, but will slip down back to the bottom of the well. That's why he can't reach ground level.\n\nIn the third example, Gorf can reach ground level only from the height 5 meters below the ground level. And Gorf can reach this height using a series of jumps 10 \u21d2 9 \\dashrightarrow 9 \u21d2 4 \\dashrightarrow 5 where \u21d2 is the jump and \\dashrightarrow is slipping during breaks.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import math\nimport random\n\ndef query(l,r,n,tree):\n  \n  ans=float('inf')\n  idx=None \n  l+=n\n  r+=n\n  prev_ans=ans\n  while l<=r:\n    if l&1:\n      #MODIFY QUERY HERE\n      \n      ans=min(tree[l][0],ans)\n      \n      if (prev_ans!=ans):\n          idx=tree[l][1]\n          prev_ans=ans \n      l+=1\n    if r&1==0:\n      #MODIFY QUERY HERE\n      ans=min(tree[r][0],ans)\n      if (ans!=prev_ans):\n          idx=tree[r][1]\n          prev_ans=ans\n      r-=1\n    l>>=1 \n    r>>=1\n  return idx\n\ndef update(i,val,n,tree):\n  \n  i+=n \n  \n  tree[i][0]=val[0]\n  tree[i][1]=val[1] \n  i>>=1\n  \n  while i>=1:\n    #MODIFY UPDATE HERE\n    tree[i][0]=min(tree[2*i][0],tree[2*i+1][0]) \n    if tree[i][0]==tree[2*i][0]:\n        tree[i][1]=tree[2*i][1]\n    else:\n        tree[i][1]=tree[2*i+1][1]\n\n    i>>=1\n\ndef main(arr,back):\n\n    n=len(arr)\n    tree=[[float('inf'),None] for i in range(2*n)]\n\n    for i in range(len(arr)):\n        vals=[i+back[i]-arr[i+back[i]],i]\n        \n        update(i,vals,n,tree) \n    \n    start=n-1 \n    out=[]\n    while (start!=-1):\n        if start-arr[start]<=-1:\n            out.append(0)\n            break\n        next_val=query(start-arr[start],start,n,tree) \n       \n        if (next_val+back[next_val]==start):\n            print(-1)\n            return\n        else: \n            out.append(next_val+1)\n            start=next_val+back[next_val]\n           \n    print(len(out))\n    print(*out)\n    return \nn=int(input())\narr=list(map(int,input().split()))\nback=list(map(int,input().split())) \nmain(arr,back)\n\n            ",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nGrandma Capa has decided to knit a scarf and asked Grandpa Sher to make a pattern for it, a pattern is a string consisting of lowercase English letters. Grandpa Sher wrote a string s of length n.\n\nGrandma Capa wants to knit a beautiful scarf, and in her opinion, a beautiful scarf can only be knit from a string that is a palindrome. She wants to change the pattern written by Grandpa Sher, but to avoid offending him, she will choose one lowercase English letter and erase some (at her choice, possibly none or all) occurrences of that letter in string s.\n\nShe also wants to minimize the number of erased symbols from the pattern. Please help her and find the minimum number of symbols she can erase to make string s a palindrome, or tell her that it's impossible. Notice that she can only erase symbols equal to the one letter she chose.\n\nA string is a palindrome if it is the same from the left to the right and from the right to the left. For example, the strings 'kek', 'abacaba', 'r' and 'papicipap' are palindromes, while the strings 'abb' and 'iq' are not.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2 \u22c5 t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the string.\n\nThe second line of each test case contains the string s consisting of n lowercase English letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and -1, if it is impossible.\n\nExample\n\nInput\n\n\n5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhyhky\n\n\nOutput\n\n\n2\n-1\n0\n3\n2\n\nNote\n\nIn the first test case, you can choose a letter 'a' and erase its first and last occurrences, you will get a string 'bcaacb', which is a palindrome. You can also choose a letter 'b' and erase all its occurrences, you will get a string 'acaaca', which is a palindrome as well.\n\nIn the second test case, it can be shown that it is impossible to choose a letter and erase some of its occurrences to get a palindrome.\n\nIn the third test case, you don't have to erase any symbols because the string is already a palindrome.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import sys\nfrom collections import Counter\nimport math\nimport bisect\nimport heapq\n#sys.stdin = open(\"input.txt\")\nfrom itertools import combinations\nfrom itertools import accumulate\nfrom collections import defaultdict\nfrom collections import deque\n\nnum_cases = int(sys.stdin.readline().strip())\n\nfor case in range(1, num_cases+1):\n    N = int(sys.stdin.readline().strip())\n    S = list(str(sys.stdin.readline().strip()))\n\n    type_alphabet = list(set(S))\n\n    if len(type_alphabet) == 1:\n        print(0)\n    else:\n        result = float('inf')\n\n        for alphabet in type_alphabet:\n            new_S = list(filter(lambda x: x != alphabet, S))\n            break_signal = 0\n\n            for i in range(len(new_S) // 2):\n                if new_S[i] == new_S[len(new_S) - i -1]:\n                    continue\n                else:\n                    break_signal = 1\n                    break\n\n            if break_signal == 0:\n                index_basket = []\n                semi_S = ['0'] + S + ['0']\n                count = 0\n                for index, value in enumerate(semi_S):\n                    if value != alphabet:\n                        index_basket.append(count)\n                        count = 0\n                    else:\n                        count += 1\n\n                index_basket = index_basket[1:]\n\n                real_count = 0\n                for i in range(len(index_basket) // 2):\n                    must_erase = index_basket[i] + index_basket[len(index_basket) - 1 - i]\n                    real_count += must_erase - min(index_basket[i], index_basket[len(index_basket)-1-i]) * 2\n\n\n\n                result = min(result, real_count)\n\n        if result == float('inf'):\n            print(-1)\n        else:\n            print(result)\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"# paste here...\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\ndef solve(N, S):\n    ans = INF\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        i = 0\n        j = N-1\n        n = 0\n        while i < j:\n            if S[i] != S[j]:\n                if S[i] == c:\n                    i += 1\n                    n += 1\n                elif S[j] == c:\n                    j -= 1\n                    n += 1\n                else:\n                    n = INF\n                    break\n            else:\n                i += 1\n                j -= 1\n        ans = min(ans, n)\n    \n    if ans == INF:\n        return -1\n    return ans\n\n\nT0 = int(input())\nfor _ in range(T0):\n    N = int(input())\n    S = input()\n    print(solve(N, S))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    input_s=str(input())\n    s=list(input_s)\n    while n>=2 and s[0] == s[n-1]:\n        del s[n-1]\n        del s[0]\n        n-=2\n    s_new=[]\n    n_new=n\n    for k in range(n):\n        s_new.append(s[k])\n    if n<=1:\n        erased=0\n    else:\n        del_counter1=1\n        del_counter2=1\n        erased_el1=s[0]\n        erased_el2=s[n-1]\n        del s[0]\n        n-=1\n        while n>=2 and del_counter1 != 999999:\n            if s[0] == s[n-1]:\n                del s[n-1]\n                del s[0]\n                n-=2\n            elif s[0] == erased_el1:\n                del_counter1+=1\n                del s[0]\n                n-=1\n            elif s[n-1] == erased_el1:\n                del_counter1+=1\n                del s[n-1]\n                n-=1\n            else:\n                del_counter1=999999\n        del s_new[n_new-1]\n        n_new-=1\n        while n_new>=2 and del_counter2 != 999999:\n            if s_new[0] == s_new[n_new-1]:\n                del s_new[n_new-1]\n                del s_new[0]\n                n_new-=2\n            elif s_new[0] == erased_el2:\n                del_counter2+=1\n                del s_new[0]\n                n_new-=1\n            elif s_new[n_new-1] == erased_el2:\n                del_counter2+=1\n                del s_new[n_new-1]\n                n_new-=1\n            else:\n                del_counter2=999999\n        if del_counter1 == 999999 and del_counter2 == 999999:\n            erased=-1\n        else:\n            erased=min(del_counter1, del_counter2)\n    print(erased)\n    ",
                true
            ],
            [
                "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    start, end = 0, len(s)-1\n    while start < end and s[start] == s[end]: start+=1; end-=1\n    if start >= end: print(0); continue\n    r = 1000000\n    for l in [s[start], s[end]]:\n        s1, e1, m = start, end, 0\n        while s1 < e1:\n            if s[s1] == s[e1]: s1+=1; e1-=1; continue\n            if s[s1] == l: s1+=1; m+=1; continue\n            if s[e1] == l: e1-=1; m+=1; continue\n            break\n        if s1 >= e1: r = min(r, m)\n    print(-1 if r == 1000000 else r)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    st = input()\n    strev = st[::-1]\n    ans = -1\n    if st == strev:\n        ans=0\n    else:\n#        print(strev)\n        b = set(st)\n#        print(b)\n        b1 = set()\n        for el in b:\n            st1 = st.replace(el, '')\n            strev1 = strev.replace(el, '')\n            if st1 == strev1:\n                b1.add(el)\n#            print(st1, strev1)\n        mn = 100001\n#        print(b1)\n        for el in b1:\n            k = 0\n            strev = st[::-1]\n            i = 0\n            j = 0\n            st2=''\n            while i < len(st) and j < len(strev):\n#                print(st[i],strev[j],i,j,el,k)\n                if st[i] == strev[j]:\n                        st2 = st2 + st[i]\n                        i += 1\n                        j += 1\n                else:\n                    if st[i] == el:\n                        i += 1\n                    elif strev[j] == el:\n                        j += 1\n            k = n - len(st2)                    \n            if k<mn:\n                mn = k\n        if mn < 100001:\n            ans = mn\n    print(ans)\n",
                true
            ],
            [
                "def f(n,s):\n t=[]\n for c in 'abcdefghijklmnopqrstuvwxyz':\n  r=0\n  a=0; b=len(s)-1\n  while a<b:\n   if s[a]==s[b]: a+=1; b-=1\n   elif s[a]==c and s[b]!=c: a+=1; r+=1\n   elif s[a]!=c and s[b]==c: b-=1; r+=1\n   else: r=-1; break\n  t.append(r)\n t=set(t)-set([-1])\n if t: return min(t)\n else: return -1\n\nfor t in range(int(input())):\n n=int(input())\n s=input().strip()\n print(f(n,s))\n\n",
                true
            ],
            [
                "from string import ascii_lowercase\nt = int(input())\ndef num_of_removals(s,ch):\n    i = 0\n    j = len(s)-1\n    ans = 0\n    while(i<j):\n        if s[i] == s[j]:\n            i+=1 \n            j-=1 \n        elif s[i] == ch and s[j]!= ch:\n            i+=1 \n            ans += 1 \n        elif s[j] == ch and s[i]!= ch:\n            j-=1 \n            ans +=1 \n        else:\n            return -1 \n    return ans \n            \n                \nfor i in range(t):\n    n = int(input())\n    s = input()\n    S = [ch for ch in s]\n    ans = n + 1000\n    alphabets = []\n    for c in ascii_lowercase:\n        \n        \n        if num_of_removals(S,c)==-1:\n            continue \n        else:\n            ans = min(ans,num_of_removals(S,c))\n    if ans == n + 1000:\n        print(-1)\n    else:\n        print(ans)",
                true
            ],
            [
                "\ndef check(p,s,a):\n    l,r=0,len(s)-1\n\n    ans = len(p)\n    while l<r:\n        if s[l]==a and s[r]==a:\n            ans+=2\n            l+=1\n            r-=1\n        elif s[l]==a:\n            l+=1\n        elif s[r]==a:\n            r-=1\n        else:\n            l+=1\n            r-=1\n    if l==r and s[l]==a:\n        ans+=1\n\n    return ans\n\nINF = float('inf')\n\nfor _ in range(int(input())):\n    N = int(input())\n    S = input()\n\n    if S==S[::-1]:\n        print(0)\n        continue\n\n    ans = INF\n    for a in [chr(c) for c in range(ord('a'),ord('z')+1)]:\n        tmp = [c for c in S if c!=a]\n        if tmp==tmp[::-1]:\n            maxlen = check(tmp,S,a)\n            #print(maxlen,a,tmp)\n            ans = min(ans, N-maxlen)\n    print(ans if ans!=INF else -1)\n\n\n",
                true
            ],
            [
                "t=int(input())\nimport math\nfor _ in range(t):\n  n=int(input())\n  s=input()\n  # print(s,s[0])\n  def valid(i,j,sy):\n    count=1\n    while i<j:\n      if s[i]==s[j]:\n        i+=1\n        j-=1\n      else:\n        if s[i]!=sy and s[j]!=sy:\n          return math.inf\n        if s[i]==sy:\n          i+=1\n        else:\n          j-=1\n        count+=1\n    return count\n  i=0\n  j=len(s)-1\n\n  while i<j and s[i]==s[j]:\n    i+=1\n    j-=1\n  \n  if i==j or i>j:\n    val=0\n\n  else:\n    val=min(valid(i+1,j,s[i]),valid(i,j-1,s[j]))\n\n  if val==math.inf:\n    print(-1)\n  else:\n    print(val)",
                true
            ],
            [
                "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log2, ceil\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom bisect import insort\nfrom collections import Counter\nfrom collections import deque\nfrom heapq import heappush,heappop,heapify\nfrom itertools import permutations,combinations\nfrom itertools import accumulate as ac\nfrom random import randint as ri\nmod = int(1e9)+7\nmod = 998244353\n \nip = lambda : int(stdin.readline())\ninp = lambda: map(int,stdin.readline().split())\nips = lambda: stdin.readline().rstrip()\nout = lambda x : stdout.write(str(x)+\"\\n\")\n\n\nt = ip()\nfor _ in range(t):\n    n = ip()\n    s = ips()\n    arr = list(s)\n    if s == s[::-1]:\n        ans = 0\n    else:\n        opt = []\n        ans = []\n        for i in range(n//2):\n            if s[i] == s[n-i-1]:\n                pass\n            else:\n                opt.append(s[i])\n                opt.append(s[n-i-1])\n                break\n\n        for x in opt:\n            pt = 0\n            pt2 = n-1\n            f = True\n            cur = 0\n            while pt<pt2:\n                if arr[pt] == arr[pt2]:\n                    pt += 1\n                    pt2 -= 1\n                else:\n                    if arr[pt] == x:\n                        pt += 1\n                        cur += 1\n                    elif arr[pt2] == x:\n                        pt2 -= 1\n                        cur += 1\n                    else:\n                        f = False\n                        break\n            if f:\n                ans.append(cur)\n        if len(ans) == 0:\n            ans = -1\n        else:\n            ans = min(ans)\n\n    print(ans)\n                \n            \n                \n                \n        \n    \n                \n            \n            \n            \n",
                true
            ],
            [
                "import math\n\na=int(input())\nfor i in range(a):\n\n    s=int(input())\n    z=input()\n\n    mini=math.inf\n\n\n    for i in range(26):\n\n        l=0\n        r=len(z)-1\n        g1=0\n        flag=0\n        while(l<r):\n\n            if(z[l]==z[r]):\n                l+=1\n\n                r-=1\n                continue\n            if(ord(z[l])==97+i):\n                g1+=1\n                l+=1\n            elif(ord(z[r])==97+i):\n                g1+=1\n                r-=1\n            else:\n                flag=1\n                break\n        if(flag==0):\n            mini=min(mini,g1)\n    if(mini==math.inf):\n        print(-1)\n    else:\n        print(mini)\n",
                true
            ],
            [
                "# C. Grandma Capa Knits a Scarf\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    \n    point1 = 0\n    point2 = n-1\n    \n    while point2 > point1 and s[point1] == s[point2]:\n        point1 += 1\n        point2 -= 1\n        \n    if point2 <= point1: print(0)\n    else:\n        char1 = s[point1]\n        char2 = s[point2]\n    \n        actp1 = point1\n        actp2 = point2\n\n        count1 = 0\n\n        valid1 = True\n\n        while actp2 > actp1:\n            if s[actp1] == s[actp2]:\n                actp1 += 1\n                actp2 -= 1\n            else:\n                if s[actp1] == char1:\n                    actp1 += 1\n                    count1 += 1\n                elif s[actp2] == char1:\n                    actp2 -=1\n                    count1 +=1\n                else:\n                    valid1 = False\n                    actp1 = 1\n                    actp2 = 0\n\n        if not valid1: count1 = n+1\n\n        actp1 = point1\n        actp2 = point2\n\n        count2 = 0\n\n        valid2 = True\n\n        while actp2 > actp1:\n            if s[actp1] == s[actp2]:\n                actp1 += 1\n                actp2 -= 1\n            else:\n                if s[actp1] == char2:\n                    actp1 += 1\n                    count2 += 1\n                elif s[actp2] == char2:\n                    actp2 -=1\n                    count2 +=1\n                else:\n                    valid2 = False\n                    actp1 = 1\n                    actp2 = 0\n\n        if not valid2: count2 = n+1\n\n        ans = min([count1, count2])\n\n        if ans > n: print(-1)\n        else: print(ans)",
                true
            ],
            [
                "import sys\nfrom collections import deque\ndef II():\n    return int(sys.stdin.readline())\n \ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n    return map(int, sys.stdin.readline().split())\n \ndef SI():\n    return sys.stdin.readline().strip()\n \ndef C(n, k, mod):\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\n \ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\n\nfor _ in range(II()):\n    n = II()\n    s = list(SI())\n    ans = -1\n    for i in range(26):\n        temp = chr(i+97)\n        count = 0\n        tempS = s[:]\n        for j in range(len(s)):\n            if s[j] == temp:\n                count+=1\n                tempS[j] = ''\n        checkTemp = list(\"\".join(tempS))\n        if checkTemp == checkTemp[::-1]:\n            if len(checkTemp)%2 == 1:\n                l = r = len(checkTemp)//2\n            else:\n                l = len(checkTemp)//2-1\n                r = len(checkTemp)//2\n            newL = -1\n            newR = 0\n            c = -1\n            for j in range(len(s)):\n                if tempS[j] !='':\n                    c+=1\n                if c == l and newL == -1:\n                    newL = j\n                if c == r:\n                    newR = j\n                    break\n            l = newL\n            r = newR\n            if l != r:\n                count-=r-l-1\n            l-=1\n            r+=1\n            while l >= 0 and r<len(tempS):\n                if tempS[l] == tempS[r] == '':\n                    count-=2\n                    l-=1\n                    r+=1\n                elif tempS[l] == '':\n                    l-=1\n                elif tempS[r] == '':\n                    r+=1\n                else:\n                    l-=1\n                    r+=1\n            # for i in d:\n            #     if i > r:\n            #         if d.get(l-(i-r)):\n            #             count-=2\n            #             d[i] = None\n            #     elif i < l:\n            #         if d.get(r+l-i):\n            #             count-=2\n            #             d[i] = None\n            #     else:\n            #         if i-l == r-i:\n            #             count-=1\n            #             d[i] = None\n            #         elif d.get(r-(i-l)):\n            #             count-=2\n            #             d[i] = None\n            if ans == -1:\n                ans = count\n            else:\n                ans = min(ans,count)\n    print(ans)",
                true
            ],
            [
                "def f(s, l):\n    num = 0\n    a, b = 0, len(s)-1\n    while a<b:\n        if s[a] == s[b]:\n            a += 1\n            b -= 1\n        else:\n            if s[a] == l:\n                a += 1\n                num += 1\n            elif s[b] == l:\n                b -= 1\n                num += 1\n            else:\n                return len(s)\n    return num\n\ncase = int(input())\nfor i in range(case):\n    n = int(input())\n    s = input()\n    m = n\n    for j in range(97, 123):\n        m = min(m, f(s, chr(j)))\n    if m == n:\n        print(-1)\n    else:\n        print(m)",
                true
            ],
            [
                "ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    cur_ans = n + 1\n    for o in range(26):\n        if cur_ans == 0:\n            break\n        let = chr(ord('a') + o)\n        t = []\n        ind = []\n        d = []\n        for i in range(n):\n            if s[i] != let:\n                t.append(s[i])\n                d.append(i)\n            else:\n                ind.append(i)\n        for i in range(len(t) // 2):\n            if t[i] != t[-i - 1]:\n                break\n        else:\n            #print(let, cur_ans, s)\n            cur = len(ind)\n            j = len(ind) - 1\n            i = 0\n            if len(d) == 0 or len(ind) == 0 or ind[i] > d[-1] or ind[j] < d[0]:\n                cur_ans = min(cur_ans, cur)\n                continue\n            L = R = 0\n            for k in range(len(d)):\n                if d[k] > ind[i]:\n                    L = k\n                    break\n            for k in range(len(d)):\n                if d[-k - 1] < ind[j]:\n                    R = k\n                    break\n            while True:\n                if i > j:\n                    break\n                while L > R:\n                    j -= 1\n                    if j == -1:\n                        break\n                    for k in range(R, len(d)):\n                        if d[-k - 1] < ind[j]:\n                            R = k\n                            break\n                    else:\n                        R = len(d)\n                if j == -1:\n                    break\n                if L == R:\n                    if i == j:\n                        cur -= 1\n                    elif i < j:\n                        cur -= 2\n                    j -= 1\n                    if j == -1:\n                        break\n                    for k in range(R, len(d)):\n                        if d[-k - 1] < ind[j]:\n                            R = k\n                            break\n                    else:\n                        R = len(d)\n                i += 1\n                if i == len(ind):\n                    break\n                for k in range(L, len(d)):\n                    if d[k] > ind[i]:\n                        L = k\n                        break\n                else:\n                    L = len(d)\n            cur_ans = min(cur_ans, cur)\n    if cur_ans == n + 1:\n        ans.append(-1)\n    else:\n        ans.append(cur_ans)\nprint('\\n'.join(map(str, ans)))\n                \n                \n",
                true
            ],
            [
                "def solve(a, c, n):\n    res = 0\n    l = 0\n    r = n - 1\n    while l < r:\n        if a[l] != a[r]:\n            if a[l] == c:\n                res += 1\n                l += 1\n            elif a[r] == c:\n                res += 1\n                r -= 1\n            else:\n                return 10**10\n        else:\n            l += 1\n            r -= 1\n    return res\n\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    ans = 10**10\n    for i in range(26):\n        ans = min(ans, solve(a, chr(97 + i), n))\n    if ans == 10**10:\n        print(-1)\n    else:\n        print(ans)\n",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve(n, s):\n  start = 0\n  end = n - 1\n\n  while start < end:\n    if s[start] == s[end]:\n      start += 1\n      end -= 1\n    else:\n      break\n  \n  if start > end:\n    print(0)\n    return\n\n  s = s[start:end+1]\n  n = len(s)\n\n  if n == 1:\n    print(0)\n    return\n  \n\n\n  ans = float(\"inf\")\n\n  current = 1\n  # Case 1 (first letter)\n  temp = s[0]\n  start = 1\n  end = n-1\n  flag = 0\n\n  while start <= end and flag == 0:\n    if s[start] == s[end]:\n      start += 1\n      end -= 1\n    else:\n      if s[start] == temp:\n        current += 1\n        start += 1\n      elif s[end] == temp:\n        current += 1\n        end -= 1\n      else:\n        flag = 1\n        break\n  \n  if flag == 0:\n    ans = min(ans, current)\n\n\n\n  # Case 2 (last letter)\n  current = 1\n  temp = s[-1]\n  start = 0\n  end = n-2\n  flag = 0\n\n  while start <= end and flag == 0:\n    if s[start] == s[end]:\n      start += 1\n      end -= 1\n    else:\n      if s[start] == temp:\n        current += 1\n        start += 1\n      elif s[end] == temp:\n        current += 1\n        end -= 1\n      else:\n        flag = 1\n        break\n  \n  if flag == 0:\n    ans = min(ans, current)\n\n  if ans == float(\"inf\"):\n    print(-1)\n  else:\n    print(ans)\n\n\n\n\n\n\n\n\n\n\n\nT = get_int()\nwhile T:\n  n = get_int()\n  s = get_string()\n  solve(n, s)\n  T -= 1\n",
                true
            ],
            [
                "# A, Q = [int(i) for i in input().split()]\n# arr = [int(i) for i in input().split()]\n# di = [0] * A\n# fill = 0\n# x = 0\n\n\n# while x < A:\n#     fill += 1\n#     cur = a = arr[x]\n#     while  x < A and a <= cur:\n#         a = cur\n#         di[x] = fill\n#         x+=1\n#         if x >= A: break\n#         cur = arr[x]\n\n#     if x >= A:break\n#     cur = a = arr[x]\n#     # fill+=1\n#     while  x < A and  a >= cur:\n#         a = cur\n#         di[x] = fill\n#         x+=1\n#         if x >= A: break\n#         cur = arr[x]\n\n\n# print(di)\n\n# for _ in range(Q):\n#     l , r = [int(i) - 1 for i in input().split()]\n#     if di[l] == di[r]:\n#         print(\"Yes\")\n#     else:\n#         print(\"No\")\n\n\n\n\n# class Solution:\n#     def maxRotateFunction(self, A: List[int]) -> int:\n#         s, n = sum(A), len(A)\n#         cur_sum = sum([i*j for i, j in enumerate(A)])\n#         ans = cur_sum\n#         for i in range(n): ans = max(ans, cur_sum := cur_sum + s-A[n-1-i]*n)\n#         return ans\n\n\n\n\n\n# n = int(input())\n\n# arr = [int(i) for i in input().split()]\n\n# s = sum(arr)\n\n# d = {}\n\n# minVal = 2 << 64\n# maxVal  = 0\n# for i,j in enumerate(arr):\n#     d[s - j] = i\n#     minVal = min(minVal,s - j)\n#     maxVal = min(maxVal,s - j)\n\n\n# print(d)\n# for j in d:\n#     for k in range(maxVal-minVal):\n#         if  (j - k) in d:\n#             print(\"found\")\n\n \n\n\n\ndef solve(s):\n    ls = len(s)\n    ans = 2 << 64\n    for ch in \"abcdefghijklmnopqrstuvwxyz\":\n        i = 0\n        j = ls - 1\n        curAns = 0\n        while j - i  + 1 > 3 and i < ls and j >= 0:\n            #print(s[i:j+1],ch)\n            if s[i] == s[j]:\n                i+=1;j-=1\n            elif s[i] == ch:\n                i+=1;curAns+=1\n            elif s[j] == ch:\n                j-=1;curAns+=1\n            else:\n                curAns+=2;i+=1;j-=1 \n\n\n        #print(j - i,i,j,\"hmm\",s[i:j+1])\n        if i < ls and j >= 0:\n            if j - i  + 1== 1:\n                curAns+=1\n            elif j - i + 1 == 2:\n                curAns += 0 if s[i] == s[j] else 1\n            elif j - i + 1== 3:\n                curAns += 0 if s[i] == s[j] else 1\n                curAns += 0 if (s[i] == s[j - 1] or s[i + 1] == s[j]) else 1\n\n        #print(ch,curAns)\n        ans = min(curAns,ans)\n\n\n    return ans\n\n\ndef solve2(s):\n    ls = len(s)\n    ans = float(\"inf\")\n    for ch in \"abcdefghijklmnopqrstuvwxyz\":\n        i = 0\n        j = ls - 1\n        curAns = 0\n        while i < j:\n            if s[i] == s[j]:\n                i+=1;j-=1\n            elif s[i] == ch:\n                i+=1;curAns+=1\n            elif s[j] == ch:\n                j-=1;curAns+=1\n            else:\n                curAns = float(\"inf\")\n                break\n        ans = min(ans,curAns)\n    if ans == float(\"inf\"):\n        return -1\n    else:\n        return ans\n\nfor _ in range(int(input())):\n    _ = input()\n    s = input().strip()\n    print(solve2(s))\n\n\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    s = s[:-1]\n    if s == s[::-1]:\n        print(0)\n        continue\n    res = float('inf')\n    for ch in set(s):\n        ss = s.replace(ch, '')\n        if ss != ss[::-1]:\n            continue\n        i, j, erase = 0, len(s)-1, 0\n        ii, jj = 0, len(ss)-1\n        while i < j and ii <= jj:\n            lch = 0\n            while s[i] != ss[ii]:\n                if s[i] == ch:\n                    lch += 1\n                i += 1\n            rch = 0\n            while s[j] != ss[jj]:\n                if s[j] == ch:\n                    rch += 1\n                j -= 1\n            erase += lch + rch - min(lch,rch) * 2\n            i, ii = i+1, ii+1\n            j, jj = j-1, jj-1\n        res = min(res, erase)\n    if res == float('inf'):\n        print(-1)\n    else:\n        print(res)",
                true
            ],
            [
                "def pal(s):\n    i=0\n    j=len(s)-1\n    while(i<j):\n\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n\ndef solve(s,i,j,n):\n    tem=None #the element selected to be deleted\n    count=0\n    while (i < j):\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            if i < n - 1 and s[i + 1] == s[j]:\n                # print('check1')\n                # print(s[i],s[j],s[i+1],tem)\n                if not tem or (tem==s[i]):\n                    count+=1\n\n                    if not tem:\n                        tem = s[i]\n                    i += 2\n                    j -= 1\n                    continue\n            if j-1>=0 and s[j-1]==s[i]:\n                # print('fault')\n                # print(s[i], s[j], s[j - 1], tem)\n                if not tem or (tem and tem==s[j]):\n                    count+=1\n\n                    if not tem:\n                        tem = s[j]\n                    j -= 2\n                    i += 1\n                    continue\n            return -1\n\n    return count\n\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    if pal(s):\n        print(0)\n        continue\n    ans=float('inf')\n    for i in range(ord('a'),ord('z')+1):\n        ch = chr(i)\n        if ch in s:\n            i=0\n            j=len(s)-1\n            count=0\n            # print(ch)\n            while(i<j):\n                # print(i,j)\n                if s[i]==s[j]:\n                    i+=1\n                    j-=1\n                else:\n                    if s[i]==ch:\n                        count+=1\n                        i+=1\n                    elif s[j]==ch:\n                        count+=1\n                        j-=1\n                    else:\n                        count=float('inf')\n                        break\n            ans = min(ans,count)\n    if ans!=float('inf'):\n        print(ans)\n    else:\n        print(-1)",
                true
            ],
            [
                "def palindrome(x, word) -> int:\n    beg, fin = 0, len(word) - 1\n    changes = 0\n    while beg <= fin:\n        if word[beg] == word[fin]:\n            beg, fin = beg + 1, fin - 1\n            continue\n        if word[beg] == x:\n            beg += 1\n            changes += 1\n            continue\n        if word[fin] == x:\n            fin -= 1\n            changes += 1\n            continue\n        return -1\n    return changes\n\ndef solve():\n    n = int(input())\n    arr = input()\n    letters = map(chr, range(97, 97 + 26))\n    results = [palindrome(letter, arr) for letter in letters]\n    if all(map(lambda x: x == -1, results)):\n        return -1\n    return min(filter(lambda x: x > -1, results))\n\nif __name__=='__main__':\n    for _ in range(int(input())):\n        print(solve())\n",
                true
            ],
            [
                "import sys\n\n\ninput = sys.stdin.readline\n\n\ndef pallindrome_check(ex):\n    i = 0\n    j = n-1\n    cnt = 0\n    \n    while i < j:\n        while string[i] != string[j]:\n            if string[i] == ex:\n                i += 1\n                cnt += 1\n            elif string[j] == ex:\n                j -= 1\n                cnt += 1\n            else:\n                return -1\n        i += 1\n        j -= 1\n    \n    return cnt\n\n\ndef knit():\n    global string, n\n    \n    n = int(input())\n    string = input()\n    \n    if pallindrome_check(\"\") != -1:\n        return 0\n    \n    min_change = n\n    \n    for i in range(26):\n        value = pallindrome_check(chr(i+97))\n        if value == -1:\n            continue\n        min_change = min(min_change, value)\n    \n    if min_change == n:\n        return -1\n    return min_change\n\n\nif __name__ == \"__main__\":\n    string = \"\"\n    n = 0\n    \n    for _ in range(int(input())):\n        print(knit())\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n \n \ndef cntSame(string, x):\n    s, e = 0, len(string)-1\n    cnt = 0\n    while s <= e:\n        if string[s] == string[e]:\n            s += 1\n            e -= 1\n        else:\n            if string[s] == x:\n                cnt += 1\n                s += 1\n            elif string[e] == x:\n                cnt += 1\n                e -= 1\n            else:\n                return -1\n    return cnt\n\n\nt = int(input())\nfor __ in range(t):\n    n = int(input())\n    string = input().rstrip()\n    flag = 1\n    cnt = int(1e9)\n    for x in 'abcdefghijklmnopqrstuvwxyz':\n        s = string.replace(x, '')\n\n        nnum = cntSame(string, x)\n        if nnum != -1:\n            flag = 0\n            cnt = min(cnt, nnum)\n    print(-1 if flag else cnt)",
                true
            ],
            [
                "def test(i,j,l):\n    count = 0\n    while i < j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            if s[i] == l:\n                count += 1\n                i += 1\n            elif s[j] == l:\n                count += 1\n                j -= 1\n            else:\n                return n+2\n    return count\n\nT = int(input())\nfor testcase in range(1,T+1):\n    n = int(input())\n    s = list(input())\n    #print(s)\n    i = 0\n    j = n-1\n    problem = False\n    while i < j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            problem = True\n            c1 = test(i,j,s[i])\n            c2 = test(i,j,s[j])\n            best = min(c1,c2)\n            i = j+1\n    if not problem:\n        print(0)\n    else:\n        if best < n+2:\n            print(best)\n        else:\n            print(-1)\n\n\n\n\n\n\n",
                true
            ],
            [
                "def pal(s,x):\n    i=0\n    j=len(s)-1\n    k=0\n    while i<j:\n        if s[i]==s[j]:\n            i+=1\n            j-=1\n        elif s[i]!=x and s[j]!=x:\n            return False, 0\n        elif s[i]==x:\n            k+=1\n            i+=1\n        elif s[j]==x:\n            k+=1\n            j-=1\n    return True, k\n\nfor _ in range(int(input())):\n    n=int(input())\n    s=input()\n    if s==s[::-1]:\n        print(0)\n    else:\n        s=list(s)\n        i=0\n        j=n-1\n        while s[i]==s[j]:\n            i+=1\n            j-=1\n        r,k1=pal(s,s[i])\n        rr,k2=pal(s,s[j])\n        if  not r and  not rr:\n            print(-1)\n        else:\n            if r:\n                ans=k1\n                if rr:\n                    ans=min(k1,k2)\n            else:\n                ans=k2\n            print(ans)",
                true
            ],
            [
                "from sys import stdin\nfrom collections import defaultdict\ninput=stdin.readline\nrn=lambda:int(input())\nrns=lambda:map(int,input().split())\nrl=lambda:list(map(int,input().split()))\nrs=lambda:input().strip()\nYN=lambda x:print('YES') if x else print('NO')\nmod=10**9+7\n\nfor _ in range(rn()):\n    n=rn()\n    s=rs()\n    ans=float('inf')\n    for char in set(s):\n        l,r=0,n-1\n        pans=0\n        while l<r:\n            # print(char, pans)\n            if s[l]==s[r]:\n                l+=1\n                r-=1\n            elif s[l]==char:\n                l+=1\n                pans+=1\n            elif s[r]==char:\n                r-=1\n                pans+=1\n            else:\n                pans=float('inf')\n                break\n        ans=min(ans,pans)\n    if ans==float('inf'):\n        print(-1)\n    else:\n        print(ans)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    s = set(a)\n    s.add('#')\n\n    m = -1\n    for ch in s:\n        b = a.replace(ch, '')\n        if b != b[::-1]:\n            continue\n\n        l = 0\n        r = n - 1\n        cnt = 0\n        while l < r:\n            if a[l] != a[r] and a[l] == ch:\n                l += 1\n                cnt += 1\n            elif a[l] != a[r] and a[r] == ch:\n                r -= 1\n                cnt += 1\n            elif a[l] != a[r]:\n                cnt = -1\n                break\n            else:\n                l += 1\n                r -= 1\n        if m == -1:\n            m = cnt\n        else:\n            m = min(m, cnt)\n\n    print(m)\n",
                true
            ],
            [
                "T = int(input())\nfor _ in range(T):\n  N = int(input())\n  S1 = list(input())\n  S2 = S1[::-1]\n  \n  flag = True\n  bug = []\n  for i in range(N):\n    if S1[i] == S2[i]: continue\n    else:\n      bug.append(S1[i])\n      bug.append(S2[i])\n      flag = False\n      break\n      \n  if flag: \n    print(0)\n    continue\n    \n  cand = []\n  for c in bug:\n    T = []\n    for s in S1:\n      if s == c: continue\n      T.append(s)\n    if T == T[::-1]:\n      cand.append(c)\n  \n  if not cand:\n    print(-1)\n    continue\n    \n  ans = 1 << 60\n  for c in cand:\n    C1 = []\n    C2 = []\n    tmp = 0\n    for s in S1:\n      if s == c:\n        tmp += 1\n      else:\n        C1.append(tmp)\n        tmp = 0\n    C1.append(tmp)\n    C2 = C1[::-1]\n    #print(c, C1)\n    #print(c, C2)\n    tmp_ans = 0\n    for i in range(len(C1)):\n      tmp_ans += abs(C1[i] - C2[i])\n    \n    ans = min(ans, tmp_ans)\n    \n  print(ans // 2)\n        \n    \n      \n  ",
                true
            ],
            [
                "t = int(input())\n\nwhile (t):\n\n    n = int(input())\n    s = input()\n    \n    d = {x: 1 for x in s}.keys()\n\n    ans = n+1    \n\n    for c in d:\n\n        i,j,cnt,flag = 0,n-1,0,True\n\n        while (i < j):\n            if (s[i] != s[j]):\n                if (s[i] == c):\n                    i += 1\n                elif (s[j] == c):\n                    j -= 1\n                else:    \n                    flag = False\n                    break\n                cnt += 1\n            else:\n                i += 1\n                j -= 1\n\n        if (flag):\n            ans = min(ans,cnt)\n\n    if (ans == n+1):\n        print(-1)\n    else:\n        print(ans)\n    \n    t -= 1\n\n        \n    \n    \n        \n        \n    \n    ",
                true
            ],
            [
                "def judge(s,c):\n    l = 0;r = len(s) - 1;cnt = 0\n    while l < r:\n        if s[l] == s[r]:r -= 1;l += 1\n        else:\n            if s[l] == c:cnt += 1;l += 1\n            elif s[r] == c:cnt += 1;r -= 1\n            else:return 1e5\n    return cnt\nfor _ in range(int(input())):\n    n = int(input());tmp = input();cnt = 1e5\n    for i in range(26):cnt = min(cnt, judge(tmp, chr(ord('a') + i)))\n    print(-1) if cnt == 1e5 else print(cnt)",
                true
            ],
            [
                "import sys\n# sys.stdin = open(\"input.txt\", \"r\")\ninput = sys.stdin.readline\n\nT = int(input())\n\n\ndef calc(lt, rt, ap):\n    global cnt\n    while lt < rt:\n        if s[lt] == s[rt]:\n            lt += 1\n            rt -= 1\n            continue\n        if s[lt] == ap:\n            lt += 1\n            cnt += 1\n        elif s[rt] == ap:\n            rt -= 1\n            cnt += 1\n        else:\n            return False\n    return True\n\n\nwhile T:\n    T -= 1\n    n = int(input())\n    s = list(input())\n    ans = 2147000000\n    if calc(0, n-1, s):\n        print(0)\n        continue\n    for i in range(26):\n        ap = chr(97 + i)\n        cnt = 0\n        if calc(0, n-1, ap):\n            ans = min(ans, cnt)\n    print(ans if ans != 2147000000 else -1)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    lletres = set(s)\n    min_cost = float('inf')\n    for c in lletres:\n        i, j = 0, n-1\n        pal, cost = True, 0\n        while pal and i < j:\n            if s[i]!=c and s[j]!=c:\n                pal = s[i]==s[j]\n                i += 1\n                j -= 1\n            if s[i]==c and s[j]!=c:\n                i += 1\n                cost += 1\n            if s[i]!=c and s[j]==c:\n                j -= 1\n                cost += 1\n            if s[i]==c and s[j]==c:\n                i += 1\n                j -= 1\n        if pal:\n            min_cost = min(min_cost, cost)\n\n    print(min_cost if min_cost < float('inf') else -1)",
                true
            ],
            [
                "import math;from heapq import heappush,heappop,heapify;import random;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());H=1000000000+7\nfor _ in range(I()):\n    n=I()\n    s=S();m=math.inf\n    for i in range(97,123):\n        ch=chr(i);c=f=0\n        l=0;r=n-1\n        if s.find(ch)==-1: continue\n        while l<=r:\n            if s[l]==s[r]:\n                l+=1;r-=1\n            else:\n                if s[l]==ch:\n                    l+=1;c+=1\n                elif s[r]==ch:\n                    r-=1;c+=1\n                else:\n                    f=1\n                    break\n        if f==0: m=min(c,m)\n    if m==math.inf:\n        print(-1)\n    else:\n        print(m)",
                true
            ],
            [
                "from collections import Counter\nimport math\nimport bisect\nfrom sys import stdin,stdout\ninput=stdin.readline\n\nmod=10**9+7\ndef inp(): return map(int,input().split())\n\nres=[chr(i) for i in range(97,123)]\n\nfor _ in range(int(input())):\n    n=int(input())\n    s=input()\n    ans=n\n    for rs in res:\n        i=0;j=n-1\n        cur=0;c=1\n        while i<=j:\n            if s[i]==s[j]:\n                i+=1;j-=1\n            else:\n                if s[i]==rs:\n                    i+=1\n                    cur+=1\n                elif s[j]==rs:\n                    j-=1\n                    cur+=1\n                else:\n                    c=0\n                    break\n        if c:\n            ans=min(ans,cur)\n    print(ans if ans<n else -1)",
                true
            ],
            [
                "def test(n, a, i):\n    delete = 0\n    char = a[i]\n    b = i\n    e = n - 1 - i\n    if b > e:\n        b, e = e, b\n    while b < e:\n        if a[b] == a[e]:\n            b += 1\n            e -= 1\n            continue\n        if a[b] == char:\n            b += 1\n            delete += 1\n            continue\n        if a[e] == char:\n            e -= 1\n            delete += 1\n            continue\n        else:\n            delete = -1\n            break\n    return delete\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = str(input())\n    b = 0\n    e = n - 1\n    while b < e and a[b] == a[e]:\n        b += 1\n        e -= 1\n    if b >= e:\n        print(0)\n        continue\n    chb = test(n, a, b)\n    che = test(n, a, e)\n    if chb + che == -2:\n        print(-1)\n    elif chb == -1:\n        print(che)\n    elif che == -1:\n        print(chb)\n    else:\n        print(min(chb, che))\n",
                true
            ],
            [
                "def palincount(S, c):\n    n = len(S)\n    answer = 0\n    i1 = 0\n    i2 = n-1\n    while i1 < i2:\n        if S[i1] != S[i2]:\n            if S[i1]==c:\n                answer+=1\n                i1+=1\n            elif S[i2]==c:\n                answer+=1\n                i2-=1\n            else:\n                return [False, None]\n        else:\n            i1+=1\n            i2-=1\n    return [True, answer]\n        \ndef process(S):\n    n = len(S)\n    i = 0\n    while i < n-1-i and S[i] == S[n-1-i]:\n        i+=1\n    if i >= n-1-i:\n        return 0\n    c1 = S[i]\n    c2 = S[n-1-i]\n    t1, a1 = palincount(S, c1)\n    t2, a2 = palincount(S, c2)\n    if (not t1) and (not t2):\n        return -1\n    elif not t1:\n        return a2\n    elif not t2:\n        return a1\n    else:\n        return min(a1, a2)\n    \nt = int(input())\nfor i in range(t):\n    n = int(input())\n    S = input()\n    print(process(S))\n    ",
                true
            ],
            [
                "\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    # s = list(map(int, input().split()))\n\n    a = [0]*26\n\n    ans = [0]*26\n    for i in range(26):\n        dig = chr(i + 97)\n        # print(dig)\n        r = n - 1\n        l = 0\n        while r >= l:\n            # print(l, r)\n            if s[l] == s[r]:\n                l += 1\n                r -= 1\n            elif s[l] == dig:\n                l += 1\n                a[i] += 1\n            elif s[r] == dig:\n                r -= 1\n                a[i] += 1\n            else:\n                a[i] = 10**6\n                break\n    ans = min(a)\n    if ans == 10**6:\n        print(-1)\n    else:\n        print(min(a))\n\n\n",
                true
            ],
            [
                "def isPalindrome(string, low, high):\n    while low < high:\n        if string[low] != string[high]:\n            return False\n        low += 1\n        high -= 1\n    return True\n\ndef solve(s, l):\n    low = 0\n    high = len(s) - 1\n    res = 0\n    while low < high:\n        if l == s[high] and l == s[low]:\n            low += 1\n            high -= 1\n        elif s[high] == l:\n            high -= 1\n            res += 1\n        elif s[low] == l:\n            low += 1\n            res += 1\n        elif s[low] != s[high]:\n            return -1\n        else:\n            low += 1\n            high -= 1\n        if isPalindrome(s, low, high):\n            return res\n    return -1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    if s == s[::-1]:\n        print(0)\n        continue\n    se = set(s)\n    ans = 10**10\n    for i in se:\n        k = solve(s, i)\n        if k != -1:\n            ans = min(ans, k)\n    print(ans if ans != 10**10 else -1)",
                true
            ],
            [
                "t = int(input())\nwhile t != 0:\n  n = int(input())\n  s = str(input())\n  ans = n + 1\n  for i in range(0, 26):\n    l = 0\n    r = n - 1\n    cnt = 0\n    while(l <= r):\n      if s[l] == s[r]:\n        l += 1\n        r -= 1\n      elif s[l] == chr(ord('a') + i):   # xyzxyz    \n        cnt += 1\n        l += 1\n      elif s[r] == chr(ord('a') + i):\n        cnt += 1\n        r -= 1\n      else:\n        cnt = n + 1\n        break\n    ans = min(ans, cnt)\n\n  if ans == n + 1:\n    ans = -1\n  print(ans)\n  t-=1",
                true
            ],
            [
                "for i in range(int(input())):\n    length_s = int(input())\n    s = input()\n    pal_l_list=[]\n    for ch in set(s):\n        pre_s=s.replace(ch,\"\")\n        length=len(pre_s)\n        if pre_s[:length//2]==pre_s[length:(length+1)//2-1:-1]:\n            counter=0\n            pol_s=[*s]\n            # lc=rc=0\n            i=0\n            while i<len(pol_s)//2:\n                if not pol_s[i]==pol_s[~i]==ch:\n                    while pol_s[i]==ch:\n                        pol_s.pop(i)\n                    while pol_s[~i]==ch:\n                        pol_s.pop(~i)\n                i+=1\n                \n            pal_l_list.append(len(pol_s))\n    if len(pal_l_list)>0:\n        print(length_s-max(pal_l_list))\n    else:\n        print(-1)",
                true
            ],
            [
                "\nimport sys, os.path\nif(os.path.exists('inp.txt')):\n    sys.stdin = open(\"inp.txt\",\"r\")\n    sys.stdout = open(\"out.txt\",\"w\")\n\ndef solve(string,n):\n    s=set()\n    for i in string:\n        if i not in s:\n            s.add(i)\n\n\n    \n    ans=99999999\n    for character in s:\n        i=0\n        j=n-1\n        change=0\n        while i<j :\n            if string[i] != string[j]:\n                if string[i]==character:\n                    i+=1\n                    change+=1\n                elif string[j]==character:\n                    j-=1\n                    change+=1\n                else:\n                    change=float('inf')\n                    break\n            else:\n                i+=1\n                j-=1\n\n\n        ans=min(ans,change)\n\n    if ans==99999999:\n        return -1\n\n    return ans\n\n\n\nif __name__=='__main__':\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        string=input()\n        #print('working')\n        print(solve(string,n))",
                true
            ],
            [
                "from string import ascii_lowercase as al\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    answers = []\n    for i in al:\n        if i in s:\n            l, r = 0, n-1\n            res = 0\n            ans = 1e9\n            while l < r and r > -1 and l < n:\n                if s[r] == s[l]:\n                    r -= 1\n                    l += 1\n                else:\n                    if s[l] == i:\n                        l += 1\n                        res += 1\n                    elif s[r] == i:\n                        r -= 1\n                        res += 1\n                    else:\n                        ans = -1\n                        break\n            ans = min(ans, res)\n            if ans != -1:\n                answers.append(ans)\n    if answers:\n        print(min(answers))\n    else:\n        print(-1)\n                \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    s=input()\n    cc=97\n    ans=0\n    while(cc<123):\n        c = chr(cc)\n        i=0\n        j=n-1\n        tmp=0\n        while(i<j):\n            if s[i]==s[j]:\n                tmp+=2\n                i+=1\n                j-=1\n                continue\n            if s[i]==c:\n                i+=1\n                continue\n            if s[j]==c:\n                j-=1\n                continue\n            tmp=0\n            break\n        if i==j:\n            tmp+=1\n        ans = max(ans, tmp)\n        # print(tmp, c)\n        cc+=1\n    if ans==0:\n        print(-1)\n    else:\n        print(n-ans)\n\n",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    len = int(input())\n    line = input()\n    c = '0'\n    i = 0\n    j = len - 1\n    a = 0\n    f = 0\n    while i < j:\n        if line[i] != line[j]:\n            if a>0:\n                if line[i] == c:\n                    i += 1\n                elif line[j] == c:\n                    j -= 1\n                else:\n                    f = 1\n                    break\n            else:\n                c = line[i]\n                i += 1\n            a += 1\n        else:\n            i+=1\n            j-=1\n    c = '0'\n    i = 0\n    j = len - 1\n    b = a\n    a = 0\n    while i<j:\n        if line[i] != line[j]:\n            if a>0:\n                if line[i] == c:\n                    i += 1\n                elif line[j] == c:\n                    j -= 1\n                else:\n                    f += 2\n                    break\n            else:\n                c = line[j]\n                j -= 1\n            a += 1\n        else:\n            i+=1\n            j-=1\n    if f == 3:\n        print(-1)\n    elif f==2:\n        print(b)\n    elif f==1:\n        print(a)\n    else:\n        print(min(a, b))\n\n",
                true
            ],
            [
                "def ispalindrome(s,c):\n    l = 0\n    r = len(s) - 1\n    ans = 0\n    #print(c)\n    while l <= r:\n        #print(s[l:r+1])\n        if l == r:\n            ans += 1\n            break\n        if s[l] == s[r]:\n            ans += 2\n            l += 1\n            r -= 1\n        else:\n            if s[l] == c:\n                l += 1\n            elif s[r] == c:\n                r -= 1\n            else:\n                return 'invalid'\n    return ans\n        \n        \nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    unique = set(s)\n    ans = 0\n    #print(unique)\n    for j in unique:\n        exp = ispalindrome(s,j)\n        #print(exp)\n        if exp != 'invalid':\n            ans = max(ans,exp)\n    if ans != 0:\n        print(n - ans)\n    else:\n        print(-1)\n",
                true
            ],
            [
                "def solve(s):\n    if s == s[::-1]:\n        return 0\n\n    answer = -1\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        if c not in s:\n            continue\n        ss = s.replace(c, '')\n        if ss != ss[::-1]:\n            continue\n\n        candidate = 0\n        start, end = 0, len(s) - 1\n        while start < end:\n            if s[start] == s[end]:\n                start += 1\n                end -= 1\n                continue\n            candidate += 1\n            if s[start] == c:\n                start += 1\n                continue\n            if s[end] == c:\n                end -= 1\n                continue\n\n        if answer >= 0:\n            answer = min(answer, candidate)\n        else:\n            answer = candidate\n\n    return answer\n\n\nt = int(input())\nfor _ in range(t):\n    n = input()\n    s = input()\n    print(solve(s))\n",
                true
            ],
            [
                "def check(string,char):\n    i = 0\n    j = len(string) - 1\n    c = 0\n    while i < j:\n        if string[i] == string[j] :\n            i += 1\n            j -= 1\n        elif string[i] == char:\n            i += 1\n            c += 1\n        elif string[j] == char:\n            j -= 1\n            c += 1\n        else:\n            return float('inf')\n    return c\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    string = str(input())\n    mini = float('inf')\n    for ascii in range(97,123):\n        mini = min(check(string,chr(ascii)), mini)\n    if mini != float('inf'):\n        ans = mini\n    else:\n        ans = -1\n    print(ans)",
                true
            ],
            [
                "from sys import stdin,stdout\ninput = stdin.readline\n\ndef output(answer):\n    stdout.write(\"{}\\n\".format(answer))\n    \n    \nfor _ in range(int(input())):\n    \n    n = int(input())\n    s = input()\n    if s[-1] == '\\n':\n        s = s[:-1]\n    \n    d = {}\n    for c in s:\n        d[c] = True\n    \n    maximum = 1e9\n    for char in range(26):\n        count = 0\n        low,high = 0, n-1\n        c = chr(char+97)\n        if c not in d:\n            continue\n        while low < high:\n            if s[low] == s[high]:\n                low += 1\n                high -= 1\n            else:\n                if s[low] == c:\n                    low += 1\n                    count += 1\n                elif s[high] == c:\n                    high -= 1\n                    count += 1\n                else:\n                    count = float('inf')\n                    break\n        maximum = min(maximum,count)\n        \n    if maximum >= 1000000000:\n        output(-1)\n    else:\n        output(maximum)",
                true
            ],
            [
                "def judge(s,c):\n    l=0\n    r=len(s)-1\n    cnt=0\n    while(l<r):\n        if(s[l]==s[r]):\n            r-=1\n            l+=1\n        else:\n            if(s[l]==c):\n                cnt+=1\n                l+=1\n            elif(s[r]==c):\n                cnt+=1\n                r-=1\n            else:\n                return 1e5\n    return cnt\nt=int(input())\nfor dlksajd in range(t):\n    n=int(input())\n    tmp=input()\n    cnt=1e5\n    for i in range(26):\n        cnt=min(cnt,judge(tmp,chr(ord('a')+i)))\n    if(cnt==1e5):\n        print(-1)\n    else:\n        print(cnt)\n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ans = -1\n    for i in range(26):\n        c = chr(ord('a') + i)\n        l = 0\n        r = n-1\n\n        ta = 0\n\n        while (l < r):\n            if (s[l] == s[r]):\n                l += 1\n                r -= 1\n            else:\n                if (s[l] == c):\n                    ta += 1\n                    l += 1\n                elif (s[r] == c):\n                    ta += 1\n                    r -= 1\n                else: break\n        else:\n            if ans < 0: ans = ta\n            else: ans = min(ans, ta)\n\n    print(ans)",
                true
            ],
            [
                "# Problem: C. \u0411\u0430\u0431\u0430 \u041a\u0430\u043f\u0430 \u0432\u044f\u0436\u0435\u0442 \u0448\u0430\u0440\u0444\n# Contest: Codeforces - Codeforces Round #750 (Div. 2)\n# URL: https://codeforces.com/contest/1582/problem/C\n# Memory Limit: 256 MB\n# Time Limit: 1000 ms\n# \n# Powered by CP Editor (https://cpeditor.org)\n\nimport bisect\n\nmod = 10 ** 9 + 7\neps = 10 ** -9\n\n\ndef __gcd(a, b):\n    return a if b == 0 else __gcd(b, a % b)\n    \n\ndef __lcm(a, b):\n    return a * b / __gcd(a, b)\n\n\ndef __fact(n):\n    return 1 if n == 1 else n * __fact(n - 1)\n\n\ndef __mex(a):\n    mex = 0\n    a.sort()\n    for x in a:\n        if x <= mex:\n            mex += 1\n        else:\n            break\n    return mex\n\ndef __dist(x1, y1, x2, y2):\n    return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\ndef __getprimes(n):\n    isprime = [True for i in range(n + 1)]\n    primes = []\n     \n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i * i, n + 1, i):\n                isprime[j] = False\n    for i in range(2, n + 1):\n        if isprime[i]:\n            primes.append(i)\n    return primes\n    \ndef __cntprimediv(n):\n    ret = 0\n    x = n\n    i = 2\n    while i * i <= x:\n        while n % i == 0:\n            n //= i\n            ret += 1\n        i += 1\n    if n > 1:\n        ret += 1\n    return ret\n    \ndef __primefactors(n):\n    ret = []\n    x = n\n    i = 2\n    while i * i <= x:\n        while n % i == 0:\n            ret.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        ret.append(n)\n    return ret\n    \n    \ndef __sumdigit(n):\n    ret = 0\n    while n > 0:\n        ret += n % 10\n        n //= 10\n    return ret\n    \n    \ndef solve(t):\n    n = int(input())\n    s = input()\n    ans = n\n    for c in range(26):\n        l = 0\n        sz = 10\n        r = n - 1\n        ok = True\n        while r > l:\n            \n            while r > l and ord(s[l]) - ord('a') == c:\n                l += 1\n            while r > l and ord(s[r]) - ord('a') == c:\n                r -= 1\n            if r > l and s[l] != s[r]:\n                ok = False\n                break\n            else:\n                l += 1\n                r -= 1\n        if not ok:\n            continue\n        l = 0\n        r = n - 1\n        tmp = n\n        while r > l:\n            while r > l and s[l] == s[r]:\n                tmp -= 2\n                l += 1\n                r -= 1\n            while r > l and s[l] != s[r]:\n                if ord(s[l]) - ord('a') == c:\n                    l += 1\n                elif ord(s[r]) - ord('a') == c:\n                    r -= 1\n        if l == r:\n            tmp -= 1\n        if ans > tmp:\n            ans = tmp\n    if ans == n:\n        ans = -1\n    print(ans)\n\n\nt = 1\nt = int(input())\n\n\nfor i in range(t):\n    solve(i + 1)\n",
                true
            ],
            [
                "inf = float('inf')\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\nimport array\n\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef maps(): return [int(i) for i in input().split()]\n\n\nlogging.basicConfig(\n    format=\"%(message)s\",\n    level=logging.WARNING,\n)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\n\ndef solve():\n    n, = maps()\n    s = input()\n    if s == s[::-1]:\n        print(0)\n        return\n\n    cnt = [0] * 26\n    for i in s:\n        cnt[ord(i) - ord('a')] += 1\n    lowercase = 'abcdefghijklmnopqrstuvwxyz'\n    ans = 0\n    ok = False\n    for i in range(26):\n        x = lowercase[i]\n        ss = s.replace(x, '')\n        if ss == ss[::-1]:\n            ok = True\n            ii, jj = 0, n - 1\n            t = 0\n            pp = True\n            while ii < jj:\n                # print(s[ii], s[jj], \"before\", ii, jj)\n                if s[ii] != s[jj]:\n                    if s[ii] == lowercase[i]:\n                        ii += 1\n                        t += 1\n                    elif s[jj] == lowercase[i]:\n                        jj -= 1\n                        t += 1\n                    else:\n                        pp = False\n                        break\n                else:\n                    ii += 1\n                    jj -= 1\n                # print(ii, jj, \"after\")\n\n            if pp:\n                ans = max(ans, n - t)\n    if ok:\n        print(n - ans)\n    else:\n        print(-1)\n\n\nfor _ in range(*maps()):\n    solve()\n",
                true
            ],
            [
                "import sys\n\ninp = sys.stdin.readline\n\n\ndef solve():\n    n = int(inp())\n    s = inp()\n    a = 1e18\n    for i in range(26):\n        c = chr(ord('a')+i)\n        l = 0\n        r = n-1\n        h = 0\n        while l < r:\n            if s[l] == s[r]:\n                l += 1\n                r -= 1\n            elif s[l] == c:\n                l += 1\n                h += 1\n            elif s[r] == c:\n                r -= 1\n                h += 1\n            else:\n                h = 1e18\n                break\n        a = min(a, h)\n    if a >= 1e18:\n        print(-1)\n    else:\n        print(a)\n\n\n\ndef main():\n    for i in range(int(inp())):\n        solve()\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "from sys import stdin, stdout\nprint = stdout.write\ninput = stdin.readline\n\ndef solve_test():\n    n = int(input())\n    s = input()[:-1]\n    # If the first and last letters are not the same, we can only remove one of the two.\n    # If they do match, go inwards until they do not match. The two letters are the ones we can remove.\n\n    a, b = \"\", \"\"\n    for i in range(n//2):\n        if s[i] != s[-1 - i]:\n            a, b = s[i], s[-1 - i]\n            break\n    if a == \"\":\n        return 0\n\n    def find_palindromes_removing(char):\n        left, right = 0, n - 1\n        removals = 0\n\n        while left < right:\n            if s[left] != s[right]:\n                if s[left] == char:\n                    left += 1\n                    removals += 1\n                elif s[right] == char:\n                    right -= 1\n                    removals += 1\n                else:\n                    return -1\n            else:\n                left += 1\n                right -= 1\n        return removals\n\n    x, y = (find_palindromes_removing(a), find_palindromes_removing(b))\n    z = min(x, y)\n    if z == -1:\n        z = max(x,y)\n    return z\n\n\ndef main(args=None):\n    tests = int(input())\n    for _ in range(tests):\n        print(f\"{solve_test()}\\n\")\n\n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "from sys import *\nfor _ in range(int(stdin.readline())):\n    n=int(stdin.readline())\n    s=input()\n    if s==s[::-1]:\n        stdout.write(\"0\\n\")\n        continue\n    if n==2:\n        print(1)\n        continue\n    ans=-1\n    s1=\"\"\n    tmp1=\"\"\n    st=set()\n    no=0\n    if s.count(s[0])>1:\n        for i in range(n-1,-1,-1):\n            if s[i]!=s[0]:\n                st.add(s[i])\n            else:\n                break\n        if len(st)==1:\n            c=0\n            pos=n-1\n            for i in range(n-1,-1,-1):\n                if s[i]==s[0]:\n                    break\n                c+=1\n                pos=i\n            s1=s[:pos]\n            tmp1=s[-1]\n            i=0\n            j=pos-1\n            while i<=j:\n                if s1[i]==s1[j]:\n                    i+=1\n                    j-=1\n                else:\n                    if s1[i]==tmp1:\n                        i+=1\n                        c+=1\n                    elif s1[j]==tmp1:\n                        j-=1\n                        c+=1\n                    else:\n                        no+=1\n                        break\n            if no==0:\n                ans=c\n        elif len(st)==0:\n            s1=s\n            tmp1=\"\"\n            tmp2=\"\"\n            i=0\n            j=len(s1)-1\n            c=0\n            ver=True\n            while i<=j:\n                if s1[i]==s1[j]:\n                    i+=1\n                    j-=1\n                else:\n                    tmp1=s1[i]\n                    tmp2=s1[j]\n                    break\n            i=0\n            j=len(s1)-1\n            while i<=j:\n                if s1[i]==s1[j]:\n                    i+=1\n                    j-=1\n                else:\n                    if s1[i]==tmp1:\n                        i+=1\n                        c+=1\n                    elif s1[j]==tmp1:\n                        j-=1\n                        c+=1\n                    else:\n                        ver=False\n                        break\n            if ver:\n                if ans==-1:\n                    ans=c\n                else:\n                    ans=min(ans,c)\n            c=0\n            tmp1=tmp2\n            i=0\n            j=len(s1)-1\n            ver=True\n            while i<=j:\n                if s1[i]==s1[j]:\n                    i+=1\n                    j-=1\n                else:\n                    if s1[i]==tmp1:\n                        i+=1\n                        c+=1\n                    elif s1[j]==tmp1:\n                        j-=1\n                        c+=1\n                    else:\n                        ver=False\n                        break\n            if ver:\n                if ans==-1:\n                    ans=c\n                else:\n                    ans=min(ans,c)\n        else:\n            no+=1\n    s=s[::-1]\n    s1=\"\"\n    tmp1=\"\"\n    st=set()\n    if s.count(s[0])>1:\n        for i in range(n-1,-1,-1):\n            if s[i]!=s[0]:\n                st.add(s[i])\n            else:\n                break\n        if len(st)==1:\n            c=0\n            pos=n-1\n            for i in range(n-1,-1,-1):\n                if s[i]==s[0]:\n                    break\n                c+=1\n                pos=i\n            s1=s[:pos]\n            tmp1=s[-1]\n            i=0\n            j=pos-1\n            ver=True\n            while i<=j:\n                if s1[i]==s1[j]:\n                    i+=1\n                    j-=1\n                else:\n                    if s1[i]==tmp1:\n                        i+=1\n                        c+=1\n                    elif s1[j]==tmp1:\n                        j-=1\n                        c+=1\n                    else:\n                        ver=False\n                        break\n            if ver:\n                if ans==-1:\n                    ans=c\n                else:\n                    ans=min(ans,c)\n        elif len(st)==0:\n            s1=s\n            tmp1=\"\"\n            tmp2=\"\"\n            i=0\n            j=len(s1)-1\n            c=0\n            ver=True\n            while i<=j:\n                if s1[i]==s1[j]:\n                    i+=1\n                    j-=1\n                else:\n                    tmp1=s1[i]\n                    tmp2=s1[j]\n                    break\n            i=0\n            j=len(s1)-1\n            while i<=j:\n                if s1[i]==s1[j]:\n                    i+=1\n                    j-=1\n                else:\n                    if s1[i]==tmp1:\n                        i+=1\n                        c+=1\n                    elif s1[j]==tmp1:\n                        j-=1\n                        c+=1\n                    else:\n                        ver=False\n                        break\n            if ver:\n                if ans==-1:\n                    ans=c\n                else:\n                    ans=min(ans,c)\n            c=0\n            tmp1=tmp2\n            ver=True\n            i=0\n            j=len(s1)-1\n            while i<=j:\n                if s1[i]==s1[j]:\n                    i+=1\n                    j-=1\n                else:\n                    if s1[i]==tmp1:\n                        i+=1\n                        c+=1\n                    elif s1[j]==tmp1:\n                        j-=1\n                        c+=1\n                    else:\n                        no+=1\n                        ver=False\n                        break\n            if ver:\n                if ans==-1:\n                    ans=c\n                else:\n                    ans=min(ans,c)\n        else:\n            no+=1\n    stdout.write(str(ans)+\"\\n\")",
                true
            ],
            [
                "# cook your dish here\nimport sys\ndef count(n,s,ch):\n    i = 0; j = n-1; cnt = 0\n    while i < j:\n        if s[i] == s[j]:\n            i+=1; j-=1\n        else:\n            if s[i] == ch:\n                cnt+=1\n                i += 1\n            elif s[j] == ch:\n                cnt += 1\n                j-=1\n            else:\n                return sys.maxsize\n    return cnt\n\ndef fun(n,s):\n    import sys\n    ans = sys.maxsize\n    for ch in set(s):\n        c = count(n,s,ch)\n        ans = min(ans, c)\n    return ans if ans != sys.maxsize else -1\n            \nt = int(input())\nfor i in range(t):\n    # a,b,c = map(int,input().split())\n    n = int(input())\n    s = input()\n    # arr = list(map(int,input().split()))\n    ans = fun(n,s)\n    print(ans)\n",
                true
            ],
            [
                "from math import *\n#from bisect import *\n#from collections import *\n#from random import *\n#from decimal import *\"\"\"\n#from heapq import *\n#from itertools import *\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return map(int,input().split())\nt=inp()\nwhile(t):\n    t-=1\n    n=inp()\n    s=st()\n    fl=0\n    rem=10**6\n    for i1 in range(26):\n        z=s.count(chr(97+i1))\n        pl=0\n        i,j=0,n-1\n        while(i<=j):\n            if(i==j):\n                if(s[i]==chr(97+i1)):\n                    z-=1\n                    break\n            if(s[i]==s[j]):\n                if(s[i]==chr(97+i1)):\n                    z-=2\n                    i+=1\n                    j-=1\n                else:\n                    i+=1\n                    j-=1\n            else:\n                if(s[i]==chr(97+i1)):\n                    i+=1\n                elif(s[j]==chr(97+i1)):\n                    j-=1\n                else:\n                    pl=1\n                    break\n        if(pl==0):\n            fl=1\n            rem=min(rem,z)\n    if(fl==0):\n        rem=-1\n    print(rem)\n            \n",
                true
            ],
            [
                "import sys\nreadline=sys.stdin.readline\n\nT=int(readline())\nfor t in range(T):\n    N=int(readline())\n    S=[ord(s)-97 for s in readline().rstrip()]\n    ans=1<<30\n    for s in range(26):\n        i,j=0,N\n        cnt=0\n        while j-i>=2:\n            if S[i]==S[j-1]:\n                i+=1;j-=1\n            else:\n                if S[i]==s:\n                    i+=1\n                    cnt+=1\n                elif S[j-1]==s:\n                    j-=1\n                    cnt+=1\n                else:\n                    break\n        else:\n            ans=min(ans,cnt)\n    if ans==1<<30:\n        ans=-1\n    print(ans)",
                true
            ],
            [
                "from sys import stdin,stdout,setrecursionlimit\nfrom math import gcd,sqrt,factorial,pi,inf\nfrom collections import deque,defaultdict\nfrom bisect import bisect,bisect_left\nfrom time import time\nfrom itertools import permutations as per\nfrom heapq import heapify,heappush,heappop,heappushpop\ninput=stdin.readline\nR=lambda:map(int,input().split())\nI=lambda:int(input())\nS=lambda:input().rstrip('\\r\\n')\nL=lambda:list(R())\nP=lambda x:stdout.write(str(x)+'\\n')\nlcm=lambda x,y:(x*y)//gcd(x,y)\nnCr=lambda x,y:(f[x]*inv((f[y]*f[x-y])%N))%N\ninv=lambda x:pow(x,N-2,N)\nsm=lambda x:(x**2+x)//2\nN=10**9+7\n\nfor _ in range(I()):\n    n=I()\n    s=S()\n    ans=inf\n    for i in range(26):\n        x=chr(97+i)\n        l=0\n        r=n-1\n        m=0\n        while l<r:\n            if s[l]==s[r]:\n                l+=1\n                r-=1\n                continue\n            if s[l]==x:\n                l+=1\n                m+=1\n            elif s[r]==x:\n                r-=1\n                m+=1\n            else:\n                m=inf\n                break\n        ans=min(ans,m)\n    print(-1 if ans==inf else ans)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n\ndef isPalin(string):\n    # print(string)\n    l =  len(string) \n    if l % 2 == 0:\n        tmp1 = string[:l//2]\n        tmp2 = string[l//2:]\n        tmp2 = tmp2[::-1]\n        if tmp1 == tmp2:\n            return True\n    else:\n        tmp1 = string[:l//2]\n        tmp2 = string[l//2+1:]\n        tmp2 = tmp2[::-1]\n        if tmp1 == tmp2:\n            return True\n    return False\n\n\ndef cntSame(string, x):\n    s, e = 0, len(string)-1\n    cnt = 0\n    while s <= e:\n        if string[s] == string[e]:\n            s += 1\n            e -= 1\n        else:\n            if string[s] == x:\n                cnt += 1\n                s += 1\n            elif string[e] == x:\n                cnt += 1\n                e -= 1\n    return cnt\n\nt = int(input())\nfor __ in range(t):\n    n = int(input())\n    string = input().rstrip()\n    flag = 1\n    cnt = int(1e9)\n    for x in 'abcdefghijklmnopqrstuvwxyz':\n        s = string.replace(x, '')\n\n        if isPalin(s):\n            nnum = cntSame(string, x)\n            # print(nnum, x, s)\n            cnt = min(cnt, nnum)\n            flag = 0\n    print(-1 if flag else cnt)\n",
                true
            ],
            [
                "\n\ndef case():\n    n = int(input())\n    s = input()\n\n    l = 0\n    r = n-1\n\n    # discard identical endfix\n    while l < r:\n        x = s[l]\n        y = s[r]\n        if x == y:\n            l += 1\n            r -= 1\n            continue\n        else:\n            break\n    # check if already done\n    if l >= r:\n        print(0)\n        return\n    base_l, base_r = l, r\n    # try with deleting left letter\n    c = s[base_l]\n    left_ans = 0\n    \n    while l < r:\n        x = s[l]\n        y = s[r]\n        if x == y:\n            l += 1\n            r -= 1\n        elif x == c:\n            left_ans += 1\n            l += 1\n        elif y == c:\n            left_ans += 1\n            r -= 1\n        else:\n            left_ans = -1\n            break\n\n    # try with deleting right letter\n    c = s[base_r]\n    l, r = base_l, base_r\n    right_ans = 0\n    \n    while l < r:\n        x = s[l]\n        y = s[r]\n        if x == y:\n            l += 1\n            r -= 1\n        elif x == c:\n            right_ans += 1\n            l += 1\n        elif y == c:\n            right_ans += 1\n            r -= 1\n        else:\n            right_ans = -1\n            break\n\n    if left_ans == -1 and right_ans == -1:\n        print(-1)\n    elif left_ans == -1:\n        print(right_ans)\n    elif right_ans == -1:\n        print(left_ans)\n    else:\n        print(min(left_ans, right_ans))\n\n\n\n\n\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        case()\n\n\n\n    \n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "t = int(input())\nfor test_case in range(t):\n    n = int(input())\n    s = list(input())\n    try:\n        while s[0] == s[-1]:\n                s.pop(0)\n                s.pop()\n                n -= 2\n    except:\n        print(0)\n    if s:\n        k = 0\n        j = n-1\n        ans = [0, 0]\n        while k < j:\n            if s[k] == s[j]:\n                k += 1\n                j -= 1\n            else:\n                if s[k] == s[0]:\n                    ans[1] += 1\n                    k += 1\n                elif s[j] == s[0]:\n                    ans[1] += 1\n                    j -= 1\n                else:\n                    ans.pop()\n                    break\n        k = 0\n        j = n-1\n        while k < j:\n            if s[k] == s[j]:\n                k += 1\n                j -= 1\n            else:\n                if s[k] == s[-1]:\n                    ans[0] += 1\n                    k += 1\n                elif s[j] == s[-1]:\n                    ans[0] += 1\n                    j -= 1\n                else:\n                    ans.pop(0)\n                    break\n        if not ans:\n            print(-1)\n        else:\n            print(min(ans))\n",
                true
            ],
            [
                "def is_palindrome(s):\n    for i in range(len(s)//2):\n        if s[i] != s[-i-1]:\n            break\n    \n    else:\n        return True\n    \n    return False\n\n\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    alphabet = list(set(s))\n    \n    flag = False\n    maximum = -1\n    \n    for symbol in alphabet:\n        if is_palindrome(s.replace(symbol, '')):\n            flag = True\n            index, length = 0, n\n            lst = list(s)\n            \n            while index < length // 2:\n                if lst[index] != symbol != lst[-index-1]:\n                    index += 1\n                    \n                elif lst[index] == symbol == lst[-index-1]:\n                    index += 1                 \n                      \n                elif lst[index] == symbol:\n                    lst.pop(index)\n                    length -= 1\n                    \n                else:\n                    lst.pop(-index-1)\n                    length -= 1\n                    \n            maximum = max(maximum, length)\n    \n    if flag:       \n        print(n - maximum)\n        \n    else:\n        print(-1)",
                true
            ],
            [
                "x = [chr(97+i) for i in range(26)]\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 10**8\n    for c in x:\n        i = 0\n        j = n - 1\n        curr = 0\n        while i <= j:\n            if s[i] == s[j]:\n                i += 1\n                j -= 1\n            elif s[i] == c:\n                i += 1\n                curr += 1\n            elif s[j] == c:\n                j -= 1\n                curr += 1\n            else:\n                curr = 10**8\n                break\n        ans = min(ans, curr)\n    if ans == 10**8:\n        print(-1)\n    else:\n        print(ans)\n    ",
                true
            ],
            [
                "import io, os\nimport sys \nfrom sys import stdin\n\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque, namedtuple\nfrom math import gcd, ceil, floor, factorial\nfrom itertools import combinations, permutations\n\n# input = sys.stdin.buffer.readline\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\ninput = sys.stdin.readline\n\ndef work(n, s):\n    if s == s[::-1]:\n        return 0\n\n    ans = float('inf')\n    seen = set(s)\n\n    for ch in seen:\n        flag = True \n        l, r = 0, n - 1 \n        cnt = 0 \n        while l < r:\n            if s[l] == s[r]:\n                l += 1 \n                r -= 1 \n            else:\n                if s[l] == ch:\n                    l += 1 \n                    cnt += 1 \n                elif s[r] == ch:\n                    r -= 1 \n                    cnt += 1 \n                else:\n                    flag = False \n                    break \n        \n        if flag:\n            ans = min(ans, cnt)\n\n    if ans == float('inf'):\n        return -1 \n    else:\n        return ans \n\n\ndef main():\n    test = int(input())\n\n    for idt in range(test):\n        n = int(input())\n        # n, m = map(int, input().split())\n        # a = list(map(int, input().split()))\n        s = input().strip(\"\\r\\n\")\n        ans = work(n, s)\n        print(ans)\n    return \n\n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "import string\n\n\ndef is_palindrome(s):\n    n = len(s)\n    for i in range(n // 2):\n        j = (n - 1) - i\n        if s[i] != s[j]:\n            return False\n    return True\n\n\ndef solve_case():\n    n = int(input())\n    s = input()\n    min_r = n + 1\n    for ch_i in range(26):\n        ch = chr(ord('a') + ch_i)\n        i = 0\n        j = n - 1\n        count = 0\n        bad = False\n        while i < j:\n            if s[i] != s[j]:\n                if s[i] == ch:\n                    i += 1\n                    count += 1\n                elif s[j] == ch:\n                    j -= 1\n                    count += 1\n                else:\n                    bad = True\n                    break\n            else:\n                i += 1\n                j -= 1\n        if not bad:\n            min_r = min(min_r, count)\n    if min_r == n + 1:\n        print(-1)\n    else:\n        print(min_r)\n\n\nT = int(input())\nfor t in range(T):\n    solve_case()\n",
                true
            ],
            [
                "import bisect\nimport collections\nimport copy\nimport enum\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\nsys.setrecursionlimit(3001)\n\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    ans = float(\"inf\")\n    for c in string.ascii_lowercase:\n        st,ed = 0,n-1\n        cnt = 0\n        while st<ed:\n            if s[st]==s[ed]:\n                st+=1\n                ed-=1\n            elif s[st]==c:\n                st+=1\n                cnt+=1\n            elif s[ed]==c:\n                ed-=1\n                cnt+=1\n            else:\n                cnt = float(\"inf\")\n                break\n        ans = min(ans,cnt)\n    if ans==float(\"inf\"):\n        print(-1)\n    else:\n        print(ans)\n\n",
                true
            ],
            [
                "# cook your dish here\nfrom collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, log2, sqrt, gcd\nimport bisect\nimport copy\nfrom itertools import combinations\nimport sys\nimport heapq\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef input(): return sys.stdin.readline().strip()\n\n\n\n\nfor _ in range(int(input())):\n\n    n=int(input())\n    s=input()\n    l=0\n    r=len(s)-1\n    while(l<=r):\n        if s[l]==s[r]:\n            l+=1\n            r-=1\n        else:\n            ele1=s[l]\n            ele2=s[r]\n            break\n    if l<=r:\n        flag1=True\n        cnt1=0\n        flag2=True\n        cnt2=0\n        l=0\n        r=len(s)-1\n        while(l<=r):\n            if s[l]==s[r]:\n                l+=1\n                r-=1\n            else:\n                if s[l]!=ele1 and s[r]!=ele1:\n                    flag1=False\n                    break\n                if s[l]==ele1:\n                    l+=1\n                    cnt1+=1\n                if s[r]==ele1:\n                    r-=1\n                    cnt1+=1\n        l=0\n        r=len(s)-1\n        while (l <= r):\n            if s[l] == s[r]:\n                l += 1\n                r -= 1\n            else:\n                if s[l] != ele2 and s[r] != ele2:\n                    flag2 = False\n                    break\n                if s[l] == ele2:\n                    l += 1\n                    cnt2 += 1\n                if s[r] == ele2:\n                    r -= 1\n                    cnt2 += 1\n\n        if flag1==False and flag2==False:\n            print(-1)\n        else:\n            if flag1==True and flag2==True:\n                print(min(cnt1,cnt2))\n            else:\n                if flag1==True:\n                    print(cnt1)\n                else:\n                    print(cnt2)\n\n\n\n    else:\n        print(0)\n\n\n\n\n",
                true
            ],
            [
                "def checkpallindorme(arr):\n    l = len(arr) - 1\n    f = 0 \n    while f <= l:\n        if arr[f] != arr[l]:\n            return False \n        l-=1\n        f+=1\n    \n    return True\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [c for c in input()]\n    if checkpallindorme(arr):\n        print(0)\n    else:\n        ans = float(\"inf\")\n        ss = 'abcdefghijklmnopqrstuvwxyz'\n        for s in ss:\n            f= 0\n            l = len(arr)-1\n            count = 0\n            while f<=l:\n                if arr[f] == arr[l]:\n                    f+=1\n                    l-=1\n                    continue\n\n                if arr[f] == s:\n                    count+=1\n                    f+=1\n                    continue\n                \n                if arr[l] == s:\n                    count+=1\n                    l-=1\n                    continue\n                \n                count = float(\"inf\")\n                break\n\n            ans= min(ans,count)                \n    \n        if ans == float(\"inf\"):\n            print(-1)\n        else:\n            print(ans)",
                true
            ],
            [
                "q = int(input())\n\nfor i in range(0, q):\n    n = int(input())\n    s = input()\n    ans = n + 1\n    for j in range(0, 26):\n        l, r = 0, n - 1\n        cnt = 0\n        while l < r:\n            if s[l] == s[r]:\n                l, r = l + 1, r-1\n            elif s[l] == chr(97 + j):\n                l, cnt = l + 1, cnt + 1\n            elif s[r] == chr(97 + j):\n                r, cnt = r - 1, cnt + 1\n            else:\n                cnt = n + 1\n                break\n        ans = min(ans, cnt)\n    if ans == n+1:\n        print(-1)\n    else:\n        print(ans)\n\n",
                true
            ],
            [
                "def check_palin(s, c):\n    i = 0\n    j = len(s)-1\n    while i <j:\n        if s[i] == c:\n            i+=1\n            continue\n        if s[j] == c:\n            j-=1\n            continue\n        if s[i] == s[j]:\n            i+=1\n            j-=1\n        else:\n            return False\n    return True\n\n\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    s = list(input())\n    i,j = 0,n-1\n    while(i<j and s[i] == s[j]):\n        i+=1\n        j-=1\n    if i>=j:\n        print(0)\n        continue\n    p1 = []\n    p2 = []\n    a= check_palin(s, s[i])\n    b = check_palin(s, s[j])\n    if a==False and b==False:\n        print(-1)\n        continue\n    ps = [s[i], s[j]]\n    sm= 100000\n    for p in ps:\n        c=0\n        i,j = 0,n-1\n        while i<=j:\n            if s[i] == s[j]:\n                i+=1\n                j-=1\n            elif s[i] == p:\n                i+=1\n                c+=1\n            elif s[j] == p:\n                j-=1\n                c+=1\n            else:\n                c=-1\n                break\n        if c>=0:\n            sm = min(sm, c)\n    \n    print(sm)\n    \n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    s=input().strip()\n    ma=10**9\n    mi=0\n    for i in range(26):\n        ch=chr(97+i)\n        # print(ch)\n        l=[]\n        ans=[]\n        for j in range(n):\n            if s[j]!=ch:\n                l.append(j)\n                ans.append(s[j])\n        # print(l)\n        if ans[::-1]==ans:\n            ma=0\n            if len(ans)>=1:\n                m=len(ans)+2*min(n-l[-1]-1,l[0])\n                # print(l,m)\n                for j in range(len(ans)-1):\n                    m+=min(l[j+1]-l[j]-1,l[len(ans)-j-1]-l[len(ans)-j-2]-1)\n                mi=max(mi,m)\n    if ma==10**9:\n        print(-1)\n    else:\n        print(n-mi)\n\n\n",
                true
            ],
            [
                "t = int(input())\nletters = [chr(ord('a') + i) for i in range(26)]\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    res = -1\n    for c in letters:\n        s1 = s.replace(c, '')\n        if all(s1[i] == s1[-i - 1] for i in range(len(s1) // 2)):\n            l, r = 0, n - 1\n            temp = 0\n            while r > l:\n                if s[l] != c:\n                    while s[r] != s[l]:\n                        temp += 1\n                        r -= 1\n                elif s[r] != c:\n                    while s[l] != s[r]:\n                        temp += 1\n                        l += 1\n                l += 1\n                r -= 1\n            if res == -1 or res > temp:\n                res = temp\n    print(res)\n\n    ",
                true
            ],
            [
                "import sys\n\nT = int(sys.stdin.readline().strip())\nfor t in range (0, T):\n    n = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n    ans = 0\n    for i in range (0, n):\n        if s[i] != s[n-1-i]:\n            l1 = s[i]\n            l2 = s[n-1-i]\n            ans = -1\n    if ans == -1:\n        for l in [l1, l2]:\n            c = 0\n            i = 0\n            j = n-1\n            while i < j:\n                if s[i] != s[j]:\n                    if s[i] != l and s[j] != l:\n                        c = -1\n                        break\n                    elif s[i] == l:\n                        i = i + 1\n                        c = c + 1\n                    else:\n                        j = j - 1\n                        c = c + 1\n                else:\n                    i = i + 1\n                    j = j - 1\n            if ans == -1:\n                ans = c\n            elif c != -1:\n                ans = min(ans, c)\n    print(ans)\n",
                true
            ],
            [
                "# import sys\n# sys.stdin=open('Python\\input.txt','r')\n# sys.stdout=open('Python\\output.txt','w')\n\nfor _ in range(int(input())):\n    n=int(input())\n    s=input()\n    res=float('inf')\n\n    for i in range(26):\n        l,r,temp=0,n-1,0\n        while l<=r:\n            if s[l]==s[r]:\n                l+=1\n                r-=1\n            elif s[l]==chr(97+i):\n                l+=1\n                temp+=1\n            elif s[r]==chr(97+i):\n                r-=1\n                temp+=1\n            else:\n                temp=float('inf')\n                break\n        res=min(res,temp)\n    print([res,-1][res==float('inf')])",
                true
            ],
            [
                "    \nfor i in range(int(input())):\n    n=int(input())\n    s=input()\n    ans=10**9\n    f=0\n    for i in range(26):\n        c=chr(ord('a')+i)\n        i1=0\n        j=n-1\n        rh=0\n        fh=1\n        while i1<j:\n            if s[i1]==s[j]:\n                i1+=1\n                j-=1\n                continue\n            else:\n                if s[i1]==c:\n                    i1+=1\n                    rh+=1\n                elif s[j]==c:\n                    j-=1\n                    rh+=1\n                else:\n                    fh=0\n                    break\n        if fh:\n            f=1\n            ans=min(ans,rh)\n    if f:\n        print(ans)\n    else:\n        print(-1)",
                true
            ],
            [
                "def solve(s):\n    l = 0\n    r = len(s) - 1\n    lock = None\n    c = 0\n    while l < r:\n        if s[l] != s[r]:\n            if lock == None or lock == s[l]:\n                c += 1\n                lock = s[l]\n                l += 1\n            elif lock == s[r]:\n                c += 1\n                r -= 1\n            else:\n                return -1\n        else:\n            l += 1\n            r -= 1\n    return c\n\ndef solveR(s):\n    l = 0\n    r = len(s) - 1\n    lock = None\n    c = 0\n    while l < r:\n        if s[l] != s[r]:\n            if lock == None or lock == s[r]:\n                lock = s[r]\n                c += 1\n                r -= 1\n            elif lock == s[l]:\n                c += 1\n                l += 1\n            else:\n                return -1\n        else:\n            l += 1\n            r -= 1\n    return c\n\nfor _ in range(int(input())):\n    input()\n    s = input()\n    sl = solve(s)\n    sr = solveR(s)\n\n    if sl == -1 or sr == -1:\n        print(max(sl, sr))\n    else:\n        print(min(sl, sr))\n",
                true
            ],
            [
                "import sys,os,io\n#input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n#input = sys.stdin.readline\nimport math\nimport bisect\nt=int(input())\n\nfor a0 in range(t):\n    n=int(input())\n    s=input()\n    st=0 \n    end=n-1 \n    while(st<end and s[st]==s[end]):\n        st+=1 \n        end-=1 \n    if(st>=end):\n        print(0)\n        continue\n    w=[s[st],s[end]]\n    #print(w)\n    chk=w[0]\n    m=0 \n    f1=0 \n    st1=st;end1=end \n    st2=st;end2=end\n    while(st1<end1):\n        if(s[st1]==s[end1]):\n            st1+=1 \n            end1-=1 \n        else:\n            if(s[st1]==chk):\n                st1+=1\n                m+=1 \n            elif(s[end1]==chk):\n                end1-=1 \n                m+=1 \n            else:\n                f1=1 \n                break \n    chk=w[1]\n    m1=0 \n    f2=0 \n    while(st2<end2):\n        if(s[st2]==s[end2]):\n            st2+=1 \n            end2-=1 \n        else:\n            if(s[st2]==chk):\n                st2+=1\n                m1+=1 \n            elif(s[end2]==chk):\n                end2-=1 \n                m1+=1 \n            else:\n                f2=1 \n                break \n    #print(f1,f2)\n    #print(m,m1)\n    if(f1==1 and f2==1):\n        print(-1)\n    else:\n        if(f1==1):\n            print(m1)\n        elif(f2==1):\n            print(m)\n        else:\n            print(min(m1,m))\n    ",
                true
            ],
            [
                "def removechar(s, l):\n      n = len(s)\n      front = 0\n      rear = n - 1\n      rm = 0\n      while front < rear:\n            if s[front] == l and s[rear] != l:\n                  rm += 1\n                  front += 1\n            elif s[front] != l and s[rear] == l:\n                  rm += 1\n                  rear -= 1\n            elif s[front] == s[rear]:\n                  front += 1\n                  rear -= 1\n      return rm\n\ndef palin(s):\n      n = len(s)\n      front = 0\n      rear = n - 1\n      while front < rear:\n            if s[front] == s[rear]:\n                  front += 1\n                  rear -= 1\n            else:\n                  return False\n      return True\n      \ndef f(s):\n      letters = set()\n      for i in s:\n            letters.add(i)\n      minrm = -1\n      #print(letters)\n      for l in letters:\n            ns = s.replace(l, '')\n            if palin(ns):\n                  rm = removechar(s, l)\n                  if rm < minrm or minrm == -1:\n                        minrm = rm\n\n      return minrm\n            \n\n\ntc = int(input())\nfor _ in range(tc):\n      n = int(input())\n      s = input()\n      ans = f(s)\n      print(ans)\n",
                true
            ],
            [
                "from string import ascii_lowercase\n\ntc = int(input())\n\nfor t in range(tc):\n    n = int(input())\n    s = input()\n    ans = -1\n\n    for c in ascii_lowercase:\n        i = 0\n        j = n-1\n        flag = cn = 0\n\n        while i<j:\n            if s[i]==s[j]:\n                i += 1\n                j -= 1\n            elif s[i]!=c and s[j]!=c:\n                flag = 1\n                break\n            elif s[i]==c:\n                i+=1\n                cn+=1\n            else:\n                j-=1\n                cn+=1\n                \n        if not flag:\n            if ans==-1: ans = cn\n            else : ans = min(ans, cn)\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    s=input()\n    ans=n\n    for k in range(26):\n        i,j=0,n-1\n        temp=0\n        flag=True\n        while i<j:\n            if s[i]!=s[j]:\n                if ord(s[i])-ord('a')==k or ord(s[j])-ord('a')==k:\n                    temp+=1\n                    if ord(s[i])-ord('a')==k:\n                        i+=1\n                    else:\n                        j-=1\n                else:\n                    flag=False\n                    break\n            else:\n                i+=1\n                j-=1\n        if flag:\n            ans=min(ans,temp)\n    if ans==n:\n        print(-1)\n    else:\n        print(ans)  ",
                true
            ],
            [
                "import copy\nimport heapq\nimport itertools\nimport bisect\nimport collections\nimport math\nimport sys\nimport typing\n# region template\n\n\ndef ni(): return int(sys.stdin.buffer.readline())\ndef ns(): return map(int, sys.stdin.buffer.readline().split())\ndef ns1(): return map(lambda x: int(x)-1, sys.stdin.buffer.readline().split())\ndef na(): return list(map(int, sys.stdin.buffer.readline().split()))\ndef na1(): return list(map(lambda x: int(x)-1, sys.stdin.buffer.readline().split()))\ndef nall(): return list(map(int, sys.stdin.buffer.read().split()))\ndef flush(): return sys.stdout.flush()\ndef nic(): return int(sys.stdin.readline())\ndef nsc(): return map(int, sys.stdin.readline().split())\ndef nac(): return list(map(int, sys.stdin.readline().split()))\ndef na1c(): return list(map(lambda x: int(x)-1, sys.stdin.readline().split()))\n# endregion\n\n\n# sys.setrecursionlimit(10**7+1)\ninf = 10**20\nmod = 10**9+7\n# mod = 998244353\n\n\ndef solve():\n    n = nic()\n    s = input()\n    a = [ord(s)-97 for s in s]\n\n    res = inf\n    for i in range(26):\n        l, r = 0, n-1\n        tres = 0\n        while r > l:\n            if a[l] == a[r]:\n                l += 1\n                r -= 1\n            elif a[l] == i:\n                l += 1\n                tres += 1\n            elif a[r] == i:\n                r -= 1\n                tres += 1\n            else:\n                break\n        else:\n            res = min(res, tres)\n    print(res if res != inf else -1)\n\n\ndef main():\n    t = nic()\n    for _ in range(t):\n        solve()\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "from sys import stdin,stdout,setrecursionlimit\nstdin.readline\ndef mp(): return list(map(int, stdin.readline().strip().split()))\ndef it():return int(stdin.readline().strip())\nfrom collections import defaultdict as dd,Counter as C,deque\nfrom math import ceil,gcd,sqrt,factorial,log2,floor    \nfrom bisect import bisect_right as br,bisect_left as bl\nfrom heapq import *\nmod = 10**9+7\ninf = (1<<60)\n\n\nfor _ in range(it()):\n    n = it()\n    a = list(input().strip())\n\n    i =0\n    j = n-1;\n    ele = None\n    ans =0\n    count =0\n    while i<j :\n        if a[i]==a[j]:\n            i+=1\n            j-=1\n        else:\n            if ele:\n                if ele==a[j]:\n                    j-=1\n                    count+=1\n                elif ele==a[i]:\n                    i+=1\n                    count+=1\n                else:\n                    ans =-1\n                    break\n\n            else :\n                ele = a[j]\n                j-=1\n                count+=1\n    ans1 = ans\n    count1 = count\n\n    i =0\n    j = n-1;\n    ele = None\n    ans =0\n    count =0\n    while i<j :\n        if a[i]==a[j]:\n            i+=1\n            j-=1\n        else:\n            if ele:\n                if ele==a[j]:\n                    j-=1\n                    count+=1\n                elif ele==a[i]:\n                    i+=1\n                    count+=1\n                else:\n                    ans =-1\n                    break\n\n            else :\n                ele = a[i]\n                i+=1\n                count+=1\n    if ans ==-1 and ans1==-1:\n        print(-1)\n    elif ans!=-1 and ans1!=-1:\n        print(min(count,count1))\n    elif ans !=-1:\n        print(count)\n    else:\n        print(count1)\n",
                true
            ],
            [
                "def answer():\n    N = int(input())\n    s = list(input())\n    str_list = set(s)\n    \n    if all(s[i] == s[N-1-i] for i in range(N//2 + 1)):\n        print(0)\n        return\n    \n    def num_count(x):\n        \n        ts = []\n        d = dict()\n        cnt = 0\n        for i in range(N):\n            if s[i] != x:\n                ts.append(s[i])\n                d[cnt] = i\n                cnt += 1\n                \n        n = len(ts)\n        if any(ts[i] != ts[n-1-i] for i in range(n//2 + 1)):\n            return -1\n            \n        ans = N - n\n        ans -= 2*min(d[0],N-d[n-1]-1)\n        \n        if n%2 == 0:\n            m = n//2\n            if m == 1:\n                ans -= d[1]-d[0]-1\n                return ans\n                \n            ans -= d[m] - d[m-1] - 1\n            \n            for j in range(m-1):\n                \n                ans -= 2*min(d[m-1-j] - d[m-2-j] - 1 , d[m+1+j] - d[m+j] - 1)\n        else:\n            m = n//2\n            if m == 0:\n                return ans\n                \n            for j in range(m):\n                \n                ans -= 2*min(d[m-j] - d[m-1-j] - 1 , d[m+1+j] - d[m+j] - 1)\n        return ans\n    tans = N+1\n    for x in str_list:\n        tmp = num_count(x)\n        if tmp != -1:\n            tans = min(tans,tmp)\n        else:\n            continue\n    \n    if tans == N+1:\n        print(-1)\n    else:\n        print(tans)\n    return\n            \n            \n        \n        \n    \n    \nt = int(input())\nfor _ in range(t):\n    answer()",
                true
            ],
            [
                "from collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom math import inf\nfrom string import ascii_lowercase\n\nri = lambda : map(int, input().split())\nro = lambda : int(input())\n\ndef solve():\n    n = ro()\n    s = input()\n    ans = inf\n    for c in ascii_lowercase:\n        curr = 0\n        i = 0\n        j = n - 1\n        while i <= j:\n            if s[i] == s[j]:\n                i += 1\n                j -= 1\n            elif s[i] == c:\n                i += 1\n                curr += 1\n            elif s[j] == c:\n                j -= 1\n                curr += 1\n            else:\n                curr = inf\n                break\n        ans = min(ans, curr)\n    if ans == inf: print(-1)\n    else: print(ans)\n\n\n\nt = 1\nt = int(input())\nwhile t:\n    t -= 1\n    solve()\n\n",
                true
            ],
            [
                "from os import environ\nimport sys\nimport math\nif environ.get(\"hardik\"):\n    sys.stdin = open('../input.txt', 'r')\n    sys.stdout = open('../output.txt', 'w')\ninput = sys.stdin.readline\nprint = sys.stdout.write\nmod = (10**9) + 7\ndef I(): return input().strip()\ndef II(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\ndef P(z=''): \n    print(str(z)+'\\n')\ndef LP(z=[]): \n    for i in z:\n        print(str(i)+' ')\n    print('\\n')\ndef gcd(a, b):\n    return a if b==0 else gcd(b, a%b)\n#####################\n\nfor _ in range(II()):\n    n = II()\n    s = I()\n    ans = float(\"inf\")\n\n    arr = [ord(i)-97 for i in s]\n    for i in range(26):\n        change = 0\n        l = 0\n        r = n-1\n        while True:\n            if l>=r:\n                break\n            if arr[l]==arr[r]:\n                l+=1\n                r-=1\n            else:\n                if arr[l]==i:\n                    l+=1\n                    change+=1\n                elif arr[r] == i:\n                    r-=1\n                    change+=1\n                else:\n                    change = float(\"inf\")\n                    break\n        ans = min(ans, change)\n    if ans==float(\"inf\"):\n        P(-1)\n    else:\n        P(ans)\n\n\n\n",
                true
            ],
            [
                "from functools import lru_cache\nfrom collections import defaultdict as dd\ndef longestPalindrome(s: str) -> str:\n    dp = dd(lambda: -9999999)\n    def retdp(k, v: int) -> int:\n        dp[k] = v\n        return v\n    def do_dp(start, end, remove):\n        def valid(oth): return remove is None or remove == oth\n        t = (start,end,remove)\n        if t in dp: return dp[t]\n        if start == end: return retdp(t,1)\n        edges_equal = s[start] == s[end]\n        if start+1 == end: # length is 2\n            if edges_equal: return retdp(t,2)\n            if any(valid(c) for c in (s[start], s[end])):\n                return retdp(t,1) # remove either side.\n            return retdp(t,-9999999) # corrupt all values.\n        # at this point, end-start >= 2\n        if s[start] == s[end]:\n            yield (start+1,end-1,remove)\n            res = yield\n            return retdp(t,2+res)\n        ma = -9999999\n        if valid(s[start]):\n            yield (start+1,end,s[start])\n            res = yield\n            ma = max(res,ma)\n        if valid(s[end]):\n            yield (start,end-1,s[end])\n            res = yield\n            ma = max(res,ma)\n        return ma\n    stack = [do_dp(0,len(s)-1,None)]\n    while not isinstance(stack[0],int):\n        coret = stack.pop()\n        if isinstance(coret, int):\n            real_coret = stack.pop()\n            next(real_coret)\n            try:\n                stack.append(real_coret)\n                stack.append(do_dp(*real_coret.send(coret)))\n            except StopIteration as e:\n                stack.pop()\n                stack.append(e.value)\n        else:\n            try:\n                to_do = next(coret)\n                stack.append(coret)\n                stack.append(do_dp(*to_do))\n            except StopIteration as e:\n                stack.append(e.value)\n    return stack[0]\nfor t in range(int(input())):\n    n = int(input()) # 1 <= n <= 10**5\n    s = input().strip()\n    length = longestPalindrome(s)\n    if length < 1: print(-1)\n    else: print(n-length)\n",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    n=int(input())\n    s=input()\n    i=0\n    j=n-1\n    ans=0\n    flag=0\n    ans1=0\n    while(i<j):\n        if(flag==1):\n            break\n        elif(s[i]!=s[j]):\n            ans=1\n            ans1=10000000000000\n            p=s[i]\n            q=s[j]\n            c1=0\n            c2=0\n            x=i+1\n            y=j\n            while(x<y):\n                if(s[x]==s[y]):\n                    x+=1\n                    y-=1\n                elif(s[x]!=s[y] and s[x]!=p and s[y]!=p):\n                    c1=-1\n                    break\n                else:\n                    ans+=1\n                    if(s[x]==p):\n                        x+=1\n                    else:\n                        y-=1\n            if(c1!=-1):\n                ans1=ans\n            x=i\n            y=j-1\n            ans=1\n            while(x<y):\n                if(s[x]==s[y]):\n                    x+=1\n                    y-=1\n                elif(s[x]!=s[y] and s[x]!=q and s[y]!=q):\n                    c2=-1\n                    break\n                else:\n                    ans+=1\n                    if(s[x]==q):\n                        x+=1\n                    else:\n                        y-=1\n            if(c1==-1 and c2==-1):\n                flag=1\n            if(c2!=-1):\n                ans1=min(ans1,ans)\n            break\n        i+=1\n        j-=1\n    if(flag):\n        print(-1)\n    else:\n        print(ans1)\n",
                true
            ],
            [
                "def isOno(s,a):\n  s1=[i for i in s if i!=a]\n  d=len(s1)\n  for i in range(d//2):\n    if s1[i]!=s1[d-1-i]:\n         return False\n  return True\n\ndef count(s,a):\n  c=0\n  b=0\n  e=len(s)-1\n  while b!=e and b<e:\n    #print(b,e)\n    if s[b]==s[e]:\n      b=b+1\n      e=e-1\n    else:\n      if s[b]==a:\n        b=b+1\n      else:\n        e=e-1\n      c=c+1      \n  return c\n\nt=int(input())\nfor i in range(t):\n  n=int(input())\n  st=input()\n  checked=[]\n  ono=[]\n  res=[]\n  for i in st:\n      if i not in checked:\n        checked.append(i)\n  for i in checked:\n      if isOno(st,i):\n        ono.append(i)\n        res.append(count(st,i))\n  if res==[]:\n     print(-1)\n  else:    \n     print(min(res))       ",
                true
            ],
            [
                "from sys import stdin\nfrom typing import Deque; read = stdin.readline\n\nfor _ in range(int(read())):\n    n = int(read())\n\n    s = Deque(read()); s.pop()\n    # l = Deque([]); r = Deque([])\n    i = 0; j = n-1\n    while i<j:\n        if s[i] != s[j]:\n            break\n        else:\n            # l.append(s[i]); r.appendleft(s[j])\n            i+=1; j-=1\n    \n    if i>j or i==j:\n        print(0); continue\n    \n    l = i; r = j\n    # For i\n    ans1 = 0\n    main = s[i]\n    while i<j:\n        if s[i] != s[j] and s[i] == main:\n            i+=1; ans1 += 1\n        elif s[i] != s[j] and s[j] == main:\n            j-=1; ans1 += 1\n        elif s[i] == s[j]:\n            i+=1; j-=1\n        elif s[i] != s[j] and s[i] != main:\n            ans1 = 10**30\n            break\n        # print(s[i],s[j])\n\n    # For j\n    i = l; j = r\n    ans2 = 0\n    main = s[j]\n    while i<j:\n        if s[i] != s[j] and s[i] == main:\n            i+=1; ans2 += 1\n        elif s[i] != s[j] and s[j] == main:\n            j-=1; ans2 += 1\n        elif s[i] == s[j]:\n            i+=1; j-=1\n        elif s[i] != s[j] and s[i] != main:\n            ans2 = 10**30\n            break\n    \n    print(-1) if min(ans1, ans2) == 10**30 else print(min(ans1, ans2))\n",
                true
            ],
            [
                "for tc in range(int(input())):\n    n = int(input())\n    s = input()\n    candidate = \"abcdefghijklmnopqrstuvwxyz\"\n    score = 10**6\n    for c in candidate:\n        isPalin = True\n        erase = 0\n        lptr = 0\n        rptr = n-1\n        while lptr<rptr:\n            left = s[lptr]\n            right = s[rptr]\n            if left !=right:\n                if left != c and right != c:\n                    isPalin = False\n                    break\n                erase +=1\n                if left == c: lptr +=1\n                else: rptr -=1\n            else: \n                lptr +=1\n                rptr -=1\n        \n        if isPalin : score = min(score, erase)\n    \n    if score == 10**6 : print(-1)\n    else : print(score)\n        ",
                true
            ],
            [
                "from math import factorial\n\nfor _ in range(int(input())):\n    size = int(input())\n    st = str(input())\n    arr = []\n    ans = 0\n    ans0 = 0\n    ans1 = 0\n    for ind in range(size):\n        arr.append(st[ind])\n    for ind in range(size // 2):\n        if arr[ind] != arr[size - ind - 1]:\n            ctk0 = arr[ind]\n            ctk1 = arr[size - ind - 1]\n            ind0 = ind\n            ind1 = size - ind - 1\n            while ind0 <= ind1:\n                if ans0 == int(1E18):\n                    break\n                if arr[ind0] != arr[ind1]:\n                    if arr[ind0] == ctk0:\n                        ans0 += 1\n                        ind0 += 1\n                    elif arr[ind1] == ctk0:\n                        ans0 += 1\n                        ind1 -= 1\n                    else:\n                        ans0 = int(1E18)\n\n                else:\n                    ind0 += 1\n                    ind1 -= 1\n            ind0 = ind\n            ind1 = size - ind - 1\n            while ind0 <= ind1:\n                if ans1 == int(1E18):\n                    break\n                if arr[ind0] != arr[ind1]:\n                    if arr[ind0] == ctk1:\n                        ans1 += 1\n                        ind0 += 1\n                    elif arr[ind1] == ctk1:\n                        ans1 += 1\n                        ind1 -= 1\n                    else:\n                        ans1 = int(1E18)\n\n                else:\n                    ind0 += 1\n                    ind1 -= 1\n\n            break\n    ans = min(ans1,ans0)\n    if ans == int(1E18):\n        print(-1)\n    else:\n        print(ans)\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    s = input()\n    left=0\n    right=n-1\n    ch=None\n    ch2=None\n\n    while(left<right):\n        if s[left]==s[right]:\n            left+=1\n            right-=1\n        else:\n            ch=s[left]\n            ch2=s[right]\n            break\n    if ch==None and ch2==None:\n        print(0)\n        continue\n    else:\n        count=1\n        l2=left+1\n        r2=right\n        p1=True\n        while(l2<r2):#for ch\n            if s[l2]==s[r2]:\n                l2+=1\n                r2-=1\n            else:\n                if s[l2]==ch:\n                    l2+=1\n                    count+=1\n                elif s[r2]==ch:\n                    r2-=1\n                    count+=1\n\n                else:\n                    p1=False\n                    break\n        count2=1\n        r2=right-1\n        l2=left\n        p2=True\n        while (l2 < r2):  # for ch\n            if s[l2] == s[r2]:\n                l2 += 1\n                r2 -= 1\n            else:\n                if s[l2] == ch2:\n                    l2 += 1\n                    count2 += 1\n                elif s[r2] == ch2:\n                    r2 -= 1\n                    count2 += 1\n\n                else:\n                    p2 = False\n                    break\n\n        if p1 and p2:\n            print(min(count,count2))\n        elif p1:\n            print(count)\n        elif p2:\n            print(count2)\n        else:\n            print(-1)\n\n",
                true
            ],
            [
                "\nfrom sys import stdin\n# input=stdin.buffer.readline\ninput=lambda : stdin.readline().strip()\nlin=lambda :list(map(int,input().split()))\niin=lambda :int(input())\nmain=lambda :map(int,input().split())\nfrom math import ceil,sqrt,factorial,log\nfrom collections import deque\nfrom bisect import bisect_left\nmod=998244353\nmod=1000000007\ndef solve1(c,s):\n    i=0\n    j=len(s)-1\n    ans=0\n    while i<j:\n        if(s[i]==s[j]):\n            i+=1\n            j-=1\n        else:\n            if(s[i]==c):\n                ans+=1\n                i+=1\n            elif(s[j]==c):\n                ans+=1\n                j-=1\n            else:\n                return -1\n    return ans;\n\n\ndef solve(we):\n    n=iin()\n    s=input()\n    z=[]\n    for i in range(n//2):\n        if(s[i]!=s[n-i-1]):\n            x=solve1(s[i],s[i+1:n-i])\n            y=solve1(s[n-i-1],s[i:n-i-1])\n            if(x==y and x==-1):\n                print(-1)\n                return\n            else:\n                if(x==-1):\n                    print(y+1)\n                elif(y==-1):\n                    print(x+1)\n                else:\n                    print(min(x,y)+1)\n                return\n    print(0)\n\n\n    \n\nqwe=1\nqwe=iin()\nfor _ in range(qwe):\n    solve(_+1)",
                true
            ],
            [
                "t = int(input())\n\nalpha = [chr(i) for i in range(ord('a'), ord('z')+1)]\n\ndef is_palind(str_a, word):\n    clean = str_a.replace(word, \"\")\n    center_elem = len(clean) // 2\n    return clean == clean[::-1]\n    \ndef find_min_words(palin, word):\n    ind_r = 0\n    ind_l = len(palin) - 1\n    count = 0\n    while ind_r < ind_l:\n        if palin[ind_r] == palin[ind_l]:\n            ind_r += 1\n            ind_l -= 1\n        else:\n            count += 1\n            if palin[ind_r] == word:\n                ind_r += 1\n            else:\n                ind_l -= 1\n    return count\n    \nfor t_i in range(t):\n    n = int(input())\n    \n    s = input()\n    \n    count_word = 1e9\n    for word in alpha:\n        if is_palind(s, word) == False:\n            continue    \n        else:\n            count_word = min(count_word, find_min_words(s, word))\n    if count_word == 1e9:\n        print(-1)\n    else:\n        print(count_word)",
                true
            ],
            [
                "from sys import stdin,stdout\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    ss = []\n    ans = 10000000000000000\n    for i in range(n):\n        if s[i] not in ss:\n            ss.append(s[i])\n            l = 0\n            r = n-1\n            num = 0\n            while l<r:\n                if s[l]==s[r]:\n                    l+=1\n                    r-=1\n                    continue\n                if s[l]==s[i] or s[r]==s[i]:\n                    num+=1\n                    if s[l]==s[i]:\n                        l+=1\n                    else:\n                        r-=1\n                else:\n                    num = 10000000000000000\n                    break\n            ans = min(ans,num)\n    if ans==10000000000000000:\n        stdout.write(str(-1)+\"\\n\")\n    else:\n        stdout.write(str(ans)+\"\\n\")\n",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby, accumulate\nfrom copy import deepcopy\nMOD = 10**9+7\nINF = float('inf')\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = rs()\n    i, j = 0, n - 1\n    while i < j and s[i] == s[j]:\n        i, j = i + 1, j - 1\n\n    if i >= j:\n        print(0)\n        continue\n\n    x, y = i, j\n    flag = True\n    count = 0\n    D = set()\n    while i < j:\n        if s[i] == s[j]:\n            i, j = i + 1, j - 1\n            continue\n        else:\n            count += 1\n            if not D:\n                D.add(s[i])\n                i += 1\n                continue\n            elif s[i] in D:\n                i += 1\n                continue\n            elif s[j] in D:\n                j -= 1\n                continue\n            else:\n                flag = False\n                break\n\n        i += 1\n        j -= 1\n\n    res = count if flag else -1\n\n    i, j = x, y\n    flag = True\n    count = 0\n    D = set()\n    while i < j:\n        if s[i] == s[j]:\n            i, j = i + 1, j -1\n            continue\n        else:\n            count += 1\n            if not D:\n                D.add(s[j])\n                j -= 1\n                continue\n            elif s[i] in D:\n                i += 1\n                continue\n            elif s[j] in D:\n                j -= 1\n                continue\n            else:\n                flag= False\n                break\n\n        i += 1\n        j -= 1\n\n    if res == -1 and flag:\n        print(count)\n    elif res != -1 and not flag:\n        print(res)\n    else:\n        print(min(res, count))",
                true
            ],
            [
                "import math\n\n\ndef remove(s, c, i, j):\n    count = 0\n    while 0 <= i < j < len(s):\n        if s[i] != s[j]:\n            if s[i] == c:\n                count += 1\n                i += 1\n            elif s[j] == c:\n                count += 1\n                j -= 1\n            else:\n                return -1\n        else:\n            i += 1\n            j -= 1\n    return count\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n\n    for i in range(n):\n        if i >= math.floor(n / 2):\n            print(0)\n            break\n        if s[i] != s[n - i - 1]:\n            r1 = remove(s, s[i], i, n - i - 1)\n            rn = remove(s, s[n - i - 1], i, n - i - 1)\n            if r1 == -1 or rn == -1:\n                print((r1 + rn + 1))\n            else:\n                print(min(r1, rn))\n            break\n",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\ndef func(nn,ss,char):\n    #checking if removing all makes palind\n    val=0\n    string=s.replace(char, \"\")\n    if string.split()==string[::-1].split():\n        i=0\n        j=nn-1\n        while i<=j:\n            if ss[i]==char:\n                if ss[i]!=ss[j]:\n                    i+=1\n                    val+=1\n                else:\n                    i+=1\n                    j-=1\n            elif ss[j]==char:\n                if ss[j]!=ss[i]:\n                    j-=1\n                    val+=1\n            else:\n                i+=1\n                j-=1\n        # print(val)\n        return val\n    return 1e18\nfor _ in range(int(input())):\n    n=int(input())\n    s=str(input())\n    char=set(s)\n    ans=1e18\n    for i in char:\n        ans=min(ans,func(n,s,i))\n    if ans==1e18:\n        print(-1)\n    else:\n        print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    l = [i for i in s]\n    if(s==s[::-1]):\n        print(0)\n        continue\n    pt = list(set(l))\n    ans = n+1\n    for k in range(len(pt)):\n        i, j, tp, f = 0, n-1, 0, 0\n        while(i<j):\n            if(s[i]==s[j]):\n                i+=1\n                j-=1\n            else:\n                if(s[i]==pt[k]):\n                    tp+=1\n                    i+=1\n                elif(s[j]==pt[k]):\n                    tp+=1\n                    j-=1\n                else:\n                    f = 1\n                    break\n        if(f==0):\n            ans = min(ans, tp)\n    if(ans==(n+1)):\n        print(-1)\n    else:\n        print(ans)",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nmod = 1000000007\n\ndef my_main():\n    kase = inp()\n    pans = []\n    for _ in range(kase):\n        n = inp()\n        st = inst()\n        ans = n+1\n        for i in range(26):\n            er = chr(i+ord('a'))\n            l, r = 0, n-1\n            now = 0\n            ok = 1\n            while l<r:\n                if st[l]==st[r]:\n                    l+=1\n                    r-=1\n                    continue\n                if st[l]==er:\n                    l+=1\n                    now += 1\n                elif st[r]==er:\n                    r-=1\n                    now += 1\n                else:\n                    ok = 0\n                    break\n            if ok:\n                ans = min(ans, now)\n        if ans==n+1:\n            pans.append(str(-1))\n        else:\n            pans.append(str(ans))\n\n\n    print('\\n'.join(pans))\n\n\n    # print '\\n'.join(pans)\n\nmy_main()\n\n",
                true
            ],
            [
                "from string import ascii_lowercase\ncases = int(input())\nfor _ in range(cases):\n    num = int(input())\n    s = input()\n    if s == s[::-1]:\n        print(0)\n        continue\n    pal = False\n    ans = 10**10\n    for char in ascii_lowercase:\n        new_s = s.replace(char, \"\")\n        if new_s == new_s[::-1]:\n            pal = True\n            rem_num = 0\n            left = 0\n            right = num-1\n            while left < right:\n                if s[left] != s[right]:\n                    if s[left] == char:\n                        left += 1\n                    else:\n                        right -= 1\n                    rem_num += 1\n                else:\n                    right -= 1\n                    left += 1\n            ans = min(ans, rem_num)\n\n    if not pal:\n        print(-1)\n    else:\n        print(ans)",
                true
            ],
            [
                "testcase=int(input())\n\nfor test in range(0,testcase):\n    n=int(input())\n    a=input()\n\n    if len(a)==1:\n        print(0)\n    else:\n        i=0\n        j=n-1\n\n        stop=False\n        while a[i]==a[j] and stop==False:\n            i+=1\n            j-=1\n            if i>=j:\n                print(0)\n                stop=True\n\n\n        if stop==False:\n\n            temp1=a[i]\n            temp2=a[j]\n            i=0\n            j=n-1\n            count1=0\n            stop1=False\n            while i<j and stop1==False:\n                if a[i]==a[j]:\n                    i+=1\n                    j-=1\n                else:\n                    if a[i]!=temp1 and a[j]!=temp1:\n                        stop1=True\n                        count1=10**9                \n                    if a[i]==temp1:\n                        i+=1\n                        count1+=1\n                    if a[j]==temp1:\n                        j-=1\n                        count1+=1\n\n\n            i=0\n            j=n-1\n            count2=0\n            stop2=False\n            while i<j and stop2==False:\n                if a[i]==a[j]:\n                    i+=1\n                    j-=1\n                else:\n                    if a[i]!=temp2 and a[j]!=temp2:\n                        stop2=True\n                        count2=10**9\n                    if a[i]==temp2:\n                        i+=1\n                        count2+=1\n                    if a[j]==temp2:\n                        j-=1\n                        count2+=1\n\n            \n            if stop1==True and stop2==True:\n                print(-1)\n            else:\n                print(min(count1,count2))\n        \n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nIn Berland, n different types of banknotes are used. Banknotes of the i-th type have denomination 10^{a_i} burles (burles are the currency used in Berland); the denomination of banknotes of the first type is exactly 1.\n\nLet's denote f(s) as the minimum number of banknotes required to represent exactly s burles. For example, if the denominations of banknotes used in Berland are 1, 10 and 100, then f(59) = 14: 9 banknotes with denomination of 1 burle and 5 banknotes with denomination of 10 burles can be used to represent exactly 9 \u22c5 1 + 5 \u22c5 10 = 59 burles, and there's no way to do it with fewer banknotes.\n\nFor a given integer k, find the minimum positive number of burles s that cannot be represented with k or fewer banknotes (that is, f(s) > k).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 10; 1 \u2264 k \u2264 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (0 = a_1 < a_2 < ... < a_n \u2264 9).\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum positive number of burles s that cannot be represented with k or fewer banknotes.\n\nExample\n\nInput\n\n\n4\n3 13\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n\n59\n778\n148999\n999999920999999999\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for _ in range(int(input())):\n    n,k = list(map(int,input().split(\" \")))\n    ls = list(map(int,input().split(\" \")))\n    p10s = [10**i for i in ls]\n    ans = 0\n    used = 0\n    kk = k\n    last = 1\n    for i,j in zip(p10s,p10s[1:]):\n        if kk*i == j-1:\n            ans += j + (kk-1)*i\n            kk = 0\n            break\n        if kk*i >= j:\n            ans += (j-1)-(i-1) - (1 if i==1 else 0)\n            used += (j//i)-1 - (1 if i==1 else 0)\n            kk = k-used\n            last = j\n        else:\n            ans += kk*i\n            kk = 0\n            break\n    if kk>0:\n        ans += kk*last\n    print(ans+1)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = ''\n    k += 1\n    for i in range(1, n):\n        if k >= 10 ** (a[i] - a[i - 1]) - 1:\n            k -= 10 ** (a[i] - a[i - 1]) - 1\n            res = '9' * (a[i] - a[i - 1]) + res\n        else:\n            res = str(k) + res\n            k = 0\n        if k == 0:\n            break\n    if k > 0:\n        res = str(k) + res\n    print(res)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = [int(x) for x in input().split()]\n    pw = [int(x) for x in input().split()]\n    val = [10**(pw[i+1]-pw[i])-1 for i in range(len(pw)-1)]\n    s, ii = 0, 0\n    for i in range(len(val)):\n        if k>=val[i]:\n            k-=val[i]\n            s+=val[i]*(10**(pw[i]))\n            ii = i+1\n        else: break    \n\n         \n    s+=(10**(pw[ii]))*(k+1)\n           \n    print(s)",
                true
            ],
            [
                "import sys\n#sys.setrecursionlimit(20000)\n#from collections import deque #Counter\n#from itertools import accumulate\n#from functools import product\n#import math\n\n\ndef rall():\n    return sys.stdin.readlines()\ndef rl():\n    return sys.stdin.readline().strip()\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr( something='' ):\n    sys.stdout.write( str(something) + '\\n')\ndef pra( array ):\n    sys.stdout.write( ' '.join([str(x) for x in array]) + '\\n')\n\n\ndef solve(array):\n    return array\n\n\nif __name__ == '__main__':\n\n    NT = int( rl() )\n    #a,b = map(int,rl().split(' '))\n\n    for ti in range(NT):\n        n,k = map(int, rl().split(' '))\n        notes = list(map(int, rl().split(' ')))\n        kover = k+1\n        max_per_note = [0]*len(notes)\n        #max_per_note[0] = 9\n\n        #set_notes = set(notes)\n        for i in range(len(notes)-1):\n            max_per_note[i] = int('9'*(notes[i+1]-notes[i]))\n        #print(notes,max_per_note)\n\n        tot = 0\n        for i in range(len(notes)-1):\n            note_val = 10**notes[i]\n            tot += note_val*min(kover,max_per_note[i])\n            kover = max(0,kover-max_per_note[i])\n            if kover == 0:\n                break\n        if kover > 0:\n            note_val = 10**notes[-1]\n            tot += note_val*kover\n\n        pr(tot)\n\n",
                true
            ],
            [
                "import sys,math\ninput=sys.stdin.readline\nINF=int(1e9)+7\n\ndef solve():\n    n,k=map(int,input().split())\n    data=list(map(int,input().split()))\n    cur=0\n    ans=0\n    for i in range(n-1):\n        now=10**(data[i+1]-data[i])-1\n        if cur+now<=k:\n            ans+=10**data[i]*now\n            cur+=now\n        else:\n            ans+=10**data[i]*(k+1-cur)\n            cur=k+1\n            break\n    if cur==k+1:\n        print(ans)\n        return\n    else:\n        print(ans+(k+1-cur)*(10**data[-1]))\n\nt=int(input())\nwhile t:\n    t-=1\n    solve()\n",
                true
            ],
            [
                "from collections import deque\n\n\ndef f(s, a):\n    ans = 0\n    a = sorted(a, reverse=True)\n    q = deque(a)\n    while s:\n        bill = q.popleft()\n        while bill > s:\n            bill = q.popleft()\n        ans += s // bill\n        s %= bill\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [10**i for i in a]\n    goal = k + 1\n    i = 0\n    bill = b[i]\n    test = 0\n    notes = f(test, b)\n    while notes < goal:\n        rem = goal - notes\n        if i == n - 1:\n            test += rem * bill\n            notes = f(test, b)\n        else:\n            i += 1\n            bill = b[i]\n            test += min(rem, bill // b[i - 1] - 1) * b[i - 1]\n            notes = f(test, b)\n    print(test)",
                true
            ],
            [
                "t = int(input())\n\nwhile(t):\n    t -= 1\n    n, k = [int(x) for x in input().split()]\n    burls = [int(x) for x in input().split()]\n    cnt = 0\n    ans = ''\n    for i in range(1, len(burls)):\n        temp_diff = burls[i] - burls[i - 1]\n        cnt += 10 ** (temp_diff) - 1\n        if(cnt > k):\n            cnt -= 10 ** (temp_diff) - 1\n            break\n        ans = '9' * (temp_diff) + ans\n    ans = str(k - cnt + 1) + ans\n    print(ans)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,k=[int(i)for i in input().split()]\n    l=[int(i)for i in input().split()]\n    ans=\"\"\n    last=k\n    for i in range(n-1):\n        if last>=10**(l[i+1]-l[i])-1:\n            ans=\"9\"*(l[i+1]-l[i])+ans\n            last-=int('9'*(l[i+1]-l[i]))\n        else:\n            break\n    print(str(last+1)+ans)",
                true
            ],
            [
                "import sys\n#import random\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\nmod = 10**9 + 7\nmod1 = 998244353\n\nfor _ in range (ii()) :\n    n,k = il()\n    a = il()\n\n    if (n == 1) :\n        print((k+1)*(10**a[0]))\n\n        continue\n    k += 1\n\n    ans = 0\n    \n    for i in range (n-1) :\n        t = 10**(a[i+1] - a[i]) - 1\n\n        x = min(t,k)\n\n        k -= x\n\n        ans += (10**a[i])*x\n\n        if (k == 0) :\n            break\n\n    if (k > 0) :\n        ans += k * (10**(a[n-1]))\n\n    print(ans)\n\n        \n        \n\n        \n\n    \n\n    \n",
                true
            ],
            [
                "from sys import stdin\ninput=stdin.readline\nrn=lambda:int(input())\nrns=lambda:map(int,input().split())\nrl=lambda:list(map(int,input().split()))\nrs=lambda:input().strip()\nYN=lambda x:print('YES') if x else print('NO')\nmod=10**9+7\n\nfor _ in range(rn()):\n    n,k=rns()\n    a=rl()\n    b=[]\n    for i in range(n-1):\n        b.append(10**(a[i+1]-a[i])-1)\n    ans=0\n    while len(b)>0 and k>=b[0]:\n        ans+=b[0]*10**a[0]\n        k-=b.pop(0)\n        a.pop(0)\n\n    if k>=0:\n        if len(b)==0:\n            last=a.pop(0)\n            ans+=(k+1)*10**last\n        else:\n            ans+=(k+1)*10**a.pop(0)\n    print(ans)",
                true
            ],
            [
                "for fghn in range(int(input())):\n    # n=int(input())\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    note=0\n    value=0\n    for i in range(1,n):\n        # note+a[i]/a[i-1]-1\n        # value+=(a[i]/a[i-1]-1)*(10**a[i])\n        if(note+(10**a[i])/(10**a[i-1])-1>k):\n            print(int(value)+int((k-note+1)*10**a[i-1]))\n            break\n        note+=(10**a[i])/(10**a[i-1])-1\n        value+=((10**a[i])/(10**a[i-1])-1)*(10**a[i-1])\n    else:\n        # print(\"here\",)\n        print(int(value)+int(k-note+1)*(10**a[-1]))",
                true
            ],
            [
                "import math\nt = int(input())\n\ndef solve():\n  n, k = map(int, input().split())\n  arr = list(map(int, input().split()))\n  if n == 1:\n    print(k+1)\n    return\n  x = k\n  f = False\n  for i in range(1, len(arr)):\n    v = 10**(arr[i]-arr[i-1])-1\n    if v <= x:\n      x -= v\n    else:\n      f = True\n      break\n  if f:\n    ans = (x+1)*10**arr[i-1]+(10**arr[i-1]-1)\n  else:\n    ans = str(x+1)+str(10**arr[i]-1)\n  print(ans)    \n    \nfor _ in range(t):\n  solve()\n  \n\n\n\n",
                true
            ],
            [
                "\"\"\"\nAccomplished using the EduTools plugin by JetBrains https://plugins.jetbrains.com/plugin/10081-edutools\n\nTo modify the template, go to Preferences -> Editor -> File and Code Templates -> Other\n\"\"\"\n\n\ndef count(n, a, k):\n    ans = [0] * n\n    for i in range(n - 1):\n        max_fill = 10 ** (a[i + 1] - a[i]) - 1\n        if k < max_fill:\n            ans[i] = k + 1\n            return ans\n        ans[i] += max_fill\n        k -= max_fill\n    ans[n-1] = k + 1\n    return ans\n\n\ndef solve(n, a, k):\n    c = count(n, a, k)\n    return sum(10 ** a[i] * c[i] for i in range(n))\n\n\ndef main():\n    tests = int(input())\n    ans = [None] * tests\n    for t in range(tests):\n        n, k = map(int, input().split())\n        a = [*map(int, input().split())]\n        ans[t] = solve(n, a, k)\n    print(*ans, sep='\\n')\n\n\nif __name__ == \"__main__\":\n    main()\n",
                true
            ],
            [
                "def getint():\n    return [int(i) for i in input().split()]\ndef get():\n    return int(input())\ndef getstr():\n    return [i for i in input().split()]\ndef S():\n    for test in range(int(input())):\n        solve()\nimport math\nimport itertools as it\nimport bisect\nimport time\nimport collections as ct\n\ndef solve():\n    n,k=getint()\n    ans=0\n    a=getint()\n    b=[]\n    for i in a:\n        b.append(10**i)\n    t=0\n    for i in range(n-1):\n        l=(b[i+1]-b[i])//b[i]\n        if t+l>k+1:\n            ans+=b[i]*(k+1-t)\n            t=k+1\n        else:\n            t+=l\n            ans+=b[i]*l\n\n    print(ans+b[n-1]*(k+1-t))\nS()",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()))\n    notes = [10**x for x in a]\n    s=0\n    save=0\n    last=False\n    for i in range(len(a)):\n        if(i==len(a)-1):\n            temp=k\n            last=True\n        else:\n            temp = min(k,notes[i+1]//notes[i]-1)\n        s+=temp*notes[i]\n        k-=temp\n        save=i\n        if(k==0):\n            break\n    if(last):\n        print(s+notes[-1])\n        continue\n    if(temp<notes[save+1]//notes[save]-1):\n        s+=notes[save]\n    else:\n        s+=notes[save+1]\n    print(s)\n        \n        \n",
                true
            ],
            [
                "#1606C\n\nt=int(input())\nfor test in range(0,t):\n    n,k=map(int,input().strip().split())\n    req=k+1\n    target=0\n    alpha=list(map(int,input().strip().split()))\n    mdp=[]\n    for i in range(0,n-1):\n        y=alpha[i+1]-alpha[i]\n        mdp.append(10**y-1)\n    mdp.append(10**10)\n\n    start=0\n    while req>0:\n        temp_req=req\n        dnom=10**alpha[start]\n        req=temp_req-min(req,mdp[start])\n        target+=min(temp_req,mdp[start])*(dnom)\n        start+=1\n    print(target)\n",
                true
            ],
            [
                "for u in range(int(input())):\n    n, k = map(int, input().split())\n    x = [int(w) for w in input().split()]\n    \n    ans = 0\n    k += 1\n    \n    for i in range(n-1):\n        if(k > 0):\n            temp = 10**(x[i+1]-x[i]) - 1\n            ans += (10**x[i])*min(temp, k)\n            k -= min(temp, k)\n            \n    ans += k*(10**x[n-1])\n    print(ans)",
                true
            ],
            [
                "for t in range(int(input())):\n    n, k = map(int,input().split())\n    arr = list(map(int,input().split()))\n    arr.sort()\n    num = [10**arr[i] for i in range(n)]\n    if arr[0] !=0:\n        print(1)\n        continue\n    s = ''\n    maxd = []\n    for i in range(n-1):\n        dd = arr[i+1]-arr[i]\n        el = '9'*dd\n        maxd += [int(el)]\n    # print(maxd)\n    # print(arr)\n\n    money = 0\n    for i in range(len(maxd)):\n        if maxd[i] >k:\n            diff = k + 1\n            money += (diff*(10**arr[i]))\n            k = -1\n            break\n        else:\n            money += maxd[i]*(10**arr[i])\n            k-= maxd[i]\n\n    if k >= 0:\n        k += 1\n        money += k*(10**arr[-1])\n    print(money)\n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n, k = [int(x) for x in input().split()]\n    az = [int(x) for x in input().split()]\n\n    # for each note compute the maximum number that can be used\n    # e.g. you have notes 1 and 10 (a_i = 0, 1) then\n    # you can only can have 9 1s since if you take 10\n    # you can just use 1 10-note.\n\n    max_n = []\n    for i in range(len(az)-1):\n        max_n.append( 10 ** (az[i+1] - az[i]) -1 )\n    \n    res = 0\n    for i in range(len(az)-1):\n        # since we need a number that is comprised of k+1 digits\n        # we try to take k+1 notes\n        l = min(k+1, max_n[i])\n        k -= l\n        res += l * (10**az[i])\n\n        if k == -1:\n            break\n    \n    if k >= 0:\n        res += (k+1) * (10**az[-1])\n\n    print(res)\n",
                true
            ],
            [
                "def solve():\n    n, k = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    goal = k + 1\n    out = ''\n\n    for i in range(n):\n        if i == n - 1:\n            av = 10 ** 15\n        else:\n            av = (10 ** (a[i + 1] - a[i])) - 1\n\n        if av >= goal:\n            out = str(goal) + out\n            print(out)\n            return\n        else:\n            out = str(av) + out\n            goal -= av\n\n    print(goal)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()",
                true
            ],
            [
                "\"\"\"\n4\n3 13\n0 1 2\n\n59\n\n2 777\n0 4\n\n778\n\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\"\"\"\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split(\" \"))\n    a = list(map(int, input().split(\" \")))\n    s = 0\n    number = 0\n    k += 1\n    for p in range(n - 1):\n        t = 10 ** (a[p + 1] - a[p]) - 1\n        if t < k:\n            k -= t\n            number += t * (10 ** a[p])\n        else:\n            number += k * (10 ** a[p])\n            k = 0\n            break\n\n    if k:\n        number += (10 ** a[-1]) * k\n\n    print(number)",
                true
            ],
            [
                "from collections import defaultdict, deque, Counter\nfrom heapq import heapify, heappop, heappush\nimport math\nfrom copy import deepcopy\nfrom itertools import combinations, permutations, product, combinations_with_replacement\nfrom bisect import bisect_left, bisect_right\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\ndef getN():\n    return int(input())\ndef getNM():\n    return map(int, input().split())\ndef getList():\n    return list(map(int, input().split()))\ndef getListGraph():\n    return list(map(lambda x:int(x) - 1, input().split()))\ndef getArray(intn):\n    return [int(input()) for i in range(intn)]\n\nmod = 10 ** 9 + 7\nMOD = 998244353\n# sys.setrecursionlimit(1000000000)\ninf = float('inf')\neps = 10 ** (-10)\ndy = [0, 1, 0, -1]\ndx = [1, 0, -1, 0]\n\n#############\n# Main Code #\n#############\n\nT = getN()\nfor _ in range(T):\n    N, K = getNM()\n    A = [10 ** a for a in getList()]\n    A.append(10 ** 18)\n    for i in range(N):\n        # \u6700\u5927\u679a\u6570\n        lim = A[i + 1] // A[i] - 1\n        if K >= lim:\n            K -= lim\n            continue\n        else:\n            print((K + 2) * A[i] - 1)\n            break",
                true
            ],
            [
                "# Educational Codeforces Round 116 (Rated for Div. 2)\n# C. Banknotes\n\nnumber_tests = int(input(\"\"))\n\nfor test in range(number_tests):\n    list_input = input(\"\").split()\n    number_types = int(list_input[0])\n    amount = int(list_input[1]) + 1\n    list_types = input(\"\").split()\n\n    result = 0\n    count = 0\n\n    for types in range(number_types):\n        if count != 0:\n            actual = 10**int(list_types[count])\n            previous = 10**int(list_types[count-1])\n            diff = int(actual / previous) - 1\n            \n            if diff >= amount and amount > 0:\n                result += amount * previous\n                amount = 0\n            elif amount > diff and amount > 0 and types == number_types - 1: \n                result += diff * previous\n                amount -= diff\n                result += amount * actual\n            elif amount > diff and amount > 0: \n                result += diff * previous\n                amount -= diff\n            \n        count += 1\n    \n    if count == 1:\n        print(amount)\n    else:\n        print(result)",
                true
            ],
            [
                "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = [0 for i in range(n)]\n    for i in range(n - 1):\n        curr = arr[i + 1] - arr[i]\n        for j in range(curr):\n            d[i] = d[i] * 10 + 9\n    s, x = 0, 0\n    for i in range(n - 1):\n        s += d[i]\n        if s > k:\n            s -= d[i]\n            print(k - s + 1, end='')\n            if x > 0:\n                print(x, end='')\n            print()\n            return\n        delta = 1\n        while delta < x:\n            delta *= 10\n        x += d[i] * delta\n    k -= s - 1\n    print(k, end='')\n    if x > 0:\n        print(x, end='')\n    print()\n\n\nfor _ in range(int(input())):\n    solve()\n",
                true
            ],
            [
                "import sys\nimport math\n\n\n\n\n\ntestcase=int(input())\n\nfor test in range(0,testcase):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n\n    slot=k\n    res=0\n    check=False\n    for i in range(0,n-1):\n        \n        limit=(10**(a[i+1]))//(10**(a[i]))-1\n        if slot>=limit:\n            slot-=limit\n            res+=10**a[i]*limit\n        else:\n            res+=10**a[i]*(slot+1)\n            check=True\n            break\n    if check==False:\n        res+=10**a[-1]*(slot+1)\n\n    print(res)\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n   n,k = map(int,input().split())\n   notes = list(map(int,input().split()))\n   money = 0\n   k += 1\n   for i in range(n-1):\n      if k == 0:\n         break\n      bills = ((10**notes[i+1])-(10**notes[i]))//(10**notes[i])\n      if k > bills:\n         money += bills*(10**notes[i])\n         k -=  bills\n      else:\n         money += k*(10**notes[i])\n         k -= k\n   if k > 0:\n      money += k*(10**notes[-1])\n   print(money)",
                true
            ],
            [
                "\n# import sys\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\n\nt=int(input());\nfor _ in range(t):\n    n,k=map(int,input().split());k+=1;\n    a=list(map(int,input().split()));\n    for i in range(len(a)):\n        a[i]=10**a[i];\n    i=s=c=0;\n    while(i<n-1 and c<k):\n        c+=(a[i+1]//a[i]-1);\n        s+=(a[i+1]//a[i]-1)*a[i];\n        i+=1;\n    if(c<k):\n        s+=(k-c)*a[i];\n    else:\n        s-=(c-k)*a[i-1];\n    print(s);",
                true
            ],
            [
                "# Problem: C. Banknotes\n# Contest: Codeforces - Educational Codeforces Round 116 (Rated for Div. 2)\n# URL: https://codeforces.com/contest/1606/problem/C\n# Memory Limit: 256 MB\n# Time Limit: 2000 ms\n# \n# KAPOOR'S\n\nfrom sys import stdin, stdout \n\ndef INI():\n    return int(stdin.readline())\n    \ndef INL():\n    return [int(_) for _ in stdin.readline().split()]\n    \ndef INS():\n    return stdin.readline()\n\ndef MOD():\n    return pow(10,9)+7\n    \ndef OPS(ans):\n    stdout.write(str(ans)+\"\\n\")\n    \ndef OPL(ans):\n    [stdout.write(str(_)+\" \") for _ in ans]\n    stdout.write(\"\\n\")\n\n\n    \nif __name__==\"__main__\":\n    for _ in range(INI()):\n        n,k=INL()\n        X=INL()\n        k+=1\n        \n        ans=0\n        _=0\n        while 0<k and _+1<n:\n            ans+=10**X[_]*(min(10**(X[_+1]-X[_])-1,k))\n            k-=min(10**(X[_+1]-X[_])-1,k)\n            _+=1\n\n        OPS(ans+k*(10**X[n-1]))",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\ninp_vars_int = lambda: map(int, input().split())\ninp_list_int = lambda: list(map(int, input().split()))\n\nimport math\n\nt = int(input())\n\nfor _ in range(t):\n    _, k = inp_vars_int()\n    a = inp_list_int()\n    n = len(a)\n    c = k + 1\n    res = 0\n    a.append(math.inf)\n\n    for i in range(1, len(a)):\n        diff = 10 ** a[i] - 10 ** a[i-1]\n        add = min(c * 10 ** a[i-1], diff)\n        res += add\n        c -= diff // 10 ** a[i-1]\n        if c <=0:\n            break\n    print(res)",
                true
            ],
            [
                "import math\ntest_cases=int(input())\nfor i in range(0,test_cases):\n    n,k=input().split()\n    n=int(n)\n    k=int(k)\n    A=input().split()\n    amount=0\n    count=0\n    for j in range(0,n-1):\n        if(count<=k):\n            diff=k-count+1\n            temp=(int(pow(10,int(A[j+1])))-int(pow(10,int(A[j]))))//int(pow(10,int(A[j])))\n \n            if(diff>=temp):\n                amount=amount+pow(10,int(A[j+1]))-pow(10,int(A[j]))\n                count=count+temp\n                # print(amount)\n            else:\n                amount=amount+diff*pow(10,int(A[j]))\n                count=count+diff\n                # print(amount)\n    diff=k-count+1\n    if(diff>0):\n        amount=amount+diff*pow(10,int(A[n-1]))\n        count=count+diff\n    print(amount)\n\n\n",
                true
            ],
            [
                "def f(s, A):\n    i = len(A)-1\n    answer = 0\n    while s > 0:\n        s2 = s//10**A[i]\n        answer+=s2\n        s-=s2*10**A[i]\n        i-=1\n    return answer\n\ndef process(k, A):\n    answer = float('inf')\n    k+=1\n    i = len(A)-1\n    while True:\n        x1 = f(10**A[i]-1, A[:i])\n        if x1 < k:\n            entry = (k-x1)*10**A[i]+10**A[i]-1\n            return entry\n        i-=1\n    return answer\n            \nt = int(input())\nfor i in range(t):\n    n, k = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    print(process(k, A))",
                true
            ],
            [
                "from sys import stdin\nimport math\ninput = stdin.readline\n\n\n# for _ in range(int(input())):\n#     n, k = map(int, input().split())\n#     denom = list(map(int, input().split()))\n#     if(denom[0] != 0):\n#         print(1)\n#     elif(k < 9 or len(denom) == 1):\n#         print(k + 1)\n#     else:\n#         req, values, done = 0, [], False\n#         for i in range(n - 1):\n#             curr = pow(10, denom[i + 1] - denom[i])\n#             if(req + curr >= k):\n#                 values.append(curr)\n#                 continue\n#             else:\n#                 val = pow(10, denom[i]) * k - req + 1\n#                 for j, v in enumerate(values[-1]):\n#                     val += pow(10, denom[j]) * v\n#                 if(len(values) > 0):\n#                     val += pow(10, denom[len(values) -1]) * (values[-1] - 1)\n#                 done = True\n#                 break\n                \n#         if(not done):\n\n\n\n\n#             req += curr\n\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    d = list(map(int, input().split()))\n    kk = k+1\n    ans = 0\n    for i in range(len(d)-1):\n        s = pow(10,d[i])\n        c = pow(10,d[i+1]-d[i]) - 1\n        ans += min(c,kk) * s\n        kk -= min(c,kk)\n    ans += kk * pow(10,d[-1])\n    print(ans)\n\n\n\n",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools, copy,statistics\ninf = float('inf')\nmod = 10**9+7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\nimport time\nt = I()\nfor _ in range(t):\n    n, k = LI()\n    list1 = LI()\n    m = k+1\n    ans = 0\n    if n == 1:\n        ans = m\n    else:\n        for i in range(n-1):\n            a = m * 10**(list1[i])\n            if a < 10**(list1[i+1]):\n                ans = ans + a\n                break\n            else:\n                ans = ans + (10**(list1[i+1]-list1[i])-1)*(10**list1[i])\n                m = m - (10**(list1[i+1]-list1[i])-1)\n            if i+1 == n-1:\n                ans = ans + m * (10**(list1[i+1]))\n                break\n\n    print(ans)\n    \n    ",
                true
            ],
            [
                "\nt = int(input())\nten = [10**i for i in range(12)]\nfor _ in range(t):\n\n    n,m = map(int,input().split())\n    x = [int(i) for i in input().split()]\n    x.append(11)\n    res = 0\n    suma = 0\n    for i in range(len(x)-1):\n        aux = ten[x[i+1]]//ten[x[i]]-1\n        if res+aux>m:\n            suma+=ten[x[i]]*(m-res+1)\n            res+=aux\n            break\n        suma+=aux*ten[x[i]]\n        res+=aux\n    if res<=m:\n        suma+=ten[x[n-1]]*(m-res+1)\n    print(suma)\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n    number = 0\n    cost = 0\n    i = 0\n    while cost <= k:\n        if(i == len(p) - 1):\n            q = k - cost + 1     \n        else:\n            z = (10 ** p[i + 1]) - (10 ** p[i])\n            z = z // (10 ** p[i])\n            q = min(k - cost + 1, z)\n        number += (10 ** p[i]) * q\n        cost += q  \n        i += 1\n    print(number)",
                true
            ],
            [
                "def power(base, power):\n    result = 1\n    while power > 0:\n        if power % 2 == 0:\n            power = power // 2\n            base = base * base\n        else:\n            power = power - 1\n            result = result * base\n            power = power // 2\n            base = base * base\n\n    return result\n\nans=[]\nn=int(input())\nfor i in range(n):\n    t=list(input().split())\n    n,k=int(t[0]),int(t[1])\n    t=list(input().split())\n    m,fl,p=0,0,0\n    t=[power(10,int(i)) for i in t]\n    for j in range(len(t)-1):\n        x=t[j+1]//t[j]-1\n        p+=x\n        m=m+x*t[j]\n        if p>k:\n            fl=j+1\n            p-=x\n            m-=x*t[j]\n            break\n    if fl==0:\n        m+=(k-p+1)*t[len(t)-1]\n    else:\n        m+=(k-p+1)*t[fl-1]\n    print(m)\n",
                true
            ],
            [
                "import sys\nimport math\n\n\n#def get_ints(): \n#  return map(int, sys.stdin.readline().strip().split())\ndef inpu():\n  return sys.stdin.readline()\n \n#lets = 'abcdefghijklmnopqrstuvwxyz'\n#letts = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n#key = {lets[i]:i for i in range(26)}\n \n#prime  = [1,11,101,1009,10007,100003,1000003,10000019,100000007]\n#prime2 = [2,13,103,1013,10009,100019,1000033,10000169,100000049]\n \n#big = int(1e9 + 7)\n#big = 998244353\n\n#def gcd(a, b):\n#  while b:\n#    a, b = b, a%b\n#  return a\n\n\"\"\"\nprimes = []\n\ndef primes_gen(n):\n  for i in range(2,1+int(n**0.5)):\n    g = True\n    for j in primes:\n      if i % j == 0:\n        g = False\n        break\n    if g:\n      primes.append(i)\n\nprimes_gen(1e9 + 10)\n\"\"\"\n\"\"\"\n \nT = int(input())\n \nfor t in range(T):\n  n = int(input())\n  #a,b = map(int,input().split())\n  a = list(map(int,input().split()))  \n  b = list(map(int,input().split()))  \n  #a = input()\n  #a = list(input())\n  done = False\n \n  for i in range(n):\n    if b[i] > a[0]:\n      ii = i\n      break\n  \n  for i in range(n):\n    if a[i] < b[0]:\n      print(min(ii,i))\n      break\n\n\"\"\"\n\ndef po(n):\n  ij = 1\n  for jj in range(n):\n    ij *= 10\n  return ij\n\nT = int(input())\n\nfor t in range(T):\n  #n = int(input())\n  n,k = map(int,input().split())\n  a = list(map(int,input().split()))  \n  #a = input()\n  #a = list(input())\n  done = False\n\n  k += 1\n  a.sort()\n\n  ca = 0\n  cca = [0]*n\n  for i in range(n-1):\n    if ca + (po(a[i+1]-a[i])-1) >= k:\n      cca[i] = k-ca\n      done = True\n      break\n    else:\n      l = po(a[i+1]-a[i])-1\n      cca[i] = l\n      ca += l\n\n  ans = 0\n  for i in range(n-1,-1,-1):\n    ans += po(a[i])*cca[i]\n  if not done:\n    ans += po(a[-1])*(k-ca)\n  print(ans)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = [0 for i in range(n-1)]\n    for i in range(n-1):\n        m[i] = 10**(a[i+1]-a[i]) - 1\n    #if k < sum(m):\n    ans = 0\n    for i in range(n-1):\n        if k >= m[i]:\n            ans += m[i] * (10**a[i])\n            k -= m[i]\n        else:\n            ans += (k+1) * (10**a[i])\n            k = -1\n            break\n    if k >= 0:\n        ans += (k+1) * (10**a[n-1])\n    print(ans)",
                true
            ],
            [
                "import sys\n\ninp = sys.stdin.readline\n\n\ndef solve():\n    n, k = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    c = [0] * n\n    for i in range(n - 1):\n        c[i] = 10**(a[i + 1] - a[i]) - 1\n    c[n - 1] = 2000000000\n    s = 0\n    r = []\n    #print(c)\n    for i in range(n):\n        if s + c[i] > k:\n            for j in range(i):\n                v = str(c[j])\n                r.append(v + '0'*(len(v) - a[j + 1] - a[j]))\n            r.append(str(k + 1 - s))\n            break\n        s += c[i]\n    r.reverse()\n    print(''.join(r))\n\n\ndef main():\n    for i in range(int(inp())):\n        solve()\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "#     __  __                __    _ __      ______                \n#    / / / /___ ___________/ /_  (_) /_    / ____/___ __________ _\n#   / /_/ / __ `/ ___/ ___/ __ \\/ / __/   / / __/ __ `/ ___/ __ `/\n#  / __  / /_/ / /  (__  ) / / / / /_    / /_/ / /_/ / /  / /_/ / \n# /_/ /_/\\__,_/_/  /____/_/ /_/_/\\__/____\\____/\\__,_/_/   \\__, /  \n#                                  /_____/               /____/   \n\nfrom collections import Counter\nfrom sys import *\nfrom collections import defaultdict as dd\nfrom math import *\n\n# sys.stdin = open('input.txt', 'r')  \n# sys.stdout = open('output.txt', 'w')\n\n#input functions\ndef inp():\n    return int(stdin.readline())\ndef vinp():\n    return map(int,stdin.readline().split())\ndef linp():\n    return list(map(int,stdin.readline().split()))\ndef sinp(n = 1):\n    if n==1:\n        return stdin.readline()\n    elif n==2:\n        return list(stdin.readline())\n    else:\n        return list(stdin.readline().split())\n\n#output function\ndef pr(*x, end = \"\\n\"):\n    print(*x,end = end)\n\n#others\ndef mod(f, val = 1000000007):\n    return f % val\ndef csort(c):\n    sorted(c.items(), key=lambda pair: pair[1], reverse=True)\ndef indc(l,n):\n    c={}\n    for i in range(n):\n        c[l[i]]=c.get(l[i],[])+[i+1]\n    return c\n\nif __name__ ==\"__main__\":\n    cou=inp()\n    for _ in range(cou):\n        n,k=vinp()\n        l = linp()\n        k+=1\n        f = 0\n        for i in range(n):\n            if i==n-1:\n                f+=k*(10**(l[n-1]))\n            else:\n                x=10**(l[i+1]-l[i])-1\n                f+=(10**(l[i]))*min(x,k)\n                k-=min(x,k)\n        pr(f)\n        ",
                true
            ],
            [
                "I=input\nO=int\nfor _ in range(O(I())):\n    n,k=map(O, I().split())\n    w=[10**O(x) for x in I().split()]+[10**18]\n    a,i=0,0\n    k+=1\n    while k>0:l=w[i+1]//w[i]-1;a+=w[i]*min(k, l);k-=l;i+=1\n    print(a)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    A = [int(x) for x in input().split()]\n    x = 0\n    k += 1\n    for i in range(n):\n        if i == n-1:\n            d = k\n        else:\n            d = min(k, 10**(A[i+1]-A[i]) - 1)\n        x += d * 10**A[i]\n        k -= d\n    print(x)",
                true
            ],
            [
                "def solve():\n    n,k=map(int,input().split())\n    k+=1\n    a=list(map(int,input().split()))\n    ans=0\n    for i in range(n-1):\n        p= pow(10,a[i+1]-a[i])-1\n        p=min(k,p)\n        ans+=pow(10,a[i])*p if k>0 else 0\n        k-=p\n        if k==0:\n            break\n\n    ans+=pow(10,a[-1])*k\n    return ans\n            \nfor _ in range(int(input())):\n    print(solve()) \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, m = map(int, input().split())\n    m += 1\n    A = list(map(int, input().split()))\n    A.append(18)\n    ans = ''\n    for i in range(n):\n        if(10 ** (A[i + 1] - A[i]) - 1 >= m):\n            ans = str(m) + ans\n            break\n        else:\n            ans += str(10 ** (A[i + 1] - A[i]) - 1)\n            m -= (10 ** (A[i + 1] - A[i]) - 1)\n    print(ans)",
                true
            ],
            [
                "#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"4\n# 3 13\n# 0 1 2\n# 2 777\n# 0 4\n# 3 255\n# 0 1 3\n# 10 1000000000\n# 0 1 2 3 4 5 6 7 8 9\n\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\ndef solve(N, K, A):\n    ans = 0\n    A += [20]\n    K += 1\n    for i in range(N):\n        if K < 10**(A[i+1]-A[i]):\n            ans += K*(10**A[i])\n            return ans\n        else:\n            v = (10**(A[i+1]-A[i])-1)\n            ans += v*(10**A[i])\n            K -= v\n\n    return ans\n\nT0 = int(input())\nfor _ in range(T0):\n    N, K = map(int, input().split())    \n    A = list(map(int, input().split()))\n    print(solve(N, K, A))",
                true
            ],
            [
                "for test in range(int(input())):\n    n, k = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    denom = []\n    for i in arr:\n        denom.append(10**i)\n    '''\n    100x+10y+z = k\n    x+y+z > k\n    '''\n    ans = []\n    for i in range(n-1):\n        max_val = (denom[i+1]//denom[i])-1\n        if k > max_val:\n            k -= max_val\n            ans.append(max_val*denom[i])\n        elif k == max_val:\n            ans.append(max_val*denom[i])\n            ans.append(denom[i+1])\n            k = 0\n            break\n        else:\n            ans.append(denom[i]*(k+1))\n            k = 0\n            break\n    if k != 0:\n        ans.append((denom[-1]*(k+1)))\n    # print (ans)\n    print (sum(ans))",
                true
            ],
            [
                "for _ in range(int(input())):\n\n    n,k=map(int,input().split())\n\n    a=list(map(int,input().split()))\n\n    a.sort()\n\n    j=0\n    i=1\n    fin=0\n    while j<=k:\n        if i==len(a):\n            fin+=(k-j+1)*pow(10,a[i-1])\n            break\n        p=(pow(10,a[i])-pow(10,a[i-1]))//pow(10,a[i-1])\n\n        if p>(k-j+1):\n            fin+=(k-j+1)*pow(10,a[i-1])\n            break\n        else:\n            fin+=p*pow(10,a[i-1])\n            j+=p\n        i+=1\n    print(fin)\n\n\n",
                true
            ],
            [
                "import sys\nimport os.path\nfrom collections import *\nimport math\nimport bisect\nimport heapq as hq\nfrom fractions import Fraction\nfrom random import randint\n\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\ninput = sys.stdin.readline\n\n##########################################################\n\ndef solve():\n    n, k = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    n += 1\n    k += 1\n    arr.append(20)\n    brr = [0] * n\n    for i in range(n):\n        brr[i] = 10 ** arr[i]\n    res = 0\n    for i in range(n - 1):\n        if brr[i] * k < brr[i + 1]:\n            res += brr[i] * k\n            break\n        k -= (brr[i + 1] - brr[i]) // (10 ** arr[i])\n        # if(i == 0):\n        #     res += brr[i + 1] - 2 * brr[i]\n        #     k += 1\n        # else:\n        res += brr[i + 1] - brr[i]\n        # print(res, k)\n\n    print(res)\n\n\nt = int(input())\nwhile t:\n    t -= 1\n    solve()\n\n##########################################################\n",
                true
            ],
            [
                "for __ in range(int(input())):\n    n, k = map(int, input().split())\n    a = list(map(lambda x: 10**int(x), input().split()))\n    kneed = [0]\n    for i in range(1, n):\n        kneed.append(kneed[-1] + (a[i] - a[i - 1]) // a[i - 1])\n    gt = 0\n    while gt < n and kneed[gt] <= k:\n        gt += 1\n    ans = 0\n    if gt == n:\n        gt -= 1\n        ans += (k - kneed[gt] + 1) * a[-1]\n        k = kneed[gt] - 1\n    ans += a[gt - 1] - 1\n    k -= kneed[gt - 1]\n    ans += (k + 1) * a[gt - 1]\n    print(ans)\n\n",
                true
            ],
            [
                "mod = 1000000007\n\nt = int(input())\n\np = [1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000]\n\nwhile (t):\n\n    n,k = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    \n    a = [p[x] for x in a]\n    k += 1\n\n    ans = 0\n\n    for i in range(n-1):\n        s = a[i+1]//a[i]-1\n        if (k >= s):\n            ans += s * a[i]\n            k -= s\n        else:\n            ans += k * a[i]    \n            k = 0\n            break\n\n    ans += a[-1] * k\n\n    print(ans)\n\n    t -= 1\n        \n    \n    \n        \n        \n    \n    ",
                true
            ],
            [
                "I=input\nO=int\nfor _ in range(O(I())):\n    n,k=map(O, I().split())\n    w=[10**O(x) for x in I().split()]+[10**18]\n    a,i=0,0\n    k+=1\n    while k>0:\n        l=w[i+1]//w[i]-1\n        a+=w[i]*min(k, l)\n        k-=l\n        i+=1\n    print(a)",
                true
            ],
            [
                "\nT = int(input())\n#import random\n#import time\nimport math\nfor _ in range(T):\n  n, k = map(int,input().split())\n  A = list(map(int,input().split())) + [18]\n  \n  k += 1\n  ans = 0\n  for i in range(n):\n    \n    d = min(k, pow(10, A[i+1] - A[i]) - 1)\n    k -= d\n    ans += d * pow(10, A[i])\n    \n    if not k: break\n    \n  print(ans)",
                true
            ],
            [
                "#!/usr/bin/env python3\n\nimport sys\n\ninput = iter(sys.stdin.read().splitlines()).__next__\n\ndef solve(n, k, A):\n   ret = 0\n   remK = k + 1\n   for i in range(n-1):\n      t = min((10 ** (A[i+1] - A[i])) - 1, remK)\n      remK -= t\n      assert remK >= 0 \n      ret += t * (10 ** A[i])\n      if remK == 0:\n         return ret\n\n#  print('remK=%d' % (remK), file=sys.stderr)\n\n   ret += remK * (10 ** A[-1])\n\n   return ret\n\n\nTC = int(input())\nfor tc in range(TC):\n   n, k = map(int, input().split())\n   A = list(map(int, input().split()))\n\n   res = solve(n, k, A)\n   print(res)\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n, k = map(int, input().split())\n    mas = list(map(int, input().split()))\n    out = 0\n    z = 0\n    k += 1\n    for i in range(len(mas) - 1):\n        if z != k:\n            out += 10 ** mas[i] * min(k - z, 10 ** (mas[i + 1] - mas[i]) - 1)\n            z += min(k - z, 10 ** (mas[i + 1] - mas[i]) - 1)\n        else:\n            break\n    if z != k:\n        out += 10 ** mas[-1] * (k - z)\n    print(out)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, K = map(int, input().split())\n    K += 1\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        tmp = min(K, 10**(a[i+1]-a[i])-1)\n        K -= tmp\n        ans += tmp * 10**a[i]\n        if K == 0:\n            break\n    if K > 0:\n        ans += K * 10**a[n-1]\n    print(ans)",
                true
            ],
            [
                "\n\"\"\"\n\n\"\"\"\n\nimport sys\nfrom sys import stdin\n\ntt = int(stdin.readline())\n\nANS = []\nfor loop in range(tt):\n\n    n,k = map(int,stdin.readline().split())\n\n    a = list(map(int,stdin.readline().split()))\n\n    k += 1\n    ans = 0\n\n    for i in range(n):\n\n        if i != n-1:\n            use = min(k , 10** (a[i+1]-a[i]) - 1 )\n        else:\n            use = k\n\n        ans += (10**a[i]) * use\n        k -= use    \n\n    ANS.append(str(ans))\n\nprint (\"\\n\".join(ANS))\n",
                true
            ],
            [
                "#from math import *\n#from bisect import *\n#from collections import *\n#from random import *\n#from decimal import *\"\"\"\n#from heapq import *\n#from itertools import *\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return map(int,input().split())\nt=inp()\nwhile(t):\n    t-=1\n    n,k=ma()\n    a=lis()\n    if(n==1):\n        print(k+1)\n        continue\n    fl=0\n    k+=1\n    res=''\n    for i in range(n-1):\n        ra=(10**(a[i+1]))-1\n        curmo=0\n        num=ra\n        for j in range(i,-1,-1):\n            ra1=ra//(10**a[j])\n            curmo+=ra1\n            ra=ra%(10**a[j])\n        if(curmo<k):\n            continue\n        else:\n            z1=10**(a[i])-1\n            res=str(z1)\n            moves=0\n            ra=z1\n            for j in range(i-1,-1,-1):\n                ra1=ra//(10**a[j])\n                moves+=ra1\n                ra=ra%(10**a[j])\n            rem=k-moves\n            if(int(res)!=0):\n                res=str(rem)+res\n            else:\n                res=str(rem)\n            fl=1\n            break\n    if(fl==0):\n            z1=10**(a[-1])-1\n            res=str(z1)\n            moves=0\n            ra=z1\n            for j in range(n-2,-1,-1):\n                ra1=ra//(10**a[j])\n                moves+=ra1\n                ra=ra%(10**a[j])\n            rem=k-moves\n            if(int(res)):\n                res=str(rem)+res\n            else:\n                res=str(rem)\n            fl=1\n    print(int(res))\n        \n                \n            \n        \n        \n",
                true
            ],
            [
                "tt = int(input())\n\nwhile tt > 0:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    num = []\n    for i in range(n):\n        if i == n - 1:\n            num.append(k + 1)\n        else:\n            nxt = a[i + 1] - a[i]\n            number = pow(10, nxt) - 1\n            if number <= k:\n                num.append(number)\n                k -= number\n            else:\n                num.append(k + 1)\n                break\n    itog = 0\n    num.reverse()\n    for i in num:\n        add = 0\n        for j in range(len(str(i))):\n            itog *= 10\n        itog += i\n    print(itog)\n    tt -= 1\n",
                true
            ],
            [
                "test = int(input())\nfor _ in range(test):\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    k += 1\n    ans = 0\n\n    for i in range(n - 1):\n        if(k > 0):\n            temp = arr[i + 1] - arr[i]\n            pow_10 = 10 ** temp\n            pow_10 -= 1\n            ans += (10 ** arr[i] * min(pow_10, k))\n            k -= min(k, pow_10)\n    \n    if k > 0:\n        ans += ((10 ** arr[-1]) * (k))\n    \n    print(ans)",
                true
            ],
            [
                "t=int(input())\nfor sdaskljdkj in range(t):\n    n,k=[int(i)for i in input().split()]\n    l=[int(i)for i in input().split()]\n    ans=\"\"\n    last=k\n    for i in range(n-1):\n        if last>=10**(l[i+1]-l[i])-1:\n            ans=\"9\"*(l[i+1]-l[i])+ans\n            last-=int('9'*(l[i+1]-l[i]))\n        else:\n            break\n    print(str(last+1)+ans)\n",
                true
            ],
            [
                "BIG = 30\n\ndef solve(n, k, a):\n    a.append(BIG)\n    k += 1\n    num = 0\n    for i in range(1, n+1):\n        quant = min(k, 10**(a[i]-a[i-1])-1)\n        k -= quant\n        num += (10**a[i-1]) * quant\n        if k == 0: break\n    assert k == 0\n    print(num)\n\n\ndef read():\n    n, k = map(int, input().split())\n    a = list( map(int, input().split()) )\n    solve(n, k, a)\n\n\nfor tcase in range(int(input())):\n    read()",
                true
            ],
            [
                "def f():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.append(30)\n    j = 0\n    k += 1\n    cnt = 10 ** (a[j + 1] - a[j]) - 1\n    while cnt < k:\n        j += 1\n        cnt += 10 ** (a[j + 1] - a[j]) - 1\n    cnt -= 10 ** (a[j + 1] - a[j]) - 1\n    ans = 10 ** a[j] - 1\n    k -= cnt\n    ans += k * 10 ** a[j]\n    print(ans)\n\n\nt = int(input())\nfor i in range(t):\n    f()",
                true
            ],
            [
                "import math\nfrom collections import OrderedDict\nfrom collections import Counter\nfrom itertools import combinations\n#a= list(map(int, input(\"\").strip().split()))[:n]\ndef solve(a,t):\n    d=0\n    l=0\n    for i in range(len(a)-1):\n        f=a[i+1]-a[i]\n        if t>0:\n            b=int(math.pow(10,f))-1\n            d+=int(math.pow(10,a[i]))*min(b,t)\n            t-=min(b,t)\n    return (d+t*int(math.pow(10,a[-1])))\nt= int(input(\"\"))\nfor i in range(t):\n    n,t= list(map(int, input(\"\").strip().split()))[:2]\n    a= list(map(int, input(\"\").strip().split()))[:n]\n    print(solve(a,t+1))",
                true
            ],
            [
                "t=int(input())\nfor sdaskljdkj in range(t):\n    n,k=[int(i)for i in input().split()]\n    l=[int(i)for i in input().split()]\n    ans=\"\"\n    last=k\n    for i in range(n-1):\n        if last>=10**(l[i+1]-l[i])-1:\n            ans=\"9\"*(l[i+1]-l[i])+ans\n            last-=int('9'*(l[i+1]-l[i]))\n        else:\n            ans=str(last+1)+ans\n            last=-1\n            break\n    if(last==-1):\n        print(ans)\n    else:\n        print(str(last+1)+ans)\n",
                true
            ],
            [
                "# cook your dish here\nfrom math import log\n\nt = int(input())\nfor i in range(t):\n    n, k = list(map(int, input().split(\" \")))\n    req = k+1\n    a = list(map(int, input().split(\" \")))\n    ptr1 = 0\n    ptr2 = 1\n    \n    x = 0\n    n = 0\n    \n    while ptr2<len(a):\n        x = int((pow(10, a[ptr2]) - pow(10, a[ptr1]))/pow(10, a[ptr1]))\n        if req<x:\n            n = n + req*pow(10, a[ptr1])\n            req = 0\n        else:\n            req = req-x\n            n = n + x*pow(10, a[ptr1])\n        ptr1+=1\n        ptr2+=1\n    \n    if len(a) ==1:\n        print(req)\n    elif req>0:\n        n+=req*pow(10, a[len(a)-1])\n        print(n)\n    else:\n        print(n)",
                true
            ],
            [
                "from math import sqrt,gcd,ceil,floor,log,factorial\nfrom itertools import permutations,combinations\nfrom collections import Counter, defaultdict\nimport collections,sys,threading\nimport collections,sys,threading\nfrom bisect import *\nfrom heapq import *\n#sys.setrecursionlimit(10**9)\n#threading.stack_size(10**8)\n#input=sys.stdin.readline\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().split())\ndef msi(): return map(str,input().split())\ndef li(): return list(mi())\n\nt=ii()\nfor _ in range(t):\n    n,k=mi()\n    a=li()\n    av=[0]*(n-1)\n    pre=[0]*(n-1)\n    money=[0]*(n-1)\n    \n    \n            \n    for i in range(n-1):\n        av[i] = (pow(10,a[i+1])-pow(10,a[i]))\n        pre[i]=av[i]//pow(10,a[i]) + pre[i-1]\n        money[i]=money[i-1]+av[i]\n        \n    \n    flag=0   \n    #print(*pre)\n    #print(*money)\n    for i in range(n-2,-1,-1):\n        if k>=pre[i]:\n            req=k-pre[i]+1\n            flag=1\n            print(req*(pow(10,a[i+1])) + (money[i]))\n            break\n        \n    if flag==0:\n        print(k+1)\n        \n            \n        \n    \n            \n            \n    \n    ",
                true
            ],
            [
                "import math;from heapq import heappush,heappop,heapify;import random;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());H=1000000000+7\nfor _ in range(I()):\n    n,k=M();k+=1\n    l=L();s=\"\";i=0\n    while i<n and k>0:\n        if i+1<n:\n            a='9'*(l[i+1]-l[i])\n            if k>=int(a):\n                k-=int(a)\n                s+=a\n            else:\n                s+=str(k)[::-1]\n                break\n            i+=1\n        else:\n            s+=str(k)[::-1]\n            break\n    print(s[::-1])",
                true
            ],
            [
                "'''\ndef fun():\n    n = int(input())\n    up = list(map(int, input().split()))\n    down = list(map(int, input().split()))\n    up = up[::-1]\n    down = down[::-1]\n    curr_idx = 0\n    stops = []\n    power = up[curr_idx]-down[curr_idx] #power = max steps frog can jump\n    while True:\n        print(curr_idx, power)\n        if power+curr_idx == n:\n            break\n        old_power = power\n        old_curr_idx = curr_idx\n\n        new_power = power\n        new_curr_idx = curr_idx\n        \n        for i in range(old_curr_idx+1, old_power+old_curr_idx+1, 1):\n            if i+up[i]-down[i] > new_power+new_curr_idx :\n                new_power = up[i]-down[i]\n                new_curr_idx = i\n        if new_power == old_power and new_curr_idx == old_curr_idx:\n            print(-1)\n            return\n        curr_idx = new_curr_idx\n        power = new_power\n        stops.append(n-new_curr_idx)\n    \n    print(len(stops))\n    for i in stops:\n        print(i, end=\" \")\n    return\n    \nfun()\n'''\n\n\ndef fun():\n    t = int(input())\n    for i in range(t):\n        k, n = map(int, input().split())\n        arr = list(map(int, input().split()))\n        for i in range(len(arr)):\n            arr[i] = 10**arr[i]\n        mn = prev = 0\n        done=False\n        for i in range(1, len(arr)):\n            prev = mn\n            mn += ((arr[i]-arr[i-1])//arr[i-1])\n            if mn > n:\n                extra = n-prev\n                print((extra+1)*arr[i-1]+arr[i-1]-1)\n                done = True\n                break\n        \n        #print(mn)\n        if not done:\n            print((n-mn)*arr[-1]+arr[-1]+arr[-1]-1)\n            \n\nfun()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "# cook your dish here\n#import sys\n#input=sys.stdin.readline\n#m=int(input())\nfor nt in range(int(input())):\n    n,k=map(int,input().split())\n    l=list(map(int,input().split()))\n    a=0\n    k=k+1\n    for i in range(n-1):\n        if k>0:\n            x=10**(l[i+1]-l[i])\n            x-=1\n            y=min(x,k);\n            k-=y\n            a+=(10**l[i])*y \n    a+=k*(10**l[n-1])\n    print(a)",
                true
            ],
            [
                "\nfrom collections import defaultdict as dc\ndef mlt(): return map(int, input().split())\n\n\ndef solv():\n    x, y = mlt()\n    s = sorted([*mlt()])\n    y += 1\n    if x == 1:\n        print(y)\n        return\n    res = 0\n    for n in range(x-1):\n        if not y:\n            break\n        curPow = s[n]\n        nextPow = s[n+1]\n        dif = nextPow-curPow\n\n        a = (10**dif)-1\n        dif = min(a, y)\n        y -= dif\n        res += dif*(10**s[n])\n    if y:\n        res += y*(10**s[-1])\n    print(res)\n\n\nfor _ in range(int(input())):\n    solv()\n",
                true
            ],
            [
                "t = int(input())\nfor q in range(t):\n    n, k = [int(x) for x in input().split()]\n    arr = [10**int(x) for x in input().split()]\n    lis = [arr[i+1]/arr[i] -1 for i in range(n-1)]\n    k += 1\n    count = 0\n    ans = 0\n    i = 0\n    while(count < k and i < n-1):\n        if count + lis[i] <= k:\n            ans += lis[i]*arr[i]\n            count += lis[i]\n            i += 1\n            # print( 'hey this is SOAB' , ans )\n        else:\n            diff = k - count\n            ans += diff*arr[i]\n            count += diff\n            # print(ans, count , 'bhenchod ye kya ho rha hai')\n    # print('the count is' , count , 'ans i is ' , i)    \n    if count == k:\n        print(int(ans))\n    else:\n        # print(ans  )\n        print(int(ans) + int((k-count)*arr[i]))\n",
                true
            ],
            [
                "from math import ceil, pow\n\n\ntests = int(input())\nfor testcase in range(tests):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    # s = list(input())\n    a.sort()\n    ans = 0\n    c = 0\n    for i, e in enumerate(a):\n        \n        if i==n-1:\n            ans += int(pow(10, a[i])*(k-c+1))\n            print(int((ans)))\n            break\n        \n        u = pow(10,(a[i+1]-a[i]))\n        if k-c < u-1:\n            ans += int(pow(10, a[i])*(k-c))\n            print(int((ans+pow(10, a[i]))))\n            break\n        elif k-c == u-1:\n            ans += int(pow(10, a[i])*(k-c))\n            print(int((ans+pow(10, a[i+1]))))\n            break\n        else:\n            ans += int(pow(10, a[i])*(u-1))\n            c+=u-1",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()))\n    if n==1:\n        print(k+1)\n        continue\n    maxn=[]\n    for i in range(n-1):\n        maxn.append(10**(a[i+1]-a[i])-1)\n    c=0\n    s=0\n    flag=False\n    for i in range(n-1):\n        if c+maxn[i]>k:\n            flag=True\n            break\n        c+=maxn[i]\n        s+=maxn[i]*(10**a[i])\n    # print(i)\n    if not flag:\n        i+=1\n    s+=(k-c+1)*(10**a[i])\n    print(s)",
                true
            ],
            [
                "\"\"\"\n4\n3 13\n0 1 2\n\n59\n\n2 777\n0 4\n\n778\n\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split(\" \"))\n    a = sorted(list(map(int, input().split(\" \"))))\n    s = 0\n    number = 0\n    k += 1\n    for p in range(n - 1):\n        t = 10 ** (a[p + 1] - a[p]) - 1\n        if t < k:\n            k -= t\n            number += t * (10 ** a[p])\n        else:\n            number += k * (10 ** a[p])\n            k = 0\n            break\n\n    if k:\n        number += (10 ** a[-1]) * k\n\n    print(number)",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n  n,k=map(int,input().split())\n  arr=list(map(int,input().split()))\n  if n==1:\n    print(k+1)\n    continue\n  prev=0\n  cur=0\n  k+=1\n  for i in range(1,n):\n    # diff=arr[i]-arr[i-1]\n    if 10**arr[i]//(10**arr[i-1])-1>=k:\n      cur=cur+(10**arr[i-1])*(k)\n      k=0\n      break\n    else:\n      prev=(10**arr[i])//(10**arr[i-1])-1\n      k-=prev\n      \n      cur=cur+(10**arr[i-1])*(prev)\n      \n  if k:\n    \n    cur=cur+10**arr[-1]*(k)\n  print(cur)",
                true
            ],
            [
                "t = int(input())\nfor tt in range(t):\n    n,k = [int(s) for s in input().split()]\n    a = [int(s) for s in input().split()]\n    k_tot = 0\n    s = 0\n    for i in range(n):\n        ai_val = 10**a[i]\n        ki = k-k_tot+1\n        if i < n-1:\n            ki = min(ki, 10**(a[i+1]-a[i])-1)\n        k_tot += ki\n        s += ai_val*ki\n        if k_tot > k:\n            break\n    print(s)",
                true
            ],
            [
                "import math\n\ntt = int(input())\n\nANS = []\n\nwhile tt > 0:\n    n, k = input().split()\n    n = int(n)\n    k = int(k)\n    a = [int(i) for i in input().split()]\n    b = []\n    for i in range(n - 1):\n        b.append(pow(10, a[i + 1] - a[i]) - 1)\n    # print(b)\n    ans = 0\n    cnt = 0\n    ind = n - 1\n    for i in range(n - 1):\n        if cnt + b[i] >= k + 1:\n            ind = i\n            break\n        cnt += b[i]\n    kk = k + 1 - cnt\n    # print(ind, kk)\n    for i in range(ind):\n        ans += pow(10, a[i]) * b[i]\n    ans += kk * pow(10, a[ind])\n    # print(ans)\n    ANS.append(ans)\n    tt -= 1\nfor ans in ANS:\n    print(ans)",
                true
            ],
            [
                "for t in range(int(input())):\n    n, k = map(int, input().split())\n    k+=1\n    a = [int(i) for  i in input().split()]\n    ans = ''\n    for i in range(n-1):\n        p = a[i+1]-a[i]\n        if k<(10**p):\n            ans  = str(k)+ans\n            k=0\n            break\n        else:\n            s = '9'*p\n            ans = s+ans\n            k-=int(s)\n    ans = str(k)+ans\n\n    print(int(ans))",
                true
            ],
            [
                "test = int(input())\n\nfor _ in range(test):\n    n, k = map(int, input().split())\n    deno = [10**int(x) for x in input().split()]\n\n    arr = [0] * n\n    arr[0] = k+1\n\n    for i in range(n-1):\n        if arr[i] >= deno[i+1] // deno[i]:\n            tmp = arr[i]\n            arr[i] = (deno[i+1] // deno[i]) - 1\n            arr[i+1] = tmp - arr[i]\n\n    ans = 0\n\n    for i in range(n):\n        ans += arr[i] * deno[i]\n\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = []\n    for i in range(n):\n        u = int(\"9\" * (a[i + 1] - a[i])) if i < n - 1 else 9\n        if u <= k:\n            b.append(u)\n            k -= u\n        else:\n            b.append(k)\n            k = 0\n            break\n    ans = 0\n    for i in range(len(b)):\n        ans += b[i] * (10 ** a[i])\n    ans += 10 ** (a[len(b) - 1])\n    if k != 0:\n        ans += k * 10 ** (a[len(b) - 1])\n    print(ans)\n",
                true
            ],
            [
                "\"\"\"\n4\n3 13\n0 1 2\n\n59\n\n2 777\n0 4\n\n778\n\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\"\"\"\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split(\" \"))\n    a = sorted(list(map(int, input().split(\" \"))))\n    s = 0\n    number = 0\n    k += 1\n    for p in range(n - 1):\n        t = 10 ** (a[p + 1] - a[p]) - 1\n        if t < k:\n            k -= t\n            number += t * (10 ** a[p])\n        else:\n            number += k * (10 ** a[p])\n            k = 0\n            break\n\n    if k:\n        number += (10 ** a[-1]) * k\n\n    print(number)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    k+=1\n    ans=0\n    arr=list(map(int,input().split()))\n    for i in range(n-1):\n        if k>0:\n            x=10**(arr[i+1]-arr[i])-1\n            val=min(x,k)\n            ans+=(10**(arr[i]))*val\n            k-=val\n    ans+=k*(10**(arr[n-1]))\n    print(ans)",
                true
            ],
            [
                "import math as m\n\ndef L():\n    return list(map(int, input().split()))\ndef I():\n    return int(input())\n\ndef solve():\n    n,k = map(int, input().split())\n    arr = L()\n    k+=1\n    ans = 0\n    for i in range(n-1):\n        if k > 0:\n            x = 10**(arr[i+1] - arr[i])-1\n            okok = min(x,k)\n            ans += 10**arr[i] * okok\n            k -= okok\n    ans += k*10**arr[n-1]\n    print(ans)\n\nfor _ in range(int(input())):\n    solve()",
                true
            ],
            [
                "import sys\nimport math\ninpu = sys.stdin.readline\nprin = sys.stdout.write\n\nt = int(inpu())\nfor _ in range(t):\n    n, k = map(int,inpu().split())\n    a = list(map(int, inpu().split()))\n    bigs = [10**(a[i+1]-a[i])-1 for i in range(n-1)]\n    needed = k+1\n    used = [0]*n\n    i = 0\n    while needed >= 0:\n        if i == n-1:\n            used[-1] = needed\n            break\n        elif bigs[i] <= needed:\n            used[i] = bigs[i]\n            needed -= bigs[i]\n        else:\n            used[i] = needed\n            break\n        i += 1\n    tot = 0\n    for i in range(n):\n        tot += used[i]*10**a[i]\n    print(tot)",
                true
            ],
            [
                "from array import array\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    a = array('b', map(int, input().split()))\n    ai1 = 0\n    left = k + 1\n    for ai in a:\n        used_here = 10 ** (ai - ai1) - 1\n        if left <= used_here:\n            break\n        left -= used_here\n        ai1 = ai\n    print(left, '9' * ai1, sep='')\n",
                true
            ],
            [
                "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(lambda x: 10**x, map(int, input().split())))\n\n    i = 0\n    res = 0\n    k += 1\n    while i < len(arr) - 1:\n        diff = arr[i + 1] // arr[i] - 1\n        if k <= diff:\n            res += k * arr[i]\n            k = 0\n            break\n        else:\n            res += arr[i] * diff\n            k -= diff\n            i += 1\n\n    if k > 0:\n        res += k * arr[-1]\n\n    print(res)\n\n\ndef prob():\n    for i in range(int(input())):\n        solve()\n\n\nif __name__ == '__main__':\n    prob()\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nIt is the hard version of the problem. The difference is that in this version, there are nodes with already chosen colors.\n\nTheofanis is starving, and he wants to eat his favorite food, sheftalia. However, he should first finish his homework. Can you help him with this problem?\n\nYou have a perfect binary tree of 2^k - 1 nodes \u2014 a binary tree where all vertices i from 1 to 2^{k - 1} - 1 have exactly two children: vertices 2i and 2i + 1. Vertices from 2^{k - 1} to 2^k - 1 don't have any children. You want to color its vertices with the 6 Rubik's cube colors (White, Green, Red, Blue, Orange and Yellow).\n\nLet's call a coloring good when all edges connect nodes with colors that are neighboring sides in the Rubik's cube.\n\n<image>| <image>  \n---|---  \nA picture of Rubik's cube and its 2D map.\n\nMore formally: \n\n  * a white node can not be neighboring with white and yellow nodes; \n  * a yellow node can not be neighboring with white and yellow nodes; \n  * a green node can not be neighboring with green and blue nodes; \n  * a blue node can not be neighboring with green and blue nodes; \n  * a red node can not be neighboring with red and orange nodes; \n  * an orange node can not be neighboring with red and orange nodes; \n\n\n\nHowever, there are n special nodes in the tree, colors of which are already chosen.\n\nYou want to calculate the number of the good colorings of the binary tree. Two colorings are considered different if at least one node is colored with a different color.\n\nThe answer may be too large, so output the answer modulo 10^9+7.\n\nInput\n\nThe first line contains the integers k (1 \u2264 k \u2264 60) \u2014 the number of levels in the perfect binary tree you need to color.\n\nThe second line contains the integer n (1 \u2264 n \u2264 min(2^k - 1, 2000)) \u2014 the number of nodes, colors of which are already chosen.\n\nThe next n lines contains integer v (1 \u2264 v \u2264 2^k - 1) and string s \u2014 the index of the node and the color of the node (s is one of the white, yellow, green, blue, red and orange).\n\nIt is guaranteed that each node v appears in the input at most once.\n\nOutput\n\nPrint one integer \u2014 the number of the different colorings modulo 10^9+7.\n\nExamples\n\nInput\n\n\n3\n2\n5 orange\n2 white\n\n\nOutput\n\n\n1024\n\n\nInput\n\n\n2\n2\n1 white\n2 white\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n10\n3\n1 blue\n4 red\n5 orange\n\n\nOutput\n\n\n328925088\n\nNote\n\nIn the picture below, you can see one of the correct colorings of the first test example.\n\n<image>\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import io,os\n#input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\nM = 10**9 + 7\ncolors = {'white':0,'yellow':0,'green':1,'blue':1,'red':2,'orange':2}\n\n\ndef getnext(index,n,colored,dic,layer):\n\n    if layer==n:\n        if index not in dic:  return [2,2,2]\n        else: \n            dic[index][colored[index]] += 1\n            return dic[index]\n\n    \n\n    if index not in dic:\n        rest = n - layer\n        sub = pow(2,(1<<(rest+2))-3, M )\n#        print(index,sub)\n        return [sub,sub,sub]\n\n\n    left = getnext(2*index,n,colored,dic,layer+1)\n    right = getnext(2*index+1,n,colored,dic,layer+1)\n\n#    print(left,right)\n\n\n    if index in colored:\n        for i in range(3):\n            if i != colored[index]: continue \n            dic[index][i] =  ( sum(left) - left[i] ) * (sum(right) - right[i]) \n            dic[index][i] =  dic[index][i] % M\n\n    else:\n        for i in range(3):\n            dic[index][i] =  2 * ( sum(left) - left[i] ) * (sum(right) - right[i])   \n            dic[index][i] =  dic[index][i] % M \n\n\n\n    return dic[index]\n\n\n\n    \n\n\n\n\n\n\n\ndef main(t):\n\n    M = 10**9 + 7\n\n    n = int(input())\n    q = int(input())\n\n\n    \n    dic = {}\n    colored = {}\n\n    for _ in range(q):\n        i, color = input().split()\n        i = int(i)\n        colored[i] = colors[color]\n\n        while i>0:\n            if i not in dic:  dic[i] = [0,0,0]\n            i = i >> 1\n\n\n\n        \n        \n\n\n    ans = getnext(1,n,colored,dic,1)\n\n\n#    print(dic)\n    \n\n    print(sum(ans)%M)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmain(1)\n",
                true
            ],
            [
                "k = int(input());n = int(input());l = [1];m = 10 ** 9 + 7\nfor i in range(k - 1):l.append((16 * l[-1] ** 2) % m)\ncounts = {};ind = {'white' : 0, 'green' : 1, 'red' : 2, 'yellow' : 3, 'blue' : 4, 'orange' : 5};given = {}\nfor i in range(n):v, c = input().split();v = int(v);c = ind[c];given[v] = c\ndef count(k, i, counts, color = None):\n    if i in counts:return None\n    m = 10 ** 9 + 7\n    if 2 * i not in counts and 2 * i + 1 not in counts:\n        layer = len(bin(i)) - 2\n        if color is None:counts[i] = [l[k - layer]] * 6\n        else:counts[i] = [0] * 6;counts[i][color] = l[k - layer]\n    elif 2 * i in counts and 2 * i + 1 in counts:\n        left = counts[2 * i];right = counts[2 * i + 1];new = [0] * 6\n        for _ in range(6):\n            totleft = sum(left) - left[_] - left[(_ + 3) % 6];totright = sum(right) - right[_] - right[(_ + 3) % 6]\n            if color is None or _ == color:new[_] = (totleft * totright) % m\n        counts[i] = new\n    else:\n        layer = len(bin(i)) - 2\n        if 2 * i in counts:left = counts[2 * i];right = [l[k - layer - 1]] * 6\n        else:left = counts[2 * i + 1];right = [l[k - layer - 1]] * 6\n        new = [0] * 6\n        for _ in range(6):\n            totleft = sum(left) - left[_] - left[(_ + 3) % 6];totright = sum(right) - right[_] - right[(_ + 3) % 6]\n            if color is None or _ == color:new[_] = (totleft * totright) % m\n        counts[i] = new\nbits = k\nwhile bits > 0:\n    for guy in list(counts.keys()):\n        if len(bin(guy)) == bits + 3:color = given[guy // 2] if guy // 2 in given else None;count(k, guy//2, counts, color)\n    for guy in given:\n        if len(bin(guy)) == bits + 2:count(k, guy, counts, given[guy])\n    bits -= 1\nprint(sum(counts[1]) % m)",
                true
            ],
            [
                "#!/usr/bin/env python3\nimport sys\nimport getpass  # not available on codechef\nimport math, random\nimport functools, itertools, collections, heapq, bisect\nfrom collections import Counter, defaultdict, deque\ninput = sys.stdin.readline  # to read input quickly\n\n# available on Google, AtCoder Python3, not available on Codeforces\n# import numpy as np\n# import scipy\n\nM9 = 10**9 + 7  # 998244353\nyes, no = \"YES\", \"NO\"\n# d4 = [(1,0),(0,1),(-1,0),(0,-1)]\n# d8 = [(1,0),(1,1),(0,1),(-1,1),(-1,0),(-1,-1),(0,-1),(1,-1)]\n# d6 = [(2,0),(1,1),(-1,1),(-2,0),(-1,-1),(1,-1)]  # hexagonal layout\nMAXINT = sys.maxsize\n\n# if testing locally, print to terminal with a different color\nOFFLINE_TEST = getpass.getuser() == \"hkmac\"\n# OFFLINE_TEST = False  # codechef does not allow getpass\ndef log(*args):\n    if OFFLINE_TEST:\n        print('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n\ndef solve(*args):\n    # screen input\n    if OFFLINE_TEST:\n        log(\"----- solving ------\")\n        log(*args)\n        log(\"----- ------- ------\")\n    return solve_(*args)\n\ndef read_matrix(rows):\n    return [list(map(int,input().split())) for _ in range(rows)]\n\ndef read_strings(rows):\n    return [list(input().split()) for _ in range(rows)]\n\ndef minus_one(arr):\n    return [x-1 for x in arr]\n\ndef minus_one_matrix(mrr):\n    return [[x-1 for x in row] for row in mrr]\n\n# ---------------------------- template ends here ----------------------------\n\n\ndef solve_(arr, k):\n    # your solution here\n\n    # return pow(2,4*k,M9)*6\n\n    unconstrainted = [1,1]\n\n    res = 1\n    for _ in range(k-1):\n        new = 0\n\n        # same color, 4 choices for new color, n*n-1 (don't double count the same)\n        new += 4*res * 4*res\n\n        res = new%M9\n\n        unconstrainted.append(res)\n\n    unconstrainted = unconstrainted[::-1]\n\n    log(unconstrainted)\n\n    mapp = {}\n    for node, color, level in arr[::-1]:\n        node = -node\n        log(node, node//2)\n        if node//2 in mapp:\n            if mapp[node//2] == color or mapp[node//2] == -color:\n                return 0\n        mapp[node] = color\n\n    # log(arr)\n\n    # to 3 colors\n    count = {}\n    visited = set()\n    # visited = set([-x[0] for x in arr])\n\n\n    # for node, color, level in arr:\n    while arr:\n        # log(sorted(arr))\n        node, color, level = heapq.heappop(arr)\n\n        node = -node\n        if node in visited:\n            continue\n        visited.add(node)\n\n        # log(\"node\")\n        # log(node)\n\n        left_child = node*2\n        right_child = node*2+1\n\n        res = [1,1,1]\n\n        if left_child in count:\n            a0,a1,a2 = count[left_child]\n        else:\n            a0,a1,a2 = [2*unconstrainted[level], 2*unconstrainted[level], 2*unconstrainted[level]]\n\n        if right_child in count:\n            b0,b1,b2 = count[right_child]\n        else:\n            b0,b1,b2 = [2*unconstrainted[level], 2*unconstrainted[level], 2*unconstrainted[level]]\n\n        # log()\n        # log([a0,a1,a2])\n        # log([b0,b1,b2])\n\n        res[0] = a1*b2 + a2*b1 + a1*b1 + a2*b2\n        res[1] = a2*b0 + a0*b2 + a2*b2 + a0*b0\n        res[2] = a0*b1 + a1*b0 + a0*b0 + a1*b1\n\n        if level == k:\n            if color == 0:\n                res = [2,2,2]\n            else:\n                res = [0,0,0]\n                res[abs(color)-1] = 1\n\n        elif color != 0:\n            col = abs(color)-1\n            r2 = res[col]\n            res = [0,0,0]\n            res[col] = r2\n        else:\n            res[0] *= 2\n            res[1] *= 2\n            res[2] *= 2\n\n        res = [res[0]%M9, res[1]%M9, res[2]%M9]\n\n        count[node] = res\n\n        log(node, color, res)\n\n        parent = node//2\n        # if parent in visited:\n        #     continue\n\n        heapq.heappush(arr, (-(parent), 0, level-1))\n\n        if parent == 0:\n            break\n\n\n    return sum(count[1])%M9\n\n\nfor case_num in [0]:  # no loop over test case\n# for case_num in range(100):  # if the number of test cases is specified\n# for case_num in range(int(input())):\n\n    # read line as an integer\n    k = int(input())\n\n    # read line as a string\n    # srr = input().strip()\n\n    # read one line and parse each word as a string\n    # lst = input().split()\n\n    # read one line and parse each word as an integer\n    # a,b,c = list(map(int,input().split()))\n    # lst = list(map(int,input().split()))\n    # lst = minus_one(lst)\n\n    mapp = {\"white\": 1, \"yellow\": -1, \"green\": 2, \"blue\": -2, \"red\": 3, \"orange\": -3}\n\n    r = int(input())\n    # read multiple rows\n    arr = read_strings(r)  # and return as a list of str\n\n    arr = [(-int(x[0]), -abs(mapp[x[1]]), -2 + len(bin(int(x[0])))) for x in arr]\n    arr.sort()\n    # mrr = read_matrix(k)  # and return as a list of list of int\n    # mrr = minus_one_matrix(mrr)\n\n    res = solve(arr, k)  # include input here\n\n\n    # print length if applicable\n    # print(len(res))\n\n    # parse result\n    # res = \" \".join(str(x) for x in res)\n    # res = \"\\n\".join(str(x) for x in res)\n    # res = \"\\n\".join(\" \".join(str(x) for x in row) for row in res)\n\n    # print result\n    # print(\"Case #{}: {}\".format(case_num+1, res))   # Google and Facebook - case number required\n\n    print(res)\n",
                true
            ],
            [
                "import sys\nfrom collections import defaultdict as dd\ninput = sys.stdin.readline\n\nmod = 10 ** 9 + 7\n\nk = int(input())\nn = int(input())\n\nm = pow(2, k) - 1\n\nd = {\"white\": 0, \"blue\": 1, \"red\": 2, \"orange\": 3, \"green\": 4,  \"yellow\": 5}\n\nqs = []\nfor _ in range(n):\n  x, c = input().split()\n  x = int(x)\n  qs.append((x, d[c]))\n\ntable = dd(lambda: -1)\nfor x, c in qs: table[x] = c\n\nimport heapq\nhpush = heapq.heappush\nhpop = heapq.heappop\n\nh = []\nvis = set()\ndp = dd(lambda: [1] * 6)\nfor x, c in qs:\n  hpush(h, -x)\n  dp[x] = [0] * 6\n  dp[x][c] = 1\n\n\nwhile len(h):\n  x = -hpop(h)\n  if x in vis: continue\n  vis.add(x)\n  p = x // 2\n  if p: hpush(h, -p)\n  ndp = [0] * 6\n  for i in range(6):\n    for j in range(6):\n      if i == j or (i + j) == 5: continue\n      ndp[j] += dp[x][i] * dp[p][j] % mod\n  dp[p] = ndp\n\nres = sum(dp[1]) % mod * pow(4, m - len(vis), mod) % mod\nprint(res)",
                true
            ],
            [
                "from collections import defaultdict\nimport sys\nreadline=sys.stdin.readline\n\nK=int(readline())\nN=int(readline())\ncolor=[\"white\",\"green\",\"red\",\"yellow\",\"blue\",\"orange\"]\nnum={color[i]:i for i in range(6)}\ndp=defaultdict(lambda:defaultdict(int))\ndct={}\nlst=[]\nfor _ in range(N):\n    v,c=readline().split()\n    v=int(v)\n    dct[v]=num[c]\n    while v:\n        lst.append(v)\n        v//=2\nlst=list(set(lst))\nlst.sort(reverse=True)\nmod=10**9+7\nfor i in lst:\n    if not i*2 in dp and not i*2+1 in dp:\n        if i in dct:\n            dp[i][dct[i]]=1\n        else:\n            for j in range(6):\n                dp[i][j]=1\n    elif (i*2 in dp)+(i*2+1 in dp)==1:\n        a,b=i*2,i*2+1\n        if not a in dp:\n            a,b=b,a\n        dp[i][0]=(dp[a][1]+dp[a][2]+dp[a][4]+dp[a][5])%mod\n        dp[i][1]=(dp[a][0]+dp[a][2]+dp[a][3]+dp[a][5])%mod\n        dp[i][2]=(dp[a][0]+dp[a][1]+dp[a][3]+dp[a][4])%mod\n        dp[i][3]=dp[i][0]\n        dp[i][4]=dp[i][1]\n        dp[i][5]=dp[i][2]\n        if i in dct:\n            for j in range(6):\n                if j!=dct[i]:\n                    dp[i][j]=0\n    else:\n        dp[i][0]=(dp[i*2][1]+dp[i*2][2]+dp[i*2][4]+dp[i*2][5])*(dp[i*2+1][1]+dp[i*2+1][2]+dp[i*2+1][4]+dp[i*2+1][5])%mod\n        dp[i][1]=(dp[i*2][0]+dp[i*2][2]+dp[i*2][3]+dp[i*2][5])*(dp[i*2+1][0]+dp[i*2+1][2]+dp[i*2+1][3]+dp[i*2+1][5])%mod\n        dp[i][2]=(dp[i*2][0]+dp[i*2][1]+dp[i*2][3]+dp[i*2][4])*(dp[i*2+1][0]+dp[i*2+1][1]+dp[i*2+1][3]+dp[i*2+1][4])%mod\n        dp[i][3]=dp[i][0]\n        dp[i][4]=dp[i][1]\n        dp[i][5]=dp[i][2]\n        if i in dct:\n            for j in range(6):\n                if j!=dct[i]:\n                    dp[i][j]=0\nans=0\nfor j in range(6):\n    ans+=dp[1][j]\n    ans%=mod\nans*=pow(4,(1<<K)-1-len(dp),mod)\nans%=mod\nprint(ans)",
                true
            ],
            [
                "MOD  =  10**9 + 7\ncolor  = {'white' : 0 ,'yellow' : 5,'green':2, 'blue':3,'red':4, 'orange':1}\nspecial = {}\nmarked  = set()\nk = int(input())\nn= int(input())\ndp = {}\ndef solve(i,j):\n    if (special.get(i,-1) != -1 and special[i]!=j):\n        return 0\n    if (dp[i][j]!=-1): return dp[i][j]\n    nodel = 2*i\n    noder = 2*i +1\n    suml  = 0 \n    sumr  = 0\n    for col in range(6):\n        if (col != 5-j) and (col != j):\n            if (nodel in marked): suml += solve(nodel,col)\n            else: suml = 1\n            if (noder in marked): sumr += solve(noder,col)\n            else: sumr = 1\n    dp[i][j] = (suml *sumr) % MOD\n    return dp[i][j]\nfor _ in range(n):\n    v,s = input().split(' ')\n    v = int(v)\n    special[v] = color[s]\n    while (v not in marked and v>=1):\n        marked.add(v)\n        dp[v] = [-1] * 6\n        v //=2\nres =0\nfor col in range(6):\n    res += solve(1,col)\nunmarked_node =  2**k  -1  - len(marked)\nability_unmarked = pow(4,unmarked_node,MOD)\nres %=MOD\nres = (res*ability_unmarked)%MOD\nprint(res)\n",
                true
            ],
            [
                "k = int(input());n = int(input());l = [1];m = 10 ** 9 + 7\nfor i in range(k - 1):l.append((16 * l[-1] ** 2) % m)\ncounts = {};ind = {'white' : 0, 'green' : 1, 'red' : 2, 'yellow' : 3, 'blue' : 4, 'orange' : 5};given = {}\nfor i in range(n):v, c = input().split();v = int(v);c = ind[c];given[v] = c\ndef count(k,i,counts,color=None):\n    if i in counts:\n        return None\n    m=10**9+7\n    if 2*i not in counts and 2*i+1 not in counts:\n        layer = len(bin(i))-2\n        if color is None:\n            counts[i] = [l[k-layer]]*6\n        else:\n            counts[i] = [0]*6\n            counts[i][color] = l[k-layer]\n    elif 2*i in counts and 2*i+1 in counts:\n        left = counts[2*i]\n        right = counts[2*i+1]\n        new = [0]*6\n        for _ in range(6):\n            totleft = sum(left)-left[_]-left[(_+3)%6]\n            totright = sum(right)-right[_]-right[(_+3)%6]\n            if color is None or _==color:\n                new[_] = (totleft*totright)%m\n        counts[i] = new\n    else:\n        layer = len(bin(i))-2\n        if 2*i in counts:\n            left = counts[2*i]\n            right = [l[k-layer-1]]*6\n        else:\n            left = counts[2*i+1]\n            right = [l[k-layer-1]]*6\n        new = [0]*6\n        for _ in range(6):\n            totleft = sum(left)-left[_]-left[(_+3)%6]\n            totright = sum(right)-right[_]-right[(_+3)%6]\n            if color is None or _==color:\n                new[_] = (totleft*totright)%m\n        counts[i] = new\n\nbits = k\nwhile bits > 0:\n    for guy in list(counts.keys()):\n        if len(bin(guy)) == bits + 3:color = given[guy // 2] if guy // 2 in given else None;count(k, guy//2, counts, color)\n    for guy in given:\n        if len(bin(guy)) == bits + 2:count(k, guy, counts, given[guy])\n    bits -= 1\nprint(sum(counts[1]) % m)",
                true
            ],
            [
                "import sys\nfrom sys import stdin\n\n\n\ncdic = {}\ncdic[\"white\"] = 0\ncdic[\"yellow\"] = 0\ncdic[\"green\"] = 1\ncdic[\"blue\"] = 1\ncdic[\"red\"] = 2\ncdic[\"orange\"] = 2\n\nmod = 10**9+7\n\nk = int(stdin.readline())\nn = int(stdin.readline())\n\ndp = {}\ndplis = []\n\nvtos = {}\n\nfor i in range(n):\n\n    v,s = stdin.readline()[:-1].split()\n    v = int(v)\n\n    vtos[v] = s\n\n    while v != 0:\n        if v not in dp:\n            dp[v] = [0,0,0]\n            dplis.append(v)\n        v //= 2\n\ndplis.sort()\ndplis.reverse()\n\ndef getans(v,c):\n    if v in dp:\n        return dp[v][c]\n    else:\n        height = v.bit_length()\n        remh = k - height + 1\n        chnum = 2**remh-1\n        return pow(2,chnum-1,mod)\n\nfor v in dplis:\n\n    if 2**(k-1) <= v:\n        ncolor = cdic[vtos[v]]\n        dp[v][ncolor] = 1\n\n    else:\n\n        for x in range(3):\n            for y in range(3):\n                for z in range(3):\n                    if x != y and x != z:\n                        dp[v][x] += getans(2*v,y) * getans(2*v+1,z)\n                        dp[v][x] %= mod\n\n        if v in vtos:\n            ncolor = cdic[vtos[v]]\n            for x in range(3):\n                if x != ncolor:\n                    dp[v][x] = 0\n\n#print (dp)\n\nans = pow(2,2**k-1 - n,mod) * sum(dp[1])\nprint (ans % mod)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nfrom collections import defaultdict\n\ndef il(): #Input list\n    return list(map(int,input().split()))\ndef ii(): #Input int\n    return int(input())\ndef imi(): #Input multiple int\n    return map(int,input().split())\ndef ist(): #Input String\n    return input()\n\nk=ii()\nn=ii()\np=10**9 + 7\ntot=2**k-1\n\ndef powr(a,b):\n    if b==0: return 1\n    if b==1: return a\n    x=powr(a,b//2)\n    if b%2==0: return (x*x)%p\n    else: return (x*x*a)%p\n\n\ndef solve(i,cl,dp,mk,vis,p):\n    #print(i,mk[i],dp[(i,cl)],cl,l)\n    if i>tot: return 0\n    if mk[i]==0: return 0\n    if mk[i]==-1:\n        if dp[(i,cl)]==0: return 0\n    if vis[(i,cl)]: return dp[(i,cl)]\n\n\n    c1=2*i\n    c2=c1+1\n\n    s=0\n    if (mk[c1]!=0)and(mk[c2]!=0):\n        for j in range(1,7):\n            if (j==cl)or(j+cl==7): continue\n\n            if vis[(c1,j)]: a=dp[(c1,j)]\n            else: a=solve(c1,j,dp,mk,vis,p)\n\n            for k in range(1,7):\n                if (k == cl) or (k + cl == 7): continue\n\n                if vis[(c2,k)]: b=dp[(c2,k)]\n                else: b=solve(c2,k,dp,mk,vis,p)\n\n                s=(s+a*b)%p\n\n    elif mk[c1]!=0:\n        for j in range(1,7):\n            if (j==cl)or(j+cl==7): continue\n\n            if vis[(c1,j)]: a=dp[(c1,j)]\n            else: a= solve(c1, j, dp, mk,vis,p)\n            s=(s+a)%p\n    elif mk[c2]!=0:\n        for j in range(1,7):\n            if (j==cl)or(j+cl==7): continue\n            if vis[(c2,j)]: a=dp[(c2,j)]\n            else: a= solve(c2, j, dp, mk,vis,p)\n            s=(s+a)%p\n    else:\n        vis[(i,c)]=1\n        return 1\n\n    dp[(i,cl)]=s\n    vis[(i,cl)]=1\n    return s\n\n\ncolor=['','w','g','r','o','b','y']\n\n\nmk=defaultdict(lambda :0)\ndp=defaultdict(lambda :0)\nvis=defaultdict(lambda :0)\n\nm=0\n\nfor i in range(n):\n    st=ist().split()\n\n    x=int(st[0])\n    c=color.index(st[1][0])\n\n    dp[(x,c)]=1\n    if mk[x]==0: m+=1\n    mk[x]=-1\n    x=x//2\n    while(x>0):\n        if mk[x]==0:\n            m+=1\n            mk[x]=1\n        x=x//2\n\n\n#print(m)\ns=0\n\nfor i in range(1,7):\n    s+=solve(1,i,dp,mk,vis,p)\n    s%=p\n   # print(i,s)\n\n\ny=powr(4,tot-m)\nprint((s*y)%p)\n\n\n\n\n",
                true
            ],
            [
                "#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"10\n# 3\n# 1 blue\n# 4 red\n# 5 orange\n\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\nMOD = 1000000007\n\nK = int(input())\nN = int(input())\nInfo = [list() for _ in range(K)]\ncolor_dic = {'white': 0, 'green': 1, 'red': 2, 'yellow': 3, 'blue': 4, 'orange': 5}\nfor _ in range(N):\n    v, col = input().split()\n    d = 0\n    v1 = int(v)\n    while True:\n        if v1 <= 2**d:\n            break\n        v1 -= 2**d\n        d += 1\n    Info[d].append((int(v), color_dic[col]))\nfor d in range(K):\n    Info[d].sort()\n\ndp = [[0] * 6 for _ in range(K)]\ndp_sp = [collections.defaultdict(lambda: [0] * 6) for _ in range(K)]\nfor c in range(6):\n    dp[K-1][c] = 1\nfor v, c in Info[K-1]:\n    T = [0] * 6\n    T[c] = 1\n    dp_sp[K-1][v] = T\n\nfor k in reversed(range(K-1)):\n\n    for c in range(6):\n        for c1_1 in range(6):\n            for c1_2 in range(6):\n                if c1_1 != c and c1_1 != (c+3)%6 and c1_2 != c and c1_2 != (c+3)%6:\n                    dp[k][c] = (dp[k][c] + dp[k+1][c1_1] * dp[k+1][c1_2]) % MOD\n\n    for v1, t1 in dp_sp[k+1].items():\n        if v1 % 2 == 0 and v1+1 in dp_sp[k+1]:\n            v2 = v1+1\n            t2 = dp_sp[k+1][v2]\n            T = [0] * 6\n            for c in range(6):\n                for c1_1 in range(6):\n                    for c1_2 in range(6):\n                        if c1_1 != c and c1_1 != (c+3)%6 and c1_2 != c and c1_2 != (c+3)%6:\n                            T[c] = (T[c] + t1[c1_1] * t2[c1_2]) % MOD\n            dp_sp[k][v1//2] = T\n            continue\n        \n        if v1 % 2 == 1 and v1-1 in dp_sp[k+1]:\n            continue\n\n        T = [0] * 6\n        for c in range(6):\n            for c1_1 in range(6):\n                for c1_2 in range(6):\n                    if c1_1 != c and c1_1 != (c+3)%6 and c1_2 != c and c1_2 != (c+3)%6:\n                        T[c] = (T[c] + t1[c1_1] * dp[k+1][c1_2]) % MOD\n        dp_sp[k][v1//2] = T\n\n    for v, c in Info[k]:\n        if v not in dp_sp[k]:\n            dp_sp[k][v] = list(dp[k])\n        for c1 in range(6):\n            if c1 != c:\n                dp_sp[k][v][c1] = 0\n\nif N == 0:\n    ans = sum(dp[0]) % MOD\nelse:\n    ans = sum(dp_sp[0][1]) % MOD\nprint(ans)\n",
                true
            ],
            [
                "import sys\nimport io, os\ninput = sys.stdin.readline\nfrom collections import defaultdict\n\nk = int(input())\nn  = int(input())\ntoid = {'white':0,'yellow':1,'green':2,'blue':3,'red':4,'orange':5}\nedge = [[2,3,4,5],[2,3,4,5],[0,1,4,5],[0,1,4,5],[0,1,2,3],[0,1,2,3]]\nmod = 10**9+7\npredefine = {}\nV = []\nfor i in range(n):\n    v, s = map(str, input().split())\n    v = int(v)\n    v -= 1\n    s = toid[s]\n    V.append(v)\n    predefine[v] = s\n\nX = set()\nfor v in V:\n    X.add(v)\n    while v:\n        v = (v-1)//2\n        X.add(v)\nX = list(X)\nX.sort(reverse=True)\nS = set(X)\ndp = defaultdict(lambda: [0]*6)\nfor v in X:\n    if v in predefine:\n        c = predefine[v]\n        dp[v] = [0]*6\n        nx1, nx2 = 2*v+1, 2*v+2\n        if nx1 in S and nx2 in S:\n            s1, s2 = 0, 0\n            for j in edge[c]:\n                s1 += dp[nx1][j]\n                s2 += dp[nx2][j]\n            dp[v][c] += s1*s2%mod\n        elif nx1 in S:\n            for j in edge[c]:\n                dp[v][c] += dp[nx1][j]%mod\n        elif nx2 in S:\n            for j in edge[c]:\n                dp[v][c] += dp[nx2][j]%mod\n        else:\n            dp[v][c] = 1\n    else:\n        for c in range(6):\n            nx1, nx2 = 2*v+1, 2*v+2\n            if nx1 in S and nx2 in S:\n                s1, s2 = 0, 0\n                for j in edge[c]:\n                    s1 += dp[nx1][j]\n                    s2 += dp[nx2][j]\n                dp[v][c] += s1*s2%mod\n            elif nx1 in S:\n                for j in edge[c]:\n                    dp[v][c] += dp[nx1][j]%mod\n            elif nx2 in S:\n                for j in edge[c]:\n                    dp[v][c] += dp[nx2][j]%mod\n            else:\n                dp[v][c] = 1\ncnt = pow(2, k)-1-len(S)\nans = sum(dp[0])*pow(4, cnt, mod)\nans %= mod\nprint(ans)\n",
                true
            ],
            [
                "import sys\nfrom sys import stdin\n\n\n\ncdic = {}\ncdic[\"white\"] = 0\ncdic[\"yellow\"] = 0\ncdic[\"green\"] = 1\ncdic[\"blue\"] = 1\ncdic[\"red\"] = 2\ncdic[\"orange\"] = 2\n\nmod = 10**9+7\n\nk = int(stdin.readline())\nn = int(stdin.readline())\n\ndp = {}\ndplis = []\n\nvtos = {}\n\nfor i in range(n):\n\n    v,s = stdin.readline()[:-1].split()\n    v = int(v)\n\n    vtos[v] = s\n\n    while v != 0:\n        if v not in dp:\n            dp[v] = [0,0,0]\n            dplis.append(v)\n        v //= 2\n\ndplis.sort()\ndplis.reverse()\n\ndef getans(v,c):\n    if v in dp:\n        return dp[v][c]\n    else:\n        height = v.bit_length()\n        \n        return solveh(height)\n\nsdic = {}\ndef solveh(height):\n    if height in sdic:\n        return sdic[height]\n    remh = k - height + 1\n    chnum = 2**remh-1\n    ret = pow(2,chnum-1,mod)\n    sdic[height] = ret\n    return ret\n\nfor v in dplis:\n\n    if 2**(k-1) <= v:\n        ncolor = cdic[vtos[v]]\n        dp[v][ncolor] = 1\n\n    else:\n\n        for x in range(3):\n            for y in range(3):\n                for z in range(3):\n                    if x != y and x != z:\n                        dp[v][x] += getans(2*v,y) * getans(2*v+1,z)\n                        dp[v][x] %= mod\n\n        if v in vtos:\n            ncolor = cdic[vtos[v]]\n            for x in range(3):\n                if x != ncolor:\n                    dp[v][x] = 0\n\n#print (dp)\n\nans = pow(2,2**k-1 - n,mod) * sum(dp[1])\nprint (ans % mod)",
                true
            ],
            [
                "#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"10\n# 3\n# 1 blue\n# 4 red\n# 5 orange\n\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\nMOD = 1000000007\n\nK = int(input())\nN = int(input())\nInfo = [list() for _ in range(K)]\ncolor_dic = {'white': 0, 'green': 1, 'red': 2, 'yellow': 3, 'blue': 4, 'orange': 5}\nfor _ in range(N):\n    v, col = input().split()\n    d = 0\n    v1 = int(v)\n    while True:\n        if v1 <= 2**d:\n            break\n        v1 -= 2**d\n        d += 1\n    Info[d].append((int(v), color_dic[col]))\nfor d in range(K):\n    Info[d].sort()\n\ndp = [[0] * 6 for _ in range(K)]\ndp_sp = [collections.defaultdict(lambda: [0] * 6) for _ in range(K)]\nfor c in range(6):\n    dp[K-1][c] = 1\nfor v, c in Info[K-1]:\n    T = [0] * 6\n    T[c] = 1\n    dp_sp[K-1][v] = T\n\nfor k in reversed(range(K-1)):\n\n    for c in range(6):\n        for c1_1 in range(6):\n            for c1_2 in range(6):\n                if (c1_1 - c) % 3 and (c1_2 - c) % 3:\n                    dp[k][c] = (dp[k][c] + dp[k+1][c1_1] * dp[k+1][c1_2]) % MOD\n\n    for v1, t1 in dp_sp[k+1].items():\n        if v1 % 2 == 0 and v1+1 in dp_sp[k+1]:\n            v2 = v1+1\n            t2 = dp_sp[k+1][v2]\n            T = [0] * 6\n            for c in range(6):\n                for c1_1 in range(6):\n                    for c1_2 in range(6):\n                        if (c1_1 - c) % 3 and (c1_2 - c) % 3:\n                            T[c] = (T[c] + t1[c1_1] * t2[c1_2]) % MOD\n            dp_sp[k][v1//2] = T\n            continue\n        \n        if v1 % 2 == 1 and v1-1 in dp_sp[k+1]:\n            continue\n\n        T = [0] * 6\n        for c in range(6):\n            for c1_1 in range(6):\n                for c1_2 in range(6):\n                    if (c1_1 - c) % 3 and (c1_2 - c) % 3:\n                        T[c] = (T[c] + t1[c1_1] * dp[k+1][c1_2]) % MOD\n        dp_sp[k][v1//2] = T\n\n    for v, c in Info[k]:\n        if v not in dp_sp[k]:\n            dp_sp[k][v] = list(dp[k])\n        for c1 in range(6):\n            if c1 != c:\n                dp_sp[k][v][c1] = 0\n\nif N == 0:\n    ans = sum(dp[0]) % MOD\nelse:\n    ans = sum(dp_sp[0][1]) % MOD\nprint(ans)\n",
                true
            ],
            [
                "import sys\n\nMOD = int(1e9+7)\ncolors_matrix = [\n    [2, 4, 3, 5],  # white : green red blue orange\n    [2, 4, 3, 5],  # yellow : green red blue orange\n    [0, 1, 4, 5],  # green : white yellow red orange\n    [0, 1, 4, 5],  # blue : white yellow red orange\n    [0, 1, 2, 3],  # red : white yellow green blue\n    [0, 1, 2, 3],  # orange : white yellow green blue\n]\n\ndef rec(tree, vertex, level):\n    global dp\n    if vertex not in tree:\n        return [dp[level]] * 6\n    vertex_color_restriction = tree[vertex]\n    if level == 0:\n        if vertex_color_restriction >= 0:\n            res = [0] * 6\n            res[vertex_color_restriction] = 1\n            return res\n        else:\n            return [1] * 6\n    left = rec(tree, vertex * 2, level - 1)\n    right = rec(tree, vertex * 2 + 1, level - 1)\n    res = [0] * 6\n    for vertex_color in range(6):\n        if (vertex_color_restriction >= 0\n        and vertex_color_restriction != vertex_color):\n            continue\n        left_options = 0\n        for color_left in colors_matrix[vertex_color]:\n            left_options += left[color_left]\n        right_options = 0\n        for color_right in colors_matrix[vertex_color]:\n            right_options += right[color_right]\n        res[vertex_color] = (left_options * right_options) % MOD\n    return res\n\n\ndef solve():\n    global dp\n    inp = sys.stdin.readline\n    k = int(inp())\n    n = int(inp())\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(1, k):\n        dp[i] = (dp[i - 1] * 4 * dp[i - 1] * 4) % MOD\n\n    tree = {}\n    color_to_id = {\n        'white': 0,\n        'yellow': 1,\n        'green': 2,\n        'blue': 3,\n        'red': 4,\n        'orange': 5,\n    }\n    for i in range(n):\n        v, s = inp().split()\n        v = int(v)\n        tree[v] = color_to_id[s]\n        v //= 2\n        while v > 0:\n            if v not in tree:\n                tree[v] = -1\n            v //= 2\n    print(sum(rec(tree, 1, k - 1)) % MOD)\n\ndef main():\n    solve()\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nLet's call a sequence of integers x_1, x_2, ..., x_k MEX-correct if for all i (1 \u2264 i \u2264 k) |x_i - \\operatorname{MEX}(x_1, x_2, ..., x_i)| \u2264 1 holds. Where \\operatorname{MEX}(x_1, ..., x_k) is the minimum non-negative integer that doesn't belong to the set x_1, ..., x_k. For example, \\operatorname{MEX}(1, 0, 1, 3) = 2 and \\operatorname{MEX}(2, 1, 5) = 0.\n\nYou are given an array a consisting of n non-negative integers. Calculate the number of non-empty MEX-correct subsequences of a given array. The number of subsequences can be very large, so print it modulo 998244353. \n\nNote: a subsequence of an array a is a sequence [a_{i_1}, a_{i_2}, ..., a_{i_m}] meeting the constraints 1 \u2264 i_1 < i_2 < ... < i_m \u2264 n. If two different ways to choose the sequence of indices [i_1, i_2, ..., i_m] yield the same subsequence, the resulting subsequence should be counted twice (i. e. two subsequences are different if their sequences of indices [i_1, i_2, ..., i_m] are not the same).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 5 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 n).\n\nThe sum of n over all test cases doesn't exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single integer \u2014 the number of non-empty MEX-correct subsequences of a given array, taken modulo 998244353.\n\nExample\n\nInput\n\n\n4\n3\n0 2 1\n2\n1 0\n5\n0 0 0 0 0\n4\n0 1 2 3\n\n\nOutput\n\n\n4\n2\n31\n7\n\nNote\n\nIn the first example, the valid subsequences are [0], [1], [0,1] and [0,2].\n\nIn the second example, the valid subsequences are [0] and [1].\n\nIn the third example, any non-empty subsequence is valid. \nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "mod = 998244353\nt = int(input())\n\nans = []\nfor _ in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    mex = [0]*(n+10)\n    mex[4] = 1\n    mex_1 = [0]*(n+10)\n    offset = 5\n    for num in nums:\n        if num > n:\n            continue\n        mex[num+offset] = (2*mex[num+offset]+mex[num-1+offset]) % mod\n        mex_1[num+2+offset] = (2*mex_1[num+2+offset]) % mod\n        mex_1[num+offset] = (2*mex_1[num+offset]+mex[num-2+offset]) % mod\n    ans.append(str((sum(mex) + sum(mex_1)-1) % mod) + \"\\n\")\nprint(\"\".join(ans))\n        \n    \n\n",
                true
            ],
            [
                "#!/usr/bin/env pypy3\n\nfrom sys import stdin, stdout\n\ndef input(): return stdin.readline().strip()\ndef read_int_list(): return list(map(int, input().split()))\ndef read_int_tuple(): return tuple(map(int, input().split()))\ndef read_int(): return int(input())\n\nMODULUS = 998244353\n\nfrom itertools import chain, combinations, product\n\ndef subsets(iterable, low=0, high=None):\n    \"subsets([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    s = list(iterable)\n    if high is None:\n        high = len(s)\n    return chain.from_iterable(combinations(s, r) for r in range(low, high+1))\n\n### CODE HERE\n\ndef mex(A):\n    sA = set(A)\n    for i in range(0, 200):\n        if i not in sA: return i\n    assert(False)\n\ndef correct(seq):\n    for i in range(len(seq)):\n        if not (1 >= abs(seq[i] - mex(seq[0:i+1]))):\n            return False\n    return True\n\n\ndef subsequences(S):\n    ret = []\n    for indices in subsets(range(len(S))):\n        ret += [[S[i] for i in indices]]\n    return ret\n\nfrom functools import lru_cache\n\ndef ans_bottom(S):\n    i = len(S)\n    sz = len(S)+9\n    dp1 = [1]*(sz)\n    dp2 = [1]*(sz)\n    while i > 0:\n        i -= 1\n        dp1_add = dict()\n        dp2_add = dict()\n\n        if S[i]+1 < sz: dp1_add[S[i]+1] = dp1[S[i]+1]\n        dp1_add[S[i]-1] = dp1[S[i]-1]\n\n        if S[i]+1 < sz: dp2_add[S[i]+1] = dp2[S[i]+1]\n        if S[i]+1 < sz: dp2_add[S[i]] = dp2[S[i]+1]\n        dp2_add[S[i]-1] = dp1[S[i]-1]\n\n        for k in dp1_add:\n            dp1[k] += dp1_add[k]\n            dp1[k] %= MODULUS\n        for k in dp2_add:\n            dp2[k] += dp2_add[k]\n            dp2[k] %= MODULUS\n    return (dp2[0]-1) % MODULUS\n\ndef ans(S):\n    @lru_cache(None)\n    def dp(mex_before, has_top, i):\n        if i == len(S): return 1\n        if has_top:\n            ret = dp(mex_before, True, i+1)\n            if S[i] in [mex_before-1, mex_before+1]: ret += dp(mex_before, True, i+1)\n            return ret % MODULUS\n        else:\n            ret = dp(mex_before, False, i+1)\n            if S[i]+1 == mex_before: ret += dp(mex_before, False, i+1)\n            if S[i] == mex_before: ret += dp(mex_before+1, False, i+1)\n            if S[i]-1 == mex_before: ret += dp(mex_before, True, i+1)\n            return ret % MODULUS\n    return (dp(0, False, 0)-1) % MODULUS\n\ndef ans_slow(S):\n    ret = 0\n    for s in subsequences(S):\n        if len(s) > 0 and correct(s):\n            ret += 1\n    return ret\n\nif False:\n    import random\n    tc = [0 for _ in range(1000)]\n    print(ans(tc))\nelif False:\n    for N in range(10):\n        for p in product(range(10), repeat=N):\n            assert(ans(p) == ans_bottom(p))\n        print(\"checked\", N)\nelif True:\n    for _ in range(read_int()):\n        input()\n        tc = read_int_list()\n        print(ans_bottom(tc))\n        # assert(ans(tc) == ans_slow(tc))\n\n# seq = [0]*5\n# import itertools\n# for N in range(5):\n#     for p in itertools.product(range(N+3), repeat=N):\n#         if correct(p):\n#             print(p)\n#             seq[len(p)] += 1\n# print(seq)",
                true
            ],
            [
                "from collections import defaultdict\nmo = 998244353\ndef solve(n,A):\n    d_minus = defaultdict(int)\n    d_all = defaultdict(int)\n    d_all[-1] = 1\n    cnt = 0\n    for a in A:\n        # if a==0 and d_all[0] == 0:\n        #     d_all[0] = 1\n        #     cnt += 1\n        #     continue\n        # if a==1:\n        #     if d_all[0] == 0 and d_minus[1]==0:\n        #         d_minus[1] = 1\n        #         cnt += 1\n        #         continue\n        cnt += d_all[a]\n        d_all[a] = (d_all[a] * 2)%mo\n        cnt += d_minus[a]\n        d_minus[a] = (d_minus[a]*2)%mo\n        cnt += d_all[a-2]\n        d_minus[a] = (d_minus[a] + d_all[a-2])%mo\n        cnt += d_all[a-1]\n        d_all[a] = (d_all[a] + d_all[a-1])%mo\n        cnt += d_minus[a+2]\n        d_minus[a+2] = (d_minus[a+2]*2)%mo\n        # d_all[a] = (d_all[a] + d_minus[a+1])%mo\n        cnt = cnt%mo\n    return cnt\n\ndef main():\n    ans = []\n    t = int(input())\n    for _ in range(t):\n        n=int(input())\n        A=list(map(int, input().split(' ')))\n        ans.append(solve(n,A))\n    for a in ans:\n        print(a)\n\n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\nm = 998244353\nt = int(inpu())\nfor _ in range(t):\n    n = int(inpu())\n    a = list(map(int, inpu().split()))\n    d = {(0, -1): 1}\n    for i in range(n + 1):\n        d[(i + 1, i)] = 0\n    for i in range(n):\n        d[(i, i + 1)] = 0\n    for guy in a:\n        if guy > 0:\n            d[(guy - 1, guy)] = (2 * d[(guy - 1, guy)] + d[(guy - 1, guy - 2)]) % m\n        d[(guy + 1, guy)] = (2 * d[(guy + 1, guy)] + d[(guy, guy - 1)]) % m\n        if guy < n - 1:\n            d[(guy + 1, guy + 2)] = (2 * d[(guy + 1, guy + 2)]) % m\n    tot = sum(d[guy] for guy in d)\n    prin(str((tot - 1) % m) + '\\n')",
                true
            ],
            [
                "import sys\n\n# sys.setrecursionlimit(200005)\nint1 = lambda x: int(x)-1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline().rstrip()\ndij = [(0, 1), (-1, 0), (0, -1), (1, 0)]\n# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n# inf = 18446744073709551615\ninf = 4294967295\n# md = 10**9+7\nmd = 998244353\n\ndef solve(n, aa):\n    m1 = [0]*(n+2)\n    m2 = [0]*(n+2)\n    m1[0] = 1\n    ans = 0\n    for a in aa:\n        if a-1 >= 0:\n            ans += m1[a-1]+m2[a-1]\n            m2[a-1] += m1[a-1]+m2[a-1]\n            m2[a-1] %= md\n        ans += m1[a]+m1[a+1]+m2[a+1]\n        m1[a+1] += m1[a]+m1[a+1]\n        m2[a+1] *= 2\n        m1[a+1] %= md\n        m2[a+1] %= md\n        ans %= md\n        # print(a, ans)\n        # print(m1)\n        # print(m2)\n    print(ans)\n\ndef solve2(n, aa):\n    def ok(bit):\n        st = set()\n        for i, a in enumerate(aa):\n            if bit >> i & 1 == 0: continue\n            st.add(a)\n            for b in range(n+1):\n                if b not in st:\n                    if abs(b-a) > 1: return False\n                    break\n        return True\n\n    ans = 0\n    for bit in range(1, 1 << n):\n        if ok(bit):\n            ans += 1\n            print(bin(bit)[2:].zfill(n)[::-1])\n    print(ans)\n\nfor testcase in range(II()):\n    n = II()\n    aa = LI()\n    solve(n, aa)\n    # solve2(n,aa)\n",
                true
            ],
            [
                "MOD = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n\n    plus1 = [0]*(n+2)\n    minus1 = [0]*(n+2)\n    plus1[0] = 1\n\n    for i in a:\n        plus1[i+1] = ((2*plus1[i+1])%MOD + plus1[i])%MOD\n        if(i>0):\n            minus1[i-1] = ((2*minus1[i-1])%MOD + plus1[i-1])%MOD\n        minus1[i+1] = (2*minus1[i+1])%MOD\n    print(((sum(plus1) + sum(minus1))%MOD - 1 + MOD)%MOD)",
                true
            ],
            [
                "import sys\n\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    MOD = 998244353\n    dp = [[1,0]]\n    for i in a:\n        if i - 1 >= len(dp):\n            continue\n        if i > 0:\n            dp[i - 1][1] = (dp[i - 1][0] + 2 * dp[i - 1][1]) % MOD\n        while i + 2 >= len(dp):\n            dp.append([0, 0])\n        dp[i + 1][0] = (2 * dp[i + 1][0] + dp[i][0]) % MOD\n        #dp[i + 2][0] = (dp[i + 2][0] + dp[i][1]) % MOD\n        dp[i + 1][1] = (2 * dp[i + 1][1]) % MOD\n    r = 0\n    for u, v in dp:\n        #print(u, v)\n        r = (r + u + v) % MOD\n    print((r - 1) % MOD)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "mod2=998244353\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp1, dp2 = [0] * (n + 2), [0] * (n + 2)\n    dp1[0] = 1\n    for i in a:\n        dp1[i + 1] = (dp1[i + 1] * 2 + dp1[i]) % mod2\n        if i > 0:\n            dp2[i - 1] = (dp2[i - 1] * 2 + dp1[i - 1]) % mod2\n        dp2[i + 1] = (dp2[i + 1] * 2) % mod2\n    s = sum(dp1 + dp2) % mod2\n    print((s - 1) % mod2)\n\n\n",
                true
            ],
            [
                "mod2=998244353\nfor _ in range(int(input())):\n    n = int(input());a = list(map(int, input().split()));dp1, dp2 = [0] * (n + 2), [0] * (n + 2);dp1[0] = 1\n    for i in a:\n        dp1[i + 1] = (dp1[i + 1] * 2 + dp1[i]) % mod2\n        if i > 0: dp2[i - 1] = (dp2[i - 1] * 2 + dp1[i - 1]) % mod2\n        dp2[i + 1] = (dp2[i + 1] * 2) % mod2\n    s = sum(dp1 + dp2) % mod2;print((s - 1) % mod2)",
                true
            ],
            [
                "import sys\n\ndef solve(arr):\n    # complete number, hole number\n    data = [[0, 0] for _ in range(len(arr) + 5)]\n    for item in arr:\n        data[item][0] *= 2\n        data[item][1] *= 2\n        data[item + 2][1] *= 2\n        if item > 0:\n            data[item][0] += data[item - 1][0]\n        if item > 1:\n            data[item][1] += data[item - 2][0]\n        if item == 0:\n            data[item][0] += 1\n        elif item == 1:\n            data[item][1] += 1\n        data[item][0] %= 998244353\n        data[item][1] %= 998244353\n    result = 0\n    for item in data:\n        result = (result + item[0] + item[1]) % 998244353\n    return result\n\nt = int(sys.stdin.readline())\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().strip().split()))\n    print(solve(arr))\n",
                true
            ],
            [
                "import sys\nimport math\nfrom collections import deque,Counter\nfrom sys import stdin\n\n#sys.setrecursionlimit(10**7)\n\nint1=lambda x: int(x)-1\nstinput=lambda :stdin.readline()[:-1]\nii=lambda :int(stinput())\nmi=lambda :map(int, stdin.readline().split())\nli=lambda :list(mi())\nmi1=lambda :map(int1, stdin.readline().split())\nli1=lambda :list(mi1())\nmis=lambda :map(str, stdin.readline().split())\n\npr=print\nrg=range\n\nfrom collections import defaultdict\n\n\nmod=10**9+7\nMod=998244353\nINF=10**18\nans=0\n\ndef f(a):\n  mex=0\n  used=[0]*(n+2)\n  for i in a:\n    used[i]=1\n    while used[mex]==1:\n      mex+=1\n    if abs(mex-i)>1:\n      return False\n  return True\nimport random\n\nt=ii()\n\nfor _ in range(t):\n  n=ii()\n  a=li()\n  #n=8\n  #a=[random.randint(0,5) for i in range(n)]\n  dp0=[0]*(n+3)\n  dp1=[0]*(n+3)\n  dp2=[0]*(n+3)\n  for i in a:\n    if i==0:\n      dp0[0]+=dp0[0]+1\n      dp0[0]%=Mod\n      dp2[1]+=dp2[1]+dp1[2]\n      dp2[1]%=Mod\n      \n    else:\n      dp0[i]+=dp0[i]+dp0[i-1]\n      #dp0[i+1]+=dp1[i+1]\n      dp0[i]%=Mod\n      #dp0[i+1]%=Mod\n      if i==1:\n        dp1[1]*=2\n        dp1[1]+=1\n      else:\n        dp1[i]*=2\n        dp1[i]+=dp0[i-2]\n      dp1[i]%=Mod\n      dp2[i+1]+=dp2[i+1]+dp1[i+2]\n      dp2[i-1]+=dp2[i-1]\n      dp2[i+1]%=Mod\n      dp2[i-1]%=Mod\n    #print(dp0,dp1,dp2)\n  #print(dp0,dp1)\n  print((sum(dp0)+sum(dp1)+sum(dp2))%Mod)\n  '''\n  ans=0\n  for bit in range(1,2**n):\n    b=[]\n    for i in range(n):\n      if (bit>>i)&1:\n        b.append(a[i])\n    if f(b):\n      ans+=1\n      #print(b)\n  print(ans)\n  '''",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nLOGN = 20\nINF = 10 ** 9 + 5\n# MOD = 10 ** 9 + 7\nMOD = 998244353\n# ============================ START OF MY CODE ============================\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    dp1 = [0 for _ in range(n + 2)]  # dp1[i]: ans of type 1 for mex = i\n    dp2 = [0 for _ in range(n + 2)]  # dp2[i]: ans of type 2 for mex = i\n    dp1[0] = 1  # empty seq => mex = 0\n\n    for (i, elem) in enumerate(A):\n        # elem = mex - 1 (mex = elem + 1)\n        dp1[elem + 1] += dp1[elem + 1]\n        dp2[elem + 1] += dp2[elem + 1]\n\n        # elem = mex (mex = elem)\n        dp1[elem + 1] += dp1[elem]\n\n        # elem = mex + 1 (mex = elem - 1)\n        if elem - 1 >= 0:\n            dp2[elem - 1] += dp2[elem - 1]\n            dp2[elem - 1] += dp1[elem - 1]\n            dp2[elem - 1] %= MOD\n\n        dp1[elem + 1] %= MOD\n        dp2[elem + 1] %= MOD\n\n    ans = sum(dp1) + sum(dp2) - 1  # empty seq doesn't count\n    ans %= MOD\n    print(ans)\n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        solve()",
                true
            ],
            [
                "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, sqrt, factorial, pi, inf\nfrom collections import deque, defaultdict\nfrom bisect import bisect, bisect_left\nfrom time import time\nfrom itertools import permutations as per\nfrom heapq import heapify, heappush, heappop, heappushpop\n\ninput = stdin.readline\nR = lambda: map(int, input().split())\nI = lambda: int(input())\nS = lambda: input().rstrip('\\r\\n')\nL = lambda: list(R())\nP = lambda x: stdout.write(str(x) + '\\n')\nlcm = lambda x, y: (x * y) // gcd(x, y)\nnCr = lambda x, y: (f[x] * inv((f[y] * f[x - y]) % N)) % N\ninv = lambda x: pow(x, N - 2, N)\nsumx = lambda x: (x ** 2 + x) // 2\nN = 10 ** 9 + 7\n\nmod=998244353\nfor _ in range(I()):\n    n=I()\n    dp1=[0]*(n+2)\n    dp2=[0]*(n+2)\n    dp1[0]=1\n    for i in R():\n        dp1[i+1]=(dp1[i+1]<<1)%mod\n        dp1[i+1]=(dp1[i+1]+dp1[i])%mod\n        if i>0:\n            dp2[i-1]=(dp2[i-1]<<1)%mod\n            dp2[i-1]=(dp2[i-1]+dp1[i-1])%mod\n        dp2[i+1]=(dp2[i+1]<<1)%mod\n    ans=0\n    for i in range(n+2):\n        ans=(ans+dp1[i]+dp2[i])%mod\n    print((ans-1)%mod)\n",
                true
            ],
            [
                "from sys import stdin, stdout\n\nmod = 998244353\n\ndef pow_mod(x, y):\n    if y == 1:\n        return x % mod \n\n    half_res = pow_mod(x, y // 2)\n    result = half_res * half_res\n    if y % 2 == 1:\n        result *= x\n\n    return result % mod \n\nt = int(stdin.readline())\nfor tt in range(t):\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().split()]\n\n    ones = 0\n    mx = 0\n    for i in range(n):\n        if a[i] == 1:\n            ones += 1\n        if a[i] > mx:\n            mx = a[i]\n\n    sm = pow_mod(2, ones) - 1 if ones > 0 else 0\n\n    # print(sm, '~~~')\n\n    ending_to = [0 for i in range(mx + 1)]\n    done_to = [0 for i in range(mx + 1)]\n\n    for i in range(n):\n        ending_to[a[i]] *= 2\n        if a[i] != 0:\n            ending_to[a[i]] += ending_to[a[i] - 1]\n        else:\n            ending_to[a[i]] += 1\n        ending_to[a[i]] %= mod\n\n        if a[i] >= 2:\n            done_to[a[i] - 1] *= 2\n            done_to[a[i] - 1] += ending_to[a[i] - 2]\n            done_to[a[i] - 1] %= mod\n\n        if a[i] <= mx - 1 and done_to[a[i] + 1] > 0:\n            done_to[a[i] + 1] *= 2\n            # done_to[a[i] + 1] += ending_to[a[i] - 1] if a[i] > 0 else 0\n            done_to[a[i] + 1] %= mod\n\n    # for i in range(mx + 1):\n    #     print(i, ending_to[i], '!')\n    #     print(i, done_to[i], '!!')\n\n    for i in range(mx + 1):\n        sm = (sm + ending_to[i] + done_to[i]) % mod\n\n    sm %= mod\n\n    stdout.write(str(sm) + '\\n')",
                true
            ],
            [
                "from sys import stdin, stdout\n\nMOD = 998244353\n\n\ndef solve_test(n, elements):\n    dp_increasing = [0] * (n + 1)\n    dp_alternate = [0] * (n + 1)\n    # dp_increasing[i] = # subsequences that end on element i\n    # dp_alternate[i] = # subsequences that alternate with mex value equal to i (mex can only be 0 1 2 3 .. n - 1\n    # 0 1 2 3 4 .. x-2 x\n\n    for x in elements:\n        dp_increasing[x] = (dp_increasing[x] * 2) % MOD  # 0 1 2 .. x | add x\n        if x >= 1:\n            dp_increasing[x] = (dp_increasing[x] + dp_increasing[x - 1]) % MOD  # 0 1 2 3 .. x-1 | add x\n        if x == 0:\n            dp_increasing[0] = (dp_increasing[0] + 1) % MOD  # we have subsequence of length 1 for [0]\n\n        # add x to a sequence alternating with MEX (x-1) or (x+1)\n        if x >= 1:\n            dp_alternate[x - 1] = (dp_alternate[x - 1] * 2) % MOD\n        if x + 1 < n + 1:\n            dp_alternate[x + 1] = (dp_alternate[x + 1] * 2) % MOD\n\n        # 0 1 2 .. x - 2 | add x ( form another sequence) that alternates with MEX (x-1)\n        if x >= 2:\n            dp_alternate[x - 1] = (dp_alternate[x - 1] + dp_increasing[x - 2]) % MOD\n\n        if x == 1:\n            dp_alternate[0] = (dp_alternate[0] + 1) % MOD  # we can have [1]\n    answer = [(x + y) % MOD for x, y in zip(dp_increasing, dp_alternate)]\n    return sum(answer) % MOD\n\n\ndef stress_test():\n    n = int(1e5)\n    elements = [i for i in range(n)]\n    solve_test(n, elements)\n\n\ndef read_input():\n    tests = int(stdin.readline())\n    for test in range(tests):\n        n = int(stdin.readline())\n        elements = [int(x) for x in stdin.readline().split()]\n        stdout.write(str(solve_test(n, elements)) + '\\n')\n\n\ndef read_file():\n    with open(\"input.txt\") as f:\n        tests = int(f.readline())\n        for test in range(tests):\n            n = int(f.readline())\n            elements = [int(x) for x in f.readline().split()]\n            print(solve_test(n, elements))\n\n\n# Press the green button in the gutter to run the script.\nif __name__ == '__main__':\n    read_input()\n",
                true
            ],
            [
                "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\ninteractive = False\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\n\nflush = sys.stdout.flush\nif interactive and not testing:\n    input = sys.stdin.readline\nelse:\n    inputData = InputData()\n    input = inputData.input\n\ndef intin():\n    return(int(eval(input())))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(eval(input())))\ndef strin():\n    return eval(input())\ndef lout(l, sep=\"\\n\", toStr=True):\n    print((sep.join(list(map(str, l)) if toStr else l)))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print((args[0] if len(args)==1 else args))\n    if kargs: print([(k,v) for k,v in list(kargs.items())])\ndef ask(q):\n    sys.stdout.write(str(q)+'\\n')\n    flush()\n    return intin()\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\nfrom itertools import combinations\n\nMOD = 998244353\ndef mex(a):\n    a = set(a)\n    x = 0\n    while x in a:\n        x += 1\n    return x\n\ndef force():\n    n = intin()\n    a = intlin()\n    ans = 0\n    for l in range(1,n+1):\n        for c in combinations(a, l):\n            for i in range(len(c)):\n                m = mex(c[:i+1])\n                if abs(c[i] - m) > 1:\n                    break\n            else:\n                dout(c)\n                ans += 1\n    return ans%MOD\n\ndef main():\n    n = intin()\n    a = intlin()\n    ans = 0\n    dp1 = [0]*(n+10)\n    dp2 = [0]*(n+10)\n    k = 0\n    for i in range(n):\n        ans %= MOD\n        x = a[i]\n        if x == 0:\n            ans += dp1[0]+1\n            dp1[0] += dp1[0]+1\n            ans += dp2[2]\n            dp2[2] *= 2\n        elif x == 1:\n            k += 1\n            ans += dp1[1]+dp1[0]\n            dp1[1] += dp1[1]+dp1[0]\n            ans += dp2[3]\n            dp2[3] *= 2\n        else:\n            ans += dp1[x-1]+dp1[x]\n            dp1[x] += dp1[x-1]+dp1[x]\n\n            ans += dp1[x-2]+dp2[x]+dp2[x+2]\n            dp2[x] += dp1[x-2]+dp2[x]\n            dp2[x+2] *= 2\n        dp1[x] %= MOD\n        dp2[x] %= MOD\n        dp2[x+2] %= MOD\n    return (ans+pow(2,k,MOD)-1)%MOD\n\nanss = []\nfor _ in range(intin()):\n    # anss.append(force())\n    anss.append(main())\n    # anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print((int(round(time() * 1000))  - start_time))\n",
                true
            ],
            [
                "\nimport sys\nfrom sys import stdin\n\ntt = int(stdin.readline())\n\nANS = []\nmod = 998244353\n\nfor loop in range(tt):\n\n    n = int(stdin.readline())\n    a = list(map(int,stdin.readline().split()))\n\n    dp = [[0,0] for i in range(n+2)]\n    dp[0][0] = 1\n\n    for i in a:\n\n        ch = []\n\n        #put same\n        ch.append( (i+1,0,dp[i][0]) )\n\n        #put -1\n        ch.append( (i+1,0,dp[i+1][0]) )\n        ch.append( (i+1,1,dp[i+1][1]) )\n\n        #put +1\n        ch.append( (i-1,1,dp[i-1][0]) )\n        ch.append( (i-1,1,dp[i-1][1]) )\n\n        for x,y,p in ch:\n            dp[x][y] += p\n            dp[x][y] %= mod\n\n    ans = 0\n    for i in range(n+2):\n        ans += dp[i][0] + dp[i][1]\n\n    ans -= 1\n    ans %= mod\n    ANS.append(str(ans))\n\nprint (\"\\n\".join(ANS))\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\ninp = lambda: list(map(int, sys.stdin.readline().rstrip(\"\\r\\n\").split()))\nMod = 998244353\n    \ntc = 1\ntc = int(input())\nfor test_cases in range(1,tc+1):\n    n = int(input())\n    a = inp()\n    dp1 = [0]*(n+5)\n    dp2 = [0]*(n+5)\n    dp1[0] = 1\n    for i in a:\n        dp1[i+1] = (dp1[i+1]+dp1[i+1])%Mod\n        dp1[i+1]=(dp1[i+1]+dp1[i])%Mod\n        dp2[i-1] = (dp2[i-1]+dp2[i-1])%Mod\n        dp2[i-1]=(dp2[i-1]+dp1[i-1])%Mod\n        dp2[i+1] = (dp2[i+1]+dp2[i+1])%Mod\n    ans = 0\n    for i in range(n+3):\n        ans = (ans+dp1[i])%Mod\n        ans=(ans+dp2[i])%Mod\n    print((ans-1+Mod)%(Mod))\n\n\n    \n            \n    ",
                true
            ],
            [
                "from sys import stdin, stdout\n\nMOD = 998244353\n\n\ndef solve_test(n, elements):\n    dp_increasing = [0] * (n + 1)\n    dp_alternate = [0] * (n + 1)\n    # dp_alternate[i] = # subsequences that alternate with mex value equal to i\n    # 0 1 2 3 4 .. x-2 x\n\n    for x in elements:\n        dp_increasing[x] = dp_increasing[x] * 2  # 0 1 2 .. x | add x\n        if x >= 1:\n            dp_increasing[x] = dp_increasing[x] + dp_increasing[x - 1]  # 0 1 2 3 .. x-1 | add x\n        if x == 0:\n            dp_increasing[x] = dp_increasing[x] + 1  # we have subsequence of length 1 for [0]\n        dp_increasing[x] %= MOD\n        if x >= 1:\n            dp_alternate[x - 1] = dp_alternate[x - 1] * 2  # just add 2 to 0 2 2 2 2\n        if x >= 2:\n            dp_alternate[x - 1] = dp_alternate[x - 1] + dp_increasing[x - 2]\n        if x + 1 < n + 1:\n            dp_alternate[x + 1] = (dp_alternate[x + 1] * 2) % MOD\n            # 0 1 2 .. x - 2 | add x ( from another sequence\n        if x == 1:\n            dp_alternate[x - 1] = dp_alternate[x - 1] + 1  # we can have [1]\n        dp_alternate[x] %= MOD\n    answer = [(x + y) % MOD for x, y in zip(dp_increasing, dp_alternate)]\n    return sum(answer) % MOD\n\n\ndef stress_test():\n    n = int(1e5)\n    elements = [i for i in range(n)]\n    solve_test(n, elements)\n\n\ndef read_input():\n    tests = int(stdin.readline())\n    for test in range(tests):\n        n = int(stdin.readline())\n        elements = [int(x) for x in stdin.readline().split()]\n        stdout.write(str(solve_test(n, elements)) + '\\n')\n\n\ndef read_file():\n    with open(\"input.txt\") as f:\n        tests = int(f.readline())\n        for test in range(tests):\n            n = int(f.readline())\n            elements = [int(x) for x in f.readline().split()]\n            print(solve_test(n, elements))\n\n\n# Press the green button in the gutter to run the script.\nif __name__ == '__main__':\n    read_input()\n",
                true
            ],
            [
                "import sys,os,io\ninput = sys.stdin.readline # for strings\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline # for non-strings\n\nPI = 3.141592653589793238460\nINF =  float('inf')\n# MOD  = 1000000007\nMOD = 998244353\n\n\ndef bin32(num):\n    return '{0:032b}'.format(num)\n\ndef add(x,y):\n    return (x+y)%MOD\n\ndef sub(x,y):\n    return (x-y+MOD)%MOD\n\ndef mul(x,y):\n    return (x*y)%MOD\n\ndef gcd(x,y):\n    if y == 0:\n        return x\n    return gcd(y,x%y)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\ndef power(x,y):\n    res = 1\n    x%=MOD\n    while y!=0:\n        if y&1 :\n            res = mul(res,x)\n        y>>=1\n        x = mul(x,x)\n        \n    return res\n        \ndef mod_inv(n):\n    return power(n,MOD-2)\n\ndef prob(p,q):\n    return mul(p,power(q,MOD-2))    \n  \ndef ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef ls():\n    return [i for i in input().split()]\n\nfor t in range(ii()):\n    t+=1\n    n = ii()\n    a = li()\n    ans = 0\n    # 0 , 1 , 2 ... 3 mex = 4\n    dp1 = [0 for i in range(n + 2)]\n\n    # 0 , 1 , 2 , ... 3 , ...5 mex = 4\n    dp2 = [0 for i in range(n + 2)]\n\n    dp1[0] = 1\n    zeros = 1\n    for i in a:\n        # i = 4\n        dp1[i + 1] = mul(dp1[i + 1] , 2)\n        dp1[i + 1] = add(dp1[i + 1] , dp1[i])\n\n        dp2[i + 1] = mul(dp2[i + 1] , 2)\n        if i != 0:\n\n            dp2[i-1] = mul(dp2[i-1] , 2)\n            dp2[i-1] = add(dp2[i-1] , dp1[i-1])\n    # print(dp1 , dp2)\n    for i in dp1:   \n        ans = add(ans , i)\n    for i in dp2:\n        ans = add(ans , i)\n    ans = sub(ans , dp1[0])\n    print(ans)\n        \n\n",
                true
            ],
            [
                "import sys, math\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\n#mod = 10**9 + 7\nmod = 998244353\ninput = lambda: sys.stdin.readline().rstrip()\nli = lambda: list(map(int, input().split()))\n\nt = int(input())\n\nfor _ in range(t):\n    N = int(input())\n    A = li()\n    x = N+5\n    data = [0] * x\n    data2 = [0] * x\n    ans = 0\n    for i in range(N):\n        a = data[A[i]]\n        b = data2[A[i]]\n        c = data2[A[i]+2]\n        if A[i] >= 1:\n            a += data[A[i]-1]\n        if A[i] >= 2:\n            b += data[A[i]-2]\n        if A[i] == 0:\n            a += 1\n        if A[i] == 1:\n            b += 1\n        a %= mod; b %= mod\n        ans += a + b + c\n        ans %= mod\n\n        data[A[i]] += a\n        data[A[i]] %= mod\n        data2[A[i]] += b\n        data2[A[i]+2] += c\n        data2[A[i]] %= mod\n\n    print(ans % mod)\n\n\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nLuntik came out for a morning stroll and found an array a of length n. He calculated the sum s of the elements of the array (s= \u2211_{i=1}^{n} a_i). Luntik calls a subsequence of the array a nearly full if the sum of the numbers in that subsequence is equal to s-1.\n\nLuntik really wants to know the number of nearly full subsequences of the array a. But he needs to come home so he asks you to solve that problem!\n\nA sequence x is a subsequence of a sequence y if x can be obtained from y by deletion of several (possibly, zero or all) elements.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The next 2 \u22c5 t lines contain descriptions of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 60) \u2014 the length of the array.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 10^9) \u2014 the elements of the array a.\n\nOutput\n\nFor each test case print the number of nearly full subsequences of the array.\n\nExample\n\nInput\n\n\n5\n5\n1 2 3 4 5\n2\n1000 1000\n2\n1 0\n5\n3 0 2 1 1\n5\n2 1 0 3 0\n\n\nOutput\n\n\n1\n0\n2\n4\n4\n\nNote\n\nIn the first test case, s=1+2+3+4+5=15, only (2,3,4,5) is a nearly full subsequence among all subsequences, the sum in it is equal to 2+3+4+5=14=15-1.\n\nIn the second test case, there are no nearly full subsequences.\n\nIn the third test case, s=1+0=1, the nearly full subsequences are (0) and () (the sum of an empty subsequence is 0).\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "a=input()\nwhile True:\n    try:\n        t=int(input()) \n        a=[int(i) for i in input().split()]\n        n_0=a.count(0)\n        n_1=a.count(1)\n        #print(n_0,n_1)\n        ans=0\n        #if n_1>1:\n            #n_1-=1\n        ans+=n_1*2**n_0\n        if sum(a)==1:\n            ans=2**(n_0)\n        print(ans)\n    except:\n        break",
                true
            ],
            [
                "import bisect\nimport collections\nimport copy\nimport enum\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\nsys.setrecursionlimit(3001)\n\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    sa = sum(arr)\n    c1 = arr.count(1)\n    c0 = arr.count(0)\n    print(c1*2**c0)\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    ones = l.count(1)\n    zeros = 2**(l.count(0))\n    print(ones*zeros)\n",
                true
            ],
            [
                "def main():\n    for t in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        zeros = arr.count(0)\n        ones = arr.count(1)\n\n        print((2**zeros) * ones)\nmain()",
                true
            ],
            [
                "for t in range(int(input())):\n    n=int(input())\n    l=[int(x) for x in input().split()]\n    c1=l.count(1)\n    c0=l.count(0)\n    if c0>0:\n        ans=2**c0\n        print(ans*c1)\n    else:\n        print(c1)",
                true
            ],
            [
                "from collections import Counter\nimport math\nimport bisect\nfrom sys import stdin,stdout\ninput=stdin.readline\n\nmod=10**9+7\ndef inp(): return map(int,input().split())\n\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(inp())\n    d=Counter(a)\n    p=d.get(1,0)\n    q=d.get(0,0)\n    print(p*(2**q))",
                true
            ],
            [
                "from sys import stdin,stdout\ninput = stdin.readline\n\ndef output(answer):\n    stdout.write(\"{}\\n\".format(answer))\n    \n    \nfor _ in range(int(input())):\n    \n    n = int(input())\n    arr = list(map(int,input().split()))\n    cn0,cn1 = 0,0\n    \n    for val in arr:\n        if val == 0:\n            cn0 += 1\n        if val == 1:\n            cn1 += 1\n            \n    output((2**cn0) * cn1)",
                true
            ],
            [
                "from sys import stdin,stdout\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    arr = list(map(int,stdin.readline().strip().split()))\n    c1 = arr.count(1)\n    c0 = arr.count(0)\n    if c0>0 and c1:\n        print(pow(2,c0)*c1)\n    else:\n        print(c1)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    zero=0\n    one=0\n    for i in arr:\n        if i ==1:\n            one+=1\n        elif i ==0:\n            zero+=1\n    print(pow(2,zero)*one)",
                true
            ],
            [
                "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    print(x.count(1)*(2**x.count(0)))",
                true
            ],
            [
                "from collections import Counter\nimport string\nimport math\nimport bisect\n#import random\nimport sys\n# sys.setrecursionlimit(10**6) \nfrom fractions import Fraction\ndef array_int():\n    return [int(i) for i in sys.stdin.readline().split()]\ndef vary(arrber_of_variables):\n    if arrber_of_variables==1:\n        return int(sys.stdin.readline())\n    if arrber_of_variables>=2:\n        return map(int,sys.stdin.readline().split()) \ndef makedict(var):\n    return dict(Counter(var))\ntestcases=vary(1)\nfor _ in range(testcases):\n    n=vary(1)\n    arr=array_int()\n    pt=arr.count(1)\n    st=arr.count(0)\n    if pt>0:\n        if st==0:\n            print(pt)\n        else:\n            print(pt*(2**st))\n    else:\n        print(0)",
                true
            ],
            [
                "i = int(input())\n\nfor j in range(i):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    \n    print((2**a.count(0))*a.count(1))\n",
                true
            ],
            [
                "t=int(input())\nfor test in range(t):\n    n=int(input())\n    array=list(map(int,input().split()))\n    z,o=0,0\n    for i in range(n):\n        if array[i]==0:\n            z+=1\n        elif array[i]==1:\n            o+=1\n    print(o*(2**z))",
                true
            ],
            [
                "import math;from heapq import heappush,heappop,heapify;import random;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());H=1000000000+7\nfor _ in range(I()):\n    n=I()\n    l=L()\n    print(pow(2,l.count(0))*l.count(1))",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    one=l.count(1)\n    zero=l.count(0)\n    print(one * 2**zero)",
                true
            ],
            [
                "N = int(input())\n\nfor i in range(N):\n    n = int(input())\n    mas = list(map(int, input().split()))\n    dick = {0 : 0, 1: 0}\n    for x in mas:\n        if x in dick:\n            dick[x] += 1\n    print(dick[1] * 2 ** dick[0])",
                true
            ],
            [
                "for _ in range(int(input())):\n    input()\n    arr = list(map(int, input().split()))\n    null = 1\n    tt = 0\n    for i in arr:\n        if i == 0:\n            null *= 2\n        if i == 1:\n            tt += 1\n    \n    #print(null, tt)\n    print(null * tt)",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby, accumulate\nfrom copy import deepcopy\nMOD = 10**9+7\nINF = float('inf')\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n    n = int(input())\n    A = rl()\n    total = sum(A)\n    c = A.count(1)\n    if c == 0:\n        print(0)\n    else:\n        x = A.count(0)\n        if total == 1 or c == 1:\n            print(2**x)\n        elif x == 0:\n            print(c)\n        else:\n            print(2**x * c)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(item) for item in input().split()]\n    ones = 0\n    zeros = 0\n\n    for i in range(n):\n        if arr[i] == 1:\n            ones += 1\n        if arr[i] == 0:\n            zeros += 1\n\n    subsequences_formed = ((2**zeros)-1)*ones\n    print(ones+subsequences_formed)",
                true
            ],
            [
                "t=int(input())\nans=[0]*t\nfor i in range(t):\n    n=int(input())\n    s=0\n    q0=0\n    q1=0\n    a=list(map(int, input().split()))\n    for j in range(n):\n        if a[j]==0:\n            q0+=1\n        elif a[j]==1:\n            q1+=1\n    ans[i]=q1 << q0\nfor i in range(t):\n    print(ans[i])\n\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n\ndef ajj(N):\n    prev = 1\n    ans = 0\n    ans += prev\n    for i in range(1, N + 1):\n        curr = (prev * (N - i + 1)) // i\n        ans += curr\n        prev = curr\n    return ans\n    \nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    ze = 0\n    on = 0\n    for i in a:\n        if i == 1:\n            on += 1\n        if i == 0:\n            ze += 1\n    print(ajj(ze)*on)\n    ",
                true
            ],
            [
                "from collections import defaultdict\n\nfact = [0] * 61\nfact[0] = 1\n\nfor i in range(1, 61):\n    fact[i] = fact[i-1] * i\n\ndef nCr(n, k):\n    if k == 0:\n        return 1\n    if n == k:\n        return 1\n    return fact[n]//(fact[k] * (fact[n] - fact[k]))\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n\n    numOnes = sum([1 for i in a if i==1])\n    numZeros = sum([1 for i in a if i==0])\n    \n    if numOnes == 0:\n        print(0)\n        return\n\n    print(2 ** numZeros * numOnes)\n    return\n\n\n\n\n\n\nt = int(input())\n\nfor _ in range(t):\n    solve()\n",
                true
            ],
            [
                "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    # num_ones = int(a[0] == 1)\n    # zero_runs = []\n    # if a[0] == 0:\n    #     zero_runs.append(1)\n    # for i in range(1, n):\n    #     if a[i] == 1:\n    #         num_ones += 1\n    #     elif a[i] == 0:\n    #         if a[i-1] == 0:\n    #             zero_runs[-1] += 1\n    #         else:\n    #             zero_runs.append(1)\n    # count = num_ones\n    # for c in zero_runs:\n    #     count *= (c + 1)\n    # return count\n    num_ones = a.count(1)\n    num_zeros = a.count(0)\n    return 2**num_zeros * num_ones\n\nt = int(input())\noutput = []\nfor _ in range(t):\n    output.append(solve())\nprint(*output, sep=\"\\n\")\n",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    count0 = 0\n    count1 = 0\n    for i in a:\n        if i == 1:\n            count1 += 1\n        if i == 0:\n            count0 += 1\n\n    print(int(count1*math.pow(2, count0)))",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int,input().split()))\n    \n    c1 = A.count(1)\n    c0 = A.count(0)\n    ans = c1*(2**c0)\n    print(ans)",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nimport bisect\nimport itertools\nimport math\nfrom collections import deque\nfrom collections import Counter\nimport copy\n\ndef solve():\n    n = int(input())\n    a = list(map(int,input().split()))\n    one = a.count(1)\n    zero = a.count(0)\n    print(one * 2 ** zero)\n\n\n    \nt = int(input())\nfor _ in range(t):\n    solve()\n\n",
                true
            ],
            [
                "from sys import stdin,stdout,setrecursionlimit\nstdin.readline\ndef mp(): return list(map(int, stdin.readline().strip().split()))\ndef it():return int(stdin.readline().strip())\nfrom collections import defaultdict as dd,Counter as C,deque\nfrom math import ceil,gcd,sqrt,factorial,log2,floor    \nfrom bisect import bisect_right as br,bisect_left as bl\nfrom heapq import *\nmod = 10**9+7\ninf = (1<<60)\n\n\nfor _ in range(it()):\n    n = it()\n    l = mp()\n    k = C(l)\n\n    zero = k[0]\n    one = k[1]\n\n    print((2**zero)*one)\n",
                true
            ],
            [
                "for u in range(int(input())):\n    n = int(input())\n    x = [int(w) for w in input().split()]\n    \n    a = x.count(0)\n    b = x.count(1)\n    \n    ans = (2**a)*b\n    print(ans)",
                true
            ],
            [
                "def read_nums():\n    return [int(x) for x in input().split()]\n\n\ndef solve():\n    n, = read_nums()\n    elems = read_nums()\n    zeros = elems.count(0)\n    ones = elems.count(1)\n    print(ones * (2 ** zeros))\n\n\ndef main():\n    t, = read_nums()\n    for _ in range(t):\n        solve()\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "import sys\ndef II():\n    return int(sys.stdin.readline())\n \ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n    return map(int, sys.stdin.readline().split())\n \ndef SI():\n    return sys.stdin.readline().strip()\n \ndef C(n, k, mod):\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\n \ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\n\nfor _ in range(II()):\n    n = II()\n    a = LI()\n    one = a.count(1)\n    zer = a.count(0)\n    print((2**zer)*one)",
                true
            ],
            [
                "from os import path, truncate\nfrom sys import int_info, stdin, stdout\nif path.exists('tc.txt'):\n    stdin = open('tc.txt', 'r')\ndef gmi(): return map(int, stdin.readline().strip().split())\ndef gms(): return map(str, stdin.readline().strip().split())\ndef gari(): return list(map(int, stdin.readline().strip().split()))\ndef gart(): return tuple(map(int, stdin.readline().strip().split()))\ndef gars(): return list(map(str, stdin.readline().strip().split()))\ndef gs(): return stdin.readline().strip()\ndef gls(): return list(stdin.readline().strip())\ndef gi(): return int(stdin.readline())\n\nfor _ in range(int(input())):\n    n=map(int,input())\n    l=list(map(int,input().split()))\n    n0=l.count(0)\n    n1=l.count(1)\n    if n1==0:\n        print(0)\n    else:\n        print((2**n0)*n1)",
                true
            ],
            [
                "\nimport math\n\ndef comb(n,r):\n    x=(math.factorial(n))/(math.factorial(r)*(math.factorial(n-r)))\n    return int(x)\n\n\n\n\ndef solve():\n    n=int(input())\n    l=list(map(int,input().split()))\n    if(0 not in l and 1 not in l):\n        ans=0\n        print(ans)\n        return\n    if(0 not in l and 1 in l):\n        ans=l.count(1)\n        print(ans)\n        return\n    elif(0 in l and 1 not in l):\n        ans=0\n        print(ans)\n        return\n    elif(0 in l and 1 in l):\n        x=l.count(0)\n        x1=(pow(2,x)-1)\n        y=l.count(1)\n\n        ans=x1*y+(y)\n        print(ans)\n        return\nt=int(input())\nwhile(t!=0):\n    solve()\n    t-=1\n",
                true
            ],
            [
                "for t in range(int(input())):\n n=int(input())\n a=list(map(int,input().strip().split()))\n k0=a.count(0); k1=a.count(1)\n print(k1*(1<<k0))\n\n",
                true
            ],
            [
                "inf = float('inf')\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\nimport array\n\n# sys.setrecursionlimit(10 ** 9)\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef maps(): return [int(i) for i in input().split()]\n\n\nlogging.basicConfig(\n    format=\"%(message)s\",\n    level=logging.WARNING,\n)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\n\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom math import factorial\nfor _ in range(*maps()):\n    n, = maps()\n    a = list(maps())\n    d = defaultdict(int)\n    for i in a:\n        d[i] += 1\n    goal = sum(a) - 1\n    if d[0] + d[1] == 0:\n        print(0)\n        continue\n\n    if d[1] == 0:\n        print(0)\n        continue\n\n    ans = d[1] * pow(2, d[0])\n    print(ans)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    n1=l.count(0)\n    m = l.count(1)\n    \n    \n    def power(x,n):\n        res=1\n        while n>0:\n            if n%2==0:\n                n = n//2\n                x= x*x\n            else:\n                n = n-1\n                res = res*x\n        return res\n    a = power(2,n1)\n    print(a*m)",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    arr=[int(x) for x in input().split()]\n    if n==2 and sum(arr)==1:\n        print(2)\n    elif 1 in arr:\n        print(arr.count(1)*2**(arr.count(0)))\n    else:\n        print(0)\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split(\" \")))\n    a=0\n    b=0\n    for i in range(n):\n        if l[i]==1:\n            a=a+1\n        elif l[i]==0:\n            b=b+1\n    if a==0 and b==0:\n        print(0)\n    else:\n        if b==0:\n            print(a)\n        elif a==0:\n            print(0)\n        else:\n            print(a*(2**b))\n    ",
                true
            ],
            [
                "def C(n, k):\n    if k == n or k == 0:\n        return 1\n    if k != 1:\n        return C(n-1, k) + C(n-1, k-1)\n    else:\n        return n\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    cnk = 1\n    n0 = a.count(0)\n    n1 = a.count(1)\n    if n0 == 0:\n        cnk = 0\n    for j in range(1, n0):\n        cnk = cnk*2 +1\n    ans = (n1 + n1 * cnk)\n    print(ans)\n    \n        \n",
                true
            ],
            [
                "# https://codeforces.com/contest/1582/problem/B\nimport sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n# do magic here\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ones = arr.count(1)\n    zeros = arr.count(0)\n    print(ones * (2**zeros))\n",
                true
            ],
            [
                "t = int(input())\nfor x in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    count0 = a.count(0)\n    count1 = a.count(1)\n    if count0!=0:\n        num1 = (2**count0)* count1\n    else:\n        num1 = count1\n    print(num1)",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    n0=0\n    n1=0\n    for ele in a:\n        if ele==1:\n            n1+=1\n        elif ele==0:\n            n0+=1\n    if n1==0:\n        print(0)\n    else:\n        print(n1*int(pow(2,n0)))",
                true
            ],
            [
                "tc = int(input())\nfor _ in range(tc):\n      n = int(input())\n      arr = list(map(int, input().split()))\n      one = arr.count(1)\n      zero = arr.count(0)\n      print(one * (2 ** zero))\n",
                true
            ],
            [
                "t=int(input())\nfor h in range(t):\n    n=int(input())\n    A=list(map(int,input().split()))\n    s=sum(A)\n    r=0\n    d=0\n    for i in range(n):\n        if A[i]==1:\n            r+=1\n        if A[i]==0:\n            d+=1\n    print(r*(2**d))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    lst = [*map(int, input().split())]\n    ones = lst.count(1)\n    zeros = lst.count(0)\n    res = 0\n    if zeros == 0:\n        res = ones\n    else:\n        res = ones * (2 ** zeros)\n    print(res)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    ai=list(map(int,input().split()))\n    ctz=ai.count(0)\n    cto=ai.count(1)\n    print(pow(2,ctz)*cto)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    nulls = 0\n    ones = 0\n    st = input().split()\n    for j in range(n):\n        q = int(st[j])\n        if q==0:\n            nulls+=1\n        if q==1:\n            ones+=1\n    z = 2**nulls * ones\n    print(z)\n",
                true
            ],
            [
                "import math\n\nfor _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    a = l.count(0)\n    b = l.count(1)\n    if a>0 and b>0:\n        print(int(math.pow(2, a)*b))\n    else:\n        print(b)",
                true
            ],
            [
                "import math\n#a = list(map(int,input(\"\\nEnter the numbers : \").strip().split()))[:n]\ndef solve(a,n):\n    a1=a.count(1)\n    a2=a.count(0)\n    a2=int(math.pow(2,a2))\n    if (a1==0 and a2==0 )or a1==0:\n        print(\"0\")\n        return \n    elif a1>0 and a2==0:\n        print(a1)\n    elif a2>0 and a1>0:\n        print(a1*a2)\nt= int(input(\"\"))\nfor i in range(t):\n    n= int(input(\"\"))\n    a=list(map(int,input(\"\").strip().split()))[:n]\n    solve(a,n)\n ",
                true
            ],
            [
                "import sys\nfrom functools import lru_cache\nfrom collections import defaultdict, deque \nfrom types import GeneratorType\ninput = sys.stdin.readline\n\ndef arithm(n):\n    return (n+1) * n // 2\n\ndef solve(a):\n    \n    num_ones = sum(num == 1 for num in a)\n    num_zeros = sum(num == 0 for num in a)\n\n    return num_ones * (2**num_zeros)\n\nif __name__ == \"__main__\":\n    \n    t = int(input())\n    \n    for _ in range(t):\n        _ = input()\n        a = [int(val) for val in input().split()]\n        print(solve(a))\n    \n        \n                \n",
                true
            ],
            [
                "cases = int(input())\n\nfor _ in range(cases):\n  b = input()\n  values = list(map(int, input().split()))\n  answer = 0\n  if 1 in values:\n    answer += values.count(1) * (2 ** values.count(0))\n  print(answer)\n",
                true
            ],
            [
                "t=int(input())\no=0\nwhile o!=t:\n    o+=1\n    n=int(input())\n    a=list(map(int,input().split()))\n    n1=0\n    n0=0\n    for j in range(len(a)):\n        if a[j]==1:\n            n1+=1\n        if a[j]==0:\n            n0+=1\n    l=1\n    for k in range(1,n0+1):\n        l*=2\n    if n0==0:\n        print(n1)\n    if n0!=0:\n        print(n1*l)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    o = a.count(1)\n    z = a.count(0)\n    if z>0:\n        print(int(pow(2,z))*o)\n    else:\n        print(o)",
                true
            ],
            [
                "import math\nt=int(input())\nwhile(t>0):\n    t-=1\n    n=int(input())\n    l=list(map(int,input().split()))\n    #a,b,c=map(int,input().split())\n    zero=l.count(0)\n    one=l.count(1)\n    print((1<<zero)*one)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    f = b.count(1)\n    r = b.count(0)\n    if r == 0:\n        print(f)\n    elif f == 0:\n        print(0)\n    else:\n        print(f * 2 ** r if r < f else f * 2 ** r)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    z, e = a.count(0), a.count(1)\n    print((2**z)*e)\n# 2 1 1 1 0 0 0\n# r = 3",
                true
            ],
            [
                "def C(n, k):\n    if 0 <= k <= n:\n        nn = 1\n        kk = 1\n        for t in range(1, min(k, n - k) + 1):\n            nn *= n\n            kk *= t\n            n -= 1\n        return nn // kk\n    else:\n        return 0\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if a.count(1) == 0:\n        print(0)\n    else:\n        cnt0, cnt1 = a.count(0), a.count(1)\n        vv = 1\n        for cnt in range(1, cnt0 + 1):\n            vv += C(cnt0, cnt)\n\n        ans = a.count(1) * vv\n        print(ans)",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    m = list(map(int, input().split()))\n    cm = Counter(m)\n    print(2**cm[0]*cm[1])",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n    l = int(input())\n    a = map(int,input().split())\n    count_zeros = 0\n    count_ones = 0\n    for j in a:\n        if j==0:\n            count_zeros+=1\n        if j==1:\n            count_ones+=1\n    print(count_ones*(2**count_zeros))\n",
                true
            ],
            [
                "def luntik_and_subsequences(a):\n    count_0 = 0\n    count_1 = 0\n\n    for ai in a:\n        if ai == 0:\n            count_0 += 1\n        elif ai == 1:\n            count_1 += 1\n\n    return count_1 * (2 ** count_0)\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(\" \")))\n    print(luntik_and_subsequences(a))\n",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    l= int(input())\n    in1 = input().split()\n    in1 = list(map(int,in1))\n    n0 = in1.count(0)\n    n1 = in1.count(1)\n    s = sum(in1)\n    if s==0:\n        print(0)\n    elif s==1:\n        print(2**(l-1))\n    else:\n        if n1 !=0:\n            print(n1*(2**n0))\n        else:\n            print(0)",
                true
            ],
            [
                "ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s0 = 0\n    s1 = 0\n    for i in range(n):\n        if u[i] == 0:\n            s0 += 1\n        elif u[i] == 1:\n            s1 += 1\n    ans.append(s1 * (2 ** s0))\nprint('\\n'.join(map(str, ans)))\n",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    length = int(input())\n    numbers = list(map(int, input().split()[:length]))\n    print(numbers.count(1)*2**numbers.count(0))\n",
                true
            ],
            [
                "from math import factorial\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    one = arr.count(1)\n    zero = arr.count(0)\n\n\n    temp = 2**zero * one\n\n    print(temp)\n",
                true
            ],
            [
                "# cook your dish here\nfrom collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, log2, sqrt, gcd\nimport bisect\nimport copy\nfrom itertools import combinations\nimport sys\nimport heapq\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef input(): return sys.stdin.readline().strip()\n\n\ndef binomialCoef(n, k):\n    C = [[0 for x in range(k + 1)] for x in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(min(i, k) + 1):\n            # Base Cases\n            if j == 0 or j == i:\n                C[i][j] = 1\n\n            else:\n                C[i][j] = C[i - 1][j - 1] + C[i - 1][j]\n\n    return C[n][k]\n\nfor _ in range(int(input())):\n\n   ## a,b,c=get_ints()\n    # fa,fb,fc=False,False,False\n    # if a%2==1:\n    #     fa=True\n    #\n    # if b%2==1:\n    #     fb=True\n    #\n    # if c%2==1:\n    #     fc=True\n    #\n    # if (fa==False and fb==False and fc==False) or(fa==True and fb==True and fc==True):\n    #     print(0)\n    #     continue\n    # if (fb==True and fa==False and fc==False) or (fa==True and fc==True and fb==False):\n    #     print(2)\n    #     continue\n    #\n    # if (fc==True and fa==False and fb==False):\n    #     print(3)\n    #     continue\n    #\n    # print(1)\n\n    n=int(input())\n    a=get_array()\n    ones=a.count(1)\n    zeros=a.count(0)\n\n    tot=0\n\n    for i in range(zeros+1):\n        tot+=binomialCoef(zeros,i)\n\n    tot=int(tot)\n\n    print(tot*ones)\n\n\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    x,y=0,0\n    for i in range(n):\n        if a[i]==0:\n            x+=1\n        if a[i]==1:\n            y+=1\n    print(y*(2**x))",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nmod = 1000000007\n\ndef my_main():\n    kase = inp()\n    pans = []\n    for _ in range(kase):\n        n = inp()\n        da = inp(True)\n        ct = Counter(da)\n        z, o = ct.get(0, 0), ct.get(1, 0)\n        ans = 0\n        if o:\n            ans = o * (1<<z)\n        pans.append(str(ans))    \n    print('\\n'.join(pans))\n\n\n    # print '\\n'.join(pans)\n\nmy_main()\n\n",
                true
            ],
            [
                "from math import *\nfrom collections import *\nfrom itertools import *\nfrom functools import *\nfrom bisect import *\nfrom heapq import *\nfrom operator import *\nfrom sys import *\nsetrecursionlimit(100000000)\n\n\nfor _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    ans = l.count(1)*(2**l.count(0))\n    print(ans)\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    z=arr.count(0)\n    o=arr.count(1)\n    ans=pow(2,z)*o\n    print(ans)\n\n\n\n",
                true
            ],
            [
                "from collections import Counter\n\n\ndef readline():\n    return map(int, input().split())\n\n\ndef solve():\n    n, = readline()\n    a = readline()\n    c = Counter(a)\n    z = c[0]\n    e = c[1]\n    print(e * 2**z)\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for __ in range(t):\n        solve()\n",
                true
            ],
            [
                "from math import factorial\n\n\ndef f(k, n):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    one = 0\n    zero = 0\n    cnt = 0\n    for i in list(map(int, input().split())):\n        if i == 1:\n            one += 1\n        if i == 0:\n            zero += 1\n    cnt += one\n    k = zero\n    while zero > 0:\n        cnt += one * f(zero, k)\n        zero -= 1\n    print(cnt)",
                true
            ],
            [
                "for s in[*open(0)][2::2]:a=*map(int,s.split()),;print(a.count(1)*2**a.count(0))",
                true
            ],
            [
                "# This is a sample Python script.\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    print(a.count(1)*(2**a.count(0)))\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = a.count(1)\n    y = a.count(0)\n    print(x * (2 ** y))\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ones = l.count(1)\n    zeros = l.count(0)\n    print(ones * 2**zeros)",
                true
            ],
            [
                "t = int(input())\nfor i in range(0,t):\n    d = int(input())\n    a = list(map(int,input().split()))\n    c = sum(a)\n    d = []\n    count = 0\n    num = 0\n    for ele in a:\n        if ele == 1:\n            count = count +1\n        elif ele == 0:\n            num = num+1\n    #print(count ,num)\n    if count == 1 and num == 0:\n        print(1)\n    elif count == 1 and num > 0:\n        print(pow(2,num))\n    elif count>1:\n        print(count * pow(2,num))\n    else:\n        print(0)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(a) for a in input().split()]\n    s = sum(a)\n    print(a.count(1)*2**a.count(0))",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    xd = [0, 0]\n    for i in range(n):\n        if x[i] == 1:\n            xd[1] += 1\n        elif x[i] == 0:\n            xd[0] += 1\n    print((2 ** xd[0]) * xd[1])",
                true
            ],
            [
                "import math\nfrom collections import defaultdict\nfor cases in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    l.sort()\n    cnt1=l.count(1)\n    cnt0=l.count(0)\n    ans=cnt1*(2**cnt0)\n    print(ans)\n    \n    \n",
                true
            ],
            [
                "import sys\n\nif __name__ == \"__main__\":\n    inp = sys.stdin.readline()\n    test = int(inp.strip('\\n'))\n\n    result = \"\"\n    for i in range(test):\n        inp = sys.stdin.readline()\n        n = int(inp.strip('\\n'))\n        inp = sys.stdin.readline()\n        a = list(map(int, inp.strip('\\n').split()))\n\n        ones = zeroes = 0\n\n        for val in a:\n            if val == 0:\n                zeroes += 1\n            elif val == 1:\n                ones += 1\n\n        val = ones * (1 << zeroes)\n\n        sys.stdout.write(str(val) + '\\n')\n",
                true
            ],
            [
                "for _ in range(int(input())):n=int(input());arr=list(map(int,input().split()));print(arr.count(1)<<arr.count(0))",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    s = sum(arr)\n    zeros = [a for a in arr if a == 0]\n    ones = [a for a in arr if a == 1]\n    if len(ones) == 1 and s == 1:\n        # all possibiliies excluding elemt 1\n        return 2 ** (n - 1)\n    # zeros may or may not be included\n    return len(ones) * 2 ** len(zeros)\n\nif __name__=='__main__':\n    for _ in range(int(input())):\n        print(solve())\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s.count(1) == 0:\n        print(0)\n    else:\n        print(2 ** s.count(0) * s.count(1))\n",
                true
            ],
            [
                "from sys import stdin\n\nt = int(stdin.readline())\n'''#1\nfor i in range(t):\n    a, b, c = map(int, stdin.readline().split())\n\n    print((a+2*b+3*c)%2)\n'''\n\n#2\nfor i in range(t):\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    zero = nums.count(0)\n    one = nums.count(1)\n\n    print(2**zero * one)\n\n'''\n5\n5\n1 2 3 4 5\n2\n1000 1000\n2\n1 0\n5\n3 0 2 1 1\n5\n2 1 0 3 0\n\n'''",
                true
            ],
            [
                "def las(ltt,sltt):\n  l  = ltt.count(1)\n  if l == 0:\n    return 0\n  out = l\n  p = ltt.count(0)\n  x=2**p *l\n  if p == 0:\n\n    return out\n  return x\n \ndef main():\n    nc = int(input())\n    for i in range(nc):\n      sltt = int(input())\n      ltt = list(map(int, input().split()))\n      print(las(ltt,sltt))\nmain()",
                true
            ],
            [
                "import sys\nimport string\nfrom decimal import Decimal\nfrom math import log\n############ ---- Input Functions ---- ############\n# input = sys.stdin.readline\n\n\ndef inp():\n    return(int(input()))\n\n\ndef inplist():\n    return(list(map(int, input().split())))\n\n\ndef inpstrlist():\n    s = input()\n    return(list(s[:len(s)]))\n\n\ndef invr():\n    return(map(int, input().split()))\n############ ---- Output Functions ---- ############\n\n\nt = int(input())\nfor _ in range(t):\n    n = inp()\n    arr = inplist()\n\n    one = arr.count(1)\n    zero = arr.count(0)\n\n    x = 2**zero\n    x = x*one\n    print(x)\n",
                true
            ],
            [
                "def main():\n    t = int(input())\n    while t>0:\n        n = int(input())\n        a = list(map(int, input().split()))\n        # print(sum(a))\n        # maxv=max(a.count(1),a.count(0))\n        # minv=min(a.count(1),a.count(0))\n        print((2**a.count(0))*a.count(1))\n        t-=1\nmain()",
                true
            ],
            [
                "T = int(input())\nfor testcase in range(1,T+1):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = a.count(0)\n    c1 = a.count(1)\n    print(c1*(2**c0))\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    l = input()\n    t = input().split()\n    ans = 0\n    res = 0\n    for i in range(len(t)):\n        t[i] = int(t[i])\n        ans += t[i]\n    if ans == 1:\n        res += 1\n    t.sort()\n    l0 = t.count(0)\n    l1 = t.count(1)\n\n    p = [1]\n    for i in range(1, 63):\n        p.append(2 * p[i - 1])\n    print(p[l0] * l1)\n",
                true
            ],
            [
                "for tc in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    cnts = [0, 0]\n    for num in a:\n         if num ==0 or num == 1: \n             cnts[num]+=1 \n    print(cnts[1] * (2**cnts[0]))",
                true
            ],
            [
                "#BISMILLAHIR RAHMANIR RAHIM\n\nt=int(input())\n\nwhile t:\n    t-=1\n\n    n=int(input())\n    a=list(map(int,input().split()))\n\n    c1=0\n    c0=0\n\n    for i in range(n):\n        if a[i]==0:\n            c0+=1\n        if a[i]==1:\n            c1+=1\n    \n    print(c1*pow(2, c0))",
                true
            ],
            [
                "t = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    j = arr.count(0)\n    o = arr.count(1)\n    if  o == 0 :\n        print(0)\n    else:\n        print(o *(2**(j)))\n",
                true
            ],
            [
                "def fact(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n    return ans\n\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        ans = 0\n\n        c0 = a.count(0)\n        c1 = a.count(1)\n\n        ans += c1\n\n        for i in range(1, c0 + 1):\n            ans += c1 * (fact(c0) // (fact(i)*fact(c0-i)))\n        print(ans)\n\n\nmain()\n",
                true
            ],
            [
                "for _ in range(eval(input())):\n    n = eval(input())\n    a = list(map(int, input().split()))\n    ans = a.count(1)\n    if 0 in a:\n        ans *= 2 ** (a.count(0))\n    print(ans)    \n",
                true
            ],
            [
                "t=int(input(''))\nfor i in range (t):\n    n=int(input(''))\n    l=list(map(int,input('').split()))\n    z=l.count(0)\n    o=l.count(1)\n    print((2**z)*o)",
                true
            ],
            [
                "for i in range(int(input())):\n    n = input()\n    mas = list(map(int, input().split()))\n    zero = 0\n    one = 0\n    a = 0\n    for i in mas:\n        if i == 0:\n            zero += 1\n        if i == 1:\n            one += 1\n    print(one * 2 ** zero)",
                true
            ],
            [
                "T = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    one, zero = 0,0\n    for i in range(n):\n        one += (arr[i]==1)\n        zero += (arr[i] == 0)\n\n    s = 0\n    for i in range(one):\n        s += (2**zero)\n    print(s)",
                true
            ],
            [
                "t = int(input())\nwhile t:\n    t-=1\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    o = arr.count(1)\n    z = arr.count(0)\n    if z>0:\n        print(o + o*((2**z)-1))\n    else:\n        print(o)",
                true
            ],
            [
                "import sys, os.path\nif(os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\",\"r\")\n    sys.stdout = open(\"output.txt\",\"w\")\n\n############################################\n\n\nfor t in range(int(input())):\n    n = int(input())\n    c0, c1 = 0, 0\n    num = list(map(int,input().split()))\n    for i in num:\n        if i == 1:\n            c1 += 1\n        elif i==0:\n            c0 += 1\n    print(c1* 2**c0)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    count_0 = 0\n    count_1 = 0\n    for i in range(n):\n        if l[i] == 0:\n            count_0 += 1\n        elif l[i] == 1:\n            count_1 += 1\n    if count_1 == 0:\n        ans = 0\n    else:\n        if count_0 == 0:\n            ans = count_1\n        else:\n            ans = count_1*(2**count_0)\n    print(ans)",
                true
            ],
            [
                "from sys import stdin, stdout\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l.count(1)\n    b = l.count(0)\n    ans = 0\n    if a == 0:\n        ans = 0\n    elif b ==0:\n        ans = a\n    else:\n        ans = (2**b)*a\n    print(ans)",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    n=int(input())\n    lst=[int(i) for i in input().split()]\n    x=lst.count(0)\n    y=lst.count(1)\n    if(y==0):\n        print(0)\n    elif(x==0):\n        print(y)\n    else:\n        z=2**x\n        print(z*y)\n    ",
                true
            ],
            [
                "from sys import stdin, exit\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom itertools import accumulate\n\nyes = lambda: print('YES')\nno = lambda: print('NO')\n\ninput = lambda: stdin.readline()[:-1]\nintput = lambda: int(input())\nsinput = lambda: input().split()\nintsput = lambda: map(int, sinput())\n\n\ndef dprint(*args, **kwargs):\n    if debugging:\n        print(*args, **kwargs)\n\n\ndebugging = 1\n# Code\nt = intput()\nfor _ in range(t):\n    n = intput()\n    a = list(intsput())\n    print(2 ** a.count(0) * a.count(1))",
                true
            ],
            [
                "import math\nfor i in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    cnt0=0\n    cnt1=0\n    for j in a:\n        if j==0:\n            cnt0 += 1\n        elif j==1:\n            cnt1 +=1\n    if cnt0!=0:\n        print(int(cnt1*(math.pow(2,cnt0))))\n    else :\n        print(cnt1)\n",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve(n, arr):\n  tot = sum(arr)\n\n  zeros = 0\n  ones = 0\n  for ele in arr:\n    if ele == 0:\n      zeros += 1\n    \n    if ele == 1:\n      ones += 1\n  \n  if ones == 0:\n    print(0)\n    return\n  \n  rem = n - zeros\n  rem -= ones\n\n  ans = ones * (2**zeros)\n\n  print(ans)\n\n\n\n\n\n\n\n\n\n\n\n\nT = get_int()\nwhile T:\n  n = get_int()\n  arr = get_list()\n  solve(n, arr)\n  T -= 1\n",
                true
            ],
            [
                "# import pytest\n\n# @pytest.mark.parametrize(\n#     'array, expected', [\n#         [[1, 2, 3, 4, 5], 1],\n#         [[1000, 1000], 0],\n#         [[1, 0], 2],\n#         [[3, 0, 2, 1, 1], 4],\n#         [[2, 1, 0, 3, 0], 4],\n#     ]\n# )\n# def test_luntik(array, expected):\n#     result = luntik(array)\n#     assert expected == result\n\n\ndef luntik(array):\n    # Calculates number of nearly-full subsequences\n    zeroes = array.count(0)\n    ones = array.count(1)\n\n    return ones * (2 ** zeroes)\n\n\n# if __name__ == '__main__':\nfor i in range(int(input())):\n    input()\n    array = list(map(int, input().split()))\n    print(luntik(array))\n",
                true
            ],
            [
                "T = int(input())\nfor i in range(T):\n    n = int(input())\n    a = map(int,input().split())\n    num0 = num1 = 0\n    for j in a:\n        if j == 0:\n            num0 +=1\n        elif j == 1:\n            num1 +=1\n    print(2**num0*num1)",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    count1=arr.count(1)\n    count0=arr.count(0)\n    if(count1==0):\n        print(0)\n    else: \n        print((2**count0)*count1)\n    ",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    s = sum(a)\n    ans = 0\n    ed = a.count(1)\n    nu = a.count(0)\n    if nu == 0 and ed == 0:\n        print(0)\n    elif nu > 0 and ed == 0:\n        print(0)\n    elif nu == 0 and ed > 0:\n        print(ed)\n    elif nu > 0 and ed > 0:\n        print(ed * (2**nu))",
                true
            ],
            [
                "test = int(input())\nfor i in range(test):\n    n = int(input())\n    arr = [int(ele) for ele in input().split()]\n    ones = 0\n    zeros = 0\n    for ele in arr:\n        if ele == 0:\n            zeros += 1\n        if ele == 1:\n            ones += 1\n    print(ones*2**zeros)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    print(a.count(1) * (1 << a.count(0)))\n",
                true
            ],
            [
                "T = int(input())\n\nfor t in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    count0 = count1 = 0\n    total = 0\n    if 1 in a:\n        for num in a:\n            if num == 0:\n                count0+=1\n            elif num == 1:\n                count1+=1\n                \n        if count1==1:\n            total+= (2**count0)-1\n            print(total+1)\n        else:\n            total+=count1*((2**count0)-1)\n            print(total+count1)\n    else:\n        print(0)",
                true
            ],
            [
                "a = int(input())\nfor i in range(a):\n    c = int(input())\n    b = [int(x) for x in input().split()]\n    count = 0\n    mark = 0\n    for j in range(len(b)):\n        if b[j] == 1:\n            count = count + 1\n        if b[j] == 0:\n            mark = mark + 1\n    c = pow(2,mark)\n    d = count*c\n    print(d)",
                true
            ],
            [
                "from math import factorial as f\n\ndef get(a,b):\n    return f(a)//(f(b)*f(a-b))\n\ntest=int(input())\nfor t in range(test):\n    ans=0\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=sum(a)\n    c0=a.count(0)\n    c1=a.count(1)\n    if c1==0:\n        print(0)\n        continue\n    for i in range(c0+1):\n        ans+=get(c0,i)*c1\n    print(ans)\n",
                true
            ],
            [
                "#BISMILLAHIR RAHMANIR RAHIM\n\nt=int(input())\nwhile t:\n    t-=1\n    n=int(input())\n    a=list(map(int,input().split()))\n    print(a.count(1)*pow(2, a.count(0)))",
                true
            ],
            [
                "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    arr = list((map(int,input().split())))\n    o = arr.count(1)\n    z = arr.count(0)\n    print(o*(2**z))",
                true
            ],
            [
                "from math import ceil\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = a.count(0)\n    c1 = a.count(1)\n    print(2 ** c0 * c1)\n",
                true
            ],
            [
                "# This code is contributed by Siddharth\n\n\nfrom sys import *\ninput = stdin.readline\n\n\n\nimport threading\nfrom bisect import *\nimport math\nfrom collections import *\nimport operator\nfrom heapq import *\nfrom itertools import *\ninf=10**19\nmod=10**9+7\nMOD=998244353\nS1 = 'abcdefghijklmnopqrstuvwxyz'\nS2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ndx = [-1,0]\ndy = [0,-1]\n# inverse modulo power pow(a,-1,mod) - it only works on py 3.8 ( *not in pypy )\nsetrecursionlimit(200005)\ndef asc(c):\n    return ord(c)-97+1\n\n\n\n\n\n# ==========================================> Code Starts Here <=====================================================================)\n\n\n\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    zero=a.count(0)\n    one=a.count(1)\n    if one==n:\n        print(one)\n    elif zero==n:\n        print(0)\n    else:\n        print(one*pow(2,zero))\n",
                true
            ],
            [
                "def nCr(n,r):\n    return fact(n) / (fact(r) * fact(n - r))\ndef fact(n):\n    res = 1\n    for i in range(2,n+1):\n        res*=i\n    return res\ndef solve():\n    n = int(input())\n    arr = list()\n    cnt1,cnt0 = 0,0\n    arr = L()\n    for i in range(n):\n        if arr[i] == 1:\n            cnt1+=1\n        elif arr[i] == 0:\n            cnt0+=1\n    if cnt0>0 and cnt1:\n        print(pow(2,cnt0)*cnt1)\n    else:\n        print(cnt1)\nS=lambda:input().rstrip();\nI=lambda:int(S());\nM=lambda:map(int,S().split());\nL=lambda:list(M());\nH=1000000000+7\nfor _ in range(I()):\n    solve()",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    counter1, counter2 = 0, 0\n    line = [int(ch) for ch in input().split()]\n    if 1 not in line:\n        print(0)\n        continue\n    for i in range(len(line)):\n        if line[i] == 1:\n            counter1 += 1\n    for i in range(len(line)):\n        if line[i] == 0:\n            counter2 += 1\n    if counter1 == 0:\n        print(counter2)\n    elif counter2 == 0:\n        print(counter1)\n    else:\n        print(counter1 * (2 ** counter2))",
                true
            ],
            [
                "x = int(input())\nfor i in range(x):\n    n = int(input())\n    a = list(map(int,input().strip().split()))[:n]\n    ones = 0\n    zeros = 0\n    for j in range(n):\n        if a[j] == 1:\n            ones +=1\n        if a[j] == 0:\n            zeros +=1\n    if(ones >= 1):\n        if(zeros > 1):\n            print((2 ** (zeros)) * ones)\n        elif(zeros == 1):\n            print(ones*2)\n        else:\n            print(ones)\n    else:\n        print(0)",
                true
            ],
            [
                "from math import factorial\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    k = 0\n    cnt = A.count(0)\n    for j in range(1, cnt + 1):\n        k += factorial(cnt) // (factorial(j) * factorial(cnt - j))\n    if k == 0:\n        print(A.count(1))\n    else:\n        print(A.count(1) * (k + 1))\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    z = 0\n    o = 0\n    for i in range(n):\n        if a[i] == 0:\n            z += 1\n        elif a[i] == 1:\n            o += 1\n            \n    ans = 2 ** z * o\n    print(ans)",
                true
            ],
            [
                "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    one = 0\n    zer = 0\n    for i in a:\n        if i == 1:\n            one += 1\n        elif i == 0:\n            zer += 1\n    print(one*(2**zer))",
                true
            ],
            [
                "\nm = int(input())\n#[n,m] = list(map(int , input().split(\" \")))\n\ndef solve():\n    n = int(input())\n    arr = list(map(int , input().split(\" \")))\n\n    o,z = 0,0\n    for i in arr:\n        if i==0:\n            z+=1\n        if i==1:\n            o+=1\n    return (o*(2**z))\n\n    \n    \n\n\n\n    \nfor i in range(m):\n    print(solve())",
                true
            ],
            [
                "for nt in range(int(input())):\n    _ = int(input())\n    a = list(map(int,input().split()))\n \n    zeros = a.count(0)\n    ones = a.count(1)\n \n    ans = ones * (1<<zeros)\n    print(ans)",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    if arr.count(0)+arr.count(1)==0:\n        print('0')\n    \n    else:\n        print(arr.count(1)* 2**(arr.count(0)))",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(2**a.count(0)*a.count(1))\n",
                true
            ],
            [
                "for i in range(int(input())):\n    nenado=input()\n    a=list(map(int,input().split()))\n    one=a.count(1)\n    zero=a.count(0)\n    print(one*2**zero)",
                true
            ],
            [
                "def f(arr,n,s):\n    if n==0 and s>0:\n        return 0\n    if s==0:\n        return 1\n    if arr[n-1]<=s:\n        return f(arr,n-1,arr[n-1]) + f(arr,n-1,s)\n    else:\n        return f(arr,n-1,s)\n    \n\nt = int(input(\"\"))\nfor _ in range(t):\n    n = int(input(\"\"))\n    arr = list(map(int,input(\"\").split(\" \")))\n    total = sum(arr)\n    zeroes = arr.count(0)\n    ans = 0\n    for i in arr:\n        if i==1:\n            ans += 2**zeroes\n    print(ans)\n    \n    \n\n",
                true
            ],
            [
                "from math import factorial\n\ndef fac(g):\n    if g == 1:\n        return 2\n    if g == 0:\n        return 1\n    if g >= 2:\n        return 2**g\n\nfor i in range(int(input())):\n    n = int(input())\n    arr = [*map(int, input().split())]\n    cz = 0\n    ce = 0\n    for i in arr:\n        if i == 0:\n            cz +=1\n        if i == 1:\n            ce += 1\n    ans = ce * fac(cz)\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    z = a.count(0)\n    o = a.count(1)\n    print(o * (2 ** z))\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nLuntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for i in range(int(input())):\n    a,b,c=map(int,input().split())\n    if(a%2==0 and b%2==0 and c%2==0):\n        print(0)\n    elif(a%2!=0 and b%2!=0 and c%2!=0):\n        print(0)\n    elif(b%2==0 and a%2!=0 and c%2!=0):\n        print(0)\n    elif(a%2==0 and b%2==0 and c%2!=0):\n        print(1)\n    elif(a%2!=0 and b%2==0 and c%2==0):\n        print(1)\n    elif(a%2!=0 and b%2!=0 and c%2==0):\n        print(1)\n    elif(a%2==0 and b%2!=0 and c%2!=0):\n        print(1)\n    elif(a%2==0 and b%2!=0 and c%2==0):\n        print(0)",
                true
            ],
            [
                "import sys, collections, math, bisect, heapq, random\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    a,b,c = map(int,input().split())\n    v = a + 2 * b + 3 * c\n    print(v & 1)\n\n\n\n\n\n\n",
                true
            ],
            [
                "t=int(input())\nfor item in range(0,t):\n    a,b,c=map(int,input().split())\n    print(((a*1)+(b*2)+(c*3))%2)",
                true
            ],
            [
                "w = int(input())\ni = 0\nwhile i<w:\n    b = input().split(\" \")\n    c = int(b[0])\n    d = int(b[1])*2\n    e = int(b[2])*3\n    if (c+d+e)%2==0:\n        print(0)\n    else:\n        print(1)\n    i=i+1",
                true
            ],
            [
                "import math as m\nfor _ in range(int(input())):\n    a,b,c=map(int,input().split());\n    aa=a%2; bb=b%2; cc=c%2;\n    if((aa+bb+cc)==3): print(0); continue;\n    if((aa+bb+cc)==0): print(0); continue;\n    if(aa==0 and bb==1 and cc==0): print(0); continue;\n    if(aa==1 and bb==0 and cc==0): print(1); continue;\n    if(aa==0 and bb==0 and cc==1): print(1); continue;\n    if(aa==1 and bb==0 and cc==1): print(0); continue;\n    if(aa==1 and bb==1 and cc==0): print(1); continue;\n    if(aa==0 and bb==1 and cc==1): print(1); continue;\n",
                true
            ],
            [
                "\nn = int(input())\nfor i in range(n):\n    num = input()\n    l = num.split(\" \")\n    for j in range(len(l)):\n        l[j] = int(l[j])\n    if (l[0] * 1 + l[1] * 2 + l[2] * 3) % 2 == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "for i in range(int(input())):\n    one, two, three = (int(x) for x in input().split())\n    \n    print((one + 2*two + 3*three) % 2)",
                true
            ],
            [
                "from sys import stdin,stdout,setrecursionlimit\nstdin.readline\ndef mp(): return list(map(int, stdin.readline().strip().split()))\ndef it():return int(stdin.readline().strip())\nfrom collections import defaultdict as dd,Counter as C,deque\nfrom math import ceil,gcd,sqrt,factorial,log2,floor    \nfrom bisect import bisect_right as br,bisect_left as bl\nfrom heapq import *\nmod = 10**9+7\ninf = (1<<60)\n\n\nfor _ in range(int(input())):\n    a,b,c = mp()\n\n    tot_time = a+2*b + c*3\n    req = ((tot_time+1)//2)\n    rem = req\n    # print(req)\n    useable_3 = min(rem//3,c)\n    cur_sum =0\n    cur_sum+=useable_3*3\n    rem-=cur_sum\n\n    useble_2 = min(rem//2,b)\n\n    cur_sum+=useble_2*2\n    rem = req\n    rem-=cur_sum\n\n    useble_1 = min(a,rem)\n\n    cur_sum+=useble_1\n\n    print(abs(tot_time-2*cur_sum))",
                true
            ],
            [
                "\nfor _ in range(int(input())): \n    a, b, c = map(int, input().split())\n    print(abs(a%2 - 2*(b%2) - 3*(c%2))%2)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    s2 = a//2 + 2*(b//2) + 3*(c//2)\n    s1 = a + 2*b + 3*c - s2\n    aa = min((a + 1) // 2, 3)\n    bb = min((b + 1) // 2, 3)\n    cc = min((c + 1) // 2, 3)\n    mn = s1 - s2\n    for i in range(aa + 1):\n        for j in range(bb + 1):\n            for z in range(cc + 1):\n                x = i + j*2 + z*3\n                mn = min(mn, abs(s1 - s2 - 2*x))\n    print(mn)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    print((a + 2*b + 3*c) % 2)",
                true
            ],
            [
                "Sat=int(input())\nfor i in range(Sat):\n    \n    A,B,C=map(int,input().split())\n    if ((A)+(B*2)+(C*3))%2==0:\n        \n        print(\"0\")\n    else:\n        \n        print(\"1\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    a1=a%2\n    b1=b%2\n    c1=c%2\n    s=str(a1)+str(b1)+str(c1)\n    if s=='110' or s=='011' or s=='100' or s=='001':\n        print(1)\n    else:\n        print(0)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c= map(int,input().split())\n    if a==b and b==c:\n        print(\"0\")\n    else:\n        time=a+b*2+c*3\n        mid=time//2\n        time_total=time-mid\n        print(abs(time_total-mid))",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    t1 = a + b * 2\n    t2 = c * 3\n    if (a + b * 2 + c * 3) % 2 == 0:\n        print(\"0\")\n        #need = (a + b * 2 + c * 3) // 2\n    else:\n        print((a + b * 2 + c * 3) % 2)",
                true
            ],
            [
                "for i in ' '*int(input()):\n    a,b,c=map(int,input().split())\n    print((a+b*2+c*3)%2)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    if (a + b * 2 + c * 3) % 2 == 0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "t = int(input())\nitog = []\nfor i in range(t):\n    a,b,c = list(map(int,input().split()))\n    if (a + b * 2 + c * 3) % 2 == 0:\n        itog.append(0)\n    else:\n        itog.append(1)\nfor i in itog:\n    print(i)",
                true
            ],
            [
                "t = int(input())\nfor i in range(0, t):\n    a, b, c = map(int, input().split())\n    if a == 0 and b == 0:\n        if c % 2 == 1:\n            print(3)\n        else:\n            print(0)\n    elif a == 0 and c == 0:\n        if b % 2 == 1:\n            print(2)\n        else:\n            print(0)\n    elif b == 0 and c == 0:\n        if a % 2 == 1:\n            print(1)\n        else:\n            print(0)\n    elif a == 0:\n        if (b * 2 + c * 3) % 2 == 0:\n            print(0)\n        else:\n            print(1)\n    elif c == 0:\n        if (a + b * 2) % 2 == 0:\n            print(0)\n        else:\n            print(1)\n    elif b == 0:\n        if (a + c * 3) % 2 == 0:\n            if a % 2 == 0:\n                print(0)\n            else:\n                if a >= 3:\n                    print(0)\n                else:\n                    print(2)\n    else:\n        if (a + b * 2 + c * 3) % 2 == 0:\n            print(0)\n        else:\n            print(1)\n\n",
                true
            ],
            [
                "from collections import Counter\nimport math\nimport bisect\nfrom sys import stdin,stdout\ninput=stdin.readline\n\nmod=10**9+7\ndef inp(): return map(int,input().split())\n\nfor _ in range(int(input())):\n    a,b,c=inp()\n    k=a+2*b+3*c\n    print(1 if k&1 else 0)",
                true
            ],
            [
                "import sys\nfrom collections import Counter\nimport math\n#sys.stdin = open(\"input.txt\")\nimport heapq\nfrom itertools import accumulate\nfrom collections import defaultdict\nfrom collections import Counter\nfrom itertools import zip_longest\n\nnum_cases = int(sys.stdin.readline().strip())\n\nfor case in range(1, num_cases+1):\n    A, B, C = list(map(int, sys.stdin.readline().split()))\n\n    mock_a, n_a = divmod(A, 2)\n    mock_b, n_b = divmod(B, 2)\n    mock_c, n_c = divmod(C, 2)\n\n    two_signal = 0\n    four_signal = 0\n\n    if A >= 2 and B >= 2:\n        two_signal = 1\n    if A >= 2 and C >= 2:\n        four_signal = 1\n    if B >= 2 and C >= 2:\n        two_signal = 1\n    if A >= 2:\n        two_signal = 1\n    if B >= 2:\n        four_signal = 1\n\n    if n_a == n_b == n_c:\n        print(0)\n    else:\n        if n_a == 1 and n_b == 0 and n_c == 0:\n            print(1)\n        elif n_a == 1 and n_b == 1 and n_c == 0:\n            print(1)\n        elif n_a == 0 and n_b == 1 and n_c == 1:\n            print(1)\n        elif n_a == 0 and n_b == 1 and n_c == 0:\n            if two_signal:\n                print(0)\n            else:\n                print(2)\n        elif n_a == 0 and n_b == 0 and n_c == 1:\n            if two_signal or four_signal:\n                print(1)\n            else:\n                print(3)\n        elif n_a == 1 and n_b == 0 and n_c == 1:\n            if two_signal or four_signal:\n                print(0)\n            else:\n                print(2)\n\n\n\n\n\n\n",
                true
            ],
            [
                "import sys\n\nif __name__ == \"__main__\":\n    inp = sys.stdin.readline()\n    test = int(inp.strip('\\n'))\n\n    result = \"\"\n    for i in range(test):\n        inp = sys.stdin.readline()\n        a, b, c = list(map(int, inp.strip('\\n').split()))\n\n        total = a + b * 2 + c * 3\n\n        if total % 2 == 0:\n            sys.stdout.write('0\\n')\n        else:\n            sys.stdout.write('1\\n')\n",
                true
            ],
            [
                "\n\ndef case():\n    a, b, c = map(int, input().split())\n    ans = 0\n\n    if (a + b * 2 + c * 3) % 2:\n        print(1)\n    else:\n        print(0)\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        case()\n\n\n\n    \n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "for i in range(int(input())): a,b,c=map(int,input().split());print((a+b*2+c*3)%2)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    r = 0\n    if (c % 2 != 0):\n        r = 3\n    if r == 3:\n        if b > 0:\n            r = 1\n            b -= 1\n    if b % 2 != 0:\n        r = abs(r - 2)\n\n    if r > 0:\n        if a >= r:\n            a -= r\n            r = 0\n        else:\n            r -= a\n            a = 0\n    if a % 2 != 0:\n        r = abs(r - 1)\n    print(abs(r))\n",
                true
            ],
            [
                "for i in range(int(input())):\n    x, y, z = map(int, input().split()) \n    num = x + 2*y + 3*z \n    if num % 2:\n        print(1)\n    else:\n        print(0)\n        \n  ",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c = map(int, input().split())\n\n    s = a+(2*b)+(3*c)\n    if s % 2 == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    if a == 0 and b == 0:\n        print(0 if c % 2 == 0 else 3)\n    elif a == 0 and c == 0:\n        print(0 if b % 2 == 0 else 2)\n    elif b == 0 and c == 0:\n        print(a % 2)\n    elif a == 0:\n        if b % 2 == 0 and c % 2 == 0:\n            print(0)\n        else:\n            print(1)\n    else:\n        print(0 if (a + 2*b + 3*c) % 2 == 0 else 1)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c = map(int,input().split())\n    if a==b==c:\n        print(0)\n    else:\n        x = 1*a + 2*b + 3*c\n        print(x%2)",
                true
            ],
            [
                "import sys\nimport os.path\n \nif(os.path.exists('input.txt')) :\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    sys.stderr = open(\"error.txt\", \"w\")\n    \ndepth = 1000000\nmod = 1000000007 \nlim = 10000005\nsys.setrecursionlimit(depth) \n \nlinp = lambda: list(minp())\nminp = lambda: map(int, input().split())\n \nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\n \ndd = lambda x: defaultdict(lambda: x)\ndxy = [(1, 0),(-1, 0),(0, 1),(0, -1)]\n\nfor _ in range(int(input())) :\n    a, b, c = minp()\n    s = a + 2*b + 3*c\n    print(s&1)",
                true
            ],
            [
                "'''\n    Python3(PyPy3) Template for Programming-Contest.\n'''\n\nimport sys\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\nDXY = [(0, -1), (1, 0), (0, 1), (-1, 0)]  # LDRU\nmod = 998244353\ninf = 1 << 64\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        a, b, c = map(int, input().split())\n        sums = a + 2 * b + 3 * c\n        if sums % 2 == 0:\n            print(0)\n        else:\n            print(1)\n    return 0\n\n\nif __name__ == \"__main__\":\n    main()\n",
                true
            ],
            [
                "import bisect\nimport collections\nimport copy\nimport enum\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\nsys.setrecursionlimit(3001)\n\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    a,b,c = map(int,input().split())\n    s = 3*c+2*b+a\n    half = s//2\n    h1 = half\n    s1 = 0\n    t1 = half//3\n    s1+= min(t1,c)*3\n    h1 -= min(t1,c)*3\n    c-= min(t1,c)\n    t2 = h1//2\n    s1+= min(t2,b)*2\n    h1-=min(t2,b)*2\n    b-=min(t2,b)\n    s1+= min(h1,a)\n    h1-=min(h1,a)\n    a-=min(h1,a)\n    ans = s-s1-s1;\n    if c:\n        ans=min(ans,abs(s-s1-3-s1-3));\n    if b:\n        ans = min(ans,abs(s-s1-2-s1-2))\n    print(ans)\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    k=a*1+b*2+c*3\n    print(k%2)\n        ",
                true
            ],
            [
                "testCases = int(input())\nfor i in range(0,testCases):\n    a,b,c = [int(s) for s in input().split(' ')]\n    totalLen = a + b*2 + c*3\n    firstCon = abs(totalLen//2)\n    secondCon = totalLen-firstCon\n    print(abs(firstCon-secondCon))\n",
                true
            ],
            [
                "n=int(input())\nlist1=[]\nfor i in range(n):\n    list1.append([int(x) for x in input().split()])\nfor i in list1:\n    print((i[0]+i[2])%2)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c = map(int,input().split())\n    b = b*2\n    c = c*3\n    if (a+b+c)%2 == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "for _ in range(eval(input())):\n    a, b, c = list(map(int, input().split()))\n    print((a + 2 * b + 3 * c) % 2)\n",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    summ=3*c\n    summ+=2*b\n    summ+=a\n    if summ%2:print(1)\n    else:print(0)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\na = int(input())\nfor i in range(a):\n    q,w,e = map(int,input().split())\n    thing = q+w*2+e*3\n    if thing%2 == 0:\n        print('0\\n')\n    else:\n        print('1\\n')\n",
                true
            ],
            [
                "t = input()\nt = int(t)\nwhile t:\n    t -= 1\n    a, b, c = input().split()\n    a, b, c = int(a), int(b), int(c)\n    sum = a+2*b+3*c\n    if sum % 2 == 0:\n        print((0))\n    else:\n        print((1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    a,b,c=map(int,input().split())\n    temp=a*1+b*2+c*3\n    if(temp%2==0):\n        print(\"0\")\n    else:\n        print(\"1\")",
                true
            ],
            [
                "def comp(a,b,c):\n    #print(a,b,c)\n    s = (a + 2 * b + 3 * c)\n    even = False\n    evenv = 1\n    if s % 2 == 0:\n        even = True\n        evenv = 0\n    if b == 0:\n        if c % 2 == 0:\n            return evenv\n        else:\n            return max(evenv, 3 - a)\n    elif b == 1:\n        if c % 2 == 1:\n            return evenv\n        else:\n            return max(evenv, 2 - a)\n    elif c == 0:\n        if b % 2 == 0:\n            return evenv\n        else:\n            return max(evenv, 2 - a)\n    else:\n        return evenv\n\n\nT = int(input())\nfor testcase in range(1,T+1):\n    a,b,c = list(map(int, input().split()))\n    print(comp(a, b, c))\n\n#for c in range(5):\n#    for b in range(5):\n#        for a in range(5):\n#            print(comp(a,b,c))\n\n\n\n\n\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    s = tuple(map(lambda t: t[0] * t[1], zip(map(int, input().split()), (1,2,3))))\n    print(sum(s)%2)\n",
                true
            ],
            [
                "for i in range (int(input())):\n    l=list(map(int,input().split()))\n    L=l[0]+l[1]*2+l[2]*3\n    if L%2==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,y,z=map(int,input().split())\n    y*=2;z*=3\n    print((x+y+z)%2)",
                true
            ],
            [
                "t = int(input())\n\ncases = []\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    cases.append((a,b,c))\n\nfor a,b,c in cases:\n    target = (a + b * 2 + c * 3)\n    one = target//2\n\n    need_three = one//3\n\n    if need_three <= c:\n        one -= 3 * need_three\n    else:\n        one -= c * 3\n    \n    need_two = one //2\n\n    if need_two <= b:\n        one -= 2 * need_two\n    else:\n        one -= b * 2\n\n    one -= min(a,one)\n\n    if target % 2 != 0:\n        one += 1\n    print(one)",
                true
            ],
            [
                "for i in range(int(input())):\n    a,b,c=map(int,input().split())\n\n    if(a+b*2+c*3)%2==0:\n        print(0)\n\n    else:\n        print(1)\n    \n\n\n    \n\n\n\n\n\n\n\n\n   ",
                true
            ],
            [
                "n=int(input())\n\n\nfor i in range (n):\n    a,b,c=map(int,input().split())\n    b=b*2\n    c=c*3\n    print((a+b+c)%2)\n\n\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    a,b,c=map(int,input().split())\n    t=a+2*b+3*c\n    if (t%2==0):\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "N =int(input())\ni = 0\nwhile (i < N):\n    a = (input().split())\n    print ((int(a[0]) + int(a[1])*2 + int(a[2])*3) - 2*((int(a[0]) + int(a[1])*2 + int(a[2])*3) // 2))\n    i += 1\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\n#sys.setrecursionlimit(10**7)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\n#Fenwick Tree point update range sum\ndef update_it(bit,i,val):\n    n=len(bit)\n    while(i<n):\n        bit[i]+=val\n        i+=i&(-i)\ndef get_ans(bit,i):\n    n=len(bit)\n    tot=0\n    while(i>0):\n        tot+=bit[i]\n        i-=i&(-i)\n    return tot\ndef hnbhai(tc):\n    a,b,c=sd()\n    tot=0\n    rem=0\n    if c%2==1:\n        tot=3\n        rem=3\n        if b>=1:\n            b-=1\n            rem=1\n        if a%2==1:\n            rem=0\n    elif b%2==1:\n        rem=2\n        if a>=1:\n            rem=1\n            a-=1\n        if a%2==1:\n            rem=0\n    else:\n        if a%2==1:\n            rem=1\n    print(rem)\n            \nfor _ in range(sb()):\n    hnbhai(_+1)\n",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nmod = 1000000007\n\ndef my_main():\n    kase = inp()\n    pans = []\n    for _ in range(kase):\n        a, b, c = inp()\n        sm = a+2*b+3*c\n        pans.append(str((sm)%2))\n\n    print('\\n'.join(pans))\n\n\n    # print '\\n'.join(pans)\n\nmy_main()\n\n",
                true
            ],
            [
                "n = int(input())\nls = []\nfor i in range(n):\n    st = input()\n    list = st.split()\n    count = 1\n    summ = 0\n    for j in list:\n        summ += int(j) * count\n        count += 1\n\n    ls.append(summ % 2)\n\nfor i in ls:\n    print(i)",
                true
            ],
            [
                "t=int(input())\nwhile t>0:\n    a,b,c = map(int, input().split())\n    if (a+2*b+3*c)%2==0:\n        print(0)\n    else:\n        print(1)\n        \n    t-=1",
                true
            ],
            [
                "for i in range(int(input())):a, b, c = map(int, input().split());print((a + c) % 2)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    print((a+b*2+c*3)%2)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    l = list(map(int, input().split()))\n    a, b, c = l[0], l[1], l[2]\n    print((a + 2*b + 3*c) % 2)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    r = 0\n    if c % 2 == 1:\n        r += 3\n    if b % 2 == 1:\n        r += 2\n    if a % 2 == 1:\n        r += 1\n    print(r % 2)",
                true
            ],
            [
                "T = int(input())\nfor _ in range(T):\n    a, b, c = map(int, input().split())\n    b *= 2\n    c *= 3\n    sum = a + b + c\n    if sum % 2:\n        print(1)\n    else:\n        print(0)",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    a,b,c=map(int,input().split())\n    su=a+2*b+3*c\n    n=a+b+c\n    if a==b and b==c:\n        print(0)\n    elif su%2==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "def possible(d, a, b, c):\n    c = min(c, d // 3)\n    d -= 3 * c\n    b = min(b, d // 2)\n    d -= 2 * b\n    a = min(a, d)\n    d -= a\n    return d == 0\n\n\ndef solve_case():\n    a, b, c = map(int, input().split())\n    s = a + 2 * b + 3 * c\n    min_diff = 4\n    for diff in range(4):\n        mid = s//2 + diff\n        if possible(mid, a, b, c):\n            min_diff = min(min_diff, abs(s - 2 * mid))\n    print(min_diff)\n\n\nT = int(input())\nfor t in range(T):\n    solve_case()\n",
                true
            ],
            [
                "for ___ in range(int(input())):\n    a, b, c = map(int, input().split())\n    v1 = 0\n    v2 = 0\n    v1 += (a // 2) * 3\n    v2 += (a // 2) * 3\n    if a % 2 == 1:\n        v1 += 3\n\n    if v1 > v2 and b != 0:\n        b -= 1\n        v2 += 2\n    v1 += (b // 2) * 2\n    v2 += (b // 2) * 2\n    if b % 2 == 1:\n        v2 += 2\n\n    if v1 < v2:\n        t = v1\n        v1 = v2\n        v2 = t\n\n    while c != 0 and v1 > v2:\n        v2 += 1\n        c -= 1\n\n    d = v1 - v2\n    if c == 0:\n        print(d)\n    elif d % 2 == c % 2:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\n\n#from collections import Counter\n#countingSort(array, size)\ntest_case =inp();\ncurrent_test=0;\nwhile current_test < test_case:\n  current_test+=1 \n  a,b,c=invr();\n  s=(a+(b*2)+(c*3))\n  d=s%2\n  print(d)",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    col, col2 = c // 2 * 3 + (3 if c % 2 == 1 else 0), c // 2 * 3\n    while col > col2 and b:\n        col2 += 2\n        b -= 1\n\n    col, col2 = max(col, col2), min(col, col2)\n\n    col += b // 2 * 2\n    col2 += b // 2 * 2 + (2 if b % 2 == 1 else 0)\n\n    while col > col2 and a:\n        col2 += 1\n        a -= 1\n\n    while col < col2 and a:\n        col += 1\n        a -= 1\n\n    col, col2 = max(col, col2), min(col, col2)\n\n    col += a // 2\n    col2 += a // 2 + (1 if a % 2 == 1 else 0)\n    \n    print(abs(col - col2))\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    m1, m2, m3 = map(int, input().split())\n\n    rem = 3 * (m3 % 2)\n\n    if rem == 0:\n        rem = 2 * (m2 % 2)\n    elif m2 != 0:\n        rem -= 2\n        m2 -= 1\n\n    d = min(m1, rem)\n    m1 -= d\n    rem -= d\n    rem += m1 % 2\n    print(rem)\n",
                true
            ],
            [
                "def main():\n    import sys\n    input = sys.stdin.readline\n    M = int(1e9 + 7)\n\n    for _ in range(int(input())):\n        a, b, c = map(int, input().split())\n        if (a + c) % 2 == 0:\n            print(0)\n        else:\n            print(1)\n\n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "n= int(input())\nfor i in range(n):\n    z=0\n    a,b,c = map(int, input().split() )\n    c%=2\n    if c>0:\n        z=3\n    if b>0:\n        if z==3:\n            z = 1\n            b -= 1\n        elif b%2>0:\n            z=2\n    m=min(a,z)\n    if m>0:\n        a-=m\n        z-=m\n    if a%2>0:\n        z+=1\n    print(z)",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    res = a + 2 * b + 3 * c\n\n    print(res % 2)",
                true
            ],
            [
                "import sys\nimport string\nfrom decimal import Decimal\nfrom math import log\n############ ---- Input Functions ---- ############\n# input = sys.stdin.readline\n\n\ndef inp():\n    return(int(input()))\n\n\ndef inplist():\n    return(list(map(int, input().split())))\n\n\ndef inpstrlist():\n    s = input()\n    return(list(s[:len(s)]))\n\n\ndef invr():\n    return(map(int, input().split()))\n############ ---- Output Functions ---- ############\n\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = invr()\n    s = a + (2*b) + (3*c)\n    if s % 2 == 0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    \n    \n    \n    \n    \n    \n    \n    virat,rohit,hardik=map(int,input().split())\n    \n    \n    \n    \n    \n    \n    if ((virat)+(rohit*2)+(hardik*3))%2==0:\n        \n        \n        print(\"0\")\n        \n        \n    else:\n        \n        print(\"1\")",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int,input().split()))\n\nt, = I()\nfor _ in range(t):\n    a, b, c = I()\n    x,y,z = a%2,b%2,c%2\n    an = x*1+y*2+z*3\n    print(an%2)",
                true
            ],
            [
                "a=int(input())\nfor i in range(a):\n\n\n    x,y,z=map(int,input().split())\n    total=0\n    if(z%2==1):\n        total=3\n\n    if(total==3):\n        total=1\n        \n    \n\n    if(x>=total):\n        x-=total\n        total=0\n\n    else:\n    \n        total-=x\n        x=0\n    if(x%2==1):\n        total+=1\n    print(total)\n        \n        \n        \n",
                true
            ],
            [
                "def solve():\n    songs = [int(x) for x in input().split()]\n    durations = [1, 2, 3]\n    concert_duration = sum(s * d for (s, d) in zip(songs, durations))\n    if (concert_duration & 1) == 0:\n        return 0\n    if songs[0] > 0:\n        return 1\n    return 1\n\nif __name__=='__main__':\n    for _ in range(int(input())):\n        print(solve())\n",
                true
            ],
            [
                "t = int(input())\nwhile t:\n    t -= 1\n    a, b, c = list(map(int, input().split()))\n    one = a\n    two = b * 2\n    three = c * 3\n    total = one + two + three\n    print(total % 2)\n\n",
                true
            ],
            [
                "t = int(input())\n\nfor test in range(t):\n    one,two,three = map(int,input().split())\n    \n    diff = 0\n    diff += (three%2)*3\n    \n    if(two>0):\n        if(diff!=0):\n            diff = 1\n        else:\n            diff = (two%2)*2\n    \n    while(one>0):\n        if(diff ==0):\n            diff = one%2\n            break\n        one -=1\n        diff-=1\n    print(diff)",
                true
            ],
            [
                "from sys import stdin, stdout\nprint = stdout.write\ninput = stdin.readline\n\ndef solve_test():\n    a, b, c = (int(x) for x in input().split())\n    a, b, c = a%2, b%2, c%2\n    return f'{(a+b*2+c*3)%2}'\n\ndef main(args=None):\n    tests = int(input())\n    for _ in range(tests):\n        print(f\"{solve_test()}\\n\")\n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "t=int(input())\nwhile t!=0:\n    total=0\n    a,b,c=map(int,input().split())\n    total=total+a*1+b*2+c*3\n    d=total%2\n    print(d)\n    t=t-1",
                true
            ],
            [
                "def minimalDifferenceBetweenConcerts(a, b, c):\n    _sum = 1 * a + 2 * b + 3 * c\n    if _sum % 2 == 0:\n        return 0\n    else:\n        return 1\n    \nN = int(input())\n\nfor _ in range(N):\n    a, b, c = list(map(int, input().split(' ')))\n    result = minimalDifferenceBetweenConcerts(a, b, c)\n    print(result)",
                true
            ],
            [
                "T = input()\nfor t in range(int(T)):\n    ss = input().split(' ')\n    a = int(ss[0])\n    b = int(ss[1])\n    c = int(ss[2])\n    t1 = 0\n    t2 = 0\n    t3 = 0\n    if a % 2 == 1:\n        t1 = 1\n    if b % 2 == 1:\n        t2 = 1\n    if c % 2 == 1:\n        t3 = 1\n    if t1 and t2 and t3:\n        print(0)\n    elif t1 and t2:\n        print(1)\n    elif t1 and t3:\n        if a > 2 or b >= 2:\n            print(0)\n        else:\n            print(2)\n    elif t2 and t3:\n        print(1)\n    elif t1:\n        print(1)\n    elif t2:\n        if a >= 2:\n            print(0)\n        else:\n            print(2)\n    elif t3:\n        if a >= 2 or b >= 2:\n            print(1)\n        else:\n            print(3)\n    else:\n        print(0)",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n    line = input().split()\n    a = int(line[0])\n    b = int(line[1])\n    c = int(line[2])\n    c = c % 2\n    s = 0\n    if c == 1:\n        s = (a-1)%2\n    else:\n        s = a%2\n    print(s)\n\n",
                true
            ],
            [
                "t=int(input())\nfor slkdj in range(t):\n    l=[int(i)for i in input().split()]\n    for i in range(3):\n        l[i]*=(i+1)\n    print(sum(l)%2)\n",
                true
            ],
            [
                "t = int(input())\nwhile t != 0:\n  a, b, c = map(int, input().strip().split())\n  total = a + 2*b + 3*c\n  if total % 2 == 0:\n    print(0)\n  else:\n    print(1)\n  t -= 1",
                true
            ],
            [
                "from sys import stdin\ninput=stdin.readline\nrn=lambda:int(input())\nrns=lambda:map(int,input().split())\nrl=lambda:list(map(int,input().split()))\nrs=lambda:input().strip()\nYN=lambda x:print('YES') if x else print('NO')\nmod=10**9+7\n\nfor _ in range(rn()):\n    a,b,c=rns()\n    print(sum([a,2*b,3*c])%2)",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\n\ndef solve():\n    a, b, c = map(int, input().split())\n    ans = 0\n\n    if a % 2 ^ 1:\n        ans += 1\n    if b % 2 ^ 1:\n        ans += 2\n    if c % 2 ^ 1:\n        ans += 3\n        \n    print(ans - 2*(ans//2))\n\n\nt = int(input())\n\nfor _ in range(t):\n    solve()\n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    \n    print((a + b * 2 + c * 3) % 2)",
                true
            ],
            [
                "\nt = int(input())\nfor _ in range(t):\n    a,b,c = map(int, input().split())\n    curr_sum = a*1 + b*2 + c*3\n    if curr_sum%2 == 0:\n        print(0)\n    else:\n        print(1)     ",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    time = a + 2*b + 3*c\n    if time%2==0:print(0)\n    else: print(1)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    a,b,c = map(int,input().split())\n    out = a + b*2 + c*3\n    print(out%2)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    a,b,c=map(int, input().split())\n    a=a*1\n    b=b*2\n    c=c*3\n    if (a+b+c)%2==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "for z in range(int(input())):\n    a,b,c=map(int,input().split())\n    a=2 if a%2==0 else 1\n    b=2 if b%2==0 else 1\n    c=2 if c%2==0 else 1\n    if a==b and a==c:\n        print(0)\n    elif a==c and a!=b:\n        print(0)\n    else:\n        print(1)\n                ",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    x = list(map(int, input().split()))\n    print((x[0] + (x[1] * 2) + (x[2] * 3)) % 2)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    if (a + 2*b + 3*c) % 2 == 0:\n        print(0)\n    else:\n        print(1)\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    s=a+2*b+3*c\n    if s%2==0:\n        print('0')\n    else:\n        print('1')\n        ",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    b=2*b\n    c=3*c\n    res=abs(c-b-a)\n    print(res%2)",
                true
            ],
            [
                "t = int(input(\"\"))\nfor i in range(t):\n    numbers = list(map(int, input(\"\").split(\" \")))\n    if(((numbers[0]) + (numbers[1]*2) + (numbers[2]*3)) % 2 == 0):\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n  a, b, c = input().split()\n  a = int(a)\n  b = int(b)\n  c = int(c)\n  if (a + b * 2 + c * 3) % 2 == 1:\n    print(\"1\")\n  else:\n    print(\"0\")\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    b = b*2\n    c = c*3\n    print((a+b+c)%2)\n",
                true
            ],
            [
                "import math;from heapq import heappush,heappop,heapify;import random;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());H=1000000000+7\nfor _ in range(I()):\n    a,b,c=M()\n    if (a+2*b+3*c)%2==1:\n        print(1)\n    else:\n        print(0)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    a , b , c = map(int,input().split())\n    if ((a) + (2*b) + (3*c)) % 2 == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "for i in range(int(input())): a,b,c=map(int,input().split());print((a+b*2+c*3)&1)",
                true
            ],
            [
                "for t in range(int(input())):\n a,b,c=list(map(int,input().strip().split()))\n print((a+c)%2)\n\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n     a=list(map(int,input().split()))\n     print((a[0]+a[1]*2+a[2]*3)%2)",
                true
            ],
            [
                "t=int(input())\nfor h in range(t):\n    a,b,c=map(int,input().split())\n    z=a+2*b+3*c\n    if z%2==0:\n        print(0)\n    else:\n        print(1)\n    ",
                true
            ],
            [
                "def calc(mult, count, k1, k2):\n  diffCount = (abs(k2 - k1) // mult + 1) * mult\n  diff = (abs(k2 - k1) // mult + 1) * mult\n  k1 += (count - diffCount) // 2\n  k2 += (count - diffCount) // 2\n  if k1 < k2:\n    k1 += diff\n    k2 += (count - diffCount) % 2 * mult\n  else:\n    k2 += diff\n    k1 += (count - diffCount) % 2 * mult\n  return (k1, k2)\n\nt = int(input())\nres = []\nfor index in range(t):\n  a = list(map(int, input().split()))\n  k1, k2 = 0, 0\n  for i in range(3):\n    (k1, k2) = calc(3 - i, a[i], k1, k2)\n  res.append(abs(k1 - k2))\nfor index in range(t):\n  print(res[index])",
                true
            ],
            [
                "#coding=utf-8\nimport sys\nDEBUG = 0\n\nif DEBUG==1:\n    data = open('1.in', 'r')\n    #sys.stdout = open('tmp.out', 'w')\n\ndef readline():\n    if DEBUG == 1:\n        return data.readline().strip('\\r\\n')\n    else:\n        try:\n            return input().strip('\\r\\n')\n        except EOFError:\n            return ''\n\ndef readi():\n    return [int(t) for t in readline().split()]\n\ntc, = readi()\nfor _ in range(tc):\n    a,b,c = readi()\n    a %= 2\n    b %= 2\n    c %= 2\n    if c==1:\n        if a==1 and b==1:\n            print(0)\n        elif b==1:\n            print(1)\n        elif a==1:\n            print(0)\n        else:\n            print(1)\n    elif c==0:\n        if a==1 and b==1:\n            print(1)\n        elif b==1:\n            print(0)\n        elif a==1:\n            print(1)\n        else:\n            print(0)\n\n\n\nif DEBUG==1:\n    data.close()    \n",
                true
            ],
            [
                "n = int(input())\naa = []\n\nfor i in range(n):\n    a = input().split(\" \")\n    a = list(map(int, a))\n    aa.append(a)\n\n    \nfor j in aa:\n    x = (j[0] * 1) + (j[1] * 2) + (j[2] * 3)\n    if x%2 == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "t=int(input())\nwhile(t):\n    a,b,c=map(int,input().split())\n    if a==b and b==c:\n        print(0)\n    else:\n        print(((1*a)+(2*b)+(3*c))%2)\n    t=t-1\n",
                true
            ],
            [
                "for i in range(int(input())):\n    a,b,c=map(int, input().split())\n    if(a==b and b==c):\n        print(0)\n    else:\n        t=a*1+b*2+c*3\n        avgg=int(t/2)\n        remt=int(t-avgg)\n        print(int(abs(remt-avgg)))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    x = (a+(2*b) + (3*c))\n    if x % 2 == 0:\n        print(\"0\")\n    else:\n        print(\"1\")\n        ",
                true
            ],
            [
                "import math\nt=int(input())\nwhile(t>0):\n    t-=1\n    #n=int(input())\n    #l=list(map(int,input().split()))\n    a,b,c=map(int,input().split())\n    print( (a+2*b+3*c)%2 )\n",
                true
            ],
            [
                "from math import ceil\n\nfor _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    print((a + 2 * b + 3 * c) % 2)\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\ninp_vars_int = lambda: map(int, input().split())\ninp_list_int = lambda: list(map(int, input().split()))\n\nt = int(input())\n\nfor _ in range(t):\n    a, b, c = inp_vars_int()\n    full = a + 2 * b + 3 * c   \n    print(full % 2)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a,b,c = map(int, input().split())\n    s = a + 2*b + 3*c\n    if s % 2 == 0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    a,b,c = map(int,input().split())\n    print((a+2*b+3*c)%2)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    a,b,c=map(int,input().split())\n    if((a+b*2+c*3)%2==0):\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    a,b,c=map(int,input().split())\n    bb=2*b\n    cc=3*c\n    total=a+bb+cc\n    if(total%2==0):\n        print(\"0\")\n    else:\n        print(\"1\")",
                true
            ],
            [
                "if __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        bits = input().strip().split()\n        a = int(bits[0])\n        b = int(bits[1])\n        c = int(bits[2])\n        s = a + 2*b + 3*c\n        if s % 2 == 0:\n            print(0)\n        else:\n            print(1)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = list(map(int,input().split()))\n    total = n[0] + 2*n[1] + 3*n[2]\n    print(0 if total%2==0 else 1)",
                true
            ],
            [
                "from math import *\n#from bisect import *\n#from collections import *\n#from random import *\n#from decimal import *\"\"\"\n#from heapq import *\n#from itertools import *\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return map(int,input().split())\nt=inp()\nwhile(t):\n    t-=1\n    a,b,c=ma()\n    a=3*a\n    b=2*b\n    if((a+b+c)%2):\n        print(1)\n    else:\n        print(0)\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nMonocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "n = int(input())\nfor k in range(n):\n    count = int(input())\n    sums = 0\n    arrs = {}\n    arr = list(map(int, input().split(\" \")))\n    for j in arr:\n        sums += j\n        if (j in arrs):\n            arrs[j] += 1\n        else:\n            arrs[j] = 1\n    result = 0\n    mid = sums / count\n    need = (sums*2)/count\n    for j in arr:\n        a2 = need - j\n        if (a2 not in arrs):\n            continue\n        if (arrs[a2] == 0):\n            continue\n        if (a2 in arrs):\n            result += arrs[a2]\n        arrs[j] -= 1\n        if (a2 == j):\n            result -= 1\n            \n    print(result)\n",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    arr = [int(c) for c in s]\n    total = sum(arr)\n    arr.sort()\n    cnt = 0\n    cnts = Counter()\n    for num in arr:\n        pre = 2*total/n-num\n        cnt += cnts[pre]\n        cnts[num]+=1\n    print(cnt)\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\n#sys.setrecursionlimit(10**7)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\n#Fenwick Tree point update range sum\ndef update_it(bit,i,val):\n    n=len(bit)\n    while(i<n):\n        bit[i]+=val\n        i+=i&(-i)\ndef get_ans(bit,i):\n    n=len(bit)\n    tot=0\n    while(i>0):\n        tot+=bit[i]\n        i-=i&(-i)\n    return tot\ndef hnbhai(tc):\n    n=sb()\n    a=sd()\n    s=0\n    for i in a:\n        s+=i\n    temp=(s*(n-2))/n\n    t=a.copy()\n    t.sort()\n    if int(temp)!=temp:\n        print(0)\n        return\n    temp=s-temp\n    dic=dict()\n    ans=0\n    for i in t:\n        tt=temp-i\n        ans+=dic.get(tt,0)\n        dic[i]=dic.get(i,0)\n        dic[i]+=1\n    print(ans)\nfor _ in range(sb()):\n    hnbhai(_+1)\n",
                true
            ],
            [
                "from math import floor\nfrom collections import defaultdict\n\n\ndef delete_two(array):\n  cnt = 0\n  if 2 * sum(array) % len(array) != 0:\n    return 0\n  val = 2 * sum(array) // len(array)\n  mp = defaultdict(int)\n  for x in array:\n    if val - x in mp:\n      cnt += mp[val - x]\n    mp[x] += 1\n  return cnt\n\n\ndef main():\n  t = int(input())\n  for i in range(t):\n    _ = input()\n    array = list(map(int, input().split()))\n    print(delete_two(array))\n\n\nif __name__ == '__main__':\n  main()",
                true
            ],
            [
                "#task c\n\nt = int(input())\nnumbers = []\nfor i in range(t):\n    a = int(input())\n    numbers.append(list(map(float, input().split())))\n    \ndef mean(a):\n    return sum(a)/len(a)\ndef c_pairs(a):\n    k = mean(a)\n    n = len(a)\n    count = 0\n    d = {}\n    for i, cur in enumerate(a):\n        if cur not in d:\n            d[cur] = []\n        hist = 2*k-cur\n        #print(hist)\n        if hist in d:\n            count+= len(d[hist])\n        d[cur].append(i)\n        \n    return count\n\nfor i in range(t):\n    print(c_pairs(numbers[i]))",
                true
            ],
            [
                "from collections import defaultdict\n\n\ndef f(az):\n    s = sum(az)\n\n    trgt = 2 * s / n\n    if not trgt.is_integer():\n        return 0\n\n    # two sum\n    res = 0\n    ht = defaultdict(int)\n    for i,x in enumerate(az):\n        new_trgt = trgt - x\n        if new_trgt in ht:\n           res += ht[new_trgt]\n        ht[x] += 1\n    \n    return res \n\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    az = [int(x) for x in input().split()]\n\n    print(f(az))\n",
                true
            ],
            [
                "import bisect\n\n_ = int(input())\nfor __ in range(_):\n    n = int(input())\n    arr = sorted(list(map(int, input().split())))\n    avg = sum(arr)/n\n    out = 0\n    if int(avg*2) != avg*2:\n        print('0')\n        continue\n    pairs = 0\n    for x in arr:\n        s = int(avg*2-x)\n        if s < 0:\n            break\n        pos_l = bisect.bisect_left(arr, s)\n        pos_r = bisect.bisect_right(arr, s)\n        d = pos_r - pos_l\n        if s == x:\n            d -= 1\n        out += d\n    print(out//2)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    A = 2*sum(s)/n\n    a = {}\n    ans = 0\n    for i in s:\n        if A - i in a:\n            ans += a[A-i]\n        if i not in a:\n            a[i] = 0\n        a[i] += 1\n    print(ans)\n",
                true
            ],
            [
                "from sys import stdin, stdout\nip = lambda : stdin.readline().rstrip(\"\\r\\n\")\nips = lambda : ip().split()\nmp = lambda : map(int, ips())\nls = lambda : list(mp())\nout = lambda x, end='\\n': stdout.write(f\"{x}{end}\")\nfrom collections import defaultdict\n# inf = float(\"inf\")\n# mod = 10**9+7\n    \nfor _ in range(int(ip())):\n    n = int(ip())\n    a = ls()\n    s = sum(a)*2\n    if s%n != 0:\n        out(0)\n    else:\n        s //= n\n        d = defaultdict(int)\n        c = 0\n        for i in range(n):\n            if d.get(s-a[i], -1) != -1:\n                c += d[s-a[i]]\n            d[a[i]] += 1\n        out(c)",
                true
            ],
            [
                "def getcount(arr, n, sum):\n  m={}\n  count = 0\n  for i in range(n):\n      if sum - arr[i] in m:\n          count += m[sum - arr[i]]\n \n      if arr[i] in m:\n          m[arr[i]] += 1\n      else:\n          m[arr[i]] = 1\n  return count\n \nfor x in range(int(input())):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    s=sum(arr)\n    avg=s/n\n    '''if(avg*n!=s):\n        print(0)\n        continue'''\n    df=s-avg*(n-2)\n    ans=getcount(arr,n,df)\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor case in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    s = sum(a)\n  \n    avg = s/n\n    k = s-avg*(n-2)\n    \n    d ={}\n    count =0\n    for i in range(n):\n      if k-a[i] in d:\n        count+=d[k-a[i]]\n\n      if a[i] in d:\n        d[a[i]]+=1\n      else:\n        d[a[i]]=1\n    print(count)\n",
                true
            ],
            [
                "from collections import Counter\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    s = sum(a) / n\n    c = Counter()\n\n    d = 0\n    for i in a:\n        d += c[2*s - i]\n        c[i] += 1\n\n    print(d)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    meanx2 = 0\n    all_numbers = list()\n    for i in input().split():\n        i = int(i)\n        meanx2 += i\n        all_numbers.append(i)\n\n    if 2*meanx2 % n != 0:\n        print(0)\n        continue\n    meanx2 = 2 * meanx2 // n\n\n    lower = list()\n    mid = 0\n    upper = dict()\n    for i in all_numbers:\n        if i < meanx2 / 2:\n            lower.append(i)\n        elif i > meanx2 / 2:\n            old = upper.get(i, 0)\n            upper[i] = old + 1\n        else:\n            mid += 1\n\n    answer = 0\n    for i in lower:\n        answer += upper.get(meanx2 - i, 0)\n    answer += ((mid - 1) * mid) // 2\n\n    print(answer)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    D = {}\n    for a in A:\n        if a in D: D[a] += 1\n        else: D[a] = 1\n    S = sum(A)\n    if 2 * S % N: return print(0)\n    B = 2 * S // N\n    Ans = 0\n    for a in A:\n        if B - a in D:\n            Ans += D[B - a]\n            if B - a == a: Ans -= 1\n        D[a] -= 1\n    print(Ans)\n\nif __name__ == '__main__':\n    T = int(input())\n    for _ in range(T):\n        main()",
                true
            ],
            [
                "# https://codeforces.com/contest/1598/problem/C\n\ndef nC2(n):\n    return n * (n-1) // 2\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    numbers.sort()\n    double_mean = 2 * sum(numbers) / n\n    count = 0\n\n    left_ptr = 0\n    right_ptr = n - 1\n\n    while left_ptr < right_ptr:\n        left_num = numbers[left_ptr]\n        right_num = numbers[right_ptr]\n\n        if left_num + right_num == double_mean:\n            if left_num == right_num:\n                count += nC2(right_ptr-left_ptr+1)\n                break\n            left_same = 1\n            right_same = 1\n            while numbers[left_ptr] == numbers[left_ptr+1]:\n                left_ptr += 1\n                left_same += 1\n            left_ptr += 1\n            while numbers[right_ptr] == numbers[right_ptr-1]:\n                right_ptr -= 1\n                right_same += 1\n            right_ptr -= 1\n            count += left_same * right_same\n\n        elif left_num + right_num < double_mean:\n            left_ptr += 1\n        elif left_num + right_num > double_mean:\n            right_ptr -= 1\n\n    print(count)\n",
                true
            ],
            [
                "from collections import deque, defaultdict, Counter\nfrom itertools import product, groupby, permutations, combinations, accumulate, zip_longest, \\\n    combinations_with_replacement\nfrom math import gcd, floor, inf, log2, sqrt, log10, factorial\nfrom bisect import bisect_right, bisect_left, insort_left\nfrom statistics import mode\nfrom string import ascii_lowercase, ascii_uppercase\nfrom heapq import heapify, heappop, heappush, heappushpop, heapreplace, nlargest, nsmallest, \\\n    merge\nfrom copy import deepcopy\nfrom random import shuffle\ncases = int(input())\nfor _ in range(cases):\n    num = int(input())\n    arr = list(map(int, input().split()))\n    freq = Counter(arr)\n    mean = 2*sum(arr)/num\n    count = defaultdict(int)\n    seen = set()\n    used = set()\n    cnt = 0\n    ans = 0\n    for n in arr:\n        needed = mean-n\n        if needed in seen:\n            if needed not in used and n not in used:\n                if needed == n:\n                    temp = freq[needed]\n                    ans += temp * (temp-1)//2\n                else:\n                    ans += freq[needed]*freq[n]\n                used.add(n)\n                used.add(needed)\n        seen.add(n)\n    print(ans)\n\n\n\n",
                true
            ],
            [
                "from collections import defaultdict\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    k = sum(a) - (((n-2)*(sum(a)))/n)\n    #print(k)\n    d = defaultdict(lambda : 0)\n    count = 0\n    for i in a:\n        if (k - i) in d:\n            count += d[k-i]\n        d[i] += 1\n    print(count)\n",
                true
            ],
            [
                "def delete_two_elements(a, n):\n    total = 0\n    counts_by_ai = {}\n    for ai in a:\n        total += ai\n        if ai in counts_by_ai:\n            counts_by_ai[ai] += 1\n        else:\n            counts_by_ai[ai] = 1\n\n    b = 2 * total // n\n    if b * n != 2 * total:\n        return 0\n\n    count = 0\n    for ai in sorted(counts_by_ai.keys()):\n        if 2 * ai < b:\n            count += counts_by_ai[ai] * counts_by_ai.get(b - ai, 0)\n        elif 2 * ai == b:\n            count += counts_by_ai[ai] * (counts_by_ai[ai] - 1) // 2\n    return count\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(\" \")))\n    print(delete_two_elements(a, n))\n",
                true
            ],
            [
                "n = int(input())\nfrom collections import Counter\nfor i in range(n):\n    k = int(input())\n    a = list(map(int,input().split()))\n    c = Counter(a)\n    x = 2* sum(a)/k\n    a = set(a)\n    if x % 1 == 0:\n        x=int(x)\n        ans = 0\n        for j in a:\n            if j <= x//2:\n                if j!= x - j:\n                    ans += c[j]*c[x-j]\n                else:\n                    ans += ((c[j]-1)*c[x-j])//2\n        print(ans)\n        del ans, a, x\n    else:\n        print(0)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    res = {}\n    s = 0\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = sum(arr) * 2\n    if k % n:\n        print(0)\n        continue\n    k //= n\n    for i in arr:\n        e = k - i\n        if e < 0:\n            continue\n        s += res.get(e, 0)\n        res[i] = res.get(i, 0) + 1\n    print(s)\n",
                true
            ],
            [
                "import math\nfrom sys import stdin\ninput = stdin.readline\n\ntest = int(input())\nfor _ in range(test):\n    n, arr, result = int(input()), [], True\n    arr = list(map(int, input().split()))\n    k = (sum(arr)*1.0)/len(arr)\n    d, res = {}, 0\n    for a in arr:\n        if(2*k - a in d):\n            res += d[2*k - a]\n        d[a] = d.get(a, 0) + 1\n    print(res)",
                true
            ],
            [
                "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log2, ceil\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom bisect import insort\nfrom collections import Counter\nfrom collections import deque\nfrom heapq import heappush,heappop,heapify\nfrom itertools import permutations,combinations\nfrom itertools import accumulate as ac\nfrom random import randint as ri\nmod = int(1e9)+7\n#mod = 998244353\n \nip = lambda : int(stdin.readline())\ninp = lambda: map(int,stdin.readline().split())\nips = lambda: stdin.readline().rstrip()\nout = lambda x : stdout.write(str(x)+\"\\n\")\n\nt = ip()\nfor _ in range(t):\n    n = ip()\n    arr = list(inp())\n    dic = Counter()\n    cur = sum(arr)\n    ans = 0\n    for i in arr:\n        num = cur*(n-2)\n        den = n\n        if num%den == 0:\n            c = num//den\n            ele = cur-i-c\n            ans += dic[ele]\n        dic[i] += 1\n\n    print(ans)\n            \n                    \n                \n                \n                \n                \n        \n        \n    \n            \n        \n            \n        \n            \n            \n        \n            \n    \n        \n\n\n",
                true
            ],
            [
                "import sys\nLI=lambda:list(map(int,sys.stdin.readline().split()))\nMI=lambda:map(int,sys.stdin.readline().split())\nSI=lambda:sys.stdin.readline().strip('\\n')\nII=lambda:int(sys.stdin.readline())\n\nfor _ in range(II()):\n    n=II()\n    a=LI()\n    cnt={}\n    for v in a:\n        cnt[v]=cnt.get(v,0)+1\n    s=sum(a)\n    avg=s/n\n    s1=avg*(n-2)\n    ans=0\n    for v in a:\n        x=s-s1-v\n        ans+=(cnt.get(x,0)-(v==x))\n    print(ans//2)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    at = (sum(l)*(n-2))/n\n    ls = {}\n    for i in l:\n        if(i in ls):\n            ls[i]+=1\n        else:\n            ls[i]=1\n    ans = 0\n    at = sum(l)-at\n    # print(\"===>>\", sum(l)/n, ls)\n    for i, j in ls.items():\n        if((at-i) in ls):\n            # print(i, j, at-i)\n            if((at-i)==i):\n                ans+=((j*(j-1))//2)\n                ls[i]=0\n            else:\n                ans+=(j*ls[at-i])\n                ls[i]=0\n                ls[at-i]=0\n    print(ans)",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    seq = list(map(int, input().split()))\n\n    # sum(seq) / n == sum(seq - p - q) / (n - 2) -> sum(seq) * (n - 2) == n * sum(seq - p - q)\n    res = sum(seq) * (n - 2)\n    if res % n != 0:\n        print(0)\n    else:\n        k = sum(seq) - (res // n)\n        freq = {x: 0 for x in seq}\n        freq.update({k - x: 0 for x in seq})\n\n        for x in seq:\n            freq[x] += 1\n\n        ans = 0\n        for x in seq:\n            freq[x] -= 1\n            ans += freq[k - x]\n        print(ans)\n\n[solve() for _ in range(int(input()))]\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    avg = sum(arr)/n\n    count = dict.fromkeys(arr,0)\n    for x in arr:\n        count[x] += 1\n    arr = list(set(arr))\n    if len(arr)==1:\n        print((n*(n-1))//2)\n        continue\n    arr.sort()\n    ans = 0\n    i, j = 0, len(arr)-1\n    while i <= j:\n        while (arr[i]+arr[j])/2 > avg and j>i:\n            j -= 1\n        if (arr[i]+arr[j])/2 == avg and i!=j:\n            #print(arr[i],arr[j])\n            ans += count[arr[i]] * count[arr[j]]\n        if i==j and arr[i] == avg:\n            l = count[arr[i]]\n            ans += l*(l-1)//2\n        i += 1\n    print(ans)",
                true
            ],
            [
                "from math import ceil, floor\nfrom collections import defaultdict\ntest = int(input())\nfor t in range(test):\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    S = sum(arr)/n\n    \n    if ceil(2*S) != floor(2*S):\n        print(0)\n        continue\n    \n    S = floor(2*S)\n    mp = defaultdict(int)\n    cnt = 0\n    for i in range(n):\n        if S - arr[i] in mp:\n            cnt += mp[S - arr[i]]\n        mp[arr[i]] += 1\n    print(cnt)\n",
                true
            ],
            [
                "import sys\nfrom collections import defaultdict\n \ninput = sys.stdin.readline\ntestcases = int(input())\n \ntests = []\nfor i in range(testcases):\n    input = sys.stdin.readline\n    n = int(input())\n \n    input = sys.stdin.readline\n    nums = list(map(int, input().split()))\n    tests.append(nums)\n \ndef deleteTwoElements(nums):\n    n = len(nums)\n    summation = sum(nums)\n    avg = summation/n\n    wantedSum = 2 * avg\n    \n    hashset = set()\n \n    ways = 0\n\n    count = defaultdict(int)    \n \n    for num in nums:\n        if num in hashset:\n            ways += count[wantedSum - num]\n        hashset.add(wantedSum - num)\n        count[num] += 1\n    \n    return ways\n \nfor test in tests:\n    print(deleteTwoElements(test))",
                true
            ],
            [
                "# ///////////////////////////////////////////////////////////////////////////\n# //////////////////// LEGEND ////////////////////////\n# ///////////////////////////////////////////////////////////////////////////\nimport sys,os,io\nfrom sys import stdin\nimport math \nfrom collections import defaultdict\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left , bisect_right\nfrom io import BytesIO, IOBase\nBUFSIZE = 8192\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\n\n\nalphabets = list('abcdefghijklmnopqrstuvwxyz')\n\n\n\n#for deep recursion__________________________________________-\nfrom types import GeneratorType\ndef bootstrap(f, stack=[]):\n    def wrappedfunc(*args, **kwargs):\n        if stack:\n            return f(*args, **kwargs)\n        else:\n            to = f(*args, **kwargs)\n            while True:\n                if type(to) is GeneratorType:\n                    stack.append(to)\n                    to = next(to)\n                else:\n                    stack.pop()\n                    if not stack:\n                        break\n                    to = stack[-1].send(to)\n            return to\n\n    return wrappedfunc\n\ndef ncr(n, r, p):  \n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den,p - 2, p)) % p\n\ndef primeFactors(n): \n    l = []\n    while n % 2 == 0: \n        l.append(2)\n        n = n / 2\n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i== 0: \n            l.append(int(i))\n            n = n / i \n    if n > 2: \n        l.append(n)\n    # c = dict(Counter(l))\n    return list(set(l))\n    # return c\n\ndef power(x, y, p) : \n    res = 1\n    x = x % p \n    if (x == 0) : \n        return 0\n    while (y > 0) : \n        if ((y & 1) == 1) : \n            res = (res * x) % p \n        y = y >> 1     # y = y/2 \n        x = (x * x) % p         \n    return res \n\n#____________________GetPrimeFactors in log(n)________________________________________\ndef sieveForSmallestPrimeFactor():\n    MAXN = 100001\n    spf = [0 for i in range(MAXN)]\n    spf[1] = 1\n    for i in range(2, MAXN):\n        spf[i] = i\n    for i in range(4, MAXN, 2):\n        spf[i] = 2\n    for i in range(3, math.ceil(math.sqrt(MAXN))):\n        if (spf[i] == i):\n            for j in range(i * i, MAXN, i): \n                if (spf[j] == j):\n                    spf[j] = i\n    return spf\ndef getPrimeFactorizationLOGN(x):\n    spf = sieveForSmallestPrimeFactor()\n    ret = list()\n    while (x != 1):\n        ret.append(spf[x])\n        x = x // spf[x]  \n    return ret\n#____________________________________________________________\n\n\n\ndef SieveOfEratosthenes(n): \n    #time complexity = nlog(log(n))\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n    return prime\ndef si():\n    return input()\ndef divideCeil(n,x):\n    if (n%x==0):\n        return n//x\n    return n//x+1\ndef ii():\n    return int(input())\ndef li():\n    return list(map(int,input().split()))\n\n\n# ///////////////////////////////////////////////////////////////////////////\n# //////////////////// DO NOT TOUCH BEFORE THIS LINE ////////////////////////\n# ///////////////////////////////////////////////////////////////////////////\nif(os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\",\"r\") ; sys.stdout = open(\"output.txt\",\"w\") \n# else:\n#     sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n#     input = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\ndef solve():\n    n = ii()\n    l = li()\n    s = sum(l)\n    if (2*s)%n!=0:\n        print(0)\n        return \n    reqSum = (2*s)//n \n    d = defaultdict(lambda:0)\n    # for i in l:\n        \n    ans = 0\n    for i in l:\n        x = reqSum - i \n        ans += d[x]\n        d[i]+=1 \n    print(ans)\n\n\nt = 1\nt = ii()\nfor _ in range(t):\n    solve()\n",
                true
            ],
            [
                "from collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, log2, sqrt, gcd\nimport bisect\nimport copy\nfrom itertools import combinations\nimport sys\nimport heapq\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef input(): return sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n\n        n=int(input())\n        a=get_array()\n        tot=sum(a)\n        sumi=(2*tot)/n\n\n        d=defaultdict(int)\n\n        for i in range(n):\n            d[a[i]]+=1\n\n        ans=0\n\n        li=list(d.keys())\n        for i in range(len(li)):\n            num1=li[i]\n            if  num1<=sumi:\n                num2=sumi-num1\n                if num1!=num2:\n                    ans+=d[num1]*d[num2]\n                else:\n                    ans+=(d[num1]*(d[num1]-1))\n\n        print(ans//2)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    from collections import defaultdict\n    arr=list(map(int, input().split()))\n    temp=(2*sum(arr))/n\n    dic=defaultdict(int)\n    ans=0\n    for x in arr:\n        if (temp-x) in dic:\n            ans+=dic[temp-x]\n        dic[float(x)]+=1\n\n    print(ans)",
                true
            ],
            [
                "from collections import Counter\n\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    su = sum(arr)\n    if 2*su % n:\n        return 0\n    k = 2*su // n\n    cnt = Counter(arr)\n    ans = 0\n    for a in arr:\n        ans += cnt[k-a]\n        if 2*a == k:\n            ans -= 1\n    return ans // 2\n\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor i in range(t):\n    print(solve())\n\n\n\n\n",
                true
            ],
            [
                "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    counts = defaultdict(int)\n    avg = sum(arr)/n\n    for x in arr:\n        counts[x] += 1\n    ans = 0\n    for x in {x for x in arr if x < avg}:\n        ans += counts[x]*counts[2*avg-x]\n\n    ans += counts[avg]*(counts[avg]-1)//2\n    print(ans)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    k = (2 * sum(a)) / n\n    l, r = 0, n - 1\n    ans = set()\n    while l != r:\n        if a[l] + a[r] == k:\n            ans.add((a[l], a[r]))\n            l += 1\n        elif a[l] + a[r] < k:\n            l += 1\n        else:\n            r -= 1\n    b = 0\n    d = {}\n    for e in ans:\n        d[e[0]] = 0\n        d[e[1]] = 0\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += 1\n    for e in ans:\n        if e[0] == e[1]:\n            i = d[e[0]]\n            b += ((i * (i - 1)) // 2)\n        else:\n            i = d[e[0]]\n            j = d[e[1]]\n            b += i * j\n    print(b)\n",
                true
            ],
            [
                "import sys,os,io\ninput = sys.stdin.readline # for strings\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline # for non-strings\n\nPI = 3.141592653589793238460\nINF =  float('inf')\nMOD  = 1000000007\n# MOD = 998244353\n\n\ndef bin32(num):\n    return '{0:032b}'.format(num)\n\ndef add(x,y):\n    return (x+y)%MOD\n\ndef sub(x,y):\n    return (x-y+MOD)%MOD\n\ndef mul(x,y):\n    return (x*y)%MOD\n\ndef gcd(x,y):\n    if y == 0:\n        return x\n    return gcd(y,x%y)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\ndef power(x,y):\n    res = 1\n    x%=MOD\n    while y!=0:\n        if y&1 :\n            res = mul(res,x)\n        y>>=1\n        x = mul(x,x)\n        \n    return res\n        \ndef mod_inv(n):\n    return power(n,MOD-2)\n\ndef prob(p,q):\n    return mul(p,power(q,MOD-2))    \n  \ndef ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef ls():\n    return [i for i in input().split()]\n\nfrom collections import defaultdict\n\nfor t in range(ii()):\n    t+=1\n    n = ii()\n\n    # store = [0 for i in range(n)]\n\n    # for i in range(n):\n    #     store[i] = li()\n    a = li()\n\n    g = 2*sum(a)\n    f = defaultdict(lambda:0)\n    for j in range(n):\n        a[j]*=n\n        \n        f[a[j]]+=1\n\n    \n    ans = 0\n    # print(f)\n    for i in f:\n        \n        j = g - i\n        # print(j , i)\n        if j == i:\n            ans+= (f[i]*(f[i]-1))//2\n        else:\n            if j < i and j in f:\n                ans+= f[i]*f[j]\n    print(ans)\n",
                true
            ],
            [
                "import collections\nimport sys\n\n\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\n\n\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\n\n\ndef input(): return sys.stdin.readline().strip()\n\n\nMOD = 1000000007\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = get_array()\n    x = sum(arr)\n    y = x - (2 * x) / n\n    k = sum(arr) / n\n    c = collections.Counter(arr)\n    cnt = 0\n    for i in range(n):\n        c[arr[i]] -= 1\n        cnt += c.get(2 * k - arr[i], 0)\n    print(cnt)",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    l=[int(x) for x in input().split()]\n    l.sort()\n    i,j = 0,n-1\n    k = (sum(l)/n)*2\n    res = 0\n    while(i<j):\n        if l[i]+l[j] == k:\n            if l[i] == l[j]:\n                res+=((j-i+1)*(j-i))//2\n                break\n            else:\n                ci = 1\n                cj = 1\n                while(l[i]==l[i+1]):\n                    i+=1\n                    ci+=1\n                while(l[j]==l[j-1]):\n                    j-=1\n                    cj+=1\n                res+=(ci*cj)\n            i+=1\n            j-=1\n        elif l[i]+l[j]>k:\n            j-=1\n        else:\n            i+=1\n    print(res)\n            \n        \n            ",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    som = sum(l)\n    ans = 0\n    d = {}\n    for i in l:\n        x = (2*som)-(n*i)\n        if x in d:\n            ans += d[x]\n\n        g = n*i\n        if g in d:\n            d[g] += 1\n\n        else:\n            d[g] = 1\n\n    # print(d)\n    sys.stdout.write(str(ans)+\"\\n\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    ns = (s*(n-2))/n\n    rs = s-ns\n    c = 0\n    hmap = {}\n    for i in arr:\n        a = rs - i\n        if a in hmap:\n            c += hmap[a]\n        hmap[i] = hmap.get(i, 0) + 1\n    print(c)",
                true
            ],
            [
                "from collections import defaultdict\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=[int(x) for x in input().split()]\n    b=a[:]\n    x=sum(a)/n\n    s=2*x\n    c=0\n    d=defaultdict(lambda: 0)\n    for i in a:\n        d[i]+=1\n    if(int(s)!=s):\n        print(0)\n    else:\n        for i in range(n):\n            d[a[i]]-=1\n            c+=d[s-a[i]]\n        print(c)",
                true
            ],
            [
                "from math import *\nfrom collections import defaultdict as dt\nfrom sys import stdin\ninp = lambda : stdin.readline().strip()\nI   = lambda : int(inp())\nM   = lambda : map(int,inp().split())\nL   = lambda : list(M())\nmod = 1000000007\ninf = 100000000000000000000\nss  = \"abcdefghijklmnopqrstuvwxyz\"\n############## All the best start coding #############\ndef solve():\n    n=I()\n    b=L()\n    d=dt(int)\n    y=2*(sum(b)/n)\n    a=[]\n    for i in b:\n        d[i]+=1\n        if d[i]==1:\n            a.append(i)\n    a.sort()\n    i=0\n    j=len(a)-1\n    c=0\n    while i<j:\n        x=a[i]+a[j]\n        if x==y:\n            c=c+d[a[i]]*d[a[j]]\n            i=i+1\n        elif x<y:\n            i=i+1\n        else:\n            j=j-1\n    y=y/2\n    print(c+(d[y]*(d[y]-1))//2)\n    \n##################### Submit now #####################\n \ntt=1\ntt=I()\nfor _ in range(tt):\n    solve()\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(sorted(list(map(int,input().split()))))\n    c = []\n    for i in range(0,n):\n        if(i == 0 or l[i-1] !=l[i]):\n            c.append([l[i],1])\n        elif( l[i-1] ==l[i]):\n            c[-1][1]+=1\n    s =sum(l)*2\n    n1 = n\n    n = len(c)\n    p1 = 0\n    p2 = n-1\n    ans = 0\n    while(p1<=p2):\n        while(p1<=p2 and (c[p1][0]+c[p2][0])*n1>s):\n            p2-=1\n        if(p1>p2): break\n        if((c[p1][0]+c[p2][0])*n1==s):\n            if(p1==p2):\n                ans+=(c[p1][1]-1)*c[p1][1]//2\n            else:\n                ans+=c[p1][1]*c[p2][1]\n        p1+=1\n    print(ans)\n\n\n",
                true
            ],
            [
                "def get_pairs(l,val):\n    from collections import Counter\n    d=Counter()\n    count=0\n    for i,n in enumerate(l):\n        if val-n in d:\n            count+=d[val-n]\n        d[n]+=1\n    return count        \n            \n\nfor _ in range(int(input())):\n    N=int(input())\n    l=list(map(int,input().split()))\n    def func():\n        S=sum(l)\n        if (2*S)%N!=0:\n            return 0\n        return get_pairs(l,(2*(S))//N)\n    print (func())\n        \n    ",
                true
            ],
            [
                "from math import factorial\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n\n    av = sum(s)/n\n    AV2 = av*2\n    d = dict()\n    ans = 0\n    for i in range(n):\n        ans += d.get(AV2- s[i], 0)\n        d[s[i]] = d.get(s[i], 0) +1    \n    # for i in set(s):\n    #     if i == av:\n    #         if d[i] >1:\n    #             ans += factorial(d[i]-1)\n    #     else:\n    #         ad =  d.get(AV2-i, 0)\n            \n    #         if ad:\n    #             ans +=ad\n    #             del d[i]\n    print(ans)\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor test in range(t):\n    n = int(input())\n    p = list(map(int,input().split()))\n    \n    org_sum = sum(p)\n    mean = org_sum / n\n    diff = org_sum - (mean * (n-2))\n    if(diff%1 != 0):\n        print(0)\n        continue\n    ans = [0]*len(p)\n    dist = {}\n    \n    for ind,i in enumerate(p):\n        if i not in dist:\n            dist[i]=1\n        else:\n            dist[i]+=1\n        if diff-i in dist:\n            ans[ind] -= dist[diff-i]\n    for ind,i in enumerate(p):\n        if diff-i in dist:\n            ans[ind] += dist[diff-i]\n    res = 0\n    for i in ans:\n        if i>0:\n            res+=i\n    print(res)",
                true
            ],
            [
                "def pop_ct(s):\n  t = s\n  ct = 0\n  while t > 0:\n    if t & 1:\n      ct += 1\n    t >>= 1\n  return ct\n    \nfrom collections import defaultdict as dft\nfor _ in range(int(input())):\n  N = int(input())\n  A = list(map(int,input().split()))\n  \n  S = sum(A)\n  B = [a * N - S for a in A]\n  \n  ct = dft(int)\n  for b in B:\n    ct[b] += 1\n    \n  ans = 0\n  for c, v in ct.items():\n    if -c not in ct: continue\n    if c == 0:\n      ans += v * (v-1)\n    else:\n      ans += v * ct[-c]\n      \n      \n  print(ans // 2)\n      \n  \"\"\"    \n  if flag:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n  \"\"\"",
                true
            ],
            [
                "def helper(arr,n):\n    \n    s = 0\n    \n    for i in range(len(arr)):\n        \n        s += arr[i]\n        arr[i] *= n\n        \n    target = 2*s\n    \n    d = {}\n    \n    ans = 0\n    \n    for i in range(n):\n        \n        if target - arr[i] in d:\n            ans += d[target - arr[i]]\n        \n        if arr[i] not in d:\n            d[arr[i]] = 0\n            \n        d[arr[i]] += 1\n        \n    return ans\n        \n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    \n    arr = list(map(int,input().strip().split()))\n    \n    ans = helper(arr,n)\n    \n    print(ans)\n",
                true
            ],
            [
                "from typing import Counter, DefaultDict\n\n\ndef solve(n,arr):\n    tot = sum(arr)\n\n    m = tot / n\n    new_tot = ((n - 2) * tot) / n\n\n    diff = tot - new_tot\n    res = 0\n    equals = set()\n    \n    arrSet = DefaultDict(int)\n    for i in arr:\n        rem = diff - i\n        if rem in arrSet:            \n            res += arrSet[rem]            \n        arrSet[i] += 1\n\n    print(f\"{res}\")\n    return\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int,input().split()))\n        solve(n,arr)\n\nmain()\n# n = 4\n# arr = [8, 8, 8, 8]\n# solve(n,arr)",
                true
            ],
            [
                "from sys import stdin,stdout\nfrom collections import defaultdict\nimport bisect\nimport math\ninput=stdin.readline\n\ndef inp(): return map(int,input().split())\ndef f(arr, n, s):\n    unordered_map = {}\n    cnt = 0\n    for i in range(n):\n        if s - arr[i] in unordered_map:\n            cnt += unordered_map[s - arr[i]]\n        if arr[i] in unordered_map:\n            unordered_map[arr[i]] += 1\n        else:\n            unordered_map[arr[i]] = 1\n    return cnt\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(inp())\n    s=sum(a)\n    m=(s/n)*(n-2)\n    m=s-m\n    if m%1==0:\n        print(f(a,n,int(m)))\n    else:\n        print(0)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    m=sum(l)/n\n    d={}\n    for i in l:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    ans=0\n    for i in d:\n        if 2*m-i==i:\n            ans+=d[i]*(d[i]-1)\n            continue\n        if 2*m-i in d:\n            ans+=d[i]*d[2*m-i]\n    print(ans//2)\n\n\n\n",
                true
            ],
            [
                "import math\nfrom collections import defaultdict, Counter\nfrom bisect import bisect_left\nfrom sys import stdin\n\ninput = stdin.readline\n    \nt = int(input())\n# a = list(map(int, input().split()))\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = defaultdict(int)\n    s = sum(a)\n    if (s * 2) % n != 0:\n        print(0)\n    else:\n        target = (s * 2) // n\n        ans = 0 \n        for x in a:\n            if x in b:\n                ans += b[x]\n            b[target-x] += 1\n        print(ans)\n    \n    ",
                true
            ],
            [
                "def cast(cre, typ):\n    return type(typ)(map(cre, typ));\ndef inp_lis(cre):\n    if cre == str: return input().split();\n    elif cre == bool: return cast(bool, cast(int, input().split()));\n    else: return cast(cre, input().split());\ndef repl(s, i = -1, ch = \"\"):\n    return s[:i] + ch + s[(len(s)+i)%len(s)+1:];\n\ndef solution():\n    for t in range(int(input())):\n        n = int(input()); arr = inp_lis(int); avg2x = (sum(arr)/n)*2;\n        dic = {}; ans = 0; k, v = 0, 1;\n\n        for i in range(n):\n            if arr[i] in dic: dic[arr[i]] += 1;\n            else: dic[arr[i]] = 1;\n        \n        dic_sorted_keys = sorted(dic.keys()); idx = 0;\n        while len(dic_sorted_keys) > idx:\n            if avg2x - dic_sorted_keys[idx] in dic:\n                if dic_sorted_keys[idx] == avg2x - dic_sorted_keys[idx]:\n                    n = dic[dic_sorted_keys[idx]]-1; ans += (n*n+n)/2;\n                    del dic[dic_sorted_keys[idx]];\n                else:\n                    ans += dic[dic_sorted_keys[idx]] * dic[avg2x - dic_sorted_keys[idx]];\n                    del dic[dic_sorted_keys[idx]];\n                    del dic[avg2x - dic_sorted_keys[idx]];\n            idx += 1;\n        else: print(int(ans));\n    return;\nsolution();",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=[int(x) for x in input().split()]\n    l.sort()\n    i,j = 0,n-1\n    k = (sum(l)/n)*2\n    r = 0\n    while(i<j):\n        if l[i]+l[j] == k:\n            if l[i] == l[j]:\n                r+=((j-i+1)*(j-i))//2\n                break\n            else:\n                ci = 1\n                cj = 1\n                while(l[i]==l[i+1]):\n                    i+=1\n                    ci+=1\n                while(l[j]==l[j-1]):\n                    j-=1\n                    cj+=1\n                r+=(ci*cj)\n            i+=1\n            j-=1\n        elif l[i]+l[j]>k:\n            j-=1\n        else:\n            i+=1\n    print(r)\n",
                true
            ],
            [
                "def bs (arr, l, r, x):\n\n    if r >= l:  \n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return bs(arr, l, mid-1, x)\n        else:\n            return bs(arr, mid + 1, r, x)\n    else:\n        return -1\n\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    am =  0\n    d = {}\n    for i in a:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n        am += i\n    am/=n\n    ans = 0\n    for i in a:\n        d[i]-=1\n        search = 2*am - i\n        if search in d:\n            ans+=d[search]\n    print(ans)",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    avg = sum(arr)/n\n    count = dict.fromkeys(arr,0)\n    for x in arr:\n        count[x] += 1\n    arr = list(set(arr))\n    if len(arr)==1:\n        print((n*(n-1))//2)\n        continue\n    arr.sort()\n    ans = 0\n    i, j = 0, len(arr)-1\n    while i < j:\n        while (arr[i]+arr[j])/2 > avg:\n            j -= 1\n        if (arr[i]+arr[j])/2 == avg and i!=j:\n            #print(arr[i],arr[j])\n            ans += count[arr[i]] * count[arr[j]]\n        i += 1\n    try:\n        ans += count[avg]*(count[avg]-1)//2\n    except:\n        pass\n    print(ans)\n",
                true
            ],
            [
                "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp(): \n    # one integer\n    return int(input())\ndef input_list():\n    # list of integers\n    return list(map(int,input().split()))\ndef input_string():\n    # list of characters\n    s = input()\n    # return list(s[:len(s) - 1])\n    return s[:-1]\ndef input_string_l():\n    # list of characters\n    s = input()\n    return list(s[:len(s) - 1])\ndef input_int_gen():\n    # integer generator \n    return map(int,input().split())\n\n# Codeforce 115 Edu C\ntests = inp()\nfor _ in range(tests):\n    n = inp()\n    a = input_list()\n    sumi = sum(a)\n    target = (sumi * 2) / n\n    if (sumi * 2) % n != 0:\n        print(0)\n        continue\n    c = defaultdict(int)\n    for i in a:\n        c[target - i] += 1\n    ret = 0\n    k = 0\n    for i in a:\n        if i == target - i:\n            c[i] -= 1\n            ret += c[i]\n        else:\n            if i < target - i:\n                ret += c[i]\n    print(ret)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    k = sum(a)\n    if (2*k/n)%1!=0:\n        print(0)\n    else:\n        ctr ={}\n        for i in a:\n            if not i in ctr:\n                ctr[i] = 0\n            ctr[i]+=1\n        ans = 0\n        for i,j in ctr.items():\n            if ((2*k)//n-i) in ctr:\n                if n*i==k:\n                    ans+=(j*(j-1))\n                else:\n                    ans+=j*ctr[(2*k)//n-i]\n        print(ans//2)",
                true
            ],
            [
                "from collections import defaultdict\ndef getp(array1, n, sum):\n    unordered_map = {}\n    count = 0\n    for i in range(n):\n        if sum - array1[i] in unordered_map:\n            count += unordered_map[sum - array1[i]]\n\n        if array1[i] in unordered_map:\n            unordered_map[array1[i]] += 1\n        else:\n            unordered_map[array1[i]] = 1\n\n    return count\n\ndef main():\n    t = 1\n    t=int(input())\n    for _ in range(t):\n        n = int(input())\n        array1 = list(map(int,input().split()))\n        d=defaultdict(int)\n        for i in range(n):\n            d[array1[i]]+=1\n        k = sum(array1)/n\n        p = (n-2)*k\n        if p==int(p):\n            p = int(p)\n        s = sum(array1) - p\n        se=set()\n        ans = getp(array1,n,s)\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "from collections import Counter\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    acounter = Counter(a)\n    k = sum(a) / len(a)\n    total = 0\n    for number in a[:-1]:\n        acounter[number] -= 1\n        total += acounter.get(k*2-number, 0)\n    print(total)",
                true
            ],
            [
                "tc = int(input())\nfor i in range(tc):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    hm = {}\n    for i in range(n):\n        if arr[i] in hm:\n            hm[arr[i]] += 1\n        else:    \n            hm[arr[i]] = 1\n    s = sum(arr)\n    mean = s / n\n    ans = 0\n    req = s - (mean * (n - 2))\n    for i in range(n):\n        if (req - arr[i]) in hm:\n            if arr[i] == req - arr[i]:\n                ans += hm[req - arr[i]]\n                ans -= 1\n            else:\n                ans += hm[req - arr[i]]\n            hm[arr[i]] -= 1\n    print(ans)        ",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 2*sum(a)/n\n    if(s != s//1):\n        print(0)\n    else:\n        count = 0\n        c = dict()\n        for i in a:\n            if(i in c):\n                c[i] += 1\n            else:\n                c[i] = 1\n        for i, num in c.items():\n            if(i <= s and 2*i != s):\n                sec = s - i\n                if(sec in c):\n                    count += num * c[sec]\n            elif(2*i == s):\n                count += 2*((num*(num-1))//2)    \n        print(count//2)\n",
                true
            ],
            [
                "from sys import stdin\nimport collections, heapq, bisect, math\n \ninput = stdin.readline\n \ndef rint():\n    return int(input())\ndef rstr():\n    return input().strip()\ndef rlstr():\n    return list(input().strip().split())\ndef rlint():\n    return list(map(int, input().split()))\n\ndef main():\n    n = rint()\n    arr = rlint()\n    s = sum(arr)\n\n    if 2*s % n != 0 :\n        print(0)\n        return \n\n    req = 2*s // n \n    res = 0 \n    has = collections.defaultdict(int)\n\n    for i in range(n) :\n        res += has[req - arr[i]]\n        has[arr[i]] += 1\n\n    print(res)\n                \nif __name__ == \"__main__\":\n    for _ in range(rint()) :\n        main()",
                true
            ],
            [
                "import sys\nfrom collections import defaultdict\ndef del_two_element(n, a):\n    #b\u01b0\u1edbc 1\n    for i in range (len(a)):\n        a[i] = int(a[i])\n    #b\u01b0\u1edbc 2\n    n = len(a)     #so phan tu cua chuoi a\n\n    s = sum(a)      #t\u1ed5ng a\n    p = (2*s)//n           #p l\u00e0 \u0111i\u1ec1u ki\u1ec7n \u0111\u1ec1 b\u00e0i sau khi \u0111\u00e3 r\u00fat g\u1ecdn\n    \n    n_pair = 0                   #bi\u1ebfn \u0111\u1ec3 \u0111\u1ebfm s\u1ed1 c\u1eb7p \u0111\u1ea1t \u0111\u1ee7 \u0111i\u1ec1u ki\u1ec7n\n    \n    #b\u01b0\u1edbc 3\n    d = defaultdict(lambda:0)  \n    \n    #b\u01b0\u1edbc 4\n    if (s - p)*n != s*(n-2):\n        return 0\n    #b\u01b0\u01a1c 5    \n    for i in a:\n        x = p - i\n        n_pair += d[x]\n        d[i] += 1\n    return n_pair\n\n\nif __name__ == \"__main__\":\n\n    t = int(sys.stdin.readline())\n    for _ in range(0, t):\n        n = map(int,input())\n        a = sys.stdin.readline().split()\n        print (del_two_element(n, a))\n        \n\n\"\"\"H\u00e0m main \u0111\u1ecdc \u0111\u1ea7u v\u00e0o input.\nD\u00f2ng \u0111\u1ea7u ti\u00ean bao g\u1ed3m bi\u1ebfn t - s\u1ed1 l\u01b0\u1ee3ng test case\nD\u00f2ng th\u1ee9 2 g\u1ed3m 2 bi\u1ebfn n - s\u1ed1 l\u01b0\u1ee3ng ph\u1ea9n t\u1eeb trong m\u1ea3ng, v\u00e0 a- c\u00e1c gi\u00e1 tr\u1ecb m\u1ea3ng\ns\u1eed d\u1ee5ng map \u0111\u1ec3 map gi\u00e1 tr\u1ecb c\u1ee7a input theo \u0111\u1ecbnh d\u1ea1ng integer\nS\u1eed d\u1ee5ng h\u00e0m split \u0111\u1ec3 t\u00e1ch th\u00e0nh chu\u1ed7i c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a m\u1ea3ng\n\nTrong h\u00e0m del_two_element c\u00f3 4 b\u01b0\u1edbc ch\u00ednh:\n    b\u01b0\u1edbc 1 : \u00e9p ki\u1ec3u c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a a v\u1ec1 int\n    b\u01b0\u1edbc 2 : setup c\u00e1c bi\u1ebfn\n    b\u01b0\u1edbc 3 : Kh\u1edfi t\u1ea1i 1 dictionnary v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb default = 0\n    b\u01b0\u1edbc 4 : Ki\u1ec3m tra \u0111i\u1ec1u ki\u1ec7n ban \u0111\u1ea7u: n\u1ebfu sai th\u00ec tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 = 0\n    b\u01b0\u1edbc 5 : v\u00f2ng l\u1eb7p th\u1ef1c hi\u1ec7n 2 nhi\u1ec7m v\u1ee5: c\u1ed9ng s\u1ed1 value c\u1ee7a m\u1ed9t key v\u00e0o bi\u1ebfn \u0111\u1ebfm n_pair\n                                            Ti\u1ebfp t\u1ee5c l\u01b0u gi\u00e1 tr\u1ecb c\u1ee7a i v\u00e0o m\u1ea3ng v\u00e0 t\u0103ng s\u1ed1 key l\u00ean 1\"\"\"\n            \n            ",
                true
            ],
            [
                "from collections import Counter\nfrom fractions import Fraction\n\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        n = int(input())\n        counts = Counter(map(int, input().split()))\n\n        total_sum, n = 0, 0\n        for v, t in counts.items():\n            total_sum += (v * t)\n            n += t\n\n        mean = Fraction(total_sum, n)\n        u, p = 0, 0\n        ans = 0\n\n        for value in counts:\n            req_value = -((mean * (n - 2)) - (total_sum - value))\n            # print(req_value)\n            if req_value not in counts:\n                continue\n\n            if req_value == value:\n                x = counts[value]\n                u += (x * (x - 1)) // 2\n            else:\n                p += counts[value] * counts[req_value]\n            # print(\"For value {} we need to remove {}\".format(value, req_value))\n\n        print(u + p // 2)\n",
                true
            ],
            [
                "#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"1\n# 6\n# 1 1 3 3 5 5\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\ndef solve(N, A):\n    S = sum(A)\n    if (2*S) % N != 0:\n        return 0\n\n    ans = 0\n    counter = collections.Counter(A)\n    for a, n in counter.items():\n        b = (2*S)//N - a\n        if a < b:\n            if b in counter:\n                ans += n * counter[b]\n        elif a == b:\n            ans += n*(n-1)//2\n    return ans\n\n\n\nT0 = int(input())\nfor _ in range(T0):\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    count, d, s = 0, {} , int(input())\n    l = list (map (int, input().split()))\n    k = 2*sum(l)/s \n    for x in l : \n        if x not in d :\n            d[x] = 0\n        d[x] +=1\n    if k != int(k) : print ('0')\n    else :\n        p = int(k/2)\n        for i in d.keys() :\n            if i < p :\n                try : count += d[i]*d[k-i]\n                except KeyError : pass\n            elif i == p:\n                if k%2 == 0 :\n                    for m in range(d[i]):\n                        count += m \n                else : \n                    try : count += d[i]*d[i+1]\n                    except KeyError : pass\n        print(count)",
                true
            ],
            [
                "from sys import stdin; read = stdin.readline\nfrom collections import Counter\n\nfor _ in range(int(read())):\n    n = int(read())\n    arr = sorted(list(map(int, read().split()))); avg = 2*(sum(arr)/len(arr)); arr = Counter(arr)\n    \n\n    ans = 0\n    for num in arr:\n        if num == avg-num: ans += (arr[num]*(arr[num]-1))//2; arr[num] = 0\n        elif avg-num in arr: ans += arr[num]*arr[avg-num]; arr[avg-num] = 0\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    s = sum(A)\n\n    target_sum = (2 * s) / n \n\n    \n\n    if (2 * s % n != 0):\n\n        print(0)\n    \n    else:\n        A_map = dict.fromkeys(A, 0)\n\n        for i in A:\n            A_map[i] += 1 \n        \n        ans = 0 \n        for i in A:\n            req = target_sum - i \n            if req in A_map:\n                ans += A_map[req]\n\n            if i == req:\n                ans -= 1 \n\n        \n        print(int(ans // 2))\n\n        ",
                true
            ],
            [
                "import heapq\nimport math\nimport sys\nimport collections\nimport bisect\nimport time\nimport random\nimport itertools\nimport string\nfrom collections import Counter,defaultdict\ndef get_ints():return map(int, sys.stdin.readline().strip().split())\ndef get_list():return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string():return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    n=int(input())\n    arr=get_list()\n    mean=sum(arr)/n\n    two_sum=2*mean\n    ts1=math.floor(two_sum)\n    ts2=math.ceil(two_sum)\n    #print(mean,ts1,ts2)\n    counter=collections.Counter(arr)\n    ans=0\n    for i in counter:\n        diff1=ts1-i\n        diff2=ts2-i\n        if diff1==diff2 and diff1 in counter:\n            if diff1==i:\n                ans+=counter[i]*(counter[i]-1)\n            else:\n                ans+=counter[i]*counter[diff1]\n    print(ans//2)",
                true
            ],
            [
                "\n# import sys\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\n\n\n\nt=int(input());\nfor _ in range(t):\n    n=int(input());\n    a=list(map(int,input().split()));d={};\n    for i in range(n):\n        if a[i] not in d:d[a[i]]=1;\n        else:d[a[i]]+=1;\n    c=0;s=sum(a);\n    if((2*s)%n==0):\n        for i in range(n):\n            k=((2*s)//n)-a[i];\n            if k in d:\n                c=c+d[k] if a[i]!=k else c+d[k]-1;\n            \n        print(c//2);\n    else:print(0);",
                true
            ],
            [
                "T = int(input())\n\nfor _ in range(T) :\n    N = int(input())\n    L = list(map(int, input().split()))\n    L.sort()\n    S = sum(L)\n    if 2*S % N != 0:\n        print(0)\n    else:\n        L2 = [] \n        last = L[0]\n        nb = 0\n        for elt in L:\n            if elt == last:\n                nb += 1\n            else:\n                L2.append((last, nb)) \n                last = elt\n                nb = 1\n        L2.append((last, nb)) \n        O = 2*S // N\n        P1 = 0\n        P2 = len(L2)-1\n        ans = 0\n        while P1 <= P2:\n            M = L2[P1][0] + L2[P2][0]\n            if M > O:\n                P2 -= 1\n            elif M == O:\n                if P1 == P2:\n                    ans += L2[P1][1] * (L2[P1][1] - 1) // 2\n                else:\n                    ans += L2[P1][1] * L2[P2][1]\n                P1 += 1\n                P2 -= 1\n            else:\n                P1 += 1\n        print(ans) ",
                true
            ],
            [
                "def compl(x, k):\n    return 2 * k - x\n\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = dict()\n    k = 0\n    ans = 0\n\n    for i in a:\n        k += i\n\n    k = k / n\n\n    if k > int(k) and (k - int(k) != 0.5):\n        print(0)\n        return\n\n\n\n    for i in a:\n        c = compl(i, k)\n        if c in s.keys():\n            ans += s[c]\n        if i in s.keys():\n            s[i] += 1\n        else:\n            s[i] = 1\n\n    print(ans)\n\n\nt = int(input())\nfor i in range(t):\n    solve()\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    old_sum = sum(numbers)\n    if old_sum * (n - 2) % n != 0:\n        print(0)\n        continue\n    new_sum = old_sum * (n - 2) // n\n    diff = old_sum - new_sum\n    amount = {}\n    for x in numbers:\n        amount[x] = amount.get(x, 0) + 1\n    pairs = 0\n    for x in numbers:\n        if diff - x in amount:\n            pairs += amount[diff - x] - int(diff == 2 * x)\n    print(pairs // 2)",
                true
            ],
            [
                "from collections import defaultdict\ntests = int(input())\nfor testcase in range(tests):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    d = defaultdict(int)\n    if (2*s)%n:\n        print(0)\n    else:\n        ans = 0\n        for e in a:\n            d[e]+=1\n\n        x = 2*s/n\n        for e in a:\n            f = x-e\n            if d[f]:\n                ans+=d[f]\n            if e==f:\n                ans-=1\n        \n        print(ans//2)",
                true
            ],
            [
                "import sys\n\ninp = sys.stdin.readline\n\ndef solve():\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    s2 = sum(a) * 2\n    d = {}\n    r = 0\n    for i in range(n):\n        v = s2 - a[i] * n\n        r += d.get(v, 0)\n        d[a[i] * n] = d.get(a[i] * n, 0) + 1\n    print(r)\n\ndef main():\n    for i in range(int(inp())):\n        solve()\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "from collections import Counter\n\ndef solve(a):\n    r = sum(a)*2\n    if r % len(a) != 0:\n        return 0\n    r //= len(a)\n    c = Counter(a)\n    cc = sorted(c.items())\n    res = 0\n    for v, cnt in cc:\n        if v*2 >= r:\n            break\n        res += cnt*c[r-v]\n    if r % 2 == 0:\n        res += c[r//2]*(c[r//2]-1)//2\n    return res\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    print(solve(a))\n\n#\n# s/n = (s-r)/(n-2)\n# s*(n-2)/n = s-r\n# r = s*2/n\n",
                true
            ],
            [
                "from collections import Counter\n\nmxn = 10**10\nfor _ in range(int(input())):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    sm=sum(arr)\n    if (2*sm)%n!=0:\n        print(0)\n        continue\n    \n    res=0\n    target = (2*sm)//n\n    dct=Counter(arr)\n    for num in set(arr):\n        if target - num == num:\n            res += dct[num]*(dct[num]-1)\n        else:\n            res+=dct[num]*dct[target-num]\n    print(res//2)\n    \n    \n    ",
                true
            ],
            [
                "from collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\n\nMOD = 1000000007\nMAX = sys.maxsize\nMIN = -sys.maxsize\n\nclass get: \n    def int():\n        return list(map(int,input().split()))\n    def str():\n        return input().split()\n    def float():\n        return list(map(float,input().split()))\n    def map():\n        return map(int,input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x))+1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result,item)\n    return result\n\ndef LCM(a,b):\n    return (a*b)//(math.gcd(a,b))\n\ndef solve():\n    n = int(input())\n    a = get.int()\n    sum_ = sum(a)\n    mean = sum(a)/n\n    a.sort()\n    d = Counter(a)\n    res = 0\n    for i in range(n):\n        if a[i] == 2*mean-a[i]:\n            res += d[a[i]] - 1\n        else:\n            res += d[2*mean-a[i]]\n    print(res//2)\n    \n                \n    \nfor _ in range(int(input())):\n    solve()",
                true
            ],
            [
                "#!/usr/bin/env python\nimport os\nimport sys\nfrom io import BytesIO, IOBase\nimport math\nfrom collections import Counter\n\n\ndef func(n, array):\n    sum_all = sum(array)\n    # if n % 2 != 0 and sum_all % n != 0:\n    #     return 0\n    if (sum_all * 2) % n != 0:\n        return 0\n    target = sum_all * 2 // n\n    counter = Counter(array)\n    count = 0\n    keys = sorted(counter.keys())\n    for key in keys:\n        if key * 2 > target:\n            break\n        elif key * 2 == target:\n            count += counter[key] * (counter[key] - 1) // 2\n        elif target - key in counter:\n            count += counter[key] * counter[target - key]\n    return count\n    # mean = sum(array) / n\n\n\ndef main():\n    num_test = int(parse_input())\n    result = []\n    for _ in range(num_test):\n        n = int(parse_input())\n        array = [int(i) for i in parse_input().split()]\n        result.append(func(n, array))\n    print(\"\\n\".join(map(str, result)))\n\n\n# region fastio\n\n# BUFSIZE = 8192\n\n\n# class FastIO(IOBase):\n#     newlines = 0\n\n#     def __init__(self, file):\n#         self._fd = file.fileno()\n#         self.buffer = BytesIO()\n#         self.writable = \"x\" in file.mode or \"r\" not in file.mode\n#         self.write = self.buffer.write if self.writable else None\n\n#     def read(self):\n#         while True:\n#             b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n#             if not b:\n#                 break\n#             ptr = self.buffer.tell()\n#             self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n#         self.newlines = 0\n#         return self.buffer.read()\n\n#     def readline(self):\n#         while self.newlines == 0:\n#             b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n#             self.newlines = b.count(b\"\\n\") + (not b)\n#             ptr = self.buffer.tell()\n#             self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n#         self.newlines -= 1\n#         return self.buffer.readline()\n\n#     def flush(self):\n#         if self.writable:\n#             os.write(self._fd, self.buffer.getvalue())\n#             self.buffer.truncate(0), self.buffer.seek(0)\n\n\n# class IOWrapper(IOBase):\n#     def __init__(self, file):\n#         self.buffer = FastIO(file)\n#         self.flush = self.buffer.flush\n#         self.writable = self.buffer.writable\n#         self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n#         self.read = lambda: self.buffer.read().decode(\"ascii\")\n#         self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\n# sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\nparse_input = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
                true
            ],
            [
                "t = int(input())\ndef sol():    \n    n = int(input())\n    arr=list(map(int,input().split()))\n    if (2*sum(arr))%n!=0:\n        return 0\n    x = 2*sum(arr)//n\n    arr.sort()\n    d = {}\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]]+=1\n        else:\n            d[arr[i]] = 1\n    s = 0\n    for i in range(n):\n        d[arr[i]]-=1\n        if x-arr[i] in d:\n            s+=d[x-arr[i]]\n    return s\n\nfor _ in range(t):\n    print(sol())\n\n        \n",
                true
            ],
            [
                "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    agg = 0\n    dct = {}\n    for i in arr:\n        dct[i] = dct.get(i, 0) + 1\n        agg += i\n    temp = n\n    if n % 2 == 0:\n        temp //= 2\n    if agg % temp != 0:\n        print(0)\n        continue\n    total = agg * 2 // n\n    ans = 0\n    for k, v in dct.items():\n        if total == k * 2:\n            ans += v * (v - 1)\n        else:\n            ans += v * dct.get(total - k, 0)\n    print(ans // 2)\n'''\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n'''\n",
                true
            ],
            [
                "def main():\n    T = int(input())\n    for t in range(T):\n        print(test())\n\ndef test():\n    input()\n    xs = [int(i) for i in input().split(' ')]\n    k = len(xs)\n    s = sum(xs)\n    # (s - p)/(k - 2) = s / k\n    # k (s - p) = s (k - 2)\n    # k s - k p = k s - 2 s\n    # k p = 2 s\n    # p = 2 s / k\n    p = 2 * s / k\n    q = {}\n    a = 0\n    for x in xs:\n        c = p - x\n        if c in q:\n            a += q[c]\n        if x not in q:\n            q[x] = 1\n        else:\n            q[x] += 1\n    return a\n\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "def mgc(a,n):\n    x = 2*sum(a)/n\n    mp = {}\n    ans = 0\n    for i in a:\n        if x-i in mp:\n            ans+=mp[x-i]\n        if i in mp:\n            mp[i]+=1\n        else:\n            mp[i] =1\n    return ans\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    print(mgc(a,n))",
                true
            ],
            [
                "from collections import defaultdict, Counter\n\nfor _ in range(int(input())):\n    n=int(input())\n\n    a=[int(x)  for x in input().split()]\n    s=sum(a)\n    if (2*s%(n)!=0):\n        print(0)\n    else:\n        an=0\n        x=(2*s )//(n)\n        #print(x)\n        z=Counter(a)\n        if x%2==0:\n            an+=(z[x//2]*(z[x//2]-1))\n        for i in a:\n            if x-i!=i:\n                if z[x-i]:\n                    an+=z[x-i]\n\n        print(an//2)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = sum(l)/n\n    if int(k*2) != k*2:\n        print(0)\n    else:\n        d = {}\n        ans = 0\n        for i in range(n):\n            if l[i] - k in d:\n                d[l[i] - k] += 1\n            else:\n                d[l[i] - k] = 1\n        for key in d:\n            if key == 0:\n                ans += d[0]*(d[0]-1)//2\n            elif key < 0:\n                if abs(key) in d:\n                    ans += d[key]*d[abs(key)]\n        print(ans)",
                true
            ],
            [
                "import sys\nimport math\nfrom bisect import bisect_left\nimport heapq\nfrom collections import deque\nfrom itertools import product, permutations\nimport random\ndef II():\n    return int(sys.stdin.readline())\n \ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n    return map(int, sys.stdin.readline().split())\n \ndef SI():\n    return sys.stdin.readline().strip()\n \ndef C(n, k, mod):\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\n \ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\n \nmod = 10**9+7\n\nfor _ in range(II()):\n    n = II()\n    a = LI()\n    k = sum(a)/len(a)\n    d = {}\n    for i in range(n):\n        if d.get(a[i]):\n            d[a[i]]+=1\n        else:\n            d[a[i]] = 1\n    a = sorted(list(set(a)))\n    ans = 0\n    for i in range(len(a)):\n        if a[i] >= k:\n            break\n        if d.get(k+(k-a[i])):\n            ans+=d[a[i]]*d[k+k-a[i]]\n    if d.get(k):\n        ans+=(d[k]*(d[k]-1))//2\n    print(ans)\n",
                true
            ],
            [
                "def solve(n, ls):\n    s = sum(ls)\n    if (2 * s) % n != 0:\n        return 0\n\n    rs = (2 * s) // n\n    i = 0\n    j = n-1\n    ans = 0\n    ls.sort()\n    while i < j:\n        ts = ls[i] + ls[j]\n        if ts == rs:\n            if ls[i] == ls[j]:\n                ni = (j-i+1)\n                ans += ((ni * (ni-1)) // 2)\n                break\n\n            c1 = 1\n            k = i+1\n            while k < j and ls[k] == ls[i]:\n                k += 1\n                c1 += 1\n\n            c2 = 1\n            l = j-1\n            while l >= k and ls[l] == ls[j]:\n                l -= 1\n                c2 += 1\n\n\n            ans += (c1 * c2)\n            i = k\n            j = l\n            continue\n\n        if ts < rs:\n            i += 1\n            continue\n\n        j -= 1\n        continue\n\n    return ans\n\n\nt = int(input().strip())\ninputs = []\nfor _ in range(t):\n    n = int(input().strip())\n    ls = list(map(int, input().strip().split()))\n    inputs.append((n, ls))\n\nfor n, ls in inputs:\n    print(solve(n, ls))\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a = list(map(int, input().split()))\n    sum_=sum(a)\n    p=2*sum_\n    if p%n!=0:\n        print(0)\n        continue\n    s=sum_*2//n\n    m={}\n    for i in range(n):\n        if a[i] not in m.keys():\n            m[a[i]]=1\n        else:\n            m[a[i]]+=1\n    count=0\n    t=max(a)\n    for i in range(n):\n        p=s-a[i]\n        if p<0 or p>t:\n            continue\n        if p in m.keys():\n            count+=m[p]\n        if p==a[i]:\n            count-=1\n    print(count//2)",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int,input().split()))\n    r1 = sum(s)*2\n    s1 = Counter(s)\n    s2 = sorted(s1.keys())\n    #print(s2)\n    a1 = 0\n    a2 = len(s2)-1\n    r = 0\n    while a1<=a2:\n        if (s2[a1]+s2[a2])*n==r1:\n            if a1==a2:\n                if s1[s2[a1]]>1:\n                    r += (s1[s2[a1]])*(s1[s2[a1]]-1)/2\n            else:\n                r +=s1[s2[a1]]*s1[s2[a2]]\n            a1+=1\n            a2-=1\n        elif (s2[a1]+s2[a2])*n>r1:\n            a2-=1\n        else:\n            a1+=1\n    print(int(r))\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "from sys import stdin\nfrom collections import Counter\ninput=stdin.readline\nrn=lambda:int(input())\nrns=lambda:map(int,input().split())\nrl=lambda:list(map(int,input().split()))\nrs=lambda:input().strip()\nYN=lambda x:print('YES') if x else print('NO')\nmod=10**9+7\n\nfor _ in range(rn()):\n    n=rn()\n    a=rl()\n    s=sum(a)\n    b=[n*num-s for num in a]\n    c=Counter(b)\n    ans=0\n    for i in range(n):\n        ndiff=n*a[i]-s\n        other=c[-ndiff]\n        if ndiff==0:\n            other-=1\n        ans+=other\n    print(ans//2)",
                true
            ],
            [
                "import sys\nimport bisect\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    s = sum(arr)\n\n    if (s*2)%n != 0:\n        print(0)\n\n    else:\n        cnt=0 \n        arr.sort()\n        m = (s*2)//n\n\n        for i in range(n):\n            if 2 * arr[i] < m:\n                cnt += bisect.bisect_right(arr,m-arr[i]) - (bisect.bisect_left(arr,m-arr[i]))\n\n            \n            elif 2 * arr[i] == m:\n                k = bisect.bisect_right(arr,m-arr[i]) - (bisect.bisect_left(arr,m-arr[i]))\n                if k >= 2:\n                    cnt += (k * (k-1)) // 2\n                break\n            \n            else:\n                break\n        print(cnt)\n",
                true
            ],
            [
                "t=int(input())\nwhile t>0:\n    t=t-1 \n    n=int(input())\n    arr=[]\n    res=0 \n    dict={}\n    arr=list(map(int,input().split()))\n    for i in range(0,n):\n        res+=arr[i]\n    res=res*2 \n    if res%n!=0:\n        print(0)\n    else:\n        res=int(res/n)\n        num=0 \n        for i in range(0,n):\n            x=res-arr[i]\n            temp=dict.get(x,0)\n            num+=temp\n            temp1=dict.get(arr[i],0)\n            dict[arr[i]]=temp1+1 \n        print(num)    \n            \n            \n        \n    \n            \n        ",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    summ=sum(a)\n    if 2*summ%n!=0:\n        print(0)\n    else:\n        target=(2*summ)//n\n        count = 0\n        a.sort()\n        hash1={}\n        for i in a:\n            if (target-i) in hash1:\n                count+=hash1[target-i]\n            if i in hash1:\n                hash1[i]+=1\n            else:\n                hash1[i]=1\n        print(count)\n",
                true
            ],
            [
                "for s in[*open(0)][2::2]:\n a=*map(int,s.split()),;k=2*sum(a)/len(a);d={};r=0\n for x in a:r+=d.get(k-x,0);d[x]=d.get(x,0)+1\n print(r)",
                true
            ],
            [
                "def ps_cnt(arr, n, s):\n    mapping = {}\n    count = 0\n    for i in range(n):\n        if s - arr[i] in mapping:\n            count += mapping[s - arr[i]]\n        if arr[i] in mapping:\n            mapping[arr[i]] += 1\n        else:\n            mapping[arr[i]] = 1\n\n    return count\n\n\nt = int(input())\n\nlens = []\nnums = []\n\nfor i in range(t):\n    l = int(input())\n    lens.append(l)\n    num = list(map(int, input().strip().split()))[:l]\n    nums.append(num)\n\nfor i in range(t):\n    if lens[i] <= 2:\n        print(0)\n        continue\n    k = sum(nums[i])/lens[i]\n    two_sum = k * 2\n    if not two_sum.is_integer():\n        print(0)\n        continue\n    else:\n        two_sum = int(two_sum)\n\n    print(ps_cnt(nums[i], len(nums[i]), two_sum))\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    x=(sum(l)*2)/n\n    d={}\n    for i in range(n):\n        if(d.get(l[i],0)==0):\n            d[l[i]]=1\n        else:\n            d[l[i]]+=1\n    c=0\n    #print(d)\n    for i in range(n):\n        z=x-l[i]\n        if(d.get(z,0)!=0):\n            d[l[i]]-=1\n            c+=d[z]\n    print(c)",
                true
            ],
            [
                "#from collections import deque\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    #A.sort()\n    MEAN = sum(A) / N\n    REMOVABLE = MEAN * 2\n    i, j = 0, N-1\n    count = 0\n    unordered_map = {}\n    for i in range(N):\n        if REMOVABLE - A[i] in unordered_map:\n            count += unordered_map[REMOVABLE - A[i]]\n \n        if A[i] in unordered_map:\n            unordered_map[A[i]] += 1\n        else:\n            unordered_map[A[i]] = 1\n    print(count)",
                true
            ],
            [
                "# C. Delete Two Elements\n\nfrom sys import stdin, stdout\ninput = stdin.readline\nprint = stdout.write\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    k = sum(a)/n\n    \n    counts = dict()\n    for i in a:\n        counts[i] = counts.get(i, 0) + 1\n    \n    numbers = sorted(counts.keys())\n    \n    point1, point2 = 0, len(numbers)-1\n    \n    ans = 0\n    \n    while point2 >= point1:\n        num1 = numbers[point1]\n        num2 = numbers[point2]\n        \n        if num1+num2 > 2*k: point2 -= 1\n        elif num1+num2 < 2*k: point1 +=1\n        else:\n            if num1 != num2: ans += counts[num1]*counts[num2]\n            else: ans += (counts[num1]**2-counts[num1])//2\n            \n            point2 -= 1\n            point1 += 1\n    \n    print(str(ans)+\"\\n\")",
                true
            ],
            [
                "#x+y = M\n#M/2 = S/n\n#M = (2*S)/n\ndef process(A):\n    S = sum(A)\n    n = len(A)\n    d = {}\n    if (2*S) % n != 0:\n        return 0\n    M = (2*S)//n\n    for i in range(n):\n        x = A[i]\n        if x not in d:\n            d[x] = 0\n        d[x]+=1\n    answer = 0\n    for x in d:\n        if M-x in d:\n            if x < M-x:\n                answer+=(d[x]*d[M-x])\n            elif x==M-x:\n                answer+=(d[x]*(d[x]-1)//2)\n    return answer\n    \nt = int(input())\nfor i in range(t):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    print(process(A))\n",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby, accumulate\nfrom copy import deepcopy\nMOD = 10**9+7\nINF = float('inf')\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n    n = int(input())\n    A = rl()\n    res = 0\n    target = sum(A) / n * 2\n    if target != int(target):\n        print(0)\n        continue\n        \n    C = Counter()\n    for i in range(n):\n        res += C[target-A[i]]\n        C[A[i]] += 1\n\n    print(res)",
                true
            ],
            [
                "import sys\nimport os.path\nfrom collections import *\nimport math\nimport bisect\nimport heapq as hq\nfrom fractions import Fraction\nfrom random import randint\n\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\ninput = sys.stdin.readline\n\n##########################################################\ndef solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    res = 0\n    k = 2 * sum(arr) / n\n    h = Counter()\n\n    for i in range(n):\n        res += h[k - arr[i]]\n        h[arr[i]] += 1\n    print(res)\n\nt = int(input())\nwhile t:\n    t -= 1\n    solve()\n\n##########################################################\n",
                true
            ],
            [
                "from math import ceil, log, floor\nfrom collections import defaultdict,deque\nimport sys\nimport os.path\n\nsys.setrecursionlimit(200000)\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r+\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\n\n# input = sys.stdin.readline\n# print=sys.stdout.write\ndef MI():\n    return map(int, input().split())\ndef MF():\n    return map(float, input().split())\n# print(6//2-4)\nmod=10**9+7\ndef count(arr, n, sum):\n    d=defaultdict(int)\n    count = 0\n    for i in range(n):\n        if (sum - arr[i]) in d:\n            count += d[sum - arr[i]]\n        d[arr[i]] += 1\n    return count\n        \n\ndef solve():\n    n = int(input())\n    # n,k=MI()\n    a=list(MF())\n    # print(a)\n    m=(sum(a)/n)\n    # print(m)\n    print(count(a,n,2*m))\n    \n\n\n\n\n\n\n        \n    \n\n    \n\n\n\n    \n    \n    \n\n\n\n\n\n   \n                \n\n\n\n\n\n    \n\n\n\n        \n\n    \n\n    \n\n\n\nt=int(input())\nfor _ in range(t):\n    solve()",
                true
            ],
            [
                "import math\nfrom collections import defaultdict, Counter\n# import sys\n# sys.stdin = open('input.txt', 'r')  \n# sys.stdout = open('output.txt', 'w+')\n\n\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    mean = sum(l)/n\n    # if sum(l)>n and (sum(l)%n)!=0:\n    #     print(0)\n    #     continue\n    \n    d = Counter(l)\n    cnt = 0\n    for k in d.keys():\n        if k<mean:\n            if 2*mean - k in d:\n                cnt+=(d[k]*d[(2*mean) - k])\n    \n\n\n    if d[mean]!=0:\n        cnt+=(d[mean]*(d[mean]-1))//2\n    print(cnt)\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nMonocarp is playing a computer game. Now he wants to complete the first level of this game.\n\nA level is a rectangular grid of 2 rows and n columns. Monocarp controls a character, which starts in cell (1, 1) \u2014 at the intersection of the 1-st row and the 1-st column.\n\nMonocarp's character can move from one cell to another in one step if the cells are adjacent by side and/or corner. Formally, it is possible to move from cell (x_1, y_1) to cell (x_2, y_2) in one step if |x_1 - x_2| \u2264 1 and |y_1 - y_2| \u2264 1. Obviously, it is prohibited to go outside the grid.\n\nThere are traps in some cells. If Monocarp's character finds himself in such a cell, he dies, and the game ends.\n\nTo complete a level, Monocarp's character should reach cell (2, n) \u2014 at the intersection of row 2 and column n.\n\nHelp Monocarp determine if it is possible to complete the level.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then the test cases follow. Each test case consists of three lines.\n\nThe first line contains a single integer n (3 \u2264 n \u2264 100) \u2014 the number of columns.\n\nThe next two lines describe the level. The i-th of these lines describes the i-th line of the level \u2014 the line consists of the characters '0' and '1'. The character '0' corresponds to a safe cell, the character '1' corresponds to a trap cell.\n\nAdditional constraint on the input: cells (1, 1) and (2, n) are safe.\n\nOutput\n\nFor each test case, output YES if it is possible to complete the level, and NO otherwise.\n\nExample\n\nInput\n\n\n4\n3\n000\n000\n4\n0011\n1100\n4\n0111\n1110\n6\n010101\n101010\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\n\nNote\n\nConsider the example from the statement.\n\nIn the first test case, one of the possible paths is (1, 1) \u2192 (2, 2) \u2192 (2, 3).\n\nIn the second test case, one of the possible paths is (1, 1) \u2192 (1, 2) \u2192 (2, 3) \u2192 (2, 4).\n\nIn the fourth test case, one of the possible paths is (1, 1) \u2192 (2, 2) \u2192 (1, 3) \u2192 (2, 4) \u2192 (1, 5) \u2192 (2, 6).\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    for i in range(n):\n        if a[i] == '1' and b[i] == '1':\n            print('NO')\n            break\n    else:\n        print('YES')\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s1 = str(input())\n    s2 = str(input())\n    flag = True\n    for x in range(n-1):\n        if s1[x+1] == \"1\" and s2[x+1] == \"1\":\n            flag = False\n            break\n    if flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "def game(n):\n    n=n-1;\n    mtx = []\n    a = str(input())\n    mtx.append(a);\n    b=str(input())\n    mtx.append(b);\n\n    stk = []\n    stk.append([0, 0]);\n\n    visit = [[], []]\n    for i in range(2):\n        for j in range(n+1):\n            visit[i].append(False)\n\n    visit[0][0]==True\n\n    while (len(stk)!=0):\n        x = stk.pop()\n        \n        if (x[0]>1 or x[0]<0 or x[1]>n or x[1]<0):\n            continue;\n\n        if (x[0]==0):\n            if (mtx[0][x[1]]==\"0\"):\n                if (visit[1][x[1]]==False):\n                    stk.append([1, x[1]])\n                    visit[1][x[1]] = True;\n        if (x[0]==1):\n            if (mtx[1][x[1]]==\"0\"):\n                if (visit[0][x[1]]==False):\n                    stk.append([0, x[1]])\n                    visit[0][x[1]] = True;\n        \n        if (x[1]<n):\n            if (mtx[x[0]][x[1]+1]==\"0\"):\n                if (visit[x[0]][x[1]+1]==False):\n                    stk.append([x[0], x[1]+1])\n                    visit[x[0]][x[1]+1] = True;\n        \n        if (x[1]>0):\n            if (mtx[x[0]][x[1]-1]==\"0\"):\n                if (visit[x[0]][x[1]-1]==False):\n                    stk.append([x[0], x[1]-1])\n                    visit[x[0]][x[1]-1] = True;\n\n    return visit[1][n];\n\nfor _ in range(int(input())):\n    flg = game(int(input()))\n\n    if flg:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n\n\n",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    bad = False\n    for i in range(n):\n        bad |= s1[i] == '1' and s2[i] == '1'\n    if bad:\n        print('NO')\n    else:\n        print('YES')\n\nt = int(input())\nfor i in range(t):\n    solve()",
                true
            ],
            [
                "t=int(input())\nwhile(t!=0):\n    n=int(input())\n    s1=input()\n    s2=input()\n    flag=0\n    for i in range(n):\n        if(s1[i]=='1' and s2[i]=='1'):\n            flag=1\n    if flag==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n    t-=1\n",
                true
            ],
            [
                "t=int(input())\nwhile(t!=0):\n    n=int(input())\n    l=[]\n    for i in range(2):\n        a=input()\n        l1=[str(i) for i in a]\n        #a=list(map(int,input().split()))\n        #print(a)\n        l.append(l1)\n    #print(l)\n    flag=\"NO\"\n    for i in range(1,n):\n        if((l[0][i]=='0') or (l[1][i]=='0')):\n            flag=\"YES\"\n        else:\n            flag=\"NO\"\n            break\n    print(flag)\n    t=t-1\n\n\n",
                true
            ],
            [
                "import math\n\ndef compute_f():\n    t = int(input())\n\n    columns = []\n    fst = []\n    snd = []\n    for i in range(t):\n        column = int(input())\n        columns.append(column)\n        f = str(input())\n        fst.append(f)\n        s = str(input())\n        snd.append(s)\n\n    for i in range(t):\n        possible = True\n        for j in range(columns[i]):\n            if((fst[i][j] == '1')&(fst[i][j] == snd[i][j])):\n                possible = False\n\n        if (possible):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ncompute_f()\n\n\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    t = True\n    a = input()\n    b = input()\n    for i in range(n):\n        if a[i]!= '0' and b[i]!= '0':\n            t = False\n            break\n    if t==False:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\ndef solve(i , j):\n\n    if(i >= 2 or j >= n):return 0\n    if(s[i][j] == '1'):return 0\n\n    if(i == 1 and j == n - 1):return 1\n        \n    if(dp[i][j] != -1):return dp[i][j]\n\n    ans = 0\n    if(i == 0 and s[i + 1][j] == '0'):ans = max(ans , solve(i + 1 , j))\n    if(j < (n - 1) and s[i][j + 1] == '0'):ans = max(ans , solve(i , j + 1))\n    if(i == 0 and j < (n - 1) and s[i + 1][j + 1] == '0'):ans = max(ans , solve(i + 1 , j + 1))\n    if(i == 1 and j < (n - 1) and s[i - 1][j + 1] == '0'):ans = max(ans , solve(i - 1 , j + 1))\n\n    dp[i][j] = ans\n    return ans\n\n\nfor T in range(int(input())):\n\n    n = int(input())\n\n    s = [input().strip() for i in range(2)]\n\n    dp = [[-1 for i in range(n + 1)] for j in range(4)]\n    \n    ans = solve(0 , 0)\n\n    if(ans == 1):print('YES')\n    else:print('NO')\n",
                true
            ],
            [
                "ans=[]\nfor i in range(int(input())):\n    a=int(input())\n    s1=input()\n    s2=input()\n    for i in range(1,a-1):\n        if s1[i]==s2[i]==\"1\":\n            ans.append(\"NO\")\n            break\n    else: ans.append(\"YES\")\nfor i in ans: print(i)    ",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    mat = [0,0]\n    a=list(input())\n    b=list(input())\n    if b[-1]=='1' or a[0]=='1':\n        print('NO')\n        continue\n    ans ='YES'\n    for i in range(n-1):\n        if a[i+1]=='1' and b[i+1]=='1':\n            ans = 'NO'\n    for i in range(n-1):\n        if b[i+1]=='1' and a[i+1]=='1':\n            ans = 'NO'    \n    print(ans)",
                true
            ],
            [
                "import sys\n\n# All rows must have at least one clear tile to walk an adjacent tile.\n# The start and ending tiles are constrained such that they cannot be trapped.\ndef is_possible(row1, row2):\n    for x in range(len(row1)):\n        if row1[x] == '1' and row2[x] == '1':\n            return \"NO\\n\"\n    return \"YES\\n\"\n\n# Handle Input\ninfile = []\nfor line in sys.stdin:\n    if '' == line.rstrip():\n        break\n    infile.append(line.rstrip())\n\nrows = []\n\nfor x in range(1, len(infile), 3):\n    rows.append(infile[x+1])\n    rows.append(infile[x+2])\n\n# Input formatted\n\nfor y in range(0, len(rows), 2):\n    sys.stdout.write(is_possible(rows[y], rows[y+1]))\n",
                true
            ],
            [
                "def solve(n, a, b):\n    return \"YES\" if all(not a[i] or not b[i] for i in range(n)) else \"NO\"\n\nt = int(input())\nfor i_t in range(t):\n    n = int(input())\n    a = list(map(int, input()))\n    b = list(map(int, input()))\n    print(solve(n, a, b))",
                true
            ],
            [
                "import math\nfrom collections import defaultdict, Counter\n# import sys\n# sys.stdin = open('input.txt', 'r')  \n# sys.stdout = open('output.txt', 'w+')\n\n\nfor t in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(2):\n        l.append(input())\n    \n    if l[1][-1]=='1':\n        print('NO')\n        continue\n    f = True\n    for i in range(n):\n        if(l[0][i]=='1' and l[1][i]=='1'):\n            f = False\n    \n    if f:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "\nt = int(input()) #\u043a\u043e\u043b-\u0432\u043e \u0434\u0430\u043d\u043d\u044b\u0445\nn = []\nstr1 = []\nstr2 = []\n\nfor i in range(t):\n    n.append(int(input()))\n    str1.append( list(input()))\n    str2.append( list(input()))\nfor i in range(t):\n   # print('--------------------------------')\n   # print('-------------',i+1,'----------------')\n    possibility = 'NO'\n    for j in range(n[i]-2):\n     #   print(str2[i][j+1], str1[i][j+1])\n        #print(str2[i][j + 1] == 1)\n        if str2[i][j+1] == '1' and str1[i][j +1] == '1':\n            possibility = 'NO'\n           # print('1')\n            break\n        else: possibility = 'YES'\n    print(possibility)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    ans = \"YES\"\n    for i in range(n):\n        if(s1[i] == '1' and s2[i] == '1'):\n            ans = \"NO\"\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    row1 = input()\n    row2 = input()\n    for i in range(n):\n        if row1[i] == '1' and row2[i] == '1':\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n\n    a=list(input())\n    b=list(input())\n    x=0\n    for i in range(n):\n        if(i!=0 or i!=n-1):\n            if(a[i]==b[i]):\n                if(a[i]=='1'):\n                    x=1\n                    break\n            \n    if(x==1):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n    \n",
                true
            ],
            [
                "T = int(input())\nfor x in range(T):\n    n = int(input())\n    r1 = input()\n    r2 = input()\n    happened = False\n    for y in range(len(r1)):\n\n        if(r1[y:y+1] == r2[y:y+1] == \"1\"):\n            happened = True\n    if(happened == False):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools, copy\ninf = float('inf')\nmod = 10**9+7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // fractions.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(200000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\ndef initGrid(h,w):\n    for i in range(h):\n        grid.append(list(S()))\n \n ################### Main (Author - 9th) ##################\n\nfor _ in range(I()):\n    n = I()\n    s1 = S()\n    s2 = S()\n    booly = True\n    for i in range(n):\n        if s1[i] == \"1\" and s2[i] == \"1\":\n            booly = False\n            break\n    if not booly:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t=int(input())\n\nfor i in range(t):\n    tt=input()\n    s=list(input())\n    ss=list(input())\n    ok=True\n    for j in range(len(s)):\n        ok=ok and int(s[j])*int(ss[j])==0\n    if ok:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    res = []\n    cnt=0\n    res1, res2 = [], []\n    for i in range(len(s1)):\n        res1.append(s1[i])\n    for i in range(len(s2)):\n        res2.append(s2[i])\n    res.append(res1)\n    res.append(res2)\n    for i in range(n):\n        if(res[0][i]=='0' or res[1][i]=='0'):\n            cnt+=1\n    if(cnt==n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    ",
                true
            ],
            [
                "t=int(input())\nwhile t:\n    t-=1\n    n=int(input())\n    a=input()\n    b=input()\n    for i in range(n):\n        if a[i]==\"1\" and b[i]==\"1\":\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "\nmod=10**9+7\n\n\n\n\ndef main():\n    n=int(input())\n    s1=input()\n    s2=input()\n    if s2[-1]==\"1\" or s1[0]==\"1\":\n        print(\"NO\")\n        return\n    for i in range(n):\n        if s1[i]==\"1\" and s2[i]==\"1\":\n            print(\"NO\")\n            return\n    print(\"YES\")\n\n\nif __name__==\"__main__\":\n    t=1\n    t=int(input())\n    for ii in range(t):\n        main()\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=input()\n    b=input()\n    if b[-1]!=\"-1\":\n        for i in range(len(a)):\n            if a[i]==\"1\" and b[i]==\"1\":\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n    else:\n        print(\"NO\")\n        ",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\nI = lambda : list(map(int,input().split()))\n\nt,=I()\nfor _ in range(t):\n    n,=I()\n    a=input().strip()\n    b=input().strip()\n    an = \"YES\"\n    for i in range(n):\n        if a[i]+b[i]=='11':\n            an=\"NO\"\n            break\n    print(an)",
                true
            ],
            [
                "def test(mat,n):\n    if mat[1][n-1] == 1:\n        return \"NO\"\n    elif len(set(mat[0])) == 1 and mat[0][0] == 1:\n        return \"NO\"\n    elif len(set(mat[0])) == 1 and mat[0][0] == 0: \n        return \"YES\"\n    else:\n        for k in range(n):\n            if mat[0][k] == 1 and mat[1][k] == 1:\n                return \"NO\"\n        return \"YES\"\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    mat = []\n    for j in range(2):\n        mat.append(list(map(int,list(input()))))\n    print(test(mat,n))\n\n        \n\n\n",
                true
            ],
            [
                "#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"# paste here...\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\nYES = 'YES'\nNO = 'NO'\n\ndef solve(N, A):\n    for i in range(N):\n        if A[0][i] == '1' and A[1][i] == '1':\n            return 'NO'\n    if A[1][N-1] == '1':\n        return 'NO'\n    return 'YES'\n\nT0 = int(input())\nfor _ in range(T0):\n    N = int(input())\n    A = [input() for _ in range(2)]\n    print(solve(N, A))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n  n=int(input())\n  s1=input()\n  s2=input()\n  check=1 \n  for i in range(len(s1)):\n    if int(s1[i])+int(s2[i])==2:\n      check=0\n      break\n  if check==1:\n    print('YES')\n  else:\n    print('NO')",
                true
            ],
            [
                "test_count = int(input())\n\n\ndef can_move(grid: list):\n    first_row = grid[0][1:-1]\n    second_row = grid[1][1:-1]\n\n    for col_index in range(len(first_row)):\n        if (first_row[col_index] == 1 and second_row[col_index] == 1):\n            return \"NO\"\n    else:\n        return \"YES\"\n\n\nresults = []\n\nfor test_round in range(test_count):\n    col_count = int(input())\n\n    first_row_rule = input()\n    second_row_rule = input()\n\n    current_round_grid = [\n        [int(i) for i in first_row_rule],\n        [int(i) for i in second_row_rule]\n    ]\n\n    results.append(can_move(grid=current_round_grid))\n\nfor result in results:\n    print(result)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a = int(input())\n    x = int(input())\n    y = int(input())\n    c = str(x+y)\n    if '2' in c:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [input() for i in range(2)]\n    f = True\n    for j in range(n):\n        if int(arr[0][j])+int(arr[1][j]) == 2:\n            f = False\n            break\n    print(\"YES\" if f is True else \"NO\")\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for x in range(2):\n        arr.append(input())\n    flag = 0\n    for i in range(len(arr[0])):\n        if int(arr[0][i])+int(arr[1][i]) == 2:\n            flag = 1\n            break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    arr = [[], []]\n    a = list(input())\n    tmp = list(input())\n    arr[0] = list(a.copy())\n    arr[1] = list(tmp.copy())\n    flag = True\n    for i in range(2):\n        for j in range(n-1):\n            if(arr[i][j] != \"1\"):\n                if(i == 0):\n                    if(arr[i][j+1] == \"1\" and arr[i+1][j+1] == \"1\"):\n                        flag = False\n                        break\n                else:\n                    if(arr[i][j+1] == \"1\" and arr[i-1][j+1] == \"1\"):\n                        flag = False\n                        break\n    if(flag == True):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "def main():\n    n = int(input())\n    arr = []\n    for i in range(2):\n        arr.append(list(input()))\n\n    for i in range(n):\n        if arr[0][i] == '1' and arr[1][i] == '1':\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n\n\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for i in range(t):\n        main()",
                true
            ],
            [
                "for _ in range(int(input())):\n    q = int(input())\n    a = input()\n    b = input()\n    f = \"YES\"\n    for i in range(q):\n        if a[i] == b[i] and a[i] == '1':\n            f = \"NO\"\n            break\n    print(f)\n",
                true
            ],
            [
                "def solution():\n    for t in range(int(input())):\n        n = int(input()); cell = [input(), input()]; ans = \"YES\";\n\n        for i in range(n):\n            if cell[0][i] == \"1\" and cell[1][i] == \"1\": ans = \"NO\"; break;\n        \n        print(ans);\n    return;\nsolution();",
                true
            ],
            [
                "cases = int(input())\nall = [input() for i in range(cases*3)]\n\nfinal = [all[i:i + 3] for i in range(0, len(all), 3)]\n\ndef survival(final):\n    for i in final:\n        top = i[1]\n        bottom = i[2]\n        top_traps = [i for i in range(len(top)) if top[i] == '1']\n        bottom_traps = [i for i in range(len(bottom)) if bottom[i] == '1']\n        checker = []\n        for i in top_traps:\n            if i in bottom_traps:\n                checker.append(8)\n        if len(checker) == 0:\n            print('YES')\n        else:\n            print('NO')\n                \nsurvival(final)",
                true
            ],
            [
                "from collections import deque\n\n\ndef BFS(i, j):\n    q = deque()\n    q.append((i, j))\n    cur = [i, j]\n    while len(q) > 0:\n        cr, cc = q.popleft()\n        matrix[cr][cc] = '1'\n        cur[0] = cr\n        cur[1] = cc\n        if cur == [1, cols - 1]:\n            return cur\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (1, -1), (1, 1), (-1, 1), (-1, 0), (-1, -1)]:\n            nr = cr + dr\n            nc = cc + dc\n            if 0 <= nr < 2 and 0 <= nc < cols and matrix[nr][nc] == '0':\n                matrix[nr][nc] = '1'\n                q.append((nr, nc))\n    return cur\n\n\nfor _ in range(int(input())):\n    cols = int(input())\n    matrix = []\n    for _ in range(2):\n        matrix.append(list(input()))\n\n    if BFS(0, 0) == [1, cols-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    first = str(input())\n    second = str(input())\n    if any(first[i] == '1' and second[i] == '1' for i in range(1, n - 1)):\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    if(s2[-1]=='1'):\n        print('NO')\n        continue\n    f = 0\n    for i in range(n-1):\n        if(s1[i+1]=='1' and s2[i+1]=='1'):\n            f=1\n            break\n    if(f==1):\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "t = int(input())\n\ndef solve():\n  n = int(input())\n  arr = []\n  for _ in range(2):\n    arr.append([x == '0' for x in input()]+[False])\n  if not arr[1][n-1]:\n    print(\"NO\")\n    return\n  for i in range(n):\n    if i == n-1:\n      print(\"YES\")\n      return\n    if arr[0][i+1]:\n      continue\n    if arr[1][i+1]:\n      continue\n    print(\"NO\")\n    return\n  \nfor _ in range(t):\n  solve()\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    c=int(input())\n    arr=list(input())\n    brr=list(input())\n    flag =-1\n    for i in range(c):\n        if int(arr[i]) ==1 and int(brr[i]) ==1:\n            flag =0\n            break\n    if flag ==0:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "\nt=int(input ())\nfor x in range (t): \n    n= int(input())\n    ch0 = input()\n    ch1 = input ()\n\n    l= [[int(i) for i in ch0],[int(i) for i in ch1] ]\n    nb=0\n    for i in range (1,n-1) : \n        \n        if (l[0][i]==1 and l[1][i]==1 ):\n            nb+=1\n        \n    if nb > 0 :\n        print(\"NO\")\n    else:\n        print(\"YES\") \n\n\n    ",
                true
            ],
            [
                "I=input\nexec(int(I())*\"I();print('YNEOS'[int(I(),2)&int(I(),2)>0::2]);\")",
                true
            ],
            [
                "t=int(input())\nwhile(t>0):\n    n=int(input())\n    s=str(input())\n    s1=str(input())\n    f=0\n    i=0\n    while(n>0):\n        x=int(s[i])\n        y=int(s1[i])\n        \n        if(x+y<=1):\n            i+=1\n            n-=1\n        else:\n            f=1\n            break\n        x=0\n        y=0\n    if(f):\n        print('NO')\n    else:\n        print('YES')\n    t-=1\n",
                true
            ],
            [
                "def move(i,j,arr,vis):\n    # print(vis)\n    if([i,j] in vis):\n        return False\n    vis.append([i,j])\n    if(arr[i][j]=='1'):\n        return False\n    if(i==1 and j==len(arr[0])-1):\n        # print(i,j,'karam',len(arr[0])-1)\n        return True\n    res=False\n    for i1 in [0,1]:\n        for j1 in [j-1,j,j+1]:\n            if([i1,j1] not in vis and j1>=0 and j1<len(arr[0])):\n                res = res or move(i1,j1,arr,vis)\n    return res\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    arr=[]\n    arr.append(list(input()))\n    arr.append(list(input()))\n    # print(len(arr[0]))\n    if(move(0,0,arr,[])):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    r1=input()\n    r1=list(r1)\n    r2=input()\n    r2=list(r2)\n    flag=0\n    for i in range(n): \n            if r1[i]==\"1\" and r2[i]==\"1\":\n                flag=1\n    if flag==0:\n        print(\"YES\")\n    else:\n        print(\"NO\") ",
                true
            ],
            [
                "t=int(input())\nfinal=[]\nfor j in range(0,t):\n    n=int(input())\n    rows=[]\n    for i in range(0,2):\n        num=input()\n        v=list(map(int, str(num)))\n        rows.append(v)\n    pos_y=0\n    pos_x=0\n    ans=''\n    while pos_x<n-1:\n        x=True\n        if pos_y==0 and rows[1][pos_x+1]==0:\n            pos_x=pos_x+1 \n            pos_y=1\n        elif pos_y==1 and rows[0][pos_x+1]==0:\n            pos_x=pos_x+1 \n            pos_y=0\n        elif rows[pos_y][pos_x+1]==0:\n            pos_x=pos_x+1   \n        else:\n            x=False\n            ans=\"NO\"\n            break\n    if x==True:\n        if pos_y==1:\n            ans=\"YES\"\n        elif pos_y==0 and rows[1][n-1]==0:\n            ans=\"YES\"\n        else:\n            ans=\"NO\"\n    final.append(ans)\nfor i in range (0,t):\n    print(final[i])",
                true
            ],
            [
                "import os,sys\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ntest_cases=int(input())\nwhile(test_cases):\n    n=int(input())\n    s=[input() for i in range(2)]\n    result=False\n    for i in range(n):\n        if s[0][i]=='1' and s[1][i]=='1':\n            result=False\n            break\n        result=True\n    if result:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n    test_cases=test_cases-1\n\n\n\n\n\n\n\n\n            \n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "for _ in range(eval(input())):\n    n = eval(input())\n    a = list(map(int, input()))\n    b = list(map(int, input()))\n    c = [a[i] + b[i] for i in range(n)]\n    if 2 in c or b[n-1] == 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "'''\n\n                            Online Python Compiler.\n                Code, Compile, Run and Debug python program online.\nWrite your code in this editor and press \"Run\" button to execute it.\n\n'''\nt = int(input())\nfor kp in range (t):\n    n = int(input())\n    r1 = (input())\n    r2 = (input())\n    l1 = []\n    l2 = []\n    myr = 0\n    for kp1 in str(r1):\n        l1.append(int(kp1))\n    for kp2 in str(r2):\n        l2.append(int(kp2))\n    \n    for kp3 in range (n):\n        if l1[kp3] == 1 and l2[kp3] == 1:\n            myr = 1\n    if myr  == 0 :\n        print(\"YES\")\n    else :\n        print(\"NO\")\n        ",
                true
            ],
            [
                "for _ in range(int(input())):\n    cols = int(input())\n    s = not not (int(input(), 2) & int(input(), 2))\n    print(\"NO\" * s + \"YES\" * (not s))",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    l=input()\n    m=input()\n    z=0 \n    for k in range(n):\n        if l[k]==\"1\" and m[k]==\"1\":\n            z=1\n            print(\"NO\")\n            break\n    if z==0:\n        print(\"YES\") \n\n        \n",
                true
            ],
            [
                "t=int(input())\ng=[]\nf=[0,0,0]\nfor i in range(t):\n  for j in range(3):\n    f[j]=input()\n  g.append(f)\n  f=[0,0,0]\nfor i in range(t):\n  n=int(g[i][0])\n  c=1\n  for j in range(n):\n    if g[i][1][j]=='1' and g[i][2][j]=='1':\n      c=0\n      break\n  if c:\n    print('YES')\n  else:\n    print('NO')",
                true
            ],
            [
                "t = eval(input())\nfor i in range(t):\n    complete = True\n    n = eval(input())\n    row1 = input()\n    row2 = input()\n    if row1[0] == '1':\n        complete = False\n    elif row2[n-1] == '1':\n        complete = False\n    else:\n        for j in range(1, n-1):\n            if row1[j] == '1' and row2[j] == '1':\n                complete = False\n    if complete:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n\n",
                true
            ],
            [
                "rond = eval(input())\nfor ru in range(rond):\n        a=eval(input())\n        p='YES'\n        s=input()\n        t=input()\n        m=[]\n        n=[]\n        for i in s:\n            m.append(i)\n        for i in t:\n            n.append(i)\n        for i in range(0,a-1):\n          if m[i]=='0' and m[i+1]=='1'  and n[i+1]=='1':\n            p='NO'\n          if n[i]=='0' and n[i+1]=='1'  and m[i+1]=='1':\n            p='NO'\n        print(p)\n        ",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\nfor _ in range(int(input().strip())):\n    #y,a,b=map(int,input().strip().split(\" \"))\n    n=int(input().strip())\n    s=input().strip()\n    s1=input().strip()\n\n    \n    #a=list(map(int,input().strip().split(\" \")))\n    for i,j in zip(s,s1):\n        if i==j==\"1\":\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n\n    \n",
                true
            ],
            [
                "for _ in range(int(input())):\n\n    n = int(input())\n    s  = input()\n    ss = input()\n\n    flag = False\n    for  i in range(n):\n        if s[i]==ss[i]=='1':\n            print('NO')\n            flag = True\n            break\n    if not flag:\n        print('YES')",
                true
            ],
            [
                "def solve(s, s1, i, j):\n    if(i>1 or j>n-1 or i<0):\n        return False\n    if(i==0):\n        if(s[j]=='1'):\n            return False\n    if(i==1):\n        if(s1[j]=='1'):\n            return False\n    if(i==1 and j==n-1):\n        return True\n    if(arr[i][j]==1):\n        return True\n    if(arr[i][j]==0):\n        return False\n    ans = solve(s, s1, i+1,j) or solve(s, s1, i, j+1) or solve(s, s1, i+1,j+1) or solve(s,s1,i-1,j+1)\n    if(ans):\n        arr[i][j]=1\n    else:\n        arr[i][j]=0\n    return ans\n\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    s=input()\n    s1=input()\n    arr = [[-1 for k in range(n)] for j in range(2)]\n    if(solve(s,s1,0,0)):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "def fun(n,r1,r2,x,y,c):\n    #print(x,y)\n    if x==n-1 and y==1:\n        #print(\"Returning YES\")\n        return 1\n    elif x<n:\n        #print(\"Test\")\n        if x<n-1 and r1[x+1]=='0' and y==0:\n            return fun(n,r1,r2,x+1,y,1)\n        if x<n-1 and r2[x+1]=='0' and y==1:\n            return fun(n,r1,r2,x+1,y,1)\n        elif r2[x]=='0' and y==0 and c!=0:\n            return  fun(n,r1,r2,x,y+1,0)\n        elif r1[x]=='0' and y==1 and c!=0:\n             return fun(n,r1,r2,x,y-1,0)\n        elif x<n-1 and r2[x+1]=='0' and y==0:\n             return fun(n,r1,r2,x+1,y+1,1)\n        elif x<n-1 and r1[x+1]=='0' and y==1:\n             return fun(n,r1,r2,x+1,y-1,1)\n        else :\n            #print(\"Returning No\")\n            return 0\n    else :\n        return 0\n\n\ntrials = int(input())\nfor trial in range(trials):\n    n = int(input())\n    r1 = list(input())\n    r2 = list(input())\n    if fun(n,r1,r2,0,0,0)==1:\n        print(\"YES\")\n    else :\n        print(\"NO\")\n",
                true
            ],
            [
                "T = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = [ list(input()) for i in range(2)]\n    for i in range(1,n):\n        if arr[0][i] == arr[1][i] == '1':\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "if __name__ == \"__main__\":\n    n=int(input())\n    l=0\n    for i in range(n):\n        m=int(input())\n        l1=list(input())\n        l2=list(input())\n        l=0\n        for j in range(m):\n            if(l1[j]==\"1\" and l2[j]==\"1\"):\n                l=1\n        if(l==1): print(\"NO\")\n        else : print(\"YES\")",
                true
            ],
            [
                "def fun(f,s,n):\n    yes = '0'\n    no = '1'\n    dp = [[False for i in range(100)]for i in range(2)]\n    # print(dp)\n    for i in range(n-1,-1,-1):\n        if(i==n-1):\n            if s[i]==no:\n                dp[1][i]=False\n                dp[0][i]=False\n            else:\n                dp[1][i]=True\n                if f[i]==yes:\n                    dp[0][i]=True\n                else:\n                    dp[0][i]=False\n\n        else:\n            if(s[i]==yes):\n                dp[1][i] = (dp[1][i+1] or dp[0][i+1] or dp[0][i])\n            if(f[i]==yes):\n                dp[0][i]= (dp[0][i+1] or dp[1][i+1] or dp[1][i])\n    if(dp[0][0]==True):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n\nT = int(input())\n# T=1\nfor i in range(T):\n    # st= input()\n    n = int(input())\n    # lt = list(map(int, input().split()))\n    # ls = list(map(int, input().split()))\n    f= input()\n    s= input()\n    # ls = list(map(int, input().split()))\n    fun(f,s,n)\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    array1 = list(map(int, list(input())))\n    array2 = list(map(int, list(input())))\n    flag = True\n    for i in range(n - 1):\n        if array1[i] + array2[i] == 2:\n            print(\"NO\")\n            flag = False\n            break\n    if (flag):\n        print(\"YES\")",
                true
            ],
            [
                "k = int(input())\nfor i in range(k):\n    x = int(input())\n    string = input()\n    string1 = input()\n    f = 0\n    for i in range(x):\n        if (string[i] == '1' and string1[i] == '1'):\n            f = 1\n            break\n    if (f == 1):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect, heapq\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nmod = int(1e9+7)\n\ndef qmod(a, b):\n    res = 1\n    while b:\n        if b&1:\n            res = (res*a)%mod\n        b >>= 1\n        a = (a*a)%mod\n    return res\n\ndef inv(a):\n    return qmod(a, mod-2)\n\n\ndef my_main():\n    kase = inp()\n    pans = []\n    for ka in range(kase):\n        n = inp()\n        da = [inst(), inst()]\n        st = [[0 for j in range(n)] for i in range(2)]\n        q = deque()\n        q.append((0, 0))\n        while q:\n            x, y = q.popleft()\n            for i, j in [(1, 0), (0, 1), (1, 1), (-1, 1)]:\n                nx, ny = x+i, y+j\n                if 0<=nx<2 and ny<n and da[nx][ny]=='0' and st[nx][ny] == 0:\n                    st[nx][ny] = 1\n                    q.append((nx, ny))\n        pans.append(\"YES\" if st[1][-1] else \"NO\")\n\n\n    print('\\n'.join(pans))\n\nmy_main()\n\n",
                true
            ],
            [
                "import sys;input = sys.stdin.readline\ndef get():\n    return input().strip()\nfor _ in range(int(input())):\n    n=int(get())\n    s1=get()\n    s2=get()\n    f=0\n    for i in range(n-1):\n        if s1[i]==\"1\" and s2[i]==\"1\":\n            f=1\n            break\n    if f==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    answer = 'YES'\n    n = int(input())\n    first = input()\n    second = input()\n    for j in range(1, n-1):\n        if first[j] == '1' and second[j] == '1':\n            answer = 'NO'\n            break\n    print(answer)",
                true
            ],
            [
                "\nimport sys\nimport io,os\nfrom io import BytesIO, IOBase\n#\nfrom os import path\n\n\n\n# def inp():\n#     return(int(input()))\n# def inlt():\n#     return(list(map(int,input().split())))\n# def insr():\n#     s = input()\n#     return(list(s[:len(s) - 1]))\n# def invr():\n#     return(map(int,input().split()))\n# import numpy as np\nfrom collections import Counter\nimport math\nimport random\nimport bisect\nfrom functools import reduce\nfrom sys import stdin,stdout\nfrom math import gcd,floor,sqrt,log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl,bisect_right as br\n\n\nif(path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\",\"r\")\n    sys.stdout = open(\"output.txt\",\"w\")\nelse:\n    input = sys.stdin.readline\n    # input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\n\n\nsys.setrecursionlimit(100000000)\n\ninp    =lambda: int(input())\nstrng  =lambda: input().strip()\njn     =lambda x,l: x.join(map(str,l))\nstrl   =lambda: list(input().strip())\nmul    =lambda: map(int,input().strip().split())\nmulf   =lambda: map(float,input().strip().split())\nseq    =lambda: list(map(int,input().strip().split()))\n\nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\n\nflush  =lambda: stdout.flush()\nstdstr =lambda: stdin.readline()\nstdint =lambda: int(stdin.readline())\nstdpr  =lambda x: stdout.write(str(x))\n\nmod=1000000007\n\n\na = inp()\n\ndef gcd(a,b):\n    if (b == 0):\n        return a\n    else:\n         return gcd (b, a % b)\n\ndef gcdofList(A): \n    res = A[0]\n    for c in A[1::]:\n        res = gcd(res , c) \n        if res == 1:\n            return res\n            break\n\n    return res         \n    pass\n\n\ndef solve(t,z):\n    t=  list(t)\n    z = list(z)\n    #0 0 0\n    #0 0 0\n    #\n\n    #0 1 2 3\n    #0 1 1 1\n\n    #0 1 2 3\n    #1 1 1 0\n\n    t_con = Counter(t)\n    z_con = Counter(z)\n\n    if '1' not in t_con or '1' not in z_con:\n        return 'YES'\n\n\n    for i in range(1,len(t)-1):\n        if t[i] == '1' and z[i] == '1':\n            return 'NO'\n\n    return 'YES'        \n\n\n\nfor i in range(a):\n    b = inp()\n    t = strng()\n    z = strng()\n    print(solve(t,z))\n\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp(): \n    # one integer\n    return int(input())\ndef input_list():\n    # list of integers\n    return list(map(int,input().split()))\ndef input_string():\n    # list of characters\n    s = input()\n    return list(s[:len(s) - 1])\ndef input_int_gen():\n    # integer generator \n    return map(int,input().split())\n\n\n# Codeforce 115 Edu A\ntests = inp()\nfor _ in range(tests):\n    n = inp()\n    a1 = input_string()\n    a2 = input_string()\n    for s1, s2 in zip(a1, a2):\n        if s1 == s2 == \"1\":\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        s1 = input()\n        s2 = input()\n        ans = True\n\n        for l in range(n):\n            if s1[l] == '1' and s2[l] == '1':\n                ans = False\n\n        print(\"YES\") if ans else print(\"NO\")\n\n\nmain()",
                true
            ],
            [
                "import sys\n\n\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\n\n\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\n\n\ndef input(): return sys.stdin.readline().strip()\n\n\nMOD = 1000000007\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    f = 1\n    for i in range(n):\n        if a[i] == b[i] and a[i] == '1':\n            print('NO')\n            f = 0\n            break\n    if f:\n        print('YES')\n    else:\n        continue\n",
                true
            ],
            [
                "\nt = int(input())\nwhile (t):\n    n = int(input())\n    s = input()\n    s1 = input()\n    f = True\n    for i in range(0,len(s)):\n        if (s[i] == '1' and s1[i] == '1'):\n            print(\"NO\")\n            f = False\n            break\n    if (f == True):\n        print(\"YES\")\n    t -= 1\n",
                true
            ],
            [
                "t = int(input())\nflag = True\n\nfor _ in range(t):\n    grid = []\n    n = int(input())\n    for _ in range(2):\n        grid.append(input())\n    for i in range(n):\n        if grid[0][i] == grid[1][i] == \"1\":\n            print(\"NO\")\n            flag = False\n            break\n    if flag:\n        print(\"YES\")\n    flag = True\n    grid = []\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfrom collections import deque\n \nfor caseNr in range(1, t + 1):\n    n = int(input())\n    #n, H = list(map(int, input().split()))\n    #row1 = list(map(int, input().split()))\n    #row2 = list(map(int, input().split()))\n    #arr = list(input())\n    #print(arr)\n    #c = Counter(arr)\n    row1 = input()\n    row2 = input()\n    \n    matrix = [[] for _ in range(2)]\n    matrix[0] = [int(row1[i]) for i in range(len(row1))]\n    matrix[1] = [int(row2[i]) for i in range(len(row2))]\n    \n    \n    queue = deque([(0,0)])\n    visited = set()\n    dirs = [[1,0],[-1,0],[0,1],[0,-1],[1,1],[-1,1],[1,-1],[-1,-1]]\n    def find_neighbours(cur):\n        res = []\n        for dir1 in dirs:\n            if 0 <= cur[0] + dir1[0] <= 1 and  0 <= cur[1] + dir1[1] <= len(matrix[0])-1 and matrix[cur[0] + dir1[0]][cur[1] + dir1[1]] != 1:\n                res.append([cur[0]+dir1[0],cur[1]+dir1[1]])    \n        return res\n    \n    ans = \"NO\"\n    while queue:\n        cur = queue.popleft()\n        #print(cur)\n        #type(cur)\n        if cur[0] == 1 and cur[1] == len(matrix[1])-1:\n            ans = \"YES\"\n            break\n        \n        for neighbour in find_neighbours(cur):\n            if tuple(neighbour) not in visited:\n                visited.add(tuple(neighbour))\n                queue.append(tuple(neighbour))\n    \n    print(ans) \n    \n    \n    \n    ",
                true
            ],
            [
                "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    r1 = input()\n    r2 = input()\n    i=0\n    j=0\n    while(i!=1 or j!=n-1):\n        \n        if(j==n-2):\n            print(\"YES\")\n            break\n        if(i==0):\n            if(r2[j+1]!='1'):\n                i+=1\n                j+=1\n            elif(r1[j+1]!='1'):\n                j+=1\n            else:\n                print(\"NO\")\n                break        \n        else:\n            if(r2[j+1]!='1'):\n                j+=1\n            elif(r1[j+1]!='1'):\n                i-=1\n                j+=1\n            else:\n                print(\"NO\")\n                break\n    else:\n        print(\"YES\")\n    \n",
                true
            ],
            [
                "for _ in range(int(input())):\n\n    n = int(input())\n\n    arr = []\n    for _ in range(2):\n        arr.append(input())\n\n    for i in range(n):\n        if arr[0][i] == \"1\" and arr[1][i] == \"1\":\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "t = int(input())\nlist = []\nfor i in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    lisd = []\n    for j in range(n):\n        if a[j] == \"1\" and b[j] == \"1\":\n            lisd.append(\"NO\")\n        else:\n            lisd.append(\"YES\")\n    if \"NO\" in lisd:\n        list.append(\"NO\")\n    else:\n        list.append(\"YES\")\n\nfor i in list:\n    print(i)\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor test_iteration in range(t):\n    res = \"YES\"\n    n = int(input())\n    first_line = input()\n    second_line = input()\n    first_line = [int(char) for char in first_line]\n    second_line = [int(char) for char in second_line]\n    for _ in zip(first_line,second_line):\n        if _ == (1,1):\n            res = \"NO\"\n            break\n        else:\n            continue\n    print(res)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = [[0, 0] for i in range(n)]\n    used = [[0, 0] for i in range(n)]\n    b = list(map(int, ' '.join(input().split())))\n    for i in range(n):\n        a[i][0] = b[i]\n    b = list(map(int, ' '.join(input().split())))\n    for i in range(n):\n        a[i][1] = b[i]\n    if a[0][1] == 1:\n        used[0][1] = 1\n    for i in range(1, n):\n        if not used[i - 1][0] or not used[i - 1][1]:\n            if a[i][0] and a[i][1]:\n                used[i] = [1, 1]\n            elif a[i][0] and not a[i][1]:\n                used[i] = [1, 0]\n            elif not a[i][0] and a[i][1]:\n                used[i] = [0, 1]\n            else:\n                used[i] = [0, 0]\n        else:\n            used[i] = [1, 1]\n    if not used[n - 1][1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "# Problem: A. \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u0430\u044f \u0438\u0433\u0440\u0430\n# Contest: Codeforces - Educational Codeforces Round 115 (\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0434\u043b\u044f Div. 2)\n# URL: https://codeforces.com/contest/1598/problem/A\n# Memory Limit: 256 MB\n# Time Limit: 2000 ms\n#\n# Powered by CP Editor (https://cpeditor.org)\n\nmod = 10**9 + 7\neps = 10**-9\n\n\ndef solve(t):\n    n = int(input())\n    s = input()\n    t = input()\n    ok = True\n    for i in range(n - 1):\n        if s[i + 1] == t[i + 1] == '1':\n            ok = False\n            \n    print('YES' if ok else 'NO')\n\n\nt = 1\nt = int(input())\n\nfor i in range(t):\n    solve(i + 1)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s0 = input()\n    s1 = input()\n    x = [0,0]\n    for j in range(n-1):\n        if s1[j+1] == '0':\n            x[1] += 1\n            if x[0] == 0:\n                x[0] += 1\n        elif s0[j+1] == '0' and s1[j+1] == '1':\n            x[1] += 1\n            if x[0] == 1:\n                x[0] == 0\n    if x == [1,n-1]:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [list(map(int, input().replace(\"\",\" \").split())) for i in range(2)]\n    fl = True\n    for i in range(n):\n        if a[0][i] == 1 and a[1][i] == 1:\n            fl = False\n            break\n    if fl:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\nfor q in range(0, t):\n    n = int(input())\n    a = input()\n    b = input()\n\n    check = True\n\n    for i in range(0, n):\n        if (i == 0):\n            if (b[i] == \"0\"):\n                if (i + 1 < n):\n                    if (b[i + 1] == \"0\"):\n                        check = True\n\n                    elif (a[i + 1] == \"0\"):\n                        check = True\n\n                    else:\n                        check = False\n                        break\n\n            elif (i + 1 < n and a[i + 1] == \"0\"):\n                check = True\n\n            elif (i + 1 < n and b[i + 1] == \"0\"):\n                check = True\n\n            else:\n                check = False\n                break\n\n        else:\n            if (i + 1 < n):\n                if(a[i + 1] == \"0\" or b[i + 1] == \"0\"):\n                    check = True\n\n                else:\n                    check = False\n                    break\n\n    if (check):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n",
                true
            ],
            [
                "def main():\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    inf = 1e17\n    mod = 10 ** 9 + 7\n\n    # Max = 10 ** 6\n    # primes = []\n    # prime = [True for i in range(Max + 1)]\n    # p = 2\n    # while (p * p <= Max + 1):\n    #\n    #     # If prime[p] is not\n    #     # changed, then it is a prime\n    #     if (prime[p] == True):\n    #\n    #         # Update all multiples of p\n    #         for i in range(p * p, Max + 1, p):\n    #             prime[i] = False\n    #     p += 1\n    #\n    # for p in range(2, Max + 1):\n    #     if prime[p]:\n    #         primes.append(p)\n\n    #print(len(primes))\n\n\n    def factorial(n):\n        f = 1\n\n        for i in range(1, n + 1):\n            f = (f * i) % mod  # Now f never can\n        # exceed 10^9+7\n\n        return f\n\n    def ncr(n, r):\n        # initialize numerator\n        # and denominator\n        num = den = 1\n        for i in range(r):\n            num = (num * (n - i)) % mod\n            den = (den * (i + 1)) % mod\n        return (num * pow(den,\n                          mod - 2, mod)) % mod\n\n\n    def isthere(s,ind,c):\n\n        for i in range(ind,len(s),ind+1):\n\n            if s[i] != c:\n                #print('false at',i,s[i])\n                return False\n\n        return True\n\n    def solve(n,r1,r2):\n\n\n        for i in range(n):\n            if r1[i] == r2[i] == '1':\n                return 'NO'\n\n        return 'YES'\n\n\n\n\n    t = int(input())\n    ans = []\n    for _ in range(t):\n        n = int(input())\n\n        #n,m = map(int, input().split())\n        r1 = list(input()[:-1])\n        r2 = list(input()[:-1])\n\n\n        # claims = []\n        #\n        # for i in range(m):\n        #     claim = input().split()\n        #\n        #     claims.append([int(claim[0]),int(claim[1]),claim[2]])\n\n        #a = [int(x) for x in input().split()]\n        #b = [int(x) for x in input().split()]\n        #arr = list(input())[:-1][::-1]\n        ans.append(solve(n,r1,r2))\n\n    p = 1\n    for answer in ans:\n        #print('Case #'+str(p)+\": \"+str(answer))\n        print(answer)\n        p += 1\n\n\nif __name__ == \"__main__\":\n    import sys, threading\n    import bisect\n    import math\n    import itertools\n    from sys import stdout\n\n\n    ############  Sorted Containers  ######################\n    import heapq\n    from queue import PriorityQueue\n    from collections import deque\n\n\n    ############ Tree Problems ( Use Python 3) ###########\n    #sys.setrecursionlimit(2 ** 32 // 2 - 1)\n    #threading.stack_size(1 << 27)\n\n    input = sys.stdin.readline\n    thread = threading.Thread(target=main)\n    thread.start()\n    thread.join()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=input()\n    b=input()\n    flag=\"YES\"\n    # print(n)\n    for i in range(n):\n        # print(a[i],b[i])\n        if a[i]=='1' and b[i]=='1':\n            flag=\"NO\"\n            break\n    print(flag)",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    z = False\n\n    for x in range(n):\n        if a[x] == '1' and b[x] == '1':\n            print('NO')\n            z = True\n            break\n    if z:\n        continue\n    print('YES')",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    arr=[[],[]]\n    a=input()\n    for x in a:\n        arr[0].append(int(x))\n    a=input()\n    for x in a:\n        arr[1].append(int(x))\n    f=[[0]*n,[0]*n]\n    f[0][0]=1\n    for j in range(n-1):\n        if f[0][j]:\n            f[0][j+1]=1-arr[0][j+1]\n            f[1][j+1]=1-arr[1][j+1]\n            f[1][j]=1-arr[1][j]\n        if f[1][j]:\n            f[0][j+1]=1-arr[0][j+1]\n            f[1][j+1]=1-arr[1][j+1]\n            f[0][j]=1-arr[0][j]\n    if f[1][n-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "def func():\n    for i in range(n-1):\n        if (x[i][0] == x[i][1] == '1') or x[-1][1] == '1':\n            print('NO')\n            return\n    print('YES')\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    x = list(zip(a, b))\n    func()\n",
                true
            ],
            [
                "def f():\n    n=int(input())\n    a=int(input(),2)\n    b=int(input(),2)\n    return \"YES\" if a&b==0 else \"NO\"\nfor _ in range(int(input())):\n    print(f())",
                true
            ],
            [
                "t = int(input())\nl=[]\nwhile t:\n    n = int(input())\n    x = list(input())\n    y = list(input())\n    flag = True\n    for i in range (n):\n        if x[i] == y[i] == '1':\n            l.append(\"NO\")\n            flag = False\n            break\n    if flag:\n        l.append(\"YES\")\n    t -= 1\nfor ans in l:\n    print(ans)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    int(input())\n    a=input()\n    b=input()\n    flag=0\n    if b[-1]=='1':\n        print(\"NO\")\n        continue\n    if a[0]=='1':\n        print(\"NO\")\n        continue\n    for i in range(len(a)):\n        if a[i]=='1' and a[i]==b[i]:\n            flag=1\n    if flag==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\nfor _ in range(int(inpu())) :\n    n = int(inpu())\n    l1 = inpu().rstrip('\\n')\n    l2 = inpu().rstrip('\\n')\n    check = 0\n    for i in range(1, n) :\n        if check == 0 :\n            if l1[i] == '1' and l2[i] == '0' :\n                check = 1\n            if l1[i] == '1' and l2[i] == '1' :\n                prin(\"NO\\n\")\n                break\n        if check == 1 :\n            if l2[i] == '1' and l1[i] == '0' :\n                check = 0\n            if l1[i] == '1' and l2[i] == '1' :\n                prin(\"NO\\n\")\n                break\n    else:\n        prin(\"YES\\n\")\n",
                true
            ],
            [
                "N=int(input())\nfor i in range(N):\n    n=int(input())\n    a1=str(input())\n    a2=str(input())\n    k=0\n    for j in range(n):\n        if a1[j]=='1' and a2[j]=='1':\n            print('NO')\n            k=1\n            break\n    if k==0:\n        print('YES')",
                true
            ],
            [
                "tc = int(input())\nfor i in range(tc):\n    n = int(input())\n    f = input()\n    s = input()\n    f = [int(i) for i in f]\n    s = [int(i) for i in s]\n    i = 0\n    play = True\n    start = f\n    temp = s\n    while i < n and play:\n        if start[i] == 0:\n            i += 1\n        else:\n            p = start\n            start = temp\n            if start[i] != 0:\n                print(\"NO\")\n                play = False\n            temp = p\n    if play:\n        print(\"YES\")        ",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = input().rstrip()\n    b = input().rstrip()\n    flag = 'YES'\n\n    for x in range(1, n - 1):\n        if a[x] == b[x] == '1':\n            flag = 'NO'\n            break\n\n    print(flag)",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    r1 = input()\n    r2 = input()\n\n    good = False \n    for i in range(n):\n        if r1[i] == '1' and r2[i] == '1':\n            good = True \n            break \n\n    if good:\n        print(\"NO\")\n\n    else:\n        print(\"YES\")            \n",
                true
            ],
            [
                "t = int(input())\notv = []\nfor  j in range(t):\n    n = int(input())\n    l = True\n    a1 = str(input())\n    a2 = str(input())\n    for i in range(n):\n        if ((a1[i] == a2[i]) and (a1[i] == \"1\")):\n            l = False\n            break\n    if (l == True):\n        otv.append(\"YES\")\n    else:\n        otv.append(\"NO\")\nfor i in range(t):\n    print(otv[i])",
                true
            ],
            [
                "def neighbours(coord):\n    r,c=coord\n    return [(r+1,c),(r,c+1),(r,c-1),(r-1,c)]+[(r+1,c-1),(r-1,c+1),(r+1,c+1),(r-1,c-1)]\n\nfor _ in range(int(input())):\n    n = int(input())\n    grid = []\n    for _ in range(2):\n        l = []\n        for i in input():\n            l.append(i)\n        grid.append(l)\n    start = (0,0)\n    while start != (1, n-1):\n        for pos in neighbours(start):\n            if pos[0] < 0 or pos[1]<0:\n                continue\n            try:\n                if grid[pos[0]][pos[1]] == '0':\n                    grid[start[0]][start[1]] = '1'\n                    start = pos\n                    break\n            except IndexError:\n                continue\n        else:\n            print('NO')\n            break\n        if start == (1, n-1):\n            print('YES')\n            ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n\n    a = input()\n    b = input()\n\n    if a[0] == '1' or b[n-1] == '1':\n        print(\"NO\")\n        continue\n\n    pas = True\n    for i in range(n):\n        if a[i] == '1' and b[i] == '1':\n            pas = False\n            break\n    print(\"YES\" if pas else \"NO\")\n        \n",
                true
            ],
            [
                "test_cases = eval(input())\nfor each_test in range(test_cases):\n  length = eval(input())\n  c1 = input()\n  c2 = input()\n  pos = True\n  for i,j in zip(c1,c2):\n    if i == '1' and j == '1':\n      pos = False\n  if pos:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\n\n\n",
                true
            ],
            [
                "#from math import *\n#from bisect import *\n#from collections import *\n#from random import *\n#from decimal import *\"\"\"\n#from heapq import *\n#from itertools import *\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return map(int,input().split())\nt=inp()\nwhile(t):\n    t-=1\n    n=inp()\n    s=st()\n    s1=st()\n    fl=0\n    cur=0\n    s2='YES'\n    for i in range(len(s)):\n        if(s[i]=='1' and s1[i]=='1'):\n            fl=1\n            s2='NO'\n    print(s2)\n            \n        \n    \n        \n",
                true
            ],
            [
                "def main():\n    n = int(input(\"\"))\n    arr = [];\n    for i in range(2):\n        arr.append(list(input()))\n\n    for i in range(n):\n        if arr[0][i] == '1' and arr[1][i] == '1':\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n\n\n\n\nif __name__ == '__main__':\n    t = int(input(\"\"))\n    for i in range(t):\n        main()",
                true
            ],
            [
                "a=int(input())\nfor _ in range(a):\n  b=int(input())\n  li=[list(map(int,input())) for _ in range(2)]\n  dp=[[1]*b for _ in range(2)]\n  dp[0][0]=li[0][0]\n  dp[1][0]=li[1][0]\n  for j in range(1,b):\n    for i in range(2):\n      if(li[i][j]==0):dp[i][j]=min(dp[0][j-1],dp[1][j-1])\n  if(dp[1][-1]==0):print('YES')\n  else:print('NO')",
                true
            ],
            [
                "N=int(input())\nfor _ in range(N):\n    C=int(input())\n    L=list()\n    L.append(input())\n    L.append(input())\n\n    flag=0\n    #print(L)\n    for i in range(C-1):\n        if L[0][i+1]=='1' and L[1][i+1] =='1':\n            flag=1\n            break\n    if flag==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "t = int(input())\nfor p in range(t):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    for i in range(1, n):\n        if s1[i] == '0':\n            if s2[i-1] == '0': \n                continue\n        elif s2[i] == '0':\n            if s1[i-1] == '0':\n                continue\n        else:\n            print(\"NO\")\n            break\n    if i == n-1 and s2[n-1] == '0':\n        print(\"YES\")",
                true
            ],
            [
                "tc = int(input())\nfor i in range(tc):\n    n = int(input())\n    f = input()\n    s = input()\n    # f = [int(i) for i in f]\n    # s = [int(i) for i in s]\n    i = 0\n    play = True\n    start = f\n    temp = s\n    while i < n and play:\n        if start[i] == '0':\n            i += 1\n        else:\n            p = start\n            start = temp\n            if start[i] != '0':\n                print(\"NO\")\n                play = False\n            temp = p\n    if play:\n        print(\"YES\")        ",
                true
            ],
            [
                "t = int(input())\nfor x in range(t):\n    check = 1\n    ms = []\n    n = int(input())\n    for i in range(2):\n        ms.append(list(str(input())))\n    for j in range(n-1):\n        if ms[0][j+1] == '1' and ms[1][j+1] == '1':\n            check = 0\n    if check == 1:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = str(input())\n    t = str(input())\n    fl = True\n    for i in range(n):\n        if int(s[i]) * int(t[i]) == 1:\n            fl = False\n            break\n    if fl:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    r1 = input()\n    r2 = input()\n\n    if r2[n-1]==\"0\":\n        for i in range(n):\n            if r2[i]==r1[i]==\"1\":\n                print(\"NO\")\n                break\n            elif i==n-1:\n                print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s1, s2 = input(), input()\n    ans = True\n    for i in range(n):\n        if s1[i] == '1' and s2[i] == '1':\n            ans = False\n    print('YES' if ans else 'NO')",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    bad = False\n    for j in range(1, n):\n        # print(j)\n        if s1[j] == \"1\" and s2[j] == \"1\":\n            print(\"NO\")\n            bad = True\n            break\n    if bad != True:\n        print(\"YES\")\n",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    for i in range(n):\n        if s1[i] == \"1\" and s2[i] == \"1\":\n            return 0\n    return 1\n\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nans = [\"NO\", \"YES\"]\nfor i in range(t):\n    print(ans[solve()])\n",
                true
            ],
            [
                "t = int(input())\n \nfor _ in range(t):\n    n = int(input())\n    s = input()\n    t = input()\n    good = True\n    for x in range(n):\n        for y in [x]:\n            if 0 <= y < n:\n                if s[x] == '1' and t[y] == '1':\n                    good = False\n                    break\n    if good:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "for _ in range(int(input())):\n    c=int(input())\n    l=[]\n    for i in range(2):\n        s=(input())\n        l1=[]\n        for i in s:\n            l1.append(int(i))\n        l.append(l1)\n\n    def func():\n        if l[0][0]==1 or l[-1][-1]:return \"NO\"\n        for i in range(c):\n            if l[0][i]==l[1][i]==1:\n                return (\"NO\")\n        return \"YES\"\n    print (func())",
                true
            ],
            [
                "t=int(input())\nfor p in range(t):\n    n=int(input())\n    s1=str(input())\n    s2=str(input())\n    flag=1\n    for i in range(n):\n        if (s1[i]=='1' and s2[i]=='1'):\n            flag=0\n            break\n    if (flag==0):\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n = int(input())\n    row1 = list(map(int, list(input())))\n    row2 = list(map(int, list(input())))\n\n    safe = True\n    for i in range(n):\n        if row1[i] and row2[i]:\n           safe = False\n           break\n\n    if safe:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    a = int(input())\n    l1 = input()\n    l2 = input()\n    x = True\n    for j in range(a-1):\n        if l1[j+1] == '1' and l2[j+1] == '1':\n            x = False\n            print('NO')\n            break\n    if x == True:\n        print('YES')",
                true
            ],
            [
                "from collections import Counter\n\nmxn = 10**10\nfor _ in range(int(input())):\n    n=int(input())\n    grid=[]\n    for i in range(2):\n        grid.append(input())\n    case=0\n    for j in range(1,n):\n        if grid[0][j]=='1' and grid[1][j]=='1': \n            case=1\n            break\n    if not case:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n    ",
                true
            ],
            [
                "mod=(10**9)+7\nfor _ in range(int(input())):\n    n=int(input())\n    s=input().strip('\\n')\n    p=input().strip('\\n')\n    f=0\n    for i in range(n):\n        if s[i]==p[i] and p[i]=='1':\n            f=1\n            break\n    if f==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t = int(input())\n\ncolumns = []\nx = []\ny = []\n\nfor i in range(t):\n    columns.append(int(input()))\n    x.append(input())\n    y.append(input())\n\nfor i in range(t):\n    acc = True\n    for j in range(columns[i]):\n        if x[i][j] == '1' and x[i][j] == y[i][j]:\n            acc = False\n\n    if acc:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "from sys import stdin\n\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n    res = 'YES'\n    for i in range(n):\n        if a[i] == b[i] == '1':\n            res = 'NO'\n            break\n    print(res)\n",
                true
            ],
            [
                "tests = int(input())\n\nfor _ in range(tests):\n    n = int(input())\n    s1 = list(input())\n    s2 = list(input())\n    if any(s1[i]=='1' and s2[i]=='1' for i in range(n)):\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    \n    flag = False\n    for i in range(n):\n        if s1[i] == '1' and s2[i] == '1':\n            print(\"NO\")\n            flag = True\n            break\n        \n    if flag == False:\n        print(\"YES\")",
                true
            ],
            [
                "# <editor-fold desc=\"imports\">\nfrom os import path\nfrom sys import stdin, stdout\nif path.exists('tc.txt'):\n    stdin = open('tc.txt', 'r')\ndef gmi(): return map(int, stdin.readline().strip().split())\ndef gms(): return map(str, stdin.readline().strip().split())\ndef gari(): return list(map(int, stdin.readline().strip().split()))\ndef gart(): return tuple(map(int, stdin.readline().strip().split()))\ndef gars(): return list(map(str, stdin.readline().strip().split()))\ndef gs(): return stdin.readline().strip()\ndef gls(): return list(stdin.readline().strip())\ndef gi(): return int(stdin.readline())\n# </editor-fold>\n\ndef solve():\n    n, ar, br = gi(), gls(), gls()\n    for i in range(n):\n        if ar[i] == br[i] == '1':\n            return \"NO\"\n    return \"YES\" if br[n-1] == '0' else \"NO\"\n\n\n# <editor-fold desc=\"Main\">\ntc = gi()\nwhile tc:\n    tc -= 1\n    print(solve())\n# </editor-fold>",
                true
            ],
            [
                "t=int(input())\nnoerrors='OK'\nfor i in range(t):\n    n=int(input())\n    a=input()\n    b=input()\n    for j in range(len(a)):\n        if (a[j]=='1' and b[j]=='0') or (a[j]=='0' and b[j]=='1') or (a[j]=='0' and b[j]=='0'):\n            noerrors='OK'\n        else:\n            noerrors='BAD'\n            break\n    if noerrors=='OK':\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "t=int(input())\nwhile t>0:\n    t=t-1 \n    n=int(input())\n    s=input()\n    s=str(s)\n    p=input()\n    p=str(p)\n    f=0\n    for j in range(0,n):\n        if s[j]==\"1\" and p[j]==\"1\":\n            f=1 \n            \n            print(\"NO\")\n            break\n            \n    if f==0:\n        print(\"YES\")\n            \n        ",
                true
            ],
            [
                "    #from _typeshed import SupportsKeysAndGetItem\nimport sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\n# sys.stdin=open(\"input.txt\",\"r\");\n# sys.stdout=open(\"output.txt\",\"w\")\n####### GLOBAL ###############\nMOD=1000000007\nNO=lambda:print(\"NO\")\nYES=lambda:print(\"YES\")\n_1=lambda:print(-1)\nari=lambda:[int(_) for _ in input().split()]\ncin=lambda:int(input())\ncis=lambda:input()\nshow=lambda x: print(x)\n########### END #########\n######\ntest_case=1\ntest_case=int(input())\n######\nsys.setrecursionlimit(10**6)\n    \ndef ans():\n    n=cin()\n    fist=list(cis())\n    second=list(cis())\n    mat=[]\n    mat.append(fist+['0'])\n    mat+=[second+['0']]\n    track=True\n    x=0\n    y=0\n    for i in range(n):\n        if mat[x][i]=='1':\n            if x==0 and mat[x+1][i]=='0':\n                x=1\n            elif x==1 and mat[x-1][i]=='0':\n                x=0\n            else:\n                track=False\n                break\n    if track:\n        YES()\n    else:\n        NO()\n        \n        \n        \n        # 1000\n        # 111\n    return\nfor _ in range(test_case):\n    ans()\n    ",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    s1 = str(input())\n    s2 = str(input())\n    for i in range(n):\n        if s1[i] == s2[i] == '1':\n            print('NO')\n            break\n    else:\n        print('YES')",
                true
            ],
            [
                "test_cases = int(input())\n\nfor i in range(test_cases):\n\n    columns = int(input())\n    row1 = list(map(int, [char for char in input()]))\n    row2 = list(map(int, [char for char in input()]))\n\n    isPossible = True\n\n    for c in range(columns):\n        if row1[c] == row2[c] == 1:\n            isPossible = False\n            break\n\n    if isPossible:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t = int(input())\n\nfor nums in range(t):\n    n = int(input())\n    row_1 = input()\n    row_2 = input()\n    for i in range(n - 1):\n        if row_1[i] == \"1\" and row_2[i] == \"1\":\n            print(\"NO\")\n            break\n        elif i == n - 2 and row_2[i + 1] == \"0\":\n            print(\"YES\")\n        else:\n            pass",
                true
            ],
            [
                "# Problem: A. \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u0430\u044f \u0438\u0433\u0440\u0430\n# Contest: Codeforces - Educational Codeforces Round 115 (\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0434\u043b\u044f Div. 2)\n# URL: https://codeforces.com/contest/1598/problem/A\n# Memory Limit: 256 MB\n# Time Limit: 2000 ms\n#\n# Powered by CP Editor (https://cpeditor.org)\n\nmod = 10**9 + 7\neps = 10**-9\n\n\ndef solve(t):\n    n = int(input())\n    s = input()\n    t = input()\n    ok = True\n    for i in range(n - 1):\n        if s[i + 1] == t[i + 1] == '1':\n            ok = False\n            \n    print('YES' if ok else 'NO')\n    yy = 1\n\nt = 1\nt = int(input())\n\nfor i in range(t):\n    solve(i + 1)\n",
                true
            ],
            [
                "t = int(input())\nfor x in range(0,t):\n    n=int(input())\n    s1=input()\n    s2=input()\n    k = 1\n    for i in range(0,n):\n        if s1[i]=='1' and s2[i]=='1':\n            k = 0\n            break\n        \n    if k==1:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    r1 = input()\n    r2 = input()\n\n    for i in range(n):\n        if r1[i] == \"1\" and r2[i] == \"1\":\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a, b = input(), input()\n    print(['YES', 'NO'][any((a[i] == b[i] == '1') for i in range(n))])\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nMonocarp is playing yet another computer game. In this game, his character has to kill a dragon. The battle with the dragon lasts 100^{500} seconds, during which Monocarp attacks the dragon with a poisoned dagger. The i-th attack is performed at the beginning of the a_i-th second from the battle start. The dagger itself does not deal damage, but it applies a poison effect on the dragon, which deals 1 damage during each of the next k seconds (starting with the same second when the dragon was stabbed by the dagger). However, if the dragon has already been poisoned, then the dagger updates the poison effect (i.e. cancels the current poison effect and applies a new one).\n\nFor example, suppose k = 4, and Monocarp stabs the dragon during the seconds 2, 4 and 10. Then the poison effect is applied at the start of the 2-nd second and deals 1 damage during the 2-nd and 3-rd seconds; then, at the beginning of the 4-th second, the poison effect is reapplied, so it deals exactly 1 damage during the seconds 4, 5, 6 and 7; then, during the 10-th second, the poison effect is applied again, and it deals 1 damage during the seconds 10, 11, 12 and 13. In total, the dragon receives 10 damage.\n\nMonocarp knows that the dragon has h hit points, and if he deals at least h damage to the dragon during the battle \u2014 he slays the dragon. Monocarp has not decided on the strength of the poison he will use during the battle, so he wants to find the minimum possible value of k (the number of seconds the poison effect lasts) that is enough to deal at least h damage to the dragon.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of the test case contains two integers n and h (1 \u2264 n \u2264 100; 1 \u2264 h \u2264 10^{18}) \u2014 the number of Monocarp's attacks and the amount of damage that needs to be dealt.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9; a_i < a_{i + 1}), where a_i is the second when the i-th attack is performed.\n\nOutput\n\nFor each test case, print a single integer \u2014 the minimum value of the parameter k, such that Monocarp will cause at least h damage to the dragon.\n\nExample\n\nInput\n\n\n4\n2 5\n1 5\n3 10\n2 4 10\n5 3\n1 2 4 5 7\n4 1000\n3 25 64 1337\n\n\nOutput\n\n\n3\n4\n1\n470\n\nNote\n\nIn the first example, for k=3, damage is dealt in seconds [1, 2, 3, 5, 6, 7].\n\nIn the second example, for k=4, damage is dealt in seconds [2, 3, 4, 5, 6, 7, 10, 11, 12, 13].\n\nIn the third example, for k=1, damage is dealt in seconds [1, 2, 4, 5, 7].\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import math\n#s = input()\n#n= (map(int, input().split()))\n\n#(map(int, input().split()))\n\n\n#a, b = (map(int, input().split()))\n\nfor i in range(0, int(input())):\n\n    n, h =(map(int, input().split()))\n    a = list(map(int, input().split()))\n\n    dist = list()\n\n    for j in range(0, len(a)-1):\n        dist.append(a[j+1]-a[j])\n\n    dist.sort()\n\n    if(len(dist)==0):\n        dist.append(a[0])\n    else:\n        dist.append(dist[len(dist)-1])\n    sum = 0\n    pred_sum = 0\n    flag = 0\n    k = 0\n    for j in range(0, len(a)):\n        sum = pred_sum+(len(a)-j)*dist[j]\n        if(sum>=h):\n            flag = 1\n            k = j\n            break\n\n        pred_sum += dist[j]\n\n    if(flag == 0):\n        if(len(dist)==1):\n            print(h)\n        else:\n            print(h-pred_sum+dist[len(dist)-1])\n    else:\n        sum = 0\n        sum = (h-pred_sum)//(len(a)-k)\n        if((h-pred_sum)%(len(a)-k)):\n            sum += 1\n\n        print(sum)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m=map(int,input().split())\n    k=list(map(int,input().split()))\n    kd=[0]\n    for i in range(1,len(k)):\n        kd.append(k[i]-k[i-1])\n    kd.sort()\n    fin=False\n    fix=0\n    x=0\n    for i,t in enumerate(kd[1:]):\n        xt=fix+kd[i+1]*(n-i)\n        if xt<m:\n            fix+=kd[i+1]\n            x=kd[i+1]\n        elif xt==m:\n            print(kd[i+1])\n            fin=True\n            break\n        else:\n            l,r=kd[i],t\n            md=(l+r)//2\n            rx=0\n            while r-l>1:\n                md = (l + r) // 2\n                #print(l,md,r)\n                f=fix+md*(n-i)\n                #print(f,m)\n                if f==m:\n                    rx=md\n                    break\n                elif f<m:\n                    l=md\n                else:\n                    r=md\n            if rx==0:\n                rx=r\n            fin=True\n            print(rx)\n            break\n    if len(kd)==1:\n        fin=True\n        print(m)\n    if fin==False:\n        print(m-fix)",
                true
            ],
            [
                "def check(arr, n, h, k):\n    for i in range(1, n):\n        h -= min(arr[i]-arr[i-1], k)\n\n    if h <= k:\n        return True\n\n    return False\n\nt = int(input())\nfor _ in range(t):\n    n,h = map(int, input().split())\n    arr = list(map(int, input().split()))\n    start = 1\n    end = h\n\n    while start <= end:\n        mid = (start+end)//2\n        \n        if check(arr, n, h, mid):\n            end = mid - 1\n        \n        else:\n            start = mid + 1\n\n    print(start)",
                true
            ],
            [
                "# cook your dish here\nmod = 10**(9)+7\nimport sys\ninput = sys.stdin.readline\n#t=1\nt=int(input())\nfor _ in range(t):\n    n,h=map(int,input().split())\n    a=list(map(int,input().split()))\n    l=1\n    r=10**(18)\n    ans=10**(18)\n    while l<=r:\n        m=(l+r)//2\n        d=0\n        for i in range(n-1):\n            d=d+min(m,a[i+1]-a[i])\n            if d>=h:\n                break\n        d=d+m\n        if d>=h:\n            ans=m\n            r=m-1\n        else:\n            l=m+1\n    print(ans)\n    \n        \n    ",
                true
            ],
            [
                "n = int(input().split()[0])\nfor _ in range(n):\n    l, h = list(map(int, input().split()))    \n    arr = list(map(int, input().split()))\n    k =h //l +(1 if h % l else 0)\n    \n    df = []\n    for i in range(len(arr)-1):\n        df.append(arr[i+1] - arr[i])\n    df.sort()\n    # print(df)\n    def fun(df,k,h):\n        for d in range(len(df)):\n            if df[d] >= k:\n                if k * (l - d) < h:\n                    k = min(df[d], h //(l-d) + (1 if h % (l-d) else 0))\n                    h -= k\n                else:\n                    h = 0\n                    break\n            else: \n                h -= df[d]\n        if h - k > 0:\n            k += h - k\n        return k\n    print(fun(df,k,h))\n            ",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nLOGN = 20\nINF = 10 ** 9 + 5\nMOD = 10 ** 9 + 7\n# ============================= START OF MY CODE =============================\n\ndef solve():\n    def check(k):\n        res = 0\n        for i in range(n - 1):\n            res += min(k, A[i + 1] - A[i])\n        res += k\n        return res >= h\n\n    n, h = map(int, input().split())\n    A = list(map(int, input().split()))\n    \n    l, r = 1, h\n    while l <= r:\n        mid = l + (r - l) // 2\n        if check(mid):\n            r = mid - 1\n        else:\n            l = mid + 1\n    print(l)\n\n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        solve()",
                true
            ],
            [
                "import math\n\nT = int(input())\nwhile T>0:\n    A = [int(i) for i in input().split()]\n    B = [int(i) for i in input().split()]\n    C = []\n    for i in range(A[0]-1):\n        C.append((B[i+1]-B[i]))\n    C.sort()\n    #print(C)\n    k = -1\n    h = 0\n    i = 0\n    while i < (A[0]-1):\n        #print(i)\n        k=C[i]\n        h+=C[i]\n        if(A[1] <= (h + (A[0]-i-1)*k)):\n            #print(k)\n            break\n        i+=1\n    #print(i)\n    #print()\n    if A[1] > (h + (A[0]-i)*k):\n        k = A[1] - h\n    else:\n        k = math.ceil((A[1] - (h-C[i]))/(A[0]-i))\n    print(k)\n\n    T-=1",
                true
            ],
            [
                "import sys\nfrom math import sqrt,gcd\nfrom collections import deque\nsys.setrecursionlimit(10**8)\nI  =lambda :int(input())\nS  =lambda :input().strip()\nM  =lambda :map(int,input().strip().split())\nL  =lambda :list(map(int,input().strip().split()))\nmod=1000000007\n\n##########################################################\n\ndef valid(m):\n    ans=0\n    for i in range(n-1):\n        ans+=min(m,arr[i])\n        if ans>=h:\n            return True\n    ans+=m\n    if ans>=h:\n        return True\n    return False\n\nfor i in range(I()):\n    n,h=M()\n    li=L()\n    arr=[]\n    for i in range(n-1):\n        arr.append(li[i+1]-li[i])\n    l,r=1,h\n    ans=r\n    while l<=r:\n        m=(l+r)//2\n        if valid(m):\n            ans=min(ans,m)\n            r=m-1\n        else:\n            l=m+1\n    print(ans)",
                true
            ],
            [
                "def add(a,k,n):\n    ans=0\n    for i in range(n-1):\n        ans+=k if a[i+1]-a[i]>=k else a[i+1]-a[i]\n    return ans+k\ndef binary(n,h,a):\n    l=1\n    r=h\n    while l<r:\n        mid=(l+r)//2\n        curr=add(a,mid,n)\n        if curr==h:\n            return mid\n        elif curr<h:\n            l=mid+1\n        else:\n            r=mid\n    return r\nfor _ in range(int(input())):\n    n,h=map(int,input().split())\n    a=list(map(int,input().split()))\n    print(binary(n,h,a))\n            \n",
                true
            ],
            [
                "from bisect import bisect\nfor _ in range(int(input())):\n    n,h=map(int,input().split())\n    arr=list(map(int,input().split()))\n    a=[]\n    for i in range(1,n):\n        a.append(arr[i]-arr[i-1])\n    a.sort()\n    def sol(x):\n        i=bisect(a,x)\n        y=sum(a[:i])\n        y+=(n-i)*x \n        if y>=h:\n            return True \n        return False \n    def bs(l,h):\n        if l==h:\n            return l \n        if h==l+1:\n            if sol(l):\n                return l \n            return h \n        m=(l+h)//2 \n        if sol(m):\n            if sol(m-1)==False:\n                return m \n            else:\n                return bs(l,m-1)\n        else:\n            return bs(m+1,h)\n    print(bs(1,h)) ",
                true
            ],
            [
                "t=int(input())\nwhile t:\n    t -= 1\n    n, h = map(int, input().split())\n    a = [int(x)  for x in input().split()]\n    dif = sorted(a2-a1 for a1,a2 in zip(a, a[1:]))\n    isum=0\n    for k in dif:\n        if k > ((h-isum)//n): break\n        isum += k\n        n -=1\n    print(0-(isum-h)//n)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline \nip = lambda: input().rstrip('\\n')\nIP = lambda: list(map(int, ip().split()))\nIPF = lambda: list(map(float, ip().split()))\n# import collections\n# import bisect\nimport math\n\n\nfor i in range(int(ip())):\n    n, h = IP()\n    a = IP()\n    l = 1\n    r = 10**18\n    while (l <= r):\n        m =(l+r)//2\n        s = m\n        for i in range(n-1):\n            s += min(a[i+1] - a[i], m)\n        if s < h:\n            l = m + 1\n        else:\n            r = m - 1\n    print(l)",
                true
            ],
            [
                "from sys import stdin\nimport math\nfrom collections import deque\nfrom heapq import heapify, heappop, heappush\nfrom bisect import bisect_left, bisect_right\n\ninput = stdin.readline\n\ndef ceil(m, n):\n    val = m // n\n    if(m % n != 0):\n        return val + 1\n    return val\n\nfor _ in range(int(input())):\n    n, h = map(int, input().split())\n    arr = sorted(list(map(int, input().split())))\n    diff, heap = -1, []\n    heapify(heap)\n    for i in range(1, n):\n        heappush(heap, arr[i] - arr[i - 1])\n\n    present, val = n, ceil(h, n)\n    done, prev = False, 0\n    while(present > 1 and heap):\n        val = heappop(heap) - prev\n        if(val * present >= h):\n            print(prev + ceil(h, present)); done = True\n            break\n        h -= val * present\n        prev = val + prev\n        present -= 1\n    if(done):continue\n    print(h + prev)",
                true
            ],
            [
                "import math\ndef dagger(n, h, L):\n    ## n = len(L)\n    ## L = list of differences, increasing\n    if n == 1:\n        return h\n    dmg = int(h/n)\n    if h %n != 0:\n        dmg += 1\n    remain = []\n    for i in range(n):\n        if L[i] > dmg:\n            remain.append(L[i] - dmg)\n            h -= dmg\n        else:\n            h -= L[i]\n    if h <= 0:\n        return dmg\n    return dmg + dagger(len(remain), h, remain)\n\ncases = int(input())\nfor j in range(cases):\n    line = input().split( )\n    n = int(line[0])\n    h = int(line[1])\n    get = input().split( )\n    L = []\n    for i in range(n-1):\n        L.append(int(get[i+1]) - int(get[i]))\n    L.sort()\n    L.append(math.inf)\n    print(dagger(n, h, L))",
                true
            ],
            [
                "import math\nt = int(input())\n\nfor _ in range(t):\n    n, h = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    dists = [0] * len(arr)\n    for i in range(1, n):\n        dists[i-1] = arr[i] - arr[i-1]\n    dists[-1] = h\n    low = math.ceil(h / n)\n    high = h\n    while low <= high:\n        mid = (low + high) // 2\n        damage = 0\n        for i in range(n):\n            damage += min(mid, dists[i])\n        if damage < h:\n            low = mid + 1\n        else:\n            high = mid - 1\n    print(low)\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,h = map(int,input().split())\n    l1 = [ int(i) for i in input().split()]\n    l2 = []\n    for i in range(1,n):\n        l2 += [l1[i]-l1[i-1]]\n    if(n == 1):\n        print(h)\n        continue\n    l = -1\n    r = h+1\n    m = 0\n    sm = sum(l2)\n    mn = min(l2)\n    mx = max(l2)\n    while(r-l>1):\n        m = 0\n        y = (l+r)//2\n        if(y >= mx):\n            m = sm + y\n        elif(y <= mn):\n            m = n*y\n        else:\n            for i in l2:\n                m += min(i,y)\n            m+=y\n        if( m== h):\n            break\n        elif(m < h):\n            l = (l+r)//2\n        else:\n            r = (l+r)//2\n    if(m<h):\n        print(y+1)\n        continue\n    print(y)\n\n   \n",
                true
            ],
            [
                "def cal_damage(arr, k):\n    ans = 0\n    n = len(arr)\n\n    for i in range(0, n - 1):\n        pre = arr[i]\n        nxt = arr[i + 1]\n\n        if pre + k > nxt:\n            ans += nxt - pre\n        else:\n            ans += k\n\n    ans += k\n\n    return ans\n\n\ndef main():\n    n, h = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n\n    # for i in range(10000):\n    #     j = i\n    #     if cal_damage(arr, i) >= h:\n    #         break\n\n    # print(j)\n\n    left, right = 0, h\n    while left < right:\n        mid = (left + right) // 2\n        val = cal_damage(arr, mid)\n        if h == val:\n            break\n        elif val < h:\n            left = mid + 1\n        else:\n            right = mid\n\n    ans1 = mid\n    cal1 = cal_damage(arr, ans1)\n\n    ans2 = mid + 1\n    cal2 = cal_damage(arr, ans2)\n\n    if cal1 >= h:\n        return ans1\n    else:\n        return ans2\n    return mid\n\n\nfor _ in range(int(input())):\n    a = main()\n    print(a)\n",
                true
            ],
            [
                "def bp(array, b):\n    left = 1\n    right = 10 ** 18\n    midlle = 0\n    while left + 1 < right:\n        pp = 0\n        middle = (left + right) // 2\n        for i in array:\n            pp += min(i, middle)\n        pp += middle\n        if pp > b:\n            right = middle\n        else:\n            left = middle\n    return right\n\nt = int(input())\nfor i in range(t):\n    ty = input().split()\n    n = int(ty[0])\n    h = int(ty[1])\n    array = list(map(int, input().split()))\n    n_arr = []\n    for i in range(len(array) - 1):\n        n_arr.append(array[i + 1] - array[i])\n    res = bp(n_arr, h)\n    x = 0\n    res -= 1\n    for i in n_arr:\n        x += min(i, res)\n    x += res\n    if x < h:\n        res += 1\n    print(res)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split()))\n    a=sorted(a)\n    b=[0]*n\n    l=a[0]\n    c=0\n    md=0\n    for i in range(n-1):\n        b[i]=a[i+1]-a[i]\n        md=max(md,b[i])\n        c+=b[i]\n    b[n-1]=float('inf')\n    if m-c>=md:\n        print(m-c)\n    else:\n        r=md\n        f=r\n        l=1\n        while l<=r:\n            mid=(l+r)//2\n           \n            c=0\n            for i in range(n):\n                c+=min(b[i],mid)\n            if c>=m:\n                f=min(f,mid)\n                r=mid-1\n            \n            else:\n                l=mid+1\n        print(f)\n    ",
                true
            ],
            [
                "R=lambda: map(int,input().split())\nt,=R()\nwhile t:\n t-=1;n,h=R();a=*R(),;s=0\n for x in sorted(y-x for x,y in zip(a,a[1:])):\n  if s+x*n>h:break\n  s+=x;n-=1\n print(0-(s-h)//n)",
                true
            ],
            [
                "\ndef solve(n, h, attacks):\n    gaps = [attacks[i]-attacks[i-1] for i in range(1, n)]\n    gaps.sort()\n    mn = h//n + (1 if h%n else 0)\n    rem = h\n    \n    spared = 0\n    for i, gap in enumerate(gaps):\n        if gap >= mn:\n            if mn*(n-i) < rem:\n                mn = min(gap, rem//(n-i) + (1 if rem%(n-i) else 0))\n                rem -= mn\n            else:\n                rem = 0\n                break\n        else:\n            # spared += mn-gap\n            rem -= gap\n    if rem-mn > 0:\n        mn += rem-mn\n    return mn\nif __name__ == '__main__':\n    ans = []\n    for _ in range(int(input())):\n        n, h = map(int, input().split())\n        ans.append(solve(n, h, list(map(int, input().split()))))\n    print(*ans, sep='\\n')",
                true
            ],
            [
                "def totalDamage(diff, k):return k + sum([min(d, k) for d in diff])\nfor _ in range(int(input())):\n    n, h = map(int, input().split());a = [int(x) for x in input().split()];diff = [a[i] - a[i - 1] for i in range(1, n)];start, end = 1, h\n    while start <= end:\n        mid = (start + end) // 2\n        damage = totalDamage(diff, mid)\n        if damage < h:start = mid + 1\n        else:end = mid - 1\n    print(start)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, h = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a = [x - a[0] for x in a]\n\n    ans = 0\n    while h > 0:\n        # print(a, h)\n        if len(a) >= h:\n            ans += 1\n            break\n        part = h // len(a)\n        residue = h % len(a)\n        n_a = [0]\n        for i in range(len(a) - 1):\n            if a[i + 1] - a[i] > part:\n                n_a.append(n_a[-1] + a[i + 1] - a[i] - part)\n            else:\n                residue += part - (a[i + 1] - a[i])\n        ans += part\n        a = n_a\n        h = residue\n\n    print(ans)\n",
                true
            ],
            [
                "sr=lambda: input()\nir=lambda: int(sr())\nlr=lambda: list(map(int, sr().split()))\n\ninf=10**18\n# mod=10**9+7\nmod = 998244353\n\nif __name__=='__main__':\n    test = ir()\n    for t in range(test):\n        n,h = lr()\n        a = lr()\n\n        def judge(k):\n            pre = a[0]\n            dame = k\n            for num in a[1:]:\n                dame += min(k, num-pre)\n                pre = num\n            if h <= dame:\n                return True\n            else:\n                return False\n\n        l = 0\n        r = 10**18\n        mid = (l+r)//2+1\n        while r-l > 1:\n            mid = l+(r-l)//2\n            if judge(mid):\n                r = mid\n            else:\n                l = mid\n        print(r)\n",
                true
            ],
            [
                "def attack(attacks, h):\n    start, end = 1, h\n    while start <= end:\n        mid = (start + end) // 2\n        last, total = None, 0\n        for attack in attacks:\n            if last:\n                total += min(mid, attack - last)\n            last = attack\n        if last:\n            total += mid\n        if total >= h:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start\n\n\nif __name__ == \"__main__\":\n    inp, results = int(input()), []\n    for _ in range(inp):\n        inp1, inp2 = list(map(int, input().split()))\n        inputs = list(map(int, input().split()))\n        results.append(attack(inputs, inp2))\n    print(*results, sep=\"\\n\")\n",
                true
            ],
            [
                "t = int(input())\nfor t1 in range(t):\n    n, h = (int(i) for i in input().split())\n    sts = [int(i) for i in input().split()]\n    if n==1:\n        print(h)\n        continue\n    diffs = [sts[i] - sts[i-1] for i in range(1, len(sts))]\n    diffs.sort()\n    s = 0\n    l = n\n    rem = 0\n    h1 = h - s\n    rem = h1//l\n    f = 0\n    if h1%l != 0:\n        rem += 1\n    if rem <= diffs[0]:\n        print(rem)\n        continue\n    for i in range(n-2):\n        s += diffs[i]\n        l -= 1\n        h1 = h - s\n        rem = h1//l\n        if h1%l != 0:\n            rem += 1\n        if rem<=diffs[i+1]:\n            print(rem)\n            f = 1\n            break\n    if f == 0:\n        s += diffs[-1]\n        rem = h - s\n        print(rem)",
                true
            ],
            [
                "def solve():\n    n, h = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(h)\n        return\n\n    b = list()\n    for i in range(1, n):\n        b.append(a[i] - a[i - 1])\n\n    b.sort()\n\n    cnt = n\n    for i in range(len(b)):\n        check = h // cnt\n\n        if (h % cnt != 0):\n            check += 1\n\n        if b[i] >= check:\n            print(check)\n            return\n        else:\n            h -= b[i]\n            cnt -= 1\n    print(h)\n\nfor _ in range(int(input())):\n    solve()",
                true
            ],
            [
                "def solve(diff, k):\n    ans = k\n    for i in range(len(diff)):\n        ans += min(diff[i], k)\n    return ans\n\n\nfor _ in range(int(input())):\n    n, h = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    diff = []\n    for i in range(len(a)-1):\n        diff.append(a[i+1]-a[i])\n    ans = 0\n    u = 0\n    d = 10**18\n    while u <= d:\n        mid = (u+d)//2\n        temp = solve(diff, mid)\n        if temp >= h:\n            d = mid-1\n        elif temp < h:\n            u = mid+1\n        else:\n            ans = mid\n            break\n    print(u)",
                true
            ],
            [
                "def rsolve(a,k,n):\n    s=0\n    for i in range(n-1):\n        s+=k if a[i+1]-a[i]>=k else a[i+1]-a[i]\n    return s+k\ndef solve():\n    n,h=map(int,input().split())\n    a=list(map(int,input().split()))\n    l=1\n    r=h\n    while l<r:\n        m=(l+r)//2\n        x=rsolve(a,m,n)\n        if x==h:\n            return m\n        elif x<h:\n            l=m+1\n        else:\n            r=m\n    return r\n    \nfor _ in range(int(input())):\n    print(solve())\n",
                true
            ],
            [
                "if __name__ == '__main__':\n    for _ in range(int(input())):\n        n, h = list(map(int, input().split()))\n        values = list(map(int, input().split()))\n\n        lo, hi = 1, h\n\n        while lo <= hi:\n            k = (lo + hi) // 2\n\n            life = h\n            for x in range(len(values)-1):\n                life -= min(k, values[x+1] - values[x])\n                if life <= 0:\n                    break\n            life -= k\n\n            if life <= 0:\n                hi = k - 1\n            else:\n                lo = k + 1\n\n        print(lo)\n",
                true
            ],
            [
                "import sys, math\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\nmod = 10**9 + 7\n#mod = 998244353\ninput = lambda: sys.stdin.readline().rstrip()\nli = lambda: list(map(int, input().split()))\n\nt = int(input())\n\ndef check(x, N, H):\n    for i in range(N-1):\n        H -= min(A[i+1] - A[i], x)\n    H -= x\n    return H <= 0\n\n\nfor _ in range(t):\n    N, H = li()\n    A = li()\n\n    ok = 10 ** 18 + 1\n    ng = -1\n    while ok - ng > 1:\n        mid = (ok + ng) // 2\n        if check(mid, N, H):\n            ok = mid\n        else:\n            ng = mid\n    print(ok)\n",
                true
            ],
            [
                "def check(ans):\n    damage = 0\n    for i in range(n):\n        damage += ans\n        if i > 0 and a[i] - a[i - 1] < ans:\n            damage -= (ans - (a[i] - a[i - 1]))\n    return damage >= h\n\n\nfor _ in range(int(input())):\n    n, h = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = 0\n    r = h\n    while r - l > 1:\n        m = (r + l) // 2\n        if check(m):\n            r = m\n        else:\n            l = m\n    print(r)",
                true
            ],
            [
                "from sys import stdin\nimport math\n\n\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        x = stdin.readline().split()\n        n = int(x[0])\n        h = int(x[1])\n        # print(i,n,h)\n        arr = stdin.readline().split()\n        for j in range(n):\n            arr[j] = int(arr[j])\n        arr.append(int(1e40))\n        if n == 1:\n            print(h)\n            continue\n        l = 0\n        r = int(1e18)+1\n        while r-l>1:\n            dmg = 0\n            mid = (r+l) // 2\n            for j in range(n):\n                tmp = arr[j+1] - arr[j]\n                dmg += min(tmp, mid)\n            if dmg < h:\n                l = mid\n            else:\n                r = mid\n        print(r)\n    return\n\nmain()",
                true
            ],
            [
                "'''Author- Akshit Monga'''\nfrom sys import stdin, stdout\ninput = stdin.readline\n\ndef ceil(a,b):\n    return (a+b-1)//b\n\ndef f():\n    # print(pre,diff)\n    for i in range(n-1):\n        val=pre[i]+(diff[i]*(i+1))\n        # print(val,pre[i])\n        if h>=val:\n            return diff[i]+ceil(h-val,(i+1))\n    return ceil(h,n)\n\nt = int(input())\nfor _ in range(t):\n    n,h=map(int,input().split())\n    a=[int(x) for x in input().split()]\n\n    if n==1:\n        print(h)\n        continue\n\n    diff=[]\n    for i in range(n-1):\n        diff.append(a[i+1]-a[i])\n    diff=sorted(diff)\n    pre=[diff[0]]\n    for i in range(1,n-1):\n        pre.append(pre[-1]+diff[i])\n    diff=diff[::-1]\n    pre=pre[::-1]\n    print(f())",
                true
            ],
            [
                "t = int(input())\n\ndef find(A, key):\n    full = 10**18\n    low = 1\n    high = 0\n    while True:\n        high = (low + full) // 2\n        summ = 0\n        for i in key:\n            summ += min(i, high)\n        summ += high\n        if summ <= A:\n            low = high\n        elif summ > A:\n            full = high\n        if low + 1 >= full:\n            break\n    return full, low\n\n\nfor i in range(t):\n    n, h = map(int, input().split())\n    B = list(map(int, input().split()))\n    Bb = len(B) - 1\n    for j in range(Bb):\n        B[j] = B[j + 1] - B[j]\n\n    del B[-1]\n    full, low = find(h, B)\n    check = 0\n    for e in B:\n        check += min(e, low)\n    check += low\n\n    if check < h:\n        print(full)\n    else:\n        print(low)",
                true
            ],
            [
                "t = int(input())\ndef is_ok(A,h,k):\n    cnt = 0\n    for i in range(len(A)):\n        if i == len(A)-1:\n            cnt += k\n        else:\n            if A[i] + k -1 >= A[i+1]:\n                cnt += A[i+1] - A[i]\n            else:\n                cnt += k\n    if cnt >= h:\n        return True\n    else:\n        return False\n\n\ndef solve(n,h,A):\n    ng = 0\n    ok = 10 ** 18\n    while ok - ng > 1:\n        k = (ng+ok)//2\n        if is_ok(A,h,k):\n            ok = k\n        else:\n            ng = k\n    return ok\n\nans = []\nfor _ in range(t):\n    n,h = map(int,input().split())\n    A = list(map(int,input().split()))\n    ans.append(solve(n,h,A))\nfor a in ans:\n    print(a)",
                true
            ],
            [
                "t = int(input())\nfor aboba in range(t):\n    n, h = map(int, input().split())\n    s = list(map(int, input().split()))\n    for i in range(n - 1):\n        s[i] = s[i + 1] - s[i]\n    s[-1] = 10000000000000000000\n    k = 10 ** 18\n    left = 0\n    right = k\n    while left + 1 < right:\n        k = (left + right) // 2\n        c = 0\n        for el in s:\n            c += min(el, k)\n        if c > h:\n            right= k\n        else:\n            left = k\n    c = 0\n    for el in s:\n        c += min(el, left)\n    if c < h:\n        print(right)\n    else:\n        print(left)",
                true
            ],
            [
                "\ndef okie(X,h,k):\n    p = len(X)\n    cnt = 0 \n    for i in range(p-1):\n        if X[i]+(k-1)<X[i+1]:\n            cnt+= k \n        else:\n            cnt += X[i+1] - X[i] \n    cnt += k \n    if cnt >=h:\n        return True \n    else:\n        return False\n        \nt = int(input())\nfor i in range(t):\n    n,h = map(int,input().split())\n    X = list(map(int,input().split()))\n    lo = 1 \n    hi = h \n    while (lo<hi):\n        mid = (lo + hi)//2 \n        if okie(X,h,mid):\n            hi = mid \n        else:\n            lo = mid + 1 \n    print(lo)\n    \n    \n\n    \n    \n        \n        ",
                true
            ],
            [
                "import math\ninf = math.inf\nqu = []\nfor _ in range(int(input())):\n    x , h = list(map(int,input().split()))\n    arr = list(map(int,input().split()))\n    l, r = 0, (10 ** 18) + 5\n    best = inf\n    ans = inf\n    def is_valid(k):\n        damage = 0\n        for i in range(0, len(arr) - 1):\n            damage += min(k, arr[i + 1] - arr[i])\n        damage += k\n        if damage >= h:\n            return True\n        else:\n            return False\n\n    while l <= r:\n        mid = l + ((r - l) // 2)\n        if is_valid(mid):\n            ans = min(ans , mid)\n            r = mid - 1\n        else:\n            l = mid + 1\n    print(ans)\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t=int(input())\nwhile t:\n    t -= 1\n    n, h = map(int, input().split())\n    a = [int(x)  for x in input().split()]\n    dif = sorted(a2-a1 for a1,a2 in zip(a, a[1:]))\n    # print(dif)\n    isum=0\n    for k in dif:\n        if k > ((h-isum)//n): break\n        isum += k\n        n -=1\n    print(0-(isum-h)//n)",
                true
            ],
            [
                "t = int(input())\nfor j in range(t):\n    s = input().split()\n    n = int(s[0])\n    h = int(s[1])\n    s = input().split()\n    a = []\n    count = n\n    for i in range(1,n):\n        a.append(int(s[i])-int(s[i-1]))\n    a.append(h)\n    if h%n == 0:\n        k = h//n\n    else:\n        k = h//n+1\n    a.sort()\n    for i in range(n):\n        if a[i]>=k:\n            print(k)\n            break\n        else:\n            h = h - a[i]\n            count -= 1\n            if h%count == 0:\n                k = h//count\n            else:\n                k = h//count+1\n    ",
                true
            ],
            [
                "for _ in ' ' * int(input()):\n  n, h = map(int, input().split())\n  a = [int(x) for x in input().split()]\n  b = [a[i + 1] - a[i] for i in range(n - 1)]\n\n  def test(k):\n    return sum(min(k, b[i]) for i in range(n-1)) + k >= h\n\n  def search(min_, max_): # (min_; max_]\n    while max_ - min_ > 1:\n      v = (min_ + max_) // 2\n      if test(v):\n        max_ = v\n      else:\n        min_ = v\n    return max_\n\n  print(search(0, h))",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n\ndef check(ans):\n    damage = 0\n    for i in range(n - 1):\n        damage += min(arr[i + 1] - arr[i], ans)\n    damage += ans\n\n    return damage >= h\n\n\nfor _ in range(int(input())):\n    n, h = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    low, high = 1, 10**18\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if check(mid):\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    print(low)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,h=map(int,input().split())\n    a=list(map(int,input().split()))\n    l ,r =0, h\n    while r - l > 1:\n        m = (l + r) // 2\n        cv = 0\n        ct = a[0]\n        for x in a:\n            cv += min(x - ct, m)\n            ct = x\n        cv += m\n        if cv < h:\n            l = m\n        else:\n            r = m\n    print(r)\n",
                true
            ],
            [
                "from math import *\n \n#from math import factorial as fact, comb as ncr \nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\n \nfrom array import array\nfrom re import search\n \nli=lambda : list(map(int,input().split()))\narr=lambda a: array('i',a)\nbi=lambda n: bin(n).replace(\"0b\", \"\")\nyn=lambda f: print('NYOE S'[f::2])\nsbstr=lambda a,s: search('.*'.join(a),s)\n'''\ndef isprime(a):\n    if a==2: return True\n    elif a%2==0: return False\n    n=3\n    while n<=a**0.5:\n        if a%n==0:\n            return False\n        n+=2\n    return True\n\ndef nf(n,a):\n    b=a*a\n    c=b*a\n    d=c*a\n    e=n\n    ct=0\n    while e%a==0:\n        if e%d==0:\n            ct+=4\n            e=e//d\n        if e%c==0:\n            ct+=3\n            e=e//c\n        if e%b==0:\n            ct+=2\n            e=e//b\n        if e%a==0:\n            ct+=1\n            e=e//a\n    return ct\n'''\n\ndef solve():\n    for _ in range(int(input())):\n        n,h=li()\n        a=li()\n        b=[a[i+1]-a[i] for i in range(n-1)]\n        b.sort()\n        k=0\n        for i in range(n-1):\n            if b[i]*(n-i)>=h:\n                k=ceil(h/(n-i))\n                break\n            else:\n                h-=b[i]\n        print(k if k!=0 else h)\n\nsolve()",
                true
            ],
            [
                "from math import e\n\n\ndef solve():\n    #fn = min\n    n, h = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if n>h:\n        print(\"1\")\n    else:\n        start = 1\n        end = h\n        mid = 0\n        List = {}\n        for i in range(n-1):\n            List[i] = (arr[i+1]-arr[i])\n        while start<=end:\n            mid = (start+end)//2\n            summ = mid\n            for i in range(n-1):\n                if mid>List.get(i):\n                    summ += List.get(i)\n                else:\n                    summ += mid\n            if summ<h:\n                start = mid + 1\n            else:\n                end = mid - 1\n        print(end+1)\n \n \ncases =int(input())\nfor i in range(cases):\n    solve()",
                true
            ],
            [
                "t = int(input())\n#import collections\n\n\nfor caseNr in range(1, t + 1):\n    #n = int(input())\n    n, h = list(map(int, input().split()))\n    #n2, p2 = list(map(str, input().split()))\n    \n    arr = list(map(int, input().split()))\n    #n, l, r, k = list(map(int, input().split()))\n    #arr = list(map(int, input().split()))\n    #num = int(input())\n    #arr = list(input())\n    #print(arr)\n    #string = str(input())\n    #print(arr)\n    #print(arr[0:2])\n    \n    def apply_attack(mid,h):\n        total = 0\n        cur_end = -1\n        for i,a in enumerate(arr):\n            if a+mid-1 <= cur_end:\n                continue\n            else: # i+mid-1 > cur_end:\n                total += min(a+mid-cur_end-1, mid)\n                cur_end = a+mid-1\n        return total >= h\n    \n    left = 0\n    right = 10**18\n    \n    while left < right:\n        mid = (left+right)//2\n        if apply_attack(mid,h):\n            right = mid\n        else:\n            left = mid + 1\n    \n    print(left)",
                true
            ],
            [
                "import math\n\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        n, h = [int(i) for i in input().split(\" \")]\n        a = [int(i) for i in input().split(\" \")] + [10 ** 20]\n        b = []\n        for i in range(1, len(a)):\n            b.append(a[i] - a[i - 1])\n        b.sort()\n        length = len(b)\n        counter = 0\n        prev_val = 0\n        for i in range(len(b)):\n            another_counter = (length - i) * (b[i] - prev_val)\n            if counter + another_counter < h:\n                  counter += another_counter\n            elif counter + another_counter == h:\n                  k = b[i]\n                  break\n            else:\n                  another_counter = h - counter\n                  k = prev_val + int(bool(another_counter % (length - i))) + another_counter // (length - i)\n                  break\n            prev_val = b[i]\n        print(k)\n\n\n\n\n\n\nmain_function()",
                true
            ],
            [
                "def op():\n    n, h = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    ans = (h//n)-1\n    run = True\n    m = n\n    H = h\n    while run:\n        m = n\n        ans+=1\n        b = [a[n-1]]\n        for i in range(n-2, -1, -1):\n            if a[i]+ans>=a[i+1]:\n                h-=a[i+1]-a[i]\n                m-=1\n            else:\n                b.append(a[i])\n        ans = max(ans, h//m-1)\n        if (h-m*ans)<=0:\n            run = False\n        h = H\n    print(ans)\nfor i in range(int(input())):\n    op()",
                true
            ],
            [
                "R=lambda: map(int,input().split())\nt,=R()\nwhile t:\n t-=1;n,h=R();a=*R(),;i=len(a);s=0\n for x in sorted(y-x for x,y in zip(a,a[1:])):\n  if s+x*i>h:break\n  s+=x;i-=1\n print(0-(s-h)//i)",
                true
            ],
            [
                "import math\n\nt = int(input())\n\ndef solution(n, l, h, arr, life):\n    global ans\n    if (l > h): return \n    sum = 0\n    expected_answer = (l+(h-l)//2)\n    for i in range(n-1):\n        x = arr[i+1] - arr[i]\n        if x <= expected_answer:\n            sum += x\n        else:\n            sum += expected_answer\n\n    sum = sum + expected_answer\n\n    if sum >= life:\n        ans = expected_answer\n        solution(n, l, expected_answer - 1, arr, life)\n    else:\n        solution(n, expected_answer + 1, h, arr, life)\n\n\nfor i in range(t):\n    n,h = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    if n == 1:\n        print(h)\n        continue\n\n    l = math.ceil(h/n)\n    life = h\n\n    solution(n, l, h, arr, life)\n\n    print(ans)    \n\n\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n,h=map(int,input().split())\n    m=list(map(int,input().split()))\n    ma=[]\n    pr=m[0]\n    for i in m[1:]:\n        ma.append(i-pr)\n        pr=i\n    ma.append(10**18)\n    l=0\n    r=h\n    ans=(l+r)//2\n    while r-l>1:\n        ans=(l+r)//2\n        s=0\n        for i in ma:\n            s+=min(ans,i)\n        if s<h:\n            l=ans\n        else:\n            r=ans\n    print(r)\n        \n    \n    \n",
                true
            ],
            [
                "import sys\nimport os.path\nfrom collections import *\nimport math\nimport bisect\nimport heapq as hq\nfrom fractions import Fraction\nfrom random import randint\n\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\ninput = sys.stdin.readline\n\n##########################################################\n\ndef solve():\n    n,h = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    arr.append(10 ** 19)\n    l = 1\n    r = 10 ** 18 + 5\n    k = -1\n\n    while l <= r:\n        mid = (l + r) // 2\n        x = 0\n        for i in range(n):\n            x += min(mid, arr[i + 1] - arr[i])\n        if x >= h:\n            r = mid - 1\n            k = mid\n        else:\n            l = mid + 1\n    \n    print(k)\n\nt = int(input())\nwhile t:\n    t -= 1\n    solve()\n\n##########################################################\n",
                true
            ],
            [
                "import decimal\nimport math\nt=int(input())\nfor i in range(t):\n    (n,h)=map(int, input().split(' '))\n    a=list(map(int, input().split(' ')))\n    diff=[]\n    for delta in range(n-1):\n        diff.append(a[delta+1]-a[delta])\n    diff.sort()\n    k=0\n    l=n-1\n    while l!=0:\n        if (l+1)*diff[0]<h:\n            h-=((l+1)*diff[0])\n            k+=(diff[0])\n            l-=1\n            for m in range(1,l+1):\n                diff[m]-=diff[0]\n            del diff[0]\n        else:\n            break\n    k+=math.ceil(decimal.Decimal(h)/decimal.Decimal(l+1))\n    print(k)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\ndef check(x,v):\n    cnt = 0\n    prev = 0\n    for i in range(len(l)):\n        if i == 0:\n            prev = l[i]\n\n        else:\n            if (l[i]-prev) >= x:\n                cnt += x\n\n            else:\n                cnt += (l[i]-prev)\n\n        prev = l[i]\n\n    cnt += x\n    if cnt >= v:\n        return 1\n\n    return 0\n\nfor _ in range(int(input())):\n    n,h = map(int,input().split())\n    l = list(map(int,input().split()))\n    low = 0\n    high = 10**18\n    ans = 0\n    while low <= high:\n        mid = low+((high-low)//2)\n        if check(mid,h):\n            ans = mid\n            high = mid-1\n\n        else:\n            low = mid+1\n\n    sys.stdout.write(str(ans)+\"\\n\")\n",
                true
            ],
            [
                "import sys\nimport math\nfrom collections import deque,Counter\nfrom sys import stdin\n\n#sys.setrecursionlimit(10**7)\n\nint1=lambda x: int(x)-1\nstinput=lambda :stdin.readline()[:-1]\nii=lambda :int(stinput())\nmi=lambda :map(int, stdin.readline().split())\nli=lambda :list(mi())\nmi1=lambda :map(int1, stdin.readline().split())\nli1=lambda :list(mi1())\nmis=lambda :map(str, stdin.readline().split())\n\npr=print\nrg=range\n\nfrom collections import defaultdict\nd=defaultdict(int)\n\n\n\nmod=10**9+7\nMod=998244353\nINF=10**18\nans=0\n\n#\u4e8c\u5206\u63a2\u7d22\ndef is_ok(arg):\n  tmp=a[0]\n  cnt=0\n  for i in range(n):\n    cnt+=min(a[i]-tmp,arg)\n    tmp=a[i]\n  cnt+=arg\n  if cnt>=h:\n    return True\n  else:\n    return False\n  \n\n\ndef bisect(ng, ok):\n    while (abs(ok - ng) > 1):\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\n\nt=ii()\nfor _ in range(t):\n  n,h=mi()\n  a=li()\n  print(bisect(0,h+1))\n  ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,h=map(int,input().split())\n    a=list(map(int,input().split()))\n\n    l=1\n    r=10**18\n\n    while l<=r:\n        m=(l+r)//2\n        s=m\n        for i in range(n-1):\n            s+=min(m,a[i+1]-a[i])\n            \n\n        if s<h:\n            l=m+1\n\n        else:\n            r=m-1\n\n    print(r+1)\n\n    \n\n\n\n\n\n\n\n\n    \n        \n\n\n\n    \n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        \n    \n\n            \n\n\n\n\n        \n\n\n\n\n\n        \n    \n\n    \n    \n        \n        \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "from ctypes import c_longlong as ll\n\n\ndef can_beat(value_k: int, numbers: list, hp: int) -> bool:\n    damage = value_k\n    for i in range(0, len(numbers) - 1):\n        damage += min(numbers[i] + value_k, numbers[i + 1]) - numbers[i]\n    if damage >= hp:\n        return True\n    return False\n\n\ndef solve_test():\n    n, hp = list(map(int, input().split(\" \")))\n    numbers = list(map(int, input().split(\" \")))\n    left = 0\n    right = int(1e18)\n    while left <= right:\n        middle = (left + right) // 2\n        if can_beat(middle, numbers, hp):\n            right = middle - 1\n        else:\n            left = middle + 1\n    answer = right + 1\n    return answer\n\ndef solve():\n    tests = int(input())\n    for _ in range(tests):\n        print(solve_test())\n\n\nif __name__ == '__main__':\n    solve()\n\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ndef iinput(): return int(input())\ndef sinput(): return input().rstrip()\ndef i0input(): return int(input()) - 1\ndef linput(): return list(input().split())\ndef liinput(): return list(map(int, input().split()))\ndef miinput(): return map(int, input().split())\ndef li0input(): return list(map(lambda x: int(x) - 1, input().split()))\ndef mi0input(): return map(lambda x: int(x) - 1, input().split())\nINF = 10**20\nMOD = 1000000007\n\nt = iinput()\nfor _ in [0] * t:\n    n, h = liinput()\n    A = liinput()\n    ok = h\n    ng = 0\n    while ng + 1 < ok:\n        check = (ok + ng) // 2\n        tmp = 0\n        for i in range(n - 1):\n            tmp += min(check, A[i + 1] - A[i])\n        tmp += check\n        if tmp >= h:\n            ok = check\n        else:\n            ng = check\n    print(ok)",
                true
            ],
            [
                "def pos(a,x,n):\n    sum=0\n    for i in range(len(a)):\n        if i!=len(a)-1:\n            sum+=min(a[i+1]-a[i],x)\n        else:\n            sum+=x\n    return sum>=n\nfor _ in range(int(input())):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split()))\n    lo=0\n    hi=10**18\n    while lo<hi:\n        mid=(lo+hi)//2\n        if pos(a,mid,m):\n            hi=mid\n        else:\n            lo=mid+1\n    print(lo)",
                true
            ],
            [
                "t = int(input())\n\ndef score(n, a, k):\n    ans = k\n    for i in range(n - 1):\n        ans += min(a[i + 1] - a[i], k)\n    return ans\n\nfor _ in range(t):\n    n, h = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    flag = False\n    left = 0\n    right = 10 ** 18 + 1\n    while left + 1 < right:\n        mid = (left + right) // 2\n        if score(n, a, mid) > h:\n            right = mid\n        elif score(n, a, mid) < h:\n            left = mid\n        else:\n            flag = True\n            break\n\n    if flag:\n        print((left + right) // 2)\n    else:\n        print(right)",
                true
            ],
            [
                "\"\"\" Problem link - https://codeforces.com/problemset/problem/1613/C \"\"\"\n\ndef attack_value(fs,k):\n    attack = 0\n    for i in range(len(fs)-1):\n        if k + fs[i] <= fs[i+1]:\n            attack = attack + k\n        else:\n            attack = attack + (fs[i+1] - fs[i])\n    return attack + k\ndef k_value(n,h,fs):\n    final_mid = h + 1\n    start = 1\n    end = h\n    while(start<=end):\n        mid = ( start + end )//2\n        attack = attack_value(fs,mid)\n        if attack < h:\n            #final_attack = min(final_attack,attack)\n            start = mid + 1 \n        else:\n            final_mid = min(final_mid,mid)\n            end = mid - 1\n    return final_mid\n\n            \n\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(t):\n        n,h = input().split()\n        n,h = int(n),int(h)\n        fs = [int(x) for x in input().split()]\n        final_mid = k_value(n,h,fs)\n        print(final_mid)",
                true
            ],
            [
                "\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\nlogging.basicConfig(format=\"%(message)s\", level=logging.WARNING,)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\n# 30 MINUTES ATLEAST !!!!\n\n###################################################################################################################\n\n\ndef OK(k, A, h):\n    a = A[:]\n    acc = 0\n    ans = len(A) * k\n    n = len(A)\n    for i in range(n):\n        x = a[i] + (k - 1)\n        if i + 1 < n and x >= a[i + 1]:\n            acc += (x - a[i + 1]) + 1\n\n        if ((i + 1) * k) - acc >= h:\n            return True\n\n    ans -= acc\n    return True if ans >= h else False\n\n\nfor i in range(int(input())):\n    n, h = map(int, input().split())\n    a = list(map(int, input().split()))\n    lo, hi = 0, 10**18\n    ans = -1\n    while lo <= hi:\n        m = (lo + hi) >> 1\n        if OK(m, a, h):\n            hi = m - 1\n            ans = m\n        else:\n            lo = m + 1\n\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,h=map(int,input().split())\n    a=[*map(int,input().split())]\n    def s(k):\n        s=k\n        for i in range(n-1):\n            s+=min(k,a[i+1]-a[i])\n        return s\n    d=0\n    f=h\n    while f>d:\n        m=(f+d)//2\n        if s(m)>=h:\n            f=m\n        else:\n            d=m+1\n    print(d)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,h = map(int,input().split())\n    a = list(map(int,input().split()))\n    dif = []\n    for i in range(1,n):\n        dif.append(a[i]-a[i-1])\n    dif.sort()\n    k = h//n\n    left = h%n\n    ans = k\n    for i in range(n-1):\n        if dif[i]<k:\n            left+=k-dif[i]\n            dif[i] = 0\n        else:\n            dif[i] -= k\n            x = left//(n-i)\n            if x<=dif[i]:\n                dif[i]-=x\n                if dif[i]>0 and left%(n-i)>0:\n                    dif[i]-=1\n                    left-=(x+1)\n                    ans = max(ans,k+x+1)\n                else:\n                    left-=x\n                    ans = max(ans,k+x)\n            else:\n                left-=dif[i]\n                ans = max(ans,k+dif[i])\n                dif[i] = 0\n    print(max(ans,left+k))",
                true
            ],
            [
                "\n\ndef f(l,x,n):\n    tt=0\n    for i in range(1,n):\n        if(l[i-1]+x >=l[i]):\n            tt+=l[i]-l[i-1]\n        else:\n            tt+=x\n    tt+=x\n    return tt>=h\n\nfor i in range(int(input())):\n    n,h=map(int,input().split())\n    l=list(map(int,input().split()))\n    # print(n,h,l)\n    a=0\n    b=10**18\n    while(a+1<b):\n        mid=b-(b-a)//2;\n        if(f(l,mid,n)):\n            b=mid\n        else:\n            a=mid\n    print(b)",
                true
            ],
            [
                "# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef ret():\n    n, h = [int(x) for x in input().split()]\n    lst = [int(x) for x in input().split()]\n    dicto = {}\n    for i in range(1, n):\n        dicto[lst[i] - lst[i-1]]=0\n    for i in range(1, n):\n        dicto[lst[i] - lst[i-1]]+=1\n    num = 0\n    dicto[10**18+100] = 1\n    keys = dicto.keys()\n    keys = sorted(keys)\n    for key in keys:\n        if(key*(n-num)>=h):\n            if(h%(n-num)==0):\n                print(h//(n-num))\n                return\n            print(h//(n-num)+1)\n            return\n        else:\n            h-=key*dicto[key]\n            num+=dicto[key]\n    print(dicto)\n\nt = int(input())\nfor _ in range(t):\n    ret()",
                true
            ],
            [
                "for i in range(int(input())):\n    n,h=map(int,input().split())\n    a=[*map(int,input().split())]+[int(1e40)]\n    l=0\n    r=int(1e18)+1\n    while r-l>1:\n        mid=(r+l)//2\n        k=0\n        for i in range(n):\n            k+=min(mid,a[i+1]-a[i])\n        if k<h:\n            l=mid\n        else:\n            r=mid\n    print(r)\n",
                true
            ],
            [
                "\n\nfor _ in range(int(input())):\n    n,h=[*map(int,input().split())]\n    a=[*map(int,input().split())]\n    k=0\n    def somme(k):\n        s=k\n        for i in range(0,n-1):\n            s+= min((a[i+1]-a[i]),k)\n        return s\n    def binary(x,y):\n        if x==y:\n            return x\n        elif somme((x+y)//2)<h:\n            return binary(((x+y)//2)+1,y)\n        else:\n            return binary(x,((x + y) // 2))\n\n\n    print(binary(k,h))",
                true
            ],
            [
                "def totalDamage(diff, k):\n    damage = k\n\n    for d in diff:\n        damage += min(d, k)\n\n    return damage\n\n\ntest = int(input())\n\nfor _ in range(test):\n    n, h = map(int, input().split())\n\n    a = [int(x) for x in input().split()]\n    diff = []\n    for i in range(1, n):\n        diff.append(a[i]-a[i-1])\n\n    start, end = 1, h\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        damage = totalDamage(diff, mid)\n        if damage < h:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    print(start)\n",
                true
            ],
            [
                "#Mamma don't raises quitter.................................................\n#manan is improving, keep hustling manan bhai ;)\nfrom collections import deque as de\nimport math\nimport sys\nfrom math import sqrt as sq\nfrom math import floor as fl\nfrom math import ceil as ce\nfrom sys import stdin, stdout\nimport time\n\nsys.setrecursionlimit(10**7)\nfrom collections import Counter as cnt\nfrom functools import  reduce\n\nfrom itertools import groupby as gb\n#from fractions import Fraction as fr\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom typing import Coroutine\n\ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    \nclass My_stack():\n    def __init__(self):\n        self.data = []\n    def my_push(self, x):\n        return (self.data.append(x))\n    def my_pop(self):\n        return (self.data.pop())\n    def __iter__(self):\n        return iter(self.data)\n    def my_peak(self):\n        return (self.data[-1])\n    def my_contains(self, x):\n        return (self.data.count(x))\n    def my_show_all(self):\n        return (self.data)\n    def isEmpty(self):\n      return len(self.data)==0\n    def len(self):\n        return len(self.data)\n    \n\narrStack = My_stack() \n\nclass graph():\n    def __init__(self):\n        self.graphdict = {}\n    def add_edge(self, node, neighbor):\n        if node not in self.graphdict:\n            self.graphdict[node]=[neighbor]\n        else:\n            self.graphdict[node].append(neighbor)\n    def show_edge(self):\n        for node in self.graphdict:\n            for neighbors in self.graphdict:\n                print(node, neighbors)\n    def show_graph(self):\n        return self.graphdict\n\n    \n\n\n    \n            \n\n#decimal to binary   \ndef decimalToBinary(n): \n    return bin(n).replace(\"0b\", \"\")\n#binary to decimal\ndef binarytodecimal(n):\n    return int(n,2)\n\ndef isPrime(n) : \n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\ndef get_prime_factors(number):\n    prime_factors = []\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number = number / 2\n    for i in range(3, int(math.sqrt(number)) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(int(i))\n            number = number / i\n\n    if number > 2:\n        prime_factors.append(int(number))\n    return prime_factors\n\ndef get_frequency(list):\n    dic={}\n    for ele in list:\n        if ele in dic:\n            dic[ele] += 1\n        else:\n            dic[ele] = 1\n    return dic\n\ndef Log2(x): \n    return (math.log10(x) / \n            math.log10(2)); \n\n \n# Function to get product of digits\ndef getProduct(n):\n    product = 1\n    while (n != 0):\n        product = product * (n % 10)\n        n = n // 10\n    return product\n#fucntion to find regular bracket sequence\ndef regularBracketsequence(str,arrStack):\n    for i in range(len(str)):\n        if str[i] =='(':\n            arrStack.my_push(str[i])\n        else:\n            if arrStack.isEmpty():\n                return False\n            else:\n                arrStack.my_pop()\n    if arrStack.isEmpty():\n        return True\n    else:\n        return False\n\n#function to find LCM of two numbers\ndef lcm(x,y):\n   lcm = (x*y)//math.gcd(x,y)\n   return lcm\n\ndef isPowerOfTwo(n): \n    return (math.ceil(Log2(n)) == math.floor(Log2(n))); \n#to check whether the given sorted sequnce is forming an AP or not....\ndef checkisap(list):\n    d=list[1]-list[0]\n    for i in range(2,len(list)):\n        temp=list[i]-list[i-1]\n        if temp !=d:\n            return False\n    return True\n\n#seive of erathanos\ndef primes_method5(n):\n    out ={}\n    sieve = [True] * (n+1)\n    for p in range(2, n+1):\n        if (sieve[p]):\n            out[p]=1\n            for i in range(p, n+1, p):\n                sieve[i] = False\n    return out\n#fucntion to get unique number to a cell in a matrix\ndef id(i, j, col): #one based indexing and columnwise numeration\n    ans= (i-1)*col\n    ans+=j\n    return ans\n\n#function to get the sum of digits\ndef getSum(n): \n      \n    strr = str(n)\n    list_of_number = list(map(int, strr.strip()))\n    return sum(list_of_number)\ndef checkperfectsquare(n):\n    if (ce(sq(n)) == fl(sq(n))):\n        return True\n    else:\n        return False\n#this used for selecting r objects from n ojects\ndef combinatrics(n,r):\n    num=n\n    deno=n-r\n    pr=1\n    for i in range(num,deno,-1):\n        pr*=i\n    an=1\n    for i in range(1,r+1):\n        an*=i\n    ans=pr//an\n    return ans\n#ceil  function gives wrong answer after 10^17 so i have to create my own :)\n# because i don't want to doubt on my solution of 900-1000 problem set.\ndef ceildiv(x,y): \n    return (x+y-1)//y \n  \ndef di():return map(int, input().split())\ndef ii():return int(input())\ndef li():return list(map(int, input().split()))\ndef si():return list(map(str, input()))\ndef indict():\n    dic = {}\n    for index, value in enumerate(input().split()):\n        dic[int(value)] = int(index)\n    return dic\ndef frqdict(): \n    # by default it is for integer input. :)\n    dic={}\n    for index, value in enumerate(input()):\n        if value not in dic:\n            dic[value] =1\n        else:\n            dic[value] +=1\n    return dic\n\n#sys.stdin = open('input.txt', 'r')\n#sys.stdout = open('output.txt', 'w')\n#practice like your never won\n#perform like you never lost\nt=ii()\nwhile t:\n    t-=1\n    n,h=di()\n    a=li()\n    if n==1:\n        print(h)\n    elif n==2:\n        diff=a[1]-a[0]\n        if 2*diff==h:\n            print(diff)\n        elif 2*diff> h:\n            print(ceildiv(h,2))\n        else:\n            print(h-diff)\n    else:\n        temp=[]\n        for i in range(1, n):\n            temp.append(a[i]-a[i-1])\n        temp.sort()\n        #print(temp)\n        s=0\n        for i in range(len(temp)):\n            s+=temp[i]\n            tempsum=s+(temp[i]*(n-i-1))\n            if tempsum >=h:\n                #print(temp[i])\n                break\n        if tempsum >=h:\n            s-=temp[i]\n            ans=ceildiv(h-s,n-i)\n            print(ans)\n        else:\n            print(h-s)\n        \n\n    ",
                true
            ],
            [
                "def check(k):\n  s = 0\n  for x, y in zip(a, a[1:]):\n    if y - x <= k:\n      s += y - x\n    else:\n      s += k\n  s += k\n\n  return s >= h\n\nfor i in range(int(input())):\n  n, h = map(int, input().split())\n  a = list(map(int, input().split()))\n  lo, hi = 0, 10 ** 18 + 1\n  while hi - lo > 1:\n    mid = (hi + lo) // 2\n    if check(mid):\n      hi = mid\n    else:\n      lo = mid\n  print(hi)",
                true
            ],
            [
                "# import collections\n# import random\n# import math\n# import itertools\n# import math\n# mport math\n# import bisect\nfrom collections import defaultdict\n# import itertools\n# from sys import stdin, stdout\n# import math\n# import math\n# import bisect\n# import bisect\n# import collections\n# import itertools\n# import math\nimport sys\n\n# import operator\n# from decimal import Decimal\n\n# sys.setrecursionlimit(10**6)\n\nclass DisjointSet:\n    parent = {}\n    cp = {}\n    # stores the depth of trees\n    rank = {}\n    m = 0\n\n    # perform MakeSet operation\n    def makeSet(self, universe):\n        # create `n` disjoint sets (one for each item)\n        for i in universe:\n            self.parent[i] = i\n            self.cp[i] = 1\n            self.rank[i] = 0\n\n    # Find the root of the set in which element `k` belongs\n    def Find(self, k):\n        # if `k` is not the root\n        if self.parent[k] != k:\n            # path compression\n            self.parent[k] = self.Find(self.parent[k])\n        return self.parent[k]\n\n    # Perform Union of two subsets\n    def Union(self, a, b):\n        # find the root of the sets in which elements `x` and `y` belongs\n        x = self.Find(a)\n        y = self.Find(b)\n\n        # if `x` and `y` are present in the same set\n        if x == y:\n\n            return\n\n        # Always attach a smaller depth tree under the root of the deeper tree.\n        if self.rank[x] > self.rank[y]:\n            self.parent[y] = x\n            self.cp[x] += self.cp[y]\n            self.cp[y] = 0\n            self.m = max(self.m, self.cp[x])\n        elif self.rank[x] < self.rank[y]:\n            self.parent[x] = y\n            self.cp[y] += self.cp[x]\n            self.cp[x] = 0\n            self.m = max(self.m, self.cp[y])\n        else:\n            self.parent[x] = y\n            self.rank[y] = self.rank[y] + 1\n            self.cp[y] += self.cp[x]\n            self.cp[x] = 0\n            self.m = max(self.m, self.cp[y])\n\n\ndef printSets(universe, ds):\n    print([ds.Find(i) for i in universe])\n\n\np2D = lambda x: print(*x, sep=\"\\n\")\n\n\ndef II(): return int(sys.stdin.buffer.readline())\n\n\ndef MI(): return map(int, sys.stdin.buffer.readline().split())\n\n\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\n\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\n\ndef BI(): return sys.stdin.buffer.readline().rstrip()\n\n\ndef SI(): return sys.stdin.buffer.readline().rstrip().decode()\n\n\ndef li(): return [int(i) for i in input().split()]\n\n\ndef lli(rows): return [li() for _ in range(rows)]\n\n\ndef si(): return input()\n\n\ndef ii(): return int(input())\n\n\ndef ins(): return input().split()\n\n\n# mod = 10**9+7\n# fval = [1]\n# for i in range(1,200001):\n#     x = (fval[-1]*i)%mod\n#     fval.append(x)\n#\n# ifac = [1]*(200001)\n# ifac[200000] = pow(fval[200000], -1, mod)\n# for i in range(200000-1, 1, -1): ifac[i] = ifac[i+1]*(i+1)%mod\n\n\ndef drank(d, processing, da, rank):\n    tmp = 10 ** 9\n    if len(d[da]) == 1:\n        return 1\n    for di in d[da]:\n        if processing[di - 1] == 0:\n            processing[di - 1] = 1\n            tmp = min(tmp, drank(d, processing, di, rank))\n            processing[di - 1] = 0\n    rank[da - 1] = tmp + 1\n    return tmp + 1\n\n\n\ndef binary_search(n, a):\n    l = len(a)\n    low = 0\n    high = l-1\n    while high>=low:\n        mid = (high+low)//2\n        if a[mid] == n:\n            return mid\n        elif a[mid]>n:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\n\nis_prime = [True]*(10**6+1)\ndef primeseive(n):\n    is_prime[0] = is_prime[1] = False\n    i = 2\n    while i*i<=n:\n        if is_prime[i] == True:\n            for j in range(i*i,n+1,i):\n                is_prime[j] = False\n        i+=1\n\ndef satis(a, m):\n    i = 0\n    l = len(a)\n    j = 1\n    ans = 0\n    while i<l:\n        k = 0\n        while j<l and a[j]< a[i]+m:\n            j+=1\n            k+=1\n        if k==0:\n            ans += m\n            i+=1\n            j+=1\n        else:\n            ans += (a[i+k]- a[i])\n            i = i+k\n            j = i+1\n    return ans\n\ndef solve():\n    n , h = li()\n    a = li()\n    if n == 1:\n        return h\n    if h<=n:\n        return 1\n    else:\n        low = 1\n        high = h\n        m = 10**18\n\n        while high>=low:\n            mid = (low+high)//2\n            x = satis(a,mid)\n            if x>h:\n                high = mid-1\n                if x<m:\n                    m = x\n                    prev = mid\n            elif x<h:\n                low = mid+1\n            else:\n                return mid\n        return prev\n\n\n\n\n\n\ndef main():\n    #primeseive(10**6)\n    #print(is_prime)\n    for _ in range(ii()):\n    #solve()\n        sys.stdout.write(str(solve()) + \"\\n\")\n    # print(solve())\n\n    #     z += str(ans) + '\\n'\n    # print(len(ans), ' '.join(map(str, ans)), sep='\\n')\n    # stdout.write(z)\n\n\n# for interactive problems\n# print(\"? {} {}\".format(l,m), flush=True)\n# or print this after each print statement\n# sys.stdout.flush()\n\n\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "def check(arr,k,tar):\n  n = len(arr)\n  start = arr[0]\n  ans =0\n  for i in range(1,n):\n    if arr[i]-start>=k:\n      ans+=k\n    else:\n      ans+=arr[i]-start\n    start = arr[i]\n  ans+=k\n  if ans>=tar:\n    return True\n  return False\n\n\n\nT = int(input())\nfor case in range(T):\n    N,h = map(int,input().split())\n    a = list(map(int,input().split()))\n\n    l=1\n    r =h\n    while l<r:\n      mid =(l+r)//2\n      if check(a,mid,h):\n        r=mid\n      else:\n        l = mid+1\n    print(l)\n",
                true
            ],
            [
                "# your code goes here\n# your code goes here\nimport sys\nimport math\nfrom fractions import Fraction\nfrom decimal import *\ninput = sys.stdin.readline\n\n\nt = int(input())\nwhile t>0:\n    inp = input().strip()\n    arr = [int(x) for x in inp.split(' ')]\n    \n    n = arr[0]\n    h = arr[1]\n\n    inp = input().strip()\n    arr = [int(x) for x in inp.split(' ')]\n    maxd = []\n    i = 1\n    while i<len(arr):\n        maxd.append(arr[i]-arr[i-1])\n        i += 1\n    maxd.append(10**50)\n\n    maxd.sort()\n\n    ans = 0\n    d_left = h\n    curi = 0\n    while d_left > 0:\n        minreq = math.ceil(Decimal(d_left)/Decimal(len(maxd)-curi))\n        # print(curi, minreq, d_left)\n        if minreq <= maxd[curi]:\n            ans = minreq\n            break\n        else:\n            i = curi\n            while maxd[i]==maxd[curi]:\n                d_left -= maxd[i]\n                i += 1\n            curi = i\n    print(ans)\n    t -= 1\n",
                true
            ],
            [
                "#https://codeforces.com/problemset/problem/1613/C\nimport math\n\ndef Poison_damage_search(dragon_hp, poison_ticks, remaining_attacks):\n    \n    if dragon_hp < remaining_attacks:\n        return 1\n    \n    sum_damage = 0\n    for curr_damage in poison_ticks:\n        if curr_damage > ((dragon_hp-sum_damage)//remaining_attacks):\n            break\n        sum_damage += curr_damage\n        remaining_attacks -= 1\n    return (0-(sum_damage-dragon_hp)//remaining_attacks)\n\namount_of_data = int(input())\n\ndragon_raids = []\nfor _ in range(amount_of_data):\n    amount_attacks, dragon_hp = map(int, input().split())\n    attacks = tuple(map(int, input().split()))\n    poison_ticks = [attacks[curr] - attacks[curr-1] for curr in range(1, len(attacks))]\n    poison_ticks.sort()\n    dragon_raids.append(tuple([amount_attacks, dragon_hp, poison_ticks]))\n\nfor curr_try in dragon_raids:\n    amount_attacks = curr_try[0]\n    dragon_hp = curr_try[1]\n    poison_ticks = curr_try[2]\n    \n    print(Poison_damage_search(dragon_hp, poison_ticks, amount_attacks))\n\n    \n",
                true
            ],
            [
                "T = int(input())\nfor i in range(0, T):\n    n, h = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    l = 0\n    r = 9223372036854775807\n    while l < r:\n        m = (l + r) // 2\n        t = h\n        for i in range(1, n):\n            if m < a[i] - a[i - 1]:\n                t -= m\n            else:\n                t -= a[i] - a[i - 1]\n        t -= m\n        if t <= 0:\n            r = m\n        else:\n            l = m + 1\n    print(l)",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n,h=map(int,input().split())\n    a=list(map(int,input().split()))\n    a.append(10**19)\n    left,right=0,10**18\n    while right-left>1:\n        m=(right+left)//2\n        ans=0\n        for i in range(n):\n            ans+=min(a[i+1]-a[i],m)\n        #print(left,right)\n        if ans<h:\n            left=m\n        else:\n            right=m\n    print(right)\n#3 4 .. 25 ..64..k..1337..k\n#2*k+64-3=1000\n#1000-64+3=939\n",
                true
            ],
            [
                "import sys\nfrom collections import deque\nimport math\nfrom bisect import bisect_left\nfrom functools import cmp_to_key\ndef II():\n    return int(sys.stdin.readline())\n \ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n    return map(int, sys.stdin.readline().split())\n \ndef SI():\n    return sys.stdin.readline().strip()\n \ndef FACT(n, mod):\n    s = 1\n    facts = [1]\n    for i in range(1,n+1):\n        s*=i\n        s%=mod\n        facts.append(s)\n    return facts[n]\n \ndef C(n, k, mod):\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\n \ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\nt = int(input())\ndef f(m,a,n):\n    ans=m\n    for j in range(1,n):\n        ans+=min(a[j]-a[j-1],m)\n    return ans\nfor _ in range(t):\n    n, h = map(int,input().split())\n    a = list(map(int,input().split()))\n    low = 1\n    high = 10**18\n    used_m = -1\n    while True:\n        m=(low+high)//2\n        if used_m == m:\n            break\n        if f(m,a,n)>h:\n            high=m\n        elif f(m,a,n)<h:\n            low=m\n        else:\n            low=m\n            break\n        used_m = m\n    for j in range(-3,4):\n        if f(j+m,a,n)>=h:\n            print(j+m)\n            break\n\n ",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n############ ---- Input Functions ---- ############\ndef inp():\n    return (int(input()))\ndef inlt():\n    return (list(map(int, input().split())))\ndef insr():\n    s = input()\n    return (list(s[:len(s) - 1]))\ndef invr():\n    return (map(int, input().split()))\n\nt = inp()\nfor _ in range(t):\n    n,h = invr()\n    A = inlt()\n    def ok(k):\n        dmg = 0\n        for i,a in enumerate(A):\n            if i==n-1:\n                dmg+=k\n            else:\n                dmg+=min(k,A[i+1]-a)\n        return dmg>=h\n\n    l = 1\n    r = h+1\n    while l<r:\n        mid = (l+r)//2\n        if ok(mid):\n            r =mid\n        else:\n            l =mid+1\n    print(l)\n",
                true
            ],
            [
                "from math import *\nfor _ in range(int(input())):\n    n,h=map(int,input().split())\n    a=list(map(int,input().split()))\n    m=[0 for i in range(n)]\n    p=0\n    s=0\n    for i in range(n-1):\n        m[i]=a[i+1]-a[i]\n        p=max(m[i],p)\n        s+=m[i]\n    m[n-1]=float('inf')\n    if((h-s)>=p):\n        print(h-s)\n    else:\n        q=1\n        ans=p\n        while(q<=p):\n            t=(q+p)//2\n            s=0\n            for i in range(n):\n                s+=min(t,m[i])\n            if(s>=h):\n                ans=min(t,ans)\n                p=t-1\n            else:\n                q=t+1\n        print(ans)\n",
                true
            ],
            [
                "def fun(m,n,q):\n    for jj in range(n):\n        if q<=0:\n            return True\n        if 1+jj<n:\n            xx=min(a[jj+1]-a[jj],m)\n            q-=xx\n        else:\n            q-=m\n    if q>0:\n        return False\n    else:\n        return True\n\nfor ii in range(int(input())):\n    n,q=map(int,input().split())\n    a=list(map(int,input().split()))\n    l,r,x=0,q,0\n    while l<=r:\n        mid=l-(l-r)//2\n        if not fun(mid,n,q):\n            l=mid+1\n        else:\n            x=mid\n            r=mid-1\n    print(x)",
                true
            ],
            [
                "t = int(input())\nfor case in range(t):\n  n, h = map(int, input().split())\n  l = [int(i) for i in input().split()]\n  def works(x):\n    tot = 0\n    for i in range(n-1):\n      if l[i] + x - 1 < l[i+1]:\n        tot += x\n      else:\n        tot += (l[i+1] - l[i])\n    tot += x\n    return tot >= h\n\n  low = 0\n  high = 1000000000000000000\n  rec = 0\n  while low <= high:\n    rec += 1\n    if rec > 100:\n      break\n    mid = (low + high) // 2\n    if works(mid):\n      high = mid\n    else:\n      low = mid + 1\n  print(mid)",
                true
            ],
            [
                "# cook your dish here\nimport math\ndef modInverse(p, q):\n    \n        mod = 998244353\n        expo = 0\n        expo = mod - 2\n\n        # Loop to find the value\n        # until the expo is not zero\n        while (expo):\n            if (expo & 1):\n                p = (p * q) % mod\n            q = (q * q) % mod\n            expo >>= 1\n        return p\n        \ndef answer(x,y,li):\n    s=[]\n    for p in range(0,len(li)-1):\n        s.append(li[p+1]-li[p])\n    s.append(y+1)\n    \n    def solu(s,fi,y):\n        m=0\n        for j in range(0,len(s)):\n            m=m+min(s[j],fi)\n        return(m>=y)\n        \n    low=1\n    high=y+1\n    ans=0\n    while (low<high):\n        fi=(low+high)//2\n        if solu(s,fi,y):\n            high=fi\n            ans=fi\n        else:\n            low=fi+1\n    \n    return ans\n    \n    \nt=int(input())\nfor i in range (0,t):\n    x,y=input().split()\n    x=int(x)\n    y=int(y)\n    li=input().split()\n    for k in range(0,len(li)):\n        li[k]=int(li[k])\n    print(answer(x,y,li))\n",
                true
            ],
            [
                "from bisect import bisect, bisect_left\nfrom sys import stdin, stdout\nrd = lambda: list(map(int, stdin.readline().split()))\nrds = lambda: stdin.readline().rstrip()\nii = lambda: int(stdin.readline())\nINF = 1 << 62\nmod = 10**9 + 7\n\n\ndef check(m, ar, h):\n    # compute the damage with given m\n    d = 0\n    \n    for i in range(len(ar)-1):\n        d += min(m, ar[i+1] - ar[i])\n\n    d += m\n\n    return d >= h\n\nfor _ in range(ii()):\n    n, h = rd()\n    ar = rd()\n    \n    l, r = 0, h\n    while l < r:\n        m = (l + r) // 2\n        if check(m, ar, h):\n            # the ans within [l, m]\n            r = m\n        else:\n            # the ans within [m+1, r]\n            l = m + 1\n\n    print(l)\n\n#stdout.write(' '.join(map(str, ar)))\n#stdout.write(f'{res}')\n\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nMonocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.\n\nMonocarp has n problems that none of his students have seen yet. The i-th problem has a topic a_i (an integer from 1 to n) and a difficulty b_i (an integer from 1 to n). All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time.\n\nMonocarp decided to select exactly 3 problems from n problems for the problemset. The problems should satisfy at least one of two conditions (possibly, both):\n\n  * the topics of all three selected problems are different; \n  * the difficulties of all three selected problems are different. \n\n\n\nYour task is to determine the number of ways to select three problems for the problemset.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import sys\ninput=sys.stdin.readline\nfor t in range(int(input())):\n    n=int(input())\n    val=(n*(n-1)*(n-2))//6\n    arr=[[] for i in range(n)]\n    t=[[] for i in range(n)]\n    for i in range(n):\n        a,b=map(int,input().split())\n        a-=1;b-=1\n        arr[a].append(b);t[b].append(a)\n    for i in range(n):\n        for j in t[i]:\n            val-=(len(t[i])-1)*(len(arr[j])-1)\n    print(val)",
                true
            ],
            [
                "import sys\n\nIS_INTERACTIVE = False\ninput = input  # type: ignore\n\n# input: function\nif not IS_INTERACTIVE:\n    *data, = sys.stdin.read().split(\"\\n\")[::-1]\n\n    def input():  # type: ignore\n        return data.pop()\n\ndef fprint(*args, **kwargs):\n    print(*args, **kwargs, flush=True)\n\ndef eprint(*args, **kwargs):\n    print(*args, **kwargs, file=sys.stderr)\n\n'''\n1 1\n2 1\n2 2\n2 4\n3 4\n\n1-2-5\n1-3-5\n1-4-5\n\n\n\n'''\n\n\n\ndef naive(topics, diffs):\n    n = len(topics)\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if len({topics[i], topics[j], topics[k]}) == 3 or len({diffs[i], diffs[j], diffs[k]}) == 3:\n                    cnt += 1\n    return cnt\n\n\ndef fast(topics, diffs):\n    tcnt = [0] * (n + 1)\n    dcnt = [0] * (n + 1)\n    for t, d in zip(topics, diffs):\n        tcnt[t] += 1\n        dcnt[d] += 1\n    pairs = list(zip(topics, diffs))\n\n    ans = n * (n - 1) * (n - 2) // 6\n    for i in range(n):\n        c0 = tcnt[topics[i]]\n        c1 = dcnt[diffs[i]]\n        c0 -= 1\n        c1 -= 1\n        if c0 and c1:\n            ans -= c0 * c1\n\n    return ans\n\n\n'''\n    n! / (n - 3)! / (3!)\n\n    5 * 4 * 3\n\n    1 2\n    1 3\n    2 2\n'''\n\nfor _ in range(int(input())):\n    n = int(input())\n    topics = []\n    diffs = []\n    for _ in range(n):\n        t, d = map(int, input().split())\n        topics.append(t)\n        diffs.append(d)\n\n    print(fast(topics, diffs))\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    Topic = []\n    Diff = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        Topic.append(a)\n        Diff.append(b)\n    \n    T_map = dict.fromkeys(Topic, 0)\n    D_map = dict.fromkeys(Diff, 0)\n\n    for i in Topic:\n        T_map[i] += 1 \n\n    for i in Diff:\n        D_map[i] += 1 \n\n    good_trip = int((n * (n - 1) * (n - 2)) / 6)\n\n    bad_trip = 0 \n\n    for i in range(n):\n        bad_trip += (T_map[Topic[i]] - 1) * (D_map[Diff[i]] - 1)\n\n    print(good_trip - bad_trip)\n     \n     ",
                true
            ],
            [
                "def main():\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    inf = 1e17\n    mod = 10 ** 9 + 7\n\n    # Max = 10 ** 6\n    # primes = []\n    # prime = [True for i in range(Max + 1)]\n    # p = 2\n    # while (p * p <= Max + 1):\n    #\n    #     # If prime[p] is not\n    #     # changed, then it is a prime\n    #     if (prime[p] == True):\n    #\n    #         # Update all multiples of p\n    #         for i in range(p * p, Max + 1, p):\n    #             prime[i] = False\n    #     p += 1\n    #\n    # for p in range(2, Max + 1):\n    #     if prime[p]:\n    #         primes.append(p)\n\n    #print(len(primes))\n\n\n    def factorial(n):\n        f = 1\n\n        for i in range(1, n + 1):\n            f = (f * i) % mod  # Now f never can\n        # exceed 10^9+7\n\n        return f\n\n    def ncr(n, r):\n        # initialize numerator\n        # and denominator\n        num = den = 1\n        for i in range(r):\n            num = (num * (n - i)) % mod\n            den = (den * (i + 1)) % mod\n        return (num * pow(den,\n                          mod - 2, mod)) % mod\n\n\n\n\n    def solve(n,a,b):\n\n\n        atob = dict()\n\n        btoa = dict()\n\n        for i in range(n):\n\n            if a[i] in atob:\n                atob[a[i]].add(b[i])\n            else:\n                atob[a[i]] = {b[i]}\n\n            if b[i] in btoa:\n                btoa[b[i]].add(a[i])\n            else:\n                btoa[b[i]] = {a[i]}\n\n        #print(atob)\n        #print(btoa)\n\n        cnt = 0\n        for ele in atob:\n\n            for x in atob[ele]:\n\n                cnt += (len(btoa[x])-1)*(len(atob[ele])-1)\n\n        return (n*(n-1)*(n-2))//6 - cnt\n\n\n\n\n\n\n\n\n\n    t = int(input())\n    ans = []\n    for _ in range(t):\n        n = int(input())\n\n        #n,m = map(int, input().split())\n        #r1 = list(input()[:-1])\n        #r2 = list(input()[:-1])\n\n\n        a = []\n        b = []\n\n        for i in range(n):\n            s = [int(x) for x in input().split()]\n            a.append(s[0])\n            b.append(s[1])\n\n        #a = [int(x) for x in input().split()]\n        #b = [int(x) for x in input().split()]\n        #arr = list(input())[:-1][::-1]\n        ans.append(solve(n,a,b))\n\n    p = 1\n    for answer in ans:\n        #print('Case #'+str(p)+\": \"+str(answer))\n        print(answer)\n        p += 1\n\n\nif __name__ == \"__main__\":\n    import sys, threading\n    import bisect\n    import math\n    import itertools\n    from sys import stdout\n\n\n    ############  Sorted Containers  ######################\n    import heapq\n    from queue import PriorityQueue\n    from collections import deque\n\n\n    ############ Tree Problems ( Use Python 3) ###########\n    #sys.setrecursionlimit(2 ** 32 // 2 - 1)\n    #threading.stack_size(1 << 27)\n\n    input = sys.stdin.readline\n    thread = threading.Thread(target=main)\n    thread.start()\n    thread.join()",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\nfrom collections import Counter\nfor t in range(int(input())):\n    N=int(input())\n    L=[tuple(map(int,input().split())) for i in range(N)]\n    C1=Counter() ; C2=Counter()\n    for i,j in L:C1[i]+=1;C2[j]+=1\n    T=(N)*(N-1)*(N-2)//6\n    for i,j in L:\n        T-=(C1[i]-1)*(C2[j]-1)\n    print(T)",
                true
            ],
            [
                "from collections import defaultdict\nfrom sys import stdin, stdout\n \ndef input(): return stdin.readline().strip()\ndef read_int_list(): return list(map(int, input().split()))\ndef read_int_tuple(): return tuple(map(int, input().split()))\ndef read_int(): return int(input())\n\nt = int(input()) # read a line with a single integer\nfor i in range(1, t + 1):\n    n = int(input())\n    t_dict = defaultdict(int)\n    d_dict = defaultdict(int)\n    qns = []\n    for _ in range(n):\n        t, d = read_int_tuple()\n        t_dict[t] += 1\n        d_dict[d] += 1\n        qns.append((t,d))\n    \n    t_d_dict = defaultdict(int)\n    d_t_dict = defaultdict(int)\n    for qn in qns:\n        t, d = qn\n        t_d_dict[t] += d_dict[d]\n        d_t_dict[d] += t_dict[t]\n    \n    res = n*(n-1)*(n-2)//6\n    accum = 0\n    # print(t_dict)\n    # print(d_dict)\n    # print(t_d_dict)\n    # print(d_t_dict)\n    for qn in qns:\n        t, d = qn\n        n_t = t_dict[t] - 1\n        n_d = d_dict[d] - 1\n        n_t_d = t_d_dict[t] - d_dict[d]\n        n_d_t = d_t_dict[d] - t_dict[t]\n        # share t\n        accum += n_t*d_dict[d] - 2*n_t + n_t_d\n        # print(n_t*d_dict[d] - 2*n_t + n_t_d)\n        # share d\n        accum += n_d*t_dict[t] - 2*n_d + n_d_t\n        # print(n_d*t_dict[t] - 2*n_d + n_d_t)\n        # print(qn, n_t, n_d, n_t_d, n_d_t)\n    # print(res)\n    # print(accum)\n    # assert accum% 4 == 0\n    # assert (res-6*accum//4) % 6 == 0\n    print(res-accum//4)\n        \n    \n    # get all topics\n    # total_t = 0\n    # for t in t_dict:\n    #     total_t += t_dict[t] * t_dict[t]\n    # res_topic = 0\n    # for qn in qns:\n    #     t, d = qn\n    #     left = total_t - t_dict[t] * t_dict[t]\n    #     res_topic += (n-t_dict[t])*(n-t_dict[t]) - left\n\n    # # get all diff\n    # total_d = 0\n    # for d in d_dict:\n    #     total_d += d_dict[d] * d_dict[d]\n    # res_diff = 0\n    # for qn in qns:\n    #     t, d = qn\n    #     left = total_d - d_dict[d] * d_dict[d]\n    #     res_diff += (n-d_dict[d])*(n-d_dict[d]) - left\n\n    # # get intersection, double count\n    # comb_dict = defaultdict(int)\n    # for qn in qns:\n    #     t, d = qn\n    #     comb_dict[qn] = t_dict[t] + d_dict[d] - 1\n    \n    # res_comb = 0\n    # total_comb = 0\n    # for qn in comb_dict:\n    #     total_comb += comb_dict[qn]\n    # for qn in qns:\n    #     t, d = qn\n    #     left = n - t_dict[t] - d_dict[d] + 1\n    #     print((n-comb_dict[qn])*(n-comb_dict[qn]) - left + t_dict[t] - 1 + d_dict[d] - 1)\n    #     res_comb += (n-comb_dict[qn])*(n-comb_dict[qn]) - left + t_dict[t] - 1 + d_dict[d] - 1\n    \n    # assert res_topic%6==0\n    # assert res_diff%6==0\n    # assert res_comb%6==0\n    # print((res_topic+res_diff-res_diff)//6)",
                true
            ],
            [
                "from sys import stdin,stdout\nfrom math import gcd,sqrt,factorial,pi,inf\nfrom collections import deque,defaultdict\nfrom bisect import bisect,bisect_left\nfrom time import time\nfrom itertools import permutations as per\nfrom heapq import heapify,heappush,heappop,heappushpop\ninput=stdin.readline\nR=lambda:map(int,input().split())\nI=lambda:int(input())\nS=lambda:input().rstrip('\\r\\n')\nL=lambda:list(R())\nP=lambda x:stdout.write(str(x)+'\\n')\nlcm=lambda x,y:(x*y)//gcd(x,y)\nnCr=lambda x,y:(f[x]*inv((f[y]*f[x-y])%N))%N\ninv=lambda x:pow(x,N-2,N)\nsm=lambda x:(x**2+x)//2\nN=10**9+7\n\nfor _ in range(I()):\n    n=I()\n    a=[0]*(n+1)\n    b=[0]*(n+1)\n    d=[]\n    for i in range(n):\n        x,y=R()\n        a[x]+=1\n        b[y]+=1\n        d+=(x,y),\n    ans=(n*(n-1)*(n-2))//6\n    for i in range(n):\n        ans-=(a[d[i][0]]-1)*(b[d[i][1]]-1)\n    print(ans)\n\n\n\n\n\n\n",
                true
            ],
            [
                "from sys import stdin\nfor i in range(int(stdin.readline())):\n    a=int(stdin.readline())\n    t1=[]\n    d1=[]\n    for i in range(a):\n        t,d=map(int,stdin.readline().split())\n        t1.append(t)\n        d1.append(d)\n    count=a*(a-1)*(a-2)//6\n    p={}\n    q={}\n    for i in range(a):\n        if t1[i] not in p:\n            p[t1[i]]=1\n        else:\n            p[t1[i]]+=1\n        if d1[i] not in q:\n            q[d1[i]]=1\n        else:\n            q[d1[i]]+=1   \n    count1=0\n    for i in range(len(t1)):\n        count1+=(p[t1[i]]-1)*(q[d1[i]]-1)\n    print(count-count1)  \n",
                true
            ],
            [
                "t = int(input())\n\nwhile t > 0:\n  t -= 1\n\n  n = int(input())\n\n  topic_count = [0] * (n + 1)\n  diff_count = [0] * (n + 1)\n  x = [0] * n\n  y = [0] * n\n\n  result = n * (n - 1) * (n - 2) // 6\n\n  for i in range(n):\n    inputs = input().split()\n    x[i], y[i] = int(inputs[0]), int(inputs[1])\n\n    topic_count[x[i]] += 1\n    diff_count[y[i]] += 1\n\n  for i in range(n):\n    result -= (topic_count[x[i]] - 1) * (diff_count[y[i]] - 1)\n\n  print(result)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n n=int(input())\n ans=0\n c1,c2=[0]*(n+1),[0]*(n+1)\n pairs=[]\n for i in range(n):\n  a,b=map(int,input().split())\n  c1[a] += 1\n  c2[b] += 1\n  pairs += [(a,b)]\n print((n*(n-1)*(n-2))//6 - sum((c1[a]-1)*(c2[b]-1) for a, b in pairs))",
                true
            ],
            [
                "from sys import*\nfrom collections import *\ninput=stdin.readline\nfor u in range(int(input())):\n    n=int(input())\n    l,d=defaultdict(int),defaultdict(list)\n    for i in range(n):\n        a,b=map(int,input().split())\n        l[b]+=1\n        d[a].append(b)\n    ans=n*(n-2)*(n-1)//6\n    for i in d:\n        for j in d[i]:\n            ans-=((len(d[i])-1)*(l[j]-1))\n    print(ans)\n",
                true
            ],
            [
                "from sys import stdin,stdout\nfor _ in range(int(stdin.readline())):\n    n=int(stdin.readline())\n    fr1=[0]*(n+1)\n    fr2=[0]*(n+1)\n    l=[]\n    for i in range(n):\n        x,y=list(map(int,stdin.readline().split()))\n        fr1[x-1]+=1\n        fr2[y-1]+=1\n        l.append([x-1,y-1])\n    ans=(n*(n-1)*(n-2))//6\n    x=0\n    for i in range(n):\n        x+=(fr1[l[i][0]]-1)*(fr2[l[i][1]]-1)\n    stdout.write(str(ans-x)+'\\n')\n",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\nfor t in range(int(input())):\n    N=int(input())\n    L=[tuple(map(int,input().split())) for i in range(N)]\n    from collections import Counter\n    C1=Counter() ; C2=Counter()\n    for i,j in L:C1[i]+=1;C2[j]+=1\n    T=(N)*(N-1)*(N-2)//6\n    for i,j in L:\n        T-=(C1[i]-1)*(C2[j]-1)\n    print(T)",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\ndef nc3(n):\n    return (n * (n - 1) * (n - 2))//6\n\ndef answer():\n\n    ans = nc3(n)\n\n    sub = 0\n    for i in range(n):\n        a , b = x[i]\n\n        sub += ((d1[a] - 1) * (d2[b] - 1))\n\n\n    return ans - sub\n  \n            \nfor T in range(int(input())):\n\n    n = int(input())\n\n    x = []\n    d1 , d2 = dict() , dict()\n\n    for i in range(n):\n\n        a , b = map(int,input().split())\n\n        d1[a] = d1.get(a , 0) + 1\n        d2[b] = d2.get(b , 0) + 1\n\n        x.append([a , b])\n        \n    print(answer())\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    ans = n*(n-1)*(n-2)/6\n    td = []\n    t,d = {},{}\n    for i in range(n):\n        a,b = map(int,input().split())\n        td.append([a,b])\n        if a not in t: t[a] = 1\n        else: t[a] += 1\n\n        if b not in d: d[b] = 1\n        else: d[b] += 1\n    \n    for i in td:\n        topic = i[0]\n        difficulty = i[1]\n        ans -= (t[topic] - 1) * (d[difficulty] - 1)\n    \n    ans = int(ans)\n    print(ans)",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\n\n\ndef ncr(x):\n\n\n    return (x*(x-1)*(x-2)//6)\na=int(input())\nfrom collections import *\nfor i in range(a):\n\n    al=defaultdict(list)\n    dl=defaultdict(list)\n\n    mp=defaultdict(int)\n    s=int(input())\n    a1=[]\n    for i in range(s):\n\n        x,y=map(int,input().split())\n        a1.append([x,y])\n        \n        al[x].append(y)\n        dl[y].append(x)\n        mp[y]+=1\n    total=ncr(s)\n\n\n    for i in al:\n\n        t=al[i]\n        for j in t:\n\n            total-=(mp[j]-1)*(len(t)-1)\n    print(total)\n\n        \n\n    \n        \n        \n    \n\n    \n",
                true
            ],
            [
                "from collections import defaultdict\nfrom sys import stdout\n\noutput = []\npairs = [(i, j) for i in range(4) for j in range(i + 1, 5)]\nfor _t in range(int(input())):\n    n = int(input())\n    same_topic = defaultdict(list)\n    same_diff = defaultdict(int)\n    for _ in range(n):\n        t, d = map(int, input().split(\" \"))\n        same_topic[t].append(d)\n        same_diff[d] += 1\n    invalid = 0\n    for topic, group in same_topic.items():\n        for diff in group:\n            invalid += (len(group) - 1) * (same_diff[diff] - 1)\n    output.append(n * (n - 1) // 2 * (n - 2) // 3 - invalid)\n\nstdout.write(\"\\n\".join(map(str, output)))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    d1={}\n    d2={}\n    l=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        d1[x]=d1.get(x,0)+1\n        d2[y]=d2.get(y,0)+1\n        l.append([x,y])\n    ans=((n)*(n-1)*(n-2))//6\n    \n    \n    \n    for x,y in l:\n        ans-=(d1[x]-1)*(d2[y]-1)\n    print(ans)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ndef iinput(): return int(input())\ndef sinput(): return input().rstrip()\ndef i0input(): return int(input()) - 1\ndef linput(): return list(input().split())\ndef liinput(): return list(map(int, input().split()))\ndef miinput(): return map(int, input().split())\ndef li0input(): return list(map(lambda x: int(x) - 1, input().split()))\ndef mi0input(): return map(lambda x: int(x) - 1, input().split())\nINF = 10**20\nMOD = 1000000007\n\n# Hopcroft-Karp Algorithm\n# from collections import deque\n# class HopcroftKarp:\n#     def __init__(self, N0, N1):\n#         self.N0 = N0\n#         self.N1 = N1\n#         self.N = N = 2+N0+N1\n#         self.G = [[] for i in range(N)]\n#         for i in range(N0):\n#             forward = [2+i, 1, None]\n#             forward[2] = backward = [0, 0, forward]\n#             self.G[0].append(forward)\n#             self.G[2+i].append(backward)\n#         self.backwards = bs = []\n#         for i in range(N1):\n#             forward = [1, 1, None]\n#             forward[2] = backward = [2+N0+i, 0, forward]\n#             bs.append(backward)\n#             self.G[2+N0+i].append(forward)\n#             self.G[1].append(backward)\n\n#     def add_edge(self, fr, to):\n#         #assert 0 <= fr < self.N0\n#         #assert 0 <= to < self.N1\n#         v0 = 2 + fr\n#         v1 = 2 + self.N0 + to\n#         forward = [v1, 1, None]\n#         forward[2] = backward = [v0, 0, forward]\n#         self.G[v0].append(forward)\n#         self.G[v1].append(backward)\n\n#     def bfs(self):\n#         G = self.G\n#         level = [None]*self.N\n#         deq = deque([0])\n#         level[0] = 0\n#         while deq:\n#             v = deq.popleft()\n#             lv = level[v] + 1\n#             for w, cap, _ in G[v]:\n#                 if cap and level[w] is None:\n#                     level[w] = lv\n#                     deq.append(w)\n#         self.level = level\n#         return level[1] is not None\n\n#     def dfs(self, v, t):\n#         if v == t:\n#             return 1\n#         level = self.level\n#         for e in self.it[v]:\n#             w, cap, rev = e\n#             if cap and level[v] < level[w] and self.dfs(w, t):\n#                 e[1] = 0\n#                 rev[1] = 1\n#                 return 1\n#         return 0\n\n#     def flow(self):\n#         flow = 0\n#         G = self.G\n#         bfs = self.bfs; dfs = self.dfs\n#         while bfs():\n#             *self.it, = map(iter, G)\n#             while dfs(0, 1):\n#                 flow += 1\n#         return flow\n\n#     def matching(self):\n#         return [cap for _, cap, _ in self.backwards]\n\nt = iinput()\nfrom collections import defaultdict\nfor _ in [0] * t:\n    n = iinput()\n    A = defaultdict(int)\n    B = defaultdict(int)\n    all = []\n    # g = HopcroftKarp(n, n)\n    for _ in [0] * n:\n        a, b = li0input()\n        A[a] += 1\n        B[b] += 1\n        all.append((a, b))\n    #     g.add_edge(a, b)\n    # joint = g.flow()\n    # joint = joint * (joint - 1) * (joint - 2) // 6\n    ans1 = n * (n - 1) * (n - 2) // 6\n    ans2 = n * (n - 1) * (n - 2) // 6\n    for v in A.values():\n        if v >= 2:\n            ans1 -= (n - v) * v * (v - 1) // 2\n        if v >= 3:\n            ans1 -= v * (v - 1) * (v - 2) // 6\n    for v in B.values():\n        if v >= 2:\n            ans2 -= (n - v) * v * (v - 1) // 2\n        if v >= 3:\n            ans2 -= v * (v - 1) * (v - 2) // 6\n    bar_joint = 0\n    for a, b in all:\n        bar_joint += max(0, A[a] - 1) * max(0, B[b] - 1)\n    joint = ans1 + ans2 + bar_joint - n * (n - 1) * (n - 2) // 6\n    print(ans1 + ans2 - joint)",
                true
            ],
            [
                "import sys\n#import random\nfrom bisect import bisect_right as lb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\nmod = 10**9 + 7\nmod1 = 998244353\n\n\nfor _ in range (ii()) :\n    n = ii()\n    a,b,d,d1 = [],[],{},{}\n\n    for i in range (n) :\n        x,y = il()\n\n        a.append(x)\n        b.append(y)\n        d[x] = d.get(x,0) + 1\n        d1[y] = d1.get(y,0) + 1\n\n    ans = (n*(n-1)*(n-2))//6\n\n    for i in range (n) :\n        ans -= (d[a[i]] - 1)*(d1[b[i]] - 1)\n\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    d1,d2 = {},{}\n    l = []\n    for i in range(n):\n        x,y = map(int, input().split())\n        if x in d1:\n            d1[x]+=1\n        else:\n            d1[x]=1\n        if y in d2:\n            d2[y]+=1\n        else:\n            d2[y]=1\n        l.append([x,y])\n    ans = n*(n-1)*(n-2)//6\n    for i in range(n):\n        ans -= (d1[l[i][0]]-1)*(d2[l[i][1]]-1)\n    print(ans)\n",
                true
            ],
            [
                "from typing import DefaultDict\nfrom sys import stdin; read = stdin.readline\n\nfor _ in range(int(read())):\n    n = int(read())\n\n    adic = DefaultDict(lambda : 0)\n    bdic = DefaultDict(lambda : 0)\n\n    stuff = []\n    for i in range(n):\n        a, b = map(int, read().split())\n        adic[a] += 1\n        bdic[b] += 1\n        stuff.append((a,b))\n\n    \n    total = n*(n-1)*(n-2)//6\n\n    for a, b in stuff:\n        total -= (adic[a]-1)*(bdic[b]-1)\n\n    print(total)",
                true
            ],
            [
                "from collections import Counter\nimport sys\nreadline=sys.stdin.readline\n\nT=int(readline())\nfor t in range(T):\n    N=int(readline())\n    A,B=[],[]\n    for _ in range(N):\n        a,b=map(int,readline().split())\n        A.append(a)\n        B.append(b)\n    C_A=Counter(A)\n    C_B=Counter(B)\n    ans=N*(N-1)*(N-2)\n    S=0\n    for c in C_A.values():\n        S+=c*(c-1)\n    for c in C_B.values():\n        S+=c*(c-1)\n    ans-=S*3*(N-2)\n    for i in range(N):\n        ans+=(C_A[A[i]]-1)*(C_B[B[i]]-1)*6\n    for c in C_A.values():\n        ans+=c*(c-1)*(c-2)*3\n    for c in C_B.values():\n        ans+=c*(c-1)*(c-2)*3\n    for c in C_A.values():\n        ans-=c*(c-1)*(c-2)\n    for c in C_B.values():\n        ans-=c*(c-1)*(c-2)\n    ansA=N*(N-1)*(N-2)\n    for c in C_A.values():\n        ansA-=c*(c-1)*(N-2)*3\n    for c in C_A.values():\n        ansA+=c*(c-1)*(c-2)*3\n    for c in C_A.values():\n        ansA-=c*(c-1)*(c-2)\n    ansB=N*(N-1)*(N-2)\n    for c in C_B.values():\n        ansB-=c*(c-1)*(N-2)*3\n    for c in C_B.values():\n        ansB+=c*(c-1)*(c-2)*3\n    for c in C_B.values():\n        ansB-=c*(c-1)*(c-2)\n    ans=ansA+ansB-ans\n    ans//=6\n    print(ans)",
                true
            ],
            [
                "from sys import stdin,stdout\nfor i in range(int(stdin.readline())):\n    a=int(stdin.readline())\n    t1=[]\n    d1=[]\n    for i in range(a):\n        t,d=map(int,stdin.readline().split())\n        t1.append(t)\n        d1.append(d)\n    count=a*(a-1)*(a-2)//6\n    p={}\n    q={}\n    for i in range(a):\n        if t1[i] not in p:\n            p[t1[i]]=1\n        else:\n            p[t1[i]]+=1\n        if d1[i] not in q:\n            q[d1[i]]=1\n        else:\n            q[d1[i]]+=1   \n    count1=0\n    for i in range(len(t1)):\n        count1+=(p[t1[i]]-1)*(q[d1[i]]-1)\n    stdout.write(str(count-count1))\n    stdout.write(\"\\n\")\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nfor _ in range(int(input())):\n n=int(input())\n ans=0\n c1,c2=[0]*(n+1),[0]*(n+1)\n pairs=[]\n for i in range(n):\n  a,b=map(int,input().split())\n  c1[a] += 1\n  c2[b] += 1\n  pairs += [(a,b)]\n print((n*(n-1)*(n-2))//6 - sum((c1[a]-1)*(c2[b]-1) for a, b in pairs))",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    x = {}\n    y = {}\n    l = []\n    for i in range(n):\n        a,b = map(int,input().split())\n        l.append((a,b))\n        if a in x:\n            x[a] += 1\n\n        else:\n            x[a] = 1\n\n        if b in y:\n            y[b] += 1\n\n        else:\n            y[b] = 1\n\n    ans = (n*(n-1)*(n-2))//6\n    cnt = 0\n    for i in l:\n        a,b = i[0],i[1]\n        ca = x[a]-1\n        cb = y[b]-1\n        cnt += (ca*cb)\n\n    sys.stdout.write(str(ans-cnt)+\"\\n\")",
                true
            ],
            [
                "#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"2\n# 4\n# 2 4\n# 3 4\n# 2 1\n# 1 3\n# 5\n# 1 5\n# 2 4\n# 3 3\n# 4 2\n# 5 1\n\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\ndef solve(N, T):\n    counter1 = collections.Counter([a for a, b in T])\n    counter2 = collections.Counter([b for a, b in T])\n\n    v1 = 0\n    for a, n in counter1.items():\n        if n >= 2:\n            v1 += n*(n-1)//2 * (N-n)\n\n    v2 = 0\n    for a, n in counter1.items():\n        if n >= 3:\n            v2 += n*(n-1)*(n-2)//6\n\n    v3 = 0\n    for a, b in T:\n        v3 += (counter1[a]-1) * (counter2[b]-1)\n    \n    v4 = 0\n    for a, n in counter2.items():\n        if n >= 2:\n            v4 += n*(n-1)//2 * (N-n)\n\n    v5 = 0\n    for a, n in counter2.items():\n        if n >= 3:\n            v5 += n*(n-1)*(n-2)//6\n\n    m = N*(N-1)*(N-2)//6\n    ans = (m-v1-v2) + (m-v4-v5) - (m-v1-v2+v3-v4-v5)\n    return ans\n\n\nT0 = int(input())\nfor _ in range(T0):\n    N = int(input())\n    T = []\n    for _ in range(N):\n        a, b = map(int, input().split())\n        T.append((a, b))\n    print(solve(N, T))\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nimport bisect\nimport itertools\nfrom collections import deque\nfrom collections import Counter\ndef solve():\n    n = int(input())\n    ab = [list(map(int,input().split())) for _ in range(n)]\n    a = Counter()\n    b = Counter()\n    for i in range(n):\n        a[ab[i][0]] += 1\n        b[ab[i][1]] += 1\n    ans = n * (n - 1) * (n - 2) // 6\n    for i in range(n):\n        ans -= (a[ab[i][0]] - 1) * (b[ab[i][1]] - 1)\n    print(ans)\n        \n\n\n\n\n\n\n\n\n    \nt = int(input())\nfor _ in range(t):\n    solve()\n\n",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\nfor _ in range(int(input().strip())):\n    #y,a,b=map(int,input().strip().split(\" \"))\n    n=int(input().strip())\n    #s=input().strip()\n    #a=list(map(int,input().strip().split(\" \")))\n    e=[]\n    d1={}\n    d2={}\n    for _ in range(n):\n        a,b=map(int,input().strip().split(\" \"))\n        e.append((a,b))\n        if a not in d1:\n            d1[a]=0\n        if b not in d2:\n            d2[b]=0\n        d1[a]+=1\n        d2[b]+=1\n    o=n*(n-1)*(n-2)//6\n    for i,j in e:\n        o-=(d1[i]-1)*(d2[j]-1)\n    print(o)\n\n\n\n",
                true
            ],
            [
                "ali=0;from collections import defaultdict, Counter,deque;ali=0\nali=0;\nali=0;from math import sqrt, log10, log, floor, factorial,gcd;ali=0\nali=0;\nali=0;from bisect import bisect_left, bisect_right;ali=0\nali=0;\nali=0;from itertools import permutations,combinations;ali=0\nali=0;\nali=0;import sys, io, os;ali=0\nali=0;\nali=0;input = sys.stdin.readline;ali=0\nali=0;\nali=0;# input=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline;ali=0\nali=0;\nali=0;# sys.setrecursionlimit(10000);ali=0\nali=0;\nali=0;inf = float('inf');ali=0\nali=0;\nali=0;mod = 10 ** 9 + 7;ali=0\nali=0;\ndef yn(a): print(\"YES\" if a else \"NO\");ali=0\nali=0;\nali=0;ceil = lambda a, b: (a + b - 1) // b;ali=0\nali=0;\nali=0;t=int(input());ali=0\nali=0;\nfor i in range(t):\n    ali=0;n=int(input());ali=0\n    ali=0;\n    ali=0;topic=defaultdict(int);ali=0\n    ali=0;\n    ali=0;diff=defaultdict(int);ali=0\n    ali=0;\n    ali=0;m=[];ali=0\n    ali=0;\n    for i in range(n):\n        ali=0;l=[int(i) for i in input().split()];ali=0\n        ali=0;\n        ali=0;m.append(l);ali=0\n        ali=0;\n        ali=0;topic[l[0]]+=1;ali=0\n        ali=0;\n        ali=0;diff[l[1]]+=1;ali=0\n        ali=0;\n    ali=0;counter=n*(n-1)*(n-2)//6;ali=0\n    ali=0;\n    for i in range(n):\n        ali=0;a=topic[m[i][0]];ali=0\n        ali=0;\n        ali=0;b=diff[m[i][1]];ali=0\n        ali=0;\n        ali=0;counter-=(a-1)*(b-1);ali=0\n        ali=0;\n    ali=0;print(counter);ali=0\n    ali=0;\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=[]\n    b=[]\n    for i in range(n):\n        ai,bi=map(int,input().split())\n        ai-=1\n        bi-=1\n        a.append(ai)\n        b.append(bi)\n    ca=[0]*n\n    cb=[0]*n\n    for i in range(n):\n        ca[a[i]]+=1\n        cb[b[i]]+=1\n    nn=0\n    for i in range(n):\n        nn+=(ca[a[i]]-1)*(cb[b[i]]-1)\n    ans=n*(n-1)*(n-2)//6\n    print(ans-nn)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    d1,d2 = {},{}\n    l = []\n    for i in range(n):\n        x,y = map(int, input().split())\n        if x in d1:\n            d1[x]+=1\n        else:\n            d1[x]=1\n        if y in d2:\n            d2[y]+=1\n        else:\n            d2[y]=1\n        l.append([x,y])\n    ans = n*(n-1)*(n-2)//6\n    for i in range(n):\n        ans -= (d1[l[i][0]]-1)*(d2[l[i][1]]-1)\n    print(max(ans,0))\n",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    arr = [list(map(int, input().split())) for i in range(n)]\n    a = [-1] * (n+1)\n    b = [-1] * (n+1)\n    for i in range(n):\n        a[arr[i][0]] += 1\n        b[arr[i][1]] += 1\n    ans = 0\n    for x, y in arr:\n        ans += a[x] * b[y]\n    return n*(n-1)*(n-2)//6 - ans\n\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor i in range(t):\n    print(solve())\n",
                true
            ],
            [
                "import math;import heapq;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());H=1000000000+7\nfor _ in range(I()):\n    n=I()\n    l=[]\n    for i in range(n):\n        l.append(L())\n    d1={};d2={}\n    for i in range(n):\n        d1[l[i][0]]=d1.get(l[i][0],0)+1\n        d2[l[i][1]]=d2.get(l[i][1],0)+1\n    p=0\n    for i in range(n):\n        p+=(d1[l[i][0]]-1)*(d2[l[i][1]]-1)\n    print(n*(n-1)*(n-2)//6  -  p)",
                true
            ],
            [
                "for t in range(int(input())):\n    n = int(input())\n    dx = {}\n    dy = {}\n    arr = []\n    for i in range(n):\n        x, y = [int(k) for k in input().split()]\n        dx[x] = dx.get(x, 0) + 1\n        dy[y] = dy.get(y, 0) + 1\n        arr.append((x, y))\n    ans = n * (n - 1) // 2 * (n - 2) // 3\n    for x, y in arr:\n        # print(f'{x}: {dx[x]}, {y}: {dy[y]}')\n        ans -= (dx[x] - 1) * (dy[y] - 1)\n    print(ans)",
                true
            ],
            [
                "import sys\nLI=lambda:list(map(int,sys.stdin.readline().split()))\nMI=lambda:map(int,sys.stdin.readline().split())\nSI=lambda:sys.stdin.readline().strip('\\n')\nII=lambda:int(sys.stdin.readline())\n\nfor _ in range(II()):\n    n=II()\n    a={}\n    b={}\n    s=[]\n    for i in range(n):\n        x, y=MI()\n        s.append((x,y))\n        a[x]=a.get(x,0)+1\n        b[y]=b.get(y,0)+1\n    ans=n*(n-1)*(n-2)//6\n    for i in range(n):\n        ans-=(a[s[i][0]]-1)*(b[s[i][1]]-1)\n    print(ans)",
                true
            ],
            [
                "import sys\nimport os.path\nfrom collections import *\nimport math\nimport bisect\nimport heapq as hq\nfrom fractions import Fraction\nfrom random import randint\n\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\ninput = sys.stdin.readline\n\n##########################################################\ndef solve():\n    n = int(input())\n    h1 = Counter()\n    h2 = Counter()\n    arr = [0 for i in range(n)]\n    res = 0\n    for i in range(n):\n        arr[i] = [int(x) for x in input().split()]\n        h1[arr[i][0]] += 1\n        h2[arr[i][1]] += 1\n    m = n\n    for i in range(n):\n        x,y = arr[i]\n        z = (h1[x] - 1) * (h2[y] - 1)\n        res += z\n    res = n * (n - 1) * (n - 2) // 6 - res\n\n    print(res)\n\nt = int(input())\nwhile t:\n    t -= 1\n    solve()\n\n##########################################################\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\n#sys.setrecursionlimit(10**7)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\n#Fenwick Tree point update range sum\ndef update_it(bit,i,val):\n    n=len(bit)\n    while(i<n):\n        bit[i]+=val\n        i+=i&(-i)\ndef get_ans(bit,i):\n    n=len(bit)\n    tot=0\n    while(i>0):\n        tot+=bit[i]\n        i-=i&(-i)\n    return tot\ndef hnbhai(tc):\n    n=sb()\n    a=[]\n    b=[]\n    x={}\n    y={}\n    for i in range(n):\n        t=sd()\n        a.append(t[0])\n        b.append(t[1])\n        x[a[-1]]=x.get(a[-1],0)+1\n        y[b[-1]]=y.get(b[-1],0)+1\n    tot=(n*(n-1)*(n-2))//6\n    for i in range(n):\n        tot-=(x[a[i]]-1)*(y[b[i]]-1)\n    print(tot)\nfor _ in range(sb()):\n    hnbhai(_+1)\n",
                true
            ],
            [
                "from collections import Counter\n\ndef solve():\n    # number of students\n    n = int(input())\n    tuples = [list(map(int, input().split())) for _ in range(n)]\n    counter_topic = Counter([a for a,b in tuples])\n    counter_diff = Counter([b for a,b in tuples])\n    \n    all_comb = (n) * (n-2) * (n-1) // 6\n    ans = 0\n    \n    for a,b in tuples:\n        same_topic = counter_topic[a] - 1\n        same_diff = counter_diff[b] - 1\n        ans += (same_topic * same_diff)\n    \n    return all_comb - ans\n    \nfor i in range(int(input())):\n    print(solve())",
                true
            ],
            [
                "import collections\nT = input()\nT = int(T)\n\nfor i in range(T):\n    n = input()\n    n = int(n)\n\n    topics = [0 for _ in range(n)]\n    diffs = [0 for _ in range(n)]\n\n    ans = 0\n    topic_dict = [0 for _ in range(n)]\n    diff_dict = [0 for _ in range(n)]\n\n    for j in range(n):\n        a, b = map(int, input().split())\n        topics[j] = a-1\n        diffs[j] = b-1\n\n        topic_dict[a-1] += 1\n        diff_dict[b-1] += 1\n\n    for t, d in zip(topics, diffs):\n        ans += (topic_dict[t]-1) * (diff_dict[d]-1)\n\n    print((n*(n-1)*(n-2)//6) - ans)\n\n\n",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    b = []\n    c = dict()\n    d = dict()\n    for _ in range(n):\n        a1,b1 = map(int,input().split())\n        a.append(a1)\n        b.append(b1)\n        c[a1] = c.get(a1,0)+1\n        d[b1] = d.get(b1,0)+1\n    #print(a,b,c,d)\n    r = n*(n-1)*(n-2)/6\n    for i in range(n):\n        r -=(c[a[i]]-1)*(d[b[i]]-1)\n    print(int(r))\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "import collections\nimport sys\n\ninput = sys.stdin.readline\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    mat = []\n    x = collections.defaultdict(int)\n    y = collections.defaultdict(int)\n    for i in range(n):\n        a, b = map(int, input().split())\n        x[a] += 1\n        y[b] += 1\n        mat.append([a, b])\n    ans = n * (n - 1) * (n - 2)//6\n    for i in range(n):\n        ans -= (x[mat[i][0]] - 1) * (y[mat[i][1]] - 1)\n    print(ans)",
                true
            ],
            [
                "from collections import defaultdict\nfrom sys import stdout\n\noutput = []\npairs = [(i, j) for i in range(4) for j in range(i + 1, 5)]\nfor _t in range(int(input())):\n    n = int(input())\n    same_topic = defaultdict(list)\n    same_diff = defaultdict(int)\n    for t, d in ((map(int, input().split(\" \"))) for _ in range(n)):\n        same_topic[t].append(d)\n        same_diff[d] += 1\n    invalid = 0\n    for topic, group in same_topic.items():\n        for diff in group:\n            invalid += (len(group) - 1) * (same_diff[diff] - 1)\n    output.append(n * (n - 1) // 2 * (n - 2) // 3 - invalid)\n\nstdout.write(\"\\n\".join(map(str, output)))\n",
                true
            ],
            [
                "T = int(input())\nfrom collections import Counter\nfor _ in range(T):\n    N = int(input())\n    AB = [tuple(map(int,input().split())) for i in range(N)]\n    ans = N*(N-1)*(N-2) // 6\n    ca = Counter()\n    cb = Counter()\n    for a,b in AB:\n        ca[a] += 1\n        cb[b] += 1\n    for a,b in AB:\n        ans -= (ca[a]-1) * (cb[b]-1)\n    print(ans)\n",
                true
            ],
            [
                "from collections import defaultdict, Counter,deque\nfrom math import sqrt, log10, log, floor, factorial,gcd\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations,combinations\nimport sys, io, os\ninput = sys.stdin.readline\n# input=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# sys.setrecursionlimit(10000)\ninf = float('inf')\nmod = 10 ** 9 + 7\ndef yn(a): print(\"YES\" if a else \"NO\")\nceil = lambda a, b: (a + b - 1) // b\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    topic=defaultdict(int)\n    diff=defaultdict(int)\n    m=[]\n    for i in range(n):\n        l=[int(i) for i in input().split()]\n        m.append(l)\n        topic[l[0]]+=1\n        diff[l[1]]+=1\n    nc3=lambda n:n*(n-1)*(n-2)//6\n    counter=nc3(n)\n    for i in range(n):\n        a=topic[m[i][0]]\n        b=diff[m[i][1]]\n        counter-=(a-1)*(b-1)\n    print(counter)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\ndef il(): #Input list\n    return list(map(int,input().split()))\ndef ii(): #Input int\n    return int(input())\ndef imi(): #Input multiple int\n    return map(int,input().split())\ndef ist(): #Input String\n    return input()\n\nT=ii()\nfor _ in range(T):\n    n=ii()\n    li=[]\n\n    t=Counter([])\n    d=Counter([])\n\n    for i in range(n):\n        a,b=imi()\n        t[a]+=1\n        d[b]+=1\n        li.append((a,b))\n    N=n\n    s=0\n    for i in li:\n        a,b=i\n        s+=(t[a]-1)*(d[b]-1)\n    ans=(n*(n-1)*(n-2))//6 - s\n    print(ans)\n\n\n\n",
                true
            ],
            [
                "from sys import *\nfor _ in range(int(stdin.readline())):\n    n=int(stdin.readline())\n    ans=(n*(n-1)*(n-2))\n    ans//=6\n    a=[]\n    left={}\n    right={}\n    for i in range(n):\n        u,v=map(int,stdin.readline().split())\n        a.append([u,v])\n        if u in left:\n            left[u]+=1\n        else:\n            left[u]=1\n        if v in right:\n            right[v]+=1\n        else:\n            right[v]=1\n    for i in range(n):\n        u,v=a[i][0],a[i][1]\n        x=left[u]-1\n        y=right[v]-1\n        ans-=(x*y)\n    stdout.write(str(ans)+\"\\n\")",
                true
            ],
            [
                "from collections import Counter as C\nf=input\nfor i in' '*int(f()):\n    n=int(f())\n    ls=[]\n    l1=C()\n    l2=C()\n    for i in' '*n:\n        a,b=map(int,f().split())\n        ls.append([a,b])\n        l1[a]+=1\n        l2[b]+=1\n    z=n*(n-1)*(n-2)//6\n    for a,b in ls:z-=(l1[a]-1)*(l2[b]-1)\n    print(z)",
                true
            ],
            [
                "from collections import Counter\n\n\ndef cn3(m):\n    return m * (m - 1) * (m - 2) // 6\n\n\ndef solve_case():\n    n = int(input())\n    a = [-1] * n\n    b = [-1] * n\n    for i in range(n):\n        a[i], b[i] = map(int, input().split())\n    ca = Counter(a)\n    cb = Counter(b)\n    # Triplets like:\n    # a = [1, 1, 3]\n    # b = [2, 4, 2]\n    # both a & b have two equal items (\"1\" in a, \"2\" in b)\n    pair_sum = 0\n    for i in range(n):\n        pair_sum += (ca[a[i]] - 1) * (cb[b[i]] - 1)\n    # those cases do not intersect (?)\n    ans = cn3(n) - pair_sum\n    print(ans)\n\n\nT = int(input())\nfor t in range(T):\n    solve_case()\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a, b = [], []\n    c = dict()\n    d = dict()\n    for i in range(n):\n        x, y = [int(i) for i in input().split()]\n        a.append(x)\n        b.append(y)\n        c[x] = c.get(x, 0) + 1\n        d[y] = d.get(y, 0) + 1\n    ans = 0\n    n1 = n\n    for i in range(n):\n        ans += (n1 - 2) * (n1 - 1) / 2 - (c[a[i]] - 1) * (d[b[i]] - 1)\n        n1 -= 1\n    print(int(ans))\n",
                true
            ],
            [
                "import sys\nimport re\n\nif len(sys.argv) > 1 and re.match(re.compile(\"^t[0-9]$\"), sys.argv[1]):\n    import os\n\n    sys.stdin = open(\n        os.path.join(os.path.dirname(os.path.abspath(__file__)), sys.argv[1]), \"r\"\n    )\n\n#######################################################################################\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n\n    ca, cb = [0] * (n + 1), [0] * (n + 1)\n    s = []\n    for _ in range(n):\n        xa, xb = map(int, input().split())\n        ca[xa] += 1\n        cb[xb] += 1\n        s += [(xa, xb)]\n\n    tc = n * (n - 1) * (n - 2) // 6\n\n    for a in s:\n        tc -= (ca[a[0]] - 1) * (cb[a[1]] - 1)\n    print(tc)\n",
                true
            ],
            [
                "t = int(input())\n\nfor t1 in range(t):\n    n = int(input())\n    a = [0] * n\n    b = [0] * n\n    a1 = {}\n    b1 = {}\n    u1 = []\n    u2 = []\n    for i in range(n):\n        fi, se = map(int, input().split())\n        a[i] = fi\n        b[i] = se\n        if a[i] in a1:\n            a1[a[i]] += 1\n        else:\n            a1[a[i]] = 1\n            u1.append(a[i])\n        if b[i] in b1:\n            b1[b[i]] += 1\n        else:\n            b1[b[i]] = 1\n            u2.append(b[i])\n    sum = int(n * (n - 1) * (n - 2) / 6)\n    # print(sum, \"ok\")\n    for i in range(n):\n        # print(i, a1[a[i]], b1[b[i]], sum)\n        sum = sum - (a1[a[i]] - 1) * (b1[b[i]] - 1)\n    print(sum)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a,b = [],[]\n    counta = [-1]*(n+1); countb = [-1]*(n+1)\n    for _ in range(n):\n        x, y = map(int, input().strip().split())\n        a.append(x); b.append(y)\n        counta[x] += 1; countb[y] += 1\n    ans = n*(n-1)*(n-2)//6\n    for i in range(n):\n        ans -= counta[a[i]]*countb[b[i]]\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    rows = [0]*n\n    cols = [0]*n\n    counts = {}\n    for i in range(n):\n        a,b = map(int,input().split())\n        rows[a-1]+=1\n        cols[b-1]+=1\n        if (a-1,b-1) in counts:\n            counts[(a-1,b-1)] += 1\n        else:\n            counts[(a-1,b-1)] = 1\n    total = (n*(n-1)*(n-2))//6\n    for guy in counts:\n        x,y = guy\n        a = counts[guy]\n        total -= (a*(a-1)*(a-2))//6\n        total -= (a*(a-1)*(n-a))//2\n        total -= a*(rows[x]-a)*(cols[y]-a)\n    print(total)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    t = dict()\n    d = dict()\n    arr = list()\n    for i in range(n):\n        a, b = map(int, input().split())\n        arr.append([a, b])\n        try:\n            t[a] += 1\n        except:\n            t[a] = 1\n        try:\n            d[b] += 1\n        except:\n            d[b] = 1\n    ans = n*(n-1)*(n-2)//6\n    for i in range(n):\n        ans -= (t[arr[i][0]] - 1) * (d[arr[i][1]] - 1)\n    print(ans)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\ndef main():\n    N = int(input())\n    AD = {}\n    BD = {}\n    AB = []\n    for _ in range(N):\n        A, B = map(int, input().split())\n        AB.append((A, B))\n        if A in AD: AD[A] += 1\n        else: AD[A] = 1\n        if B in BD: BD[B] += 1\n        else: BD[B] = 1\n    Ans = N * (N - 1) * (N - 2) // 6\n    for A, B in AB:\n        Ans -= (AD[A] - 1) * (BD[B] - 1)\n    print(Ans)\n\nif __name__ == '__main__':\n    T = int(input())\n    for _ in range(T):\n        main()",
                true
            ],
            [
                "# cook your dish here\nfor _ in range(int(input())):\n    n = int(input())\n    d1 = {}\n    d2 = {}\n    ls = []\n    for i in range(n):\n        a, b = [int(j) for j in input().split()]\n        ls.append((a, b))\n        d1[a] = d1.get(a, 0) + 1\n        d2[b] = d2.get(b, 0) + 1\n    ans = (n*(n-1)*(n-2))//6\n    for i, j in ls:\n        ans -= (d1[i] - 1) * (d2[j] - 1)\n    print(ans)",
                true
            ],
            [
                "\nfrom collections import defaultdict\nfrom sys import stdin,stdout\n\nfor _ in range(int(stdin.readline())):\n    n=int(stdin.readline())\n    da,db=defaultdict(int),defaultdict(int)\n    arr=[]\n    for _ in range(n):\n        a,b=map(int, stdin.readline().split())\n        da[a]+=1\n        db[b]+=1\n        arr.append([a,b])\n    ans=0\n    for a,b in arr:\n        ans+=(da[a]-1)*(db[b]-1)\n    stdout.write(str(n*(n-1)*(n-2)//6-ans)+'\\n')\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    cnt1 = [0]*n\n    cnt2 = [0]*n\n    li = []\n    for _ in range(n):\n        line = input().split()\n        a = int(line[0]) - 1\n        b = int(line[1]) - 1\n\n        cnt1[a]+=1\n        cnt2[b]+=1\n        li.append((a,b))\n\n    total = 1\n    for i in range(3):\n        total *= n-i\n    for i in range(1,4):\n        total //= i\n    \n    for a, b in li:\n        total -= (cnt1[a]-1)*(cnt2[b]-1)\n    print(total)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nfrom collections import Counter\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    A=[tuple(map(int,input().split())) for i in range(n)]\n\n    C1=Counter()\n    C2=Counter()\n\n    for x,y in A:\n        C1[x]+=1\n        C2[y]+=1\n\n    ANS=0\n\n    for a,b in A:\n        ANS+=(C1[a]-1)*(C2[b]-1)\n\n    print(n*(n-1)*(n-2)//6-ANS)\n\n\n    \n\n    \n    \n        \n\n    \n",
                true
            ],
            [
                "\nimport collections\nimport math\nimport itertools\nimport  sys\nimport time\nimport random\n\ndef fast_input():\n    return sys.stdin.readline().strip()\n\ninput = fast_input\n\ndef ints_input():\n    return list(int(x) for x in input().split())\n\ndef int_input():\n    return int(input())\n\n\n\ndef solve():\n    n = int_input()\n    a = [None for _ in range(n)]\n    b = [None for _ in range(n)]\n    for i in range(n):\n        a[i], b[i] = ints_input()\n    a_counts = collections.Counter(a)\n    b_counts = collections.Counter(b)\n    a_two_families = 0\n    a_three_families = 0\n    b_two_families = 0\n    b_three_families = 0\n    two_overlaps = 0\n    for i in range(n):\n        a_count = a_counts[a[i]]\n        b_count = b_counts[b[i]]\n        a_two_families += (a_count - 1) * (n - a_count)\n        b_two_families += (b_count - 1) * (n - b_count)\n        a_three_families += (a_count - 1) * (a_count - 2) // 2\n        b_three_families += (b_count - 1) * (b_count - 2) // 2\n        two_overlaps += (a_count - 1) * (b_count - 1)\n    good = (n * (n-1) * (n-2)) // 6 - two_overlaps\n    print(good)\n\n\n\n\n\nif True:\n    for _ in range(int_input()):\n        solve()\nelse:\n    solve()",
                true
            ],
            [
                "import math\nfrom collections import defaultdict, Counter\nfrom bisect import bisect_left\nfrom sys import stdin\n\ninput = stdin.readline\n    \nt = int(input())\n# a = list(map(int, input().split()))\n\nfor _ in range(t):\n    n = int(input())\n    a = []\n    b = defaultdict(int)\n    c = defaultdict(int)\n    for i in range(n):\n        a.append(tuple(map(int, input().split())))\n        b[a[-1][0]] += 1\n        c[a[-1][1]] += 1\n    ans = (n*(n-1)*(n-2))//6\n    for i in range(n):\n        # print((b[a[i][0]]-1) * (c[a[i][1]]-1))\n        ans -= (b[a[i][0]]-1) * (c[a[i][1]]-1)\n    print(ans)\n    \n    ",
                true
            ],
            [
                "\nimport sys\nfrom sys import stdin\n\ntt = int(stdin.readline())\n\nANS = []\nfor loop in range(tt):\n\n    n = int(stdin.readline())\n\n    ab = []\n    anum = {}\n    bnum = {}\n\n    for i in range(n):\n        a,b = map(int,stdin.readline().split())\n        ab.append((a,b))\n\n        if a not in anum:\n            anum[a] = 0\n        if b not in bnum:\n            bnum[b] = 0\n\n        anum[a] += 1\n        bnum[b] += 1\n\n\n    twonl = 0\n    for a in anum:\n        c = anum[a]\n        twonl += c * (c-1) // 2 * (n-c)\n    for b in bnum:\n        c = bnum[b]\n        twonl += c * (c-1) // 2 * (n-c)\n\n    tans = 0\n    for a,b in ab:\n        tans += (anum[a]-1) * (bnum[b]-1)\n\n    aans = 0\n    for a in anum:\n        c = anum[a]\n        aans += c * (c-1) * (c-2) // 6\n    for b in bnum:\n        c = bnum[b]\n        aans += c * (c-1) * (c-2) // 6\n\n    #print (twonl , tans , ans)\n    aans = n*(n-1)*(n-2)//6  - (twonl - tans + aans) #both\n\n\n    #a only\n    dpA = [0,0,0]\n    for a in anum:\n        c = anum[a]\n        dpA[2] += dpA[1] * c\n        dpA[1] += dpA[0] * c\n        dpA[0] += c\n\n    dpB = [0,0,0]\n    for b in bnum:\n        c = bnum[b]\n        dpB[2] += dpB[1] * c\n        dpB[1] += dpB[0] * c\n        dpB[0] += c\n\n    twoans = dpA[-1] + dpB[-1]\n    ANS.append(str(twoans - aans))\n\nprint (\"\\n\".join(ANS))",
                true
            ],
            [
                "from collections import defaultdict, deque, Counter\nfrom heapq import heapify, heappop, heappush\nimport math\nfrom copy import deepcopy\nfrom itertools import combinations, permutations, product, combinations_with_replacement\nfrom bisect import bisect_left, bisect_right\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\ndef getN():\n    return int(input())\ndef getNM():\n    return map(int, input().split())\ndef getList():\n    return list(map(int, input().split()))\ndef getListGraph():\n    return list(map(lambda x:int(x) - 1, input().split()))\ndef getArray(intn):\n    return [int(input()) for i in range(intn)]\n\nmod = 10 ** 9 + 7\nMOD = 998244353\n# sys.setrecursionlimit(1000000)\ninf = float('inf')\neps = 10 ** (-10)\ndy = [0, 1, 0, -1]\ndx = [1, 0, -1, 0]\n\n#############\n# Main Code #\n#############\n\nT = getN()\nfor i in range(T):\n    N = getN()\n    a_cnt = [0] * (N + 1)\n    b_cnt = [0] * (N + 1)\n\n    B = []\n    for i in range(N):\n        a, b = getNM()\n        a_cnt[a] += 1\n        b_cnt[b] += 1\n        B.append([a, b])\n\n    # \u5168\u4f53\u304b\u3089AnB\u3092\u5f15\u3051\u3070\u3044\u3044\n    all = N * (N - 1) * (N - 2) // 6\n    cap = 0\n    for i in range(N):\n        cap += (a_cnt[B[i][0]] - 1) * (b_cnt[B[i][1]] - 1)\n\n    print(all - cap)",
                true
            ],
            [
                "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = [-1]*n\n    b = [-1]*n\n\n    prefA = Counter()\n    prefB = Counter()\n    suffA = Counter()\n    suffB = Counter()\n    for i in range(n):\n        x,y = map(int,input().split())\n        a[i] = x\n        b[i] = y\n\n        suffA[x] += 1\n        suffB[y] += 1\n    \n    bad = 0\n    for i in range(n):\n        suffA[a[i]] -= 1\n        suffB[b[i]] -= 1\n\n        case1 = prefA[a[i]] * suffB[b[i]]\n        case2 = suffA[a[i]] * suffB[b[i]]\n        case3 = suffA[a[i]] * prefB[b[i]]\n        case4 = prefA[a[i]] * prefB[b[i]]\n\n        bad += case1 + case2 + case3 + case4\n\n        prefA[a[i]] += 1\n        prefB[b[i]] += 1\n\n    ans = n * (n-1) * (n-2) // 6 - bad\n    print(ans)\n\n\n\nfor nt in range(int(input())):\n    solve()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    ans=(n*(n-1)*(n-2))\n    ans//=6\n    a=[]\n    left={}\n    right={}\n    for i in range(n):\n        u,v=map(int,input().split())\n        a.append([u,v])\n        if u in left:\n            left[u]+=1\n        else:\n            left[u]=1\n        if v in right:\n            right[v]+=1\n        else:\n            right[v]=1\n    for i in range(n):\n        u,v=a[i][0],a[i][1]\n        x=left[u]-1\n        y=right[v]-1\n        ans-=(x*y)\n    print(ans)",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    arr = []\n    a = [0] * (n + 1)\n    b = [0] * (n + 1)\n    for i in range(n):\n        x, y = map(int, input().split())\n        arr.append((x, y))\n        a[x] += 1\n        b[y] += 1\n    res = ((n - 2) * (n - 1) * n) // 6\n    for i in range(n):\n        x, y = arr[i]\n        res -= (a[x] - 1) * (b[y] - 1)\n    print(res)\n\n\n\nq = int(input())\nfor _ in range(q):\n    solve()\n",
                true
            ],
            [
                "inf = float('inf')\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\nimport array\n\n# sys.setrecursionlimit(10 ** 9)\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef maps(): return [int(i) for i in input().split()]\n\n\nlogging.basicConfig(\n    format=\"%(message)s\",\n    level=logging.WARNING,\n)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\n\nfrom collections import Counter, defaultdict\n\nfor i in range(*maps()):\n    n, = maps()\n    A = []\n    da, db = defaultdict(int), defaultdict(int)\n    for __ in range(n):\n        a, b = maps()\n        da[a] += 1\n        db[b] += 1\n        A.append((a, b))\n    tot = n * (n - 1) * (n - 2) // 6\n    for a, b in A:\n        tot -= (da[a] - 1) * (db[b] - 1) #removing all the points which are parallel to a or b\n    print(tot)\n",
                true
            ],
            [
                "from math import *\n#from bisect import *\nfrom collections import *\n#from random import *\n#from decimal import *\"\"\"\n#from heapq import *\n#from itertools import *\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return map(int,input().split())\nt=inp()\nwhile(t):\n    t-=1\n    n=inp()\n    topic={}\n    diff={}\n    res=(n*(n-1)*(n-2))//6\n    r=[]\n    for i in range(n):\n        a,b=ma()\n        r.append([a,b])\n        try:\n            topic[a].append(b)\n        except:\n            topic[a]=[b]\n        try:\n            diff[b].append(a)\n        except:\n            diff[b]=[a]\n    ex=0\n    store={}\n    vis=set()\n    for i in range(n):\n        z=r[i][0]\n        if(z in vis):\n            continue\n        vis.add(z)\n        if(len(topic[z])<=1):\n            continue\n        for j in range(len(topic[z])):\n            curdiff=topic[z][j]\n            if(len(diff[curdiff])<=1):\n                continue\n            fi=len(topic[z])-1\n            pro=len(diff[curdiff])-1\n            res-=(pro)*fi\n    print(res)\n            \n            \n        \n        \n    \n        \n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nMonocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "#for line in sys.stdin.readlines()...line = line.strip()\n#list(map(int,input().split(\" \")))\n#list(itertools.permutations([..,..,..]))\n#list(itertools.combinations([..,..,..], 3)\n\nimport sys\nimport math\nfrom math import log2 as lg\nfrom collections import deque\nimport random\nimport heapq\nimport itertools\nconst = 1000000007\n\nn=int(input())\nfor i in range(n):\n    first = input().split(\" \")\n    second = input().split(\" \")\n    f,s = len(first[0]) + int(first[1]), len(second[0]) + int(second[1])\n    if f<s: print(\"<\")\n    elif f>s: print(\">\")\n    else:\n        found = False\n        for i in range(min(len(first[0]),len(second[0]))):\n            if int(first[0][i]) < int(second[0][i]):\n                print(\"<\")\n                found = True\n                break\n            elif int(first[0][i]) > int(second[0][i]):\n                print(\">\")\n                found = True\n                break\n        if not found:\n            if len(first[0]) > len(second[0]):\n                if int(first[0][len(second[0]):]) != 0:\n                    print(\">\")\n                    found = True\n            elif len(second[0]) > len(first[0]):\n                if int(second[0][len(first[0]):]) != 0:\n                    print(\"<\")\n                    found = True\n        if not found: print(\"=\")\n        \n        \n            \n",
                true
            ],
            [
                "# cook your dish here\ndef check(s):\n    if s==\"\":\n        return True\n    for i in s:\n        if i!='0':\n            return False\n    return True\n        \nt=int(input())\nfor i in range(t):\n    xx,yy=[int(x) for x in input().split(' ')]\n    pp,qq=[int(x) for x in input().split(' ')]\n    sx=len(str(xx))+yy\n    sy=len(str(pp))+qq\n    if sx>sy:\n        print('>')\n    elif sx<sy:\n        print('<')\n    else:\n        p=len(str(xx))\n        q=len(str(pp))\n        d=min(p,q)\n        t1=int(str(xx)[0:d])\n        t2=int(str(pp)[0:d])\n        if(t1==t2):\n            if(len(str(xx))!=d):\n                if check(str(xx)[d:]):\n                    print('=')\n                    continue\n                else:\n                    print('>')\n                    continue\n                \n            if(len(str(pp))!=d):\n                if check(str(pp)[d:]):\n                    print('=')\n                    continue\n                else:\n                    print('<')\n                    continue\n            if len(str(xx))==len(str(pp))==d:\n                print('=')\n                continue\n        if t1>t2:\n            print('>')\n        else:\n            print('<')\n        \n    \n        \n        ",
                true
            ],
            [
                "\nt = int(input())\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    d1 = len(str(x1)) + p1\n    d2 = len(str(x2)) + p2\n    if d1 > d2:\n        print(\">\")\n        continue\n    if d1 < d2:\n        print(\"<\")\n        continue\n    d = abs(p1 - p2)\n    n1 = x1\n    n2 = x2\n    if p1 > p2:\n        n1 = int(str(x1) + \"0\" * d)\n    else:\n        n2 = int(str(x2) + \"0\" * d)\n    if n1 == n2:\n        print(\"=\")\n        continue\n    if n1 > n2:\n        print(\">\")\n        continue\n    if n1 < n2:\n        print(\"<\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x1, p1 = [int(x) for x in input().split()]\n    x2, p2 = [int(x) for x in input().split()]\n    mn = min(p1, p2)\n    p1 = p1 - mn\n    p2 = p2 - mn\n    if len(str(x1))+p1 > len(str(x2))+p2:\n        print('>')\n    elif len(str(x1))+p1 < len(str(x2))+p2:\n        print('<')\n    else:\n        a = str(x1)+'0'*p1\n        b = str(x2)+'0'*p2\n        if a > b:\n            print('>')\n        elif a < b:\n            print('<')\n        else:\n            print('=')\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    #n=int(input())\n    a,v1=map(int, input().split())\n    b,v2 = map(int, input().split())\n    #a*=10**v1\n    #b*=10**v2\n    le=len(str(a))+v1\n    le1=len(str(b))+v2\n    if a<b:\n        if v1<=v2:\n            print(\"<\")\n        else:\n            if le==le1:\n                mi=min(v1,v2)\n                v1-=mi\n                v2-=mi\n                a*=10**v1\n                b*=10**v2\n                #print(a, b)\n                if a==b:\n                    print(\"=\")\n                else:\n                    print(\"<\" if a<b else \">\")\n            else:\n                print(\"<\" if le<le1 else \">\")\n\n    elif a==b:\n        if v1==v2:\n            print(\"=\")\n        else:\n            print(\">\" if v1>v2 else \"<\")\n    else:\n        if v1>=v2:\n            print(\">\")\n        else:\n            if le==le1:\n                mi=min(v1,v2)\n                v1 -= mi\n                v2 -= mi\n                a *= 10 ** v1\n                b *= 10 ** v2\n                if a==b:\n                    print(\"=\")\n                else:\n                    print(\"<\" if a<b else \">\")\n            else:\n                print(\"<\" if le<le1 else \">\")",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ndef iinput(): return int(input())\ndef sinput(): return input().rstrip()\ndef i0input(): return int(input()) - 1\ndef linput(): return list(input().split())\ndef liinput(): return list(map(int, input().split()))\ndef miinput(): return map(int, input().split())\ndef li0input(): return list(map(lambda x: int(x) - 1, input().split()))\ndef mi0input(): return map(lambda x: int(x) - 1, input().split())\nINF = 10**20\nMOD = 1000000007\n\nt = iinput()\nfor _ in [0] * t:\n    x1, p1 = liinput()\n    x2, p2 = liinput()\n    l1 = len(str(x1)) + p1\n    l2 = len(str(x2)) + p2\n    if l1 > l2:\n        print('>')\n    elif l1 < l2:\n        print('<')\n    else:\n        l1 = max(0, len(str(x2)) - len(str(x1)))\n        l2 = max(0, len(str(x1)) - len(str(x2)))\n        x1 *= 10 ** l1\n        x2 *= 10 ** l2\n        if x1 > x2:\n            print('>')\n        elif x1 < x2:\n            print('<')\n        else:\n            print('=')",
                true
            ],
            [
                "for _ in range(int(input())):\n    x1, y1 = input().split()\n    y1 = int(y1)\n    x2, y2 = input().split()\n    y2 = int(y2)\n    lx1 = len(x1)\n    lx2 = len(x2)\n    if lx1 + y1 > lx2 + y2:\n        print(\">\")\n    elif lx1 + y1 < lx2 + y2:\n        print(\"<\")\n    else:\n        if lx1 >= lx2:\n            x2 += \"0\" * (lx1 - lx2)\n        else:\n            x1 += \"0\" * (lx2 - lx1)\n        if x1 > x2:\n            print(\">\")\n        elif x1 == x2:\n            print(\"=\")\n        else:\n            print(\"<\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    x1, p1 = map(str, input().split())\n    x2, p2 = map(str, input().split())\n    l1 = len(x1) + int(p1)\n    l2 = len(x2) + int(p2)\n    x1 = x1.strip('0')\n    x2 = x2.strip('0')\n    if l1 > l2:\n        print('>')\n    elif l1 < l2:\n        print('<')\n    else:\n        ans = None\n        for i in range(min(len(x1), len(x2))):\n            if x1[i] > x2[i]:\n                ans = '>'\n                break\n            elif x1[i] < x2[i]:\n                ans = '<'\n                break\n        if ans is None:\n            if len(x1) == len(x2):\n                print('=')\n            elif len(x1) > len(x2):\n                print('>')\n            else:\n                print('<')\n        else:\n            print(ans)\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    x1, p1 = input().split()\n    x2, p2 = input().split()\n    p1 = int(p1) + len(x1)\n    p2 = int(p2) + len(x2)\n    if p1 > p2:\n        print('>')\n        continue\n    elif p1 < p2:\n        print('<')\n        continue\n\n    while len(x1) < len(x2):\n        x1 += '0'\n    while len(x2) < len(x1):\n        x2 += '0'\n    x2 = int(x2)\n    x1 = int(x1)\n    if (x1 > x2):\n        print('>')\n    elif (x1 < x2):\n        print('<')\n    else:\n        print('=')\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,p = map(int,input().split())\n    y,q = map(int,input().split())\n    if x<y:\n        while x<y:\n            x *= 10\n            p -= 1\n    else:\n        while x>y:\n            y *= 10\n            q -= 1\n    if x == y:\n        if p == q:\n            print(\"=\")\n        elif p<q:\n            print(\"<\")\n        else:\n            print(\">\")\n    if x>y:\n        if p >= q:\n            print(\">\")\n        else:\n            print(\"<\")\n    if x<y:\n        if p <= q:\n            print(\"<\")\n        else:\n            print(\">\")",
                true
            ],
            [
                "import math\n \nt=int(input())\n \nfor i in range(t):\n    x1,p1=map(int,input().split())\n    x2,p2=map(int,input().split())\n    if math.log10(x1/x2)+(p1-p2)>0:\n        print('>')\n    elif math.log10(x1/x2)+(p1-p2)<0:\n        print('<')\n    else:\n        print('=')",
                true
            ],
            [
                "if __name__ == '__main__':\n    for _ in range(int(input())):\n        x1, p1 = input().split()\n        x2, p2 = input().split()\n\n        n1 = len(x1)\n        n2 = len(x2)\n        x1, p1 = int(x1), int(p1)\n        x2, p2 = int(x2), int(p2)\n\n\n        if n1 < n2:\n            v = (n2 - n1)\n            power = min(p1, v)\n            x1 *= 10 ** power\n            p1 -= power\n        elif n1 > n2:\n            v = (n1 - n2)\n            power = min(p2, v)\n            x2 *= 10 ** power\n            p2 -= power\n\n        if p1 > p2:\n            print(\">\")\n        elif p1 < p2:\n            print(\"<\")\n        else:\n            if x1 > x2:\n                print(\">\")\n            elif x1 < x2:\n                print(\"<\")\n            else:\n                print(\"=\")\n\n\n",
                true
            ],
            [
                "def give(x1):\n    f = False\n    t = \"\"\n    for i in x1[::-1]:\n        if f:\n            t += i\n        elif i != \"0\":\n            f = True\n            t += i\n    return t[::-1]\n\n\ndef solve(x1, p1, x2, p2):\n    if len(x1) + int(p1) > len(x2) + int(p2):\n        return \">\"\n    elif len(x1) + int(p1) < len(x2) + int(p2):\n        return \"<\"\n    t1 = give(x1)\n    t2 = give(x2)\n    if t1 > t2:\n        return \">\"\n    if t1 == t2:\n        return \"=\"\n    return \"<\"\n\nfor _ in range(int(input())):\n    x1, p1 = map(str, input().split())\n    x2, p2 = map(str, input().split())\n    print(solve(x1, p1, x2, p2))",
                true
            ],
            [
                "'''input\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\n'''\n\n\n\n\n \nfrom bisect import bisect_right as bl\nfrom random import randint as R\nRI = lambda : [int(_x) for _x in input().split()]\nII = lambda : int(input())\n\nimport sys\n\nfor _ in range(II()):\n    \n    a,b = RI()\n    x,y = RI()\n\n    if len(str(a)) > len(str(x)):\n        diff = len(str(a)) - len(str(x))\n        a/=10**diff\n        b += diff\n\n    elif len(str(a)) < len(str(x)):\n        diff = -len(str(a)) + len(str(x))\n        x/=10**diff\n        y += diff\n\n\n    if b>y:\n        print (\">\")\n    elif b<y:\n        print (\"<\")\n    else:\n        if a==x:\n            print (\"=\")\n        elif a>x:\n            print (\">\")\n        else:\n            print (\"<\")",
                true
            ],
            [
                "T = int(input())\nfor _ in range(T):\n    x, px = map(int, input().split())\n    y, py = map(int, input().split())\n    while x < 1e6:\n        x *= 10\n        px -= 1\n    while y < 1e6:\n        y *= 10\n        py -= 1\n\n    if px > py:\n        print(\">\")\n    elif px < py:\n        print(\"<\")\n    else:\n        if x > y:\n            print(\">\")\n        elif x < y:\n            print(\"<\")\n        else:\n            print(\"=\")\n",
                true
            ],
            [
                "\n\n\nfor _ in range(int(input())):\n    x1, p1 = list(map(int, input().split()))\n    x2, p2 = list(map(int, input().split()))\n    l1 = len(str(x1))\n    l2 = len(str(x2))\n    if (l1 + p1) != (l2 + p2):\n        if (l1 + p1) > (l2 + p2):\n            print(\">\")\n            continue\n        elif (l1 + p1) < (l2 + p2):\n            print(\"<\")\n            continue\n    Min = max(l1, l2)\n    s1 = str(x1)\n    s2 = str(x2)\n    while len(s1) < Min:\n        s1 += '0'\n    while len(s2) < Min:\n        s2 += '0'\n    if s1 > s2:\n        print(\">\")\n    elif s1 < s2:\n        print(\"<\")\n    else:\n        print(\"=\")",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    x1,p1=input().split()\n    x2,p2=input().split()\n    temp1=len(x1)\n    temp2=len(x2)\n    x1=int(x1.rstrip('0'))\n    x2=int(x2.rstrip('0'))\n    l1=len(str(x1))\n    l2=len(str(x2))\n    p1=int(p1)+temp1-l1\n    p2=int(p2)+temp2-l2\n    if(x1>x2):\n        if(l1+p1>l2+p2):\n            print('>')\n        elif(l1+p1==l2+p2):\n            if(x1>x2*10**(l1-l2)):\n                print('>')\n            else:\n                print('<')\n        else:\n            print('<')\n    elif(x1<x2):\n        if(l1+p1<l2+p2):\n            print('<')\n        elif(l1+p1==l2+p2):\n            if(x1*10**(l2-l1)<x2):\n                print('<')\n            else:\n                print('>')\n        else:\n            print('>')\n    else:\n        if(p1>p2):\n            print('>')\n        elif(p1<p2):\n            print('<')\n        else:\n            print('=')",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    while x1 >= 10:\n        x1 = x1 / 10\n        p1 += 1\n    while x2 >= 10:\n        x2 = x2 / 10\n        p2 += 1\n\n    if p1 > p2:\n        print(\">\")\n    elif p1 < p2:\n        print(\"<\")\n    elif p1 == p2:\n        if x1 < x2:\n            print(\"<\")\n        elif x1 > x2:\n            print(\">\")\n        else:\n            print(\"=\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,p = map(int,input().split())\n    y,q = map(int,input().split())\n    if len(str(x))+p > len(str(y))+q:\n        print(\">\")\n    elif len(str(x))+p < len(str(y))+q:\n        print(\"<\")\n    else:\n        if p > q:\n            x = x*(10**(p-q))\n        if q > p:\n            y = y*(10**(q-p))\n        if x > y:\n            print(\">\")\n        elif y > x:\n            print(\"<\")\n        else:\n            print(\"=\")",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    s1 = str(a[0])\n    s2 = str(b[0])\n    if len(s1)+a[1]>len(s2)+b[1]:\n        print(\">\")\n    elif len(s1)+a[1]<len(s2)+b[1]:\n        print(\"<\")\n    elif len(s1)+a[1]==len(s2)+b[1]:\n        m = max(len(s1), len(s2))\n        if m==len(s1):\n            val = len(s1) - len(s2)\n            while val>0:\n                s2 = s2 + \"0\"\n                val = val - 1\n        else:\n            val = len(s2) - len(s1)\n            while val>0:\n                s1 = s1 + \"0\"\n                val = val -1\n        if s1>s2:\n            print(\">\")\n        elif s1==s2:\n            print(\"=\")\n        else:\n            print(\"<\")\n    \n    ",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    n1, p1 = (int(x) for x in input().split())\n    n2, p2 = (int(x) for x in input().split())\n    d1, d2 = math.log10(n1)+ p1, math.log10(n2) + p2\n    print(\"=\") if abs(d1-d2) < 0.0000001 else print(\">\") if d1 > d2 else print(\"<\")",
                true
            ],
            [
                "import sys\nimport math\nimport copy\n \ninput = sys.stdin.readline\n \n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef inltstr():\n    return(list(map(str,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\ndef factorial(n):\n    if n == 1:\n        return n\n    elif n < 1:\n        return (\"NA\")\n    else:\n        return n*factorial(n-1)\ndef coeffBin(k):\n    return factorial(k + 1) / (factorial(2) * (factorial(k - 1)))\n\n###\n\ndef solve(f, s):\n    res = None\n\n    s1 = str(f[0])\n    s2 = str(s[0])\n\n    if len(s1) + f[1] < len(s2) + s[1]:\n        return '<'\n    elif len(s1) + f[1] > len(s2) + s[1]:\n        return '>'\n    else:\n        mi = s1 if f[0] < s[0] else s2\n        ma = s1 if f[0] > s[0] else s2\n        check = 0\n        for i in range(0, len(mi)):\n            if s1[i] != s2[i]:\n                check = 1 if int(s1[i]) < int(s2[i]) else 2\n                break\n\n        if check == 0 and len(s1) != len(s2) and int(ma[len(mi):len(ma)]) != 0:\n            return '>' if f[0] > s[0] else '<'\n        \n        if check == 0:\n            return '='\n        elif check == 1:\n            return '<'\n        elif check == 2:\n            return '>'\n\n    return res\n\nif __name__ == \"__main__\":\n    res = []\n    iter = inp()\n    i = 0\n    while i < iter:\n        f = inlt()\n        s = inlt()\n        result = solve(f, s)\n        res.append(result)\n        i += 1\n\n    for r in res:\n        print(r)",
                true
            ],
            [
                "#!/usr/bin/env pypy3\n\nfrom sys import stdin, stdout\n\ndef input(): return stdin.readline().strip()\ndef read_int_list(): return list(map(int, input().split()))\ndef read_int_tuple(): return tuple(map(int, input().split()))\ndef read_int(): return int(input())\n\n### CODE HERE\n\ndef ans(t1, p1, t2, p2):\n    p = min(p1, p2)\n    p1 -= p\n    p2 -= p\n    if p1 > 15: return '>'\n    if p2 > 15: return '<'\n    t1*= 10**p1\n    t2*= 10**p2\n    if t1 > t2: return '>'\n    if t1 < t2: return '<'\n    return '='\n\nfor _ in range(read_int()):\n    t1, p1 = read_int_tuple()\n    t2, p2 = read_int_tuple()\n    print(ans(t1, p1, t2, p2))",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    a,b=input().split()\n    c,d=input().split()\n    b=int(b);d=int(d)\n    v1=len(a)+b;v2=len(c)+d\n    if(v1<v2):\n        print(\"<\")\n    elif(v1>v2):\n        print(\">\")\n    else:\n        temp=min(v1,7)\n        a+=\"0\"*(temp-len(a))\n        c+=\"0\"*(temp-len(c))\n        if(a<c):\n            print(\"<\")\n        elif(a>c):\n            print(\">\")\n        else:\n            print(\"=\")",
                true
            ],
            [
                "for _ in range(eval(input())):\n    x1, p1 = input().split()\n    x2, p2 = input().split()\n    p1 = int(p1)\n    p2 = int(p2)\n    l1 = len(x1) + p1\n    l2 = len(x2) + p2\n    if l1 > l2:\n        print(\">\")\n        continue\n    if l1 < l2:\n        print(\"<\")\n        continue\n    if p1 > p2:\n        p1 -= p2\n        p2 = 0\n    else:\n        p2 -= p1\n        p1 = 0\n    x1 = x1 + p1 * \"0\"\n    x2 = x2 + p2 * \"0\"\n    if x1 == x2:\n        print(\"=\")\n    elif x1 < x2:\n        print(\"<\")\n    else:\n        print(\">\")\n",
                true
            ],
            [
                "import sys\n\ndef getres(x1,x2,p1,p2):\n    l1=len(x1)+p1\n    l2=len(x2)+p2\n    if l1>l2: return \">\"\n    elif l1<l2: return \"<\"\n    else:\n        i=0\n        while i<max(len(x1),len(x2)):\n            if i>=len(x1): \n                f,s=\"0\",x2[i]\n            elif i>=len(x2):\n                f,s=x1[i],\"0\"\n            else:\n                f,s=x1[i],x2[i]\n            if f>s: return \">\"\n            elif s>f: return \"<\"\n            i+=1\n    return \"=\"\n\nn=int(sys.stdin.readline())\nfor i in range(n):\n    x1,p1=map(int, sys.stdin.readline().split())\n    x2,p2=map(int, sys.stdin.readline().split())\n\n    sys.stdout.write(getres(str(x1),str(x2),p1,p2)+\"\\n\")",
                true
            ],
            [
                "def solve_test():\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    minimum = min(p1, p2)\n    p1 -= minimum\n    p2 -= minimum\n    if p1 >= 7:\n        return \">\"\n    if p2 >= 7:\n        return \"<\"\n    for _ in range(p1):\n        x1 *= 10\n    for _ in range(p2):\n        x2 *= 10\n    if x1 < x2:\n        return \"<\"\n    elif x1 > x2:\n        return \">\"\n    else:\n        return \"=\"\n\n\ndef main():\n    tests = int(input())\n    for _ in range(tests):\n        answer = solve_test()\n        print(answer)\n\n\nif __name__ == \"__main__\":\n    main()\n",
                true
            ],
            [
                "import sys\nfrom collections import deque\nimport math\nfrom bisect import bisect_left\nfrom functools import cmp_to_key\ndef II():\n    return int(sys.stdin.readline())\n \ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n    return map(int, sys.stdin.readline().split())\n \ndef SI():\n    return sys.stdin.readline().strip()\n \ndef FACT(n, mod):\n    s = 1\n    facts = [1]\n    for i in range(1,n+1):\n        s*=i\n        s%=mod\n        facts.append(s)\n    return facts[n]\n \ndef C(n, k, mod):\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\n \ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    a,b = map(int,input().split())\n    p,r = map(int, input().split())\n    if len(str(a))+b>len(str(p))+r:\n        print(\">\")\n    elif len(str(a))+b<len(str(p))+r:\n        print(\"<\")\n    else:\n        if b>=r:\n            b=b-r\n            r=0\n        else:\n            r=r-b\n            b=0\n        if a*(10**b)>p*(10**r):\n            print(\">\")\n        elif a*(10**b)<p*(10**r):\n            print(\"<\")\n        else:\n            print(\"=\")",
                true
            ],
            [
                "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\ninteractive = False\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\n\nflush = sys.stdout.flush\nif interactive and not testing:\n    input = sys.stdin.readline\nelse:\n    inputData = InputData()\n    input = inputData.input\n\ndef intin():\n    return(int(eval(input())))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(eval(input())))\ndef strin():\n    return eval(input())\ndef lout(l, sep=\"\\n\", toStr=True):\n    print((sep.join(list(map(str, l)) if toStr else l)))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print((args[0] if len(args)==1 else args))\n    if kargs: print([(k,v) for k,v in list(kargs.items())])\ndef ask(q):\n    sys.stdout.write(str(q)+'\\n')\n    flush()\n    return intin()\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\ndef l(x):\n    return len(str(x))\ndef main():\n    x1,p1 = intlin()\n    x2,p2 = intlin()\n    if l(x1)+p1 > l(x2)+p2:\n        return '>'\n    elif l(x1)+p1 < l(x2)+p2:\n        return '<'\n    if l(x1) > l(x2):\n        x2 *= 10**(l(x1)-l(x2))\n    elif l(x1) < l(x2):\n        x1 *= 10**(l(x2)-l(x1))\n    if x1 > x2:\n        return '>'\n    elif x1 < x2:\n        return '<'\n    return '='\n    \n\nanss = []\nfor _ in range(intin()):\n    anss.append(main())\n    # anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print((int(round(time() * 1000))  - start_time))\n",
                true
            ],
            [
                "def countOfNum (c):\n    cnt=0\n    while c!=0:\n        c//=10\n        cnt+=1\n    return (cnt)\nt=int(input())\nfor q in range (t):\n    x,p=map(int,input().split())\n    y, o = map(int, input().split())\n    m=countOfNum(x)+p\n    n=countOfNum(y)+o\n    if (m>n):\n        print('>')\n    elif (m<n):\n        print('<')\n    else:\n        m-=p\n        n-=o\n        P=max(m,n)\n        x*=(10**(P-m))\n        y*=(10**(P-n))\n        if (x>y):\n            print('>')\n        elif (x<y):\n            print('<')\n        else:\n            print('=')",
                true
            ],
            [
                "def solve_test():\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    minimum = min(p1, p2)\n    p1 -= minimum\n    p2 -= minimum\n    if p1 >= 7:\n        return \">\"\n    if p2 >= 7:\n        return \"<\"\n    for _ in range(p1):\n        x1 *= 10\n    for _ in range(p2):\n        x2 *= 10\n    if x1 < x2:\n        return \"<\"\n    elif x1 == x2:\n        return \"=\"\n    else:\n        return \">\"\n\n\ndef main():\n    tests = int(input())\n    for _ in range(tests):\n        answer = solve_test()\n        print(answer)\n\n\nif __name__ == \"__main__\":\n    main()\n",
                true
            ],
            [
                "\n\ntest = int(input())\n\nfor t in range(test):\n    \n    \n    b1, e1 = list(map(int, input().strip().split()))\n    b2, e2 = list(map(int, input().strip().split()))\n\n\n    if e1 >= e2:\n        remaining = e1 - e2\n        \n        while b1 <= b2 and remaining > 0:\n            b1 *= 10\n            remaining -= 1\n        \n        if b1 < b2:\n            print('<')\n        elif b1 > b2:\n            print('>')\n        else:\n            print('=')\n\n        \n    else:\n        remaining = e2 - e1\n        \n        while b1 >= b2 and remaining > 0:\n            b2 *= 10\n            remaining -= 1\n        \n        if b1 < b2:\n            print('<')\n        elif b1 > b2:\n            print('>')\n        else:\n            print('=')",
                true
            ],
            [
                "for _ in range(int(input())):\n    \n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n\n    gu = len(str(x1)) +p1\n    a2c = len(str(x2)) +p2\n    if (gu> a2c):\n        print(\">\")\n    elif (gu< a2c):\n        print(\"<\")\n    else:\n        a = min(p1, p2)\n        p1 = p1 -a\n        p2 = p2 - a\n\n\n\n        gullu = (p1 *'0')\n        gul = str(x1) + gullu\n        a20 = (p2 *'0')\n        gull = str(x2) + a20\n        if (int(gul) > int(gull)):\n            print(\">\")\n        elif (int(gul) == int(gull)):\n            print(\"=\")\n        else:\n            print( \"<\" )",
                true
            ],
            [
                "#####----ANTARA KUNDU----####\nimport random\nfrom collections import Counter, defaultdict\nfrom copy import deepcopy as dc\nimport math\ntry:\n    t=int(input())\n    for tt in range(1,t+1):\n        #n=int(input())\n        #a=list(map(int,input().split()))\n        x,y=map(int,input().split())\n        x1,y1=map(int,input().split())\n        while x%10==0:\n            y+=1\n            x//=10\n        while x1%10==0:\n            y1+=1\n            x1//=10\n        flag=0\n        a,b=str(x),str(x1)\n        if y1==y:\n            flag=1\n            if x1==x:\n                print('=')\n            elif x1>x:\n                print('<')\n            else:\n                print('>')\n        elif len(a)+y>len(b)+y1:\n            print('>')\n            flag=1\n        elif len(a)+y<len(b)+y1:\n            print('<')\n            flag=1\n        j=0\n        for i in range(min(len(a),len(b))):\n            if flag==1:\n                break\n            if a[i]>b[i]:\n                print('>')\n                flag=1\n            elif a[i]<b[i]:\n                print('<')    #1220 1320\n                flag=1\n            j+=1\n\n        if(flag==0):\n          #  print(len(a),len(b),i,j)\n            if j<len(a):\n                print('>')\n            elif j<len(b):\n                print('<')\n            else:\n                print('=')\n        \nexcept EOFError as e:\n    pass",
                true
            ],
            [
                "import math\nimport math as m\ndef L():\n    return list(map(int, input().split()))\ndef I():\n    return int(input())\ndef M():\n    return map(int, input().split())\n# def sortzip(arr1,arr2,ForS):\n#     return sorted(zip(arr1,arr2), key=lambda x:x[ForS])\nfrom math import sqrt\nfrom itertools import count, islice\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n) - 1)))\n\ndef solve():\n    a,b = M()\n    c,d = M()\n\n    if len(str(a)) + b > len(str(c)) + d:\n        print(\">\")\n        return\n    elif len(str(a)) + b < len(str(c)) + d:\n        print(\"<\")\n        return\n    else:\n        m  =len(str(a))\n        n = len(str(c))\n        if m == n:\n            if a > c:\n                print(\">\")\n                return\n            elif a < c:\n                print(\"<\")\n                return\n            else:\n                print(\"=\")\n\n                return\n        if m > n:\n            c *= 10**(m-n)\n            # print(len(str(a)), len(str(c)))\n            if a > c:\n                print(\">\")\n                return\n            elif a < c:\n                print(\"<\")\n                return\n            else:\n                print(\"=\")\n                return\n        elif m < n:\n            a *= 10**(n-m)\n            # print(len(str(a)), len(str(c)))\n            if a > c:\n                print(\">\")\n                return\n            elif a < c:\n                print(\"<\")\n                return\n            else:\n                print(\"=\")\n                return\nfor _ in range(I()):\n    solve()\n\n\n",
                true
            ],
            [
                "from collections import defaultdict as dd\nimport math\nimport sys\ninput=sys.stdin.readline\ndef nn():\n    return int(input())\n \ndef li():\n    return list(input())\n \ndef mi():\n    return map(int, input().split())\n \ndef lm():\n    return list(map(int, input().split()))\n \n \n \ndef solve():\n    n1, p1 = mi()\n    n2, p2 = mi()\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    \n        \n    \n        \n    if p1 + len(s1) > p2 + len(s2):\n        print(\">\")\n    elif (p1 + len(s1))==(p2 + len(s2)):\n        if p1>p2:\n            n1 = n1*10**(p1-p2)\n        elif p2 > p1:\n            n2 = n2*10**(p2-p1)\n        if n1>n2:\n            print(\">\")\n        elif n1==n2:\n            print(\"=\")\n        else:\n            print(\"<\")\n    else:\n        print(\"<\")\n        \n    \nq=nn()\n\nfor _ in range(q):\n    solve()",
                true
            ],
            [
                "def main():\n    for _ in range(int(input())):\n        a, p1 = map(int, input().split())\n        b, p2 = map(int, input().split())\n\n        p1, p2 = p1 - min(p1, p2), p2 - min(p1, p2)\n\n        a, b = str(a), str(b)\n\n        if (p1 + len(a)) > (p2 + len(b)):\n            print('>')\n        elif (p1 + len(a)) < (p2 + len(b)):\n            print('<')\n        else:\n            sa, sb = a + '0' * p1, b + '0' * p2\n            if sa > sb:\n                print('>')\n            elif sa < sb:\n                print('<')\n            else:\n                print('=')\n\n\nmain()\n",
                true
            ],
            [
                "\n\nt = int(input())\n\nfor _ in range(t):\n    x1,p1 = map(int, input().split())\n    x2,p2 = map(int, input().split())\n\n    while x1 % 10 == 0:\n        x1 //= 10\n        p1+=1\n    while x2 % 10 == 0:\n        x2 //= 10\n        p2+=1\n    # print(x1,p1,x2,p2)\n\n    if len(str(x1)) + p1 > len(str(x2)) + p2:\n        print('>')\n    elif len(str(x1)) + p1 < len(str(x2)) + p2:\n        print('<')\n    elif str(x1) > str(x2):\n        print('>')\n    elif str(x1) < str(x2):\n        print('<')\n    else:\n        print('=')\n",
                true
            ],
            [
                "t = int(input())\n\nwhile t!=0:\n    x1,p1 = input().split()\n    x2,p2 = input().split()\n    \n    p1 = int(p1)\n    p2 = int(p2)\n    \n    if len(x1)+p1>len(x2)+p2:\n        print('>')\n        \n    \n    elif len(x1)+p1<len(x2)+p2:\n        print('<')\n\n    else:\n        if p1 == p2:\n            if int(x1) < int(x2):\n                print('<')\n            \n            if int(x1) > int(x2):\n                print('>')\n            \n            if int(x1) == int(x2):\n                print('=')\n        else:\n            maxi = max(len(x1),len(x2))\n            for i in range(maxi-len(x1)):\n                x1+='0'\n            for i in range(maxi-len(x2)):\n                x2+='0'\n            #print(int(x1),int(x2))\n            if int(x1) > int(x2):\n                print('>')\n            \n            elif int(x1) < int(x2):\n                print('<')\n            \n            else:\n                print('=')\n        \n    \n    t-=1\n",
                true
            ],
            [
                "t=int(input())\nwhile t>0:\n    t=t-1\n    x,p = map(int,input().split())\n    y,q = map(int,input().split())\n    if len(str(x))+p > len(str(y))+q:\n        print(\">\")\n    elif len(str(x))+p < len(str(y))+q:\n        print(\"<\")\n    else:\n        if p > q:\n            x = x*(10**(p-q))\n        if q > p:\n            y = y*(10**(q-p))\n        if x > y:\n            print(\">\")\n        elif y > x:\n            print(\"<\")\n        else:\n            print(\"=\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    x1, p1 = list(map(int, input().split()))\n    x2, p2 = list(map(int, input().split()))\n    if len(str(x1)) + p1 > len(str(x2)) + p2:\n        print('>')\n    elif len(str(x1)) + p1 < len(str(x2)) + p2:\n        print('<')\n    else:\n        if x1 > x2:\n            x2 = x2 * pow(10, (len(str(x1)) - len(str(x2))))\n            if x1 > x2:\n                print('>')\n            elif x1 < x2:\n                print('<')\n            else:\n                print('=')\n        elif x1 < x2:\n            x1 = x1 * pow(10, (len(str(x2)) - len(str(x1))))\n            if x1 > x2:\n                print('>')\n            elif x1 < x2:\n                print('<')\n            else:\n                print('=')\n        else:\n            print('=')",
                true
            ],
            [
                "\nfor t in range(int(input())):\n    \n\n    p1, x1 = [int(x) for x in input().split()]  \n    p2, x2 = [int(x) for x in input().split()]          \n  \n    s1 = str(p1)\n    s2 = str(p2)\n    \n    l1 = len(s1) + x1\n    l2 = len(s2) + x2\n\n    if l1>l2:print(\">\")\n    elif l1<l2:print(\"<\")    \n\n    elif l1 == l2:\n\n        st1 = str(p1)\n        st2 = str(p2)\n\n        \n        if len(st1) < len(st2):\n            total = len(st2) - len(st1)\n            for i in range(total):\n                st1 = st1 + '0'\n            \n        else:\n            total = len(st1) - len(st2)\n            for i in range(total):\n                st2 = st2 + '0'\n            \n\n        flag = 0\n\n        for k in range(len(st1)):\n            if st1[k]<st2[k]: \n                print(\"<\")\n                flag = 1\n                break\n            elif st1[k]>st2[k]:\n                flag = 1\n                print(\">\")\n                break\n \n        if flag == 0: print(\"=\")\n        \n\n            \n\n    \n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n  x, p = map(int, input().split())\n  y, q = map(int, input().split())\n  k = min(p, q)\n  p -= k\n  q -= k\n  p = min(10, p)\n  q = min(10, q)\n  x *= 10**p\n  y *= 10**q\n  print('=' if x==y else '><'[x<y])",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = list(input().split())\n    x1 = (s[0])\n    p1 = int(s[1])\n    s = list(input().split())\n    x2 = (s[0])\n    p2 = int(s[1])\n    n = len(x1)\n    m = len(x2)\n    if n+p1>m+p2:\n        print('>')\n    elif n+p1<m+p2:\n        print('<')\n    else:\n        leng =  max(n,m)\n        x1 = int(x1)*(10**(leng-n))\n        x2 = int(x2)*(10**(leng-m))\n        if x1>x2:\n            print('>')\n        elif x1<x2:\n            print('<')\n        else:\n            print('=')\n        \n    \n    ",
                true
            ],
            [
                "for i in range(int(input())):\n    a, b = input().split()\n    c, d = input().split()\n    if len(a)+int(b) > len(c)+int(d):\n        print(\">\")\n    elif len(a)+int(b) < len(c)+int(d):\n        print(\"<\")\n    else:\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        d = int(d)\n        if int(a) > int(c):\n            c *= 10**(d-b)\n        else:\n            a *= 10**(b-d)\n        if a > c:\n            print(\">\")\n        elif a == c:\n            print(\"=\")\n        else:\n            print(\"<\")",
                true
            ],
            [
                "import math\n\nt = int(input())\nfor q in range(0, t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    \"\"\"\n    ansx = x1 * (10 ** p1)\n    ansy = x2 * (10 ** p2)\n\n    if (ansx == ansy):\n        print(\"=\")\n    elif (ansx < ansy):\n        print(\"<\")\n    elif (ansx > ansy):\n        print(\">\")\n\n    s1 = str(x1)\n    for i in range(0, p1):\n        s1 += \"0\"\n\n    s2 = str(x2)\n    for j in range(0, p2):\n        s2 += \"0\"\n\n    if (len(s1) > len(s2)):\n        print(\">\")\n    elif (len(s1) < len(s2)):\n        print(\"<\")\n    else:\n        check = False\n\n        for k in range(0, len(s1)):\n            if (s1[k] > s2[k]):\n                print(\">\")\n                check = True\n                break\n            elif (s1[k] < s2[k]):\n                print(\"<\")\n                check = True\n                break\n\n        if (check == False):\n            print(\"=\")\n\n    s1 = str(x1)\n    for i in range(0, p1):\n        s1 += \"0\"\n\n    s2 = str(x2)\n    for j in range(0, p2):\n        s2 += \"0\"\n\n    if (len(s1) > len(s2)):\n        print(\">\")\n    if (len(s1) < len(s2)):\n        print(\"<\")\n    if (len(s1) == len(s2)):\n        if (s1 < s2):\n            print(\"<\")\n        elif (s1 == s2):\n            print(\"=\")\n        else:\n            print(\">\")\n\n    \"\"\"\n\n    digitx = int(math.log10(x1)) + 1\n    digity = int(math.log10(x2)) + 1\n\n    ans = \"`\"\n\n    if (digitx + p1 > digity + p2):\n        ans = \">\"\n    elif (digitx + p1 < digity + p2):\n        ans = \"<\"\n    else:\n        if (p1 == p2):\n            if (x1 > x2):\n                ans = \">\"\n            elif (x1 < x2):\n                ans = \"<\"\n            else:\n                ans = \"=\"\n        else:\n            temp1, temp2, cnt = -1, -1, -1\n\n            if (digitx > digity):\n                #temp1 = x1\n                #temp2 = x2\n                cnt = digitx - digity\n                res = 1\n                res = pow(10, cnt)\n                x2 *= res\n\n                if (x1 > x2):\n                    ans = \">\"\n                elif (x1 < x2):\n                    ans = \"<\"\n                else:\n                    ans = \"=\"\n\n\n\n            else:\n                #temp1 = x2\n                #temp2 = x1\n                cnt = digity - digitx\n                res = 1\n                res = pow(10, cnt)\n                x1 *= res\n\n                if (x1 > x2):\n                    ans = \">\"\n                elif (x1 < x2):\n                    ans = \"<\"\n                else:\n                    ans = \"=\"\n\n    print(ans)\n\n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    x1,p1=map(str,input().split())\n    x2,p2=map(str,input().split())\n    if (len(x1)+int(p1))>(len(x2)+int(p2)):\n        print(\">\")\n    elif len(x1)+int(p1)<len(x2)+int(p2):\n        print(\"<\")\n    else:\n        a=(len(x1)-len(x2))\n        if a>0:\n            if int(x1)>int(x2+\"0\"*a):\n                print(\">\")\n            elif int(x1)<int(x2+\"0\"*a):\n                print(\"<\")\n            else:\n                print(\"=\")\n        elif a<0:\n            if int(x1+\"0\"*abs(a))>int(x2):\n                print(\">\")\n            elif int(x1+\"0\"*abs(a))<int(x2):\n                print(\"<\")\n            else:\n                print(\"=\")\n        else:\n            if int(x1)>int(x2):\n                print(\">\")\n            elif int(x1)<int(x2):\n                print(\"<\")\n            else:\n                print(\"=\")\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x1, p1 = input().split()\n    x2, p2 = input().split()\n    if len(x1) == len(x2) and (p1 == p2):\n        if int(x1) == int(x2):\n            print('=')\n        elif int(x1) > int(x2):\n            print('>')\n        else:\n            print('<')\n    else:\n        m = max(len(x1),len(x2))\n        a1 = x1 + '0'*(abs(len(x1)-m))\n        b1 = x2 + '0'*(abs(len(x2)-m))\n        k1 = int(p1) + len(x1)\n        k2 = int(p2) + len(x2)\n        if k1 > k2:\n            print('>')\n        elif k1 < k2:\n            print('<')\n        else:\n            if a1 > b1:\n                print('>')\n            elif a1 < b1:\n                print('<')\n            else:\n                print('=')",
                true
            ],
            [
                "from sys import stdin\n\nfor _ in range(int(stdin.readline())):\n    x1, p1 = stdin.readline().split()\n    x2, p2 = stdin.readline().split()\n    p1 = int(p1)\n    p2 = int(p2)\n    l1 = len(x1) + p1\n    l2 = len(x2) + p2\n    if l1 > l2:\n        print('>')\n    elif l1 < l2:\n        print('<')\n    else:\n        while len(x1) < len(x2):\n            x1 += '0'\n            p1 -= 1\n        while len(x2) < len(x1):\n            x2 += '0'\n            p2 -= 1\n        x1 = int(x1)\n        x2 = int(x2)\n        if x1 > x2:\n            print('>')\n        elif x1 < x2:\n            print('<')\n        else:\n            print('=')\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    a,b=map(int,input().split())\n    c,d=map(int,input().split())\n    if len(str(a))+b<len(str(c))+d:\n        print('<')\n        continue\n    if len(str(a))+b>len(str(c))+d:\n        print('>')\n        continue\n    else:\n        if b==d:\n            if a>c:\n                print('>')\n            if a<c:\n                print('<')\n            if a==c:\n                print('=')\n            continue\n        else:\n            while a<1000000 and b>0:\n                a*=10\n                b-=1\n            while c<1000000 and d>0:\n                c*=10\n                d-=1\n            if a>c:\n                print('>')\n            if a<c:\n                print('<')\n            if a==c:\n                print('=')\n            \n                \n    \n            \n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    num1,z1 = input().split(\" \")\n    num2,z2 = input().split(\" \")\n    mini = min(int(z1),int(z2))\n    z1 = int(z1) - mini\n    z2 = int(z2) - mini\n    if z2 == 0:\n        while len(num1) <= len(num2) and  z1 != 0:\n            num1 = num1 + \"0\"\n            z1 -= 1\n    elif z1 == 0:\n        while len(num2) <= len(num1) and  z2 != 0:\n            num2 = num2 + \"0\"\n            z2 -= 1\n    if int(num1) > int(num2):\n        print(\">\")\n    elif int(num1) < int(num2):\n        print(\"<\")\n    else:\n        print(\"=\")\n    \n\n            \n\n\n\n\n        \n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    x1,p1=map(int,input().split())\n    x2,p2=map(int,input().split())\n    mn=min(p1,p2)\n    p1-=mn\n    p2-=mn\n    if(p1>=7):\n        print(\">\")\n    elif(p2>=7):\n        print(\"<\")\n    else:\n        y=x1*(10**p1)\n        z=x2*(10**p2)\n        if(y>z):\n            print(\">\")\n        elif(z>y):\n            print(\"<\")\n        else:\n            print(\"=\")",
                true
            ],
            [
                "for i in range(int(input())):\n    a,b=map(int,input().split())\n    c,d=map(int,input().split())\n    a1=len(str(a))\n    c1=len(str(c))\n    a2=str(a)\n    c2=str(c)\n    l1=((a1))+b\n    l2=((c1))+d\n    if a1>c1:\n        c2+=(a1-c1)*\"0\"\n    else:\n        a2+=(c1-a1)*\"0\"\n \n    if l1>l2:\n        print(\">\")\n    elif l1<l2:\n        print(\"<\")\n    else:\n        k=0\n        for i in range(max((a1),(c1))):\n            if a2[i]>c2[i]:\n                k=1\n                break\n            elif a2[i]<c2[i] :\n                k=2\n                break\n        if k==1:\n            print(\">\")\n        elif k==2:\n            print(\"<\")\n        else:\n            print(\"=\")\n        \n        \n\n        ",
                true
            ],
            [
                "\nimport math\ndef solution(a1, b1, a2, b2):\n    # x = int(str(a1)+\"0\"*b1)\n    # y = int(str(a2)+\"0\"*b2)\n    # swapped = False\n    # if a1 < a2:\n    #     a1, b1, a2, b2 = a2, b2, a1, b1\n    #     swapped = True\n    val = math.log10(a1/a2)\n    if val > b2-b1:\n        return \">\"\n    elif val < b2-b1:\n        return \"<\"\n    else:\n        return \"=\"\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        nums1 = input().split()\n        a1 = int(nums1[0])\n        b1 = int(nums1[1])\n        nums2 = input().split()\n        a2 = int(nums2[0])\n        b2 = int(nums2[1])\n        print(solution(a1, b1, a2, b2))",
                true
            ],
            [
                "for _ in range(int(input())):\n    x1,p1=map(int,input().split())\n    x2,p2=map(int,input().split())\n    m = min(p1,p2)\n    p1-=m\n    p2-=m\n    for i in range(p1):\n        x1*=10\n        if x2<x1:\n            break\n    for j in range(p2):\n        x2*=10\n        if x2>x1:\n            break\n    if x1>x2:\n        print('>')\n    elif x1==x2:\n        print('=')\n    else:\n        print('<')",
                true
            ],
            [
                "tests = int(input())\nfor testc in range(tests):\n    x1, p1 = list(map(int, input().split()))\n    x2, p2 = list(map(int, input().split()))\n    if p1 > p2 + 10:\n        print('>')\n        continue\n    if p2 > p1 + 10:\n        print('<')\n        continue\n    if p1 > p2:\n        x1 *= 10**(p1-p2)\n    else:\n        x2 *= 10**(p2-p1)\n    if x1 > x2:\n        print('>')\n    elif x1 < x2:\n        print('<')\n    else:\n        print('=')\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x1,p1 = map(int,input().split())\n    x2,p2 = map(int,input().split())\n\n    p1 += len(str(x1))\n    p2 += len(str(x2))\n\n    if(p1==p2):\n        p1,p2=x1/(10**len(str(x1))),x2/(10**len(str(x2)))\n\n    if(p1==p2):print('=')\n    elif(p1<p2):print('<')\n    else:print('>')",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    x1,p1=list(map(int,input().split()))\n    x2,p2=list(map(int,input().split()))\n    x=len(str(x1))\n    y=len(str(x2))\n    x+=p1\n    y+=p2\n    if x>y:\n        print(\">\")\n    elif y>x:\n        print(\"<\")\n    else:\n        x=str(x1)\n        y=str(x2)\n        t=0\n        for i in range(min(len(x),len(y))):\n            if int(x[i])>int(y[i]):\n                print(\">\")\n                t=1\n                break\n            elif int(x[i])<int(y[i]):\n                print(\"<\")\n                t=1\n                break\n            else:\n                continue\n        if t==0:\n            i+=1\n            temp=0\n            if len(x)>len(y):\n                while i<len(x):\n                    if x[i]==\"0\":\n                        i+=1\n                    else:\n                        print(\">\")\n                        temp=1\n                        break\n                if temp==0:\n                    print(\"=\")\n            elif len(x)<len(y):\n                while i<len(y):\n                    if y[i]==\"0\":\n                        i+=1\n                    else:\n                        print(\"<\")\n                        temp=1\n                        break\n                if temp==0:\n                    print(\"=\")\n            else:\n                print(\"=\")",
                true
            ],
            [
                "tests = int(input())\n\nfor _ in range(tests):\n    x1,p1 = input().split()\n    x2,p2 = input().split()\n    p1,p2 = int(p1),int(p2)\n    if len(x1)+p1 < len(x2)+p2:\n        print(\"<\")\n    elif len(x1)+p1 > len(x2)+p2:\n        print(\">\")\n    else:\n        temp = min(len(x1)+p1,7)\n        x1+=\"0\"*(temp-len(x1))\n        x2+=\"0\"*(temp-len(x2))\n        if x1<x2:\n            print(\"<\")\n        elif x1>x2 :\n            print(\">\")\n        else:\n            print(\"=\")",
                true
            ],
            [
                "# cook your dish here\nt = int(input())\nfor j in range(t):\n    x1,p1 = input().split()\n    x2,p2 = input().split()\n    if len(x1)+int(p1)>len(x2)+int(p2):\n        print('>')\n    elif len(x1)+int(p1)<len(x2)+int(p2):\n        print('<')\n    else:\n        if len(x1)>len(x2):\n            n1 = x1\n            n2 = x2 + '0'*(min(int(p2),abs(len(x1)-len(x2))))\n        elif len(x1)<len(x2):\n            n2 = x2\n            n1 = x1 + '0'*(min(int(p1),abs(len(x1)-len(x2))))\n        else:\n            n1 = x1\n            n2 = x2\n        n1 = int(n1)\n        n2 = int(n2)\n        if n1>n2:\n            print('>')\n        elif n1<n2:\n            print('<')\n        else:\n            print('=')",
                true
            ],
            [
                "t = int(input())\nwhile t > 0:\n    t -= 1\n    a , b = map(int,input().split())\n    c , d = map(int,input().split())\n    if a == 0:\n        if c != 0:\n            print(\"<\")\n        else :\n            print(\"=\")\n        continue\n    if c == 0 :\n        print(\">\")\n        continue\n    if b > d + 6 :\n        print(\">\")\n    else:\n        if d > b + 6 :\n            print(\"<\")\n        else :\n            if d > b:\n                i = d - b\n                while i > 0 :\n                    c *= 10\n                    i -= 1\n            if d < b :\n                i = b - d\n                while i > 0 :\n                    a *= 10\n                    i -= 1\n            if a > c :\n                print(\">\")\n            else :\n                if a < c :\n                    print(\"<\")\n                else :\n                    print(\"=\")",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\ndef diff(a, b, c, d):\n    if len(a) + int(b) > len(c) + int(d):\n        return 1\n    if len(a) + int(b) < len(c) + int(d):\n        return -1\n    a, b, c, d = int(a), int(b), int(c), int(d)\n    if abs(b - d) > 10:\n        return b - d\n    if b > d:\n        return a * (10 ** (b - d)) - c\n    return -(c * (10 ** (d - b)) - a)\n\ndef solve():\n    a, b = input().split(\" \")\n    c, d = input().split(\" \")\n    delta = diff(a, b, c, d)\n    sys.stdout.write('>' if delta > 0 else ('<' if delta < 0 else '='))\n    sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    cases = int(input())\n    for _ in range(cases):\n        solve()",
                true
            ],
            [
                "from math import log\ndef f(n,m):\n    if(n>m):\n        print(\">\")\n    elif(n==m):\n        print(\"=\")\n    else:\n        print(\"<\")\nfor _ in range(int(input())):\n    x1,p1=map(int,input().split())\n    x2,p2=map(int,input().split())\n    k=min(p1,p2)\n    p1=p1-k\n    p2=p2-k\n    f(x1*(10**min(p1,10)),x2*(10**min(p2,10)))",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n# map(int, input().split())\n\n\nfor __ in range(int(input())):\n    x1, p1 = input().split()\n    x2, p2 = input().split()\n    p1, p2 = int(p1), int(p2)\n    p1, p2 = p1-min(p1, p2), p2-min(p1, p2)\n    if len(x1)+p1 > len(x2)+p2:\n        print('>')\n    elif len(x1)+p1 < len(x2)+p2:\n        print('<')\n    else:\n        x1+= '0'*p1\n        x2+= '0'*p2\n        if int(x1) > int(x2):\n            print('>')\n        elif int(x1) < int(x2):\n            print('<')\n        else:\n            print('=')\n\n\n\n\n\n",
                true
            ],
            [
                "t  = int(input())\nfor i in range(t):\n    x1 , p1 = tuple(x for x in input().split())\n    x2 , p2 = tuple(x for x in input().split())\n    \n    n1 = len(x1) + int(p1)\n    n2 = len(x2) + int(p2)\n    \n    if n1 > n2:\n        print(\">\")\n    elif n2 > n1:\n        print(\"<\")\n    else:\n        found = False\n        for i in range(max(len(x1),len(x2))):\n            first = 0 if len(x2) > len(x1) and i >= len(x1) else int(x1[i])\n            second = 0 if len(x1) > len(x2) and i >= len(x2) else int(x2[i])\n\n            if first > second:\n                print(\">\")\n                found = True\n                break\n            if first < second:\n                print(\"<\")\n                found = True\n                break\n        if not found:\n            print(\"=\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    x1,p1=map(int,input().split())\n    x2,p2=map(int,input().split())\n    x1=str(x1)\n    x2=str(x2)\n    l1=len(x1)+p1\n    l2=len(x2)+p2\n    if l1<l2:\n        print(\"<\")\n    elif l1>l2:\n        print(\">\")\n    else:\n        if int(x1)<int(x2):\n            l=len(x2)-len(x1)\n            z=\"0\"*l\n            x1=x1+z\n            x1=int(x1)\n            x2=int(x2)\n        elif int(x1)>int(x2):\n            l=len(x1)-len(x2)\n            z=\"0\"*l\n            x2=x2+z\n            x1=int(x1)\n            x2=int(x2)\n        else:\n            x1=int(x1)\n            x2=int(x2)\n            \n        if x1>x2:\n            print(\">\")\n        elif x1<x2:\n            print(\"<\")\n        else:\n            print(\"=\")",
                true
            ],
            [
                "for i in range(int(input())):\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    g = [a[1], b[1]]\n    g = [g[0] - min(g), g[1] - min(g)]\n    if g[0] > 7:\n        print('>')\n    elif g[1] > 7:\n        print('<')\n    else:\n        a[0] = int(str(a[0]) + g[0] * '0')\n        b[0] = int(str(b[0]) + g[1] * '0')\n        if a[0] > b[0]:\n            print('>')\n        elif a[0] < b[0]:\n            print('<')\n        else:\n            print('=')\n",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    a, a1 = input().split()\n    b, b1 = input().split()\n    a = int(a); a1 = int(a1)\n    b = int(b); b1 = int(b1) \n    minz = min(a1, b1)\n    a1 = a1 - minz\n    b1 = b1 - minz\n    result = '>' if a1 >= 7 else '<' if b1 > 7 else 0\n    if not result:\n        for i in range(0, a1):\n            a *= 10\n        for i in range(0, b1):\n            b *= 10\n        result = '>' if a > b else '<' if a < b else '='\n    print(result)",
                true
            ],
            [
                "for _ in range(int(input())):\n    x1, p1=map(int,input().split())\n    x2, p2=map(int,input().split())\n    q=min(p1,p2)\n    p1-=q\n    p2-=q\n    p1=min(p1,10)\n    p2=min(p2,10)\n    a=x1*(10**p1)\n    b=x2*(10**p2)\n    if a==b:\n        print('=')\n    elif a>b:\n        print('>')\n    else:\n        print('<')\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    num, p = map(int, input().split())\n    num_1, p_1 = map(int, input().split())\n    c = min(p, p_1)\n    p -= c\n    p_1 -= c\n    if p >= 7:\n        print('>')\n    elif p_1 >= 7:\n        print('<')\n    else:\n        for i in range(p):\n            num *= 10\n        for j in range(p_1):\n            num_1 *= 10\n        if num > num_1:\n            print('>')\n        elif num == num_1:\n            print('=')\n        else:\n            print('<')\n        \n",
                true
            ],
            [
                "def lm():return map(int,input().split())\ndef xd(): return int(input())\ndef ll():return list(map(int, input().split()))\ndef xx(x):sys.stdout.write(x)\n \na1 = xd()\n\nfor i in range(a1):\n\n    a, b = lm()\n    c, d = lm()\n    e = str(min(a, c))\n\n    a = str(a)\n    c = str(c)\n\n\n\n    s = len(a) + b\n    s1 = len(c) + d\n\n\n    if ((s) > (s1)):\n        print('>')\n\n    elif ((s1) == (s)):\n\n        change= False\n\n        for i1 in range(len(e)):\n\n            if (int(a[i1]) > int(c[i1])):\n                change = True\n                print('>')\n                break\n\n            elif (int(a[i1]) < int(c[i1])):\n                change = True\n                print('<')\n                break\n\n        if (change == False):\n\n            a = a.strip('0')\n            c = c.strip('0')\n\n            if (len(a) > len(c)):\n\n                print('>')\n\n            elif (len(a) < len(c)):\n\n                print('<')\n\n            else : print('=')\n\n    else:\n        print('<')",
                true
            ],
            [
                "def resul(a,b,c,d):\n    while(a//10!=0):\n        a=a/10\n        b=b+1\n    while(c//10!=0):\n        c=c/10\n        d=d+1\n    if(b>d):\n        print(\">\")\n    else:\n        if(b==d):\n            if(a>c):print(\">\")\n            else:\n                if(a==c):print(\"=\")\n                else:print(\"<\")\n            y=c\n        else:\n            print(\"<\")\nn=int(input())\ni=0\nwhile(i<n):\n    a,b=map(int,input().split(\" \"))\n    c,d=map(int,input().split(\" \"))\n    resul(a,b,c,d)\n    i=i+1",
                true
            ],
            [
                "a = int(input())\ni = 0\nwhile i<a:\n    b = list(map(int,input().split(\" \")))\n    c = list(map(int,input().split(\" \")))\n    b[0]=str(b[0])\n    c[0]=str(c[0])\n    p = min(b[1],c[1])\n    b[1]=b[1]-p\n    c[1]=c[1]-p\n    if (len(c[0])+c[1])>(len(b[0])+b[1]):\n        print(\"<\")\n    if (len(c[0])+c[1])<(len(b[0])+b[1]):\n        print(\">\")\n    if (len(c[0])+c[1])==(len(b[0])+b[1]):\n        if (int(b[0])*(10**b[1]))>(int(c[0])*(10**c[1])):\n            print(\">\")\n        if (int(b[0])*(10**b[1]))<(int(c[0])*(10**c[1])):\n            print(\"<\")\n        if (int(b[0])*(10**b[1]))==(int(c[0])*(10**c[1])):\n            print(\"=\")\n    i=i+1\n\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    x1, p1 = [int(i) for i in input().split()]\n    x2, p2 = [int(i) for i in input().split()]\n\n    # Convert to scientific notation\n\n    l1 = len(str(x1))\n    l2 = len(str(x2))\n    n1 = x1 / (10 ** (l1 - 1))\n    n2 = x2 / (10 ** (l2 - 1))\n    pow1 = p1 + l1 - 1\n    pow2 = p2 + l2 - 1\n\n    if(n1 > n2):\n        if(pow1 >= pow2):\n            print(\">\")\n        else:\n            print(\"<\")\n    elif(n2 > n1):\n        if(pow2 >= pow1):\n            print(\"<\")\n        else:\n            print(\">\")\n    else:\n        if(pow1 > pow2):\n            print(\">\")\n        elif(pow2 > pow1):\n            print(\"<\")\n        else:\n            print(\"=\")\n\n",
                true
            ],
            [
                "from sys import stdin, stdout\n\n\ndef solve():\n    x1, p1 = map(int, stdin.readline().strip().split())\n    x2, p2 = map(int, stdin.readline().strip().split())\n    p = min(p1, p2)\n    p1 = p1 - p\n    p2 = p2 - p\n    if p1 > 6: return('>')\n    elif p2 > 6: return('<')\n    else:\n        y1 = x1 * pow(10, p1)\n        y2 = x2 * pow(10, p2)\n\n        if y1 < y2:\n            return('<')\n        elif y1 > y2:\n            return('>')\n        else:\n            return('=')\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for i in range(n):\n        print(solve())",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b = [0,0],[0,0] #[dig, first bunch o numbers]\n    a1,b1 = map(int,input().split())\n    a2,b2 = map(int,input().split())\n    a3 = max(len(str(a1)),len(str(a2)))\n    a = [b1+len(str(a1)), int(str(a1)+'0'*(a3-len(str(a1))))]\n    b = [b2+len(str(a2)), int(str(a2)+'0'*(a3-len(str(a2))))]\n    if a[0] > b[0]:\n        print('>')\n    elif a[0] < b[0]:\n        print('<')\n    elif a[1] > b[1]:\n        print('>')\n    elif a[1] < b[1]:\n        print('<')\n    else:\n        print('=')\n",
                true
            ],
            [
                "from math import *\n\nt = int(input())\nfor _ in range(t):\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    a = log10(x1/x2)\n    if a > y2-y1:\n        print(\">\")\n    elif a < y2-y1:\n        print(\"<\")\n    else:\n        print(\"=\")\n",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    a, a1 = input().split()\n    b, b1 = input().split()\n    a, a1 = int(a), int(a1)\n    b, b1 = int(b), int(b1) \n    minz = min(a1, b1)\n    a1 = a1 - minz\n    b1 = b1 - minz\n    result = '>' if a1 >= 7 else '<' if b1 >= 7 else 0\n    if not result:\n        a *= 10**a1\n        b *= 10 ** b1\n        result = '>' if a > b else '<' if a < b else '='\n    print(result)",
                true
            ],
            [
                "for i in range(int(input())):\n    a, b = input().split()\n    x, y = input().split()\n    if int(b) + len(a) > int(y) + len(x):\n        print('>')\n    elif int(b) + len(a) < int(y) + len(x):\n        print('<')\n    else:\n        sp = abs(len(a) - len(x))\n        if sp != 0:\n            if len(a) > len(x) and sp <= int(y):\n                x += '0'*sp\n            elif len(a) < len(x) and sp <= int(b):\n                a += '0'*sp\n        if int(a) > int(x):\n            print('>')\n        elif int(a) < int(x):\n            print('<')\n        else:\n            print('=')",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    a, a1 = input().split()\n    b, b1 = input().split()\n    a, a1 = int(a), int(a1)\n    b, b1 = int(b), int(b1) \n    minz = min(a1, b1)\n    a1 = a1 - minz\n    b1 = b1 - minz\n    result = '>' if a1 >= 7 else '<' if b1 > 7 else 0\n    if not result:\n        for i in range(0, a1):\n            a *= 10\n        for i in range(0, b1):\n            b *= 10\n        result = '>' if a > b else '<' if a < b else '='\n    print(result)",
                true
            ],
            [
                "from math import log10, ceil\n\nt = int(input())\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    d1 = ceil(log10(x1)) + p1\n    d2 = ceil(log10(x2)) + p2\n    if d1 > d2:\n        print(\">\")\n        continue\n    if d1 < d2:\n        print(\"<\")\n        continue\n    d = abs(p1 - p2)\n    n1 = x1\n    n2 = x2\n    if p1 > p2:\n        n1 = int(str(x1) + \"0\" * d)\n    else:\n        n2 = int(str(x2) + \"0\" * d)\n    if n1 == n2:\n        print(\"=\")\n        continue\n    if n1 > n2:\n        print(\">\")\n        continue\n    if n1 < n2:\n        print(\"<\")\n",
                true
            ],
            [
                "x = int(input())\nfor t in range(x):\n    first = list(map(int, input().split()))\n    second = list(map(int, input().split()))\n    m = min(first[1], second[1])\n    first[1] -= m\n    second[1] -= m\n    if first[1] >= 7:\n        print('>')\n    elif second[1] >= 7:\n        print('<')\n    else:\n        for i in range(first[1]):\n            first[0] *= 10\n        for i in range(second[1]):\n            second[0] *= 10\n        if first[0] > second[0]:\n            print('>')\n        elif first[0] < second[0]:\n            print('<')\n        else:\n            print('=')\n\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    x1, p1 = input().split()\n    x2, p2 = input().split()\n    p1 = int(p1)\n    p2 = int(p2)\n    x = min(p1, p2)\n    p1 -= x\n    p2 -= x\n    \n    if len(x1) + p1 > len(x2) + p2:\n        print('>')\n    elif len(x1) + p1 < len(x2) + p2:\n        print('<')\n    else:\n        n1 = x1 + '0' * p1\n        n2 = x2 + '0' * p2\n        n1 = int(n1)\n        n2 = int(n2)\n        if n1 > n2:\n            print('>')\n        elif n1 < n2:\n            print('<')\n        else:\n            print('=')\n        \n\n\n\n\n",
                true
            ],
            [
                "def fn(n1,n2):\n    n1_d = len(str(n1[0]))+n1[1]\n    n2_d = len(str(n2[0]))+n2[1]\n    if n1_d > n2_d:\n        return \">\"    \n    if n1_d < n2_d:\n        return \"<\"\n    a = str(n1[0])\n    b = str(n2[0])\n    m = min(len(a),len(b))\n    if int(a[:m])>int(b[:m]):\n        return \">\"\n    if int(a[:m])<int(b[:m]):\n        return \"<\"\n    if len(a)==len(b):\n        return \"=\"\n    if len(a) > len(b):\n        if int(a[m:]) > 0:\n            return \">\"\n        else:\n            return \"=\"\n    if len(a) < len(b):\n        if int(b[m:]) > 0:\n            return \"<\"\n        else:\n            return \"=\"\n\nt = int(input())\nfor _ in range(t):\n    n1 = list(map(int,input().split(\" \")))\n    n2 = list(map(int,input().split(\" \")))\n    res = fn(n1,n2)\n    print(res)\n\n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    a = len(str(x1)) + p1\n    b = len(str(x2)) + p2\n    if a > b:\n        print('>')\n    elif a < b:\n        print('<')\n    else:\n        if len(str(x1)) == len(str(x2)):\n            if x1 == x2:\n                print('=')\n            elif x1 > x2:\n                print('>')\n            else:\n                print('<')\n        else:\n            if x1 > x2:\n                x2 *= (10 ** (len(str(x1)) - len(str(x2))))\n                if x1 == x2:\n                    print('=')\n                elif x1 > x2:\n                    print('>')\n                else:\n                    print('<')\n            else:\n                x1 *= (10 ** (len(str(x2)) - len(str(x1))))\n                if x1 == x2:\n                    print('=')\n                elif x1 > x2:\n                    print('>')\n                else:\n                    print('<')",
                true
            ],
            [
                "for _ in range (int(input())):\n    x1,p1=map(int,input().split())\n    x2,p2=map(int,input().split())\n    while x1>=10:\n        x1=x1/10\n        p1+=1\n    while x2>=10:\n        x2=x2/10\n        p2+=1\n    if p1>p2:\n        print(\">\")\n    elif p1<p2:\n        print(\"<\")\n    elif p1==p2:\n        if x1>x2:\n            print(\">\")\n        elif x1<x2:\n            print(\"<\")\n        else:\n            print(\"=\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,p=input().split()\n    x1,p1=input().split()\n    if len(x)+int(p)==len(x1)+int(p1):\n\n        x,p=int(x),int(p)\n        x1,p1=int(x1),int(p1)\n        if x<x1:\n            x*=10**abs(p1-p)\n        else:\n            x1*=10**abs(p1-p)\n      #  print(x1,x)\n        if x1<x:\n            print(\">\")\n        elif x1>x:\n\n            print(\"<\")\n        else:\n            print(\"=\")\n    elif len(x)+int(p)>len(x1)+int(p1):\n        print(\">\")\n    else:\n        print(\"<\")",
                true
            ],
            [
                "t=int(input())\nfor q in range(t):\n    x1, p1 = [int(x) for x in input().split()]\n    # n1 = x1*(10**p1)\n    x2, p2 = [int(x) for x in input().split()]\n    if len(str(x1)) + p1 > len(str(x2)) + p2:\n        print('>')\n    elif len(str(x1)) + p1 ==  len(str(x2)) + p2:\n        # if x1 > x2:\n        #     print('>')\n        # elif x2>x1:\n        #     print('<')   \n        k = abs(len(str(x2)) -len(str(x1)))\n        if x1 <= x2 :\n            x1 = x1*(10**k)\n        else:\n            x2 = x2*(10**k) \n        if x1 >x2:\n            print('>')\n        elif x1 < x2:\n            print('<')\n        else:\n            print('=')\n    else:\n        print('<')                      \n",
                true
            ],
            [
                "t=int(input())\nwhile(t>0):\n    t-=1\n    x1, p1 = map(int, input().split())\n    n_x1=str(x1)\n    x1_s=len(n_x1)\n    x2, p2 = map(int, input().split())\n    n_x2=str(x2)\n    x2_s=len(n_x2)\n\n    if x1_s+p1>x2_s+p2:\n        print(\">\")\n    elif x1_s+p1<x2_s+p2:\n        print(\"<\")\n    else:\n        maxx = max(x1_s, x2_s)\n        #print(maxx-x1_s, maxx-x2_s)\n        if p1-maxx+x1_s>=0:\n            #print('0'*maxx-x1_s)\n            n_x1 = n_x1 + \"0\"*(maxx-x1_s)\n\n        if p2-maxx+x2_s>=0:\n            n_x2 = n_x2 + \"0\"*(maxx-x2_s)\n\n        ans_x1 = int(n_x1)\n        ans_x2 = int(n_x2)\n\n        #print(ans_x1, ans_x2)\n\n        if ans_x1 > ans_x2:\n            print(\">\")\n        elif ans_x1 < ans_x2:\n            print(\"<\")\n        else:\n            print(\"=\")\n\n",
                true
            ],
            [
                "# your code goes here\n# your code goes here\nimport sys\nimport math\nfrom fractions import Fraction\nfrom decimal import *\ninput = sys.stdin.readline\n\n\nt = int(input())\nwhile t>0:\n\n    inp = input().strip()\n    arr = [int(x) for x in inp.split(' ')]\n    x1 = arr[0]\n    p1 = arr[1]\n\n    inp = input().strip()\n    arr = [int(x) for x in inp.split(' ')]\n    x2 = arr[0]\n    p2 = arr[1]\n\n    x = x1\n    d1 = p1\n    while x>0:\n        d1 += 1\n        x=x//10\n\n    x = x2\n    d2 = p2\n    while x>0:\n        d2 += 1\n        x=x//10\n    \n    if d1 > d2:\n        print('>')\n    elif d1 < d2:\n        print('<')\n    else:\n        s1 = str(x1)\n        s2 = str(x2)\n\n\n        i = 0\n        printed = False\n        while i<len(s1) and i<len(s2):\n            if s1[i] > s2[i]:\n                print('>')\n                printed = True\n                break\n            elif s1[i] < s2[i]:\n                print('<')\n                printed = True\n                break\n            i += 1\n        if not printed:\n            if i<len(s1):\n                while i<len(s1):\n                    if s1[i] != '0':\n                        print('>')\n                        printed = True\n                        break\n                    i += 1\n                if not printed:\n                    print('=')\n            elif i<len(s2):\n                while i<len(s2):\n                    if s2[i] != '0':\n                        print('<')\n                        printed = True\n                        break\n                    i += 1\n                if not printed:\n                    print('=')\n            else:\n                print('=')\n    \n    t -= 1\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n############ ---- Input Functions ---- ############\ndef inp():\n    return (int(input()))\ndef inlt():\n    return (list(map(int, input().split())))\ndef insr():\n    s = input()\n    return (list(s[:len(s) - 1]))\ndef invr():\n    return (map(int, input().split()))\n\nt = inp()\nfor _ in range(t):\n    x1, p1 = invr()\n    x2, p2 = invr()\n    p1,p2 = p1-min(p1,p2),p2-min(p1,p2)\n\n    if len(str(x1))+p1>len(str(x2))+p2:\n        print('>')\n    elif len(str(x1))+p1<len(str(x2))+p2:\n        print('<')\n    else:\n        if x1*(10**p1)>x2*(10**p2):\n            print('>')\n        elif x1*(10**p1)<x2*(10**p2):\n            print('<')\n        else:\n            print('=')\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    x1, p1  = [i for i in input().split()]\n    x2, p2 = [i for i in input().split()]\n\n    p1 = int(p1)+ len(x1)\n    p2 = int(p2)+ len(x2)\n    \n    x1 = float('0.'+ x1)\n    x2 = float('0.'+ x2)\n    \n    if p1 > p2:\n        ans ='>'\n    elif p1 < p2:\n        ans = '<'\n    else:\n        if x1 > x2:\n            ans ='>'\n        elif x1 < x2:\n            ans = '<'\n        else:        \n            ans = '='\n    print(ans)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    x1, p1 = [int(f) for f in input().split(\" \")]\n    x2, p2 = [int(f) for f in input().split(\" \")]\n    c1 = 0\n    c2 = 0\n    temp1 = 0\n    temp2 = 0\n    for i in range(6,0,-1):\n        if x1//10**i >= 1 and temp1 == 0:\n            c1 = i\n            temp1 = 1\n        if x2//10**i >= 1 and temp2 == 0:\n            c2 = i\n            temp2 = 1\n    if x1 > x2:\n        if c1+p1 > p2+c2:\n            print('>')\n        elif c1+p1==c2+p2:\n            if x2*10**(abs(p1-p2))>x1:\n                print(\"<\")\n            elif x2*10**(abs(p1-p2))<x1:\n                print(\">\")\n            else:\n                print(\"=\")\n        else:\n            print('<')\n    elif x1 < x2:\n        if c1+p1 < p2+c2:\n            print(\"<\")\n        elif c1+p1==c2+p2:\n            if x1*10**(abs(p1-p2))>x2:\n                print(\">\")\n            elif x1*10**(abs(p1-p2))<x2:\n                print(\"<\")\n            else:\n                print(\"=\")\n        else:\n            print(\">\")\n    else:\n        if p1 > p2:\n            print(\">\")\n        elif p1 < p2:\n            print(\"<\")\n        else:\n            print(\"=\")\n",
                true
            ],
            [
                "def func(x1,p1,x2,p2):\n    k=min(p1,p2)\n    p1=p1-k\n    p2=p2-k\n    p1=min(10,p1)\n    p2=min(10,p2)\n    x1=x1*(10**p1)\n    x2=x2*(10**p2)\n    if x1>x2:\n        return '>'\n    elif x1<x2:\n        return '<'\n    return '='\n\n        \n            \n\n            \nT=int(input())\nfor i in range(T):\n    x1,p1=map(int,input().split())\n    x2,p2=map(int,input().split())\n    print(func(x1,p1,x2,p2))\n",
                true
            ],
            [
                "n = int(input())\n \nfor i in range(n):\n    num1,zeros1 = map(int, input().split())\n    num2,zeros2 = map(int, input().split())\n    mn = min(zeros1, zeros2)\n    z1 = zeros1-mn\n    z2 = zeros2-mn\n    \n    if z1>7:\n        print('>')\n    elif z2>7:\n        print('<')\n    else:\n        n1 = num1*(10**z1)\n        n2 = num2*(10**z2)\n \n        if n1>n2:\n            print('>')\n        elif n1<n2:\n            print('<')\n        else:\n            print('=')",
                true
            ],
            [
                "def num(x):\n    return x[0]*(10**x[1])\n\ndef dig(x):\n    return len(str(x[0]))+x[1]\n\nT = int(input())\nfor testcase in range(1,T+1):\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    both = min(a[1],b[1])\n    a[1] -= both\n    b[1] -= both\n    if dig(a) > dig(b):\n        print(\">\")\n    elif dig(a) < dig(b):\n        print(\"<\")\n    else:\n        if num(a) > num(b):\n            print(\">\")\n        elif num(a) == num(b):\n            print(\"=\")\n        else:\n            print(\"<\")\n\n\n\n\n\n",
                true
            ],
            [
                "# cook your dish here\n#import sys\n#sys.setrecursionlimit(10**9) \nll=lambda:map(int,input().split())\nt=lambda:int(input())\nss=lambda:input()\nlx=lambda x:map(int,input().split(x))\nyy=lambda:print(\"YES\")\nnn=lambda:print(\"NO\")\n\nfrom math import log10 ,log2,ceil,factorial as fac,gcd,inf,sqrt,log\n#from itertools import combinations_with_replacement as cs \n#from functools import reduce\nfrom bisect import bisect_right as br,bisect_left as bl,insort\nfrom collections import Counter\n#from math import inf\n\n\nmod=10**9+7\n\n\ndef Nprime(n):\n    if n==2 or n==3:\n        return 0\n    if n==1:\n        return 1\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            return 1\n        i+=1\n    return 0\n\ndef sum_(a,n):\n    d=4\n    s=(n*(2*a+(n-1)*d))//2\n    return s\n    \ndef aux(x,y):\n    if x=='a' and y=='z':\n        return 1\n    if y=='a' and x==\"z\":\n        return 1\n    return abs(ord(x)-ord(y))\ndef aux1(x,y):\n    if x=='a' and y=='z':\n        return 1\n    if y=='z' and x=='a':\n        return 1\n    return ord('z')-ord(y)+ord(x)-ord('a')\nfor _ in range(t()):\n    \n#def f():\n\n    \n\n    a,b=ll()\n    c,d=ll()\n    \n    x,y=str(a),str(c)\n    if len(x)+b>len(y)+d:\n        print(\">\")\n    elif len(x)+b<len(y)+d:\n        print(\"<\")\n    else:\n        if b>d:\n            x=x+\"0\"*(b-d)\n        elif d>b:\n            y=y+'0'*(d-b)\n        if int(x)>int(y):\n            print(\">\")\n        elif int(y)>int(x):\n            print(\"<\")\n        else:\n            print(\"=\")\n        \n            \n'''\np m\n\n5 9\n3 7\n1 5\n\n3 2\n49 1\n\ndist[child]=dist[parent]+dist[node]\n\n'''\n\n    \n    \n    \n\n        \n            \n    \n#f()\n    \n\n'''\n\\\n\n\n1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n-5 -4 -3 -2 -1 0 1 2 3 4 5 6\n\n\n0 1 2 3-3\n4 5 6 7-7\n\n\n'''\n",
                true
            ],
            [
                "# by the authority of GOD     author: Kritarth Sharma #\nimport sys\nfrom collections import defaultdict,deque\nfrom bisect import bisect_left\nimport math\ninput=sys.stdin.readline\ndef inp():\n    l=list(map(int,input().split()))\n    return l\n\nfor _ in range(int(input())):\n        x1,p1=inp()\n        x2,p2=inp()\n        x=min(p1,p2)\n        p1-=x\n        p2-=x\n\n        a=len(str(x1))\n        b=len(str(x2))\n\n        \n        if p1>0:\n           x1= max(x1*(10**min(p1,(b-a +2))),x1)\n        if p2>0:\n            x2= max(x2*(10**min(p2,(a-b +2))),x2)\n        #print(x1,x2,p1,p2)\n        if x1>x2:\n            print(\">\")\n        elif x2>x1:\n            print(\"<\")\n        else:\n            print(\"=\")\n        \n        \n\n        \n            \n            \n\n\n\n        \n\n\n\n\n\n            \n        ",
                true
            ],
            [
                "'''import math\ndef primes():\n    def is_odd_prime(n):\n        if n % 3 == 0: return False\n        i, w = 5, 2\n        while i * i <= n:\n            if n % i == 0: return False\n            i += w\n            w = 6 - w\n        return True\n\n    n, w = 5, 2\n    yield from (2, 3, n)\n    while True:\n        n += w\n        if n < 25 or is_odd_prime(n): yield n\n        w = 6 - w\n\n\ndef prime_facts(n):\n    for p in primes():\n        if n < p * p: break\n        t = n\n        while t % p == 0:\n            t //= p\n            yield p\n\n\ndef facts(n):\n    dd, tt = [1], []\n    for p in primes():\n        if n < p * p: break\n        t, e = n, 1\n        while t % p == 0:\n            tt += [d * p ** e for d in dd]\n            t //= p\n            e += 1\n        if e > 1:\n            dd += tt\n            del tt[:]\n    if n != dd[-1]:\n        dd += [n // d for d in dd]\n    return dd\n'''\n\nt = int(input())\nfor i in range(t):\n    s = input().split()\n    a = s[0]\n    b = int(s[1])\n    s2 = input().split()\n    a2 = s2[0]\n    b2 = int(s2[1])\n    if len(a) > len(a2):\n        d = len(a) - len(a2)\n        a2 += '0' * d\n        b2 =b2 - d\n    elif len(a) < len(a2):\n        d = len(a2) - len(a)\n        a += '0' * (d)\n        b = b - (d)\n    a = int(a)\n    a2 = int(a2)\n    if a > a2:\n        if b > b2:\n            print('>')\n        elif b < b2:\n            print('<')\n        elif b == b2:\n            print('>')\n    elif a < a2:\n        if b > b2:\n            print('>')\n        elif b < b2:\n            print('<')\n        elif b == b2:\n            print('<')\n    elif a == a2:\n        if b == b2:\n            print('=')\n        elif b > b2:\n            print('>')\n        elif b < b2:\n            print('<')",
                true
            ],
            [
                "for _ in range(int(input())):\n    x1,p1=map(int,input().split())\n    x2,p2=map(int,input().split())\n    m=min(p1,p2)\n    p1=p1-m\n    p2=p2-m\n    if p1>6:\n        print('>')\n    elif p2>6:\n        print('<')\n    else:\n        x1=x1*(10**p1)\n        x2=x2*(10**p2)\n        if x1>x2:\n            print('>')\n        elif x2>x1:\n            print('<')\n        else:\n            print('=')\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, b = map(int, input().split())\n    c, d = map(int, input().split())\n    while b > 0 and a < c:\n        a = a * 10\n        b -= 1\n    while d > 0 and c < a:\n        c = c * 10\n        d -= 1\n    \n    if a == c:\n        if b == d: print(\"=\")\n        elif b > d: print(\">\")\n        else: print(\"<\")\n    elif a > c:\n        if b >= d: print(\">\")\n        else: print(\"<\")\n    elif c > a:\n        if d >= b: print(\"<\")\n        else: print(\">\")",
                true
            ],
            [
                "def solve_test():\n    x1, p1 = map(int, input().split(\" \"))\n    x2, p2 = map(int, input().split(\" \"))\n\n    while x1 % 10 == 0:\n        x1 //= 10\n        p1 += 1\n    while x2 % 10 == 0:\n        x2 //= 10\n        p2 += 1\n    # x1 0 * p1 compare to x2 0 * p2\n    digits1 = len(str(x1))\n    digits2 = len(str(x2))\n    if digits1 + p1 < digits2 + p2:\n        return \"<\"\n    elif digits1 + p1 > digits2 + p2:\n        return \">\"\n    else:\n        # pad number 1 with 0\n        if digits1 < digits2:\n            x1 = x1 * (10 ** (digits2 - digits1))\n        else:\n            x2 = x2 * (10 ** (digits1 - digits2))\n        if x1 > x2:\n            return \">\"\n        elif x1 < x2:\n            return \"<\"\n        return \"=\"\n\n\ndef main():\n    tests = int(input())\n    for _ in range(tests):\n        answer = solve_test()\n        print(answer)\n\n\nif __name__ == \"__main__\":\n    main()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x1, p1 = input().split()\n    x2, p2 = input().split()\n    p1 = int(p1)\n    p2 = int(p2)\n    while len(x1) != len(x2):\n        if len(x1) > len(x2):\n            x2 = x2 + '0'\n            p2 -= 1\n        else:\n            x1 = x1 + '0'\n            p1 -= 1\n\n    if p1 < p2:\n        print('<')\n    elif p1 > p2:\n        print('>')\n    else:\n        x1, x2 = int(x1), int(x2)\n        if x1 < x2:\n            print('<')\n        elif x1 > x2:\n            print('>')\n        else:\n            print('=')",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nfor __ in range(int(input())):\n    x1, p1 = input().split()\n    x2, p2 = input().split()\n    p1, p2 = int(p1), int(p2)\n    if len(x1)+p1 > len(x2)+p2:\n        print('>')\n    elif len(x1)+p1 < len(x2)+p2:\n        print('<')\n    else:\n        if len(x1) > len(x2):\n            x2 += '0'*(len(x1)-len(x2))\n        else:\n            x1 += '0'*(len(x2)-len(x1))\n        if int(x1) > int(x2):\n            print('>')\n        elif int(x1) < int(x2):\n            print('<')\n        else:\n            print('=')",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    x1, p1 = input().split()\n    x2, p2 = input().split()\n    p1 = int(p1)\n    p2 = int(p2)\n    while len(x1) < len(x2):\n        x1 = x1+\"0\"\n        p1 -= 1\n    while len(x2) < len(x1):\n        x2 += \"0\"\n        p2 -= 1\n    if p1 < p2:\n        print(\"<\")\n    elif p1 > p2:\n        print(\">\")\n    elif int(x1) < int(x2):\n        print(\"<\")\n    elif int(x1) > int(x2):\n        print(\">\")\n    else:\n        print(\"=\")\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    x1 , p1 = map(int,input().split())\n    x2 , p2 = map(int,input().split()) \n    k = min(p1,p2) \n    p1 -= k\n    p2 -= k\n    p1 = min(p1,10)\n    p2 = min(p2,10) \n    x1 *= 10 ** p1\n    x2 *= 10 ** p2\n    if x1 > x2:\n        print(\">\")\n    elif x1 < x2:\n        print(\"<\")\n    else:\n        print(\"=\")  ",
                true
            ],
            [
                "\ntestcases = (int)(input())\n\nstr = \"\"\nfor i in range(testcases):\n    fnum,fexp = (input().split())\n    snum,sexp = (input().split())\n    fnum = (float)(fnum)\n    fexp = (float)(fexp)\n    snum = (float) (snum)\n    sexp = (float)(sexp)\n\n    while(fnum >=10):\n        fnum = fnum/ 10\n        fexp = fexp + 1\n    \n    \n    while(snum >=10):\n        snum = snum/ 10\n        sexp = sexp + 1\n\n    if(sexp == fexp):\n        if(snum==fnum):\n            str = str+'='\n        elif(snum > fnum):\n            str = str+'<'\n        else:\n            str = str+'>'\n    elif(sexp>fexp):\n        str = str + '<'\n    else:\n        str = str+ '>'\nfor i in range(testcases):\n    if(i== testcases-1):\n        print(str[i],end='')\n    else:\n        print(str[i])\n\n\n    \n",
                true
            ],
            [
                "t=int(input())\nwhile t:\n    a,b=map(int,input().split())\n    c,d=map(int,input().split())\n    if abs(b-d)>=7:\n        if b>d:\n            print('>')\n        else:\n            print('<')\n    else:\n        if b>=d:\n            a=a*10**(b-d)\n        else:\n            c=c*10**(d-b)\n        if a>c:\n            print('>')\n        elif a==c:\n            print('=')\n        else:\n            print('<')\n    t-=1\n\n",
                true
            ],
            [
                "t=int(input())\ndef compare(x1,x2,p1,p2):\n    pass\nfor i in range(t):\n    x1,p1=map(str,input().split())\n    x2,p2=map(str,input().split())\n    if len(x1)+int(p1)>len(x2)+int(p2):\n        print(\">\")\n    elif len(x1)+int(p1)<len(x2)+int(p2):\n        print(\"<\")\n    else:\n        d=len(x1)-len(x2)\n        if d>0:\n            if int(x1[0:len(x2)])>int(x2):\n                print(\">\")\n            elif int(x1[0:len(x2)])<int(x2):\n                print(\"<\")\n            else:\n                if int(x1[len(x2)::])!=0:\n                    print(\">\")\n                else:\n                    print(\"=\")\n        elif d<0:\n            if int(x2[0:len(x1)])>int(x1):\n                print(\"<\")\n            elif int(x2[0:len(x1)])<int(x1):\n                print(\">\")\n            else:\n                if int(x2[len(x1)::])!=0:\n                    print(\"<\")\n                else:\n                    print(\"=\")\n        else:\n            if int(x1)>int(x2):\n                print(\">\")\n            elif int(x1)<int(x2):\n                print(\"<\")\n            else:\n                print(\"=\")\n#    if x1*(10**p1)>x2*(10**p2):\n#        print(\">\")\n#    elif x1*(10**p1)<x2*(10**p2):\n#        print(\"<\")\n#    else:\n#        print(\"=\")",
                true
            ],
            [
                "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\nimport time\n \nimport copy\n \n \ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\n \ninput = inf.readline\n# sys.stdout = open('output.txt', 'w')\n \ndef read_one_int():\n    return int(input().rstrip('\\n'))\n \n \ndef read_one_float():\n    return float(input().rstrip('\\n'))\n \n \ndef read_list_of_ints():\n    res = [int(val) for val in (input().rstrip('\\n')).split()]\n    return res\n \n \ndef read_list_of_ints_zero():\n    return [int(val) - 1 for val in (input().rstrip('\\n')).split()]\n \n \ndef read_str():\n    return input().rstrip()\n\n\ndef main():\n    tests = read_one_int()\n\n    for _ in range(tests):\n        x1, p1 = read_list_of_ints()\n        x2, p2 = read_list_of_ints()\n\n        str1 = str(x1)\n        str2 = str(x2)\n\n        len_str1 = len(str1) + p1\n        len_str2 = len(str2) + p2\n\n        if len_str1 > len_str2:\n            print('>')\n            continue\n        elif len_str1 < len_str2:\n            print('<')\n            continue\n\n        if len(str1) < len(str2):\n            str1 += '0' * (len(str2) - len(str1))\n        elif len(str1) > len(str2):\n            str2 += '0' * (len(str1) - len(str2))\n\n        res = ''\n        for i in range(len(str1)):\n            if str1[i] > str2[i]:\n                res = '>'\n                break\n            elif str1[i] < str2[i]:\n                res = '<'\n                break\n        \n        if not res:\n            print('=')\n        else:\n            print(res)\n\nif __name__== '__main__':\n    main()\n",
                true
            ],
            [
                "def convert_number(x):\n    for i in range(len(x)):\n        if x[-1] == '0':\n            x = x[:-1]\n        else:\n            break\n    return x, len(x)\n\n\nfor _ in range(int(input())):\n    x1, p1 = list(map(int, input().split(' ')))\n    x2, p2 = list(map(int, input().split(' ')))\n    res1 = len(str(x1)) + p1\n    res2 = len(str(x2)) + p2\n    if res1 > res2:\n        print('>')\n    elif res1 < res2:\n        print('<')\n    else:\n        x1, x1_len = convert_number(str(x1))\n        x2, x2_len = convert_number(str(x2))\n        if x1_len > x2_len:\n            x2 = x2 + ('0' * (x1_len - x2_len))\n        elif x1_len < x2_len:\n            x1 = x1 + ('0' * (x2_len - x1_len))\n        x1 = int(x1)\n        x2 = int(x2)\n        if x1 == x2:\n            print('=')\n        elif x1 > x2:\n            print('>')\n        else:\n            print('<')\n",
                true
            ],
            [
                "\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\nlogging.basicConfig(format=\"%(message)s\", level=logging.WARNING,)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\n# 30 MINUTES ATLEAST !!!!\n\n###################################################################################################################\n\n\nfor i in range(int(input())):\n    x1, p1 = input().split()\n    x2, p2 = input().split()\n\n    p1, p2 = int(p1), int(p2)\n    idx1, idx2 = len(x1) - 1, len(x2) - 1\n\n    while idx1 >= 0 and x1[idx1] == '0':\n        idx1 -= 1\n        p1 += 1\n\n    while idx2 >= 0 and x2[idx2] == '0':\n        idx2 -= 1\n        p2 += 1\n\n    x1 = x1[:idx1 + 1]\n    x2 = x2[:idx2 + 1]\n\n    # print(idx1, idx2, p1, p2)\n    if len(x1) + p1 > len(x2) + p2:\n        print('>')\n    elif len(x1) + p1 < len(x2) + p2:\n        print('<')\n    else:\n        if x1 == x2 and p1 == p2:\n            print('=')\n        else:\n            #x1 , x2 , p1 , p2\n            if p1 == p2:\n                if int(x1) > int(x2):\n                    print('>')\n                else:\n                    print('<')\n            else:\n                x1 += '0' * p1\n                x2 += '0' * p2\n                if x1 > x2:\n                    print('>')\n                else:\n                    print('<')\n",
                true
            ],
            [
                "t = int(input())\ndone =False\nfor i in range(0,t):\n    done=False\n    x1,p1=map(str,input().split())\n    x2,p2=map(str,input().split())\n    if len(x1)+int(p1)>len(x2)+int(p2):\n        print(\">\")\n    else :\n        if len(x1)+int(p1)<len(x2)+int(p2):\n            print(\"<\")\n        else:\n            if len(x1)>=len(x2):\n                for i in range(0,len(x1)-len(x2)):\n                    x2+='0'\n                for j in range(0,max(len(x1),len(x2))):\n                    if int(x1[j])>int(x2[j]):\n                        print(\">\")\n                        done=True\n                        break\n                    if int(x1[j])<int(x2[j]):\n                        print(\"<\")\n                        done=True\n                        break\n                if done==False:\n                    print(\"=\")\n            else:\n                for i in range(0,len(x2)-len(x1)):\n                    x1+='0'\n                for j in range(0,max(len(x1),len(x2))):\n                    if int(x1[j])>int(x2[j]):\n                        print(\">\")\n                        done=True\n                        break\n                    if int(x1[j])<int(x2[j]):\n                        print(\"<\")\n                        done=True\n                        break\n                if done==False:\n                    print(\"=\")\n            \n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x, a = map(int, input().split(' '))\n    y, b = map(int, input().split(' '))\n    if len(str(x)) +  a > len(str(y)) + b:\n        print(\">\")\n        continue\n    if len(str(x)) +  a < len(str(y)) + b:\n        print(\"<\")\n        continue\n    swapped = False\n    if x > y:\n        (x, a), (y, b) = (y, b), (x, a)\n        swapped = True\n    if x == y:\n        print(\"=\")\n        continue\n    num = int(str(x) + ('0' * (a - b)))\n    # print(num)\n    if num == y:\n        print(\"=\")\n    elif num > y:\n        print(\"<\" if swapped else \">\")\n    else:\n        print(\">\" if swapped else \"<\")\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nMr. Chanek gives you a sequence a indexed from 1 to n. Define f(a) as the number of indices where a_i = i. \n\nYou can pick an element from the current sequence and remove it, then concatenate the remaining elements together. For example, if you remove the 3-rd element from the sequence [4, 2, 3, 1], the resulting sequence will be [4, 2, 1]. \n\nYou want to remove some elements from a in order to maximize f(a), using zero or more operations. Find the largest possible f(a).\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the initial length of the sequence.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the initial sequence a.\n\nOutput\n\nOutput an integer denoting the largest f(a) that can be obtained by doing zero or more operations.\n\nExamples\n\nInput\n\n\n7\n2 1 4 2 5 3 7\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n4\n4 2 3 1\n\n\nOutput\n\n\n2\n\nNote\n\nIn the first example, f(A) = 3 by doing the following operations.\n\n[2,1,4,2,5,3,7] \u2192 [2,1,2,5,3,7] \u2192 [1,2,5,3,7] \u2192 [1,2,5,3] \u2192 [1,2,3]\n\nIn the second example, f(A) = 2 and no additional operation is needed.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import bisect\n\nn = int(input())\n\ntemp = []\n\narr = list(map(int,input().split()))\n\n\nfor i in range(n):\n    temp.append( [arr[i], i+1-arr[i]])\n    \n\ntemp = sorted(temp,key = lambda x:[x[0],-x[1]])\n\n#print(temp)\n\nseq = []\n\n\nfor [a,d] in temp:\n    if d<0: continue \n    loc = bisect.bisect(seq,d)\n    if loc==len(seq):  seq.append(d)\n    else: seq[loc] = d\n\n\nprint(len(seq))\n\n\n\n\n\n\n\n\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nMr. Chanek has a new game called Dropping Balls. Initially, Mr. Chanek has a grid a of size n \u00d7 m\n\nEach cell (x,y) contains an integer a_{x,y} denoting the direction of how the ball will move.\n\n  * a_{x,y}=1 \u2014 the ball will move to the right (the next cell is (x, y + 1)); \n  * a_{x,y}=2 \u2014 the ball will move to the bottom (the next cell is (x + 1, y)); \n  * a_{x,y}=3 \u2014 the ball will move to the left (the next cell is (x, y - 1)). \n\n\n\nEvery time a ball leaves a cell (x,y), the integer a_{x,y} will change to 2. Mr. Chanek will drop k balls sequentially, each starting from the first row, and on the c_1, c_2, ..., c_k-th (1 \u2264 c_i \u2264 m) columns.\n\nDetermine in which column each ball will end up in (position of the ball after leaving the grid).\n\nInput\n\nThe first line contains three integers n, m, and k (1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 10^5) \u2014 the size of the grid and the number of balls dropped by Mr. Chanek.\n\nThe i-th of the next n lines contains m integers a_{i,1},a_{i,2},\u2026,a_{i,m} (1 \u2264 a_{i,j} \u2264 3). It will satisfy a_{i, 1} \u2260 3 and a_{i, m} \u2260 1.\n\nThe next line contains k integers c_1, c_2, \u2026, c_k (1 \u2264 c_i \u2264 m) \u2014 the balls' column positions dropped by Mr. Chanek sequentially.\n\nOutput\n\nOutput k integers \u2014 the i-th integer denoting the column where the i-th ball will end.\n\nExamples\n\nInput\n\n\n5 5 3\n1 2 3 3 3\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n1 2 1\n\n\nOutput\n\n\n2 2 1 \n\n\nInput\n\n\n1 2 2\n1 3\n1 2\n\n\nOutput\n\n\n1 2 \n\nNote\n\nIn the first example, the first ball will drop as follows. Note that the cell (1, 1) will change direction to the bottom direction.\n\n<image>\n\nThe second and third balls will drop as follows. \n\n<image>\n\nAll balls will be dropped from the first row and on the c_1, c_2, ..., c_k-th columns respectively. A ball will stop dropping once it leaves the grid.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "from bisect import bisect_right, bisect_left, insort\ndef solve():\n    n, m, k = map(int, input().split())\n    arr = []\n    for _ in range(n):\n        a = list(map(int, input().split()))\n        arr.append(a)\n    cols = [[] for _ in range(m)]\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] != 2:\n                cols[j].append(i)\n##    for c in cols:\n##        print(c)\n##    print()\n##    for r in rows1:\n##        print(r)\n##    print()\n##    for r in rows3:\n##        print(r)\n##    print()\n    queries = list(map(int, input().split()))\n    for startPos in queries:\n        x, y = 0, startPos-1\n        while x != n:\n            if arr[x][y] == 2:\n                index = bisect_right(cols[y], x)\n                if index == len(cols[y]):\n                    break\n                else:\n                    x = cols[y][index]\n            elif arr[x][y] == 1:\n                arr[x][y] = 2\n                cols[y].remove(x)\n                y += 1\n            else:\n                arr[x][y] = 2\n                cols[y].remove(x)\n                y -= 1\n        print(y+1, end=\" \")\nsolve()\n\n\n",
                true
            ],
            [
                "def main():\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    inf = 1e17\n    # mod = 998244353\n    mod = 10 ** 9 + 7\n\n    # Max = 10 ** 6\n    # primes = []\n    # prime = [True for i in range(Max + 1)]\n    # p = 2\n    # while (p * p <= Max + 1):\n    #\n    #     # If prime[p] is not\n    #     # changed, then it is a prime\n    #     if (prime[p] == True):\n    #\n    #         # Update all multiples of p\n    #         for i in range(p * p, Max + 1, p):\n    #             prime[i] = False\n    #     p += 1\n    #\n    # for p in range(2, Max + 1):\n    #     if prime[p]:\n    #         primes.append(p)\n\n    # print(len(primes))\n\n    def factorial(n):\n        f = 1\n\n        for i in range(1, n + 1):\n            f = (f * i) % mod  # Now f never can\n        # exceed 10^9+7\n\n        return f\n\n    def factorial_by(n, by):\n        f = 1\n\n        for i in range(1, n + 1):\n            if i == by:\n                continue\n            f = (f * i) % mod  # Now f never can\n        # exceed 10^9+7\n\n        return f\n\n    def ncr(n, r):\n        # initialize numerator\n        # and denominator\n        num = den = 1\n        for i in range(r):\n            num = (num * (n - i)) % mod\n            den = (den * (i + 1)) % mod\n        return (num * pow(den,\n                          mod - 2, mod)) % mod\n\n    def primeFactors(num):\n\n        pf = []\n        while num % 2 == 0:\n            pf.append(2)\n            num = num // 2\n\n        # n must be odd at this point\n        # so a skip of 2 ( i = i + 2) can be used\n        for i in range(3, int(math.sqrt(num)) + 1, 2):\n\n            # while i divides n , print i and divide n\n            while num % i == 0:\n                pf.append(i)\n                num = num // i\n\n        # Condition if n is a prime\n        # number greater than 2\n        if num > 2:\n            pf.append(num)\n\n        return pf\n\n    class Node(object):\n        def __init__(self, name, d):\n            self.d = d\n            self.name = name\n\n        def __repr__(self):\n            pass\n\n    def solve(n,m,k,mat,q):\n\n        sol, cache = [], [0] * m\n        for c in q:\n            cc = c - 1\n            if cache[cc] == 0:\n                r, c, alldown = 0, c - 1, True\n                while r < n:\n                    if mat[r][c] == 2:\n                        r += 1\n                    else:\n                        alldown = False\n                        mat[r][c], c = 2, c + 2 - mat[r][c]\n                if alldown:\n                    cache[cc] = c + 1\n                sol.append(c + 1)\n            else:\n                sol.append(cache[cc])\n        \n\n        return \" \".join(list(map(str,sol)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    t = 1#int(input())\n    ans = []\n    for _ in range(t):\n        # s = list(input()[:-1])\n        #n = int(input())\n\n        n,m,k= map(int, input().split())\n        grid = []\n        for i in range(n):\n            grid.append([int(x) for x in input().split()])\n        #s = list(map(int,list(input()[:-1])))\n        a = [int(x) for x in input().split()]\n        # b = [int(x) for x in input().split()]\n        # q = int(input())\n        # queries = []\n        # for i in range(q):\n        #     x1,x2 = map(int, input().split())\n        #     queries.append([x1,x2])\n\n        # tree = []\n        #\n        #\n        # for i in range(n+1):\n        #     tree.append([])\n        #\n        # for i in range(n-1):\n        #     u, v = map(int, input().split())\n        #     tree[u].append(v)\n        #     tree[v].append(u)\n        #\n        ans.append(solve(n,m,k,grid,a))\n\n    p = 1\n    for answer in ans:\n        # print('Case #'+str(p)+\": \"+str(answer))\n        print(answer)\n        p += 1\n\n\nif __name__ == \"__main__\":\n    import sys, threading\n    import bisect\n    import math\n    import itertools\n    from sys import stdout\n\n    ############  Sorted Containers  ######################\n    import heapq\n    from queue import PriorityQueue\n    from collections import deque\n\n    ############ Tree Problems ( Use Python 3) ###########\n    #sys.setrecursionlimit(2 ** 32 // 2 - 1)\n    #threading.stack_size(1 << 27)\n\n    input = sys.stdin.readline\n    thread = threading.Thread(target=main)\n    thread.start()\n    thread.join()\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nPetya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for _ in range(int(input())):\n    n = int(input())\n    lst = [*map(int, input().split())]\n    tall = 1\n    age = 0\n    for i in range(n):\n        if i != 0 and lst[i - 1] == 1 and lst[i] == 1:\n            tall += 5\n            age = 0\n        elif lst[i] == 1:\n            tall += 1\n            age = 0\n        elif lst[i] == 0:\n            age += 1\n        if age == 2:\n            tall = -1\n            break\n    print(tall)\n",
                true
            ],
            [
                "problem_num = int(input())\nfor i in range(problem_num):\n    days = int(input())\n    x = input()\n    day_info = x.split()\n    prev = None\n    h = 1\n    for d in range(days):\n        cur = day_info[d]\n        if cur == '0':\n            if prev == '0':\n                h = -1\n                break\n            else:\n                pass\n        elif cur == '1':\n            if prev != '1':\n                h += 1\n            else:\n                h += 5\n        prev = cur\n    print(h)\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    li=list(map(int,input().split()))\n    ans=1 \n    if(li[0]==1):\n        ans=ans+1 \n    for i in range(1,n):\n        if(li[i]==1):\n            if(li[i-1]==1):\n                ans=ans+5 \n            else:\n                ans=ans+1 \n        else:\n            if(li[i-1]==0):\n                ans=-1 \n                break \n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = check = 0\n\n    for i in range(n - 1):\n        if arr[i] == 0 and arr[i+1] == 0:\n            check -= 50 #cf\n        elif arr[i] == 0 and arr[i+1] == 1:\n            ans += 1\n        elif arr[i] == 1 and arr[i+1] == 0:\n            ans += 0\n        elif arr[i] == 1 and arr[i+1] == 1:\n            ans += 5\n    if arr[0] == 1:\n        ans += 1\n    if check < 0:\n        print(-1)\n    else:\n        print(ans+1)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    height = 1+arr[0]\n    c = 0\n    for i in range(1,n):\n        if arr[i]==0 and arr[i-1]==0:\n            print(-1)\n            c+=1\n            break\n        elif arr[i]==1 and  arr[i-1]==0:\n            height+=1\n        elif arr[i]==1 and arr[i-1]==1:\n            height+=5\n    if c==0:\n        print(height)   \n    else:\n        c-=1",
                true
            ],
            [
                "for _ in range(eval(input())):\n    n = eval(input())\n    a = list(map(int, input().split()))\n    ans = 1 + a[0]\n    p = a[0]\n    for x in a[1:]:\n        if (p, x) == (1, 1):\n            ans += 5\n        elif (p, x) == (0, 0):\n            ans = -1\n            break\n        elif (p, x) == (0, 1):\n            ans += 1\n        else:\n            ans += 0\n        p = x\n    print(ans)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    h = 1\n    prev = 0\n    for i in range(n):\n        cur = a[i]\n        if i > 0 and cur == 0 and prev == 0:\n            h = -1\n            break\n        elif cur == 1 and prev == 0:\n            h += 1\n        elif cur == 1 and prev == 1:\n            h += 5\n        prev = cur\n    print(h)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x = int(input())\n    y = list(map(int, input().split()))\n    l = 0\n    m = 0\n    for i in range(len(y) - 1):\n        if y[i] == 0 and y[i+1] == 0:\n            m -= 1\n        elif y[i] == 0 and y[i+1] == 1:\n            l += 1\n        elif y[i] == 1 and y[i+1] == 0:\n            l += 0\n        elif y[i] == 1 and y[i+1] == 1:\n            l += 5\n    if y[0] == 1:\n        l+=1\n    if m < 0:\n        print(-1)\n    else:\n        print(l+1)",
                true
            ],
            [
                "def ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().split())\ndef msi(): return map(str,input().split())\ndef li(): return list(mi())\n\nt=ii()\nfor _ in range(t):\n    n=ii()\n    a=li()\n    \n    height=1\n    one,zero=0,0\n    flag=0\n    \n    for i in range(n):\n        if a[i]==1:\n            one+=1\n            zero=0\n            if one>1:\n                height+=5\n                \n            else:\n                height+=1\n                \n        else:\n            zero+=1\n            one=0\n            \n            if zero>1:\n                print(-1)\n                flag=1\n                break\n            \n    if flag==0:\n        print(height)\n            \n    \n    ",
                true
            ],
            [
                "t = int(input())\nfor x in range(t):\n    n = int(input())\n    z = 1\n    s = list(map(int,input().split()))\n    for i in range(n):\n        if s[i] == 1:\n            z += 1\n        if i >= 1 and s[i] == 1 and s[i-1] == 1:\n            z += 4\n        if i >= 1 and s[i] == 0 and s[i-1] == 0:\n            z = -1\n            break\n    print(z)\n",
                true
            ],
            [
                "t=int(input())\nwhile(t>0):\n    n=int(input())\n    a=list(map(int,input().split()))\n    count=0\n    res=1\n    if(a[0]==1):\n        res=res+1 \n    for i in range(1,n):\n        if(a[i]==1 and a[i-1]==1):\n            res=res+5\n        elif(a[i]==1 and a[i-1]==0):\n            res=res+1 \n        elif(a[i]==0 and a[i-1]==0):\n            res=-1 \n            break\n    print(res)\n    t=t-1",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    flag=0\n    flag1=0\n    x=0\n    c=1\n    if(a[0]==1):\n        c+=1\n        flag1=1\n    else:\n        flag=1\n    for j in range(1,n):\n        if(a[j]==1 and flag1==1):\n            c+=5\n            flag=0\n        elif(a[j]==1 and flag1==0):\n            c+=1\n            flag1=1\n            flag=0\n        elif(a[j]==0 and flag==1):\n            x=1\n            break\n        else:\n            flag1=0\n            flag=1\n    if(x==1):\n        print(\"-1\")\n    else:\n        print(c)\n        ",
                true
            ],
            [
                "t = int(input())\n\nwhile t != 0:\n    n = int(input())\n    arr = [2]\n    height = 1\n    for i in input().split():\n        arr.append(int(i))\n\n    for i in range(1, n+1):\n        if arr[i] == 1 and arr[i-1] == 1:\n            height += 5\n        elif arr[i] == 1 and (arr[i-1] == 0 or arr[i-1] == 2):\n            height += 1\n        elif arr[i] == 0 and arr[i-1] == 0:\n            height = -1\n            break\n    print(height)\n    t -= 1",
                true
            ],
            [
                "\n    \nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    i = 0\n    height = 1\n    while (i < n):\n        if (i == 0):\n            if (l[i] == 1):\n                height += 1\n        else:\n            if (l[i] == 1 and l[i-1] == 1):\n                height += 5\n            elif (l[i] == 1):\n                height += 1\n            elif (l[i] == 0 and l[i-1] == 0):\n                height = -1\n                i = n\n        i += 1\n    print(height)\n\n    \n    \n\n\n",
                true
            ],
            [
                "testcases = int(input())\nfor testcase in range(testcases):\n    n = int(input())\n    d = list(map(int,input().split()))\n    t = 1\n    prev = None\n    for i in range(n):\n        if i == 0:\n            if d[i]:\n                t+=1\n            prev = d[i]\n        else:\n            if d[i] and prev:\n                t+=5\n            elif not d[i] and not prev:\n                t=-1\n                break\n            elif d[i]:\n                t+=1\n                prev = d[i]\n            else:\n                prev = d[i]\n    print(t)",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    h = 1+arr[0]\n    for k in range(1,n):\n        if arr[k]==0:\n            if arr[k-1]==0:\n                h=-1\n                break\n        elif arr[k-1]==1:\n            h+=5\n        else:\n            h+=1\n    print(h)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=1\n    x=list(map(int,input().split()))\n    for i in range(n):\n        if i>0 and x[i]==1:\n            if x[i-1]==1:\n                a+=5\n            else:\n                a+=1\n        elif x[i]==1:\n            a+=1\n        elif x[i]==0 and i!=n-1:\n            if x[i+1]==0:\n                a=-1\n                break\n            else:\n                a+=0\n                \n        \n    print(a)\n",
                true
            ],
            [
                "import sys\n\nfor t in range(int(input())):\n    day = int(sys.stdin.readline().rstrip())\n    water = list(map(int,sys.stdin.readline().rstrip().split(' ')))\n    hgt = 1\n    w = 0\n    row = 0\n    die = 0\n    for i in range(len(water)):\n        if water[i]:\n            row = 0\n            if w >= 1:\n                hgt += 5\n            else:\n                hgt += 1\n            w += 1\n        else:\n            if row == 1:\n                die = 1\n                break\n            else:\n                row = 1\n                w = 0\n    if not die:\n        print(hgt)\n    else:\n        print(-1)\n\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    ans = 1\n    flag = 0\n    for i in range(n):\n        if i == 0:\n            if l[i] == 1:\n                ans += 1\n\n        else:\n            if l[i-1] == 0 and l[i] == 0:\n                ans = -1\n                break\n\n            if l[i] == 1 and l[i-1] == 1:\n                ans += 5\n                continue\n\n            if l[i] == 1:\n                ans += 1\n\n    print(ans)",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    l=input().split()\n    s=\"\".join(l)\n    if \"00\" in s:\n        print(-1)\n    else:\n        c=1\n        if(l[0]==\"1\"):\n            c+=1\n        for i in range(1,n):\n            if(l[i]==\"1\" and l[i-1]==\"1\"):\n                c+=5\n            elif l[i]==\"1\":\n                c+=1\n        print(c)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input()); ans=1;\n    l=list(map(int,input().split()));\n    ans+=l[0];\n    for i in range(1,n):\n        if((l[i]+l[i-1])==2): ans+=5; continue;\n        if(l[i]==1): ans+=1; continue;\n        if(l[i]==0 and l[i-1]==0): ans=-1; break;\n    print(ans)\n        \n",
                true
            ],
            [
                "def solve(n,arr):\n  if n==1:\n    if arr[0]==1:\n      return 2\n    return 1\n  g=1\n  prev=arr[0]\n  if prev==1:\n    g+=1\n  \n  \n  for i in range(1,n):\n    if arr[i]==1:\n      if prev==1:\n        g+=5\n      else:\n        g+=1\n    elif prev==0:\n        return -1\n    prev=arr[i]\n  return g\n\nt=int(input())\nfor i in range(t):\n  n=int(input())\n  arr=list(map(int,input().split()))\n  print(solve(n,arr))",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nT = int(input())\nR = []\n\nfor _ in range(T):\n    N = int(input())\n    W = list(map(int, input()[:-1].split()))\n    tall = 1\n    buf = -1\n    \n    for i in range(N):\n        if W[i] == 0:\n            if buf == 0:\n                tall = -1\n                break\n            else:\n                buf = 0\n        else:\n            # watered\n            if buf == 1:\n                tall += 5\n            else:\n                tall += 1\n                buf = 1\n\n    R.append(str(tall))\nprint('\\n'.join(R))",
                true
            ],
            [
                "#     __  __                __    _ __      ______                \n#    / / / /___ ___________/ /_  (_) /_    / ____/___ __________ _\n#   / /_/ / __ `/ ___/ ___/ __ \\/ / __/   / / __/ __ `/ ___/ __ `/\n#  / __  / /_/ / /  (__  ) / / / / /_    / /_/ / /_/ / /  / /_/ / \n# /_/ /_/\\__,_/_/  /____/_/ /_/_/\\__/____\\____/\\__,_/_/   \\__, /  \n#                                  /_____/               /____/   \n\nfrom collections import Counter\nfrom sys import *\nfrom collections import defaultdict as dd\nfrom math import *\n\n# sys.stdin = open('input.txt', 'r')  \n# sys.stdout = open('output.txt', 'w')\n\n#input functions\ndef inp():\n    return int(stdin.readline().strip())\ndef vinp():\n    return map(int,stdin.readline().strip().split())\ndef linp():\n    return list(map(int,stdin.readline().strip().split()))\ndef sinp(n = 1):\n    if n==1:\n        return stdin.readline().strip()\n    elif n==2:\n        return list(stdin.readline().strip())\n    else:\n        return list(stdin.readline().split())\n\n#output function\ndef pr(*x, end = \"\\n\"):\n    print(*x,end = end)\n\n#others\ndef mod(f, val = 1000000007):\n    return f % val\ndef csort(c):\n    sorted(c.items(), key=lambda pair: pair[1], reverse=True)\ndef indc(l,n):\n    c={}\n    for i in range(n):\n        c[l[i]]=c.get(l[i],[])+[i+1]\n    return c\n\nif __name__ ==\"__main__\":\n    cou=inp()\n    for _ in range(cou):\n        n = inp()\n        l = linp()\n        prev = l[0]\n        h = 1\n        if prev == 1:\n            h+=1\n        for i in range(1,n):\n            if prev == 1 and l[i] == 1:\n                h+=5\n            elif prev == 0 and l[i] == 0:\n                h = -1\n                break\n            elif l[i]==1:\n                h+=1\n            prev = l[i]\n        pr(h)",
                true
            ],
            [
                "from sys import stdin, stdout\nrd = lambda: list(map(int, stdin.readline().split()))\nrds = lambda: stdin.readline().rstrip()\nii = lambda: int(stdin.readline())\nINF = 1 << 62\nmod = 10**9 + 7\n\n\nfor _ in range(ii()):\n    h = 1\n    n = ii()\n    ar = rd()\n\n    zs = 0\n    ones = 0\n    flag = None\n    for x in ar:\n        if flag is None:\n            flag = x\n        \n        if x:\n            if flag: # 1 -> 1\n                ones += 1\n            else: # 0 -> 1\n                zs = 0\n                flag = 1\n                ones = 1\n        else:\n            if flag: # 1 -> 0\n                flag = 0\n                # update res\n                h += 1 + (ones - 1)*5\n                zs += 1\n            else: # 0 -> 0\n                zs += 1\n                if zs == 2:\n                    h = -1\n                    break\n    \n    if flag:\n        h += 1 + (ones - 1)*5\n    \n    print(h)\n\n#stdout.write(' '.join(map(str, ar)))\n#stdout.write(f'{res}')\n\n",
                true
            ],
            [
                "import sys\nfrom collections import defaultdict\n \ntest = int(sys.stdin.readline())\n\nfor _ in range(test):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n\n    is_dead = False\n    height = 1\n\n    for i in range(n):\n        if i - 1 >= 0 and arr[i-1] == 0 and arr[i] == 0:\n            is_dead = True\n            break\n        elif i - 1 >= 0 and arr[i-1] == 1 and arr[i] == 1:\n            height += 5\n        elif arr[i] == 1:\n            height += 1\n\n    if is_dead:\n        print(-1)\n    else:\n        print(height)\n        \n",
                true
            ],
            [
                "testcases=int(input())\nfor i in range(testcases):\n    n=int(input())\n    days=[int(x) for x in input().strip().split()]\n    tall =1\n    if n>0:\n        tall+=days[0]\n    if n>1:\n        for j in range(1,n):\n            if days[j-1]==1:\n                if days[j]==1:\n                    tall+=5\n            elif days[j]==1:\n                tall+=1\n            else:\n                tall=-1\n                break\n    print(tall)\n    \n\n",
                true
            ],
            [
                "def lifeOfFlower(n,array):\n    ans = 1\n    prev = 'na'\n    for x in range(n):\n        if x==0:\n            if array[x] == 1:\n                ans+=1\n\n        else:\n            if array[x] == 1 and prev == 1:\n                ans+=5\n            if array[x] ==1 and prev == 0:\n                ans+=1\n            if array[x] == 0 and prev == 0:\n                return -1\n        prev = array[x]\n\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int,input().split()))\n    print(lifeOfFlower(n,l))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    A = list(map(int,input().split()))\n    die = False \n    ans = 1 \n    for j in range(n):\n        if j-1>=0 and A[j-1] == 0 and A[j] == 0:\n            die = True \n        elif j-1>=0 and A[j-1] == 1 and A[j] == 1:\n            ans += 5 \n        elif j - 1>=0 and A[j-1] == 0 and A[j] == 1:\n            ans += 1 \n        elif j-1>=0 and A[j-1] ==0 and A[j] == 1:\n            ans += 1 \n        elif A[j] == 1:\n            ans += 1 \n        else:\n            continue \n    if die == True:\n        print(-1)\n    else:\n        print(ans)\n            \n",
                true
            ],
            [
                "from sys import stdin,stdout\nimport math\n\n#  list(map(int,stdin.readline().split()))        int(stdin.readline()\n\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int,stdin.readline().split()))\n    ans = 1\n    if a[0]==1:\n        ans+=1\n    check = False\n    for i in range(1,n):\n        if a[i]==1 and a[i-1]==1:\n            ans+=5\n        elif a[i]==1 and a[i-1]!=1:\n            ans+=1\n        elif a[i]!=1 and a[i-1]!=1:\n            check = True\n            break\n    if check:\n        print(\"-1\")\n    else:\n        print(ans)",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    ans=1\n    arr=list(map(int,input().strip().split()))\n    f=1\n    for i in range(1,len(arr)):\n        if arr[i]==1:\n            if arr[i-1]==1:\n                ans+=5\n            else:\n                ans+=1\n        if arr[i]==0:\n            if arr[i-1]==0:\n                ans=-1\n                f=0\n                break\n    if f==1:\n        ans+=1 if arr[0]==1 else 0\n    print(ans)",
                true
            ],
            [
                "\ndef solve(n, watering):\n    if '00' in watering: return -1\n    height = 1\n    for i in range(n):\n        if watering[i] == '0': continue\n        if i > 0 and watering[i-1] == '1':\n            height += 4\n        height += 1\n    return height\nif __name__ == '__main__':\n    ans = []\n    for _ in range(int(input())):\n        ans.append(solve(int(input()), ''.join(list(input().split()))))\n    print(*ans, sep='\\n')",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    x=list(map(int,input().split()))\n    tall=1\n    zero=0\n    five=0\n    for j in x:\n        if j==0:\n            zero+=1\n            five=0\n            if zero==2:\n                tall=-1\n                break\n        else:\n            if five==0:\n                tall+=1\n                five+=1\n                zero=0\n            else:\n                tall+=5\n                zero=0\n    print(tall)",
                true
            ],
            [
                "\nif __name__ == '__main__':\n    t = int(input())\n    for case in range(0, t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        size = 1\n        prev = 0\n        start = True\n        for day in days:\n            if day:\n                size += 5 if prev else 1\n            else:\n                if prev == 0 and not start:\n                    size = -1\n                    break\n            start = False\n            prev = day\n\n        print(size)\n",
                true
            ],
            [
                "t = int(input())\nfor k in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    a.insert(0,100)\n    dem = 1\n    kt = 1\n    for i in range(1,len(a)):\n        if(a[i]==1):\n            if(a[i-1]==1): dem+=5\n            else: dem+=1\n        else:\n            if(a[i-1]==0): kt=0\n    if(not kt): print(\"-1\")\n    else: print(dem)\n",
                true
            ],
            [
                "for i in range(int(input())):\n  n = int(input())\n  a = list(map(int, input().split()))\n  ans = 1\n  for j in range(n):\n    pre = False\n    if j > 0 and a[j - 1] == 1:\n      pre = True\n\n    if a[j] == 1:\n      if pre:\n        ans += 5\n      else:\n        ans += 1\n    else:\n      if j > 0 and not pre:\n        print(-1)\n        break\n  else:\n    print(ans)\n",
                true
            ],
            [
                "x=int(input())\n\nlista=[]\nfor i in range(x):\n    a=1\n    b=0\n    n = input().split()\n    g = input().split()\n    g = [int(x) for x in g]\n    if '0, 0' in str(g):\n        lista.append(-1)\n    else:\n        for i in g:\n            if i == 1 and b==1:\n                a+=5\n                b=1\n            elif i==1:\n                a+=1\n                b=1\n            elif i==0:\n                b=0\n        lista.append(a)\nfor i in lista:\n    print(i)\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\n#import random\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\n#import math\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\ndx = [0,0,1,-1]\ndy = [1,-1,0,0]\nmod = 10**9 + 7\nmod1 = 998244353\n\nfor _ in range (ii()) :\n    n = ii()\n    a = il()\n    ans = 1\n    fl = 0\n    for i in range(n) :\n        if (a[i] == 1) :\n            ans += 1\n\n        if (i > 0) :\n            if (a[i-1] == a[i] == 1) :\n                ans += 4\n            elif (a[i-1] == a[i] == 0) :\n                ans = -1\n                break\n\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    input()\n    days = list(map(int, input().split()))\n    height = 1\n    previous_day = -1\n    for day in days:\n        if day == 0 and previous_day == 0:\n            height = -1\n            break\n        if day == 0 and previous_day != 0:\n            previous_day = 0\n        elif day == 1 and previous_day != 1:\n            height += 1\n            previous_day = 1\n        elif day == 1 and previous_day == 1:\n            height += 5\n            previous_day = 1\n    print(height)\n",
                true
            ],
            [
                "def height(n, ls):\n    high = 1\n    for k in range(n-1):\n        if ls[k] == 0 and ls[k+1] == 0:\n            return -1\n    for i in range(n):\n        if ls[i] == 1:\n            high += 1\n    for k in range(n - 1):\n        if ls[k] == 1 and ls[k + 1] == 1:\n            high = high + 5 - 1\n    return high\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        ls = list(map(int, input().split()))\n        print(height(n, ls))\n\n\nmain()\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 1\n    for i in range(n):\n        if i != 0:\n            if a[i-1] == 1 and a[i] == 1:\n                k += 5\n                continue\n        if a[i] == 1:\n            k += 1\n        else:\n            if i != 0:\n                if a[i-1] == 0:\n                    k = -1\n                    break\n    if k == -1:\n        print(-1)\n    else:\n        print(k)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split()))\n    l = 1\n    f = True\n    for i in range(1, len(d)):\n        if d[i]==0 and d[i-1]==0:\n            f = False\n        if d[i]==1 and d[i-1]==1:\n            l+=5\n        if d[i]==1 and d[i-1]==0:\n            l+=1\n    if d[0]==1:\n        l+=1\n    if f:\n        print(l)\n    else:\n        print(-1)",
                true
            ],
            [
                "### Codeforces handle - \"@titanalpha\"\n#Email id - shubhamnokiafan@gmail.com\n\nfrom collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nimport copy\nfrom decimal import Decimal,getcontext\ngetcontext().prec = 32\n\nMOD = 1000000007\nMAX = sys.maxsize\nMIN = -sys.maxsize\nprime = []\n\nclass get:\n    def int():\n        return list(map(int,input().split()))\n    def str():\n        return input().split()\n    def float():\n        return list(map(float,input().split()))\n    def map():\n        return map(int,input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x))+1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result,item)\n    return result\n\ndef LCM(a,b):\n    return (a*b)//(math.gcd(a,b))\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2,sqrt(n)):\n        if n%i == 0:\n            return False\n    return True\n\ndef solve():\n    n = int(input())\n    a = get.str()\n    a = \"\".join(a)\n    if \"00\" in a:\n        print(-1)\n        return\n    res = 1\n    for i in range(n):\n        if a[i] == \"1\":\n            if i == 0:\n                res += 1\n            elif a[i-1] == \"1\":\n                res += 5\n            else:\n                res += 1\n    print(res)\n\nfor _ in range(int(input())):\n    solve()",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input()) \n    l = [int(i) for i in input().split()] \n    c = 1\n    c += l[0]\n    for i in range(1, n): \n        if l[i] == 0 and l[i-1] == 0: \n            c = -1\n            break\n        elif l[i] == 1 and l[i-1] == 1: \n            c += 5\n        elif l[i] == 1: \n            c+=1\n    print(c)",
                true
            ],
            [
                "for i in range(int(input())):\n    c=1\n    a=int(input())\n    b=list(map(int,input().split()))\n    if b[0]==1:\n            c+=1\n    for i in range(1,len(b)):\n        if b[i]==0 and b[i-1]==0:\n            c=-1\n            break\n        if b[i]==1 and b[i-1]==1:\n            c+=4\n        if b[i]==1:\n            c+=1\n    print(c)\n       \n   ",
                true
            ],
            [
                "\n\nn=int(input())\nfor i in range(n):\n    m= int(input())\n    p=1\n    ara=[int(i) for i in input().split()]\n    z=-1\n    for k in range(m):\n        if z==-1 and ara[k]==1:\n            z=1\n            p+=1\n        elif ara[k] == 1 and ara[k-1] == 0:\n            p+=1\n        elif ara[k] == 0 and ara[k-1] == 1 and k!=1:\n            p+=0\n        elif ara[k] == 1 and ara[k-1] == 1:\n            p+=5\n        elif ara[k] == 0 and ara[k-1] == 0 and k!=0:\n            p=-1\n            break\n    print(p)",
                true
            ],
            [
                "from sys import stdin\n\ndef solve():\n    for _ in range(int(stdin.readline().strip())):\n        n = int(stdin.readline().rstrip())\n        A = list(map(int, stdin.readline().rstrip().split()))\n        \n        cnt = 0\n        h = 1\n        pre = 0\n        \n        for x in A:\n            if x == 0:\n                cnt += 1\n                pre = 0\n                if cnt == 2:\n                    h = -1\n                    break\n            else:\n                h += 1 if pre == 0 else 5\n                cnt = 0\n                pre += 1\n                \n        print (h)\n        \nif __name__ == \"__main__\":\n    solve()\n",
                true
            ],
            [
                "t=int(input())\nwhile(t):\n    t-=1;\n    n=int(input())\n    a=list(map(int,input().split()))\n    h=1;\n    if(a[0]==1):\n        h=2;\n    for i in range(1, n):\n        if(a[i]==0 and a[i-1]==0):\n            h=-1;\n            break;\n        if(a[i]==1 and a[i-1]==0):\n            h+=1;\n        if(a[i]==1 and a[i-1]==1):\n            h+=5;\n    print(h)\n        ",
                true
            ],
            [
                "import sys\nimport collections as cc\ninput = sys.stdin.readline\nI = lambda : list(map(int,input().split()))\nmod = 10**9+7\nfor tc in range(int(input())):\n    n, = I()\n    ar =  I()\n    ans = 1\n    tf = 1\n    for i in range(n):\n        if i<=n-2:\n            if not ar[i] and not ar[i+1]:\n                tf = 0\n                break\n        if i==0:\n            if ar[i]:\n                ans+=1\n        else:\n            if ar[i] and ar[i-1]:\n                ans+=5 \n            if ar[i] and not ar[i-1]:\n                ans+=1\n    if tf :\n        print(ans)\n    else:\n        print(-1)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    b  = int(input())\n    flow = 1\n    execute = 1\n    a = list(map(int, input().strip().split()))\n    if a[0]==0:\n        flow = flow\n    else:\n        flow = flow + 1\n    for j in range(1,b):\n        if a[j]==1 and a[j-1]==1:\n            flow = flow + 5\n        elif a[j]==1 and a[j-1]==0:\n            flow = flow + 1\n        elif a[j]==0 and a[j-1]==0:\n            flow = -1\n            execute = -1\n        else:\n            flow =flow\n    if execute==1:\n        print(flow)\n    else:\n        print(execute)",
                true
            ],
            [
                "def program():\n    test_cases = int(input())\n    for _ in range(test_cases):\n        days_len = int(input())\n        sample = input()\n        days = [int(day) for day in sample.split(\" \")]\n        flower_length = 1\n        #preconditions\n        if days[0] == 1:\n            flower_length += 1\n        for i in range(1, days_len):\n            if days[i-1] == 1 and days[i] == 1:\n                flower_length += 5\n            elif days[i-1] == 0 and days[i] == 1:\n                flower_length += 1\n            elif days[i-1] == 0 and days[i] == 0:\n                flower_length = -1\n                break\n        print(flower_length)\n    \nif __name__ == \"__main__\":\n    program()",
                true
            ],
            [
                "import sys\n\nif __name__ == \"__main__\":\n    inp = sys.stdin.readline()\n    test = int(inp.strip('\\n'))\n\n    result = \"\"\n    for i in range(test):\n        inp = sys.stdin.readline()\n        n = int(inp.strip('\\n'))\n        inp = sys.stdin.readline()\n        l = list(map(int, inp.strip('\\n').split()))\n\n        if l[0] == 1:\n            height = 2\n        else:\n            height = 1\n        last = l[0]\n        flag = False\n\n        for i in range(1, n):\n            if last == l[i] == 0:\n                flag = True\n                break\n            if last == l[i] == 1:\n                height += 5\n            elif l[i] == 1:\n                height += 1\n            last = l[i]\n        \n        if flag:\n            sys.stdout.write('-1\\n')\n        else:\n            sys.stdout.write(str(height) + '\\n')\n",
                true
            ],
            [
                "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        w = list(map(int, input().split()))\n        i = 0 \n        suma = 1 \n        while i < n:\n            if w[i] == 1:\n                suma +=1\n                if i > 0:\n                    if w[i-1] == 1:\n                        suma += 4\n            else:\n                if i > 0:\n                    if w[i-1] == 0:\n                        suma = -1\n                        break\n            i += 1\n        print(suma)\n\n\n\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "def solution():\n    n = eval(input())\n    a = list(map(int, input().split()))\n    result = 1+sum(5 if i and a[i] == a[i-1] == 1 else 1 if a[i] == 1 else float(\"-inf\") if i and a[i] == a[i-1] == 0 else 0 for i in range(n))\n    return result if result != float(\"-inf\") else -1\n\nfor _ in range(eval(input())):\n    print('%s' % solution())\n",
                true
            ],
            [
                "t = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    ans,danger,bonus = 1,0,0\n    flag = 0\n    for i in range(n):\n        if flag:\n            break\n        if arr[i] == 1:\n            danger = 0\n            if bonus:\n                ans += 5\n            else:\n                ans += 1\n                bonus = 1\n        else:\n            if danger:\n                flag = 1\n                break\n            else:\n                danger = 1\n                bonus = 0\n    if flag:\n        print(-1)\n    else:                \n        print(ans)            \n",
                true
            ],
            [
                "a = int(input())\ni = 0\nwhile i<a:\n    b = int(input())\n    c = input().split(\" \")\n    s = 0\n    p = 1\n    while s<len(c):\n        if s==0:\n            if c[s]==\"1\":\n                p=p+1\n        if s!=0:\n            if (c[s]==\"1\") and (c[s-1]==\"1\"):\n                p=p+5\n            if (c[s]==\"1\") and (c[s-1]!=\"1\"):\n                p=p+1\n            if c[s]==\"0\" and c[s-1]==\"0\":\n                p=-1\n                break\n        s=s+1\n    print(p)\n    i=i+1",
                true
            ],
            [
                "def int_input():\n    a = int(input())\n    return a\n\ndef int_list_input():\n    a = list(map(int,input().split()))\n    return a\n\ndef solve():\n    n = int(input())\n    arr = int_list_input()\n    ans = 1\n    \n    for i,c in enumerate(arr):\n        if i == 0:\n            if c==1:\n                ans += 1\n            continue\n        if c==1:\n            if arr[i-1] == 1:\n                ans += 5\n            else:\n                ans += 1\n        else:\n            if arr[i-1] == 0:\n                ans = -1\n                break\n    \n    print(ans)\n\nif __name__ == '__main__':\n    \n    for _ in range(int(input())):\n        solve()\n    \n    #print(\"Case\",str(n)+\":\",str(ans))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t) :\n    n = int(input())\n    work = list(map(int, input().split(\" \")))\n    h = 1\n    d = False\n    for j in range(n) :\n        if (work[j] == 0) :\n            if (j>=1) :\n                if(work[j-1] == 0) :\n                    d = True\n                    break\n        else :    \n            if (j>=1) :\n                if(work[j-1] == 1) :\n                    h += 5\n                else :\n                    h += 1\n            else :\n                h += 1\n    if (d is False) :\n        print(h)\n    else :\n        print(-1)\n",
                true
            ],
            [
                "if __name__ == \"__main__\":\n    tests_amount = int(input())\n    for _ in range(tests_amount):\n        days_amount = int(input())\n        watering_info = [int(i) for i in input().split()]\n        length = 1\n        if watering_info[0] == 1:\n            length += 1\n        for i in range(1, days_amount):\n            if watering_info[i] == 1:\n                if watering_info[i-1] == 1:\n                    length += 5\n                else:\n                    length += 1\n            else:\n                if watering_info[i - 1] != 1:\n                    length = -1\n                    break\n        print(length)\n",
                true
            ],
            [
                "\"\"\"\n    Author : Ashish Sasmal\n    Python3 / PyPy3\n\"\"\"\n\nfrom sys import stdin as sin\ndef aint():return int(input())\ndef amap():return map(int,sin.readline().split())\ndef alist():return list(map(int,sin.readline().split()))\ndef astr():return input()\n\nfor _ in range(aint()):\n    n = aint()\n    a = alist()\n    ans = 1\n    curr = 0\n    for i in range(n):\n        if a[i] ==1:\n            curr+=1\n        else:\n            if curr>=1:\n                ans+=1\n                ans+=5*(curr-1)\n            curr = 0\n            if i>0 and a[i-1]==0:\n                ans=-1\n                break\n    \n    if ans!=-1:\n        if curr>=1:\n            ans+=1\n            ans+=5*(curr-1)\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    l=1\n    for i in range(n):\n        if(i==0):\n            if(arr[i]==1):\n                l+=1 \n        else:\n            if(arr[i]==1):\n                l+=1 \n                if(arr[i-1]==1):\n                    l+=4 \n            else:\n                if(arr[i-1]==arr[i]==0):\n                    l=-1 \n                    break\n    print(l)",
                true
            ],
            [
                "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\ninteractive = False\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\n\nflush = sys.stdout.flush\nif interactive and not testing:\n    input = sys.stdin.readline\nelse:\n    inputData = InputData()\n    input = inputData.input\n\ndef intin():\n    return(int(eval(input())))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(eval(input())))\ndef strin():\n    return eval(input())\ndef lout(l, sep=\"\\n\", toStr=True):\n    print((sep.join(list(map(str, l)) if toStr else l)))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print((args[0] if len(args)==1 else args))\n    if kargs: print([(k,v) for k,v in list(kargs.items())])\ndef ask(q):\n    sys.stdout.write(str(q)+'\\n')\n    flush()\n    return intin()\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\n\ndef main():\n    n = intin()\n    a = intlin()\n    ans = 1\n    for i in range(n):\n        if a[i] == 1:\n            ans += 1\n            if i > 0 and a[i-1] == 1:\n                ans += 4\n        else:\n            if i > 0 and a[i-1] == 0:\n                return -1\n    return ans\n\nanss = []\nfor _ in range(intin()):\n    anss.append(main())\n    # anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print((int(round(time() * 1000))  - start_time))\n",
                true
            ],
            [
                "t = int(input())\n\ndef flower(lst):\n  final = 1\n  length = len(lst)\n  for j in range(length):\n    if j != 0:\n      if lst[j] == \"0\" and lst[j - 1] == \"0\" :\n        final = -1\n        return final\n\n      elif lst[j] == \"1\" and lst[j - 1] == \"1\":\n        final += 5 \n\n      elif lst[j] == \"1\" and lst[j - 1] == \"0\":\n        final += 1\n\n    elif j == 0:\n      if lst[j] == \"1\":\n        final += 1\n\n  return final \n\n\nfor i in range(t):\n  n = input()\n  lst = input().split()\n  print(flower(lst))\n  \n  ",
                true
            ],
            [
                "t = int(input())\n\ndays = []\n\nfor i in range(t):\n    days.append([input(),input().replace(' ', '')])\n\nfor i in days:\n    if i[1].count('00') > 0:\n        print(-1)\n    else:\n        total = 1\n        for j in range(len(i[1])):\n            q = i[1][j]\n            if q == '1':\n                if i[1][j-1] == '1' and j != 0:\n                    total += 5\n                else:\n                    total += 1\n        print(total)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    a=input().split()\n    k=\"\".join(a)\n    if k[0]==\"0\":\n        t=1\n    else:\n        t=2\n    if \"00\" in k:\n        print(-1)\n    else:\n        for i in range(1,n):\n            if k[i]==\"1\" and k[i-1]==\"1\":\n                t+=5\n            elif k[i]==\"1\"and k[i-1]==\"0\":\n                t+=1\n        print(t)\n       ",
                true
            ],
            [
                "cases = int(input())\nfor i in range(cases):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    previous = -99\n    height = 1\n    for i, item in enumerate(arr):\n        if item == previous:\n            if item == 0:\n                height = -1\n                break\n            else:\n                height += 5\n                previous = 1\n                continue\n        if item == 1:\n            height += 1\n            previous = 1\n        elif item == 0:\n            previous = 0\n    print(height)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(\" \")))\n    h = 1\n    if a[0] == 1:\n        h += 1\n    for i in range(1, n):\n        if a[i] == 1 and a[i - 1] == 1:\n            h += 5\n        elif a[i] == 1 and a[i - 1] == 0:\n            h += 1\n        elif a[i] == 0 and a[i - 1] == 0:\n            h = -1\n            break\n    print(h)",
                true
            ],
            [
                "# by the authority of GOD     author: Kritarth Sharma #\nimport sys\nfrom collections import defaultdict,deque\nfrom bisect import bisect_left\nimport math\ninput=sys.stdin.readline\ndef inp():\n    l=list(map(int,input().split()))\n    return l\n\nfor _ in range(int(input())):\n        n,=inp()\n        l=inp()\n        s=1\n        i=0\n        if l[i]==1:\n            s+=1\n\n        for i in range(1,n):\n            if l[i]==1 and l[i-1]==1:\n                s+=5\n            elif l[i]==0 and l[i-1]==0:\n                print(-1)\n                break\n            elif l[i]==1:\n                s+=1\n        else:\n            print(s)\n        \n\n        \n            \n            \n\n\n\n        \n\n\n\n\n\n            \n        \n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    m=int(input())\n    L=input()\n    L=L.split()\n    last = ''\n    ans=1\n    for l in L:\n        if l == '1':\n            if last == '1':\n                ans += 5\n            else:\n                ans += 1\n        else:\n            if last == '0':\n                ans = -1\n                break\n        last = l\n    print(ans)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    c=1\n    flag=True\n    for j in range(n-1):\n        if a[j]==a[j+1]==0:\n            flag=False\n            break\n        elif a[j]==0:\n            c=c+0\n        elif a[j]==1 and a[j]==a[j+1]==1:\n            c=c+5\n        elif a[j]==1:\n            c=c+1\n    if flag==False:\n        print(-1)\n    elif n==1 and a[0]==1:\n        print(2)\n    elif (a[-1]==1 and a[-2]==0) or (a[-1]==1 and a[-2]==1):\n        print(c+1)\n    else:\n        print(c)",
                true
            ],
            [
                "import sys,os,io\ninput = sys.stdin.readline # for strings\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline # for non-strings\n\nPI = 3.141592653589793238460\nINF =  float('inf')\nMOD  = 1000000007\n# MOD = 998244353\n\n\ndef bin32(num):\n    return '{0:032b}'.format(num)\n\ndef add(x,y):\n    return (x+y)%MOD\n\ndef sub(x,y):\n    return (x-y+MOD)%MOD\n\ndef mul(x,y):\n    return (x*y)%MOD\n\ndef gcd(x,y):\n    if y == 0:\n        return x\n    return gcd(y,x%y)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\ndef power(x,y):\n    res = 1\n    x%=MOD\n    while y!=0:\n        if y&1 :\n            res = mul(res,x)\n        y>>=1\n        x = mul(x,x)\n        \n    return res\n        \ndef mod_inv(n):\n    return power(n,MOD-2)\n\ndef prob(p,q):\n    return mul(p,power(q,MOD-2))    \n  \ndef ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef ls():\n    return [i for i in input().split()]\n\nfor t in range(ii()):\n    t+=1\n    n = ii()\n    a = li()\n    h = 1\n    for i in range(n):\n        if a[i] == 1:\n            if i != 0:\n                if a[i-1] == 1:\n                    h+=5\n                else:\n                    h+=1\n            else:\n                h+=1\n        else:\n            if i != 0 and a[i-1] == 0:\n                h=-1\n                break\n    print(h)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n############ ---- Input Functions ---- ############\ndef inp():\n    return (int(input()))\ndef inlt():\n    return (list(map(int, input().split())))\ndef insr():\n    s = input()\n    return (list(s[:len(s) - 1]))\ndef invr():\n    return (map(int, input().split()))\nt = inp()\nfor _ in range(t):\n    # print(s)\n    n = inp()\n    A = inlt()\n    if n==1:\n        print(1+sum(A))\n        continue\n    res = A[0]+1\n    for i in range(1,n):\n        if A[i]==0 and A[i-1]==0:\n            print(-1)\n            break\n        if A[i]==1 and A[i-1]==1:\n            res+=5\n        if A[i]==1 and A[i-1]==0:\n            res+=1\n    else:\n        print(res)\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\ninp = lambda: list(map(int, sys.stdin.readline().rstrip(\"\\r\\n\").split()))\nMod = 998244353\nfor _ in range(int(input())):\n    n=int(input())\n    ans=1\n    a=inp()\n    if a[0]==1:\n        ans+=1\n    for i in range(1,n):\n        if a[i]==1:\n            if a[i-1]==1:\n                ans+=5\n            else:\n                ans+=1\n        else:\n            if a[i-1]==0:\n                ans=-1\n                break\n    print(ans)\n    ",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    days = input().split(' ')\n    plant_height =1\n    if days[0] =='1':\n        plant_height +=1\n    for j in range(1, n):\n        if days[j] =='1' and days[j-1] =='0':\n            try :\n                a = days[-1]\n                days[-1] = '1'\n                if days[j-2] == '0':\n                    plant_height =-1\n                    break  \n                else:\n                    plant_height+=1\n                days[-1] =a    \n            except: \n                plant_height +=1\n        elif days[j] =='1' and days[j-1] =='1':\n            plant_height +=5\n        elif days[j]== '0' and days [j-1] =='0':\n            plant_height = -1\n            break   \n    print( plant_height)\n\n",
                true
            ],
            [
                "import math\n\nfor _ in range(0,int(input())):\n    n=int(input())\n    days=input().split(\" \")\n    length=int(days[0])+1\n    for i in range(1,n):\n        if int(days[i]) == 0 and int(days[i-1])==0:\n            length=-1\n            break\n        if int(days[i])==1 and int(days[i-1])==0:\n            length=length+1\n            \n        if int(days[i])==1 and int(days[i-1])==1:\n            length=length+5\n        \n        #print(length)\n    \n    print(length)\n",
                true
            ],
            [
                "for t in range(int(input())):\n\n    N = int(input())\n    arr = list(map(int,input().split()))\n    ans = 1\n\n    prev = None\n\n    for i in range(N):\n\n        if prev is None:\n\n            ans += arr[i]\n            prev = arr[i]\n\n        else:\n\n            if arr[i] == 1:\n\n                if arr[i-1] == 1:\n                    ans += 5\n\n                else:\n                    prev = arr[i]\n                    ans += 1\n\n            else:\n\n                if arr[i-1] == 0:\n                    ans = -1\n                    break\n\n                else:\n                    prev = arr[i]\n\n    print(ans)\n",
                true
            ],
            [
                "import sys\nimport math\nimport collections\nimport heapq\n\ndy = [1, 0, -1, 0]\ndx = [0, 1, 0, -1]\n\nr = lambda: sys.stdin.readline().rstrip()\nMIS = lambda: map(int, r().split())\n\n\nfor _ in range(int(r())):\n    N = int(r())\n    L = list(MIS())\n    ans = 1\n    row = 0\n    pp = 0\n    for i in range(N):\n        if L[i] == 1:\n            pp = 0\n            if row == 1:\n                ans += 5\n            else:\n                row += 1\n                ans += 1\n        else:\n            pp += 1\n            row = 0\n            if pp >= 2:\n                ans = -1\n                break\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor case in range(t):\n  n = int(input())\n  l = [int(i) for i in input().split()]\n  ans = 1\n  prev = 0\n  for i, j in enumerate(l):\n    if not j and not prev and i != 0:\n      ans = -1\n      break\n    elif not j and prev:\n      prev = 0\n    elif j and not prev:\n      ans += 1\n      prev = 1\n    elif j and prev:\n      ans += 5\n  print(ans)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=1\n    for i in range(n-1):\n        if a[i]==0 and a[i+1]==0:\n            s=-1\n            break\n    if s!=-1:\n        for i in range(1,n):\n            if a[i]==1 and a[i-1]==1:\n                s+=5\n            elif a[i]==1:\n                s+=1\n    if a[0]==1 and s!=-1:\n        s+=1\n    print(s)\n",
                true
            ],
            [
                "\nt=int(input())\nfor i in range(t):\n    d=int(input())\n    l=list(map(int,input().split()))\n    ans=1\n    for j in range(d):\n        if j!=0:\n            if l[j]==0 and l[j-1]==0:\n                ans=-1\n                break\n            elif l[j]==1  and l[j-1]==1:\n                ans=ans+5\n            elif l[j]==1 and l[j-1]!=1:\n                ans=ans+1\n        else:\n            if l[j]==1:\n                ans=ans+1\n        \n    print(ans)\n\n            ",
                true
            ],
            [
                "t=int(input())\nwhile t>0:\n    n=int(input())\n    ar=list(map(int,input().split()))\n    s=1 \n    live=True\n    for x in range(1,n):\n        if ar[x]==1 and ar[x-1]==1:\n            s+=5\n        elif ar[x]==0 and ar[x-1]==0:\n            live=False\n            break\n        elif ar[x]==1:\n            s+=1\n    if ar[0]==1:\n        s+=1\n    if live:\n        print(s)\n    else:\n        print(-1)\n    t-=1",
                true
            ],
            [
                "t=int(input())\nwhile(t):\n    t=t-1\n    n=int(input())\n    a=list(map(int,input().split()))\n    ans=1\n    if(a[0]==1):\n        ans+=1\n    for i in range(1,n):\n        if(a[i]==0 and a[i-1]==0):\n            ans=-1\n            break\n        if(a[i]==1):\n            if(a[i-1]==1):\n                ans+=4\n            ans+=1\n        else:\n            if(a[i-1]==0):\n                ans-=1\n                break\n    print(ans)",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    m = int(input())\n    mas = [int(i) for i in input().split()]\n    s = 1\n    z = False\n    so = 2\n    for j in range(m):\n        if mas[j] == 1 and z == False:\n            z = True\n            s += 1\n            so = 2\n        elif mas[j] == 1 and z != False:\n            z = True\n            s += 5\n            so = 2\n        elif mas[j] == 0:\n            so -= 1\n            z = False\n        if so == 0:\n            s = -1\n            break\n    print(s)",
                true
            ],
            [
                "# cook your dish here\nimport math\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    height = 1\n    \n    i = 1\n\n    if a[0] == 1:\n        height += 1\n    while i < n:\n        if a[i] == 1 and a[i - 1] == 1:\n            height += 5\n        elif a[i] == 0 and a[i - 1] == 0:\n            height= -1\n            break\n        elif a[i] == 1:\n            height += 1\n        i += 1\n    print(height)\n    \n        \n",
                true
            ],
            [
                "from collections import Counter\nfrom math import ceil,floor,log2,gcd\nimport bisect as bs\n#sorted(x.items(), key=lambda item: item[1])\nimport sys\ninput = sys.stdin.readline\ninp_lis = lambda: list(map(int, input().split()))      \ninp_multi=lambda: map(int,input().split())\ninp_int=lambda: int(input().strip())\n\n\n\n\n\nfor _ in range(int(input().strip())):\n    n=inp_int()\n    a=inp_lis()\n    c=1\n    d=0\n    for i in range(n):\n        \n        \n        if a[i]==1:\n            d=0\n            \n            if i!=0 and a[i-1]==1:\n                # print(i)\n                c+=5\n            else:\n                c+=1\n        else:\n            \n            d+=1\n        if d==2:\n            print(-1)\n            break\n                    \n    if d!=2:\n        print(c)\n    \n         \n    ",
                true
            ],
            [
                "# cook your dish here\nfor _ in range(int(input())):\n    n=int(input())\n    A=list(map(int,input().split()))\n    ans=1\n    for x in range(n):\n        if x==0 :\n            if A[x]==1:\n                ans+=1\n            \n        elif A[x]==1 and A[x-1]==1:\n            ans+=5\n        elif A[x]==1:\n            ans+=1\n        elif A[x]==0 and A[x-1]==0:\n            ans=-1\n            break\n    print(ans)\n        \n    ",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n=input()\n    a=list(map(int, input().split()))\n    ans = 1\n\n    last = False\n    not_watered = 0\n    for j in a:\n        if j==1 and last==True:\n            ans+=5\n            not_watered = 0\n        elif j==1 and last==False:\n            last = True\n            ans+=1\n            not_watered = 0\n        else:\n            not_watered += 1\n            last=False\n        if not_watered == 2:\n            ans = -1\n            break\n    print(ans)",
                true
            ],
            [
                "\ndef solve(n,arr):\n    prev = -2\n    l = 1\n    for i in arr:\n        curr = i\n        if prev == -2:\n            if curr == 1:\n                l+=1\n        elif prev == 1:\n            if curr == 1:\n                l+=5\n        else:\n            if curr==0:\n                return -1\n            else:\n                l+=1\n        prev = curr\n    return l\n\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int,input().rstrip().split()))\n        ans = solve(n,arr)\n        print(ans)",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve():\n  n = get_int()\n  arr = get_list()\n\n  s = ''\n\n  for ele in arr:\n    s += str(ele)\n  \n  if '00' in s:\n    print(-1)\n    return\n  \n  ans = 1\n\n  i = 1\n\n  while i < n:\n    if arr[i] == 1 and arr[i-1] == 1:\n      ans += 5\n    elif arr[i] == 1:\n      ans += 1\n    \n    i += 1\n  \n  if arr[0] == 1:\n    ans += 1\n  \n  print(ans)\n  return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT = get_int()\nwhile T:\n  solve()\n  T -= 1\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    height=1\n    for i in range(n):\n        if i==0:\n            if a[0]==1:\n                height+=1\n        else:\n            if a[i]==a[i-1]==0:\n                height=-1\n                break\n            elif a[i-1]==0 and a[i]==1:\n                height+=1\n            elif a[i]==0:\n                continue\n            elif a[i-1]==a[i]==1:\n                height+=5\n    print(height)\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 1\n    k = 0\n    fl = False\n    for i in range(n):\n        if i != 0:\n            if k == 0 and arr[i] == 0:\n                fl = True\n                break\n        if arr[i] == 1:\n            if i == 0:\n                if arr[i] == 1:\n                    ans += 1\n                    k = 1\n            else:\n                if k == 1:\n                    ans += 5\n                else:\n                    ans += 1\n                    k = 1\n        else:\n            k = 0\n    if fl == True:\n        ans = -1\n    print(ans)",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n    temp = int(input())\n    lst = input().split(\" \")[:temp]\n\n    if int(lst[0]) == 1:\n        grow = 2\n    else:\n        grow = 1\n\n    for j in range(1,temp):\n        if int(lst[j]) == 1 and int(lst[j-1]) == 1:\n            grow = grow + 5\n        elif int(lst[j]) == 1 and int(lst[j-1]) == 0:\n            grow = grow + 1\n        elif int(lst[j]) == 0 and int(lst[j-1]) == 0:\n            grow = -1\n            break\n\n    print(grow)\n",
                true
            ],
            [
                "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = []\n    a = list(map(int, input().split()))\n    # print(a)\n    h = 1\n    nwd = 0\n    dead = 0\n    for i in range(n):\n        if a[i] == 1:\n            if nwd == 0 and i:\n                h += 5\n            else:\n                h += 1\n            nwd = 0\n        else:\n            nwd += 1\n            if nwd == 2:\n                dead = 1\n\n    if dead:\n        print(-1)\n    else:\n        print(h)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    s = input().split()\n    for j in range(n):\n        a.append(int(s[j]))\n    h = 1\n    for j in range(n):\n        if (j == 0) and (a[j] == 1):\n            h += 1\n        elif (j >= 1) and (a[j] == 1) and (a[j-1] == 0):\n            h += 1\n        elif (j >= 1) and (a[j] == 1) and (a[j-1] == 1):\n            h += 5\n        elif (j >= 1) and (a[j] == 0) and (a[j-1] == 0):\n            h = -1\n            break\n    print(h)\n",
                true
            ],
            [
                "t = int(input())\nans = []\n\nfor i in range(t):\n    n = int(input())\n    in_test_case = input().split()\n    test_case = [int(i) for i in in_test_case]\n    life = 1\n    for i in range(n):\n        if i == 0:\n            if test_case[i] == 1:\n                life += 1\n        else:\n            if test_case[i] == 0 and test_case[i-1] == 0:\n                life = -1\n                break\n            elif test_case[i] == 1 and test_case[i-1] == 1:\n                life += 5\n            elif test_case[i] == 1:\n                life += 1\n    ans.append(life)\n\nfor i in range(t):\n    print(ans[i])",
                true
            ],
            [
                "numtestcases = int(input())\nfor i in range(numtestcases):\n    n = int(input())\n    wateredlist = input().split()\n    watered = True\n    plantheight = 1\n    for i in range(n-1):\n        if int(wateredlist[i]) == int(wateredlist[i+1]) == 0:\n            watered = False\n    if watered != False:\n        grew5 = False\n        for num in range(n-1):\n            if int(wateredlist[num]) == int(wateredlist[num+1]):\n                plantheight += 5\n            elif int(wateredlist[num])!= 0:\n                plantheight += 1\n        if wateredlist[-1] == '1':\n            plantheight += 1\n\n        print(plantheight)\n    if watered == False:\n        print(-1)\n                \n            \n    \n    \n",
                true
            ],
            [
                "def growth(n, L):\n    h = 1\n    if L[0] == '0':\n        pass\n    if L[0] == '1':\n        h += 1\n    for i in range(1, n):\n        if L[i] == '0':\n            if L[i-1] == '0':\n                return -1\n        else:\n            if L[i-1] == '0':\n                h += 1\n            else:\n                h += 5\n    return h\n\ncases = int(input())\nfor i in range(cases):\n    n = int(input())\n    L = input().split( )\n    print(growth(n, L))",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    f=0\n    h=0\n    crr=0\n    for i in a:\n        if i==1:\n            f=0\n            h+=1 if crr==0 else 5\n            crr=1\n        else:\n            f+=1\n            crr=0\n        if f==2:\n            break\n    if f>1:\n        print(-1)\n    else:\n        print(h+1)\n",
                true
            ],
            [
                "kl = int(input())\nfor kkl in range(kl):\n  n = int(input())\n  a= list(map(int, input().split()))\n\n  rz=1\n  pr=3\n  for i in range(n):\n    if pr==2:\n      continue\n    if a[i]==0 and pr==0:\n      pr=2\n    elif a[i]==0 and (pr==1 or pr==3):\n      pr=0\n    elif a[i]==1 and pr==1:\n      rz+=5\n    elif a[i]==1 and (pr==0 or pr==3):\n      rz+=1\n      pr=1\n  if pr==2:\n    print(-1)\n  else:\n    print(rz)\n\n    ",
                true
            ],
            [
                "def solve(a, n):\n    h = 1\n    if a[0]:\n        h += 1\n    for i in range(1, n):\n        if (not a[i]) and (not a[i - 1]):\n            h = -1\n            break\n        if a[i - 1]:\n            if a[i]:\n                h += 5\n        else:\n            if a[i]:\n                h += 1\n\n    return h\n\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(solve(a, n))\n\n\nif __name__ == \"__main__\":\n    main()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=[int(x) for x in input().split()]\n    h=1\n    flag=0\n    if l[0]==1:\n        h+=1\n    for i in range(1,n):\n        if l[i-1]==0 and l[i]==1:\n            h+=1\n        if l[i-1]==1 and l[i]==1:\n            h+=5\n        if l[i-1]==0 and l[i]==0:\n            flag=1\n    if flag:\n        print(-1)        \n    else:\n        print(h)\n    ",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    dead = 0\n    lena = 1\n    poliv = 0\n    antipoliv = 0\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            poliv += 1\n            antipoliv = 0\n            if poliv > 1:\n                lena += 5\n            if poliv == 1 :\n                lena += 1\n        if arr[i] == 0:\n            poliv = 0\n            antipoliv += 1\n            if antipoliv == 2:\n                dead = 1\n                print(-1)\n                break\n    if dead == 0:\n        print(lena)\n",
                true
            ],
            [
                "tt=1\ntt=int(input())\nfor _ in range (tt):\n    #input()\n    n=int(input())\n    #n,m=map(int,input().split())\n    a=list(map(int,input().split()))\n    #b=list(map(int,input().split()))\n    #s=input()\n    #n=len(s)\n    prev=-1\n    ans=1\n    for i in a:\n        if i==1:\n            if prev==1:\n                ans+=5\n            else:\n                ans+=1\n            prev=1\n        else:\n            if prev==0:\n                ans=-1\n                break\n            prev=0\n    print(ans)\n        ",
                true
            ],
            [
                "t=int(input())\nfor te in range(t):\n    n=int(input())\n    a=list(map(int,input().split(\" \")))\n    dead=False\n    for i in range(n-1):\n        if(a[i]==0 and a[i+1]==0):\n            print(-1)\n            dead=True\n            break\n    if(dead==False):\n        init=1\n        for i in range(n):\n            if(i==0):\n                if(a[i]==1):\n                    init+=1\n            else:\n                if(a[i]==1 and a[i-1]==1):\n                    init+=5\n                elif(a[i]==1 and a[i-1]==0):\n                    init+=1\n        print(init)\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    _ = input()\n    a = [int(x) for x in input().split()]\n\n    streak = False\n    died = False\n    water = True\n    flower = 1\n    for x in a:\n        if x == 1:\n            if streak:\n                flower += 5\n            else:\n                flower += 1\n            \n            streak = True\n            water = True\n        else:\n            if water:\n                water = False\n            else:\n                died = True\n                break\n\n            streak = False\n    \n    if died:\n        print(-1)\n    else:\n        print(flower)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    a=[int(j) for j in input().split()]\n    ans,cnt=1,0\n    if a[0]==1:\n        ans+=1\n    else:\n        cnt+=1\n    for j in range(1,n):\n        if a[j]!=1 and cnt==1:\n            print('-1')\n            break\n        elif a[j]!=1:\n            cnt+=1\n        else:\n            if cnt==1:\n                ans+=1\n                cnt=0\n            else:\n                ans+=5\n    else:\n        print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    li=list(map(int,input().split()))\n    a=1 \n    if(li[0]==1):\n        a=a+1 \n    for i in range(1,n):\n        if(li[i]==1):\n            if(li[i-1]==1):\n                a=a+5 \n            else:\n                a=a+1 \n        else:\n            if(li[i-1]==0):\n                a=-1 \n                break \n    print(a)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    arr=list(map(int,input().strip().split()))\n    x=1\n    c=0\n    if arr[0]==1:x+=1\n    if n>1:\n        for i in range(1,n):\n            if arr[i]==1:\n                x+=1\n            if arr[i]==1 and arr[i-1]==1:x+=4\n            if arr[i]==0 and arr[i-1]==0:\n                print(-1)\n                c=1\n                break\n    if c!=1:print(x)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(\" \")))\n    h = 1\n    prev = -1\n    for d in a:\n        if d == 1:\n            if prev == 1:\n                h += 5\n            else:\n                h += 1\n            prev = 1\n        else:\n            if prev == 0:\n                h = -1\n                break\n            prev = 0\n    print(h)\n",
                true
            ],
            [
                "\nif __name__ == '__main__':\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        height = 1\n        previous = None\n        for i in arr:\n            if previous is not None:\n                if previous and i==1:\n                    height+=5\n                elif previous and i==0:\n                    height+=0\n                elif not previous and i==1:\n                    height+=1\n                elif not previous and i==0:\n                    height=-1\n                    break\n            else:\n                if i==1:\n                    height+=1\n                else:\n                    height+=0\n            previous=i\n        print(height)\n\n\n\n",
                true
            ],
            [
                "import sys\nfrom collections import deque\nimport math\nfrom bisect import bisect_left\nfrom functools import cmp_to_key\ndef II():\n    return int(sys.stdin.readline())\n \ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n    return map(int, sys.stdin.readline().split())\n \ndef SI():\n    return sys.stdin.readline().strip()\n \ndef FACT(n, mod):\n    s = 1\n    facts = [1]\n    for i in range(1,n+1):\n        s*=i\n        s%=mod\n        facts.append(s)\n    return facts[n]\n \ndef C(n, k, mod):\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\n \ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\n\nfor _ in range(II()):\n    n = II()\n    a = LI()\n    ans = 1\n    for i in range(n):\n        if a[i] == 1:\n            if i > 0 and a[i-1] == 1:\n                ans+=5\n            else:\n                ans+=1\n        elif i > 0 and a[i-1] == 0:\n            ans = -1\n            break\n    print(ans)",
                true
            ],
            [
                "# cook your dish here\nimport sys\n \ndef f(l,n,f):\n    a=0\n    x=n-1\n    while a<=x:\n        m=a+(x-a)//2\n        if l[m]==f:\n            return m\n        elif l[m]>f:\n            x=m-1\n        else:\n            a=m+1\n    return None\n \nfor _ in range(int(sys.stdin.readline())):\n    n=int(sys.stdin.readline())\n    #n,h=map(int,sys.stdin.readline().split())\n    l=list(map(int,sys.stdin.readline().split()))\n    h=1\n    for i in range(n):\n        if i>0:\n            if l[i-1]==1 and l[i]==1:\n                h=h+5\n            elif l[i-1]==0 and l[i]==1:\n                h=h+1\n            elif l[i-1]==0 and l[i]==0:\n                print(-1)\n                break\n            else:\n                continue\n        else:\n            if l[i]==1:\n                h=h+1\n            else:\n                continue\n    else:\n        print(h)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    k=1\n    a=int(input())\n    c=list(map(int,input().split()))\n    if len(c)==1:\n        if c[0]==1:\n            k=k+1\n        if c[0]==0:\n            k=1\n    else:\n        k=1\n        for j in range(len(c)-1):\n           if c[j+1]==1:\n                   k=k+1 \n           if c[j+1]+c[j]==2:\n                    k=k+5-1\n           if c[j+1]+c[j]==0:\n                    k=k-1-k\n                    break\n        if (c[0]==1)and(k!=-1):\n            k=k+1\n                        \n    print(k)",
                true
            ],
            [
                "for i in range(int(input())):\n    a=int(input())\n    b=list(map(int,input().split()))\n    x=y=z=0\n    l=1\n    for j in range(a):\n        #print(j,x,y,l)\n        if b[j]==1:\n            x+=1\n            y=0\n            if x==1:\n                l+=1\n            else:\n                l+=5\n        elif b[j]==0:\n            x=0\n            y+=1\n            #print(l)\n            if y>1:\n                z=-1\n        #print(l,\"LL\")\n        if z==-1:\n            l=-1\n            break\n    print(l)",
                true
            ],
            [
                "t = int(input())\nanswer = [1]*t\nfor _ in range(t):\n    n = int(input())\n    h = 1\n    dww = 0\n    a = input().split()\n    if int(a[0]) == 0: dww += 1\n    else: h += 1\n    \n    for i in range(1, n):\n        if int(a[i]) == 0:\n            dww += 1\n            if dww == 2:\n                h = -1\n                break\n        elif (int(a[i]) == 1 and int(a[i-1]) == 1):\n            dww = 0\n            h += 5\n        else:\n            dww = 0\n            h += 1\n    \n    answer[_] = h\nfor i in answer: print(i)\n",
                true
            ],
            [
                "for s in [*open(0)][2::2]:\n    h = 1; p = True\n    for i,x in enumerate([*map(int,s.split())]):\n        if x:\n            if i and p:\n                h += 5\n            else:\n                h += 1\n        else:\n            if not p:\n                print(-1)\n                break\n        p = x\n    else:\n        print(h)",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    x=1\n    if l[0] == 0 and len(l) == 1:\n        print(1)\n    else:\n        for i in range(n):\n            \n            if i>=1 and l[i] ==1 and l[i-1] == 1:\n                x+=5\n                \n            elif l[i] == 1:\n                x+=1\n                \n            \n            elif i<n-1 and l[i] ==0 and l[i+1] ==0:\n                x=-1\n                break\n            \n        print(x)",
                true
            ],
            [
                "from math import *\n \n#from math import factorial as fact, comb as ncr \nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\n\nfrom array import array\nfrom re import search\n \nli=lambda : list(map(int,input().split()))\narr=lambda a: array('i',a)\nbi=lambda n: bin(n).replace(\"0b\", \"\")\nyn=lambda f: print('NYOE S'[f::2])\nsbstr=lambda a,s: search('.*'.join(a),s)\n\n'''def isprime(a):\n    if a==2: return True\n    elif a%2==0: return False\n    n=3\n    while n<=a**0.5:\n        if a%n==0:\n            return False\n        n+=2\n    return True\n'''\n'''def nf(n,a):\n    b=a*a\n    c=b*a\n    d=c*a\n    e=n\n    ct=0\n    while e%a==0:\n        if e%d==0:\n            ct+=4\n            e=e//d\n        if e%c==0:\n            ct+=3\n            e=e//c\n        if e%b==0:\n            ct+=2\n            e=e//b\n        if e%a==0:\n            ct+=1\n            e=e//a\n    return ct\n'''\n\ndef solve():\n    for _ in range(int(input())):\n        n=int(input())\n        a=input()\n        if '0 0' in a:\n            print(-1)\n        else:\n            a=list(map(int,a.split()))\n            pf=False\n            l=1\n            for i in range(n):\n                if a[i]==1:\n                    l+=1+4*pf\n                    pf=True\n                else:\n                    pf=False\n            print(l)\n\n\nsolve()",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nc = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = 1\n    if a[0]:\n        t += 1\n    for i in range(1, n):\n        if a[i]:\n            if a[i-1]:\n                t += 5\n            else:\n                t += 1\n        else:\n            if not a[i-1]:\n                c.append(-1)\n                break\n    else:\n        c.append(t)\n\nprint(*c, sep=\"\\n\")\n",
                true
            ],
            [
                "for _ in range (int(input())):\n    n = int(input())\n    list = [int(x) for x in input().split()]\n    flow = 1\n    boo = 1\n    for i in range(n):\n        if i == 0 :\n            if list[i] == 1 :\n                flow+= 1\n        else:\n            if list [i] == 1:\n                if list[i-1] == 1 :\n                    flow +=5\n                else :\n                    flow +=1\n\n            elif list[i] == 0 :\n                if list[i-1] == 0 :\n                    boo = 0\n                    break\n    if boo == 0 :\n        print(-1)\n    else:\n        print(flow)\n\n",
                true
            ],
            [
                "for t in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if a[0]==0:\n        ans=1 \n    else:\n        ans=2 \n    for i in range(1,n):\n        if a[i]==1:\n            if a[i-1]==1:\n                ans+=5 \n            else:\n                ans+=1\n        elif a[i]==0:\n            if a[i-1]==0:\n                ans=-1 \n                break\n            else:\n                pass\n    print(ans)  ",
                true
            ],
            [
                "t = int(input())\n\nfor tt in range(t):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    \n    height=1\n    dead=0\n    \n    for i in range(n):\n        if(arr[i]==1):\n            if(i>0 and arr[i-1]==1):\n                height+=5\n            else:\n                height+=1\n        if i>0 and arr[i]==0 and arr[i-1]==0:\n            dead=1\n    \n    if(dead):\n        print(-1)\n    else:\n        print(height)",
                true
            ],
            [
                "\ndef solve(n, watering):\n    if '00' in watering: return -1\n    height = 1\n    for i in range(n):\n        if watering[i] == '0': continue\n        if i > 0 and watering[i-1] == '1':\n            height += 5\n        else:\n            height += 1\n    return height\nif __name__ == '__main__':\n    ans = []\n    for _ in range(int(input())):\n        ans.append(solve(int(input()), ''.join(list(input().split()))))\n    print(*ans, sep='\\n')",
                true
            ],
            [
                "for _ in range(int(input())):\n    c=1\n    n=int(input())\n    a=[int(i) for i in input().split()]\n    for j in range(n):\n        if j==0:\n            c+=a[j]\n        elif j>=1 and (a[j]==1 and a[j-1]==0):\n            c+=1\n        elif j>1 and a[j]==0 and a[j-1]==1:\n            c+=0\n        elif j>=1 and a[j]==1 and a[j-1]==1:\n            c+=5\n        elif j>=1 and a[j]==0 and a[j-1]==0:\n            c=-1\n            break\n    print(c)",
                true
            ],
            [
                "#import sys\n#sys.stdin=open('input.txt','r')\n#sys.stdout=open('output.txt','w')\n\ndef solve():\n    n=int(input())\n    l=list(map(int,input().split()))\n    if(l[0]==0):\n        ans=1\n        #return\n    else:\n        ans=2\n    ok=False\n    for i in range(1,n):\n        if(l[i-1]==1 and l[i]==1):\n            ans+=5\n        elif(l[i-1]==0 and l[i]==1):\n            ans+=1\n        elif(l[i-1]==0 and l[i]==0):\n            ok=True\n    if(ok):\n        print(\"-1\")\n    else:\n        print(ans)\n\n\n\n\n\n\n\n\n\n\n\nt=int(input())\nwhile(t!=0):\n    solve()\n    t-=1\n",
                true
            ],
            [
                "t=int(input())\ndef f(n,l,bloom):\n    if l[0]==1:\n        bloom=2\n    else:\n        bloom=1\n    for j in range(1,n):\n        if (l[j]==1) and (l[j-1]==0):\n            bloom+=1\n        else:\n            if (l[j]==1) and (l[j-1]==1):\n                bloom+=5\n            else:\n                if (l[j]==0) and (l[j-1]==0):\n                    bloom=-1\n                    break\n    return bloom\n    \nfor i in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    bloom=1\n    grow=f(n,l,bloom)\n    print(grow)\n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    arr=[int(j) for j in input().split()]\n    \n    height= 1\n    for k in range(len(arr)):\n        if(k==0 and arr[k]==1):\n            height+=1\n        elif(k==0 and arr[k]==0):\n            height=1\n        elif(arr[k]==0 and arr[k-1]==0):\n            height=-1\n            break\n        elif(arr[k-1]==1 and arr[k]==1):\n            height+=5\n          \n        elif(arr[k]==1 and arr[k-1]==0):\n            height+=1\n         \n    print(height)        \n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nPolycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "t = int(input())\nfor i in range(t):\n    k=[]\n    z=[]\n    a = list(map(int, input().split()[:7]))\n    a.sort()\n    k = a[-1]-(a[0]+a[1])\n    z = [str(a[0]), str(a[1])]\n    a.pop(0)\n    a.pop(0)\n    for i in a:\n        if i==k:\n            z.append(str(i))\n            break\n    print(\" \".join(z))",
                true
            ],
            [
                "test=int(input())\nfor tt in range(test):\n    # n=int(input())\n    l=list(map(int,input().split()))\n    # s=[ord(c) for c in input()]\n    l.sort()\n    print(l[0],l[1],l[-1]-l[0]-l[1])",
                true
            ],
            [
                "import sys\nimport os.path\n \nif(os.path.exists('input.txt')) :\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    sys.stderr = open(\"error.txt\", \"w\")\n    \ndepth = 200001\nmod = 1000000007 \nlim = mod * mod\nsys.setrecursionlimit(depth) \n \nlinp = lambda: list(minp())\nminp = lambda: map(int, input().split())\n \nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\n\ndxy = [(1, 0),(-1, 0),(0, 1),(0, -1)]\n\ndef expo(a, b) :\n    if not b : return 1\n    v = expo(a, b//2)\n    v = (v * v) % mod\n    if b%2 : v = (v * a) % mod\n    return v\n\ndef modinv(a, b) :\n    d = expo(b, mod-2)\n    v = (a * d) % mod\n    return v\n\ndef checkPrime(n) :\n    if n < 4 : return True\n    if n%2 == 0 : return False\n    for i in range(3, int(sqrt(n))+1, 2) :\n        if n%i == 0 :\n            return False\n    return True    \n\n\nfor _ in range(int(input())) :\n    a = linp()\n    x = a[0]\n    y = a[1]\n    z = a[6]-x-y\n    print(x, y, z)",
                true
            ],
            [
                "def solve():\n    # put code here\n    arr = [int(v) for v in input().split()]\n    a,b,c,d = arr[:4]\n\n    if a+b == c:\n        print(a,b,d)\n    else:\n        print(a,b,c)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n",
                true
            ],
            [
                "# Author Name: Ajay Meena\n# Codeforce : https://codeforces.com/profile/majay1638\nimport sys\nimport math\nimport bisect\nimport heapq\nfrom bisect import bisect_right\nfrom sys import stdin, stdout\n\n# -------------- INPUT FUNCTIONS ------------------\n\n\ndef get_ints_in_variables(): return map(\n    int, sys.stdin.readline().strip().split())\n\n\ndef get_int(): return int(sys.stdin.readline())\n\n\ndef get_ints_in_list(): return list(\n    map(int, sys.stdin.readline().strip().split()))\ndef get_list_of_list(n): return [list(\n    map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\n\n\ndef get_string(): return sys.stdin.readline().strip()\n\n# -------- SOME CUSTOMIZED FUNCTIONS-----------\n\n\ndef myceil(x, y): return (x + y - 1) // y\n\n# -------------- SOLUTION FUNCTION ------------------\n\n\ndef check(v, arr):\n    tmp = [c for c in v]\n    for i in range(3):\n        for j in range(i+1):\n            tmp.append(v[i]+v[j])\n    tmp.append(sum(v))\n    f = 1\n    for c in arr:\n        f = 0\n        for k in tmp:\n            if k == c:\n                f = 1\n                break\n    if f:\n        return True\n    else:\n        return False\n\n\ndef Solution(arr):\n    # Write Your Code Here\n    res = []\n    for i in range(7):\n        for j in range(i+1, 7):\n            for k in range(j+1, 7):\n                res.append([arr[i], arr[j], arr[k]])\n    for v in res:\n        if check(v, arr):\n            print(*v)\n            return\n\n\ndef main():\n    # Take input Here and Call solution function\n    for _ in range(get_int()):\n        arr = get_ints_in_list()\n        Solution(arr)\n\n\n# calling main Function\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "\nt = int(input())\nfor _ in range(t):\n    nove = []\n    pole = list(map(int, input().split()))\n    nove.append(pole[0])\n    nove.append(pole[1])\n    pole.remove(pole[0])\n    pole.remove(pole[0])\n    x = int(nove[0]) + int(nove[1])\n    #print(nove)\n    try:\n        pole.remove(int(nove[0]) + int(nove[1]))\n        nove.append(pole[0])\n    except ValueError:\n        nove.append(pole[0])\n    print(\" \".join(map(str, nove)))\n",
                true
            ],
            [
                "for t in range(int(input())):\n    a = list(map(int, input().split(\" \")))\n    l = len(a)\n    for i in range(l - 2):\n        for j in range(i + 1, l - 1):\n            for k in range(j + 1, l):\n                if a[i] + a[j] + a[k] == max(a):\n                    print(a[i], a[j], a[k])\n                    break\n",
                true
            ],
            [
                "import sys\nfor _ in range(int(input())):\n    A = list(int(x) for x in input().split())\n    A.sort()\n    ans = [A[0],A[1]]\n    ans.append(A[6]-(A[0]+A[1]))\n    # t = (str(x) for x in ans)\n    # print(type(t))\n    print(' '.join(str(x) for x in ans))\n    # print(s)\n    # for a in ans:\n    #     print(a,)\n    # print(A[0],A[1],A[6]-(A[0]+A[1]))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a=[int(i) for i in input().split()]\n    a.sort()\n    print(a[0],a[1],a[6]-a[0]-a[1])\n        ",
                true
            ],
            [
                "for _ in range(int(input())):\n    a=list(map(int,input().split()))\n    b=[]\n    b.append(a[0])\n    b.append(a[1])\n    for i in range(len(a)-1):\n        if a[0]+a[1]!=a[2]:\n            b.append(a[2])\n            break\n        else:\n            b.append(a[3])\n            break\n    print(*b)",
                true
            ],
            [
                "import math\nimport sys\nimport bisect\nfrom itertools import permutations\n\ndef lm():return map(int,input   ().split())\ndef xd(): return int(input())\ndef ll():return list(map(int, input().split()))\ndef xx(x):sys.stdout.write(x)\n\n\n\nn = xd()\n\nfor i in range(n):\n\n    a = ll()\n\n    for j in range(len(a)):\n\n        for k in range(j + 1, len(a)):\n\n            for b in range(k + 1, len(a)):\n\n                if (a[j] + a[k] + a[b] == a[len(a) - 1]):\n\n                    print(a[j], a[k], a[b])\n                    break",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    lista = list(map(int, input().split()))\n    pierwsza = lista[0]\n    druga = lista[1]\n    trzecia = lista[6]-(pierwsza+druga)\n    print(pierwsza, druga, trzecia)",
                true
            ],
            [
                "nb = input()\nm = []\nfor i in range(int(nb)) :\n\n    a = list(map(int,input().split()))\n    m.append(a)\n\nfor l in m :\n    n = max(l)\n    a = 0\n    b = 0\n    c = 0\n    for i in range(len(l)-2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == n:\n                    a = l[i]\n                    b = l[j]\n                    c = l[k]\n\n    print(str(a) + \" \" + str(b) + \" \" + str(c))\n\n\n",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    list1 = list(map(int,input().split()))\n    max1 =max(list1)\n    if sum(list1[0:3]) == max1:\n        print(list1[0],list1[1],list1[2])\n    else:\n        print(list1[0],list1[1],list1[3])\n    \n            \n    \n     \n        \n   \n            \n        \n        \n\n    \n        \n    \n \n    \n    \n                \n                \n                \n\n            \n  \n            \n        \n        \n        \n",
                true
            ],
            [
                "\nt=int(input())\nif(1<=t<=5000):\n    for i in range(1,t+1):\n        arr=list(map(int,input().split()))\n    \n      \n        a=arr[0]\n        b=arr[1]\n        c=arr[6]-a-b\n    \n\n        print(a,b,c) \n        \n       ",
                true
            ],
            [
                "import sys\n#import bisect\nimport math\nfrom itertools import permutations\n#import array as ab\n\ndef get_line(): return list(map(int, sys.stdin.readline().strip().split()))\ndef in1(): return int(input())\n\nfor _ in range(in1()):\n    a=get_line()\n    c=[]\n    c.append(a[0])\n    c.append(a[1])\n    if (a[0]+a[1])==a[2]:\n        c.append(a[3])\n    else:\n        c.append(a[2])\n    print(*c)\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "'''input\n'''\nimport sys\nimport math\nimport bisect\nfrom sys import stdin,stdout\nfrom math import gcd,floor,sqrt,log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl,bisect_right as br\n\nsys.setrecursionlimit(100000000)\n\ninp    =lambda: int(input())\nstrng  =lambda: input().strip()\njn     =lambda x,l: x.join(map(str,l))\nstrl   =lambda: list(input().strip())\nmul    =lambda: map(int,input().strip().split())\nmulf   =lambda: map(float,input().strip().split())\nseq    =lambda: list(map(int,input().strip().split()))\n\nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\n\nflush  =lambda: stdout.flush()\nstdstr =lambda: stdin.readline()\nstdint =lambda: int(stdin.readline())\nstdpr  =lambda x: stdout.write(str(x))\n\nmod=1000000007\n\nn = inp()\nres = []\n\nfor i in range(n):\n    arr = seq()\n    a = arr[-1] - arr[-2]\n    c = arr[-3] - a\n    b = arr[-1] - a - c\n    res.append((a, b, c))\n    \nfor item in res:\n    print(str(item[0]) + \" \" + str(item[1]) + \" \" + str(item[2]))\n\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    arr= [int(x) for x in input().split()];\n\n    a = arr[0]\n    b = arr[1]\n\n    c = arr[5] - b;\n\n    print(a, end=\" \")\n    print(b, end=\" \")\n    print(c)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    ar=list(map(int, input().split()))\n\n    x=ar[0]\n    y=ar[1]\n    z=ar[-1]-ar[0]-ar[1]\n    print(str(x)+\" \"+str(y)+\" \"+str(z))",
                true
            ],
            [
                "for _ in range(int(input())):\n    b=[int(i)for i in input().split()]\n    ans=b[:2]+[b[-1]-sum(b[:2])]\n    print(*ans)",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    x=list(map(int,input().split()))\n    if x[0]+x[1]==x[2]:\n        print(x[0],x[1],x[3])\n    else:\n        print(x[0],x[1],x[2])",
                true
            ],
            [
                "for _ in range(int(input())):\n    b=list(map(int,input().strip().split()))\n    x=b[0]\n    y=b[1]\n    z=b[-1]-x-y\n    print(x,y,z)",
                true
            ],
            [
                "\n\nt=int(input())\nif(1<=t<=5000):\n    for i in range(1,t+1):\n        arr=[int(arr) for arr in input().split()]\n        x=max(arr)\n        arr1=[]\n        a=arr[0]\n        b=arr[1]\n        c=arr[6]-a-b\n        arr1.append(a)\n        arr1.append(b)\n        arr1.append(c)\n\n        print(*arr1)\n        \n      ",
                true
            ],
            [
                "for _ in range(int(input())):\n    arr=list(map(int,input().split()))\n    print(arr[0],arr[1],arr[-1]-arr[0]-arr[1])\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    a=list(map(int,input().split()))\n    s=set()\n    for x in a:\n        s.add(x)\n    ans=[a[0]]\n    i=1\n    while(i<len(a)):\n        if ans[-1]+a[i] in a:\n            a.remove(ans[-1]+a[i])\n            ans.append(a[i])\n            if len(ans)==3:\n                break\n        i+=1\n    print(ans[0],ans[1],ans[2])\n            \n        ",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    a = list(map(int, input().split()))\n    a1 = a[0]\n    a2 = a[1]\n    c = 0\n    if a1 + a2 == a[2]:\n        a3 = a[3]\n    else:\n        a3 = a[2]\n    print(a1, a2, a3)",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    a,s,d,f,g,h,j = map(int,input().split())\n    if (a + s == d) and d != f:\n        print(a,s,f)\n    else:\n        print(a,s,d)\n",
                true
            ],
            [
                "for t in range(int(input())):\n    n = [int(x) for x in input().split()]\n    a = [n[0], n[1]]\n    if sum(a) == n[2]:\n        a.append(n[3])\n    else:\n        a.append(n[2])\n    print(' '.join(map(str, a)))\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    k = list(map(int, input().split()))\n    print(k[0], k[1], k[-1] - k[0] - k[1])\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    arr=[int(x) for x in input().split()]\n    for i in range(7):\n        for j in range(i+1,7):\n            for k in range(j+1,7):\n                a=arr[i]+arr[j]\n                b=arr[i]+arr[k]\n                c=arr[j]+arr[k]\n                d=arr[i]+arr[j]+arr[k]\n                brr=arr.copy()\n                brr.remove(arr[i])\n                brr.remove(arr[j])\n                brr.remove(arr[k])\n                if a in brr and b in brr and c in brr and d in brr:\n                    print(arr[i],arr[j],arr[k])\n                    f=1\n                    break\n            if f==1:\n                break\n        if f==1:\n            break",
                true
            ],
            [
                "for _ in range(int(input())):\n    A = list(int(x) for x in input().split())\n    A.sort()\n    # ans = A[0],A[1]]\n    # ans.append(A[6]-(A[0]+A[1]))\n    print(A[0],A[1],A[6]-(A[0]+A[1]))",
                true
            ],
            [
                "for _ in range(int(input())):\n    b = list(map(int,input().split()))\n    a=[]\n    a1=b[-1]-b[-2]\n    a2=b[-1]-b[-3]\n    a3=b[-1]-a1-a2\n    a.append(a1)\n    a.append(a2)\n    a.append(a3)\n    print(a1,a2,a3)",
                true
            ],
            [
                "t  = int(input())\nfor i in range(t):\n    n = list(map(int,input().split()))\n    print(n[0],n[1],n[-1]-n[0]-n[1])",
                true
            ],
            [
                "#t=int(input())\n#for stri in[*open(0)][1:]:i,j,*_,m=map(int,stri.split());print(i,j,m-i-j)\n\nfor stri in[*open(0)][1:]:i,j, *_, m=map(int, stri.split()); print(i,j,m-i-j)\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    b = list(map(int, input().split()))\n    a1 = b[0]\n    a2 = b[1]\n    if a1+a2 == b[2]:\n        a3 = b[3]\n    else:\n        a3 = b[2]\n    print(a1, a2, a3)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a = list(map(int, input().split()))\n    if (a[0] + a[1] + a[2] == a[6]):\n        a1, a2, a3 = a[0], a[1], a[2]\n    elif (a[0] + a[1] + a[3] == a[6]):\n        a1, a2, a3 = a[0], a[1], a[3]\n    print(a1, a2, a3)",
                true
            ],
            [
                "for m in range(int(input())):\n    br=list(map(int,input().split()))\n    satish=len(br)\n    s=max(br)\n    ar1=0\n    ar2=0\n    ar3=0\n    for i in range(satish-2):\n        for j in range(i+1,satish-1):\n            for k in range(j+1,satish):\n                if(br[i]+br[j]+br[k]==s):\n                    ar1=br[i]\n                    ar2=br[j]\n                    ar3=br[k]\n    print(str(ar1)+\" \"+str(ar2)+\" \"+str(ar3))",
                true
            ],
            [
                "# your code goes here\nn = int(input())\nwhile n > 0:\n    n-= 1\n    y = [int(i) for i in input().split()]\n    x = [y[0],y[1],y[-1] - y[0] - y[1]]\n    print(\"%d %d %d\"%(x[0],x[1],x[2]))",
                true
            ],
            [
                "for _t in range(int(input())):\n    n,m,o,p,q,r,s=map(int,input().split())\n    print(n,end=\" \")\n    print(m,end=\" \")\n    print(s-n-m)\n",
                true
            ],
            [
                "def check(l1,l2):\n    #l3=[0]*7\n    l3=[l1[0],l1[1],l1[2],l1[0]+l1[1],l1[0]+l1[2],l1[1]+l1[2],l1[1]+l1[2]+l1[0]]\n    return l3==l2\nfor _ in range(int(input())):\n    l=list(map(int,input().split()))\n    l.sort()\n    print(l[0],l[1],l[-1]-l[0]-l[1])\n",
                true
            ],
            [
                "'''\nPolycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a={1,4,3}, then Polycarp wrote out 1, 4, 3, 1+4=5, 1+3=4, 4+3=7, 1+4+3=8. After sorting, he got an array b={1,3,4,4,5,7,8}.\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\nThe first line contains one integer t (1\u2264t\u22645000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b1,b2,\u2026,b7 (1\u2264bi\u2264109; bi\u2264bi+1).\n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\nFor each test case, print 3 integers \u2014 a1, a2 and a3. If there can be several answers, print any of them.\n'''\n\nNtest=int(input())\nlistofLists,l=[],[]\nfor i in range(Ntest):\n    l.append(input().split())\nfor i in range(Ntest):\n    k=[]\n    for x in range(len(l[i])):\n        k.append(int(l[i][x]))\n    listofLists.append(k)\n\nfor i in range(Ntest):\n    val=[listofLists[i][0],listofLists[i][1]]\n    for x in range(2,7):\n        if (listofLists[i][0]+listofLists[i][1]+listofLists[i][x]) == listofLists[i][6]:\n            val.append(listofLists[i][x])\n            break\n\n    print(val[0],val[1],val[2])\n",
                true
            ],
            [
                "t = int(input())\n\n\nfor _ in range(t):\n\n    b = [int(x) for x in input().split()]\n    bOccuranceMap = {}\n    for i in range(len(b)):\n        if i == 0:\n            continue\n        if b[i] not in bOccuranceMap:\n            bOccuranceMap[b[i]] = 0\n        bOccuranceMap[b[i]] += 1\n\n\n    for i in range(len(b)):\n        if i == 0:\n            continue\n\n        ans = b[-1] - b[0] - b[i]\n        if ans in bOccuranceMap and bOccuranceMap[ans] > 0:\n            bOccuranceMap[ans] -= 1\n            if bOccuranceMap[b[i]] > 0:\n                bOccuranceMap[b[i]] -= 1\n                print(b[0], b[i], ans)\n                break\n            else:\n                bOccuranceMap[ans] += 1\n\n\n\n\n",
                true
            ],
            [
                "# problem https://codeforces.com/problemset/problem/1618/A\n\ndef getOrigin(cases):\n    res = []\n    for i in cases:\n        l = len(i) - 1\n        x = i[0]\n        y = i[1]\n        z = i[2]\n\n        if x == y and y != z and x+y != i[3]:\n            z = i[3]\n        elif z == x+y:\n            z = i[3]\n\n        res.append(\" \".join([str(x),str(y),str(z)]))\n\n    return res\n\n\n\ntc = int(input())\ncases = []\nfor i in range(tc):\n    cs = list(map(int,input().split(\" \")))\n    cases.append(cs)\n\nlst = getOrigin(cases)\n\nfor x in lst:\n    print(\"\".join(x))\n",
                true
            ],
            [
                "t = int(input())\nwhile t > 0:\n  ls = [int(i) for i in input().split()]\n  num1 = ls[0]\n  num2 = ls[1]\n  num3 = ls[len(ls)-1] - (num1 + num2)\n  print(num1 , num2 , num3)\n  t = t - 1",
                true
            ],
            [
                "import itertools\n\nsr=lambda: input()\nir=lambda: int(sr())\nlr=lambda: list(map(int, sr().split()))\n\ninf = 10**18\n# mod = 10**9+7\nmod = 998244353\n\nif __name__=='__main__':\n    test = ir()\n    for t in range(test):\n        a=lr()\n        max_num = a[-1]\n        kouho = list(itertools.combinations(a[:6],3))\n        for k in kouho:\n            x,y,z = k\n            if x+y+z == max_num:\n                print(x,y,z)\n                break",
                true
            ],
            [
                "for _ in range(int(input())):\n    m = list(map(int, input().split()))\n    print(m[len(m)-1]-m[len(m)-2],m[len(m)-1]-m[len(m)-3], m[len(m)-1]-(m[len(m)-1]-m[len(m)-2]+m[len(m)-1]-m[len(m)-3]))",
                true
            ],
            [
                "from itertools import combinations\nfor _ in range(int(input())):\n    l=list(map(int,input().split()))\n    comb=combinations(l,3)\n    for i in comb:\n        h=[i[0],i[1],i[2],i[0]+i[1],i[0]+i[2],i[1]+i[2],i[1]+i[0]+i[2]]\n        h.sort()\n        if(h==l):\n            print(*i)\n            break",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    nums = [int(x) for x in input().split()]\n    nums.sort()\n    a = nums[0]\n    b = nums[1]\n    c = nums[6] - a - b\n    print(a, b, c)\n    \n\n",
                true
            ],
            [
                "tc = int(input())\nfor i in range(tc):\n    a = list(map(int,input().split()))\n    s = a[-1]\n    n = len(a)\n    for i in range(0,n-1):\n        l = i + 1\n        r = n - 1\n        x = a[i]\n        while(l<r):\n            if(x+a[l]+a[r] == s):\n                print(x,a[l],a[r])\n                break\n            elif(x+a[l]+a[r] < s):\n                l = l+1\n            else:\n                r = r - 1",
                true
            ],
            [
                "# cook your dish here\nfor _ in range(int(input())):\n    b=list(map(int,input().split()))\n    first=b[0]\n    last=b[-1]\n    res=[first]\n    for i in range(1,len(b)-1):\n        for j in range(i+1,len(b)-1):\n            if b[i]+b[j]==last-first:\n                res.append(b[i])\n                res.append(b[j])\n                break\n    print(*res)",
                true
            ],
            [
                "l = int(input())\nf = []\nfor a in range(l):\n    k = input().split()\n    print(f'{k[0]} {k[1]} {int(k[6])-(int(k[0]) + int(k[1]))}')",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    b=list(map(int,input().split( )))\n    a1=0\n    a2=0\n    a3=0\n    for i in range(len(b)-2):\n        for j in range(i+1,len(b)-1):\n            for k in range(j+1,len(b)):\n                if (b[i]+b[j]+b[k]==max(b)):\n                    a1=b[i]\n                    a2=b[j]\n                    a3=b[k]\n    print (str(a1)+\" \"+str(a2)+\" \"+str(a3))\n        ",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    a = list(map(int,input().split()))\n    print(a[0],a[1],a[-1]-a[0]-a[1])",
                true
            ],
            [
                "tc = int(input())\nfor case in range(tc):\n    my_b = [int(i) for i in input().split()]\n    first = my_b[0]\n    second = my_b[1]\n    total_sum = my_b[6]\n    third = total_sum - first - second\n    print(first,second,third)",
                true
            ],
            [
                "for i in range(int(input())):\n    arrayB = list(map(int, input().split()))\n    for j in range(len(arrayB)):\n        if arrayB[0] + arrayB[1] + arrayB[j] == arrayB[-1]:\n            print(arrayB[0], arrayB[1], arrayB[j])\n            break\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    row = input().split()\n    ints = list(map(int, row))\n    a = 0\n    b = 1\n    for c in range(2, 5):\n        tot = ints[a] + ints[b] + ints[c]\n        if tot == ints[-1]:\n            print(ints[a],ints[b],ints[c])\n            break",
                true
            ],
            [
                "from sys import stdin, stdout\n\ndef polycarp(arr):\n    first = int(arr[0])\n    second = int(arr[1])\n    third = int(arr[len(arr)-1]) - (first+second)\n\n    return f'{first} {second} {third}'\n\n\nif __name__ == '__main__':\n    size = int(stdin.readline())\n    for _ in range(size):\n        arr = stdin.readline()\n        print(polycarp(arr.split(\" \")))",
                true
            ],
            [
                "import itertools\nn  = int(input())\nfor m in range(n):\n    lst = list(map(int,input().split()))\n    kk = []\n    pailie = list(itertools.combinations(lst[:-1],3))\n    for j in pailie:\n        ans = [j[0]+j[1],j[0]+j[2],j[1]+j[2],j[0],j[1],j[2],j[0]+j[2]+j[1]]\n        if sorted(ans) == lst:\n            j = map(str,j)\n            print(\" \".join(j))\n            break",
                true
            ],
            [
                "for _ in range(int(input())):\n  a, b, c, d, e, f, g = map(int, input().split())\n  print(a, b, g - a - b)",
                true
            ],
            [
                "from sys import stdin\n\n\ndef read_input():\n    b = list(map(int, stdin.readline().split()))  # read several integers of a line.\n    return b,\n\n\ndef solve(b):\n    x = b[0]\n    y = b[1]\n    z = b[-1] - x - y\n    answer = f'{x} {y} {z}'\n    return answer\n\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        input = read_input()\n        answer = solve(*input)\n        print(answer)\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    x=list(map(int,input().split()))\n    print(x[0],x[1],x[-1]-x[0]-x[1])",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    b = [int(x) for x in input().split()]\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6]-a1-a2\n    print(a1,a2,a3)",
                true
            ],
            [
                "for case in range(int(input())):\n    arr = [int(x) for x in input().split()]\n    a = arr[0]\n\n    s = arr[-1]\n\n    b = arr[1]\n    c = s - b - a\n    print(a, b, c)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a = list(map(int,input().split()))\n    print(a[0],a[1],a[6]-a[0]-a[1])",
                true
            ],
            [
                "from sys import stdin\n\nfor testcase in range(int(stdin.readline())):\n    values = sorted(map(int, stdin.readline().split()))\n    requiredValues = [ values[0] ]\n    for index in range(1, 7):\n        if values[index] + requiredValues[0] in values: \n            requiredValues.append(values[index])\n            break\n    requiredValues.append(values[-1] - sum(requiredValues))\n\n    print(*requiredValues)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    p=7\n    y=list(map(int,input().split()))\n    k=y[p-1]\n    a=k-y[p-2]\n    b=k-y[p-3]\n    c=k-(a+b)\n    print(a,b,c)",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    a=list(map(int,input().split()))\n    print(a[0],a[1],a[5]-a[1])",
                true
            ],
            [
                "\"\"\"highest = a+b+c\nlowest 2 = a, b\nthird = highest - lowest 2\n\"\"\"\nt = int(input())\nfor i in range(t):\n    a = list(map(int, input().split(\" \")))\n    print(a[0], a[1], a[6] - (a[0]+a[1]))\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    a=[int(i) for i in input().split()]\n    l=len(a);a1=[]\n    if sum(a[:3])==a[-1]:\n        print(*a[:3])\n    else:\n        x=a[:2]\n        x.extend([a[3]])\n        print(*x)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    lis = [int(i) for i in input().split()]\n    a = [lis[0]]\n    n = len(lis)\n    sumOfBandC = lis[n-1] - lis[0]\n    l = 1\n    r = n-2\n    while(l<r):\n        if lis[r] >= sumOfBandC:\n            r = r-1 \n        if lis[r] < sumOfBandC:\n            if lis[l]+lis[r] == sumOfBandC:\n                a.append(lis[l])\n                a.append(lis[r])\n                break\n            else:\n                if lis[l]+lis[r] > sumOfBandC:\n                    r = r-1 \n                if lis[l]+lis[r]<sumOfBandC:\n                    l = l+1 \n    print(*a)",
                true
            ],
            [
                "import math,sys\n#from itertools import permutations, combinations;import heapq,random;\nfrom collections import defaultdict,deque\nimport bisect as bi\ndef yes():print('YES')\ndef no():print('NO')\n#sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');\ndef I():return (int(sys.stdin.readline()))\ndef In():return(map(int,sys.stdin.readline().split()))\ndef Sn():return sys.stdin.readline().strip()\n#sys.setrecursionlimit(1500)\ndef dict(a):\n    d={} \n    for x in a:\n        if d.get(x,-1)!=-1:\n            d[x]+=1\n        else:\n            d[x]=1\n    return d\ndef find_gt(a, x):\n    'Find leftmost value greater than x'\n    i = bi.bisect_left(a, x)\n    if i != len(a):\n        return i\n    else:            \n        return -1\ndef main():\n    try:\n        l=list(In())\n        ans= []\n        for i in range(7):\n            for j in range(7):\n                for k in range(7):\n                    if i!=j and j!=k and i!=k and l[i]+l[j]+l[k]==l[-1]:\n                        print(l[i],l[j],l[k])\n                        return\n        \n\n\n    except:\n        pass\n        \nM = 998244353\nP = 1000000007\n \nif __name__ == '__main__':\n    for _ in range(I()):main()\n    #for _ in range(1):main()\n#End#\n\n#        ******************* All The Best *******************   #",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    a=list(map(int,input().split()))\n    for i in range(len(a)-2):\n        for j in range(i+1,len(a)-1):\n            for k in range(j+1,len(a)):\n                if a[i]+a[j]+a[k]==a[-1]:\n                    s1,s2,s3=a[i],a[j],a[k]\n                    \n    print(s1,s2,s3)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n      s=list(map(int,input().split()))\n      m=len(s)\n      MAX=max(s)\n      a1=0\n      a2=0\n      a3=0\n      for i in range(m-2):\n            for j in range(i+1,m-1):\n                  for k in range(j+1,m):\n                        if(s[i]+s[j]+s[k]==MAX):\n                              a1=s[i]\n                              a2=s[j]\n                              a3=s[k]\n      print(a1,a2,a3)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    res = []\n    workwith = list(map(int, input().split()))\n    if workwith[2] == workwith[0] + workwith[1]:\n        res.append(workwith[0])\n        res.append(workwith[1])\n        res.append(workwith[3])\n    else:\n        res.append(workwith[0])\n        res.append(workwith[1])\n        res.append(workwith[2])\n    print(*res)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(eval(input())))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = eval(input())\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(list(map(int,input().split())))\n\nfor _ in range(inp()):\n    l = inlt()\n    l.sort()\n    smallest = l[0]\n    largest = l[-1]\n    ans = []\n    ans.append(smallest)\n    sumOfOtherTwo = largest -smallest\n    for i in range(1, len(l)):\n        for j in range(i+1, len(l)):\n            if (l[i]+l[j]==sumOfOtherTwo):\n                ans.append(l[i])\n                ans.append(l[j])\n                break\n    print(\" \".join(map(str,ans)))\n\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    a=list(map(int,input().split()))\n    r=[]\n    r.append(a[-1]-a[-2])\n    r.append(a[-1]-a[-3])\n    x=a[-1]-a[-4]\n    if(sum(r)+x==a[-1]):\n        r.append(x)\n    else:\n        r.append(a[-1]-a[-5])\n    print(*r)",
                true
            ],
            [
                "for _ in range(int(input())):\n    b = list(map(int,input().split()))\n    a = []\n    if b[0]+b[1]>b[2]:\n        print(*b[:3])\n    else:\n        print(*b[:2],b[3])\n",
                true
            ],
            [
                "a = int(input())\nfor i in range(a):\n    b = input()\n    b1 = b.split(' ')\n    if int(b1[0]) + int(b1[1]) == int(b1[2]):\n        print(b1[0], b1[1], b1[3])\n    else:\n        print(b1[0], b1[1], b1[2])\n",
                true
            ],
            [
                "tc = int(input())\n\nfor _ in range(tc):\n    b = list(map(int, input().split()))\n    b.sort()\n    \n    a = []\n    a.append(b[0])\n    a.append(b[1])\n    if a[0] + a[1] == b[2]:\n        a.append(b[3])\n    else:\n        a.append(b[2])\n    \n    print(*a)",
                true
            ],
            [
                "import sys\nimport math\nimport bisect\nimport math\nfrom itertools import accumulate\nfrom itertools import combinations\nfrom collections import deque\nimport string\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(3000)\n\ndef inpit(): #int\n    return(int(input()))\ndef inplt(): #list \n    return(list(map(int,input().split())))\ndef inpstr(): #string\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef inpspit(): #spaced intergers \n    return(map(int,input().split()))\n \npow = math.pow\nflr = math.floor\nceil = math.ceil\ndis = math.hypot # cartesian distance \n\ndef lcm(a):\n    return abs(math.prod(a)) // math.gcd(*a)\n \ndef cumulativeSum(input): # prefix sum\n      return (list(accumulate(input))) \n\n# all permutations\nfrom itertools import permutations\nperms =(lambda x :list(set([''.join(p) for p in permutations(x)])))\n\ndef primes(n):\n    \"\"\" Returns  a list of primes < n \"\"\"\n    sieve = [True] * n\n    for i in range(3,int(n**0.5)+1,2):\n        if sieve[i]:\n            sieve[i*i::2*i]=[False]*((n-i*i-1)//(2*i)+1)\n    return [2] + [i for i in range(3,n,2) if sieve[i]]\n\ndef all_set(string):\n    lt = []\n    for i in range(0,len(string)+1):\n        for element in combinations(string,i):\n           lt.append(element)\n    return(l)\n\ndx = [1,-1,0,0]\ndy = [0,0,1,-1]\n\ndef f(a,b):\n    if(a == b):\n        return True\n    else:\n        return False\n\nt  = inpit()\nfor q in range(t):\n    ar = inplt()\n    f = True\n    for i in range(0,len(ar)):\n        if(f):\n            for j in range(len(ar)):\n                    if(i!= j and f):\n                        for k in range(len(ar)):\n                            if(i !=j and j != k and i != k and f):\n                                if(ar[i]+ar[j] +ar[k] == ar[-1]):\n\n                                    print(*[ar[i],ar[j],ar[k]])\n                                    f = False\n                                    break \n\n\n\n\n\n\n        \n        \n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n",
                true
            ],
            [
                "n=int(input())\nfor _ in range(n):\n    li=list(map(int,input().split()))\n\n    a=li[0]\n    d=li[6]\n    li.remove(a)\n    li.remove(d-a)\n    li.pop()\n    aa=li.copy()\n    print(a,end=\" \")\n    t=False\n    i=0\n    while i <3 and not t :\n        for j in range(i,3)  :\n            if not t:\n                if li[i]+li[j]==d-a :\n                    print(li[i],end=\" \")\n                    print(li[j],end=\"\\n\")\n                    t=True\n        i+=1\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    lst = list(map(int, input().split()))\n    print(lst[0], lst[1], lst[-1] - lst[0] - lst[1])",
                true
            ],
            [
                "for _ in range(int(input())):\n    a1,a2,a3,a4,a5,a6,a7 = map(int,input().split())\n    res = str(a7-a6)+\" \"+str(a2)+\" \"+str(a6-a2)\n    print(res)\n",
                true
            ],
            [
                "n = int(input())\n\n\nfor i in range(n):\n    a = list(map(int, input().split()))\n    c = a[0]+a[1]\n    if (a[2] == c):\n        print(a[0], a[1], a[3])\n    else:\n        print(a[0], a[1], a[2])\n",
                true
            ],
            [
                "for jkfd in range(int(input())):\n    a=list(map(int,input().split()))\n    x=a[0]\n    y=a[1]\n    if x+y==a[2]:\n        z=a[3]\n    else:\n        z=a[2]\n    print(x,y,z)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    a=list(map(int,input().split()))\n    if a[0]+a[1]+a[2]==a[6]:\n        print(a[0],a[1],a[2])\n    elif a[0]+a[1]+a[3]==a[6]:\n        print(a[0],a[1],a[3])",
                true
            ],
            [
                "for _ in range(int(input())):\n    b=list(map(int,input().split()))\n    n=len(b)\n    m=max(b)\n    a1=0\n    a2=0\n    a3=0\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                \n                if b[i]+b[j]+b[k]==m:\n                    a1=b[i]\n                    a2=b[j]\n                    a3=b[k]\n    print(str(a1)+\" \"+str(a2)+\" \"+str(a3))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    lst=list(map(int,input().split()))\n    lsta=lst[:2]\n    n=lst[6]-sum(lsta)\n    for j in lst[2:]:\n        if j==n:\n            lsta.append(j)\n            break\n    print(*lsta)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n  arr = list(map(int, input().split()))\n\n  print(arr[0], arr[1], arr[-1]-arr[0]-arr[1])\n",
                true
            ],
            [
                "t = int(input())\nfor t in range (0,t):\n    a1,a2,a3,a4,a5,a6,a7 = map(int, input().split())\n    sorta = [a1,a2,a3,a4,a5,a6,a7]\n    sorta.sort()\n    c = sorta[6]-(sorta[1]+sorta[0])\n    print((sorta[0]),sorta[1],c)",
                true
            ],
            [
                "import sys\nfor _ in range(int(input())):\n    A = list(int(x) for x in input().split())\n    A.sort()\n    ans = [A[0],A[1]]\n    ans.append(A[6]-(A[0]+A[1]))\n    print(' '.join(str(x) for x in ans))\n    # print(s)\n    # for a in ans:\n    #     print(a,)\n    # print(A[0],A[1],A[6]-(A[0]+A[1]))\n",
                true
            ],
            [
                "def BvA(lst):\n    \"\"\"\n    x - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u043f\u0438\u0441\u043a\u0430 \u0410\n    zy = \u0441\u0443\u043c\u043c\u0430 \u0434\u0432\u0443\u0445 \u0434\u0440\u0443\u0433\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 \u0410\n    \"\"\"\n    x = lst[0]\n    y = lst[1]\n    summa = lst[-1]\n    zy = summa - x\n    lst = lst[1:6]\n    z = zy - y\n\n    return str(x), str(y), str(z)\n\n\n\nfor _ in range(int(input())):\n    lst = [int(i) for i in input().split()]\n    print(\" \".join(BvA(lst)))",
                true
            ],
            [
                "n=int(input())\nfor _ in range(n):\n    a=list(map(int,input().strip().split()))\n    c=a[6]-(a[0]+a[1])\n    print(a[0],end=\" \")\n    print(a[1],end=\" \")\n    print(c)",
                true
            ],
            [
                "for _ in range(int(input())):\n    b = list(map(int,input().split()))\n    p = len(b)\n    s = max(b)\n    a1=0\n    a2=0\n    a3=0\n    for i in range(p-2):\n        for j in range(i+1,p-1):\n            for k in range(j+1,p):\n                if b[i]+b[j]+b[k]==s:\n                    a1=b[i]\n                    a2=b[j]\n                    a3=b[k]\n    print(str(a1)+\" \"+str(a2)+\" \"+str(a3))",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    arr = [int(x) for x in input().split()]\n\n    num1 = arr[0]\n    num2 = arr[1]\n    num3 = arr[-1] - num1 - num2\n\n    print(num1, num2, num3)\n",
                true
            ],
            [
                "for _ in range (int(input())):\n    list = [int(x) for x in input().split()]\n    b= 0\n    for j in range (6) :\n        if b :break\n        for k in range (5):\n            if b: break\n            for l in range (4):\n                if list[j] + list[k+1] + list[l+2] == list[6]:\n                    print(str(list[j]) +\" \"+ str(list[k+1]) +\" \" +  str(list[l+2]))\n                    b = 1\n                    break",
                true
            ],
            [
                "for _ in range(int(input())):\n    # n=int(input())\n    a,b,c,d,e,ff,g=map(int,input().split())\n    ans=e\n    if (a+b)!=c:\n        ans=c\n    elif (a+b)!=d:\n        ans=d\n    print(a,b,g-a-b)\n",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    A = list(map(int, input().split()))\n    a = A[-1] - A[-2]\n    b = A[-1] - A[-3]\n    c = A[-1] - a - b\n    print(a, b, c, sep=' ')",
                true
            ],
            [
                "for _ in range(eval(input())):\n    a = list(map(int, input().split())); a.sort()\n    print(a[0], a[1], a[-1]-a[0]-a[1])\n\n",
                true
            ],
            [
                "def okay(a):\n    return a\nfor _ in range(int(input())):\n    l=list(map(int,input().split()))\n    print(l[0],l[1],(l[-1]-(l[0]+l[1])))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    l1=list(map(int,input().split()))\n    n=max(l1)\n    l1.remove(n)\n    p=0\n    q=0\n    for x in range(len(l1)):\n        for y in range(x+1,len(l1)):\n            for z in range(y+1,len(l1)):\n                if l1[x]+l1[y]+l1[z]==n:\n                    print(l1[x],l1[y],l1[z])\n                    p=1\n                    break\n            if p==1:\n                q=1\n                break\n        if q==1:\n            break\n                ",
                true
            ],
            [
                "T = int(input())\nfor i in range(T):\n    arr = [int(x) for x in input().split()]\n    a1 = arr[0]\n    a2 = arr[1]\n    s = a1+a2\n    idx = 2\n    if arr[idx] == s:\n        idx+=1\n    print(a1, a2, arr[idx])\n",
                true
            ],
            [
                "test = int(input())\nfor i in range(test):\n    \n    b = input().split()\n    summ = 0\n    left = (len(b)//2)+1\n    for i in range(len(b[0:4])):\n        if int(b[i]) + int(b[i+1]) == int(b[i+2]):\n            print(b[i],b[i+1],b[i+3])\n            break\n        else:\n            print(b[i],b[i+1],b[i+2])\n            break\n",
                true
            ],
            [
                "def fun(test_arr):\n    a = []\n    a.append((test_arr[0]))\n    largest_sum = int(test_arr[-1]) - int(test_arr[0])\n    for i in range(1,7):\n        for j in range(1,7):\n            if i != j :\n                if int(test_arr[i]) + int(test_arr[j]) == largest_sum:\n                    a.append((test_arr[i]))\n                    a.append((test_arr[j]))\n                    break\n\n        s = a[0] + \" \" + a[1] + \" \" + a[2]\n\n\n    return s\n\n\nT = int(input())\nr = []\nfor p in range(T):\n    r1 =input()\n    r.append((r1.split()))\n\n\nfor q in range(T):\n    print(fun(r[q]))",
                true
            ],
            [
                "for _ in range(int(input())):\n    lst = [int(i) for i in input().split()]\n    if lst[2] == lst[0]+lst[1]:\n        print(lst[0], lst[1], lst[3])\n    else:\n        print(lst[0], lst[1], lst[2])\n",
                true
            ],
            [
                "t = int(input())\nb = [0] * 7\nfor i in range(0, t):\n    b = list(map(int, input().split()))\n    if sum(b) // 4 != b[0] + b[1] + b[2]:\n            print(b[0], b[1], b[3], sep=' ')\n    else:\n        print(b[0], b[1], b[2], sep=' ')",
                true
            ],
            [
                "import sys\n\ndef solve(inpt):\n    for instr in inpt:\n        b = [int(c) for c in instr.split(\" \")]\n        x1, x2 = b[0], b[1]\n        x3 = b[-1] - x1 - x2\n        sys.stdout.write(\"{} {} {}\\n\".format(x1, x2, x3))\n\ndef read_n_lines(n):\n    inpt =[]\n    for _ in range(n):\n        inpt.append(sys.stdin.readline().strip())\n    return inpt\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline().strip())\n    inpt = read_n_lines(n)\n    solve(inpt)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    b=list(map(int,input().split()))\n    print(b[0],b[1],b[-1]-b[0]-b[1])",
                true
            ],
            [
                "for _ in range(eval(input())):\n    a = list(map(int, input().split()))\n    print(a[0], a[1], end=' ')\n    if a[0] + a[1] + a[2] == a[6]:\n        print(a[2])\n    else:\n        print(a[3])\n",
                true
            ],
            [
                "for i in range(int(input())):\n    a=list(map(int,input().split()))\n    print(\"%i %i %i\"%(a[0],a[1],a[6]-a[0]-a[1]))",
                true
            ],
            [
                "t=int(input())\nA=[]\nfor i in range(t):\n    a=[int(s) for s in input().split(\" \")]\n    A.append(a)\nfor i in range(t):\n    print(A[i][0],end=\" \")\n    print(A[i][1],end=\" \")\n    print(A[i][6]-(A[i][0]+A[i][1]))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    b=list(map(int,input().split()))\n    panjang=len(b)\n    s=max(b)\n    p1=0\n    p2=0\n    p3=0\n    for i in range(panjang-2):\n            for j in range(i+1, panjang-1):\n                for k in range(j+1, panjang):\n                    if b[i]+b[j]+b[k]==s:\n                        p1=b[i]\n                        p2=b[j]\n                        p3=b[k]\n    print (str(p1)+\" \"+str(p2)+\" \"+str(p3))\n\n        \n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    \n    \n    a = [int(x) for x in input().split()]\n\n    for ind, ai in enumerate(a):\n        if ind == 0:\n            a1 = ai\n        elif ind == 1:\n            a2 = ai\n        elif ind == 6:\n            a3 = ai-a1-a2\n    print(a1, a2, a3)\n    \n        \n                \n            \n    \n",
                true
            ],
            [
                "testcases = input(\"\")\nfor i in range(0, int(testcases)):\n    string = input(\"\")\n    nums = string.split(\" \")\n    a1 = int(nums[0])\n    a2 = int(nums[1])\n    a23 = int(nums[-2])\n    for num in nums[2::]:\n        if a23 - a2 == int(num):\n            a3 = int(num)\n    print(a1, a2, a3)",
                true
            ],
            [
                "n =  int(input())\nfor i in range(n):\n    z = list(map(int,input().split()))\n    a0 =  z[0]\n    a1 =  z[1]\n    a2 =  z[6] - a1 -a0\n    print(a0,a1,a2)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    a = list(map(int,input().split()))\n    w = a[0]\n    x = a[1]\n    y = a[2]\n    z = a[3]\n    if w+x == z:\n        print(w,x,y)\n    elif w+x != z:\n        print(w,x,z)\n    \n    ",
                true
            ],
            [
                "for i in range(int(input())):\n    a=list(map(int,input().split()))\n    b,c=a[0],a[1]\n    print(b,c,a[-1]-b-c)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nR = []\nT = int(input())\n\nfor _ in range(T):\n    l = list(map(int, input()[:-1].split()))\n    a1, a2 = l[0], l[1]\n    a3 = l[-1] - (a1 + a2)\n    R.append(f\"{a1} {a2} {a3}\")\n\nprint('\\n'.join(R))",
                true
            ],
            [
                "# author : Bingha\nimport math\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom math import factorial as f\nfrom math import inf\nimport queue\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    arr = list(map(int,input().split()))\n    ans = []\n\n    ans.append(arr[0])  \n    ans.append(arr[1])\n    ans.append(arr[2]if arr[0]+arr[1]!=arr[2] else arr[3])\n\n    print(' '.join(map(str,ans)))\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\n#import random\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\n#import math\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\ndx = [0,0,1,-1]\ndy = [1,-1,0,0]\nmod = 10**9 + 7\nmod1 = 998244353\n\nfor _ in range (ii()) :\n    a = il()\n\n    x = a[0]\n    y = a[1]\n\n    t = x + y\n\n    z = (a[-1] - x - y)\n\n    print(x,y,z)\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    arr=list(map(int,input().split()))\n    x,y=arr[0],arr[1]\n    if arr[2]==x+y:\n        z=arr[3]\n    else:\n        z=arr[2]\n    print(x,y,z)",
                true
            ],
            [
                "from sys import stdin,stdout,setrecursionlimit\nfrom math import gcd,sqrt,factorial,pi,inf\nfrom collections import deque,defaultdict\nfrom bisect import bisect,bisect_left\nfrom time import time\nfrom itertools import permutations as per\nfrom heapq import heapify,heappush,heappop,heappushpop\ninput=stdin.readline\nR=lambda:map(int,input().split())\nI=lambda:int(input())\nS=lambda:input().rstrip('\\r\\n')\nL=lambda:list(R())\nP=lambda x:stdout.write(str(x)+'\\n')\nlcm=lambda x,y:(x*y)//gcd(x,y)\nnCr=lambda x,y:(f[x]*inv((f[y]*f[x-y])%N))%N\ninv=lambda x:pow(x,N-2,N)\nsumx=lambda x:(x**2+x)//2\nN=10**9+7\n\nfor _ in range(I()):\n    a=L()\n    print(a[0],a[1],a[-1]-(a[0]+a[1]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    l=list(map(int,input().split()))\n    print(l[0],l[1],l[-1]-(l[0]+l[1]))",
                true
            ],
            [
                "t=int(input())\nfor y in range(t):\n    l=list(map(int,input().split()))\n    print(l[6]-l[5],l[1],l[5]-l[1])",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n  a=list(map(int, input().split()))\n  a.sort()\n  k=[a[0],a[1],a[-1]-a[1]-a[0]]\n  print(*k)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    b=list(map(int,input().split()))\n    a=[None]*3\n    a[0]=b[0]\n    a[1]=b[1]\n    a[2]=b[6]-a[0]-a[1]\n    print(*a)\n    \n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    A = list(map(int, input().split()))\n    out = []\n    out.extend(A[:2])\n    if A[2] < sum(out) or sum(out) < A[2]:\n        out.append(A[2])\n    else:\n        out.append(A[3])\n\n\n    print(*out)",
                true
            ],
            [
                "t = int(input())\n\nwhile t:\n\n    t -= 1\n    dat = list(map(int, input().split()))\n    print(dat[0], dat[1], dat[-1] - dat[0] - dat[1])",
                true
            ],
            [
                "for _ in range(int(input())):\n    b=list(map(int,input().split()))\n    pranith=len(b)\n    s=max(b)\n    p1=0\n    p2=0\n    p3=0\n    for i in range(pranith-2):\n            for j in range(i+1, pranith-1):\n                for k in range(j+1, pranith):\n                    if b[i]+b[j]+b[k]==s:\n                        p1=b[i]\n                        p2=b[j]\n                        p3=b[k]\n    print (str(p1)+\" \"+str(p2)+\" \"+str(p3))\n\n        \n",
                true
            ],
            [
                "input1 = int(input())\nfor i in range(input1):\n    input2 = input().split()\n    if int(input2[0])+int(input2[1])==int(input2[3]):\n        print(input2[0],input2[1],input2[2])\n        \n    else:\n        print(input2[0],input2[1],input2[3])\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\nsys.setrecursionlimit(3*10**5)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\ngp=[]\nans=[]\nf=0\nw=[]\n\ndef dfs(i,prod,rem,n):\n    if rem==0:\n        while(i<len(n)):\n            prod*=int(n[i])\n            i+=1\n        return prod\n    if i==len(n):\n        return prod\n    mx=0\n    for j in range(9-int(n[i])):\n        mx=max(dfs(i+1,(int(n[i])+min(j,rem))*prod,rem-min(j,rem),n),mx)\n    return mx\ndef hnbhai(tc):\n    a=sd()\n    x=a[0]\n    y=a[1]\n    print(x,y,a[-1]-(x+y))\nfor _ in range(sb()):\n    hnbhai(_+1)\n##case\n\n#.\n",
                true
            ],
            [
                "t=int(input())\nans=\"\"\nfor i in range(t):\n    b=list(map(int,input().split()))\n    a1=b[0]\n    a2=b[1]\n    a3=b[6]-b[0]-b[1]\n    ans+=str(a1)+\" \"+str(a2)+\" \"+str(a3)+\"\\n\"\nprint(ans)\n\n    \n    ",
                true
            ],
            [
                "x=int(input())\nfor i in range(x):\n    a1,a2,a3,a4,a5,a6,a7=map(int,input().split())\n    print(a7-a6,a2,a6-a2)",
                true
            ],
            [
                "t = int(input())\nwhile t:\n    arr = list(map(int, input().split(\" \")))\n    a,b = arr[0], arr[1]\n    pointer = 2\n    if arr[pointer] == a+b:\n        pointer += 1\n    print(a,b,arr[pointer])\n    t -= 1",
                true
            ],
            [
                "try:\n    for i in range(int(input())):\n        flag = 0\n        arr = list(map(int,input().split()))\n        for i in range(4):\n            if flag == 1:\n                break\n            for j in range(i+1,5):\n                if flag == 1:\n                    break\n                for k in range(j+1,6):\n                    if flag == 1:\n                        break\n                    for l in range(k+1,7):\n                        if arr[i]+arr[j]+arr[k] == 2*arr[l]:\n                            a = arr[l]-arr[k]\n                            b = arr[l]-arr[j]\n                            c =  arr[l]-arr[i]\n                            lst = [a,b,c]\n                            inc = 0\n                            flag = 0\n                            for m in range(7):\n                                if m != i and m != j and m != k and m!= l:\n                                    if lst[inc] == arr[m]:\n                                        inc += 1\n                                        \n                            if inc == 3:\n                                flag = 1\n                                print(*lst)\n                                break\nexcept:\n    pass",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nPolycarp has come up with a new game to play with you. He calls it \"A missing bigram\".\n\nA bigram of a word is a sequence of two adjacent letters in it.\n\nFor example, word \"abbaaba\" contains bigrams \"ab\", \"bb\", \"ba\", \"aa\", \"ab\" and \"ba\".\n\nThe game goes as follows. First, Polycarp comes up with a word, consisting only of lowercase letters 'a' and 'b'. Then, he writes down all its bigrams on a whiteboard in the same order as they appear in the word. After that, he wipes one of them off the whiteboard.\n\nFinally, Polycarp invites you to guess what the word that he has come up with was.\n\nYour goal is to find any word such that it's possible to write down all its bigrams and remove one of them, so that the resulting sequence of bigrams is the same as the one Polycarp ended up with.\n\nThe tests are generated in such a way that the answer exists. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 2000) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (3 \u2264 n \u2264 100) \u2014 the length of the word Polycarp has come up with.\n\nThe second line of each testcase contains n-2 bigrams of that word, separated by a single space. Each bigram consists of two letters, each of them is either 'a' or 'b'.\n\nAdditional constraint on the input: there exists at least one string such that it is possible to write down all its bigrams, except one, so that the resulting sequence is the same as the sequence in the input. In other words, the answer exists.\n\nOutput\n\nFor each testcase print a word, consisting of n letters, each of them should be either 'a' or 'b'. It should be possible to write down all its bigrams and remove one of them, so that the resulting sequence of bigrams is the same as the one Polycarp ended up with.\n\nThe tests are generated in such a way that the answer exists. If there are multiple answers, you can print any of them. \n\nExample\n\nInput\n\n\n4\n7\nab bb ba aa ba\n7\nab ba aa ab ba\n3\naa\n5\nbb ab bb\n\n\nOutput\n\n\nabbaaba\nabaabaa\nbaa\nbbabb\n\nNote\n\nThe first two testcases from the example are produced from the word \"abbaaba\". As listed in the statement, it contains bigrams \"ab\", \"bb\", \"ba\", \"aa\", \"ab\" and \"ba\".\n\nIn the first testcase, the 5-th bigram is removed. \n\nIn the second testcase, the 2-nd bigram is removed. However, that sequence could also have been produced from the word \"abaabaa\". It contains bigrams \"ab\", \"ba\", \"aa\", \"ab\", \"ba\" and \"aa\". The missing bigram is the 6-th one.\n\nIn the third testcase, all of \"baa\", \"aab\" and \"aaa\" are valid answers.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "\n\nfor _ in range(int(input())):\n    n=int(input())\n    l=list(map(str,input().split()))\n    #print(l)\n    s=\"\"+l[0]\n    #print(s)\n    length=1\n    for i in range(1,len(l)):\n        if(s[length]==l[i][0]):\n            s+=l[i][1]\n            #print(s)\n            length+=1\n        else:\n            s+=l[i]\n            length+=2\n    nm=n-len(s)\n    if(n==0):\n        print(s)\n    else:\n        print(s+\"a\"*nm)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    b = input().split()\n    word = ''\n    flag = True\n    for el in b:\n        if len(word) == 0:\n            word = el\n            continue\n        if word[-1] == el[0]:\n            word += el[1]\n        else:\n            flag = False\n            word += el\n    if flag:\n        word += 'a'\n    print(word)",
                true
            ],
            [
                "sr=lambda: input()\nir=lambda: int(sr())\nlr=lambda: list(map(int, sr().split()))\n\ninf = 10**18\n# mod = 10**9+7\nmod = 998244353\n\nif __name__=='__main__':\n    test = ir()\n    for t in range(test):\n        n=ir()\n        a=sr().split()\n        if n == 3:\n            print(\"\".join(['a', a[0]]))\n        else:\n            flg = False\n            pre = a[0][1]\n            ans = [a[0]]\n            for c in a[1:]:\n                if pre == c[0]:\n                    ans.append(c[1])\n                else:\n                    ans.append(c)\n                    flg = True\n                pre = c[1]\n            if not flg:\n                ans.append('a')\n            print(\"\".join(ans))",
                true
            ],
            [
                "import sys\nimport math\n\ndef run(function):\n    def wrapper(*args, **kwargs):\n        # testcases = 1\n        testcases = int(input())\n        for _ in range(testcases):\n            function(*args, **kwargs)\n    return wrapper\n\ndef map_input(datatype = int):\n    return map(datatype, input().split())\n\ndef list_input(datatype = int):\n    return list(map(datatype, input().split()))\n\n@run\ndef solve():\n    n = int(input())\n    arr = list_input(str)\n    ans = \" \"\n    for i in arr:\n        if i[0] == ans[-1]:\n            ans += i[1]\n        else:\n            ans += i\n    ans = ans[1:]\n    if len(ans) < n:\n        while len(ans) != n:\n            ans += \"a\"\n    print(ans)\n\nsolve()\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = ''\n    stringArr = input().split()\n    ans += stringArr[0]\n    matchFound = False\n    for i in range(1,n-2):\n        if stringArr[i-1][1] != stringArr[i][0]:\n            matchFound = True\n            ans += stringArr[i]\n        else:\n            ans += stringArr[i][1]\n    if matchFound==False:\n        ans += 'a'\n    print(ans)",
                true
            ],
            [
                "# your code goes here\nt = int(input())\nwhile t>0:\n    t-=1\n    n = int(input())\n    x = input().split()\n    result = x[0][0]\n    if(len(x)==1):\n        print(x[0]+'a')\n        continue\n    for i in range(1,len(x)):\n        if x[i-1][-1] == x[i][0]:\n            result += x[i][0]\n        else:\n            result += x[i-1][-1]+x[i][0]\n    result=result + x[-1][-1] + ''.join(['a' for i in range(n-len(result)-1)])\n    print(result)",
                true
            ],
            [
                "import sys\n\nt = int(sys.stdin.readline())\nans = []\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    arr = sys.stdin.readline().split()\n    res = arr[0]\n    for s in arr[1:]:\n        if s[0] == res[-1]:\n            res += s[1]\n        else:\n            res += s\n    if len(res) < n:\n        res += 'a'\n    ans.append(res)\n\nprint('\\n'.join(ans))\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    l =int(input())\n    st = [str(i) for i in input().split()]\n    s=st[0]\n    for i in range(1,len(st)):\n        if(s[-1] == st[i][0]):\n            s=s+st[i][1]\n        else:\n            s=s+st[i]\n    if(len(s)!=l):\n        for j in range(l-len(s)):\n            s=s+'a'\n    print(s)",
                true
            ],
            [
                "n = int(input())\n\nfor _ in range(n):\n  num = int(input())\n  lst = [*map(str, input().split())]\n  ans = lst[0][0]\n  for i in range(1,len(lst)):\n    if lst[i-1][1] != lst[i][0]:\n      ans += lst[i-1][1] + lst[i][0]\n    else:\n      ans += lst[i][0]\n  print(ans + lst[-1][1]*(num-len(ans)))",
                true
            ],
            [
                "n = int(input())\nfor _ in range(n):\n    t = int(input())\n    a = list(input().split())\n    if len(a)!=1:\n        for i in range(1,len(a)):\n            if a[i][0]!=a[i-1][1]:\n                a.insert(i,a[i-1][0]+a[i][0])\n                break\n        print(a[0],end='')\n        for i in range(1,len(a)):\n            print(a[i][1],end ='')\n        if len(a)+1!=t:\n            print(a[-1][1])\n        else:\n            print()\n    else:\n        print(\"a\"+a[0])\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = input().split(\" \")\n    if len(arr) == 1:\n        print(arr[0]+\"a\")\n        continue\n    ans = arr[0][0]\n    for i in range(1, n-2):\n        if arr[i-1][1] != arr[i][0]:\n            ans += arr[i-1][1] + arr[i][0]\n        else:\n            ans += arr[i-1][1]\n    ans += arr[n-3][1]\n    if(len(ans) < n):\n        ans += \"a\"*(n-len(ans))\n    print(ans)",
                true
            ],
            [
                "import sys\n \ndef get_string(): return sys.stdin.readline().strip()\ndef get_ints(): return list(map(int, sys.stdin.readline().strip().split())) \ndef get_strings(): return list(sys.stdin.readline().strip().split())\ndef get_num(): return int(sys.stdin.readline().strip())\n\nt = get_num()\nfor _ in range(t):\n  n = get_num()\n  arr = get_strings()\n  ans = arr[0]\n  found = False\n  for i in range(1, len(arr)):\n    if ans[-1] != arr[i][0]:\n      found = True\n      ans += arr[i]\n    else:\n      ans += arr[i][1]\n  if not found:\n    ans += 'a'\n  print(ans)",
                true
            ],
            [
                "from sys import stdin \nfor _ in range(int(stdin.readline())):\n    n=int(stdin.readline())\n    arr=list(map(str,stdin.readline().split()))\n    ans=\"\"\n    f=0\n    n=len(arr)\n    for i in range(n-1):\n        if arr[i][1]!=arr[i+1][0]:\n            ans+=arr[i][0]\n            ans+=(arr[i][1])\n            f=1\n        else:\n            ans+=arr[i][0]\n    ans+=arr[-1]\n    if f==0:\n        ans+=\"a\"\n    print(ans)",
                true
            ],
            [
                "t = int(input())\n\nwhile t:\n    t -= 1\n\n    n = int(input())\n\n    dat = list(map(str, input().split()))\n    ans = dat[0]\n    for i in range(1, len(dat)):\n        if dat[i][0] != dat[i-1][1]:\n            ans += dat[i]\n        else:\n            ans += dat[i][1]\n    if len(ans) != n:\n        ans += 'a'\n\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    arr=input().split()\n    s=\"\"\n    s+=arr[0][0]\n    for i in range(n-3):\n        if arr[i][1]==arr[i+1][0]:\n            s+=arr[i][1]\n        else:\n            s+=arr[i][1]\n            s+=arr[i+1][0]\n    s+=arr[n-3][1]\n    if len(s)!=n:\n        s+='a'\n    print(s)",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    l=input().split()\n    f=False\n    s=\"\"\n    s+=l[0][0]\n    for i in range(1,len(l)):\n        if(l[i][0]==l[i-1][1]):\n            s+=l[i][0]\n        else:\n            f=True\n            # print(s,i)\n            s+=l[i-1][1]+l[i][0]\n            # print(s,i)\n        if(i==len(l)-1):\n            s+=l[i][1]\n            # print(s,i)\n    if(len(l)==1):\n        s+=l[0][1]\n    if(not f):\n        s+=\"a\"\n    print(s)",
                true
            ],
            [
                "import itertools\nfrom math import floor, log, log2, ceil, sqrt\nfrom itertools import groupby\nfrom decimal import Decimal,getcontext\nimport sys\nfrom collections import deque\n \n\nprimes = set()\nmaxN = 1000001\ndef generatePrimes():\n  used = [False] * maxN\n  for i in range(2, maxN):\n    if not used[i]:\n      primes.add(i)\n      for j in range(i, maxN, i):\n        used[j] = True\ndef isPrime(n):\n  if n < 2:\n    return True\n  x = 2\n  while x * x <= n:\n    if n % x == 0:\n      return False\n    x += 1\n  return True\n\nt = int(input())\nres = []\n# generatePrimes()\nfor _ in range(t):\n  n = int(input())\n  arr = list(input().split())\n  ans = \"\"\n  exists = False\n  for i in range(n - 2):\n    if i == 0:\n      ans += arr[0]\n    else:\n      if arr[i][0] != arr[i - 1][1]:\n        exists = True\n        ans += arr[i][0]\n      ans += arr[i][1]\n  if not exists:\n    ans += 'a'\n  # b = list(map(int, input().split()))\n  # ans = \" \".join(map(str, [a1, a2, a3]))\n  # print(ans)\n  \n  res.append(ans)\n \nfor i in range(t):\n  print(res[i])",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(eval(input())))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = eval(input())\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(list(map(int,input().split())))\n#\n# def findgcd(x, y):\n#    while(y):\n#       x, y = y, x % y\n#    return x\n# def gcdf(l):\n#     if(len(l)==1):\n#         return l[0]\n#     num1=l[0]\n#     num2=l[1]\n#     gcd=findgcd(num1,num2)\n#     for i in range(2,len(l)):\n#        gcd=findgcd(gcd,l[i])\n#     return gcd\n#\n# for _ in range(inp()):\n#     flag1=0\n#     flag2=0\n#     s = inp()\n#     l = inlt()\n#     if(s==2):\n#         if(l[0]==l[1]):\n#             print 0\n#             continue\n#         else:\n#             print l[1]\n#             continue\n#     s1 = [l[i] for i in range(len(l)) if i % 2 != 0]\n#     s2 = [l[i] for i in range(len(l)) if i % 2 == 0]\n#     hcf_s1 = gcdf(s1)\n#     hcf_s2 = gcdf(s2)\n#     #print hcf_s1,hcf_s2\n#     if(hcf_s1==hcf_s2):\n#         print 0\n#         continue\n#     if(hcf_s2!=1):\n#         flag2=0\n#         for i in s1:\n#             if(i%hcf_s2==0):\n#                 flag2=-1\n#                 break\n#         # if(flag2==-1):\n#         #     continue\n#     else:\n#         flag2=-1\n#     if(hcf_s1!=1):\n#         flag1=0\n#         for i in s2:\n#             if(i%hcf_s1==0):\n#                 flag1=-1\n#                 break\n#         # if(flag1==-1):\n#         #     continue\n#     else:\n#         flag1=-1\n#     if(flag1==-1 and flag2==0):\n#         print hcf_s2\n#         continue\n#     if(flag1==0 and flag2==-1):\n#         print hcf_s1\n#         continue\n#     if(flag1==0 or flag2==0):\n#         print max(hcf_s1, hcf_s2)\n#         continue\n#     else:\n#         print 0\n\n\n\n\nfor _ in range(inp()):\n    s = int(input())\n    l = list(input().split(\" \"))\n    ans = l[0][0]\n    for i in range(len(l)-1):\n        curr = l[i]\n        next = l[i+1]\n        #print curr, next\n        if(curr[1]==next[0]):\n            ans+=curr[1]\n        else:\n            ans+=curr[1]\n            ans+=next[0]\n    ans+=l[-1][1]\n    if(len(ans)!=s):\n        ans+=\"a\"\n    print(ans)\n\n\n\n\n\n\n# for _ in range(inp()):\n#     l = inlt()\n#     l.sort()\n#     smallest = l[0]\n#     largest = l[-1]\n#     ans = []\n#     ans.append(smallest)\n#     sumOfOtherTwo = largest -smallest\n#     for i in range(1, len(l)):\n#         for j in range(i+1, len(l)):\n#             if (l[i]+l[j]==sumOfOtherTwo):\n#                 ans.append(l[i])\n#                 ans.append(l[j])\n#                 break\n#     print \" \".join(map(str,ans))\n\n",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    le = int(input())\n    l = list(map(str, input().split()))\n    st = l[0]\n    for i in range(1,len(l)):\n        a = l[i]\n        b = l[i-1]\n        if a[0] == b[1]:\n            st = st+a[1]\n        else:\n            st = st + a\n    if len(st)!=le:\n        st = st+'a'\n    print(st)\n",
                true
            ],
            [
                "t=int(input())\nwhile(t>0):\n    n=int(input())\n    l=input().split()\n    s=l[0]\n    for i in range(1,n-2):\n        if l[i-1][1]==l[i][0]:\n            s=s+l[i][1]\n        else:\n            s=s+l[i]\n    if len(s)==n:\n        print(s)\n    else:\n        s=s+\"a\"\n        print(s)\n    t=t-1",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    li=list(input().split())\n    if len(li)==1:\n        print(\"a\"+li[0])\n        continue\n    ans=\"\"\n    for i in range(len(li)):\n        if i==0:\n            ans+=li[i][0]\n        elif li[i][0]!=li[i-1][-1]:\n            ans+=li[i-1][-1]+li[i][0]\n        else:\n            ans+=li[i][0]\n    if len(ans)!=n:\n        if len(ans)-n==-1:\n            print(ans+li[-1][-1])\n        else:\n            print(ans+li[-1][-1]+\"a\")\n    else:\n        print(ans)",
                true
            ],
            [
                "for test in range(int(input())):\n    n=int(input())\n    arr=[x for x in input().split()]\n    flag=False\n    ans=\"\"\n    for i in range(len(arr)):\n        if(i==0):\n            ans+=arr[i][0]\n        else:\n            if(arr[i][0]==arr[i-1][1]):\n                ans+=arr[i][0]\n            else:\n                flag=True\n                ans+=arr[i-1][1]+arr[i][0]\n    ans+=arr[-1][1]\n    if(flag==False):\n        ans+=\"a\"\n    print(ans)    ",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = [i for i in input().split()]\n\n    s = \"\"\n    s += a[0][0]\n    for i in range(1, n-2):\n        if a[i][0] == a[i-1][1]:\n            s += a[i][0]\n        else:\n            s += a[i-1][1] + a[i][0]\n\n    s += a[-1][1]\n    if len(s) < n:\n        s += \"a\"\n\n    print(s)\n",
                true
            ],
            [
                "import sys\nimport math\nfrom collections import deque,Counter\nfrom sys import stdin\n\n#sys.setrecursionlimit(10**7)\n\nint1=lambda x: int(x)-1\nstinput=lambda :stdin.readline()[:-1]\nii=lambda :int(stinput())\nmi=lambda :map(int, stdin.readline().split())\nli=lambda :list(mi())\nmi1=lambda :map(int1, stdin.readline().split())\nli1=lambda :list(mi1())\nmis=lambda :map(str, stdin.readline().split())\nlis=lambda :list(mis())\n\nfrom collections import defaultdict\n#d=defaultdict(int)\n#d=defaultdict(lambda:1)\n\nimport heapq\n#heapq.heapify(hq)\n#heapq.heappop(hq)\n#heapq.heappush(hq,1)\n\nmod=10**9+7\nMod=998244353\nINF=10**18\nans=0\n\nt=ii()\nfor _ in range(t):\n  n=ii()\n  x=lis()\n  ans=[]\n  for i in x[0]:\n    ans.append(i)\n  for s in x[1:]:\n    i,j=s[0],s[1]\n    if ans[-1]==i:\n      ans.append(j)\n    else:\n      ans.append(i)\n      ans.append(j)\n  ans.append('a'*(n-len(ans)))\n  print(''.join(ans))",
                true
            ],
            [
                "t=int(input(\"\"))\nwhile(t!=0):\n    a=int(input(\"\"))\n    li1=list(input(\"\").split(\" \"))\n    cnt=0\n    p1=li1[0]\n    print(p1[0],end=\"\")\n    cnt=cnt+1\n    for k in range(0,len(li1)-1):\n        s=li1[k]\n        p=li1[k+1]\n        if s[1]==p[0]:\n            print(p[0],end=\"\")\n            cnt=cnt+1\n        else:\n            print(s[1],end=\"\")\n            print(p[0],end=\"\")\n            cnt=cnt+2\n    p2=li1[len(li1)-1]\n    print(p2[1],end=\"\")\n    cnt=cnt+1\n    diff=a-cnt\n    if(diff==1):\n        print(\"a\",end=\"\")\n    print(\"\")\n    t=t-1\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=input().split()\n    ans=l[0]\n    f=0\n    for i in range(1,n-2):\n        if l[i][0]==l[i-1][1]:\n            ans+=l[i][1]\n        else:\n            f=1\n            ans+=l[i]\n    if f==1:\n        print(ans)\n    else:\n        print(ans+'a')\n\n",
                true
            ],
            [
                "#import io,os\n#input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\ndef main(t):\n\n\n    n = int(input())\n    arr = input().split()\n    \n    flag = False\n    for i in range(n-3):\n        if arr[i][1]!=arr[i+1][0]:\n            arr.insert(i+1,arr[i][1]+arr[i+1][0])\n            flag = True\n            break\n\n#    print(arr)\n\n    if not flag:\n        arr.append(arr[-1][0]+'a')\n\n\n    ans = [arr[0]]\n    for i in range(1,len(arr)):\n        ans.append(arr[i][1])\n\n    \n            \n\n\n\n\n\n\n    print(\"\".join(ans))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT = int(input())\nt = 1\nwhile t<=T:\n    main(t)\n    t += 1\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    lst=list(map(str,input().split()))\n    s=lst[0]\n    for j in range(1,len(lst)):\n        if lst[j][0]==s[len(s)-1]:\n            s+=lst[j][1]\n        else:\n            s+=lst[j]\n    if len(s)!=n:\n        dif=n-len(s)\n        s+='a'*dif\n    print(s)",
                true
            ],
            [
                "tc = int(input())\n\nfor case in range(tc):\n    n = int(input())\n    parejas = [i for i in input().split()]\n    #print(parejas)\n    my_str = parejas[0]\n    #print(my_str)\n    for pos in range(1,len(parejas)):\n        if parejas[pos][0] != my_str[-1]:\n            my_str += parejas[pos]\n        else:\n            my_str += parejas[pos][1]\n    if len(my_str) != n:\n        my_str+='a'\n    print(my_str)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    bigrams = input().split()\n    word = bigrams[0]\n    for j in bigrams[1:]:\n        word += j[1] if word[-1] == j[0] else j\n    print(word.ljust(n, \"a\"))\n",
                true
            ],
            [
                "def answer():\n    \n    n = int(input())\n    s = list(input().split())\n    x = ['']*(n-1)\n    cnt = 0\n    if n==3:\n        print(s[0]+'a')\n        return\n    for i in range(n-3):\n        if s[i][1] != s[i+1][0]:\n            x[cnt] = s[i]\n            cnt += 1\n            x[cnt] = s[i][1]+s[i+1][0]\n        else:\n            x[cnt] = s[i]\n        cnt += 1\n    x[cnt] = s[-1]\n    if cnt == i+1:\n        x[-1] = s[-1][1]+'a'\n    ans = x[0][0]\n    for i in range(n-1):\n        ans += x[i][1]\n    print(ans)\nfor _ in range(int(input())):\n    answer()\n    ",
                true
            ],
            [
                "def sample():\n    return\nfor i in range(int(input())):\n    sample()\n    num=int(input())\n    st=list(map(str,input().split()))\n    lst=\"\"\n    for i in range(len(st)-1):\n        if st[i][1]==st[i+1][0]:\n            lst=lst+st[i][0]\n        else:\n            lst=lst+st[i]\n    lst=lst+st[-1]\n    if len(lst)<num:\n        lst=lst+\"a\"*(num-len(lst))\n    print(lst)",
                true
            ],
            [
                "n = int(input())\nl = []\np = []\nfor i in range(n):\n    g= input()\n    y = input()\n    p.append(g)\n    l.append(y)\nfor i in l:\n    y = i.split()\n    o = []\n    p = len(y) - 1\n    flag = True\n    if len(y) == 1:\n        o.append(y[0])\n        o.append('a')\n        v = ''.join(o)\n        print(v)\n    else:\n        \n        for j in range(p):\n            s = y[j]\n            u = y[j+1]\n            # print(s[1],u[0])\n        \n            if j == 0:\n                o.append(s[0])\n            \n            if s[1] == u[0]:\n                o.append(s[1])\n            else:\n                flag = False\n                o.append(s[1])\n                o.append(u[0])\n            o.append\n            \n        \n        h = (y[-1][-1])\n        o.append(h)\n            \n        v = ''.join(o)\n        if flag:\n            print(v+\"a\")\n        else:\n            print(v)\n    # # print(y)\n    # list = [int(i) for i in y]\n    # # print(list)\n    # f = list[0]\n    # length = len(list) - 1\n    # for j in range(1,length):\n    #     for k in range(j+1,length):\n    #         sum = f + list[j] + list[k]\n    #         if sum == list[-1]:\n    #             print(f,list[j],list[k])\n    #             break;\n    \n            \n        \n        \n    \n    ",
                true
            ],
            [
                "T=int(input())\nres=[]\nfor _ in range(T):\n    tmp=\"\"\n    n=int(input())\n    d=input().split()\n    r=d[0][1]\n    tmp+=d[0][0]\n    for i in range(1,len(d)):\n        if r==d[i][0]:\n            r=d[i][1]\n        else:\n            tmp+=r\n            r=d[i][1]\n        tmp+=d[i][0]\n    tmp+=d[-1][1]\n    if len(tmp)==n:\n        res.append(tmp)\n    else:\n        res.append(tmp+\"a\")\n    #print(r)\nfor i in res:\n    print(i)",
                true
            ],
            [
                "import sys\n# sys.stdin=open('input.txt','r')\n# sys.stdout=open('output.txt','w')\n\nfor _ in range(int(input())):\n    n=int(input())\n    l=list(map(str,input().split()))\n    ans=l[0][0]\n    for i in range(1,n-2):\n        ans+=l[i-1][1]\n        if(l[i-1][1]!=l[i][0]):\n            ans+=l[i][0]\n    ans+=l[n-3][1]\n    if len(ans)!=n:\n        ans+=l[n-3][1]\n    print(ans)",
                true
            ],
            [
                "\ndef solve(n, bigrams):\n    ans = [bigrams[0][0]]\n    for i, bi in enumerate(bigrams[1:], 1):\n        if bigrams[i-1][1] != bi[0]:\n            ans.append('a' if bi[0] == 'b' else 'b')\n        ans.append(bi[0])\n    ans.append(bigrams[-1][1])\n    ans = ''.join(ans)\n    if len(ans) != n:\n        ans += 'a'\n    return ans \n\nif __name__ == '__main__':\n    ans = []\n    for _ in range(int(input())):\n        ans.append(solve(int(input()), list(input().split())))\n\n    print(*ans, sep='\\n')",
                true
            ],
            [
                "for _ in range(int(input())):\n    n =int(input())\n    l = input().split()\n    if(n == 3):\n        print(l[0] + l[0][1])\n        continue\n    f = 0\n    for i in range(len(l)-1):\n        if(l[i][1] != l[i+1][0]):\n            ind = i\n            f = 1\n    if(f):\n        if l[ind][1] == 'b':\n            l.insert(ind+1,'ba')\n        else:\n            l.insert(ind+1,'ab')\n        ans = l[0]\n        for i in range(1,len(l)):\n            ans += l[i][1]\n        print(ans)\n    else:\n        ans = l[0]\n        for i in range(1,len(l)):\n            ans += l[i][1]\n        ans += l[-1][1]\n        print(ans)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    q=input().split()\n    ans=''\n    flag=0\n    for i in range(len(q)):\n        if i and q[i][0]!=q[i-1][1]:\n            ans+=q[i-1][1]\n            ans+=q[i][0]\n            flag=1\n        else:\n            ans+=q[i][0]\n    ans+=q[-1][1]\n    if not flag: ans+='a'\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    big=input().split(\" \")\n    k=0\n    for i in range(n-3):\n        if big[i][1]!=big[i+1][0]:\n            big.insert(i+1,big[i][1]+big[i+1][0])\n            k=1\n            break\n    if k!=1:\n        big.append(big[-1][-1]*2)\n    ans=big[0]\n    for i in range(1,len(big)):\n        ans+=big[i][1]\n    print(ans)",
                true
            ],
            [
                "def main():\n    n = int(input())\n    \n    bigram = input().split()\n\n    for i in range(n - 3):\n        if bigram[i][1] == bigram[i + 1][0]:\n            continue\n        else:\n            bigram.insert(i + 1, bigram[i][1] + bigram[i + 1][0])\n            print(*([j[0] for j in bigram] + [bigram[-1][1]]), sep='')\n            return\n    \n    print(*([j[0] for j in bigram] + [bigram[-1][1]*2]), sep='')\n\nfor _ in range(int(input())):\n    main()",
                true
            ],
            [
                "for _ in range(eval(input())):\n    n = eval(input())\n    a = input().split()\n    s = a[0]\n    \n    for j in range(1, n-2):\n        if s[-1] == a[j][0]:\n            s+=a[j][1]\n        else:\n            s+=a[j]\n            \n    while len(s) < n:\n        s += 'a'\n    print(s)\n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    l=int(input())\n    ar=list(map(str,input().split()))\n    a=ar[0]\n    q=0\n    for g in range(1,len(ar)):\n        if ar[g][0]!=ar[g-1][1]:\n            for h in range(1,g):\n                a+=ar[h][1]\n            a+=ar[g]\n            for h in range(g+1,len(ar)):\n                a+=ar[h][1]\n            q=1\n            print(a)\n            break\n            \n    if q==0:\n        a=ar[0]\n        for i in range(1,len(ar)):\n            a+=ar[i][1]\n        a+=ar[-1][1]\n        print(a)\n\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(str,input().split()))\n    z=\"\"\n    z=z+str(a[0]) \n    m=0 \n    if(len(a)==1): \n        q=str(a[0])\n        z=z+str(q[0]) \n        print(z) \n    else:\n        for j in range(len(a)-1):\n            x=str(a[j]) \n            y=str(a[j+1]) \n            p=x[1]\n            q=y[0] \n            if(p==q):\n                z=z+str(y[1])\n            else:\n                z=z+str(a[j+1])\n            if(len(z)==n):\n                m=1\n                break  \n        if(m==1):\n            print(z)\n        else:\n            z=z+str(y[1])\n            print(z)\n\n\n        \n    ",
                true
            ],
            [
                "try:\n    import sys\n#     from _future_ import division, print_function\n#     import bisect \n    import math\n    # import heapq\n    import collections\n#     i_m = 9223372036854775807\n    M = 10**9+7\n    \n    # def matrix(n):\n    #     #matrix input\n    #     return [list(map(int, input().split()))for i in range(n)]\n    \n#     def string2intlist(s):\n#         return list(map(int, s))\n    \n    \n#     def calculate_sum(a, N):  # sum of a to N\n#         # Number of multiples\n#         m = N / a\n#         # sum of first m natural numbers\n#         sum = m * (m + 1) / 2\n#         # sum of multiples\n#         ans = a * sum\n#         return ans\n    \n    \n#     def series(N):\n#         return (N*(N+1))//2\n    \n    \n#     def count2Dmatrix(i, list):\n#         return sum(c.count(i) for c in list)\n    \n    \n#     def modinv(n, p):\n#         return pow(n, p - 2, p)\n    \n    \n#     def nCr(n, r):\n#         i = 1\n#         while i < r:\n#             n *= (n - i)\n#             i += 1\n#         return n // math.factorial(r)\n    \n    \n#     def GCD(x, y):\n#         x = abs(x)\n#         y = abs(y)\n#         if(min(x, y) == 0):\n#             return max(x, y)\n#         while(y):\n#             x, y = y, x % y\n#         return x\n    \n    \n#     def LCM(x, y):\n#         return (x * y) // GCD(x, y)\n    \n    \n    # def Divisors(n):\n    #     l = []\n    #     for i in range(1, int(math.sqrt(n) + 1)):\n    #         if (n % i == 0):\n    #             if (n // i == i):\n    #                 l.append(i)\n    #             else:\n    #                 l.append(i)\n    #                 l.append(n//i)\n    #     return l\n    \n    \n    # def isprime(n):\n    #     for i in range(2, int(math.sqrt(n))+1):\n    #         if n % i == 0:\n    #             return False\n    #     return True\n\n    # def isprime(n): \n    #     if(n <= 1): \n    #         return False\n    #     if(n <= 3): \n    #         return True\n    #     if(n % 2 == 0 or n % 3 == 0): \n    #         return False\n    #     for i in range(5,int(math.sqrt(n) + 1), 6): \n    #         if(n % i == 0 or n % (i + 2) == 0): \n    #             return False \n    #     return True\n\n   \n    # maxn  = 1000100\n    # def SieveOfEratosthenes():\n    #     prime = [True for i in range(maxn+1)]\n    #     prime[0] = False\n    #     prime[1] = False\n    #     p = 2\n    #     while (p * p <= maxn):\n    #         if (prime[p] == True):\n    #             for i in range(p * p, maxn+1, p):\n    #                 prime[i] = False\n    #         p += 1\n    #     return prime\n    \n    \n#     q = []\n    \n    \n#     def dfs(n, d, v, c):\n#         global q\n#         v[n] = 1\n#         x = d[n]\n#         q.append(n)\n#         j = c\n#         for i in x:\n#             if i not in v:\n#                 f = dfs(i, d, v, c+1)\n#                 j = max(j, f)\n#                 # print(f)\n#         return j\n#     # d = {}\n    \n    \n#     def knapSack(W, wt, val, n):\n#         K = [[0 for x in range(W + 1)] for x in range(n + 1)]\n#         for i in range(n + 1):\n#             for w in range(W + 1):\n#                 if i == 0 or w == 0:\n#                     K[i][w] = 0\n#                 elif wt[i-1] <= w:\n#                     K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w])\n#                 else:\n#                     K[i][w] = K[i-1][w]\n    \n#         return K[n][W]\n    \n    \n    # def modularExponentiation(x, n):\n    #     if(n == 0):\n    #         return 1\n    #     elif (n % 2 == 0):  # n is even\n    #         return modularExponentiation((x*x) % M, n//2)\n    #     else:  # n is odd\n    #         return (x * modularExponentiation((x * x) % M, (n - 1) // 2)) % M\n    \n     # def powerOftwo(n):\n    #     return n and (not (n & (n-1)))\n    \n#     def modInverse(a, m):\n#         m0 = m\n#         y = 0\n#         x = 1\n    \n#         if (m == 1):\n#             return 0\n    \n#         while (a > 1):\n    \n#             # q is quotient\n#             q = a // m\n    \n#             t = m\n    \n#             # m is remainder now, process\n#             # same as Euclid's algo\n#             m = a % m\n#             a = t\n#             t = y\n    \n#             # Update x and y\n#             y = x - q * y\n#             x = t\n    \n#         # Make x positive\n#         if (x < 0):\n#             x = x + m0\n    \n#         return x\n    # temp = [0]*101 \n#     def mapi(l,r):\n#         idx = -1\n#         val = -1\n#         if(l > r):\n#             return 0\n#         if(l == r):\n#             return l\n#         for l in range(l,r+1):\n#             if temp[l]>val:\n#                 idx = l\n#                 val = temp[l]\n#         return idx\n    def solve():\n        # x = int(input())\n        # d = collections.defaultdict(list)\n        # n,k = map(int,input().split())\n        n = int(input())\n        arr = list(map(str , input().split()))\n        # print(arr)\n        string = \"\" + arr[0]\n        for i in range(1 , len(arr)):\n            if(arr[i-1][1] == arr[i][0]):\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        if(len(string) == n):\n            return string\n        else:\n            return string + \"a\"*(n - len(string))\n\n        \n        # temp = modularExponentiation(2,n)-1\n        # return modularExponentiation(temp,k)\n    test = int(input())\n    count1 = 1\n    while count1<=test:\n        ans = solve()\n        # sys.stdout.write(\"Case #\" + str(count1) + \": \" + str(ans) + \"\\n\")\n        sys.stdout.write(str(ans) + \"\\n\")\n        count1 += 1\nexcept EOFError:\n    print(\"\")",
                true
            ],
            [
                "t = int(input())\nfor k in range(t):\n    add = False\n    n = int(input())\n    x = input().split()\n    s = x[0]\n    for i in range(1, n - 2):\n        if s[-1] == x[i][0]:\n            s += x[i][1]\n        else:\n            s += x[i]\n            add = True\n    if not add:\n        s += 'a'\n    print(s)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nfor __ in range(int(input())):\n  n = int(input())\n  arr = list(input().split())\n  answer = ''\n  for x in arr:\n    if answer and answer[-1] == x[0]:\n      answer += x[1]\n    else:\n      answer += x\n  if len(answer) == n:\n    print(answer)\n  else:\n    print(answer+answer[-1])",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    s=input().split()\n    for i in range(n-3):\n        if(s[i][1]!=s[i+1][0]):\n            s.insert(i+1,s[i][1]+s[i+1][0])\n            break\n    else:\n        s.append(s[-1][1]+'a')\n    print(s[0][0],end='')\n    for i in range(n-1):\n        print(s[i][1],end='')\n    print()",
                true
            ],
            [
                "import heapq;import sys;import math;from collections import deque;from bisect import bisect_left,bisect_right;I=sys.stdin.readline;II=lambda :int(I());IN=lambda x:map(int,x.split());FN=lambda x:map(float,x.split());L=lambda x:list(IN(x));M=1000000007;P=print;T=True;F=False\nfor _ in range(II()):\n    n=II()\n    l=list(I().split())\n    c=l[0][0]\n    ans=[];f=True\n    for i in range(len(l)):\n        if(f and c!=l[i][0]):\n            ans.append(c);f=False\n        c=l[i][1]\n        ans.append(l[i][0])\n    ans.append(l[-1][1])\n    if(f):\n        ans.append(l[-1][1])\n    print(*ans,sep='')\n",
                true
            ],
            [
                "\ndef getint():\n    return [int(i) for i in input().split()]\ndef get():\n    return int(input())\ndef getstr():\n    return [i for i in input().split()]\ndef S():\n    for test in range(int(input())):\n        solve()\nimport math\nimport itertools as it\nimport bisect\nimport time\nimport collections as ct\n\ndef lower_bound(a,x):\n    l=-1\n    r=len(a)\n    while l+1!=r:\n        mid=l+r>>1\n        if a[mid]<x:\n            l=mid\n        else:\n            r=mid\n    return r\ndef upper_bound(a,x):\n    l=-1\n    r=len(a)\n    while l+1!=r:\n        mid=l+r>>1\n        if a[mid]<=x:\n            l=mid\n        else:\n            r=mid\n    return r\ndef solve():\n    n=get()\n    a=getstr()\n    s=a[0]\n    for i in range(1,n-2):\n        if a[i][0]==s[-1]:\n            s+=a[i][1]\n        else:\n            s+=a[i]\n    if len(s)!=n:\n        s+=\"a\"\n    print(s)\n\n\nS()\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(str, input().split()))\n    if n==3:\n        print(a[0]+'a')\n    elif n==4:\n        print(a[0]+a[1])\n    else:\n        s=a[0]\n        k=0\n        for j in range(1, len(a)-1):\n            if k==0:\n                if a[j+1][0]!=a[j][1]:\n                    s+=a[j][1]+a[j+1][0]\n                    k=1\n                elif s[-1]!=a[j][0]:\n                    s+=a[j]\n                    k=1\n                else:\n                    s+=a[j][1]\n            else:\n                s+=a[j][1]\n        if k==1:\n            s+=a[-1][1]\n        else:\n            s+=a[-1][1]+'a'\n        print(s)",
                true
            ],
            [
                "t = int(input())\nwhile t:\n    n = int(input())\n    s = \"\"\n    a = list(map(str, input().split()))\n    for i in range(len(a) - 1):\n        if a[i][1] != a[i + 1][0]:\n            s += a[i]\n        else:\n            s += a[i][0]\n    s += a[len(a)-1]\n    if len(s) < n:\n        s += \"a\"\n    print(s)\n    t -= 1\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    arr = [s for s in input().split()]\n    res=''\n    for i in arr:\n        if not res:\n            res += i\n        else:\n            if i[0]==res[-1]:\n                res+=i[1]\n            else:\n                res+=i\n    if len(res)!=n:\n        res+='a'\n    print(res)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    bigrams=list(map(str, input().split(' ')))\n    yesval=\"yes\"\n    word=''\n    length=0\n    for theta in range(n-2):\n        word=word+bigrams[theta][0]\n    word=word+bigrams[n-3][1]\n    for delta in range(n-3):\n        if bigrams[delta][1]!=bigrams[delta+1][0]:\n            pos=delta\n            yesval=\"no\"\n            break\n    if yesval==\"no\":\n        word=word[:pos+1]+bigrams[pos][1]+word[pos+1:]\n    else:\n        word=word+\"a\"\n    print(word)",
                true
            ],
            [
                "import sys\n\ndef solve(n, bigrams):\n    res = bigrams[0]\n    i = 1\n    while i < len(bigrams):\n        if res[-1] != bigrams[i][0]:\n            res += bigrams[i][0]\n        res += bigrams[i][1]\n        i += 1\n    if len(res) != n:\n        res += \"a\"\n    return res\n\ndef read_n_lines(n):\n    inputs = []\n    output = []\n    for _ in range(n):\n        num_bigrams = int(sys.stdin.readline().strip())\n        bigrams = sys.stdin.readline().strip().split(\" \")\n        inputs.append([num_bigrams, bigrams])\n    return inputs\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline().strip())\n    inpt = read_n_lines(n)\n    for inp in inpt:\n        sys.stdout.write(solve(inp[0], inp[1]) + '\\n')\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    bigrams = input().split()\n    word = bigrams[0]\n    for j in range(1, n - 2):\n        if word[-1] == bigrams[j][0]:\n            word += bigrams[j][1]\n        else:\n            word += bigrams[j]\n    word += \"a\" if len(word) < n else \"\"\n    print(word)\n",
                true
            ],
            [
                "T = int(input())\nfor t in range(T):\n    n = int(input())\n    bigrams = [i for i in input().split()]\n    ans = bigrams[0]\n    prv = bigrams[0][0]\n    nxt = bigrams[0][1]\n    done = 0\n    i = 1\n    while i < len(bigrams):\n        if bigrams[i][0] == nxt:\n            prv = bigrams[i][0]\n            nxt = bigrams[i][1]\n            ans += bigrams[i][1]\n        else:\n            ans += bigrams[i][0]\n            done = 1\n            prv = nxt\n            nxt = bigrams[i][0]\n            i -= 1\n        i += 1\n    if done == 0:\n        ans += 'a'\n    print(ans)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=[x for x in input().split()]\n    s=a[0][0]\n    for j in range(len(a)-1):\n        if a[j][1]==a[j+1][0]:\n            s+=a[j][1]\n        else:\n            s+=a[j][1]+a[j+1][0]\n    \n    s+=a[-1][1]\n    if(len(s)==n):\n        print(s)\n    else:\n        print(s+s[-1])\n",
                true
            ],
            [
                "t = int(input())\nfor x in range(t):\n    n = int(input())\n    row = input().split()\n    for i in range(1, len(row)):\n        if row[i-1][1] != row[i][0]:\n            row.insert(i, row[i-1][1] + row[i][0])\n            break\n    if len(row) == n-2:\n        row.append(row[-1][1] + \"a\")\n    ans = [b[0] for b in row] + [row[-1][1]]\n    ans = \"\".join(ans)\n    assert(len(ans) == n)\n    check = []\n    for i in range(n-1):\n        check.append(ans[i:i+2])\n    assert(check == row)\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    l = list(input().split())\n\n    s = \"\" + l[0][0]\n    for i in range(1, len(l)):\n        if l[i-1][1] == l[i][0]:\n            s += l[i][0]\n        else:\n            s += l[i-1][1]+l[i][0]\n    s += l[len(l)-1][1]\n    if len(s) < n:\n        s += 'a'\n\n    print(s)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=input().split()\n    u=0\n    st=''\n    for i in range(len(a)-1):\n        if a[i][1]!=a[i+1][0]:\n            u=i\n            st=a[i][1]+a[i+1][0]\n    b=[]\n    if st!='':\n        for i in range(u+1):\n            b.append(a[i])\n        b.append(st)\n        for i in range(u+1,len(a)):\n            b.append(a[i])\n    if st=='':\n        b=a.copy()\n        st=a[len(a)-1][1]*2\n        b.append(st)\n    srt = ''\n    for i in b:\n        srt += i[0]\n    srt+=b[len(b)-1][1]\n    print(srt)\n    \n    \n",
                true
            ],
            [
                "# for _ in range(int(input())):\n#     lst = [int(i) for i in input().split()]\n#     if lst[2] == lst[0]+lst[1]:\n#         print(lst[0], lst[1], lst[3])\n#     else:\n#         print(lst[0], lst[1], lst[2])\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    lst = input().split()\n    a = [lst[0][0]]\n    f = lst[0][0]\n    for i in lst:\n        if f != i[0]:\n            a.append(i)\n        else:\n            a.append(i[1])\n        f = i[1]\n    ans = \"\".join(a)\n    if len(ans) < n:\n        print(ans+'a')\n    else:\n        print(ans)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n              le=int(input())\n              l = input().split(' ')\n              l1=[]\n              s = l[0]\n              def split(word):\n                  return [char for char in word]\n              for i in range(1,len(l)):\n                  a = split(l[i])\n                  if(s[-1] != a[0]):\n                      s = s + l[i]\n                  else:\n                      s = s+a[1]\n                  \n              #print(s)\n              if(len(s) >= le):\n                            print(s[0:le])\n              else:\n                            v = le-len(s)\n                            for i in range(v):\n                                          s = s+'a'\n                            print(s)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input().split()\n    b = [a[0]]\n    fl = 0\n    for i in range(n - 3):\n        if a[i][1] != a[i + 1][0]:\n            b.append(a[i][1] + a[i + 1][0])\n            fl = 1\n        b.append(a[i + 1])\n    if not fl:\n        b.append(a[n - 3][1] + 'a')\n    s = \"\"\n    for i in range(0, n - 1, 2):\n        s += b[i]\n    if n % 2 == 1:\n        s += b[-1][1]\n    print(s)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    bigrams = list(input().strip().split())\n    if n == 3:\n        print(bigrams[0] + 'a')\n        continue\n        \n    newl = []\n    for ind, bg in enumerate(bigrams[:n-3]):\n        \n        if bg[1] != bigrams[ind+1][0]:\n            newl.append(bg)\n            newl.append(bg[1]+bigrams[ind+1][0])\n        else:\n            newl.append(bg)\n    newl.append(bigrams[-1])\n    # print(newl)\n    \n    res = newl[0]\n    for bg in newl[1:]:\n        res += bg[1]\n        \n    if len(res) < n:\n        res += res[0]\n    print(res)\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    ans = ''\n    if n ==3 :\n        g = input()\n        print(g+'a')\n    else :\n        l = list(map(str, input().split()))\n\n\n        ans += l[0][0]\n        for x in range(1,n - 2):\n            if l[x][0] == l[x-1][1]:\n                ans += l[x][0]\n            else:\n                ans += l[x-1][1]\n                ans += l[x][0]\n        ans += l[-1][1]\n        if len(ans) !=  n:\n            ans += \"a\"\n        print(ans)\n\n\n",
                true
            ],
            [
                "def listToString(s): \n    \n    # initialize an empty string\n    str1 = \"\" \n    \n    # traverse in the string  \n    for ele in s: \n        str1 += ele  \n    \n    # return string  \n    return str1\n\nt=int(input())\nwhile (t>0):\n     m=[]\n     lst=[]\n     n=int(input())\n     m= list(map(str,input().strip().split()))[:n-2]\n     marker=0\n     lst.append(m[0][0])\n     for y in range(0,n-3):\n          if(m[y][1]==m[y+1][0]):\n               lst.append(m[y][1])\n          elif(m[y][1]!=m[y+1][0]):\n               lst.append(m[y][1])\n               lst.append(m[y+1][0])\n               marker=1\n     lst.append(m[n-3][1])\n     if(marker==0):\n          lst.append(\"a\")\n     print(listToString(lst))\n     t-=1\n",
                true
            ],
            [
                "def getInts():\n    return list(map(int, input().split()))\n\n[T] = getInts()\nfor case in range(T):\n    [n] = getInts()\n    bigs = input()\n    bigs = list(bigs.split(\" \"))\n\n    \n    if n == 3:\n        print(bigs[0] + 'a')\n        continue\n\n    ans = [bigs[0][0]]\n    hasFound = False\n    for i in range(1, len(bigs)):\n        if bigs[i-1][1] != bigs[i][0]:\n            ans.append(bigs[i-1][1])\n            ans.append(bigs[i][0])\n            hasFound = True\n        else:\n            ans.append(bigs[i][0])\n    if hasFound:\n        ans.append(bigs[-1][-1])\n    else:\n        ans.append(bigs[-1][-1])\n        ans.append('a')\n    print(\"\".join(ans))",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    ss = input()\n    s = ss.split(' ')\n    ans = []\n    t = False\n    ans.append(s[0][0])\n    for j in range(0, n-3):\n        if s[j][1] != s[j+1][0]:\n            t = True\n            ans.append(s[j][1])\n            ans.append(s[j+1][0])\n        else:\n            ans.append(s[j][1])\n    ans.append(s[n-3][1])\n    if t == False:\n        ans.append('a')\n    for x in ans:\n        print(x, end = \"\")\n    print()",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(input().split())\n    s = a[0]\n    for i in range(1, n - 2):\n        s += (a[i][1] if s[-1] == a[i][0] else a[i])\n    if (len(s) < n):\n        s += 'a'\n    print(s)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    for i in range(n - 3):\n        if s[i][1] != s[i + 1][0]:\n            s.insert(i + 1, s[i][1] + s[i + 1][0])\n            break\n    else:\n        s.append(s[-1][1] + 'a')\n    print(s[0][0], end=\"\")\n    for i in range(n - 1):\n        print(s[i][1], end=\"\")\n    print()",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n = int(input());\n    s = input().split(\" \");\n    \n    for i in range(n-3):\n        if s[i][1]!=s[i+1][0]:\n            s.insert(i+1,s[i][1]+s[i+1][0])\n            break\n    else:\n        s.append(s[-1][0]+'a')\n    \n    print(s[0][0],end=\"\")\n    for i in range(n-1):\n        print(s[i][1],end=\"\")\n    print()",
                true
            ],
            [
                "\nk = int(input())\nfor i in range(k):\n    n = int(input())\n    ans = list()\n    l = input().split()\n    ans.append(l[0][0])\n    for x, y in zip(l[:-1], l[1:]):\n        if x[1] == y[0]:\n            ans.append(x[1])\n        else:\n            ans.append(x[1])\n            ans.append(y[0])\n    ans.append(l[-1][1])\n    if len(ans) < n:\n        ans.append('a')\n    print(''.join(ans))",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    *b, = map(str, input().split())\n    ans = b[0][0]\n    flag = False\n    for i in range(1, n - 2):\n        if b[i][0] == b[i - 1][1]:\n            ans += b[i][0]\n        else:\n            flag = True\n            ans += b[i-1][1] + b[i][0]\n    ans += b[-1][1]\n    if flag:\n        print(ans)\n    else:\n        print(ans + b[-1][1])\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n  n = int(input())\n  A = list(map(str, input().split()))\n  ans = \"\"\n  first = True\n  found = False\n  ans += A[0][0]\n  for idx, (before, after) in enumerate(zip(A, A[1:])):\n    if before[1] == after[0]:\n      ans += before[1]\n    else:\n      ans += before[1]\n      ans += after[0]\n      found = True\n    if idx == n-4:\n      ans += after[1]\n      if found == False:\n        ans += after[1]\n  if len(A) == 1:\n    ans += A[0]\n  print(ans)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = input().split(' ')\n    ans = arr[0]\n    for i in arr[1:]:\n        if i[0] == ans[-1]:\n            ans += i[1]\n        else:\n            ans += i\n    print( ans + 'a'*(n-len(ans)))",
                true
            ],
            [
                "t = int(input())\nans=[]\n\nfor i in range (0,t):\n\n\n    n=int(input())\n    l = input()\n    d=(str)(l)\n    d=d+\" \"\n    w=(str)(d[0])\n    z=[]\n    for j in range (0, (int)(len(d))):\n        if ((str)(d[j])==\" \"):\n            continue\n        else:\n            z.append((str)(d[j]))\n\n    for k in range (1, (int)(len(z))-2,2):\n        if ((str)(z[k])==(str)(z[k+1])):\n            w=w+(str)(z[k])\n        else:\n            w=w+(str)(z[k])+(str)(z[k+1])\n    w=w+(str)(z[(int)(len(z)-1)])\n    if (n==3):\n        w=\"a\"+w\n    elif ((int(len(w)))!=n):\n        w=w+(str)(z[(int)(len(z)-1)])\n        \n    ans.append(w)\n\n\nfor q in range (0, (int)(len(ans))):\n    print (ans[q])",
                true
            ],
            [
                "t=int(input());\nfor i in range(t) :\n    s='';\n    find = 0;\n    n=int(input());\n    bigram=input().split();\n    for j in range(n-3) :\n        #print(j,s);\n        s += bigram[j][0];\n        if bigram[j][1] != bigram[j+1][0] :\n            s += bigram[j][1];\n            find = 1;\n            #print(j);\n    s += bigram[n-3];\n    if find == 0 :\n        s += 'a';\n    print(s);\n    ",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    \n    a = input().split()\n    output = ''\n    missing = 0\n    for ind in range(n-2):\n        anow = a[ind]\n        if ind == 0:\n            aprev = anow\n            output += anow\n        elif anow[0] != aprev[1]:\n            output += anow\n            missing = 1\n        else:\n            output += anow[1]\n        aprev = anow\n    \n    if missing == 0:\n        output += 'a'\n    print(output)\n    \n        \n                \n            \n    \n",
                true
            ],
            [
                "t = int(input())\nwhile t>0:\n    n = int(input())\n    l = list(map(str,input().split()))\n    s = str(l[0])\n    for i in range(n-3):\n        if l[i][1] != l[(i+1)][0]:\n            s += l[(i+1)][0]+l[(i+1)][1]\n        else:\n            s += l[(i+1)][1]\n    if len(s)==n:\n        print(s)\n    else:\n        for i in range(n-len(s)):\n            s += 'a'\n        print(s)\n    t -= 1",
                true
            ],
            [
                "import sys\nfrom typing import List\n\ndef solve(arr:List,n):\n\n    ans = ''\n    ans = arr[0][0]+ arr[0][1]\n    k = len(arr)\n    i = 1\n    while i<k:\n        ele = arr[i]\n\n        if ele[0] != arr[i-1][1]:\n            ele = arr[i-1][1]+ele[0]\n            arr.insert(i,ele)\n\n        ans += ele[1]\n        \n        k = len(arr)\n        i += 1\n            \n    if len(ans) == n:\n        return ans\n    else:\n        return ans+'a'\n\nt = int(input())\n\n\nwhile t>0:\n\n    t -= 1\n    n  = int(input())\n    arr = list(sys.stdin.readline().strip().split())\n    # arr = ['ab','bb','ba','aa','ab']\n    ans = solve(arr,n)\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(str, input().split()))\n    s = \"\"\n    for i in range(1, n - 2):\n        s += (a[i][0] if a[i][0] == a[i-1][1] else a[i-1][1]+a[i][0])\n    print(a[0][0] + s + a[n - 3][1] if len(s) == n-2 else a[0][0] + s + a[n - 3][1] + a[n - 3][1])\n",
                true
            ],
            [
                "n = int(input())\nlengths = []\nbigrams = []\nfor a in range(n):\n    lengths.append(int(input()))\n    bigrams.append(input().split(\" \"))\n\nword = \"\"\nfor q,i in enumerate(bigrams):\n    word = \"\"\n    counter = 0\n    for j in range(len(i)):\n        currentletter = i[j][0]\n        if j == 0:\n            word += currentletter\n        else:\n            prevletter = i[j-1][1]\n            \n            #print(currentletter,prevletter)\n        \n            if currentletter != prevletter:\n                counter +=1\n                if prevletter == \"a\":\n                    word += \"ab\"\n                else:\n                    word += \"ba\"\n            else:\n                word += i[j][0]\n        #print(j)\n        if j == (lengths[q]-3):\n            word += i[j][1]\n            #print(i[j][1])\n    if counter == 0:\n        word += \"a\"\n    print(word)\n            \n    \n    ",
                true
            ],
            [
                "t = int(input())\n\nfrom collections import Counter\n\nfor _ in range(t):\n    n = int(input())\n    bis = input().split()\n    sbis = \"\".join(bis)\n\n    if len(bis) == 1:\n        print(bis[0] + \"a\")\n        continue\n\n    s = [bis[0]]\n    i = 1\n    while 1:\n        if len(s) >= n or i >= len(bis):\n            break\n        if s[-1][-1] == bis[i][0]:\n            s.append(bis[i][1])\n        else:\n            s.append(bis[i])\n        i += 1\n    print(\"\".join(s) + sbis[-1]*(n-len(\"\".join(s))))\n\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    tec = input().split()\n    ans = tec[0]\n    last = ans[-1]\n    fl = False\n    for j in tec[1:]:\n        if j[0] == last:\n            ans += j[1]\n            last = j[1]\n        else:\n            ans += j\n            last = j[1]\n            fl = True\n    if not fl:\n        ans += 'a'\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(str, input().split()))\n    # print(l)\n    flag=False\n    ans=\"\"\n    j=0\n    for i in range(n-2):\n        if i==0:\n            ans+=l[i]\n        else:\n            if ans[j]==l[i][0]:\n                ans+=l[i][1]\n            else:\n                ans+=l[i]\n                j+=1\n                flag=True\n        j+=1\n    \n    if flag==False:\n        ans+='a'\n    print(ans)",
                true
            ],
            [
                "def solve():\n    # put code here\n    n = int(input())\n    arr = [s for s in input().split()]\n    missing = None\n    idx = -1\n    for i in range(1, len(arr)):\n        if arr[i][0]!=arr[i-1][1]:\n            missing = '%s%s' % (arr[i-1][1], arr[i][0])\n            idx = i\n\n    if not missing:\n        missing = arr[-1][1] + 'a'\n        arr.append(missing)\n\n    s = arr[0][0]\n    for i in range(len(arr)):\n        if i == idx:\n            s += missing[1]\n        s += arr[i][1]\n\n    print(s)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()\n",
                true
            ],
            [
                "def ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().split())\ndef msi(): return map(str,input().split())\ndef li(): return list(mi())\n\nt=ii()\nfor _ in range(t):\n    m=ii()\n    a=input().split()\n    n=len(a)\n    if n==1:\n        print(a[0]+'a')\n        \n    else:\n        res=a[0]\n        \n        for i in range(n-1):\n            if a[i][1]==a[i+1][0]:\n                res += a[i+1][1]\n                \n            else:\n                res += a[i+1]\n        \n        if len(res)==m:        \n            print(res)\n            \n        else:\n            print(res+'a')\n    \n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    lst = [*map(str, input().split())]\n    s = \"\" + lst[0]\n    for i in range(1, len(lst)):\n        if s[-1] == lst[i][0]:\n            s += lst[i][1]\n        else:\n            s += lst[i]\n    if len(s) < n:\n        s += s[-1] * (n - len(s))\n    print(s)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    s = list(input().split())\n    ans = s[0]\n    flag = False\n    for el in s[1:]:\n        if el[0] == ans[-1]:\n            ans += el[1]\n        else:\n            ans += el\n            flag = True\n    if flag:\n        print(ans)\n    else:\n        print(ans + \"a\")",
                true
            ],
            [
                "cases = int(input())\nfor i in range(cases):\n    n = int(input())\n    arr = list(input().split())\n    count = n\n    new = ''\n    previous = ''\n    for i, item in enumerate(arr):\n        if i == 0:\n            new += item[0]\n            previous = item\n            count -= 1\n            continue\n        if item[0] == previous[1]:\n            new += item[0]\n            count -= 1\n        else:\n            new += previous[1] + item[0]\n            count -= 2\n        previous = item\n    if i == (n-3):\n        new += item[1]\n        count -= 1\n    if count > 0:\n        new += 'a'\n    print(new)\n",
                true
            ],
            [
                "for s in[*open(0)][2::2]:\n a,b=zip(*s.split());r,*a=a\n for x,y in zip(b,a):r+=(x+y)[x==y:]\n print((r+2*b[-1])[:len(b)+2])",
                true
            ],
            [
                "tst = int(input())\nfor i in range(tst):\n    n = int(input())\n    arr = list(input().split(\" \"))\n    ans = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i-1][1] == arr[i][0]:\n            ans += arr[i][1]\n        else:\n            ans += arr[i]\n    if len(ans) == n:\n        print(ans)\n    else:\n        print(ans+'a')\n\n\n    \n    ",
                true
            ],
            [
                "import sys\ninput = lambda :sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    n=int(input())\n    a = input().split()\n    if len(a)==1:\n        print(a[0]+\"a\")\n        continue\n    ans = \"\"\n    idx = -1\n    for i in range(len(a)-1):\n        if a[i][1] == a[i+1][0]:\n            idx = i;\n        else:\n            break;\n    if idx == len(a)-2:\n        ans = a[0]\n        for i in range(1,len(a)):\n            ans += a[i][1]\n        ans += \"a\"\n    elif idx == -1:\n        ans += a[0] + a[1]\n        for i in range(2,len(a)):\n            ans += a[i][1]\n    else:\n        idx+=1\n        ans += a[0][0]\n        for i in range(1,idx+1):\n            ans += a[i][0]\n        ans += a[idx][1]\n        ans += a[idx+1]\n        for i in range(idx+2,len(a)):\n            ans += a[i][1]\n    print(ans)",
                true
            ],
            [
                "import sys;input=sys.stdin.readline\nfor _ in range(int(input())):\n    n=int(input())\n    d=list(input().strip().split())\n    nd=[]\n    for i in range(len(d)-1):\n        nd.append(d[i])\n        if d[i][1]!=d[i+1][0]:\n            nd.append(d[i][1]+d[i+1][0])\n    nd.append(d[-1])\n    for i in range(len(nd)):\n        if i%2==0:\n            print(nd[i],end='')\n            n-=2\n    if n>0:print(nd[-1][1]*n)\n    elif n<0:print('error')\n    else:print()\n    \n",
                true
            ],
            [
                "def solution():\n    n = int(input())\n    a = list(input().split())\n    s = a[0]\n    for i in range(1, n - 2):\n        if a[i][0] != s[-1]:\n            # s += a[i - 1][1]\n            s += a[i]\n            continue\n        # s += a[i - 1][1]\n        s += a[i][1]\n    if len(s) != n:\n        s += 'a'\n    print(s)\n\n\nt = int(input())\nfor _ in range(t):\n    solution()\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(input().split())\n    ans = [arr[0][0], arr[0][1]] #prob fix this\n    found = False\n    for j in range(1, len(arr)):\n        if arr[j][0] == arr[j-1][1]:\n            ans.append(arr[j][1])\n        else:\n            found = True\n            ans.append(\"\" + arr[j][0] + arr[j][1])\n    if not found:\n        ans.append(\"a\")\n    print(\"\".join(ans))",
                true
            ],
            [
                "def solve(A, n):\n    N = len(A)\n    ans = A[0][0]\n    for i in range(1, N):\n        if A[i][0] != A[i-1][1]:\n            ans += A[i-1][1]\n            ans += A[i][0]\n        else:\n            ans += A[i][0]\n    \n    ans += A[-1][1]\n\n    ans += 'a'*(n-len(ans))\n\n    print(ans)\n    \n\n\nN = int(input())\nfor _ in range(N):\n    n = int(input())\n    A = [x for x in input().split(' ')]\n\n    solve(A, n)\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    b = list(map(str, input().split()))\n    s = b[0]\n    for j in range(0, n - 3):\n        if b[j][1] == b[j + 1][0]:\n            s += b[j + 1][1]\n        else:\n            s += b[j + 1][0] + b[j + 1][1]\n    if len(s) != n:\n        s += 'a'\n    print(s)",
                true
            ],
            [
                "q=int(input())\nwhile(q!=0):\n    n=int(input())\n    s=input().split()\n    r=s[0]\n    for i in s[1:]:\n        if(r[-1]!=i[0]):\n            r+=i\n        else:\n            r+=i[1]\n    if(len(r)!=n):\n        r+='a'\n    print(r)\n    q-=1",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    x = input().split()\n    k = ''\n    for i in x:\n        if not len(k):\n            k+=i\n            continue\n        if k[-1]==i[0]:\n            k+=i[1]\n        else:\n            k+=i\n    k=k+'a'*(n-len(k))\n    print(k)",
                true
            ],
            [
                "for ii in range(int(input())):\n    n=int(input())\n    a=list(input().split())\n    ans=a[0][0]\n    for jj in range(1,n-2):\n        if a[jj-1][-1]==a[jj][0]:\n            ans+=a[jj-1][1]\n        else:\n            ans+=a[jj-1][1]+a[jj][0]\n    ans+=a[-1][-1]\n    if len(ans)!=n:\n        ans+=\"a\"\n    print(ans)",
                true
            ],
            [
                "import sys\n\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n\ndef solve():\n    T = int(input())\n    \n    for i in range(T):\n        word_len = int(input())\n        bigrams = list(map(list, input().split()))\n        ans = []\n        ans.append(bigrams[0][0])\n        for i in range(1, word_len-2):\n            if bigrams[i][0] == bigrams[i-1][1]:\n                ans.append(bigrams[i-1][1])\n            else:\n                ans.append(bigrams[i-1][1])\n                ans.append(bigrams[i][0])\n        ans.append(bigrams[word_len-3][1])\n        if len(ans) < word_len:\n            ans.append('a')\n        print(''.join(ans))\n\nsolve()\n",
                true
            ],
            [
                "# your code goes here\n# Online Python compiler (interpreter) to run Python online.\n# Write Python 3 code in this online editor and run it.\n# print(\"Hello world\")7\n# ab bb ba aa ba\n\ndef solve(n, tempstr):\n    \n    inmid = -1\n    for i in range(len(tempstr)-1):\n        if tempstr[i][1] != tempstr[i+1][0]:\n            inmid = i+1\n            break\n    ans = ''\n    if inmid != -1:\n        for i in range(len(tempstr)):\n            if i != inmid-1 and i != inmid:\n                if i != inmid+1:\n                    ans += tempstr[i][0]\n            else:\n                ans += tempstr[i]\n            # if i != inmid-1 and i != inmid:\n            #     if i == 0:\n            #         ans += tempstr[i]\n            #     else:\n            #         ans += tempstr[i][1]\n            # else:\n            #     if i == inmid-1:\n            #         ans += tempstr[i][1]\n            #     else:\n            #         ans += tempstr[i][0]\n        if len(ans) < n:\n            ans += tempstr[-1][1]\n        print(ans)\n        return\n    # ab bb ba aa ba\n    else:\n        for i in range(len(tempstr)):\n            ans += tempstr[i][0]\n        ans += tempstr[len(tempstr)-1][1]\n        ans += ans[-1]\n        print(ans)\n        return\n    \n    \n    \nt = int(input())\n \nwhile (t > 0):\n    n = int(input())\n    tempstr = input().split(' ')\n    solve(n,tempstr)\n    t -= 1",
                true
            ],
            [
                "testcase=int(input())\ng=0\nwhile(testcase>0):\n  length_of_word=int(input())\n  bigram=input().split()\n  polycarp=bigram[0]\n  for i in bigram[1:]:\n    if(polycarp[-1]!=i[0]):\n      polycarp+=i\n    else:\n      polycarp+=i[1]\n  if(len(polycarp)!=length_of_word):\n    polycarp+='a'\n  print(polycarp)\n  testcase-=1\n  g+=1",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    b = input().split(\" \")\n    if n == 3:\n        print(b[0]+\"a\")\n        continue\n    s = [b[0][0]]\n    flag = False\n    for idx in range(len(b) - 1):\n        prev = b[idx]\n        curr = b[idx+1]\n        \n        if prev[1] == curr[0]:\n            s.append(prev[1])\n        else:\n            flag = True\n            s.append(prev[1])\n            s.append(curr[0])\n    s.append(b[-1][1])\n    if not flag:\n        s.append(\"a\")\n    print(\"\".join(s))\n\n\n\n",
                true
            ],
            [
                "x = int(input())\n\ndef abhishek(LIST, m):\n    txt = LIST[0]\n    for i in range(len(LIST) - 1):\n        if LIST[i][1] == LIST[i + 1][0]:\n            txt += LIST[i + 1][1]\n        else:\n            txt += LIST[i + 1]\n    if len(txt) == m:\n        print(txt)\n    else:\n        print(txt + \"a\")\n\ndef main():\n    for _ in range(x):\n        n = int(input())\n        LIST = input().split()\n        abhishek(LIST, n)\n\nif __name__ == '__main__':\n    main()",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nPolycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "\n\nfor i in range(int(input())):\n    n=int(input())\n\n    count=[0]\n\n    if n==1:\n        print(1)\n    else:\n        for i in range(1,n):\n\n            if i*i>n:\n                break\n\n            if i*i<=n:\n                count.append(i*i)\n            if i*i*i<=n:\n                count.append(i*i*i)\n            else:\n                pass\n\n        print(len(set(count))-1)\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    i = 1\n    res = []\n    while (i*i)<=n:\n        res.append(i*i)\n        i = i+1\n    i = 1\n    while (i*i*i)<=n:\n        res.append(i*i*i)\n        i = i+1\n    \n    result = set(res)\n    count = 0\n    for i in result:\n        if i<=n:\n            count += 1\n\n    print(count)",
                true
            ],
            [
                "for i in range(int(input())):\n    a = int(input()) + 0.99\n    print(int(a ** 0.5) + int(a ** (1 / 3)) - int(a ** (1 / 6)))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n  n = int(input())\n  l = list()\n  x = 2\n  summa = 1\n  square = x**2\n  while square <= n:\n    cube = x**3\n    if cube <= n:\n      l.append(cube)\n      summa += 1\n    if len(l) > 0:\n      if square != l[0]:\n        summa += 1\n      else:\n        l.remove(square)\n    else:\n      summa += 1\n    x += 1\n    square = x**2\n    while len(l) > 0 and square > l[0]:\n      l.pop(0)\n  print(summa)",
                true
            ],
            [
                "import math\ndef check(n):\n    if str(n).split(\".\")[1][:4]==\"9999\":\n        return int(n)+1 \n    else:\n        return int(n)\nfor _ in range(int(input())):\n    n=int(input())\n    itwo=0\n    ithree=0\n    isix=0\n    true=True\n    while(true):\n        if itwo*itwo>n:\n            itwo-=1\n            break\n        itwo+=1\n    while(true):\n        if ithree*ithree*ithree>n:\n            ithree-=1\n            break\n        ithree+=1\n    while(true):\n        if isix*isix*isix*isix*isix*isix>n:\n            isix-=1\n            break\n        isix+=1\n    print(itwo+ithree-isix)",
                true
            ],
            [
                "def count(a):\n    counter = 1\n    for i in range(2, a):\n        square = i ** 2\n        cube = i ** 3\n        sixth = i ** 6\n        if square <= a:\n            counter += 1\n        if cube <= a:\n            counter += 1\n        if sixth <= a:\n            counter -= 1\n        if square > a:\n            break\n    return counter\n\n\nt = int(input())\nfor i in range(t):\n    a = int(input())\n    print(count(a))\n",
                true
            ],
            [
                "import math\nT=int(input())\nfor t in range(T):\n    n=int(input())\n    sq=int(math.sqrt(n))\n    cb=int(n**(1/3))\n    sqcb=int(n**(1/6))\n    if (sq+1)**2==n:\n        sq+=1\n    if (cb+1)**3==n:\n        cb+=1\n    if (sqcb+1)**6==n:\n        sqcb+=1\n    print(sq+cb-sqcb)",
                true
            ],
            [
                "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    ans = defaultdict(int)\n    j = 1\n    while j**2<=n:\n        ans[j**2]+=1\n        j+=1\n    i = 1\n    while i**3<=n:\n        ans[i**3]+=1\n        i+=1\n    print(len(ans))",
                true
            ],
            [
                "import math\n\nt = int(input())\n\nfor _ in range(t):\n  n = int(input())\n  sqrt = int(n ** 0.5)\n  res = 1\n  used = set()\n  for num in range(2, sqrt + 1):\n    if num ** 3 <= n:\n      used.add(num ** 3)\n      res += 1\n    if num ** 2 not in used and num ** 2 <= n:\n      used.add(num ** 2)\n      res += 1\n  print(res) ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())+.5\n    print(int(n**(1/2))+int(n**(1/3))-int(n**(1/6)))",
                true
            ],
            [
                "for _ in range(int(input())):\n    x = int(input())\n    l = [0]\n    for i in range(1, x):\n        if i*i > x:\n            break\n        if i*i <= x:\n            l.append(i*i)\n        if i*i*i <= x:\n            l.append(i*i*i)\n        else:\n            pass\n    m = set(l)\n    if x == 1:\n        print(1)\n    else:\n        print(len(m)-1)\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    a = int(input())\n    count = [1]\n    for i in range(2, a,  1):\n        \n        if i**2 <= a:\n            count.append(i**2)\n        else:\n            break\n        if i**3 <= a:\n            count.append(i**3)\n            \n    count = set(count)\n    print(len(count))",
                true
            ],
            [
                "a = int(input())\nimport math\ni = 0\nwhile i<a:\n    b = int(input())\n    s = int(b**(1/2))\n    p = int(b**(1/3))\n    k = int(b**(1/6))\n    if (s+1)**2==b:\n        s=s+1\n    if (p+1)**3==b:\n        p=p+1\n    if (k+1)**6==b:\n        k=k+1\n    print(s+p-k)\n    i=i+1\n\n\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    x=1\n    c=0\n    while(x*x<=n):\n        x+=1\n        c+=1\n    x=1\n    while(x*x*x<=n):\n        x+=1\n        c+=1\n    x=1\n    c1=0\n    while(x**6<=n):\n        x+=1\n        c1+=1\n    print(c-c1)",
                true
            ],
            [
                "\ncases = int(input())\n\n\n\nfor i in range(cases):\n    numbers = {1}\n    variable = 2\n    number = int(input())\n    while True and number != 1:    \n        if variable**2 <= number:\n            numbers.add(variable**2)\n        else:\n            break\n        if variable**3 <= number:\n            numbers.add((variable**3))  \n        variable += 1\n    print(len(numbers))\n\n                \n        \n            \n            \n        \n\n    \n    \n    \n    \n    \n        \n\n    \n    \n    \n    \n    \n    \n",
                true
            ],
            [
                "\nimport sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = set()\n    for i in range(1, n+1):\n        if i**2>n:\n            break\n        elif i**3 <= n:\n            a.add(i**3)\n        a.add(i**2)\n    print(len(a))\n\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n = int(input())\n    a = int(n**0.5)\n    b = int(n**0.3333333333334)\n    c = int(n**0.1666666666667)\n    print(a+b-c)\n",
                true
            ],
            [
                "import math\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    count=0\n    count+=int(math.sqrt(n))\n    x=math.ceil(n**(1/3))\n    if x*x*x>n:\n        x=x-1\n    for i in range(1,int(x+1)):\n        x=i*i*i\n        if math.sqrt(x).is_integer():\n            count+=0\n        else:\n            count+=1\n    print(count)\n\n",
                true
            ],
            [
                "from math import ceil\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n>1:\n        a = [1]\n        for i in range(2,ceil(n**0.5+1)):\n            if i**2<=n:\n                a.append(i**2)\n            if i**3<=n:\n                a.append(i**3)\n        print(len(set(a)))\n    else:\n        print(1)\n",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    n=int(input())\n    if n==1:\n        print(1)\n        continue\n    no_s=math.floor(n**(1/2))\n    if int(round(n ** (1. / 3))) ** 3 == n:\n        no_c=int(round(n ** (1. / 3)))\n    else:\n        no_c=math.floor(n**(1/3))\n    #print(no_s,no_c)\n    ans=no_s+no_c\n    for i in range(1,no_c+1):\n        if (i**3)<=no_s:\n            ans-=1\n    print(ans)",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    c = int(round(n**(1/3),0))\n    s = int(round(n**(1/2),0))\n    lc=ls=[]\n    for i in range(1,c+1):\n        lc.append(i**3)\n    for i in range(1,s+1):\n        ls.append(i**2)\n    a = [i for i in lc if i>n]\n    b = [i for i in ls if i>n]\n    a=set(a)\n    b=set(b)\n    lc=set(lc)\n    lc=lc.difference(a)\n    ls=set(ls)\n    ls=ls.difference(b)\n    k=lc.union(ls)\n    print(len(k))",
                true
            ],
            [
                "for n in[*map(int,open(0))][1:]:n+=.5;print(int(n**.5)+int(n**(1/3))-int(n**(1/6)))",
                true
            ],
            [
                "import math\nfor i in range(int(input())):\n    a = set()\n    num = int(input())\n    for j in range(1, int(math.sqrt(num)) + 1):\n        if j ** 2 <= num:\n            a.add(j ** 2)\n        if j ** 3 <= num:\n            a.add(j ** 3)\n    print(len(a))",
                true
            ],
            [
                "import math\nn=int(input())\nfor i in range(n):\n    x=int(input())\n    c=0\n    for j in range(1,x):\n        if j**2<=x:\n            c+=1\n        if j**3<=x and j!=1 and not math.sqrt(j**3).is_integer():\n            c+=1\n        if j**2>x:\n            break\n    if c==0:\n        print(1)\n    else:\n        print(c)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n  n = int(input())\n  seen = set()\n  for i in range(1, 10 ** 5):\n    val = i ** 2\n    if val > n:\n      break\n    seen.add(val)\n  for i in range(1, 10 ** 3 + 2):\n    val = i ** 3\n    if val > n:\n      break\n    seen.add(val)\n  print(len(seen))",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n = int(input()) \n    n+= 0.5\n    t1 = int(n**(1/2))\n    t2 = int(n**(1/3))    \n    t3 = int(n**(1/6))\n\n    print(t1+t2-t3)",
                true
            ],
            [
                "n = int(input())\n\nfor _ in range(n):\n    num = int(input())\n    arr = []\n    for i in range(1,int(num**.5)+1):\n        if i ** 2<=num:\n            arr.append(i ** 2)\n        if i ** 3<=num:\n            arr.append(i ** 3)\n\n    print(len(set(arr)))",
                true
            ],
            [
                "x=0\nfor _ in range(int(input())):\n    a=int(input())\n    s=[]\n    i=0\n    while True:\n        i+=1\n        if i**2<=a:\n            s.append(i*i)\n        else:\n            break\n        if i**3<=a: \n            s.append(i**3)\n    print(len(set(s)))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    d={}\n    n=int(input())\n    x=int(n**(1/2))\n    k=n**(1/3)\n    h=int(k)+1\n    if int(k)==k:\n        y=int(k)\n    elif h*h*h==n:\n        y=h\n    else:\n        y=int(k)\n    for i in range(1,x+1):\n        d[i**2]=1\n    for j in range(1,y+1):\n        if j**3 not in d.keys():\n            d[j**3]=1\n    print(len(d))",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    n=n+0.99\n    a=int(n**(1/2))\n    b=int(n**(1/3))\n    c=int(n**(1/6))\n    print(a+b-c)",
                true
            ],
            [
                "import math\nn=int(input())\nfor i in range(n):\n    num = int(input())\n    sqrt = round(num**0.5)\n    if sqrt**2>num:\n        sqrt-=1\n    cbrt = round(num**(1/3))\n    if cbrt**3>num:\n        cbrt-=1\n    sixrt = round(num**(1/6))\n    if sixrt**6>num:\n        sixrt-=1\n    ans = sqrt + cbrt - sixrt\n    print(ans)\n",
                true
            ],
            [
                "# square or a cube\n# simple dp\nfrom bisect import bisect_left\n\n# squares and cubes till int(1e9)\ndp = set()\n\ndef generate_items():\n    global dp\n    \n    i = 1\n    while i**2 <= int(1e9):\n        dp.add(i**2)\n        dp.add(i**3)\n        i += 1\n        \n\ndef answer(x):\n    if x in dp:\n        return dp.index(x)+1\n    else:\n        return bisect_left(dp, x)\n\ngenerate_items()\ndp = sorted(list(dp))\nfor _ in range(int(input())):\n    print(answer(int(input())))",
                true
            ],
            [
                "import math\n\ntst = int(input())\nresult = []\n\nfor i in range(tst):\n    n = int(input())\n    x = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if i * i <= n:\n            x += 1\n        if i * i * i <= n:\n            x += 1\n        if i * i * i * i * i * i <= n:\n            x -= 1\n\n    result.append(x)\n\n\n\n\n\nfor i in range(tst):\n    print(result[i])\n\n\n",
                true
            ],
            [
                "from itertools import combinations\nimport time\n# command eval and join\n\nn = []\n\nfor i in range(1,31623):\n    n.append(i**2)\nfor j in range(1,1001):\n    n.append(j**3)\na = list(set(n))\na.sort()\np = int(input())\nl = []\nfor i in range(p):\n    y = int(input())\n    l.append(y)\n\ng = []\nfor i in l:\n    c = 0\n    for j in a:\n        if j <= i:\n            c+=1\n    g.append(c)\n\nfor i in g:\n    print(i)\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = int(pow(n, 1/2))\n    if (a+1)**2 == n:\n        a += 1\n    b = int(pow(n, 1/3))\n    if (b+1)**3 == n:\n        b += 1\n    c = int(pow(n, 1/6))\n    if (c+1)**6 == n:\n        c += 1\n    print(a+b-c)\n",
                true
            ],
            [
                "n = int(input())\nanswer = []\nk = []\nfor i in range(n):\n    s = int(input())\n    answer.append(s)\nfor j in answer:\n    ans = {1: 1}\n    if j < 4:\n        k.append(1)\n    elif j < 8:\n        k.append(2)\n    else:\n        for i in range(2, j // 2 + 1):\n            if i ** 3 <= j:\n                ans[i ** 3] = ans.get(i ** 3, 0) + 1\n                ans[i ** 2] = ans.get(i ** 2, 0) + 1\n            elif i ** 2 <= j:\n                ans[i ** 2] = ans.get(i ** 2, 0) + 1\n            else:\n                k.append(len(ans))\n                break\nfor i in k:\n    print(i)\n\n'''\n20\n511987557\n940318563\n397150475\n454087385\n354269461\n613861695\n211176104\n419833326\n505148301\n319706849\n213732674\n655143258\n485034974\n341893134\n696107438\n892474645\n801724293\n205267813\n941783222\n940658655\n'''\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\nT = int(input())\nfor _ in range(T):\n    num = int(input())\n    count = 0\n    x = 1\n    y = set()\n    while x*x <= num:\n        y.add(x*x)\n        x += 1\n    x = 1\n    while x**3 <= num:\n        y.add(x**3)\n        x += 1\n\n\n    print(len(y))",
                true
            ],
            [
                "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    ans = 1\n    arr = set()\n    # x = int(math.sqrt(n))\n    # y = int(n**(1/3))-1\n    # print(x+y)\n    i = 2\n    while(True):\n        sq = i*i\n        cu = i*i*i\n        if(sq<=n):\n            if(sq not in arr):\n                ans+=1\n                arr.add(sq)\n            if(cu<=n):\n                if(cu not in arr):\n                    ans+=1\n                    arr.add(cu)            \n        else:\n            break\n        i+=1\n    print(ans)\n",
                true
            ],
            [
                "t = int(input())\nwhile(t):\n    t-= 1\n    s = int(input())\n    sq=cub= scu = 0\n    import math\n    sq = math.ceil(s**(1/2))\n    if(sq*sq!=s):\n        sq-= 1\n    cub = math.ceil(s**(1/3))\n    if(cub**3!= s):\n        cub-= 1\n    scu = math.ceil(s**(1/6))\n    if(scu**6!= s):\n        scu-= 1\n    print(sq+cub- scu)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    for i in range(int(n ** .5) + 1):\n        if i * i <= n:\n            ans += 1\n        if i * i * i <= n:\n            ans += 1\n        if i * i * i <= n and int((i * i * i) ** .5) == (i * i * i) ** .5: \n            ans -= 1\n    print(ans - 1)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n  n = int(input())\n  seen = set()\n  for i in range(1, 10 ** 5):\n    if i ** 2 <= n:\n      seen.add(i ** 2)\n    else:\n      break\n    if i ** 3 <= n:\n      seen.add(i ** 3)\n  print(len(seen))",
                true
            ],
            [
                "n = int(input())\nfor _ in range(n):\n    m = int(input())\n    ans = set()\n    ans.add(1)\n    k = 2\n    cube = True\n    while k <= m**(1/2):\n        if k **3 <= m:\n            ans.add(k**3)\n            ans.add(k**2)\n        elif k ** 2 <= m:\n            ans.add(k**2)\n        k += 1\n    print(len(ans))",
                true
            ],
            [
                "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\nimport string\n\nORDA = 97  # a\n\n\ndef ii(): return int(input())\n\n\ndef mi(): return map(int, input().split())\n\n\ndef li(): return list(map(int, input().split()))\n\n\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\n\n\ndef revn(n): return str(n)[::-1]\n\n\ndef dd(): return collections.defaultdict(int)\n\n\ndef ddl(): return collections.defaultdict(list)\n\n\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\n\n\ndef divs(n, start=2):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n // i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\n\n\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\n\n\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\n\n\ndef convn(number, base):\n    new_number = 0\n    while number > 0:\n        new_number += number % base\n        number //= base\n    return new_number\n\n\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\ndef ispal(s):\n    for i in range(len(s) // 2 + 1):\n        if s[i] != s[-i - 1]:\n            return False\n    return True\n\n\nfor _ in range(ii()):\n    n = ii()\n    ans = 0\n    i = 1\n    while i ** 2 <= n:\n        ans += 1\n        i += 1\n    i = 1\n    while i ** 3 <= n:\n        ans += 1\n        i += 1\n    i = 1\n    while i ** 6 <= n:\n        ans -= 1\n        i += 1\n    print(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "import bisect\n#pre\nX = [1]\nfor i in range(40000):\n    for j in range(2,4):\n        if i ** j > 10 ** 9:\n            break\n        X.append(i ** j)\nX = list(set(X))\nX.sort()\nt = int(input())\nfor i in range(t):\n    A = int(input())\n    c = bisect.bisect_right(X,A)\n    print(c-1)\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=int(n**0.5)\n    b=int(n**(1./3))\n    c=int(n**(1/6))\n    if (a+1)**2<=n:\n        a+=1\n    if (b+1)**3<=n:\n        b+=1\n    if (c+1)**6<=n:\n        c+=1\n    print(a+b-c)",
                true
            ],
            [
                "def temp(a, b):\n    counter = 1\n\n    while counter ** a <= b:\n        counter += 1\n    return counter - 1\n\n\ndef b(n):\n    return temp(2, n) + temp(3, n) - temp(6, n)\n\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n\n    print(b(n))\n",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    initialinput = int(input())\n    nums = []\n    cbn = 1\n    sqrn = 2\n    while cbn ** 3 <= initialinput:\n        nums.append(cbn ** 3 )\n        cbn += 1\n    while sqrn ** 2 <= initialinput:\n        nums.append(sqrn ** 2)\n        sqrn += 1\n\n    print(len(set(nums)))\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    result = set()\n    i = 1\n    while i*i <=n:\n        result.add(i*i)\n        i+=1\n    i = 1\n    while i*i*i <=n:\n        result.add(i*i*i)\n        i+=1\n    \n    print(len(result))\n    ",
                true
            ],
            [
                "from decimal import *\n\ngetcontext().prec = 13\n\nfor _ in range(int(input())):\n    n = int(input())\n    print(int(Decimal(n) ** Decimal(0.5)) + int(Decimal(n) ** Decimal((1 / 3))) - int(Decimal(n) ** Decimal(1 / 6)))\n",
                true
            ],
            [
                "squares = set()\nfor i in range(1, int((10**9+1)**.5)+1):\n    squares.add(i**2)\n\ncubes = set()\nfor i in range(1, (int((10**9+1)**(1/3))+1)):\n    cubes.add(i**3)\n\nboth = squares.union(cubes)\nboth = sorted(both)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    for num in both:\n        if num <= n:\n            ans += 1\n        else:\n            break\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n     b = int(input())\n     b = b + 0.99\n     a = int(b **(1/2)) + int(b **(1/3)) - int(b **(1/6))\n     print(a)",
                true
            ],
            [
                "from math import *\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = set()\n    for i in range(1,int(sqrt(n)) + 1):\n        if i ** 2 <= n:\n            ans.add(i ** 2)\n        if i ** 3 <= n:\n            ans.add(i ** 3)\n    print(len(ans))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())+0.5\n    print(int(n**0.5)+int(n**(1/3))-int(n**(1/6)))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n               n = int(input())\n               s = set()\n               for i in range(1,31623):\n                              if(i*i<=n):\n                                             s.add(i*i)               \n                              if(i*i*i<=n):\n                                             s.add(i*i*i)\n               print(len(s))\n                                             ",
                true
            ],
            [
                "\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    seen = set()\n    i = 1\n    while i * i <= n:\n        seen.add(i * i)\n        i += 1\n    i = 1\n    while i * i * i <= n:\n        seen.add(i * i * i)\n        i += 1\n    print(len(seen))\n\n    \n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    m = []\n    i = 0\n    while i**6<=n:\n        m+=[i**6]\n        i+=1\n    k=1\n    for i in range(2,10**5):\n        t = i**2\n        t1 = i**3\n        if t>n:\n            break\n        elif t <= n and t1 > n and t not in m:\n            k+=1\n        elif t <= n and t1 > n and t in m:\n            k+=0\n        elif t1<=n and t in m:\n            k+=1\n        elif t1 <= n and t not in m:\n            k+=2\n    print(k)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    num = int(input())\n    counter = 1\n    numbers = set()\n    while(counter * counter <= num):\n        if counter * counter <= num:\n            numbers.add(counter ** 2)\n        if counter * counter * counter <= num:\n            numbers.add(counter ** 3)\n        counter += 1\n    print(len(numbers))",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    x = int(input())\n    sq = int(x**(1/2) + 0.0000000001)\n    cub = int(x**(1/3) + 0.0000000001)\n    sc = int(x**(1/6) + 0.0000000001)\n    print(sq+cub-sc)",
                true
            ],
            [
                "import bisect\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nx = set()\nfor i in range(1, pow(10, 5)):\n    x.add(i * i)\nfor i in range(1, pow(10, 3) + 5):\n    x.add(i * i * i)\nx = list(x)\nx.sort()\nfor _ in range(t):\n    n = int(input())\n    ans = bisect.bisect_left(x, n + 0.5)\n    print(ans)",
                true
            ],
            [
                "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\n#from decimal import Decimal \n \n#from statistics import mode\n \nfrom itertools import combinations as cb\n \ndef int_arr(): return list(map(int, sys.stdin.readline().strip().split()))\n \ndef str_arr(): return list(map(str, sys.stdin.readline().strip().split()))\n \ndef input(): return sys.stdin.readline().strip()\n \n \n\n\n# sys.stdin = open('Hilbert Hotel/input.txt', 'r')\n# sys.stdout = open('Hilbert Hotel/output.txt', 'w')\n\n\nfor _ in range(int(input())):\n    n=int(input())\n    cnt=0\n    i=1\n    s=set()\n    while True:\n        c=i*i\n        if c<=n:\n            s.add(c)\n        else:\n            break\n        if c*i<=n:\n            s.add(c*i)\n        i+=1\n    print(len(s))\n",
                true
            ],
            [
                "\nimport math\nfor i in range(int(input())):\n  \n  n = int(input())\n  n += 0.0001\n  t = int(n**0.5)\n  v = math.ceil(n**(1/3))\n  r = int(n**0.5)\n \n  print(int(n**(0.5) + int(n**(1/3)) - int(n**(1/6))))",
                true
            ],
            [
                "\nfor _ in range(int(input())): \n    visited = set()\n    n = int(input()) \n    result = 0\n    for i in range(1, int(n**(0.5))+1): \n        \n        if i**2 <= n and i**2 not in visited: \n            visited.add(i**2)\n            result += 1\n        if i**3 <= n and i**3 not in visited: \n            visited.add(i**3)\n            result += 1\n    print(result)",
                true
            ],
            [
                "t = int(input())\n\nEPS = 1e-9\n\nfor i in range(t):\n    n = int(input())\n    print(int(n ** (1 / 2) + EPS) + int(n ** (1 / 3) + EPS) - int(n ** (1 / 6) + EPS))",
                true
            ],
            [
                "import math\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    r=n**(1./3.)\n    s=set()\n    for j in range(1,int(math.sqrt(n)+1)):\n        if j*j<=n:\n            s.add(j*j)\n        if j*j*j<=n:\n            s.add(j*j*j)\n    print(len(s))",
                true
            ],
            [
                "a = int(input())\nfor _ in range(a):\n    s = int(input())\n    h = set()\n    i = f = 1\n    h.add(i)\n    while f <= s:\n        i += 1\n        f = i ** 2\n        if f<=s:\n            h.add(f)\n    i = f = 1\n    while f <= s:\n        i += 1\n        f = i ** 3\n        if f <= s:\n            h.add(f)\n\n    print(len(h))\n",
                true
            ],
            [
                "a = int(input())\nkvadrat = 1\nsp1 = set()\nkub = 1\nfor i in range(a):\n    kvadrat = 1\n    kub = 1\n    sp1.clear()\n    sp1 = set()\n    n = int(input())\n    while kvadrat ** 2 <= n:\n        sp1.add(kvadrat ** 2)\n        kvadrat += 1\n    while kub ** 3 <= n:\n        sp1.add(kub ** 3)\n        kub += 1\n    print(len(sp1))\n    sp1.clear()\n\n",
                true
            ],
            [
                "def root(n,k):\n    lo = 0\n    hi = n + 1\n    while hi - lo > 1:\n        mid = (lo+hi)//2\n        if mid**k > n:\n            hi = mid\n        else:\n            lo = mid\n    return lo\n\nfor _ in range(int(input())):\n    n = int(input())\n    ans = root(n,2)\n    ans += root(n,3)\n    ans -= root(n,6)\n    print(ans)\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nINF = 10 ** 19\n\ndef solve():\n    s = set()\n    n = int(input())\n    for i in range(1, n + 1):\n        if i * i <= n:\n            s.add(i * i)\n        else:\n            break\n    for i in range(1, n + 1):\n        if i * i * i <= n:\n            s.add(i * i * i)\n        else:\n            break\n    print(len(s))\n\n\n\n            \n\nt = int(input())\nfor _ in range(t):\n    solve()",
                true
            ],
            [
                "import math\n\ndef myfloor(a):\n    if (a - math.floor(a)>= 0.999999999):\n        return math.ceil(a)\n    else:\n        return math.floor(a)\ndef find(n):\n    s=0\n    m = myfloor(math.sqrt(n))\n    p = myfloor(n**(1/3))\n    r = myfloor(n**(1/6))\n    s = (m+p-r)\n    print(s)\n\nk = int(input())\nfor i in range(k):\n    n = int(input())\n    find(n)\n    \n",
                true
            ],
            [
                "def nroot(n, x):\n    return x ** (1/float(n))\n\ndef solve():\n    for _ in range(int(input())):\n        x = int(input()) + 0.5\n\n        print(int(nroot(2, x)) + int(nroot(3, x)) - int(nroot(6, x)))\n    \nsolve()\n    \n\n",
                true
            ],
            [
                "import math\n\nt = int(input())\ncount = 0\na = True\nl = set()\nli = []\n\nfor _ in range(0,t):\n    n = int(input())\n    r = int(math.sqrt(n))\n    #print(\"RRRR\", r)\n    for i in range(1,r+1):\n        if i == 1:\n            count += 1\n            l.add(1)\n            continue\n            \n        double_i = i**2\n        if double_i <= n:\n            count += 1\n            l.add(double_i)\n        else:\n            break\n        \n        cube_i = i ** 3\n        if cube_i <= n and a:\n            count += 1\n            l.add(cube_i)\n        else:\n            a = False\n            \n    li.append(len(l))\n    l = set()\n    count = 0\n    a= True\n    \nfor x in li:\n    print(x)\n    \n        ",
                true
            ],
            [
                "s2 = 2\ns3 = 2\na_list = [1]\nwhile a_list[-1]<1e9+1:\n    if s2*s2<s3*s3*s3:\n        a_list.append(s2*s2)\n        s2 += 1\n    elif s2*s2>s3*s3*s3:\n        a_list.append(s3*s3*s3)\n        s3 += 1\n    else:\n        a_list.append(s2*s2)\n        s2 += 1\n        s3 += 1\n\ndef getResult(m):\n    for i in range(len(a_list)):\n        if a_list[i]>m:\n            return i\n\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    print(getResult(m))",
                true
            ],
            [
                "t = int(input())\n\ndef numsquarecube(num):\n    maxsquare = 0\n    while maxsquare ** 2 <= num:\n        maxsquare += 1\n    maxsquare -= 1\n    maxcube = 0\n    while maxcube ** 3 <= num:\n        maxcube += 1\n    maxcube -= 1\n    maxsixth = 0\n    while maxsixth ** 6 <= num:\n        maxsixth += 1\n    maxsixth -= 1\n    return maxsquare + maxcube - maxsixth\n    \nfor i in range(t):\n    n = int(input())\n    print(numsquarecube(n))",
                true
            ],
            [
                "\ndef find_curt(n):\n    c=0\n    for i in range(1,n+1):\n        if(i*i*i<=n):\n            c+=1\n        else:\n            break\n    return c    \n\n\nfor _ in range(int(input())):\n    n=int(input())\n    sr=int(n**(1/2))\n    qr=find_curt(n)\n    ans=0\n    for i in range(2,qr+1):\n        temp=i*i*i\n        t=temp**(1/2)\n        if(t==int(t)):\n            ans+=1\n    print(sr+qr-1-ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input()) + .01\n    # if n > 10: n+=1\n    ans = int(n**(1/2)) + int(n**(1/3)) - int(n**(1/6))\n    # print(n**(1/2), n**(1/3), n**(1/6))\n    print(ans)",
                true
            ],
            [
                "from math import sqrt\n\ndef check(x):\n    rt1 = int(round(x ** (1. / 3)))\n    rt2 = int(round(x ** (1. / 2)))\n    \n   # print (rt1, rt2)\n    \n    if rt1 ** 3 == x and rt2 ** 2 == x:\n        return True\n    \n    return False\n\n#check(64)\n\nfor _ in range(int(input())):\n    N = int(input())\n    \n    ans = 0\n    for i in range(1, int(sqrt(N)) + 4):\n        if i * i <= N:\n            ans += 1\n        if i * i * i <= N:\n            ans += 1\n            \n        if i*i*i <= N and check(i*i*i):\n            ans -= 1\n            \n    print (ans)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    num = int(input())\n\n    if num < 4:\n        print(1)\n    else:\n        kv = int(round(num**0.5, 10))\n        kubs = int(round(num**(1/3), 10))\n        st6 = int(round(num**(1/6), 10))\n\n        print(kv + kubs - st6)\n",
                true
            ],
            [
                "for iq in range(int(input())):\n    n=int(input())\n    kv=1\n    ku=1\n    si=1\n    while kv*kv<=n:\n        kv+=1\n    while ku*ku*ku<=n:\n        ku+=1\n    while si*si*si*si*si*si<=n:\n        si+=1\n    print(kv-1+ku-si)",
                true
            ],
            [
                "\nfor i in range (int(input())):\n    n = int(input())\n\n    ans=[0]\n\n    if n==1:\n        print(1)\n\n    else:\n        for i in range(1,n):\n            if i*i>n:\n                break\n            if i*i<=n:\n                ans.append(i*i)\n            if i*i*i<=n:\n                ans.append(i*i*i)\n\n        print(len(set(ans))-1)\n",
                true
            ],
            [
                "\n\n\nimport math\nfor i in range(int(input())):\n    a = int(input())\n    s = []\n    t = 1\n    po = 1\n    while(t <= a**(1./2)+0.00000001):\n        s.append(t**2)\n        t=t+1\n    while(po <= a ** (1./ 3)+0.00000001):\n        s.append(po**3)\n        po = po+1\n    s= list(dict.fromkeys(s))\n    s.sort()\n    print(len(s))\n    \n",
                true
            ],
            [
                "for ttt in range(int(input())):\n    n=int(input())\n    s=set()\n    i=1 \n    while(i*i<=n):\n        s.add(i*i)\n        i+=1 \n    i=1 \n    while(i*i*i<=n):\n        s.add(i*i*i)\n        i+=1 \n    print(len(s))",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n    a = int(input()) + 0.0001\n    sq = int(a**0.5)\n    cu = int(a**(1/3))\n    s = int(a**(1/6))\n\n    print(sq+cu-s)\n",
                true
            ],
            [
                "import math\nfor i in range(int(input())):\n    n = int(input())\n    a=0\n    b=0\n    c=0\n    for j in range(int(math.sqrt(n)+2)):\n        if (int(j**2)>n) and (a==0):\n            a=j\n        if (int(j**3)>n) and (b==0):\n            b=j\n        if (int(j**6)>n) and (c==0):\n            c=j\n    print(a+b-c-1)",
                true
            ],
            [
                "import math,collections\nfor _ in range(int(input())):\n    n=int(input())\n    g=math.sqrt(n)\n    x=int(g)\n    h=n**(1/3)\n    y=int(h)\n    y+=math.isclose(1,h-y,rel_tol=1e-10)\n    b=collections.defaultdict(int)\n    for k in range(1,y+1):\n        b[k**3]=1\n    c=0\n    for l in range(1,x+1):\n        c+=b[l**2]\n    print(x+y-c)",
                true
            ],
            [
                "from bisect import bisect_right\nall_numbers=set()\nx=1\nwhile x*x<=10**9+1:\n    all_numbers.add(x*x)\n    x+=1\n\nx=1\nwhile x*x*x<=10**9+1:\n    all_numbers.add(x * x*x)\n    x+=1\n\nall_numbers=sorted(list(all_numbers))\n\n\nfor _ in range(int(input())):\n    n=int(input())\n    print(bisect_right(all_numbers,n))",
                true
            ],
            [
                "def squares_cubes(n):\n    lst = []\n    i = 1\n    while i * i <= n:\n        lst.append(i*i)\n        i += 1\n    j = 1\n    while j * j * j <= n:\n        lst.append(j*j*j)\n        j += 1\n    unique_lst = set(lst)\n    print(len(unique_lst))\n\n\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    squares_cubes(n)\n",
                true
            ],
            [
                "for _ in range (int(input())):\n    t=int(input())\n    s1=int(t**(1/2))\n    if (s1+1)**2==t:\n        s1+=1\n    s2=int(t**(1/3))\n    if (s2+1)**3==t:\n        s2+=1\n    s3=int(t**(1/6))\n    if (s3+1)**6==t:\n        s3+=1\n    print(s1+s2-s3)\n",
                true
            ],
            [
                "import math\nfrom typing import List\ndef solve():\n    n = int(input())\n    squrt = math.floor(math.sqrt(n))\n    ans = squrt\n    cubes = 1\n    Set = set()\n    for i in reversed(range(squrt+1)):\n        if (i*i*i) <= n:\n            ans += i\n            cubes = i\n            break\n    while squrt>0:\n        Set.add(squrt*squrt)\n        squrt -= 1\n    while cubes>0:\n        Set.add(cubes*cubes*cubes)\n        cubes -= 1\n    print(len(Set))\n\n    \n    \ncases = int(input())\nfor i in range(cases):\n    solve()",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n     \n    #n,l,r,k = [int(x) for x in input().split()]\n    n = int(input()) \n    z = set()\n    for i in range(1,n+1):\n       if i ** 2 <= n :\n             z.add(i ** 2)\n       else:\n          break\n    \n       if i ** 3 <= n :\n             z.add(i ** 3)\n       \n\n    \n    print(len(z))\n    \n\n\n\n",
                true
            ],
            [
                "s = set()\nfor i in range(1,int(10**4.5)+1):\n    s.add(i**2)\n    if i<=10**(3):\n        s.add(i**3)\nl = list(s)\nl = sorted(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    cnt = 0\n    for e in l:\n        if e<=n:\n            cnt += 1\n        else:\n            break\n    print(cnt)",
                true
            ],
            [
                "for s in[*open(0)][1:]:n=int(s)+.5;print(int(n**.5)+int(n**(1/3))-int(n**(1/6)))",
                true
            ],
            [
                "t = int(input())\nfor e in range(t):\n    n = int(input())\n    summ = 0\n    i = 1\n    #a = []\n    while i * i <= n:\n        summ += 1\n        #a.append(i * i)\n        i += 1\n    j = 1\n    while j * j * j <= n:\n        #if j * j * j not in a:\n        summ += 1\n        j += 1\n    e = 1\n    while e** 6 <= n:\n        summ -= 1\n        e += 1\n    print(summ)",
                true
            ],
            [
                "import math\nt=int(input())\nfor i in range(t):\n  n=int(input())\n  ans=int(math.sqrt(n))\n  count=[]\n  for i in range(1,ans+1):\n    if i*i<=n:\n      count.append(i*i)\n  for i in range(1,ans+1):\n    if i*i*i<=n:\n      count.append(i*i*i)\n  print(len(set(count)))",
                true
            ],
            [
                "t = int(input())\nfor a in range(t):\n    n = int(input())\n    x = set()\n    for i in range(1, n+1):\n        if i**2 > n:\n            break\n        else:\n            x.add(i**2)\n    for i in range(1, n +1):\n        if i ** 3 > n:\n            break\n        else:\n            x.add(i**3)\n    print(len(x))",
                true
            ],
            [
                "import math\nn=int(input())\nfor i in range(n):\n    s=int(input())\n    a=(s**(1/2))\n    b=(s**(1/3))\n    c=(s**(1/6))\n    b1=math.ceil(b)\n    b2=int(b)\n    c1=math.ceil(c)\n    c2=int(c)\n    if(b1**3==s):\n        k=int(a)+b1\n    else:\n        k=int(a)+b2\n    if(c1**6==s):\n        k=k-c1\n    else:\n        k=k-c2\n    print(k)\n",
                true
            ],
            [
                "\n\nn=int(input())\n\nfor i in range(n):\n    num=int(input())\n    j=1\n    \n    arr=[]\n    while(True):\n      if j**2<=num:\n        arr.append(j**2)\n        \n      elif j**2>num:\n        break\n      if j**3<=num:\n        arr.append(j**3)\n        \n      j+=1\n    print(len(set(arr)))\n",
                true
            ],
            [
                "t=int(input())\nimport math\nfor _ in range(t):\n    n=int(input())\n    a=set()\n    for i in range(1,int(math.sqrt(n))+1):\n        a1=i**2\n        a2=i**3\n        #print(a1,a2)\n        if a1<=n:\n            a.add(a1)\n        if a2<=n:\n            a.add(a2)\n    print(len(a))\n            \n",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    n=int(input())\n    p=int(math.sqrt(n))\n    common=0\n    for i in range(2,p+1):\n        if i**6<=n:\n            common+=1\n        else:\n            break\n    q=(n**(1/3))\n    #print(q)\n    ans=p+q-1-common\n    print(int(ans))",
                true
            ],
            [
                "import math\n\nT = int(input())\n\nfor ttt in range(T):\n    dt = {}\n    n = int(input())\n    t = int(math.sqrt(n)) + 1\n    res = 0\n    for i in range(1, t + 1):\n        t1 = i*i\n        if t1 <= n and t1 not in dt:\n            dt[t1] = True\n            res += 1\n        t2 = i*i*i\n        if t2 <= n and t2 not in dt:\n            dt[t2] = True\n            res += 1\n    print(res)",
                true
            ],
            [
                "def run(contest = False):\n  if not contest:\n    import sys\n    sys.stdin = open(\"input\")\n  for _ in range(int(input())):\n    n = int(input())\n    use = 1\n    counter = 0\n    hash = {}\n    while True:\n      if (use) ** 2 <= n and use ** 2 not in hash:\n        counter += 1\n        hash[use ** 2] = None\n      if (use) ** 3 <= n and use ** 3 not in hash:\n        counter += 1\n        hash[use ** 3] = None\n      if (use) ** 2 > n:\n        break\n      use += 1\n    print(counter)\nrun(1)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    s=0\n    for i in range(1,4*10**4+1):\n        if i**2<=n:\n            s+=1\n        else:\n            break\n    for i in range(1,10**3+1):\n        if i**3<=n:\n            s+=1\n        else:\n            break\n    for i in range(1,10**2+1):\n        if i**6<=n:\n            s-=1\n        else:\n            break\n    print(s)",
                true
            ],
            [
                "import math\nt=int(input())\nwhile t>0:\n    n=int(input())\n    li=[]\n    for i in range(1,int(math.sqrt(n)+1)):\n        sq=i**2\n        cb=i**3\n        if sq<=n:\n            li.append(sq)\n        if cb<=n:\n            li.append(cb)\n    print(len(set(li)))\n    t-=1\n        ",
                true
            ],
            [
                "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    \n    if n == 1:\n        print(1)\n    else:\n        res = set()\n        i = 2\n        while i*i <= n:\n            res.add(i*i)\n            if i*i*i <= n:\n                res.add(i*i*i)\n\n            i+=1\n\n        print(len(res)+1)\n\n    t-=1",
                true
            ],
            [
                "from bisect import bisect_right\na = []\ni, j = 1, 1\nwhile i ** 2 <= 10 ** 10 and j ** 3 <= 10 ** 10:\n    if i ** 2 < j ** 3:\n        a.append(i ** 2)\n        i += 1\n    elif i ** 2 > j ** 3:\n        a.append(j ** 3)\n        j += 1\n    else:\n        a.append(j ** 3)\n        i, j = i + 1, j + 1\n# print(a[-10:])\nfor _ in range(int(input())):\n    n = int(input())\n    print(bisect_right(a, n))\n",
                true
            ],
            [
                "def square_cube(n):\n    sq = int(math.sqrt(n)//1)\n\n    qu = int( (n ** (1. / 3)+0.0000000001)//1)\n    six = int( (n ** (1. / 6)+0.0000000001)//1)\n    # print(f\"{sq} {qu} {six}\")\n    return sq + qu - six\n\n\nimport math\nt= int(input())\n\n\nfor _ in range(0,t):\n    n = int(input())\n\n\n    # arr = list(map(int, input().rstrip().split()))\n    response = square_cube(n)\n    print(f\"{response}\")",
                true
            ],
            [
                "t = int(input())\n\nimport math\n\nwhile t != 0:\n    n = int(input())\n\n    sq = int(math.sqrt(n))\n    cub = int(math.pow(n, 1/3))\n    if (cub+1)*(cub+1)*(cub+1) == n:\n        cub += 1\n    # while True:\n    #     x = int(pow(c, 0.5))\n    #     y = int(pow(c, 1/3))\n        \n    #     if x*x == c and sq == None:\n    #         sq = x\n    #     if y*y*y == c and cub == None:\n    #         cub = y\n        \n    #     if (sq != None and cub != None) or c < 1:\n    #         break\n    #     c -= 1\n    if cub == 0:\n        temp = 0\n    else:\n        temp = int(math.sqrt(cub))\n    c = cub\n    # while True:\n    #     x = int(pow(c, 0.5))\n    #     # print(x, c)\n    #     if x*x == c and temp == None:\n    #         temp = x\n    #         break\n        \n    #     c-=1\n    #     if c < 1:\n    #         break\n    # if temp == None:\n    #     temp = 0\n    # print(sq, cub, temp)\n    print(sq+cub-temp)\n    t -= 1",
                true
            ],
            [
                "from math import ceil, log2, floor,sqrt,gcd\nfrom collections import defaultdict,deque\nfrom bisect import bisect_left\nimport sys\nimport os.path\nfrom itertools import permutations\nsys.setrecursionlimit(200000)\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r+\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\n\n# input = sys.stdin.readline\n# print=sys.stdout.write\ndef MI():\n    return map(int, input().split())\n\nmod=10**9+7\n\n\n\ndef solve(testcase):\n    n = int(input())\n    # a=list(MI())\n    ans=0\n    d=defaultdict(bool)\n    for i in range(1,int(n**(1/2))+1):\n        # print(i)\n        a=i**2\n        b=i**3\n        if d[a]==False and a<=n:\n            ans+=1\n            d[a]=True\n        if d[b]==False and b<=n:\n            ans+=1\n            d[b]=True\n\n       \n    print(ans)\n    \n\n\n    \n    \n    \nt=int(input())\n# t=1\nfor _ in range(t):\n    solve(_+1)\n\n",
                true
            ],
            [
                "from math import sqrt\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = int(n**0.5)\n    b = int(n**0.3333333333334)\n    c = int(n**0.1666666666667)\n    print(a+b-c)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=1\n    b=1\n    c=1\n    ans=0\n    while a**2<=n:\n        ans+=1\n        a+=1\n    while b**3<=n:\n        ans+=1\n        b+=1\n    while c**6<=n:\n        ans-=1\n        c+=1\n    print(ans)\n",
                true
            ],
            [
                "import math\nn=int(input())\nfor x in range(0,n):\n    mylist=[]\n    num=int(input())\n    i=1\n    while i**2<=num:\n        mylist.append(i**2)\n        i+=1\n        \n    j=1\n    while j**3<=num:\n        if int(math.sqrt(j**3))**2!=j**3:\n            mylist.append(j**3)\n        j+=1\n            \n    print(len(mylist))",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    s  =set()\n    i = 1\n    while(i*i<=n):\n        s.add(i*i)\n        i+=1\n    j = 1\n    while(j*j*j<=n):\n        s.add(j*j*j)\n        j+=1\n    print(len(s))",
                true
            ],
            [
                "def sq_cub(n):\n    store = set()\n    x = int(n**(1/2))\n    for i in range(1,x+1):\n        square = i**2\n        if square <= n:\n            store.add(square)\n    for i in range(1,x+1):\n        cube = i**3\n        if cube <= n:\n            store.add(cube)\n    \n    return len(store)\n\nt = int(input())\nwhile t>0:\n    y = int(input())\n    print(sq_cub(y))\n    t-=1\n",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    initialinput = int(input())\n    counter = 0\n    cbn = 1\n    sqrn = 2\n    while cbn ** 3 <= initialinput:\n        counter += 1\n        cbn += 1\n    while sqrn ** 2 <= initialinput:\n        counter += 1\n        sqrn += 1\n\n    sqrn = 1\n    while sqrn ** 6 <= initialinput:\n        counter -= 1\n        sqrn += 1\n\n    print(counter+1)\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    c2=0\n    c3=0\n    c6=0\n    for j in range(1,int(n**(0.5))+1):\n        if j**2<=n:\n            c2+=1\n    for j in range(1,int(n**(1/3))+2):\n        if j**3<=n:\n            c3+=1\n    for j in range(1,int(n**(1/6))+2):\n        if j**6<=n:\n            c6+=1\n    print(c2+c3-c6)",
                true
            ],
            [
                "n=int(input())\na=[]\nfor i in range(n):\n    x=int(input())\n    y=int(pow(x,.5))\n    z=int(pow(x,1/3))\n    r=0\n    b=0\n    if((z+1)**3==x):\n        r=1\n        \n    c=int(pow(x,1/6))\n    if((c+1)**6==x):\n        b=-1\n    a.append(y+z-c+r+b)\n    \nfor i in range(n):\n    print(a[i])",
                true
            ],
            [
                "n=int(input())\nfor k in range(n):\n    t=int(input())\n    s=set()\n    for i in range(1,int(t**0.5)+1):\n        if i*i<=t:\n            s.add(i*i)\n        if i*i*i<=t:\n            s.add(i*i*i)\n    print(len(s))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    j=1\n    l1=[]\n    while(j**2<=n):\n        l1.append(j**2)\n        j=j+1\n    j=1\n    while(j**3<=n):\n        l1.append(j**3)\n        j=j+1\n    print(len(set(l1)))\n    \n    ",
                true
            ],
            [
                "import sys\nimport os.path\n \nif(os.path.exists('input.txt')) :\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    sys.stderr = open(\"error.txt\", \"w\")\n    \ndepth = 200001\nmod = 1000000007 \nlim = mod * mod\nsys.setrecursionlimit(depth) \n \nlinp = lambda: list(minp())\nminp = lambda: map(int, input().split())\n \nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\n\ndxy = [(1, 0),(-1, 0),(0, 1),(0, -1)]\n\ndef expo(a, b) :\n    if not b : return 1\n    v = expo(a, b//2)\n    v = (v * v) % mod\n    if b%2 : v = (v * a) % mod\n    return v\n\ndef modinv(a, b) :\n    d = expo(b, mod-2)\n    v = (a * d) % mod\n    return v\n\ndef checkPrime(n) :\n    if n < 4 : return True\n    if n%2 == 0 : return False\n    for i in range(3, int(sqrt(n))+1, 2) :\n        if n%i == 0 :\n            return False\n    return True    \n\ndef highestPowerof2(x):\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n\n    return x ^ (x >> 1)\n\nfor _ in range(int(input())) :\n    n = int(input())\n    s, i = set(), 1\n    while i*i <= n :\n        s.add(i*i)\n        i += 1\n    i = 1\n    while i*i*i <= n :\n        s.add(i*i*i)\n        i += 1\n    print(len(s))",
                true
            ],
            [
                "import math\nt = int(input())\nl = []\nfor i in range (0,t):\n    l.append(int(input()))\nfor i in range (0,t):\n        sq = l[i]**0.5\n        sq = math.floor(sq)\n        if (sq+1)**2 <= l[i]:\n            sq = sq + 1\n        cb = l[i]**(1/3)\n        cb = math.floor(cb)\n        if (cb+1)**3 <= l[i]:\n            cb = cb + 1\n        sr = l[i]**(1/6)\n        sr = math.floor(sr)\n        if (sr+1)**6 <= l[i]:\n            sr = sr + 1\n        print(sq+cb-sr)\n\n",
                true
            ],
            [
                "from __future__ import unicode_literals\nfrom __future__ import print_function\nimport time\nimport math\nimport random\ndef func():\n    m=1000000000\n    j=63\n    while (j<m):\n        num1=j**(1/2)\n        num2=j**(1/3)\n        if (isint(num1)==True and isint(num2)==True):\n            print(j)\n        j+=1\ndef isint(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n#main\n#func()\na= int(input())\ni=0\nwhile i<a:\n    j=0\n    chislo=int(input())\n    slag1=chislo**(1/2)\n    slag1+=0.000000000001\n    slag2=pow(chislo,(1/3))\n    slag2 += 0.000000000001\n    vich=chislo**(1/6)\n    vich += 0.000000000001\n    vich=int(vich)\n    slag1=int(slag1)\n    slag2=int(slag2)\n    answer=slag1+slag2-vich\n    print(answer)\n    i+=1#end of cycl",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    seen = set()\n    for i in range(1, n+1):\n        d = i * i\n        if d > n: break\n        seen.add(d)\n    for i in range(1, n+1):\n        d = i * i * i\n        if d > n: break\n        seen.add(d)\n    print(len(seen))\n    \nt = int(input())\nfor _ in range(t):\n    solve()",
                true
            ],
            [
                "import math\ndef duplicateCubes():\n    list1 = [0]*1002\n    count = 0\n    \n    for i in range(1,1001):\n        num = i**3\n        num = math.sqrt(num)  \n        num = num - int(num)\n        if(num == 0):\n            count += 1\n        list1[i+1] = count \n    return list1\n\ndef Calc(n, list1):\n    sr = int(math.sqrt(n))  #squares\n    cr = int(n ** (1/3) + 10e-8) #cubes  \n    count = list1[cr+1]\n    result = sr + cr - count\n    #print(sr,cr,count)\n    return result \n\nif __name__ == '__main__':\n    t = int(input())  #no. of test cases\n    array = duplicateCubes()    #list\n    for i in range(t):\n        n = int(input())   \n        result = Calc(n, array)\n        print(result)\n\n# 6\n# 10\n# 1\n# 25\n# 1000000000\n# 999999999\n# 500000000\n",
                true
            ],
            [
                "for _ in range(int(input())) :\n    n = int(input())\n    s = set()\n    for i in range(n+1) :\n        if i*i > n :\n            break\n        s.add(i*i)\n    for i in range (n+1) :\n        if i*i*i > n :\n            break\n        s.add(i*i*i)\n    s.remove(0)\n    print(len(s))",
                true
            ],
            [
                "import sys\nI=lambda:[*map(int,sys.stdin.readline().split())]\n\nt,=I()\nfor _ in range(t):\n    n, = I()\n    sq = int(n**0.5+.00000000001)\n    cb = int(n**(1/3)+.00000000001)\n    six = int(n**(1/6)+.00000000001)\n    print(sq+cb-six)",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    c = int(input())\n    count = set()\n    for k in range(c + 1):\n        l = k ** 2\n        if k ** 2 > c:\n            break\n        count.add(l)\n    for k in range(c + 1):\n        l = k ** 3\n        if k ** 3 > c:\n            break\n        count.add(l)\n    print(len(count) - 1)",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nShohag has an integer sequence a_1, a_2, \u2026, a_n. He can perform the following operation any number of times (possibly, zero):\n\n  * Select any positive integer k (it can be different in different operations). \n  * Choose any position in the sequence (possibly the beginning or end of the sequence, or in between any two elements) and insert k into the sequence at this position. \n  * This way, the sequence a changes, and the next operation is performed on this changed sequence. \n\n\n\nFor example, if a=[3,3,4] and he selects k = 2, then after the operation he can obtain one of the sequences [\\underline{2},3,3,4], [3,\\underline{2},3,4], [3,3,\\underline{2},4], or [3,3,4,\\underline{2}].\n\nShohag wants this sequence to satisfy the following condition: for each 1 \u2264 i \u2264 |a|, a_i \u2264 i. Here, |a| denotes the size of a.\n\nHelp him to find the minimum number of operations that he has to perform to achieve this goal. We can show that under the constraints of the problem it's always possible to achieve this goal in a finite number of operations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 200) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 100) \u2014 the initial length of the sequence.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) \u2014 the elements of the sequence.\n\nOutput\n\nFor each test case, print a single integer \u2014 the minimum number of operations needed to perform to achieve the goal mentioned in the statement.\n\nExample\n\nInput\n\n\n4\n3\n1 3 4\n5\n1 2 5 7 4\n1\n1\n3\n69 6969 696969\n\n\nOutput\n\n\n1\n3\n0\n696966\n\nNote\n\nIn the first test case, we have to perform at least one operation, as a_2=3>2. We can perform the operation [1, 3, 4] \u2192 [1, \\underline{2}, 3, 4] (the newly inserted element is underlined), now the condition is satisfied.\n\nIn the second test case, Shohag can perform the following operations:\n\n[1, 2, 5, 7, 4] \u2192 [1, 2, \\underline{3}, 5, 7, 4] \u2192 [1, 2, 3, \\underline{4}, 5, 7, 4] \u2192 [1, 2, 3, 4, 5, \\underline{3}, 7, 4].\n\nIn the third test case, the sequence already satisfies the condition.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    r = 0\n    for i in range(n):\n        r = max(r, s[i] - i - 1)\n    print(r)\n",
                true
            ],
            [
                "#  map(int, input().split())\n#  list(map(int, input().split()))\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mini = 0\n    ind = 1\n    for i in a:\n        if i <= ind:\n            ind += 1\n        else:\n            mini += (i - ind)\n            ind += ((i - ind) + 1)\n    print(mini)",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    x = sorted(A)\n    edx = 0\n    for i in x:\n        pos = (A.index(i)) + 1\n        \n        if pos + edx  <i:\n            edx += (i-pos-edx)\n    print(edx)",
                true
            ],
            [
                "n = 0; t = 0; N = [] \nt = int(input())\n\nfor w in range(t):\n    n = int(input())\n    N = list(map(int, input().split()))\n\n    counter = 0\n    minus = 0\n    old = 0\n    for i in range(n):\n        if N[i] > old + minus:\n            counter += N[i] - old - 1 - minus\n            minus = 0\n            old = N[i]\n        else:\n            minus += 1\n    \n    print(counter)",
                true
            ],
            [
                "for __ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    ans = 0\n    kek = 1\n    for elem in ar:\n        if elem > kek:\n            ans += elem - kek\n            kek = elem\n        kek += 1\n    print(ans)",
                true
            ],
            [
                "t=int(input())\nwhile(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    m=10000000000\n    for i in range(1,n+1):\n        m=min(i-l[i-1],m)\n    print(abs(m))\n    t-=1",
                true
            ],
            [
                "t = int(input())\nfor qwer in range(t):\n    n = int(input())\n    stro = list(map(int, input().split()))\n    sp = stro\n    i = 1\n    s = 0\n    while i <= len(stro):\n        if i == 1 and i < stro[0]:\n            s += stro[0] - 1\n        elif i < stro[i - 1] - s:\n            s += stro[i - 1] - i - s\n        i += 1\n    print(s)",
                true
            ],
            [
                "##\n##  752A.py\n##\n##\n##  Created by hioshiray on 30.10.2021.\n##\n\nfor cases in range(int(input())):\n    len_of_seq=int(input())\n    elements_of_seq=list(map(int,input().split()))\n    answer = 0\n    for i in range(len_of_seq):\n        if elements_of_seq[i]<=i+1+answer:\n            continue\n        else:\n            answer += elements_of_seq[i]-(i+1+answer)\n    print(answer)\n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if a[i] > i + 1 + ans:\n            ans += a[i] - i - 1 - ans\n    print(ans)\n",
                true
            ],
            [
                "t = eval(input())\nwhile t:\n    t -= 1\n    n = eval(input())\n    int_list = input().split()\n    moves = []\n    for i in range(len(int_list)):\n        int_list[i] = int(int_list[i])\n        if int_list[i] > i:\n            moves.append(int_list[i]-i)\n    if len(moves)>0:\n        print((max(moves)-1))\n    else:\n        print((0))\n\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    res=[]\n    l=[int(x) for x in input().split()]\n    for i in range(1,n+1):\n        ans=l[i-1]-i\n        res.append(ans)\n    if len(res)!=0:\n        print(max(res))\n    else:\n        print(0)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    ans = 0\n    for i in range(n):\n        ans = max(ans, a[i]-i-1)\n    print(ans)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    res = 0\n    for j in range(n):\n        if a[j]>j+1+res:\n            res+=(a[j]-(j+1+res))\n    print(res)   \n            \n",
                true
            ],
            [
                "# import template\nimport math\nfrom itertools import combinations as cm\ndef gcd(a,b):\n    if b==0 :\n        return a\n    if a >b:\n        a,b = b,a\n    \n    return gcd(a , b%a)\ndef isPrime(x):\n    i = 2\n    while i*i <= x:\n        if x%i == 0:\n            return False\n        i +=1\n    return True\n\ndef solve():\n    n = inp()\n    a = inl()\n    j =1\n    ans = 0\n    for i in range(n):\n        if a[i]<=j:\n            j+=1\n            continue\n        else:\n            ans += a[i] - j\n            j += (a[i] - j) + 1\n    print(ans)\n\n        \n\n\ndef inl():\n    return [int(i) for i in input().split()]\ndef inp():\n    return int(input())\n\nif __name__ == '__main__':\n    t = 1\n    t = inp()\n    while t:\n        solve()\n        t-=1",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    # n, k = map(int, input().split())\n    input_arr= list(map(int, input().split()))\n    # output_arr =[]\n    res=0\n    for i in range(len(input_arr)):\n        # print(i, input_arr[i])\n        if i+1 < input_arr[i]:\n            pio= abs(input_arr[i]- (i+1))\n            if pio > res:\n                res= pio\n    print(res)",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n    count = 0\n    k = 0\n\n    lench = int(input())\n\n    chisla = list(map(int, input().split()))\n\n    for l in range(lench):\n        k += 1\n\n        if chisla[l] > k:\n            count += chisla[l] - k\n            k += chisla[l] - k\n        \n    print(count)",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    A=[int(k) for k in input().split()]\n    b=0\n    for k in range(n):\n        if A[k]>b+k+1:\n            \n            b=A[k]-k-1\n    print(b)        \n\n    \n",
                true
            ],
            [
                "t = int(input())\nfor q in range(0, t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    res = arr[0] - 1\n\n    for i in range(1, n):\n        if(arr[i] <= arr[i - 1]):\n            arr[i] = arr[i - 1] + 1\n        else:\n            res += (arr[i] - arr[i - 1] - 1)\n\n    print(res)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int,input().split()))\n    ans = 0\n    for i in range(n):\n        the = l[i] - (i+1)\n        if the > ans:\n            ans = the\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int,input().split()))\n    \n    ans = 0\n    \n    for i in range(n):\n        ans = max(ans, A[i]-i-1)\n        \n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    curr=0\n    ans=0\n    for i in range(n):\n        if a[i]>(i+1)+curr:\n            ans+=a[i]-curr-i-1\n            curr+=a[i]-curr-i-1\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    maxDiff = 0\n    for i in range(1, len(a) + 1):\n        diff = a[i - 1] - i\n        if diff > 0 and diff > maxDiff:\n            maxDiff = diff\n    print(maxDiff)\n\n",
                true
            ],
            [
                "for T in range(int (input())):\n    N = int(input())\n    a = [int(p) for p in input().split()]\n\n    ans = 0\n    final_pos = 0\n\n    for i in range(len(a)):\n        if a[i] > final_pos + 1:\n            padding_req = a[i] - final_pos - 1\n            ans += padding_req\n            final_pos += padding_req\n        final_pos += 1\n\n    print (ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    ans=0\n    for i in range(n):\n        if((a[i]-i-1)>ans):\n            ans+=abs(a[i]-ans-i-1)\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=int(input())\n    l=list(map(int,input().split()))\n    p,j,k=1,0,0\n    while j!=s:\n        if l[j]>(p):\n            p+=(l[j]-p-1)\n            k=1\n        j+=1\n        p+=1\n    if k!=1 and p==s+1:\n        print(0)\n    else:\n        print(p-s)",
                true
            ],
            [
                "import sys,math\n#sys.stdin=open('input.txt','r')\n#sys.stdout=open('output.txt','w')\n\n\n\n\ndef solve():\n    n=int(input())\n    l=list(map(int,input().split()))\n    #count=0\n    i=0\n    ans=0\n    for i in range(1,len(l)+1):\n        #print(l[i-1],i)\n        ans=max(ans,l[i-1]-i)\n    print(ans)\n\n\n\n\nt=int(input())\nwhile(t!=0):\n    solve()\n    t-=1\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(k) for k in input().split()]\n    k = 0\n    for j in range(len(a)):\n        if a[j] > j + 1:\n            k = max(k, a[j] - j - 1)\n    print(k)\n",
                true
            ],
            [
                "import sys\n\ninp = sys.stdin.readline\n\n\ndef solve():\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    r = 0\n    for i in range(n):\n        r = max(r, a[i] - (i + 1))\n    print(r)\n\n\ndef main():\n    for i in range(int(inp())):\n        solve()\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "t = int(input())\nfor j in range(t):\n    n = int(input())\n    l = list(map(int,input().split()))\n    f = 0\n    ans=0\n    for i in range(n):\n        if l[i]<=f+1:\n            f=f+1\n            continue\n\n        if l[i]>f:\n            ans+=l[i]-f-1\n            f=l[i]\n\n\n    print(ans)",
                true
            ],
            [
                "tests = input()\nfor test in range(int(tests)):\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    print(max(b[x]-x-1 for x in range(len(b))))\n",
                true
            ],
            [
                "    #from _typeshed import SupportsKeysAndGetItem\nimport sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\n# sys.stdin=open(\"input.txt\",\"r\");\n# sys.stdout=open(\"output.txt\",\"w\")\n####### GLOBAL ###############\nMOD=1000000007\nNO=lambda:print(\"NO\")\nYES=lambda:print(\"YES\")\n_1=lambda:print(-1)\nari=lambda:[int(_) for _ in input().split()]\ncin=lambda:int(input())\ncis=lambda:input()\nshow=lambda x: print(x)\nfast= lambda:sys.stdin.readline()\n\n########### END #########\n######\ntest_case=1\ntest_case=int(input())\n######\nsys.setrecursionlimit(10**6)\n    \ndef ans():\n    n=cin()\n    arr=ari()\n    count=0\n    intail=1\n    # arr.sort()\n    for i  in range(n):\n        if arr[i]>intail:\n            dist=abs(intail-arr[i])\n            count+=dist\n            intail+=dist+1\n        else:\n            intail+=1\n    print(count)\n    return\n\nfor _ in range(test_case):\n    ans()\n    ",
                true
            ],
            [
                "'''Author- Akshit Monga'''\nfrom sys import stdin, stdout\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    n=int(input())\n    a=[int(x) for x in input().split()]\n    ans=0\n    for i in range(n):\n        if a[i]>=i+1:\n            ans=max(ans,a[i]-1-i)\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    prev,ans=0,0\n    for i in range(n):\n        if l[i]>prev+1:\n            ans+=l[i]-1-prev\n            prev=l[i]\n        else:\n            prev+=1\n    print(ans)",
                true
            ],
            [
                "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\ninteractive = False\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\n\nflush = sys.stdout.flush\nif interactive and not testing:\n    input = sys.stdin.readline\nelse:\n    inputData = InputData()\n    input = inputData.input\n\ndef intin():\n    return(int(eval(input())))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(eval(input())))\ndef strin():\n    return eval(input())\ndef lout(l, sep=\"\\n\", toStr=True):\n    print((sep.join(list(map(str, l)) if toStr else l)))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print((args[0] if len(args)==1 else args))\n    if kargs: print([(k,v) for k,v in list(kargs.items())])\ndef ask(q):\n    sys.stdout.write(str(q)+'\\n')\n    flush()\n    return intin()\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\n\ndef main():\n    n = intin()\n    a = intlin()\n    ans = 0\n    for i in range(n):\n        if a[i] > ans+(i+1):\n            ans += a[i] - ans - (i+1)\n    return ans\n\nanss = []\nfor _ in range(intin()):\n    anss.append(main())\n    # anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print((int(round(time() * 1000))  - start_time))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    k, ind = 0, 0\n    for j in range(n):\n        if A[j] > ind + 1:\n            k += (A[j] - ind - 1)\n            ind += (A[j] - ind - 1)\n        ind += 1\n    print(k)",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby, accumulate\nfrom copy import deepcopy\nMOD = 10**9+7\nINF = float('inf')\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n    n = int(input())\n    A = rl()\n    res = 0\n    for i, a in enumerate(A):\n        res = max(res, a - (i+1))\n\n    print(res)",
                true
            ],
            [
                "'''input\n4\n3\n1 3 4\n5\n1 2 5 7 4\n1\n1\n3\n69 6969 696969\n\n\n'''\n\n\n\n\n \nfrom bisect import bisect_right as bl\nfrom random import randint as R\nRI = lambda : [int(_x) for _x in input().split()]\n\nimport sys\n\n\nfor _ in range(eval(input())):\n    \n\n    n = eval(input())\n    A = RI()\n    ans =  0\n    for i in range(n):\n        ans = max(ans, A[i] - i - 1)\n    print(ans)\n",
                true
            ],
            [
                "# your code goes here\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    \n    index = 1\n    c = 0\n    for i in range(n):\n        \n        if l[i]>index:\n            c = c + (l[i] - index)\n            a = l[i] - index\n            index = index +(l[i] - index)\n            #print(l[i], index)\n        index = index + 1\n    print(c)\n            \n            \n        \n        ",
                true
            ],
            [
                "from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    T = int(input())\n    for _ in [0] * T:\n        N = int(input())\n        A = list(map(int, input().split()))\n\n        ans, i = 0, 1\n        for a in A:\n            if a > i:\n                ans += a - i\n                i = a\n            i += 1\n        print(ans)\n\n\nmain()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    li=list(map(int,input().split()))\n    a=0 \n    for i in range(n):\n        a=max(a,li[i]-i-1)\n    print(a)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    ans=0\n    for i in range(n):\n        x = l[i]-ans-i-1\n        ans = max(ans, ans+x)\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    count = 0\n    for i in range(1, n+1):\n        if a[i-1] <= i+count:\n            continue\n        count += (a[i-1]-(i+count))\n    print(count)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    ans = 0\n    ind = 1\n    for i in range(n):\n        if arr[i]<=ind:\n            ind+=1\n        else:\n            ans+=(arr[i]-ind)\n            ind = arr[i]+1\n    print(ans)\n",
                true
            ],
            [
                "from math import gcd, sqrt\nfrom sys import stdin,stdout\nfrom collections import Counter, deque\nfrom bisect import bisect_left,bisect_right\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    count= 0\n    for i in range(len(l)):\n        if l[i]>(i+count):\n            count+= l[i]-i-count-1\n    print(count)",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    ans=0\n    tmp=1\n    for i in range(n):\n        if a[i]<=tmp:\n            tmp+=1\n        else:\n            ans+=(a[i]-tmp)\n            tmp=a[i]+1\n    print(ans)",
                true
            ],
            [
                "import sys, math\ninput = sys.stdin.readline\n\nn = int(input())\n\n# l = list(map(int,input().split()))\n\n# m = map(int,input().split())\n\nfor i in range(n):\n    x = int(input())\n    l = list(map(int,input().split()))\n    ans = 0\n    for i in range(x):\n        if l[i]>i+ans:\n            ans += l[i]-i-ans\n    print(ans-1)",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\n#sys.setrecursionlimit(10**7)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\n#Fenwick Tree point update range sum\ndef update_it(bit,i,val):\n    n=len(bit)\n    while(i<n):\n        bit[i]+=val\n        i+=i&(-i)\ndef get_ans(bit,i):\n    n=len(bit)\n    tot=0\n    while(i>0):\n        tot+=bit[i]\n        i-=i&(-i)\n    return tot\ndef hnbhai(tc):\n    n=sb()\n    a=sd()\n    x=0\n    tot=0\n    for i in range(n):\n        if i+x+1<a[i]:\n            x+=a[i]-i-x-1\n    print(x)\n    return\nfor _ in range(sb()):\n    hnbhai(_+1)\n",
                true
            ],
            [
                "import math\nfrom collections import defaultdict, Counter\nfrom bisect import bisect_left\nfrom sys import stdin\nfrom math import gcd\nfrom functools import reduce\nimport itertools\n\n\ndef find():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if a[i] <= i+ans+1:\n            continue\n        else:\n            ans = a[i] - i - 1\n    print(ans)\n\ninput = stdin.readline\n# a = list(map(int, input().split()))\n\nt = int(input())\nfor _ in range(t):\n    find()\n    ",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    s=l.copy()\n    s.sort()\n    # print(s,l)\n    \n    c=[]\n    c=[]\n\n    op=0\n\n    for i in range(n):\n        c.append(l[i]-(i+1))\n\n    print(max(c))    \n\n\n    # print('over')        \n    # print(op)        \n    \n\n\n            \n\n\n\n\n\n            \n",
                true
            ],
            [
                "import copy\nimport math\n\nfin = None\nfout = None\nuabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\n         'W', 'X', 'Y', 'Z']\nabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\n        'w', 'x', 'y', 'z']\nINF = 10 ** 18\n\n\ndef start(filename):\n    filename = filename.replace('.py', '')\n    global fin\n    global fout\n    infile = filename + \".in\"\n    outfile = filename + \".out\"\n    fin = open(infile)\n    fout = open(outfile, \"w\")\n\n\ndef permutation(lst):\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst]\n    l = []\n    for i in range(len(lst)):\n        m = lst[i]\n        remLst = lst[:i] + lst[i + 1:]\n        for p in permutation(remLst):\n            l.append([m] + p)\n    return l\n\n\ndef subsets(x):\n    retset = []\n    if len(x) == 0:\n        retset = [[]]\n    else:\n        first = x[-1]\n        cop = x.copy()\n        cop.remove(first)\n        y = subsets(cop)\n        retset.extend(copy.deepcopy(y))\n        m = copy.deepcopy(y)\n        for i in range(len(y)):\n            k = m[0]\n            m.remove(k)\n            k.append(first)\n            m.append(k)\n        retset.extend(m.copy())\n    return retset\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return str(self.x) + str(self.y)\n\n    def __hash__(self):\n        return hash(str(self))\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n\nclass frac:\n    def __init__(self, n, d):\n        self.n = n\n        self.d = d\n\n    def __str__(self):\n        return str(self.n) + '/' + str(self.d)\n\n    def __hash__(self):\n        return hash(str(self))\n\n    def simp(self):\n        div = math.gcd(self.n, self.d)\n        self.n = self.n / div\n        self.d = self.d / div\n\n    def __eq__(self, other):\n        return self.n / self.d == other.n / other.d\n\n    def __lt__(self, other):\n        return self.n / self.d < other.n / other.d\n\n\nclass Interval:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\n    def __str__(self):\n        return str(self.start) + str(self.end)\n\n    def __hash__(self):\n        return hash(str(self))\n\n    def __eq__(self, other):\n        return self.start == other.start and self.end == other.end\n\n    def __lt__(self, other):\n        return self.start < other.start\n\n\ndef overlap(verl1, verl2):\n    if verl1.end >= verl2.start:\n        return True\n    else:\n        return False\n\n\ndef merge(verl1, verl2):\n    retverl = Interval(min(verl1.start, verl2.start), max(verl1.end, verl2.end))\n    return retverl\n\n\ndef changeBase(num, base):\n    if base == 2:\n        return \"{0:b}\".format(num)\n    power = math.floor(math.log(num, base))\n    remainder = num\n    end = []\n    iter = list(range(power + 1))\n    iter.reverse()\n    for i in iter:\n        if remainder >= base ** i:\n            q, r = divmod(remainder, base ** i)\n            end.append(q)\n            remainder = r\n        else:\n            end.append(0)\n    retlist = []\n    for i in end:\n        if i > 9:\n            retlist.append(uabet[i - 10])\n        else:\n            retlist.append(i)\n    retlist = map(str, retlist)\n    return ''.join(retlist)\n\n\ndef prime(num):\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(2, math.ceil(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef solve(n,a):\n    t = 0\n    for i in range(n):\n        if a[i]-(i+1+t)>0:\n            t+=a[i]-(i+1+t)\n    return t\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int,input().split(' ')))\n        print(solve(n,a))\n\n\nmain()\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    x=0\n    for i in range(n):\n        if(a[i]>i):\n            x=max(x,a[i]-i-1)\n    print(x)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input());ans=[]\n    l=list(map(int,input().split()))\n    for i in range(len(l)):\n        if l[i]>i:\n            ans.append(l[i]-(l.index(l[i])+1))\n    print(max(ans))\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(0,t):\n    n=int(input())\n    arr=[int(x) for x in input().split()]\n    maxi=[]\n    for j in range(0,n):\n        maxi.append(arr[j]-(j+1))\n    print(max(maxi))    ",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    l=list(map(int,input().split()[:n]))\n    s,c=0,l[0]\n    if(l[0]>1):\n        s=l[0]-1\n    m=l[0]\n    i=1\n    while(i<n):\n        m=max(l[i],c+1)\n        if(m>c+1):\n            s+=m-(c+1);\n            c=m-1\n        i+=1\n        c+=1\n    print(s)",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    maxi = 0\n    for j in range(len(a)):\n        maxi = max(maxi, (a[j]-1-j))\n    print(maxi)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    m=0\n    d=0\n    for i in range(n):\n        d=a[i]-(i+1)\n        if(m<d):\n            m=d\n    print(m)",
                true
            ],
            [
                "import sys\n\nIS_INTERACTIVE = False\ninput = input  # type: ignore\n\n# input: function\nif not IS_INTERACTIVE:\n    *data, = sys.stdin.read().split(\"\\n\")[::-1]\n\n    def input():  # type: ignore\n        return data.pop()\n\ndef fprint(*args, **kwargs):\n    print(*args, **kwargs, flush=True)\n\ndef eprint(*args, **kwargs):\n    print(*args, **kwargs, file=sys.stderr)\n\nfor _ in range(int(input())):\n    n = int(input())\n    *arr, = map(int, input().split())\n    cnt = 0\n    mx = max(v - i for i, v in enumerate(arr, 1))\n    print(mx)\n",
                true
            ],
            [
                "\nfrom collections import deque, defaultdict\nimport time\nfrom math import sqrt, ceil, factorial, floor, inf, log2, sqrt, gcd\nimport bisect\nimport copy\nfrom itertools import combinations\nimport sys\nimport heapq\n\n\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\n\n\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\n\n\ndef input(): return sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n        n=int(input())\n        a=get_array()\n\n        cnt=0\n        for i in range(1,n+1):\n            if a[i-1]>i+cnt:\n                cnt+=max(0,(a[i-1]-i-cnt))\n\n        print(cnt)",
                true
            ],
            [
                "tt=1\ntt=int(input())\nfor _ in range (tt):\n    n=int(input())\n    #n,k=map(int,input().split())\n    a=list(map(int,input().split()))\n    #b=list(map(int,input().split()))\n    #s=input()\n    #n=len(s)\n    ans=0\n    pos=1\n    for i in range (n):\n        if a[i]>pos:\n            ans+=a[i]-pos\n            pos=a[i]\n        pos+=1\n    print(ans)",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    now  = 0\n    arr = list(map(int, input().split()))\n    ind = n\n    while(ind>0):\n        ni = arr.index(max(arr[:ind]))\n        now+=max(max(arr[:ind])-(ni+1+now),0)\n        ind = arr.index(max(arr[:ind]))\n    print(now)",
                true
            ],
            [
                "#!/usr/local/bin/python3\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    offset = 0\n    for i, num in enumerate(arr):\n        size = i + 1 + offset\n        if num > size:\n            offset += num - size\n    print(offset)\n",
                true
            ],
            [
                "c=int(input())\nans=[]\nfor i in range(c):\n    l=int(input())\n    m=list(map(int,input().split()))\n    min1=0\n    for j in range(l):\n        if m[j]>j+1:\n            min1=max(min1,m[j]-j-1)\n    ans.append(min1)\nprint(*ans,sep='\\n')\n    \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    ms = list(map(int, input().split()))\n    answer = 0\n    now = 1\n    delta = 0\n    for i in range(n):\n        if now >= ms[i]:\n            now += 1\n        else:\n            delta = ms[i] - now\n            answer += delta\n            now += delta + 1\n    print(answer)\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(s) for s in input().split()]\n    j = 0\n    for i in range(n):\n        if j < a[i]:\n            j = a[i]\n        else:\n            j += 1\n    print(j - n)\n\n\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ndef iinput(): return int(input())\ndef sinput(): return input().rstrip()\ndef i0input(): return int(input()) - 1\ndef linput(): return list(input().split())\ndef liinput(): return list(map(int, input().split()))\ndef miinput(): return map(int, input().split())\ndef li0input(): return list(map(lambda x: int(x) - 1, input().split()))\ndef mi0input(): return map(lambda x: int(x) - 1, input().split())\nINF = 10**20\nMOD = 1000000007\n\nt = iinput()\nfor _ in [0] * t:\n    n = iinput()\n    A = liinput()\n    ans = 0\n    for i, a in enumerate(A):\n        ans = max(ans, a - i - 1)\n    print(ans)",
                true
            ],
            [
                "def get_ans(a, n):\n    operations = 0\n    elements_before = 0\n    for i in range(n):\n        elements_before += max(0, a[i] - elements_before)\n        elements_before += 1\n    return elements_before - n - 1\n\n\nanss = []\nt = int(input())\nfor _ in range(t):\n    _n = int(input())\n    _a = list(map(int, input().split()))\n    anss.append(get_ans(_a, _n))\n\nfor ans in anss:\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nn = []\nsequence = []\nfor i in range(t):\n    n.append(int(input()))\n    sequence.append(input())\n\nfor i in range(t):\n    nums = sequence[i].split()\n    max = int(nums[0])\n    pos = 0\n    for j in range(1, n[i]):\n        #print(j)\n        if int(nums[j])-j > max:\n            max = int(nums[j])-j\n            pos = j\n    num = max-1\n    if num<=0:\n        print(\"0\")\n    else:\n        print(num)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    al=list(map(int, input().split()))\n    ans=0\n    ind=1\n    for i,a in enumerate(al):\n        if a<=ind:\n            ind+=1\n        else:\n            d=a-ind\n            ans+=d\n            ind=a+1\n    print(ans)",
                true
            ],
            [
                "from sys import stdin, stdout\nnmbr = lambda: int(input())\nlst = lambda: list(map(int, input().split()))\n\nfor _ in range(nmbr()):\n    n=nmbr()\n    # n,k=lst()\n    a=lst()\n    v=1\n    ans=0\n    for i in range(n):\n        if a[i]>=v:\n            ans+=a[i]-v\n            v=a[i]+1\n        else: v+=1\n    print(ans)\n",
                true
            ],
            [
                "for g in range(int(input())):\n    l = int(input())\n    a = [int(x) for x in input().split()]\n    if len(a) == 1:\n        c = a[0] - 1\n        print(c)\n    else:\n        nu = []\n        for i in range(l):\n            d = a[i] - a.index(a[i]) - 1\n            nu.append(d)\n        print(max(nu))",
                true
            ],
            [
                "t = int(input())\nfor c in range(t):\n  n = int(input())\n  a = [int(x) for x in input().split()]\n  #print(str(a))\n  mx_diff = 0\n  for idx,item in enumerate(a):\n    if item - idx > mx_diff:\n      mx_diff = item - idx - 1\n  print(mx_diff)\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = a[0] - 1\n    for i in range(1, len(a)):\n        x = a[i] - a[i - 1]\n        if x > 0:\n            count += x - 1\n        else:\n            a[i]=a[i-1]+1\n    print(count)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    index = 0\n    for j in range(n):\n        if a[j] > j+1:\n            index = max(index, a[j] - j-1)\n    print(index)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    mx = 0\n    for i in range(n):\n        if lst[i] - (i + 1) > mx:\n            mx = lst[i] - (i + 1)\n    print(mx)",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    ans=0\n    index=1\n    for j in a:\n        if index<j:\n            ans+=(j-index)\n            index+=(j-index)\n        index+=1\n    print(ans)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    m = 0\n    for i in range(len(arr)):\n        if (arr[i] - (i+1)) > m:\n            m = arr[i] - (i+1)\n    print(m)\n",
                true
            ],
            [
                "def main():\n    for t in range(int(input())):\n        n = map(int, input().split())\n        arr = list(map(int, input().split()))\n        total = 0\n        for i, j in enumerate(arr, start=1):\n            total += max(0, j - i - total)\n        print(total)\nmain()\n",
                true
            ],
            [
                "# Problem: A. Era\n# Contest: Codeforces - Codeforces Round #752 (Div. 2)\n# URL: https://codeforces.com/contest/1604/problem/A\n# Memory Limit: 256 MB\n# Time Limit: 1000 ms\n# \n# KAPOOR'S\n\nfrom sys import stdin, stdout \n\ndef INI():\n    return int(stdin.readline())\n    \ndef INL():\n    return [int(_) for _ in stdin.readline().split()]\n    \ndef INS():\n    return stdin.readline()\n\ndef MOD():\n    return pow(10,9)+7\n    \ndef OPS(ans):\n    stdout.write(str(ans)+\"\\n\")\n    \ndef OPL(ans):\n    [stdout.write(str(_)+\" \") for _ in ans]\n    stdout.write(\"\\n\")\n\n    \nif __name__==\"__main__\":\n    for _ in range(INI()):\n        n=INI()\n        X=[0]+INL()\n        \n        f=-1\n        i=-1\n        for _ in range(1,n+1):\n            if X[_]>_:\n                f=X[_]-_\n                i=_\n                break\n        if f==-1:\n            OPS(\"0\")\n        else:\n            ans=f\n            for _ in range(i+1,n+1):\n                if X[_]>i:\n                    t=X[_]-_\n                    if t>ans:\n                        ans+=t-ans\n            OPS(ans)",
                true
            ],
            [
                "t = int(input()) \nfor _ in range(t): \n    n = int(input())\n    l = [int(i) for i in input().split()] \n    c = -1000\n    for i in range(len(l)): \n        c = max(c, l[i]-(i+1))\n    print(c)",
                true
            ],
            [
                "t=int(input())\n\nwhile t>0:\n    n=int(input())\n    ar=list(map(int, input().split()))\n    \n    x=1\n    cnt=0\n    for i in range(n):\n        if ar[i]>x:\n            cnt+=(ar[i]-x)\n            x=ar[i]+1\n        else:\n            x+=1\n    print(cnt)\n    t-=1",
                true
            ],
            [
                "import math\nfrom collections import OrderedDict\nfrom collections import Counter\nfrom itertools import combinations\n#a= list(map(int, input(\"\").strip().split()))[:n]\ndef solve(a):\n    c = 0\n    for i in range(len(a)):\n        if a[i]>i+1+c:\n            c=a[i]-i-1\n    print(c)\nt= int(input(\"\"))\nfor i in range(t):\n    n= int(input(\"\"))\n    a = list(map(int,input(\"\").strip().split()))[:n]\n    solve(a)\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n= int(input())\n    arr =[ int (x) for x in input().split()]\n\n    m = 0\n    for i in range(len(arr)):\n        m = max(m,arr[i]-i-1)\n    print(m)\n",
                true
            ],
            [
                "T = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    m = 0\n    for i in range(len(arr)):\n        m = max(m, arr[i] - i - 1)\n    print(m)",
                true
            ],
            [
                "def solve(arr):\n     cnt = 0\n     for i in range(len(arr)):\n          cnt = max(cnt,arr[i]-i)\n     return cnt-1\nt= int(input())\nwhile t:\n     t-=1\n     n = int(input())\n     arr = [int(a) for a in input().split()]\n     print(solve(arr))",
                true
            ],
            [
                "# A. Era\n\nfor test in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    maxi = -1\n    for i in range(len(arr)):\n        if arr[i] >= i + 1:\n            maxi = max(maxi, arr[i] - (i + 1))\n    print(maxi)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    c=0\n    for i in range(n):\n        if((c+i+1)<a[i]):\n            c+=a[i]-(i+1+c)\n    print(c)\n\n",
                true
            ],
            [
                "import sys\nimport math\nimport collections\nimport heapq\n\ndy = [1, 0, -1, 0]\ndx = [0, 1, 0, -1]\n\nr = lambda: sys.stdin.readline().rstrip()\nMIS = lambda: map(int, r().split())\n\nfor _ in range(int(r())):\n    N = int(r())\n    L = list(MIS())\n    ans = 0\n    for i in range(N):\n        ans = max(ans, L[i]-i-1)\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    operations = 0\n    for i in range(1, len(a) + 1):\n        if not a[i - 1] <= i:\n            operations += 0 if a[i - 1] - i - operations < 0 else a[i - 1] - i - operations\n    print(operations)",
                true
            ],
            [
                "for _ in range(int(input())):\n    l = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    for i in range(l):\n        if arr[i] > i +1:\n            if i == 0:\n                count += arr[i] - 1\n            elif arr[i] > i + 1 + count:\n                temp = arr[i] - count - i\n                count += temp - 1\n    print(count)",
                true
            ],
            [
                "import sys, os.path\nif(os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\",\"r\")\n    sys.stdout = open(\"output.txt\",\"w\")\n\n############################################\n\nfor t in range(int(input())):\n    n = int(input())\n    num = list(map(int,input().split()))\n    mun = [0]*n\n    for i in range(n):\n        mun[i] = num[i]-i\n    print(max(mun)-1)",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    li = []\n    for i in range(n):\n        li.append(a[i] - (i + 1))\n    print(max(li))",
                true
            ],
            [
                "#1604_\u042d\u0440\u0430\np=int(input())\nfor _ in range(p):\n    n=int(input())\n    aaa=[0]+list(map(int,input().split()))\n    s=0\n    for i in range(1,n+1):\n        a=aaa[i]\n        if a<=(s+i) : continue\n        s+=a-(s+i)\n    print(s)\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(el) for el in input().split(' ')]\n    res = 0\n    for j,el in enumerate(arr):\n        res += max([0, el-j-1-res])\n    print(res)",
                true
            ],
            [
                "#from math import *\n#from bisect import *\n#from collections import *\n#from random import *\n#from decimal import *\"\"\"\n#from heapq import *\n#from itertools import *\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return map(int,input().split())\nt=inp()\nwhile(t):\n    t-=1\n    n=inp()\n    a=lis()\n    sofar=0\n    moves=0\n    for i in range(n):\n        diff=a[i]-((i+1)+sofar)\n        if(diff>0):\n            moves+=diff\n            sofar+=diff\n    print(moves)\n    \n                \n            \n        \n        \n",
                true
            ],
            [
                "def foo():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(n):\n        if a[i] > i + 1 + ans:\n            ans += a[i] - i - 1 - ans\n    print(ans)\n\nt = int(input())\n\nfor _ in range(t):\n    foo()",
                true
            ],
            [
                "import math\nt = int(input())\n\ndef solve():\n  n = int(input())\n  arr = list(map(int, input().split()))\n  max_dif = 0\n  for i, v in enumerate(arr):\n    max_dif = max(max_dif, v-i-1)\n  print(max_dif)\n    \nfor _ in range(t):\n  solve()\n  \n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    L = [int(l) for l in input().split()]\n    de = 0\n    for i in range(len(L)):\n        de = max(de, L[i] - i)\n    print(de - 1)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    c=0\n    l=[]\n    b=[]\n    for j in range(n):\n        l.append(j+1)\n    for k in range(n):\n        if a[k]>l[k]:\n            c=c+1\n            b.append(a[k]-l[k])\n    if c==0:\n        print(0)\n    else:\n        print(max(b))",
                true
            ],
            [
                "for _ in range(int(input())):\n   n = int(input())\n   s = list(map(int, input().split()))\n   z = 0\n   for i in range(n):\n      if s[i] >= i+z+1:\n         z += s[i]-i-z-1\n   print(z)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=0\n    for i in range(n):\n        b=max(b,a[i]-i-1)\n    print(b)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    _ = input()\n    arr = list(map(int, input().split()))\n    steps = 0\n    for i in range(len(arr)):\n        if arr[i] <= (i+1+steps):\n            continue\n        else:\n            steps += (arr[i] - (i+1+steps))\n    print(steps)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    ans=0\n    for j in range(n):\n        if(a[j]>j+1):\n            k=a[j]-j-1-ans\n            if(k>0):\n                ans+=k\n    print(ans)\n    \n   ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    m=0\n    for i in range(n):\n        m=max(m,(a[i]-(i+1)))\n    print(m)\n",
                true
            ],
            [
                "k = int(input())\nl = []\n\nfor i in range(k) :\n    n = int(input())\n    x = input().split(\" \")\n    l.append((n,x))\nfor i in l:\n    l1 = i[1]\n    k = 1\n    d = int(l1[0]) - k\n    for j in l1[1 : ] :\n        k+=1\n        x = int(j) - k\n        if x > d :\n            d = x\n    print(d)",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math, random\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nmod = 1000000007\n\ndef my_main():\n    kase = inp()\n    pans = []\n    mx = int(1e17)\n    for ka in range(kase):\n        n = inp()\n        da = inp(True)\n        now = 0\n        for i in range(1, n+1):\n            now += max(0, da[i-1] - (now+i))\n            # print i, now\n        pans.append(str(now))\n    print('\\n'.join(pans))\n\nmy_main()\n\n",
                true
            ],
            [
                "def main():\n    t=int(input())\n    for test in range(t):\n        n=int(input())\n        a = [int(i) for i in input().split()]\n        m=0\n        for i in range(n):\n            m=max(a[i]-i-1,m)\n        print(m)\n\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "for _ in range(int(input())):\n    size = int(input())\n    arr =list(map(int,input().split()))\n    ans = 0\n    for ind in range(size):\n        if arr[ind] > ind + 1 + ans:\n            ans += arr[ind] - (ind+1+ans)\n    print(ans)",
                true
            ],
            [
                "T=int(input())\nfor _ in range(T):\n    N=int(input())\n    A=list(map(int,input().split()))\n    ans=0\n    now=1\n    for i in A:\n        if now<i:\n            ans+=i-now\n            now=i+1\n        else:\n            now+=1\n    print(ans)",
                true
            ],
            [
                "t=int(input())\nfor slkdja in range(t):\n    n=int(input())\n    l=[int(i)for i in input().split()]\n    ma=0\n    for i in range(n):\n        ma=max(ma,l[i]-i)\n    print(ma-1)\n",
                true
            ],
            [
                "t = int(input())\nwhile(t):\n    t -= 1\n    n = int(input())\n    lst = list(map(int,input().split()))\n    tot = 0\n    for i in range(n):\n        tot = max(tot, lst[i]-i-1)\n    print(tot)\n",
                true
            ],
            [
                "import math\nfrom collections import OrderedDict        \n\n\nt = int(input())\nwhile(t>0):\n    n = int(input())\n    inp = input()\n    a = list(map(int,inp.split(\" \")))\n    maxi = a[0] - 0 - 1\n    for i in range(0,n):\n        s = a[i] - i - 1\n        if(s>maxi):\n            maxi =s \n    print(max(maxi, 0))        \n    t-=1    \n\n            \n\n#                            \u2580\u2588 \u2584\u2588 \u2588\u2580\u2588 \u2588\u2580\u2588 \n#                            \u2588\u2584 \u2591\u2588 \u2588\u2584\u2588 \u2588\u2584\u2588\n",
                true
            ],
            [
                "from sys import stdin\nfrom collections import deque\nlst = list(map(int, stdin.read().split()))\n_s = 0\ndef inp(n=1):\n    global _s\n    ret = lst[_s:_s + n]\n    _s += n\n    return ret\ndef inp1():\n    return inp()[0]\n\nt = inp1()\nfor _ in range(t):\n  n = inp1()\n  a = inp(n)\n  mx = 0\n  for i in range(1, n + 1):\n    dif = a[i - 1] - i\n    if dif > 0:\n      mx = max(mx, dif)\n  print(mx)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = []\n    for j in range(len(a)):\n        if a[j] > j+1:\n            ans.append(a[j] - (j+1))\n    if ans:\n        print(max(ans))\n    else:\n        print(0)",
                true
            ],
            [
                "def era(s):\n    n_op = 0\n    for i, n in enumerate(s):\n        n_op += max(0, s[i] - (i + 1) - n_op)\n    return n_op\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(k) for k in input().split()]\n    print(era(a))",
                true
            ],
            [
                "for _ in range(int(input())):\n    input()\n    A = [int(x) for x in input().split()]\n    print(max(a-i for i,a in enumerate(A,1)))\n",
                true
            ],
            [
                "\ndef solve(arr,n):\n\n    temp = 0 \n\n    for i in range(1,n+1):\n\n        x = arr[i-1]-temp\n\n        if(x>i):\n            temp += (x-i)\n\n        # print(temp)\n\n    return temp\n\n\n\nt = int(input())\nfor _ in range(t):\n    \n    \n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    print(solve(arr,n))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=[int(n) for n in input().split()]\n    count = 0\n    for k in range(n):\n        if 1+k+count<a[k]:\n            count+=a[k]-(1+k+count)\n    print(count)",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools,copy\ninf = float('inf')\nmod = 10**9+7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // fractions.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(20000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\n\ndef initGrid(h,w):\n    for i in range(h):\n        s = S()\n        grid.append(list(s))\n    return grid\n\ndef soe(limit):\n    a = [True] * limit                          # Initialize the primality list\n    a[0] = a[1] = False\n\n    for (i, isprime) in enumerate(a):\n        if isprime:\n            yield i\n            for n in range(i*i, limit, i):     # Mark factors non-prime\n                a[n] = False\n    return a\n\n################### Main (Author - 9th) ##################\n\n\n\nfor _ in range(I()):\n    n = I()\n    a = LI()\n    ans = 0\n    for i in range(n):\n        if a[i] > i+1:\n            ans = max(ans, abs((i+1)-a[i]))\n    print(ans)\n \n\n",
                true
            ],
            [
                "from sys import stdin\ninput=stdin.readline\nrn=lambda:int(input())\nrns=lambda:map(int,input().split())\nrl=lambda:list(map(int,input().split()))\nrs=lambda:input().strip()\nYN=lambda x:print('YES') if x else print('NO')\nceil_div=lambda a,b:-(-a//b)\nmod=10**9+7\n\nfor _ in range(rn()):\n    n=rn()\n    a=rl()\n    b=[max(0,a[i]-i-1) for i in range(n)]\n    print(max(b))",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    res = 0\n    index = 1\n    for i in range(n):\n        if a[i] > index:\n            res += a[i] - index\n            index = a[i]\n        index += 1\n    print(res)\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nTanya is learning how to add numbers, but so far she is not doing it correctly. She is adding two numbers a and b using the following algorithm:\n\n  1. If one of the numbers is shorter than the other, Tanya adds leading zeros so that the numbers are the same length. \n  2. The numbers are processed from right to left (that is, from the least significant digits to the most significant). \n  3. In the first step, she adds the last digit of a to the last digit of b and writes their sum in the answer. \n  4. At each next step, she performs the same operation on each pair of digits in the same place and writes the result to the left side of the answer. \n\n\n\nFor example, the numbers a = 17236 and b = 3465 Tanya adds up as follows:\n\n$$$ \\large{ \\begin{array}{r} + \\begin{array}{r} 17236\\\\\\ 03465\\\\\\ \\end{array} \\\\\\ \\hline \\begin{array}{r} 1106911 \\end{array} \\end{array}} $$$\n\n  * calculates the sum of 6 + 5 = 11 and writes 11 in the answer. \n  * calculates the sum of 3 + 6 = 9 and writes the result to the left side of the answer to get 911. \n  * calculates the sum of 2 + 4 = 6 and writes the result to the left side of the answer to get 6911. \n  * calculates the sum of 7 + 3 = 10, and writes the result to the left side of the answer to get 106911. \n  * calculates the sum of 1 + 0 = 1 and writes the result to the left side of the answer and get 1106911. \n\n\n\nAs a result, she gets 1106911.\n\nYou are given two positive integers a and s. Find the number b such that by adding a and b as described above, Tanya will get s. Or determine that no suitable b exists.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nEach test case consists of a single line containing two positive integers a and s (1 \u2264 a < s \u2264 10^{18}) separated by a space.\n\nOutput\n\nFor each test case print the answer on a separate line.\n\nIf the solution exists, print a single positive integer b. The answer must be written without leading zeros. If multiple answers exist, print any of them.\n\nIf no suitable number b exists, output -1.\n\nExample\n\nInput\n\n\n6\n17236 1106911\n1 5\n108 112\n12345 1023412\n1 11\n1 20\n\n\nOutput\n\n\n3465\n4\n-1\n90007\n10\n-1\n\nNote\n\nThe first test case is explained in the main part of the statement.\n\nIn the third test case, we cannot choose b that satisfies the problem statement.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import math\nn=int(input())\ndef result(a,b):\n    a=str(a)\n    b=str(b)\n    if(len(a)<len(b)):\n        a=\"0\"*(len(b)-len(a))+a\n    else:\n        b=\"0\"*(len(a)-len(b))+b\n    res=\"\"\n    \n    for i in range(len(b)-1,-1,-1):\n        res=str(int(a[i]))+str(int(b[i]))+res\n    return res\nfor i in range(n):\n    a,s=map(int,input().split())\n    res=\"\"\n    temp=str(s)\n    at=str(a)\n    while(a>0 or s>0):\n        rem=a%10\n        a=a//10\n        srem=s%10\n        s=s//10\n        if(srem>=rem):\n            res=str(srem-rem)+res\n        else:\n            t=s%10\n            s=s//10\n            if((t*10+srem)-rem<10):\n                res=str((t*10+srem)-rem)+res\n            else:\n                res=\"-1\"+res\n        \n    \n    if(a==0 and s==0 and \"-\" not in res):\n        print(int(res))\n    else:\n        print(-1)\n    \n        \n    \n",
                true
            ],
            [
                "import math,sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());mod1=1000000007;mod2=998244353\n\nfor _ in range(I()):\n    a,s=input().split()\n    i=len(a)-1;j=len(s)-1;ans=\"\";f=0\n    while i>=0 and j>=0:\n        if int(a[i])<=int(s[j]):\n            ans+=str(int(s[j])-int(a[i]))\n            i-=1;j-=1\n        elif j==0 or s[j-1]!='1':f=1;break\n        else:\n            p=int(s[j-1]);q=int(s[j])\n            ans+=str(10*p +q -int(a[i]))\n            i-=1;j-=2\n    if (j<0 and i>=0) or f==1:print(-1);continue\n    ans=ans[::-1]\n    if j>=0:\n        ans=s[:j+1]+ans\n    print(int(ans))",
                true
            ],
            [
                "from collections import Counter, defaultdict\nimport math\nimport bisect\n\n\ndef getlist():\n    return list(map(int, input().split()))\n\n\ndef maplist():\n    return map(int, input().split())\n\n\ndef main():\n    n = int(input())\n    for num in range(n):\n        a,s = maplist()\n        arr1 = str(a)\n        arr2 = str(s)\n        b = \"\"\n        loop = False\n        while len(arr2)>=len(arr1):\n            if int(arr2[-1])>=int(arr1[-1]):\n                b+=str(int(arr2[-1])-int(arr1[-1]))\n                arr2 = arr2[:-1]\n            elif (int(arr2[-2:])-int(arr1[-1]))<10 and int(arr2[-2:])>int(arr1[-1]):\n                b+=str(int(arr2[-2:])-int(arr1[-1]))\n                arr2 = arr2[:-2]\n            else:\n                break\n            arr1 = arr1[:-1]\n            if len(arr1)==0:\n                b += arr2[::-1]\n                loop =True\n                break\n        if loop:\n            b = b[::-1]\n            i = 0\n            while i<len(b):\n                if int(b[i]) == 0:\n                    i+=1\n                else:\n                    break\n            print(b[i:])\n        else:\n            print(-1)\n\n\n\n\nmain()\n",
                true
            ],
            [
                "from sys import stdin, stdout\nimport math\nimport copy\n \nT = int(input())\n \nfor i in range(T):\n    a,s = [str(x) for x in stdin.readline().split()]\n    ans = ''\n \n    while True:\n        if len(a) == 0:\n            a = '0'\n        last_a = int(a[-1:])\n        #print(last_a)\n \n \n        unavailable_one = 0\n        unavailable_two = 0\n \n        last_one = s[-1:]\n        if len(last_one) != 1:\n            unavailable_one = 1\n            #print('last one out')\n        else:\n            target = int(last_one)\n            if target >= last_a:\n                ans = str(target-last_a) + ans\n                a = a[:-1]\n                s = s[:-1]\n            else:\n                #print('last one out')\n                unavailable_one = 1\n \n        if unavailable_one == 1:    \n            last_two = s[-2:]\n            if len(last_two) != 2:\n                #print('last two out')\n                unavailable_two = 1\n            else:\n                target = int(last_two)\n                if target >= last_a and target <= last_a + 9:\n                    ans = str(target-last_a) + ans\n                    a = a[:-1]\n                    s = s[:-2]\n                else:\n                    #print('last two out')\n                    unavailable_two = 1\n \n        if a == '' and s == '':\n            print(ans.lstrip('0'))\n            break\n        \n        if unavailable_one == 1 and unavailable_two == 1:\n            print(-1)\n            break\n \n        #print([a,s,ans])",
                true
            ],
            [
                "def solve(a, s):\n    b = []\n    a_i, s_i = len(a) - 1, len(s) - 1\n    curr_a = 0\n    while a_i >= 0 and s_i >= 0:\n        curr_a = int(a[a_i])\n        a_i -= 1\n        curr_s = int(s[s_i])\n        s_i -= 1\n        if curr_s < curr_a and s_i >= 0:\n            curr_s = curr_s + int(s[s_i]) * 10\n            s_i -= 1\n        if curr_s - curr_a < 0 or curr_s - curr_a > 9:\n            # print(\"failed\", curr_s, curr_a)\n            return '-1'\n        b.append(str(curr_s - curr_a))\n    #     print(b)\n    # print(a_i, s_i)\n    if a_i < 0:\n        while s_i >= 0:\n            b.append(str(s[s_i]))\n            s_i -= 1\n    elif s_i < 0:\n        return '-1'\n    # print(b)\n    start_b = len(b) - 1\n    while start_b > 0 and b[start_b] == '0':\n        start_b -= 1\n    \n    return ''.join(b[start_b::-1])\n    \n\nt = int(input())\nfor _ in range(t):\n    a, s =  input().split()\n    print(solve(a, s))",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,s=map(int,input().split())\n    ans=''\n    tr=0\n    if a>s:\n        print(-1)\n    else:\n        while s>0:\n            if s==0:\n                tr=-1\n                break\n            else:\n                x=a%10\n                y=s%10\n                if (y>=x):\n                    ans=str(y-x)+ans\n                    a=a//10\n                    s=s//10\n                else:\n                    y=s%100\n                    if y-x>=10 or y<x:\n                        tr=-1\n                        break\n                    else:\n                        a=a//10\n                        s=s//100\n                        ans=str(y-x)+ans\n        if tr==0 and a==0:\n            print(int(ans))\n        else:\n            print(-1)\n\n\n\n",
                true
            ],
            [
                "import sys\n\n\ndef solve():\n    a, s = sys.stdin.readline().split()\n    j = len(s) - 1\n    b = ''\n    for i in range(len(a) - 1, -1, -1):\n        ai = int(a[i])\n        if j < 0:\n            return '-1'\n        if s[j] >= a[i]:\n            b += str(int(s[j]) - ai)\n            j -= 1\n        elif j == 0 or s[j - 1] != '1':\n            return '-1'\n        else:\n            b += str(int(s[j - 1:j + 1]) - ai)\n            j -= 2\n    if j >= 0:\n        b += s[:j + 1][::-1]\n    return str(int(b[::-1]))\n\n\nt = int(sys.stdin.readline())\n\nfor _ in range(t):\n    print(solve())\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    a, s = input().split()\n    b = []\n    i = len(a) - 1\n    j = len(s) - 1\n    while j >= 0 and i >= 0:\n        x = int(a[i])\n        y = int(s[j])\n        if x <= y:\n            b.append(y - x)\n        else:\n            if j - 1 < 0:\n                print(-1)\n                break\n            else:\n                y = 10 * int(s[j - 1]) + y\n                j -= 1\n                if 10 <= y <= 18:\n                    b.append(y - x)\n                else:\n                    print(-1)\n                    break\n        i -= 1\n        j -= 1\n    else:\n        if i >= 0:\n            print(-1)\n        else:\n            while j >= 0:\n                b.append(int(s[j]))\n                j -= 1\n            print(int(''.join([str(a) for a in b[::-1]])))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,s=map(str,input().split())\n    ans=\"\"\n    a=a.rjust(30,\"0\")\n    s=s.rjust(30,\"0\")\n    j=29\n\n    for  i in range(29,-1,-1):\n        if s[j]<a[i]:\n            if (int(s[j-1:j+1])-int(a[i]))>9 or (int(s[j-1:j+1])-int(a[i]))<0:print(-1);break\n            ans+=str(int(s[j-1:j+1])-int(a[i]))\n            j-=2\n        else:\n            if (int(s[j])-int(a[i]))>9 or (int(s[j])-int(a[i]))<0:print(-1);break\n            ans+=str((int(s[j])-int(a[i])))\n            j-=1\n    else:\n        print(int(ans[::-1][7:]))",
                true
            ],
            [
                "for _ in range(int(input())):\n        a, s = input().split()\n        b = ''\n        q = 0\n        i, j = -1, -1\n        if len(s)<len(a):\n                print(-1)\n                break\n        while i!=-len(a)-1 and j!=-len(s)-1:\n                if not q:\n                        if int(a[i])<int(s[j]):\n                                b += str(int(s[j])-int(a[i]))\n                                i-=1\n                                j-=1\n                        elif int(a[i])==int(s[j]):\n                                b += '0'\n                                i-=1\n                                j-=1\n                        else:\n                                b += str(10+int(s[j])-int(a[i]))\n                                q = 1\n                                j-=1\n                else:\n                        if s[j] == '1':\n                                q = 0\n                        else:\n                                print(-1)\n                                break\n                        i -= 1\n                        j -= 1\n                if i!=-len(a)-1 and j==-len(s)-1:\n                        print(-1)\n                        break\n        else:\n                if j!=-len(s)-1:\n                        b += s[:j+1][::-1]\n                print(int(b[::-1]))\n",
                true
            ],
            [
                "import sys\nimport bisect as bi\nimport os\nimport itertools as it\ninput = sys.stdin.readline\nI = lambda:list(map(int,input().split()))\nfor tc in range(int(input())):\n    a,x = I()\n    a = str(a)\n    x = str(x)\n    nn,mm = len(a),len(x)\n\n    i = len(a)-1\n    j = len(x)-1\n    temp = []\n    tf = 1\n    for i in range(len(a)-1,-1,-1):\n        if j<0:\n            tf = 0\n            break\n        now = int(a[i])\n        cur = int(x[j])\n        #print(now,cur)\n        if cur>now:\n            temp.append(cur-now)\n            j-=1\n        elif cur==now:\n            temp.append(0)\n            j-=1\n        else:\n            if j>0:\n                te = cur\n                cur = int(x[j-1])*10+(cur)\n                if x[j-1]!='1':\n                    tf = 0\n                    break\n                temp.append(cur-now)\n                j-=2\n            else:\n                tf = 0\n                break\n\n    # while 1:\n    #     if(j)<0:break\n    #     temp.append(int(x[j]))\n    #     j-=1\n\n    if j>=0:\n        temp+=list(x[:j+1][::-1])\n\n    if tf:\n        print(''.join(list(map(str,temp[::-1]))).lstrip('0'))\n    else:\n        print(-1)",
                true
            ],
            [
                "# Name: MD Murad Hossain\n# Gmail:- muradhossainm01@gmail.com\ntry:   \n    for _ in range(int(input())):\n        a,n = map(int,input().split())\n        c = 0\n        for i in range(18):\n            r = a%10\n            t = n%10\n            if r > t:\n                c += (10**i) * (10 + t-r)\n                n //= 10\n    \n                if n%10 != 1:\n                    c = -1\n                    break\n            else:\n                c += (10**i) * (t-r)\n            n //= 10\n            a //= 10\n        print(c)\nexcept:\n    pass",
                true
            ],
            [
                "import sys\n\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\n\nt = int(read_line())\nfor _ in range(t):\n    line = read_line().split()\n    a = int(line[0])\n    s = int(line[1])\n    b = 0\n    pow10 = 1\n    while s > 0:\n        last_a = a % 10\n        last_sum = s % 10\n        if last_sum < last_a:\n            s = s // 10\n            last_sum += 10 * (s % 10)\n            if not (0 <= last_sum - last_a <= 9):\n                b = -1\n                break\n        b += (last_sum - last_a) * pow10\n        pow10 *= 10\n        s = s // 10\n        a = a // 10\n\n    print(b if a == 0 else -1)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    stra,strs = input().split()\n    # stra = str(a)\n    # strs = str(s)\n    i,j = len(stra)-1,len(strs)-1\n    output = \"\"\n    flag = False\n    while i>=0 and j>=0:\n        if int(stra[i])<=int(strs[j]):\n            output+=str((int(strs[j])-int(stra[i])))\n            i-=1\n            j-=1\n            # print(\"yes\")\n            # print(\"output:\",output)\n        else :\n            j-=1\n            if j<0:\n                flag = True\n                break\n            x = int(stra[i])\n            y = int(strs[j:j+2])\n            # print(y,x)\n            if y-x>9 or y-x<0:\n                # i=-1;j=-1\n                # print(\"yes\")\n                flag = True\n                break\n            else :\n                output+=(str(y-x))\n                j-=1\n                i-=1\n                # print(stra[i],strs[j])\n \n    output = output[::-1]\n    output = strs[0:j+1]+output\n    # print(strs[0:5])\n    if flag or i>-1:\n        print(\"-1\")\n    else:\n        print(int(output))",
                true
            ],
            [
                "def solve(a,b):\n    b=[int(x) for x in str(b)];a=[int(x) for x in str(a)]\n    b.reverse();a.reverse()\n   \n    ans=\"\"\n    bind=0\n    for i in range (len(a)):\n        if (bind<len(b) and b[bind]==a[i]):\n            ans+=\"0\"\n            bind+=1\n        elif (bind<len(b) and b[bind]>a[i]):\n            ans+=str(b[bind]-a[i])\n            bind+=1\n        elif (bind<len(b)-1 and b[bind]<a[i] and b[bind+1]==1):\n            ans+=str(b[bind+1]*10+b[bind]-a[i])\n            bind+=2\n        else:\n            return -1\n \n    while (bind<len(b)):\n        ans+=str(b[bind]);bind+=1\n    \n                \n    return int(ans[::-1])\n    \nfor i in range (int (input())):\n    a,b=input().split()\n    print (solve(a,b))",
                true
            ],
            [
                "def solution(a, s):\n    b = ''\n    i = -1; j = -1\n    while i >= (-1 * len(s)):\n        char_s = s[i]\n        try:\n            char_a = a[j]\n        except:\n            char_a = '0'\n        if char_s < char_a:\n            try:\n                char_s = s[i - 1] + char_s\n                i -= 1\n            except:\n                return -1\n        int_s = int(char_s)\n        int_a = int(char_a)\n        int_b = int_s - int_a\n        if int_b < 0:\n            return -1\n        b = str(int_b) + b\n        i -= 1; j -= 1\n\n    true_answer = wrong_sum(a, b)\n    if true_answer == s:\n        return b.lstrip('0')\n    else:\n        return -1\n\n\ndef wrong_sum(a, b):\n    len_a = len(a)\n    len_b = len(b)\n    if len_a > len_b:\n        b = '0' * (len_a - len_b) + b\n    elif len_b > len_a:\n        a = '0' * (len_b - len_a) + a\n    i = -1\n    s = ''\n    while -1 * i <= len(a):\n        s = str(int(a[i]) + int(b[i])) + s\n        i -= 1\n    return s\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        a, s = input().split()\n        print(solution(a, s))\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(0,t):\n    a_str, s_str = input().split()\n\n    # Convert a and s to lists of digits\n    \n    a1 = list(map(int, list(a_str)))\n    s1 = list(map(int, list(s_str)))\n    a1=a1[: : -1]\n    s1=s1[: : -1]\n \n    \n    n=0 #stores the difference\n    \n    i=0 #iterate through a1,s1\n    j=0\n    \n    k=0 #accounts for -1\n    p=0 #copy of i. used for exponentiation once we wish to stop incrementing i.\n    \n    c1=len(s1) #ungrouped elements left in s1\n    c2=len(a1) #ungrouped elements left in a1\n\n    #perform the special subtraction operation\n    while(j<len(s1)):\n        \n        if(i==len(a1)): #we have reached the end of a\n            d=s1[j]\n            n+=d*(10**p) #instead of incrementing i, we will increment p\n            j+=1\n            p+=1\n\n        elif(i<=len(a1)-1):\n            \n            d=s1[j]-a1[i]\n\n            if(d>=0): #normal subtraction\n                n+=d*(10**i)\n                i+=1\n                j+=1\n                p=i\n                c1-=1\n                c2-=1\n                \n            elif(d<0): #eg 1-6 is <0 so we instead group 11 with 6 (example case)\n                \n                if(j<len(s1)-1 and s1[j+1]==1): #there must be something to the left to group, and that should be 1.\n                    d=10+s1[j]-a1[i]\n                    n+=d*(10**i)\n                    i+=1\n                    j+=2\n                    p=i\n                    c1-=2 #2 elements of s used for grouping.\n                    c2-=1\n                else: #nothing left to group, or s1[j+1] is something other than 1\n                    k=1 #we have to print -1 \n                    i+=1\n                    p=i\n                    j+=1\n    if(c2>c1):\n        k=1\n    \n    if(k==1):\n        print(-1)\n    else:\n        print(n)\n      \n",
                true
            ],
            [
                "def get_bad_sum(a, b):\n\n    if '-1' in [a, b]:\n        return '-1'\n\n    a = a[::-1]\n    b = b[::-1]\n    res = []\n\n\n\n    # print(\"received\", a, b)\n    i = 0\n    while i < max(len(a), len(b)):\n\n\n        if i < min(len(a), len(b)):\n            res.append(str(int(a[i]) + int(b[i])))\n\n        else:\n            if i < len(a):\n                res.append(str(a[i]))\n\n            if i < len(b):\n                res.append(str(b[i]))\n\n        i += 1\n\n    # print(res)\n\n    return ''.join(res[::-1]).lstrip(\"0\")\n\n\n\ndef get_sol(a, s):\n    sr = len(s) - 1\n    sl = len(s) - 1\n\n    ar = len(a) - 1\n    al = len(a) - 1\n\n    res = []\n\n    while True:\n        # print((sl, sr), (al, ar))\n\n        if al < 0:\n            return ''.join(res[::-1]).lstrip(\"0\")\n\n        if sl < 0:\n            return '-1'\n\n        if int(s[sl: sr + 1]) < int(a[al]):\n\n            sl -= 1\n\n            if sl < 0:\n                return -1\n\n        else:\n            # print(\"ADDING\", str(int(s[sl: sr + 1]) - int(a[al])))\n            res.append(str(int(s[sl: sr + 1]) - int(a[al])))\n            sl -= 1\n            sr = sl\n            al -= 1\n            ar -= al\n\n            if al < 0 and sl >= 0:\n                # print(\"Returning from here\", res)\n\n                res = s[0: sl + 1] + ''.join(res[::-1])\n                return res.lstrip(\"0\")\n\n\n\nif __name__ == '__main__':\n    for t in range(int(input())):\n        a, s = map(str, input().split())\n\n        res = get_sol(a, s)\n        if s == get_bad_sum(str(a), str(res)):\n            print(res)\n        else:\n            # print(\"got\", s, \"but actual\", get_bad_sum(a, res))\n            print(\"-1\")\n\n",
                true
            ],
            [
                "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, sqrt, factorial, pi, inf\nfrom collections import deque, defaultdict\nfrom bisect import bisect, bisect_left\nfrom time import time\nfrom itertools import permutations as per\nfrom heapq import heapify, heappush, heappop, heappushpop\n\ninput = stdin.readline\nR = lambda: map(int, input().split())\nI = lambda: int(input())\nS = lambda: input().rstrip('\\r\\n')\nL = lambda: list(R())\nP = lambda x: stdout.write(str(x) + '\\n')\nlcm = lambda x, y: (x * y) // gcd(x, y)\nnCr = lambda x, y: (f[x] * inv((f[y] * f[x - y]) % N)) % N\ninv = lambda x: pow(x, N - 2, N)\nsumx = lambda x: (x ** 2 + x) // 2\nN = 10 ** 9 + 7\n\nfor _ in range(I()):\n    x,y=[list(i) for i in S().split()]\n    ans=''\n    for i in range(len(x)):\n        if x and not y:\n            ans=-1\n            break\n        if x[-1]>y[-1]:\n            if len(y)==1 or y[-2]!='1':\n                ans=-1\n                break\n            else:\n                ans+=str(10+int(y[-1])-int(x[-1]))\n                x.pop()\n                y.pop()\n                y.pop()\n        else:\n            ans+=str(int(y[-1])-int(x[-1]))\n            x.pop()\n            y.pop()\n    if ans!=-1 and y and not x:\n        ans += ''.join(y[::-1])\n    print(int(ans[::-1]) if ans!=-1 else ans)",
                true
            ],
            [
                "def find_b(a, s):\n    \"\"\"\n    a and s are string of digits\n    \"\"\"\n    if a == '':\n        return s\n    if s == '':\n        return '-1'\n    if int(a[-1]) <= int(s[-1]):\n        prefix = find_b(a[:-1], s[:-1])\n        if prefix != '-1':\n            return prefix + str(int(s[-1]) - int(a[-1]))\n    else:\n        if len(s) >= 2 and s[-2] == '1':\n            prefix = find_b(a[:-1], s[:-2])\n            if prefix != '-1':\n                return prefix + str(int(s[-2:]) - int(a[-1]))\n    return '-1'\n\nif __name__ == \"__main__\":\n    n = int(input())\n    output = []\n    for _ in range(n):\n        output.append(int(find_b(*input().split())))\n    for ans in output:\n        print(ans)\n",
                true
            ],
            [
                "def solve():\n    a, s = input().split()\n    i, j = len(a) - 1, len(s) - 1\n    ans = ''\n    while i >= 0 and j >= 0:\n        small = int(a[i])\n        # print(small)\n        big = 0\n        if a[i] <= s[j]:\n            big = int(s[j])\n        elif j > 0:\n            big = int(s[j - 1: j + 1])\n            # print('--', big)\n            j -= 1\n        g = big - small\n        if g > 9 or g < 0: return -1\n        ans = str(g) + ans\n        i -= 1\n        j -= 1\n    ans = s[:j + 1] + ans\n    return int(ans) if i < 0 else -1\n\n\n\n    \n\n\n\nt = int(input())\nwhile t:\n    print(solve())\n    t -= 1\n# 17236 1106911",
                true
            ],
            [
                "import sys\n\n\ndef wrong_addition(a, s):\n    b = \"\"\n    len_a = len(a)\n    len_s = len(s)\n    i = len_a - 1\n    ls = len_s - 1\n    while True:\n\n        if ls < 0:\n            if i < 0:\n                break\n            return -1\n\n        if i < 0:\n            d_in_a = 0\n        else:\n            d_in_a = int(a[i])\n\n        i -= 1\n        d_in_s = int(s[ls])\n\n        if d_in_a <= d_in_s:\n            b = str(d_in_s - d_in_a) + b\n            ls -= 1\n        else:\n            ls -= 1\n            if ls < 0:\n                return -1\n\n            d_in_s = int(s[ls:ls+2])\n            d_in_b = d_in_s - d_in_a\n            if d_in_b > 9:\n                return -1\n            \n            if d_in_b < 0:\n                return -1\n\n            b = str(d_in_b) + b\n            ls -= 1\n\n    b = int(b)\n    return b\n\n\nfor _ in range(int(input())):\n    a, s = input().split()\n    sys.stdout.write(f\"{wrong_addition(a, s)}\\n\")\n",
                true
            ],
            [
                "tests = int(input())\nfor _ in range(tests):\n    a, s = [x for x in input().split()]\n    b = \"\"\n    j = len(s) - 1\n    n = len(a)\n    f = 0\n    for i in range(n):\n        if j == -1:\n            f = 1\n            break\n        elif a[n - i - 1] <= s[j]:\n            c = int(s[j]) - int(a[n - 1 - i])\n            b = b + chr(c + 48)\n            j -= 1\n        else:\n            if j == 0:\n                f = 1\n                break\n            else:\n                c = int(s[j - 1:j + 1]) - int(a[n - 1 - i])\n                if c > 9 or c < 0:\n                    f = 1\n                    break\n                b = b + chr(c + 48)\n                j -= 2\n    if f == 1:\n        print(-1)\n    else:\n        while j >= 0:\n            c = int(s[j])\n            b = b + chr(c + 48)\n            j -= 1\n        print(int(\"\".join(reversed(b))))\n",
                true
            ],
            [
                "import sys,os,io\ninput = sys.stdin.readline # for strings\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline # for non-strings\n\nPI = 3.141592653589793238460\nINF =  float('inf')\nMOD  = 1000000007\n# MOD = 998244353\n\n\ndef bin32(num):\n    return '{0:032b}'.format(num)\n\ndef add(x,y):\n    return (x+y)%MOD\n\ndef sub(x,y):\n    return (x-y+MOD)%MOD\n\ndef mul(x,y):\n    return (x*y)%MOD\n\ndef gcd(x,y):\n    if y == 0:\n        return x\n    return gcd(y,x%y)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\ndef power(x,y):\n    res = 1\n    x%=MOD\n    while y!=0:\n        if y&1 :\n            res = mul(res,x)\n        y>>=1\n        x = mul(x,x)\n        \n    return res\n        \ndef mod_inv(n):\n    return power(n,MOD-2)\n\ndef prob(p,q):\n    return mul(p,power(q,MOD-2))    \n  \ndef ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef ls():\n    return [i for i in input().split()]\n\ndef check(a,x):\n    b = a[:]\n    b.reverse()\n    b = \"\".join(b)\n    # print(b)\n    if int(b) >= x:\n        return 1\n    return 0\n\n\nfor t in range(ii()):\n    t+=1\n    a , s = ls()\n    b = []\n    a = list(a)\n    ind = len(s) - 1\n    flag = 1\n    # for i in range(20):\n    #     a.insert(0 , '0')\n\n    for i in range(len(a) -1 , -1 ,-1):\n        x = int(a[i])\n        # print(x)\n        if ind < 0:\n            flag = 0\n            break\n        tmp= [s[ind]]\n        # print(tmp,x,ind)\n        ind-=1\n        while ind >= 0 and check(tmp , x) == 0:\n            tmp.append(s[ind])\n            ind-=1\n        # print(tmp)\n        if check(tmp,x)  :\n            tmp.reverse()\n            tmp = \"\".join(tmp)\n            ans = str(int(tmp) - x)\n            if len(ans ) == 1:\n                b.append(ans)\n            else:\n                flag = 0\n                break\n        else:\n            flag = 0\n            break\n    if flag:\n        while ind >= 0:\n            b.append(s[ind])\n            ind-=1\n        b.reverse()\n        \n        \n        b = \"\".join(b)\n        print(int(b))\n    else:\n        print(-1)\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,s = map(int,input().split())\n    b = \"\"\n    while s and a:\n        if a>s:\n            b=-1\n            break\n        s1,s2,a1=s%10,s%100,a%10\n        if s1>=a1:\n            b=str(s1-a1)+b\n            s//=10\n        elif s2>a1 and s2-a1<10:\n            b = str(s2-a1)+b\n            s//=100\n        else:\n            b=-1\n            break\n        a//=10\n    if b!=-1:\n        print(int(str(s)+b))\n    else:\n        print(b)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, s = input().split()\n    i = len(s) - 1\n    j = len(a) - 1\n    b = ''\n    wrong = False\n    try:\n        while j >= 0:\n            if i < 0:\n                wrong = True\n                break\n            if int(a[j]) > int(s[i]):\n                if i < 1:\n                    wrong = True\n                    break\n                char = str(int(s[i-1] + s[i]) - int(a[j]))\n                if len(char) > 1:\n                    wrong = True\n                    break\n                b = char + b\n                i -= 2\n                j -= 1\n            else:\n                b = str(int(s[i]) - int(a[j])) + b\n                i -= 1\n                j -= 1\n        if i != -1:\n            b = s[:i+1] + b\n    except:\n        print(-1)\n        continue\n    if wrong:\n        print(-1)\n        continue\n    print(int(b))",
                true
            ],
            [
                "def solve (a,s):\n    na=len(a)\n    ns=len(s)\n    i=na-1\n    j=ns-1\n    b=\"\"\n    while(i>=0 and j>=0):\n        if(s[j]<a[i]):\n            if(j>0):\n                k=int(s[j-1:j+1])-int(a[i])\n                b+=str(k)\n                j-=2\n        else:\n            k=int(s[j])-int(a[i])\n            b+=str(k)\n            j-=1\n        i-=1\n    if(j>=0):\n        b+=(s[:j+1])[::-1]\n    if(i>=0):\n        b+=(a[:i+1])[::-1]\n    b=b[::-1]\n    if('-' in b):\n        return -1\n    elif(int(b)>int(s)):\n        return -1\n    else:\n        st=\"\"\n        nb=len(b)\n        if(na>nb):\n            b='0'*(na-nb)+b\n            nb=na\n        else:\n            a='0'*(nb-na)+a\n            na=nb\n        #print(a,b)\n        for i in range(na):\n            st+=str(int(a[i])+int(b[i]))\n        #print(st)\n        if(s==st):\n            return int(b)\n        else:\n            return -1\n\n            \n            \nq=int(input())\nwhile (q):\n    l=[i for i in input (). split (\" \")]\n    a=l[0]\n    s=l[1]\n    print(solve(a,s))\n    q-=1\n        \n            \n\n",
                true
            ],
            [
                "t = int(input())\nwhile t>0:\n    t-=1\n    a,b = map(int, input().split())\n    a = str(a)\n    b = str(b)\n    i = len(a)-1\n    j = len(b) - 1\n    ans = \"\"\n    poss = True\n    while i>=0 and j >=0 :\n        # print(i, j)\n        if a[i]<=b[j]:\n            ans = str(ord(b[j]) - ord(a[i])) + ans\n            i-=1\n            j-=1\n        else:\n            if j <= 0:\n                poss = False\n                break\n            x =  int(b[j-1:j+1])\n            x-=ord(a[i]) - ord('0')\n            i-=1\n            j-=2\n            if not 0<x<=9:\n                poss = False\n                break\n            ans = str(x) + ans\n    poss = poss and (i==-1)\n    for k in range(j, -1, -1):\n        ans=b[k]+ans\n    if not poss:\n        print(-1)\n        continue\n    try:\n        ans = int(ans)\n        print(ans)\n    except:\n        print(-1)\n\n",
                true
            ],
            [
                "def dumb_subtract(additive, dumb_sum):\n    result_string = ''\n    additive_stack = list(additive)\n    sum_stack = list(dumb_sum)\n\n    while len(sum_stack) >= len(additive_stack) > 0:\n        sum_chunk = sum_stack[-2:] if sum_stack[-1] < additive_stack[-1] else sum_stack[-1:]\n        additive_chunk = additive_stack.pop()\n\n        for _ in sum_chunk:\n            sum_stack.pop()\n\n        result_chunk = int(''.join(sum_chunk)) - int(''.join(additive_chunk))\n\n        if result_chunk > 9 or result_chunk < 0:\n            return '-1'\n\n        result_string = str(result_chunk) + result_string\n\n    if len(additive_stack) > 0:\n        return '-1'\n\n    return (''.join(sum_stack) + result_string).lstrip('0')\n\n\ndef solve():\n    number_of_tests = int(input())\n\n    for test in range(number_of_tests):\n        additive, dumb_sum = input().split(' ')\n        print(dumb_subtract(additive, dumb_sum))\n\n\nsolve()\n",
                true
            ],
            [
                "def solve(a, s):\n    ans = \"\"\n    can = 1\n    while a!=0 and s!=0:\n        ca = a%10\n        cs = s%10\n        ccs = (s%100)//10\n        #print(a, s)\n        if ca <= cs:\n            ans += str(cs-ca)\n            a//=10\n            s//=10\n            \n        else:\n            num = 10*ccs + cs\n            if num-ca > 9 or num-ca < 0:\n                can = 0\n                break\n            else:\n                ans += str(num-ca)\n                s//=100\n                a//=10\n    ans = ans[::-1]\n    if s == 0 and a != 0:\n        can = 0\n    if s != 0 and a == 0:\n        ans = str(s) + ans\n        \n    if can == 1:\n        print(int(ans))\n    else:\n        print(-1)\n        \nfor i in range(int(input())):\n    solve(*map(int, input().split()))",
                true
            ],
            [
                "import random\nt=int(input())\n\nfor test in range(t):\n    x,a=input().split(' ')\n    ans=''\n    counter=len(a)-1\n    flag=False\n    for i in range(len(x)-1,-1,-1):\n        if int(a[counter])>=int(x[i]):\n            if counter<0:\n                flag=True\n                print(-1)\n                break\n            ans+=str(int(a[counter])-int(x[i]))\n        elif int(a[counter])<int(x[i]):\n            if counter<=0:\n                flag=True\n                print(-1)\n                break\n            if int(a[counter-1:counter+1])-int(x[i])>9 or int(a[counter-1:counter+1])-int(x[i])<0:\n                print(-1)\n                flag=True\n                break\n            ans+=str(int(a[counter-1:counter+1])-int(x[i]))\n            counter-=1\n        counter-=1\n\n    if flag==False:\n        if counter>=0:\n            ans+=a[counter::-1]\n        if int(ans[::-1])>int(a):\n            print(-1)\n        else:\n            print(int(ans[::-1]))\n",
                true
            ],
            [
                "\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\nlogging.basicConfig(format=\"%(message)s\", level=logging.WARNING,)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\n# 30 MINUTES ATLEAST !!!!\n\n###################################################################################################################\n\n\ndef solve():\n    a, s = inp()\n    b = 0\n    mul = 1\n    fl = 0\n    while s:\n        p = s % 10\n        q = a % 10\n        s //= 10\n        a //= 10\n        if p < q:\n            if not ((s % 10) == 1):\n                fl = 1\n                break\n            p += 10\n            s //= 10\n\n        b += mul * (p - q)\n        mul *= 10\n\n    if a:\n        fl = 1\n\n    print(-1 if fl else b)\n\n\nif __name__ == '__main__':\n    multi = True\n    t = 1\n\n    def inp(): return map(int, input().split())\n\n    if multi:\n        t = int(input())\n\n    while t:\n        t -= 1\n        solve()\n",
                true
            ],
            [
                "def wrongadd(a, b):\n    a = int(a)\n    a = str(a)\n    b = str(b)\n    n = max(len(a), len(b))\n    a = a.zfill(n)\n    b = b.zfill(n)\n    c = []\n    for i in range(n-1, -1, -1):\n        c.append(str(int(a[i]) + int(b[i])))\n    c = c[::-1]\n    c = ''.join(c)\n    return c\n\nt = int(input())\nfor _ in range(t):\n    a, s = input().split()\n    al, sl = len(a), len(s)\n    n = max(len(a), len(s))\n    a = a.zfill(n)\n    s = s.zfill(n)\n    start, end = n-1, n\n    b = ''\n    for i in range(n-1, -1, -1):\n        if i < n - al and start < 0:\n            break\n        elif start < 0:\n            b = -1\n        if a[i] <= s[start:end]:\n            b += str(int(s[start:end]) - int(a[i]))\n            start -= 1\n            end -= 1\n            if start < 0:\n                if i > n - al:\n                    b = -1\n                break\n        else:\n            start -= 1\n            try:\n                b += str(int(s[start:end]) - int(a[i]))\n                start -= 1\n                end = start + 1\n            except:\n                b = -1\n                break\n    if b == -1:\n        print(b)\n        continue\n    b = b[::-1]\n    try:\n        b = int(b)\n    except:\n        print(-1)\n        continue\n    if wrongadd(a, b) == s:\n        print(b)\n    else:\n        print(-1)",
                true
            ],
            [
                "cases = int(input())\nfor c in range(cases):\n    a, s = map(int, input().split())\n    b = 0\n    digit = 1\n\n    sLen = len(str(s))\n    for i in range(sLen):\n        av = a % 10 #last a\n        rv = s % 10 #last r\n        bv = rv -av #last b\n\n        if bv < 0:\n            #need another digit for r\n            rv = s % 100\n            bv = rv -av #last b\n            if bv >= 10 or bv <= 0:\n                b = -1\n                break\n            s //= 10\n        b = b +bv *digit\n        digit *= 10\n        a //= 10\n        s //= 10\n    \n    print(b)\n",
                true
            ],
            [
                "import sys\nimport os.path\n \nif(os.path.exists('input.txt')) :\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    sys.stderr = open(\"error.txt\", \"w\")\n    \ndepth = 200001\nmod = 1000000007 \nlim = mod * mod\nsys.setrecursionlimit(depth) \n \nlinp = lambda: list(minp())\nminp = lambda: map(int, input().split())\n \nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\n\ndxy = [(1, 0),(-1, 0),(0, 1),(0, -1)]\n\ndef expo(a, b) :\n    if not b : return 1\n    v = expo(a, b//2)\n    v = (v * v) % mod\n    if b%2 : v = (v * a) % mod\n    return v\n\ndef modinv(a, b) :\n    d = expo(b, mod-2)\n    v = (a * d) % mod\n    return v\n\ndef checkPrime(n) :\n    if n < 4 : return True\n    if n%2 == 0 : return False\n    for i in range(3, int(sqrt(n))+1, 2) :\n        if n%i == 0 :\n            return False\n    return True    \n\ndef highestPowerof2(x) :\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n\n    return x ^ (x >> 1)\n\ndef isVowel(char):\n    return char.lower() in 'aeiou'\n\nfor _ in range(int(input())) :\n    a, s = map(str, input().split())\n    b = \"\"\n    n = len(s) \n    i = n-1\n    f = True\n    \n    for e in reversed(a) :\n        if i < 0 : \n            f = False\n            break\n        if int(e) <= int(s[i]) :\n            b += str((int(s[i])-int(e)))\n            i -= 1\n        else :\n            if i-1 >= 0 and int(s[i-1]) == 1 :\n                b += str(int(s[i-1:i+1])-int(e))\n            else :\n                f = False \n            i -= 2\n\n    b = b[::-1]\n    if f and i >= 0 : \n        b = s[:i+1] + b \n\n    if f : print(int(b))\n    else : print(-1)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, s = list(map(int, input().split()))\n    ans = []\n    flag = False\n    while s:\n        x = a%10\n        y = s%10\n        #print(x, y)\n        if x <= y:\n            ans.append(y-x)\n        else:\n            s //= 10\n            y += 10*(s%10)\n            if y > x and 10 <= y <= 19:\n                ans.append(y-x)\n            else:\n                flag = True\n                break\n        a //= 10\n        s //= 10\n    if flag or a:\n        print(-1)\n    else:\n        while(ans[-1] == 0):\n            ans.pop(-1)\n        print(*ans[::-1], sep=\"\")",
                true
            ],
            [
                "from math import *\n \n#from math import factorial as fact, comb as ncr \nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\n\nfrom array import array\nfrom re import search\n \nli=lambda : list(map(int,input().split()))\narr=lambda a: array('i',a)\nbi=lambda n: bin(n).replace(\"0b\", \"\")\nyn=lambda f: print('NYOE S'[f::2])\nsbstr=lambda a,s: search('.*'.join(a),s)\n\n\n'''def isprime(a):\n    if a==2: return True\n    elif a%2==0: return False\n    n=3\n    while n<=a**0.5:\n        if a%n==0:\n            return False\n        n+=2\n    return True\n'''\n'''def nf(n,a):\n    b=a*a\n    c=b*a\n    d=c*a\n    e=n\n    ct=0\n    while e%a==0:\n        if e%d==0:\n            ct+=4\n            e=e//d\n        if e%c==0:\n            ct+=3\n            e=e//c\n        if e%b==0:\n            ct+=2\n            e=e//b\n        if e%a==0:\n            ct+=1\n            e=e//a\n    return ct\n'''\n\n\ndef solve():\n    for _ in range(int(input())):\n        s,a=input()[::-1].split()\n        up=len(s)-len(a)\n        sm=[]\n        i=0\n        j=0\n        f=True\n        while i<len(s) and j<len(a):\n            if int(s[i])<int(a[j]):\n                if i<len(s)-1 and s[i+1]=='1':\n                    sm+=[s[i+1]+s[i]]\n                    i+=2\n                    j+=1\n                else:f=False;break\n            else:sm+=[s[i]];i+=1;j+=1\n        if i<len(s):\n            sm+=[s[i:][::-1]]\n            a+='0'\n        if not f or len(sm)!=len(a):print(-1);continue\n        ans=[]\n        for i in range(len(a)):\n            t=int(sm[i])-int(a[i])\n            if t<0:f=False;break\n            else:ans.append(str(t))\n        if not f:print(-1)\n        else:print(int(''.join(ans[::-1])))\n\n\nsolve()",
                true
            ],
            [
                "import math\n\nif __name__ == '__main__':\n    res = []\n    t = int(input())\n\n    for i in range(t):\n        a, s = map(int, input().split())\n\n        degree = 1\n\n        b = 0\n        \n        \n        while a > 0 and s > 0:\n            \n            if a%10 > s%10:\n                if s%100//10 == 1:\n                    b = b + (s%100 - a%10) * degree\n                    #print(b)\n                    degree = degree*10\n                    s = s // 100\n                    a = a // 10\n                else:\n                    b = -1\n                    break\n            else:\n                b = b + (s%10 - a%10) * degree\n                #print(b)\n                degree = degree*10\n                s = s // 10\n                a = a // 10\n        \n        if (s > 0 and a==0):\n            b = b + s * degree\n            \n        if (s==0 and a > 0):\n            b = -1\n\n        res.append(b)\n            \n    for r in res:\n        print(r)\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    a,s=input().split()\n    otv=''\n    i=len(a)-1\n    j=len(s)-1\n    while i>=0:\n        if j>-1 and int(a[i])>int(s[j]):\n            if j>0:\n                otv=str(int(s[j-1:j+1])-int(a[i]))+otv\n                if (int(s[j-1:j+1])-int(a[i]))>10 or (int(s[j-1:j+1])-int(a[i]))<0:\n                    otv=-1\n                    break\n            i-=1\n            j-=2\n        else:\n            if j>-1:\n                otv=str(int(s[j])-int(a[i]))+otv\n            i-=1\n            j-=1\n    if int(otv)==-1 or int(otv)>=int(s) or i>j:\n        print(-1)\n    else:\n        if j>-2:\n            otv=s[:j+1]+otv\n        otv=int(otv)\n        print(otv)\n    \n    \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    arr=[int(x) for x in input().split()]\n    a,s=arr[0],arr[1]\n    ans=\"\"\n    while(a>0):\n        temp1=a%10\n        temp2=s%10\n        temp3=s%100\n        r1=temp1\n        r2=temp1+9\n        a=a//10\n        if(temp2>=r1 and temp2<=r2):\n            ans=str(temp2-temp1)+ans\n            s=s//10\n        elif(temp3>=r1 and temp3<=r2):\n            ans=str(temp3-temp1)+ans\n            s=s//100\n        else:\n            print(-1)\n            break\n    else:\n        \n        if(s>0):\n            ans=str(s)+str(ans)\n        print(int(ans))    ",
                true
            ],
            [
                "from sys import stdin \n\ntest = int(stdin.readline())\n\nfor t in range(test):\n    a, result = map(str, stdin.readline().split())\n    b = ''\n    state = True\n    while True:\n        tmp1 = int(result[-1])\n        tmp2 = int(a[-1])\n        result = result[:-1]\n        if len(a) == 1:\n            a = '0'\n        else:\n            a = a[:-1]\n        \n        if tmp1 >= tmp2:\n            b = str(tmp1 - tmp2) + b \n        else:\n            if result == '':\n                state = False\n                break\n            tmp1 = (int(result[-1]))*10 + int(tmp1)\n            result = result[:-1]\n            if tmp1 > 18:\n                state = False \n                break \n            elif tmp1 - tmp2 < 0:\n                state = False\n                break\n            else:\n                b = str(tmp1 - tmp2) + b \n        \n        if result == '':\n            break\n    \n    if state:\n        if a != '0':\n            print(-1)\n        else:\n            print(int(b))\n    else:\n        print(-1)\n\n# B problem\n# nums = set([1])\n# i = 2\n# while True:\n#     if i*i <= 1000000000:\n#         nums.add(i*i)\n#     if i*i*i <= 1000000000:\n#         nums.add(i*i*i)\n        \n#     if i*i>1000000000 and i*i*i>1000000000:\n#         break \n#     i+=1\n\n# nums = list(nums)\n# nums.sort()\n\n# for t in range(test):\n#     n = int(stdin.readline())\n    \n#     cnt = 0\n#     for i in nums:\n#         if i<=n:\n#             cnt+=1\n#         else:\n#             break \n    \n#     print(cnt)\n\n# A problem\n# for t in range(test):\n#     s = stdin.readline().rstrip()\n    \n#     if len(s)%2==1:\n#         print(\"NO\")\n#     else:\n#         if s[:len(s)//2] == s[len(s)//2:]:\n#             print(\"YES\")\n#         else:\n#             print(\"NO\")\n\n",
                true
            ],
            [
                "# import time\n\n\ndef solve(a: int, s: int):\n    result = []\n    while s > a >= 0:\n        mod_a = a % 10\n        mod_s = s % 10\n        if mod_s < mod_a:\n            mod_ss = s % 100\n            if mod_ss // 10 != 1:\n                print(-1)\n                return\n            result.append(mod_ss - mod_a)\n            s = s // 100\n        else:\n            result.append(mod_s - mod_a)\n            s = s // 10\n        a = a // 10\n\n    if s < a:\n        print(-1)\n    else:\n        result.append(s - a)\n        print(int(''.join(map(str, reversed(result)))))\n\n\nn = int(input())\nvalues = [list(map(int, input().split())) for _ in range(n)]\n# tt = time.time()\nfor v in values:\n    solve(*v)\n# print((time.time() - tt))\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    b = ''\n    a, s = map(str, input().split())\n    ind = len(a)\n    i = len(s)\n    s = '0' + s\n    a = '0' + a\n    f = 1\n    # print(a)\n\n    # print(s[ind - 2:ind], b)\n    # print(s[ind - 1])\n    while i > 0 and ind >= 0:\n        # print(i, ind)\n        # print(\"ind - a[i]:\", int(s[ind - 1]) - int(a[i]))\n        if int(s[i]) - int(a[ind]) < 0:\n            if i <= 1:\n                f = 0\n                break\n\n            val = int(s[i - 1:i + 1]) - int(a[ind])\n            # print(s[i - 1:i + 1], a[ind])\n            if val > 9:\n                f = 0\n                break\n            else:\n                b += str(val)\n            i -= 1\n        else:\n            # print(s[i], a[ind])\n            b += str(int(s[i]) - int(a[ind]))\n        ind -= 1\n        i -= 1\n    for j in range(i, -1, -1):\n        b += s[j]\n    #print('ans')\n    # print(b)\n    if f and ind < 1 and b != '':\n        try:\n            print(int(b[::-1]))\n        except Exception:\n            print(-1)\n    else:\n        print(-1)\n    #print(ind)\n",
                true
            ],
            [
                "from sys import stdin, stdout\nrd = lambda: list(map(int, stdin.readline().split()))\nrds = lambda: stdin.readline().rstrip()\nii = lambda: int(stdin.readline())\nINF = 1 << 62\nmod = 10**9 + 7\n\ndef solve(a, s):\n    \n    \n    i_lim = 0\n    sp = '0' * (abs(len(a) - len(s)))\n    if len(a) < len(s):\n        a = sp + a\n        i_lim = len(sp)\n    else:\n        s = sp + s\n    \n    \n\n    # greeed\n    i = len(a)-1\n    j = len(s)-1\n    b = []\n    ok = True\n    while i >= 0 and j >= 0:\n        an = int(a[i])\n        sn1 = int(s[j])\n        \n        if sn1 >= an:\n            b.append(sn1 - an)\n            i -= 1\n            j -= 1\n        else:\n            if j == 0:\n                ok = False\n                break\n            else:\n                sn1 = int(s[j-1:j+1])\n                if sn1 > 18:\n                    ok = False\n                    break\n                d = sn1-an\n                if d > 9 or d < 0:\n                    ok = False\n                    break\n                b.append(d)\n                i-=1\n                j-= 2\n    \n    if j >= 0:\n        ok = False\n\n    #print('i', i, 'j', j, 'a', a, 's', s, 'b', b)\n\n    if i >= i_lim:\n        ok = False\n\n    if not ok:\n        return -1\n    else:\n        b = b[::-1]\n        return int(''.join(map(str, b)))\n\n\n\nfor _ in range(ii()):\n    a, s = rds().split(' ')\n\n    print(solve(a,s))\n\n\n#stdout.write(' '.join(map(str, ar)))\n#stdout.write(f'{res}')\n\n",
                true
            ],
            [
                "'''\n\n                            Online Python Compiler.\n                Code, Compile, Run and Debug python program online.\nWrite your code in this editor and press \"Run\" button to execute it.\n\n'''\n\nnumcases = int(input())\n\nfor i in range(numcases):\n    nums = input()\n    nums = nums.split()\n    nums[0]=nums[0].zfill(len(nums[1]))\n    nums[0]=nums[0][::-1]\n    nums[1]=nums[1][::-1]\n    temp=nums[0]\n    nums[0]=nums[1]\n    nums[1]=temp\n    #print(nums)\n    try:\n        c=0\n        out=\"\"\n        for i, x in enumerate(nums[1]):\n            if len(nums[0])>(i+c):\n                n=int(x)\n                a=int(nums[0][i+c])\n                \n                if n==a:\n                    out+='0'\n                elif n>a:\n                    d=int(nums[0][i+c:i+c+2][::-1])\n                    if (d-n) < 10:\n                        out+=str(d-n)\n                        #print('in here'+str(nums[0][i+c:i+c+2][::-1])+out)\n\n                        c+=1\n                    else:\n                        #print('in+sfd-')\n                        raise Exception\n                elif n<a:\n                    out+=str(a-n)\n            elif int(nums[1][i:]):\n                if len(str(int(nums[1][i:])))>len(str(int(nums[0][i+c:]))):\n                    #print('nums[1][i-1:]'+str(nums[1][i-1:]))\n                    raise Exception\n\n        print(int(out[::-1]))\n    except:\n        print(-1)\n",
                true
            ],
            [
                "from collections import defaultdict, Counter,deque\nfrom math import sqrt, log10, log, floor, factorial,gcd\nfrom bisect import bisect_left, bisect_right,insort\nfrom itertools import permutations,combinations\nimport sys, io, os\ninput = sys.stdin.readline\n# input=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# sys.setrecursionlimit(10000)\ninf = float('inf')\nmod = 10 ** 9 + 7\ndef yn(a): print(\"YES\" if a else \"NO\")\nceil = lambda a, b: (a + b - 1) // b\nt=int(input())\nfor i in range(t):\n    a,s=[list(i) for i in input().split()]\n    b=[]\n    flg=0\n    while a:\n        if not s:\n            flg=1\n            break\n        if a[-1]<=s[-1]:\n            b.append(int(s.pop())-int(a.pop()))\n        else:\n            if len(s)<2:\n                flg=1\n                break\n            t=int(s[-2]+s[-1])\n            s.pop()\n            s.pop()\n            val=t-int(a.pop())\n            if val>=10 or val<0:\n                flg=1\n                break\n            b.append(val)\n    while s:\n        b.append(int(s.pop()))\n    b.reverse()\n    # print(b)\n    if flg==1:\n        print(-1)\n    else:\n        b=int(\"\".join([str(i) for i in b]))\n        print(b)\n",
                true
            ],
            [
                "def add(a, b):\n    ret = ''\n    while len(a) < len(b):\n        a = '0' + a\n    while len(b) < len(a):\n        b = '0' + b\n    ret = ''\n    for i in range(len(a) - 1, -1, -1):\n        ret = str(int(a[i]) + int(b[i])) + ret\n    return ret\n\ndef solve():\n    a, s = input().split()\n    i = len(a) - 1\n    j = len(s) - 1\n    ans = ''\n    while i >= 0 and j >= 0:\n        tmp = ''\n        while j >= 0 and (tmp == '' or int(tmp) < int(a[i])):\n            tmp = s[j] + tmp\n            j -= 1\n        if tmp == '' or int(tmp) < int(a[i]):\n            ans = '-1'\n            break\n        else:\n            ans = str(int(tmp) - int(a[i])) + ans\n        i -= 1\n    if i > -1:\n        ans = '-1'\n    else:\n        while j >= 0:\n            ans = s[j] + ans\n            j -= 1\n    if ans != '-1':\n        if add(a, ans) != s:\n           ans = '-1'\n\n    print(int(ans))\n\nt = 1\nt = int(input())\n\nfor tc in range(t):\n    solve()",
                true
            ],
            [
                "\nt = int(input())\nfor _ in range(t):\n    a, s = map(int, input().split())\n    b = \"\"\n    \n    diga, digs = 0, 0\n    \n    while a > 0:\n        diga = a % 10\n        digs = s % 10\n        if diga > digs:\n            digs = s%100\n            s //= 10\n        a //= 10\n        s //= 10\n        if not (digs - diga <= 9 and digs - diga >= 0):\n            b = -9\n            break\n        b = str(digs - diga) + b\n    \n    if int(b) < 0:\n        print(-1)\n        continue\n    b = str(s) + b\n    print(int(b))",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, s = input().split()\n    i = len(a) - 1\n    j = len(s) - 1\n    b = []\n    pos = True\n    while(j >= 0):\n        if(j < i):\n            pos = False\n            break\n        if(i < 0):\n            b.append(int(s[j]))\n            j -= 1\n        elif(int(s[j]) >= int(a[i])):\n            b.append(int(s[j]) - int(a[i]))\n            j -= 1\n            i -= 1\n        else:\n            if(j == 0):\n                pos = False\n                break\n            else:\n                b.append(int(s[j - 1])*10 + int(s[j]) - int(a[i]))\n                j -= 2\n                i -= 1\n    for i in b:\n        if(int(i) < 0 or int(i) > 9):\n            pos = False\n            break\n    if(pos):\n        b.reverse()\n        while(int(b[0]) == 0):\n            b.pop(0)\n        for i in b:\n            print(i, end='')\n        print()\n    else:\n        print(-1)",
                true
            ],
            [
                "sr=lambda: input()\nir=lambda: int(sr())\nlr=lambda: list(map(int, sr().split()))\n\ninf = 10**18\n# mod = 10**9+7\nmod = 998244353\n\nif __name__=='__main__':\n    test = ir()\n    for t in range(test):\n        a,s = lr()\n        b=0\n        pre_b=1\n        n=len(str(a))\n        flg = True\n        for i in range(n):\n            tmp_a = a%10\n            a = a//10\n            tmp_s = s%10\n            if tmp_a > tmp_s:\n                tmp_s = s%100\n                tmp_b = tmp_s-tmp_a\n                if 0 <= tmp_b < 10:\n                    b+=tmp_b*pre_b\n                    pre_b*=10\n                    s = s//100\n                else:\n                    flg=False\n                    break\n            else:\n                tmp_b = tmp_s-tmp_a\n                if 0 <= tmp_b < 10:\n                    b+=tmp_b*pre_b\n                    pre_b*=10\n                    s=s//10\n                else:\n                    flg=False\n                    break\n        if flg:\n            if s != 0:\n                b+=pre_b*s\n\n            print(b)\n        else:\n            print(-1)\n",
                true
            ],
            [
                "t = int(input())\nwhile (t > 0):\n    t -= 1\n    a, s = map(int, input().split())\n    a2 = str(a)\n    s2 = str(s)\n    ccc = a2\n    a2 = \"0\" * (len(s2) - len(ccc)) + ccc\n    #print(a2, s2)\n    n = len(a2)\n    m = len(s2)\n    i = 0\n    j = 0\n    ans = \"\"\n    fl = True\n    while (i < n and j < n):\n        d1 = int(a2[-1 - i])\n        d2 = int(s2[-1 - j])\n        if (d2 >= d1):\n            ans += str(d2 - d1)\n            i += 1\n            j += 1\n        else:\n            if (j == n - 1):\n                break\n            tt = str(int(s2[-2 - j]) * 10 + d2 - d1)\n            #tt = tt[::-1]\n            if (len(tt) > 1):\n                break\n            ans += tt\n            i += 1\n            j += 2\n    ans += \"0\" * (n - len(ans))\n    ans = ans[::-1]\n    #print(a, ans)\n    st = []\n    for i in range(n - 1, -1, -1):\n        st.append(str(int(ans[i]) + int(a2[i])))\n    res = \"\"\n    st = st[::-1]\n    for i in range(len(st)):\n        res += st[i]\n    #print(res, s2)\n    #print(ans)\n    #print(\"OUTPUT\", end=' ')\n    res = str(int(res))\n    if (res == s2):\n        #ans = ans[::-1]\n        print(int(ans))\n    else:\n        print(-1)\n",
                true
            ],
            [
                "import math\n\ndef solve():\n    x=input().split()\n    a=int(x[0])\n    s=int(x[1])\n    ans=[]\n    while(s>0 and a>0):\n        numa=a%10\n        nums=s%10\n        if(nums>=numa):\n            ans.insert(0,nums-numa)\n            \n        else:\n            s=s//10\n            nums+=(s%10)*10\n            if(nums>numa and nums>=10 and nums<=18):\n                ans.insert(0,nums-numa)\n            else:\n                return -1\n        s=s//10\n        a=a//10\n        #print(\"ans\"+str(ans))\n    if(a!=0):\n        return -1\n    while(s>0):\n        nums=s%10\n        ans.insert(0,nums)\n        s=s//10\n    ans=[str(i) for i in ans]\n    ans=''.join(ans)\n    ans=int(ans)\n    return ans\n\nn=int(input())\nfor i in range(n):\n    print(solve())\n\n",
                true
            ],
            [
                "def insert (source_str, insert_str, pos):\n    return source_str[:pos]+insert_str+source_str[pos:]\ndef check(a,b,s):\n  temp = \"\"\n  for i in range(len(a)-1,-1,-1):\n    temp = insert(temp, str(int(a[i])+int(b[i])),0)\n  return int(temp) == int(s)\ndef solve():\n  a,s = input().split()\n  b = \"\"\n  i = len(a)-1\n  j = len(s)-1\n  while j>=0 or i>=0:\n    if i<0:\n      a = insert(a,'0',0)\n      i=0\n    if j<0:\n      s = insert(s, '0',0)\n      j=0\n    t1 = a[i]\n    t2 = s[j]\n    while int(t2) < int(t1):\n      j-=1\n      t2 = insert(t2, s[j], 0)\n    if int(t2)-int(t1)>9:\n      print(-1)\n      return\n    b= insert(b,str(int(t2)-int(t1)),0)\n    i-=1\n    j-=1\n  if check(a,b,s):\n    print(int(b))\n  else:\n    print(-1)\n  \nfor _ in range(int(input())):\n  solve()\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(0,t):\n    l=list(map(int,input().split()))\n    a=l[0]\n    s=l[1]\n    s1=[]\n    a1=[]\n    #s1 and a1 contain the digits of s and a\n    while(s>0): \n        s1.append(s%10)\n        s=s//10\n    while(a>0):\n        a1.append(a%10)\n        a=a//10\n    n=0 #stores the difference\n    \n    i=0 #iterate through a1,s1\n    j=0\n    \n    k=0 #accounts for -1\n    p=0 #copy of i. used for exponentiation once we wish to stop incrementing i.\n    \n    c1=len(s1) #ungrouped elements left in s1\n    c2=len(a1) #ungrouped elements left in a1\n\n    #perform the special subtraction operation\n    while(j<len(s1)):\n        \n        if(i==len(a1)): #we have reached the end of a\n            d=s1[j]\n            n+=d*(10**p) #instead of incrementing i, we will increment p\n            j+=1\n            p+=1\n\n        elif(i<=len(a1)-1):\n            \n            d=s1[j]-a1[i]\n\n            if(d>=0): #normal subtraction\n                n+=d*(10**i)\n                i+=1\n                j+=1\n                p=i\n                c1-=1\n                c2-=1\n                \n            elif(d<0): #eg 1-6 is <0 so we instead group 11 with 6 (example case)\n                \n                if(j<len(s1)-1 and s1[j+1]==1): #there must be something to the left to group, and that should be 1.\n                    d=10+s1[j]-a1[i]\n                    n+=d*(10**i)\n                    i+=1\n                    j+=2\n                    p=i\n                    c1-=2 #2 elements of s used for grouping.\n                    c2-=1\n                else: #nothing left to group, or s1[j+1] is something other than 1\n                    k=1 #we have to print -1 \n                    i+=1\n                    p=i\n                    j+=1\n    if(c2>c1):\n        k=1\n    \n    if(k==1):\n        print(-1)\n    else:\n        print(n)\n      ",
                true
            ],
            [
                "import io, os\nimport sys \nfrom sys import stdin\n\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque, namedtuple\nfrom heapq import heappush, heappop\nfrom math import gcd, ceil, floor, factorial, sqrt\nfrom itertools import combinations, permutations\n\n# input = sys.stdin.buffer.readline\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\ninput = sys.stdin.readline\n\ndef work():\n    ans = 0 \n\n    return \n\n# sys.setrecursionlimit(200010)\ndef main():\n    test = int(input())\n\n    for idt in range(test):\n        # n = int(input())\n        # n, m = map(int, input().split())\n        # a = list(map(int, input().split()))\n        a, s = map(str, input().split())\n\n        n, m = len(a), len(s)\n        a = a[::-1]\n        s = s[::-1]\n        i = j = 0 \n        flag = True \n        b = \"\"\n        while i < n:\n            if j >= m:\n                flag = False \n                break \n\n            x = int(a[i])\n            y = int(s[j])\n            if x <= y:\n                b += str(y - x)\n                i += 1 \n                j += 1 \n            else:\n                if j + 1 < m:\n                    y = int(s[j + 1]) * 10 + int(s[j])\n                    if 0 <= y - x <= 9:\n                        b += str(y - x)\n                        i += 1 \n                        j +=  2 \n                    else:\n                        flag = False \n                else:\n                    flag = False \n            if not flag:\n                break \n        while j < m:\n            b += s[j]\n            j += 1 \n        b = b[::-1]\n        length = len(b)\n        idx = 0 \n        while idx < length and b[idx] == \"0\":\n            idx += 1 \n        b = b[idx:]\n\n        if not flag:\n            b = -1 \n        print(b)\n            \n                \n\n    return \n\n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, s = input().split()\n    a = a[::-1]\n    s = s[::-1]\n    i = 0\n    j = 0\n    f = 1\n    ans = ''\n    while j < len(s):\n        if i == len(a):\n            ans += s[j]\n            j += 1\n            continue\n        if len(a) - i > len(s) - j:\n            f = 0\n            break\n        if int(s[j]) - int(a[i]) < 0:\n            if j < len(s) - 1:\n                j += 1\n                if int(s[j]) == 1:\n                    ans += str(int(s[j]) * 10 + int(s[j - 1]) - int(a[i]))\n                else:\n                    f = 0\n                    break\n            else:\n                f = 0\n                break\n        else:\n            ans += str(int(s[j]) - int(a[i]))\n        i += 1\n        j += 1\n    if f == 0:\n        print(-1)\n    else:\n        print(int(ans[::-1]))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, s = input().split()\n    n = len(a)\n    m = len(s)\n    i = n - 1\n    j = m - 1\n    b = \"\"\n    f = True\n    while i >= 0 and j >= 0:\n        if s[j] >= a[i]:\n            b = str(int(s[j]) - int(a[i])) + b\n            j -= 1\n            i -= 1\n        else:\n            if j-1 < 0:\n                # print(\"here\", i, j)\n                f = False\n                break\n            if not 9 < int(s[j-1:j+1]) < 19:\n                # print(\"here\", i, j, int(s[j:j+2]))\n                f = False\n                break\n            b = str((int(s[j-1:j+1]) - int(a[i]))) + b\n            j -= 2\n            i -= 1\n    if not f or i >= 0:\n        print(-1)\n    else:\n        if j >= 0:\n            b = s[0:j+1] + b\n        print(b.lstrip(\"0\"))",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    a, s =  map(int, input().split())\n    b = 0\n    bdeg = 1\n    while s > 0:\n        s0, a0 = s%10, a%10\n        if s0 >= a0:\n            b += bdeg * (s0-a0)\n            s //= 10\n        elif s%100 - a0 in range(10):\n            b += bdeg * (s%100 - a0)\n            s //= 100\n        else:\n            break\n        a //= 10\n        bdeg *= 10\n    print (-1 if s>0 or a>0 else b)\n\n",
                true
            ],
            [
                "t=int(input(\"\"))\n\ni=0\nfor i in range(t):\n    count=0\n    s=\"\"\n    s1,s2=input().split(\" \")\n    l1=len(s1)\n    l2=len(s2)\n    j=l1-1\n    k=l2-1\n    while j>=0 and k>=0:\n        a=int(s1[j])\n        c=int(s2[k])\n        if(a>c and k>0):\n            b=int(s2[k-1]+s2[k])\n            d=b-a\n            if d>0 and d<10:\n                s=str(d)+s\n                k-=2\n                j-=1\n            else:\n                count+=1\n                break\n        elif(a<c):\n            d=c-a\n            s=str(d)+s\n            j-=1\n            k-=1\n        elif(a==c):\n            s='0'+s\n            k-=1\n            j-=1\n        else:\n            count+=1\n            break\n    if(k>=0 and count==0):\n        k+=1\n        s=s2[:k]+s\n        j=0\n        for j in range(k):\n            s1='0'+s1\n    if(count==0 and (len(s1)==len(s))):\n        print(int(s))\n    else:\n        print('-1')\n        \n    \n    \n",
                true
            ],
            [
                "def given():\n    a = list(map(int, input().split()))\n    return a\ndef main():\n    anisha = given()[0]\n    \n    while anisha > 0:\n        anisha -= 1\n        a,s = list(input().split())\n        b = ''\n        n = len(s)\n        m = len(a)\n        if n > m:\n            a = '0'*(n-m) + a\n        # print(a)\n \n        f = 1\n        # print(s, a, b)\n        while(s and a):\n            if int(s[-1]) >= int(a[-1]):\n                b += str(int(s[-1]) - int(a[-1]))\n                s = s[:-1]\n                a = a[:-1]\n            elif int(s[-2:]) >= int(a[-1]):\n                cha = int(s[-2:]) - int(a[-1])\n                if cha > 9:\n                    f = 0\n                    break\n                b += str(cha)\n                s = s[:-2]\n                a = a[:-1]\n            else:\n                f = 0\n                break\n            # print(s,a,b)\n        a = a.lstrip('0')\n        if len(a) > len(s): f = 0\n        if f:\n            b = int(b[::-1])\n            print(b)\n        else: print(-1)\n        \nmain()",
                true
            ],
            [
                "from collections import defaultdict, Counter,deque\nfrom math import sqrt, log10, log, floor, factorial,gcd\nfrom bisect import bisect_left, bisect_right,insort\nfrom itertools import permutations,combinations\nimport sys, io, os\ninput = sys.stdin.readline\n# input=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# sys.setrecursionlimit(10000)\ninf = float('inf')\nmod = 10 ** 9 + 7\ndef yn(a): print(\"YES\" if a else \"NO\")\nceil = lambda a, b: (a + b - 1) // b\n\nt = int(input())\n\nfor i in range(t):\n    a, s = input().split()\n    a = int(a)\n    s = int(s)\n    a1 = a\n    s1 = s\n    result = ''\n    itr = 0\n    while a > 0 or s > 0:\n        itr += 1\n        ls = s % 10\n        la = a % 10\n\n        if ls < la:\n            ls = s % 100\n            chk = ls - la\n            s = s // 100\n        else:\n            chk = ls - la\n            s = s // 10\n        a = a // 10\n        # print(str(ls)+' '+str(la))\n        result += str(chk)\n        # print(chk)\n        if chk<0 or chk>=10:\n            result=\"-1\"\n\n            break\n\n    if result == \"-1\":\n        print(result)\n    else:\n        while s:\n            result += str(s % 10)\n            s //= 10\n        r = result[::-1]\n        r=int(r)\n        print(r)",
                true
            ],
            [
                "\n        \n\nt = int(input())\nfor _ in range(t):\n    a,s = map(str,input().split())\n    m = len(a)\n    n = len(s)\n    ans = \"\"\n    check = 1\n    i = n-1\n    j = m-1\n    while(i>=0 and j>=0):\n        if int(s[i]) - int(a[j])>=0:\n            ans = ans + str(int(s[i]) - int(a[j]))\n            i = i-1\n            j = j-1\n        elif i-1>=0:\n            if 0<=(int(s[i-1:i+1]) - int(a[j]))<=9:\n                ans = ans + str(int(s[i-1:i+1]) - int(a[j]))\n                i = i-2\n                j = j-1\n            else:\n                check = 0\n                break\n        else:\n            check = 0\n            break\n    while(i>=0):\n        ans = ans + s[i]\n        i = i-1\n        \n    if i != -1 or j != -1:\n        check = 0\n        \n    if check:\n        ans  = int(ans[::-1])\n        print(ans)\n    else:\n        print(-1)\n        \n            \n        \n        \n    \n    \n    ",
                true
            ],
            [
                "import sys\nfin = sys.stdin\n\ndef tanya_substract(a, s):\n    s = s[::-1]\n    a = a[::-1]\n    \n    b = []\n    while s:\n        c_s = s[0]\n        if a == '':\n            a = '0'    \n        c_a = a[0]\n            \n        c_b = int(c_s) - int(c_a)  \n        if c_b < 0:\n            if len(s) < 2 or s[1] != '1':\n                return -1\n            else:\n                s = s[1:]\n            c_b %= 10\n        b.append(str(c_b))\n        a = a[1:]\n        s = s[1:]\n    \n    b = b[::-1]\n    if not b:\n        return -1\n    return ''.join(b).lstrip('0') if a == '' and s == '' else -1\n    \n    \nn = int(fin.readline())\nfor i in range(n):\n    l = fin.readline().rstrip('\\n')\n    a, s = l.split()\n    b = tanya_substract(a, s)\n    print(b)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b = map(str,input().split())\n    l1 = len(a)\n    l2 = len(b)\n    flag = True\n    k = \"\"\n    while l1>0 and l2>0:\n        if a[-1]<=b[-1]:\n            l1-=1\n            l2-=1\n            a1 = a[-1]\n            b1 = b[-1]\n            a = a[:-1]\n            b = b[:-1]\n            a1 = int(a1)\n            b1 = int(b1)\n            if not (b1-a1 <10):\n                flag = False\n                break\n            else:\n                k = f\"{b1-a1}\" + k\n            \n        else:\n            l1-=1\n            l2-=2\n            if l2>=0:\n                pass\n            if l2<0:\n                flag = False\n                break\n            a1 = a[-1]\n            b1 = b[-2:]\n            a = a[:-1]\n            b = b[:-2]\n            a1 = int(a1)\n            b1 = int(b1)\n            if not (b1-a1 <10 and b1-a1>=0):\n                flag = False\n                break\n            else:\n                k = f\"{b1-a1}\" + k\n    if not (l1 or not flag):\n        print(int(b+k))\n    else:\n        print(-1)\n        ",
                true
            ],
            [
                "for i in range(int(input())):\n    a,s = map(int,input().split())\n    a = str(a)\n    s = str(s)\n    b = []\n    jud = 0\n    now = len(s)-1\n    for i in range(len(a)-1,-1,-1):\n        if now < 0:\n            jud = 1\n            break\n        if int(a[i]) > int(s[now]):\n            if now <= 0 or s[now-1] != \"1\":\n                jud = 1\n                break\n            b.append(10-(int(a[i])-int(s[now])))\n            now -= 2\n        else:\n            b.append(int(s[now])-int(a[i]))\n            now -= 1\n    \n    for i in range(now,-1,-1):\n        b.append(s[i])\n    n = len(b)\n    for i in range(n-1,-1,-1):\n        if b[i] == 0:\n            b.pop(-1)\n        else:\n            break\n    \n    if jud == 1:\n        print(-1)\n    else:\n        if b == []:\n            print(0)\n        else:\n            ans = \"\"\n            for i in range(len(b)-1):\n                ans+= str(b[-(i+1)])\n            ans += str(b[0])\n            print(int(ans))",
                true
            ],
            [
                "for iq in range(int(input())):\n    a,s=map(int,input().split())\n    if a>s:\n        print(-1)\n    else:\n        s=[int(i) for i in str(s)]\n        a=[int(i) for i in str(a)]\n        b=[]\n        while len(a)!=0:\n            if len(s)==0:\n                b.append(-1)\n                break\n            if s[-1]<a[-1]:\n                if len(s)<2:\n                    b.append(-1)\n                    break\n                b.append(s[-2]*10+s[-1]-a[-1])\n                s.pop()\n            else:\n                b.append(s[-1]-a[-1])\n            s.pop()\n            a.pop()\n        f=0\n        for i in b:\n            if i>=10 or i<0:\n                print(-1)\n                f=1\n                break\n        b=b[::-1]\n        if not f:\n            i=0\n            if len(s)==0:\n                while i!=len(b) and b[i]==0:\n                    i+=1\n                if i==len(b):\n                    b.append(0)\n            print(*s,*b[i:],sep='')",
                true
            ],
            [
                "# import collections\n# import random\n# import math\n# import itertools\n# import math\n# import math\n#import bisect\n# from collections import defaultdict\n# import itertools\n# from sys import stdin, stdout\n# import math\n# import math\n# import bisect\n# import bisect\n# import collections\n# import itertools\n# import math\n# import collections\n# import itertools\n# import math\nimport bisect\nimport collections\nimport math\nimport sys\n\n# import operator\n# from decimal import Decimal\n\n# sys.setrecursionlimit(10**6)\n\n\n\n\n\np2D = lambda x: print(*x, sep=\"\\n\")\n\n\ndef II(): return int(sys.stdin.buffer.readline())\n\n\ndef MI(): return map(int, sys.stdin.buffer.readline().split())\n\n\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\n\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\n\ndef BI(): return sys.stdin.buffer.readline().rstrip()\n\n\ndef SI(): return sys.stdin.buffer.readline().rstrip().decode()\n\n\ndef li(): return [int(i) for i in input().split()]\n\n\ndef lli(rows): return [li() for _ in range(rows)]\n\n\ndef si(): return input()\n\n\ndef ii(): return int(input())\n\n\ndef ins(): return input().split()\n\n\n# mod = 10**9+7\n# fval = [1]\n# for i in range(1,200001):\n#     x = (fval[-1]*i)%mod\n#     fval.append(x)\n#\n# ifac = [1]*(200001)\n# ifac[200000] = pow(fval[200000], -1, mod)\n# for i in range(200000-1, 1, -1): ifac[i] = ifac[i+1]*(i+1)%mod\n# _________________ For taking Input from the Text Files __________________\n# import os.path\n#\n# if (os.path.exists('input.txt')):\n#     sys.stdin = open(\"input.txt\", \"r\")\n#     sys.stdout = open(\"output.txt\", \"w\")\n#     sys.stderr = open(\"error.txt\", \"w\")\n\ndef drank(d, processing, da, rank):\n    tmp = 10 ** 9\n    if len(d[da]) == 1:\n        return 1\n    for di in d[da]:\n        if processing[di - 1] == 0:\n            processing[di - 1] = 1\n            tmp = min(tmp, drank(d, processing, di, rank))\n            processing[di - 1] = 0\n    rank[da - 1] = tmp + 1\n    return tmp + 1\n\n\n\ndef binary_search(n, a):\n    l = len(a)\n    low = 0\n    high = l-1\n    while high>=low:\n        mid = (high+low)//2\n        if a[mid] == n:\n            return mid\n        elif a[mid]>n:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\n\nis_prime = [True]*(10**6+1)\ndef primeseive(n):\n    is_prime[0] = is_prime[1] = False\n    i = 2\n    while i*i<=n:\n        if is_prime[i] == True:\n            for j in range(i*i,n+1,i):\n                is_prime[j] = False\n        i+=1\n\n\ndef solve():\n    a, s = si().split(' ')\n    i = 0\n    j = 0\n    la = len(a)\n    ls = len(s)\n    a = a[::-1]\n    s = s[::-1]\n    #print(s)\n    #print(a)\n    ans = ''\n    while i<la:\n        if j>=ls:\n            return -1\n        if a[i]<=s[j]:\n            ans+= str(int(s[j])-int(a[i]))\n            i+=1\n            j+=1\n        else:\n            if j+1<ls and s[j+1]=='1':\n                ans += str(int('1'+s[j])- int(a[i]))\n                i+=1\n                j+=2\n            else:\n                return -1\n    if j!=ls:\n        ans += s[j:]\n    return (ans.rstrip('0'))[::-1]\ndef main():\n    #primeseive(10**6)\n    #print(is_prime)\n\n    for _ in range(ii()):\n        #print(solve(), flush=True)\n        sys.stdout.write(str(solve()) + \"\\n\")\n    #print(solve())\n\n    #     z += str(ans) + '\\n'\n    # print(len(ans), ' '.join(map(str, ans)), sep='\\n')\n    # stdout.write(z)\n\n\n# for interactive problems\n# print(\"? {} {}\".format(l,m), flush=True)\n# or print this after each print statement\n# sys.stdout.flush()\n\n\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, c = input().split()\n    while a and a[0] == '0':\n        a = a[1:]\n    while c and c[0] == '0':\n        c = c[1:]\n    i, j = len(c) - 1, len(a) - 1\n    t = 0\n    if len(c) < len(a) or c == a:\n        print(-1)\n        continue\n    s = ''\n    br = False\n    while j > -1:\n        if i < j:\n            print(-1)\n            br = True\n            break\n        if c[i] < a[j]:\n            if i <= 0 or c[i - 1] == '0' or int(c[i - 1:i + 1]) > 18:\n                print(-1)\n                br = True\n                break\n            s = str(int(c[i - 1:i + 1]) - int(a[j])) + s\n            i, j = i - 2, j - 1\n        else:\n            s = str(int(c[i]) - int(a[j])) + s\n            i, j = i - 1, j - 1\n    if br:\n        continue\n    if i > -1:\n        s = c[:i + 1] + s\n    while len(s) > 1 and s[0] == '0':\n        s = s[1:]\n    print(s)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, s = map(int, input().split())\n    b = 0\n    c = 1\n    while s > 0:\n        a1, s1 = a % 10, s % 10\n        if s1 >= a1:\n            b += c * (s1 - a1)\n            s //= 10\n        elif s % 100 - a1 in range(10):\n            b += c * (s % 100 - a1)\n            s //= 100\n        else:\n            break\n        a //= 10\n        c *= 10\n    print(-1 if s > 0 or a > 0 else b)\n",
                true
            ],
            [
                "t = int(input())\nfor test in range(t):\n    a,s = [x.strip() for x in input().split(' ')]\n    while (len(a) < len(s)): a = '0' + a\n    b = ''\n    while (len(s) > 0) and (len(a) > 0):\n        if (int(s[-1]) >= int(a[-1])): \n            b = str(int(s[-1]) - int(a[-1])) + b\n            s = s[:-1]; a = a[:-1]\n        elif (len(s) == 1) or (s[-2] != '1'):\n            break\n        else:\n            b = str(int(s[-2:]) - int(a[-1])) + b\n            s = s[:-2]; a = a[:-1]\n    if ((len(s) == 0) or (int(s) == 0)) and ((len(a) == 0) or (int(a) == 0)): \n        print(b.lstrip('0'))\n    else: print(-1)",
                true
            ],
            [
                "# cook your dish here\n#import sys\n#sys.setrecursionlimit(10**9) \nll=lambda:map(int,input().split())\nt=lambda:int(input())\nss=lambda:input()\nlx=lambda x:map(int,input().split(x))\nyy=lambda:print(\"YES\")\nnn=lambda:print(\"NO\")\n\nfrom math import log10 ,log2,ceil,factorial as fac,gcd,inf,sqrt,log\n#from itertools import combinations_with_replacement as cs \n#from functools import reduce\nfrom bisect import bisect_right as br,bisect_left as bl,insort\nfrom collections import Counter\n#from math import inf\n\n\nmod=10**9+7\n\n\ndef Nprime(n):\n    if n==2 or n==3:\n        return 0\n    if n==1:\n        return 1\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            return 1\n        i+=1\n    return 0\n\ndef sum_(a,n):\n    d=4\n    s=(n*(2*a+(n-1)*d))//2\n    return s\n    \ndef aux(x,y):\n    if x=='a' and y=='z':\n        return 1\n    if y=='a' and x==\"z\":\n        return 1\n    return abs(ord(x)-ord(y))\ndef aux1(x,y):\n    if x=='a' and y=='z':\n        return 1\n    if y=='z' and x=='a':\n        return 1\n    return ord('z')-ord(y)+ord(x)-ord('a')\nfor _ in range(t()):\n    \n#def f():\n\n    \n\n    a,s=ss().split()\n    \n    n,m=len(a),len(s)\n\n    i=n-1\n    j=m-1\n    b=\"\"\n    fl=0\n    while i>=0 and j>=0:\n\n        if a[i]>s[j]:\n            temp=int(s[j-1]+s[j])-int(a[i])\n            if temp<0:\n                fl=1\n                break\n            b=str(temp)+b\n            j-=2\n            i-=1\n        else:\n            temp=int(s[j])-int(a[i])\n            b=str(temp)+b\n            j-=1\n            i-=1\n            \n    if fl:\n        print(-1)\n    else:\n        k=0\n        while j>=0:\n            b=s[j]+b\n            j-=1\n        while i>=0:\n            b=a[i]+b\n            i-=1\n\n        #print(b)\n        \n        s1=\"\"\n        a='0'*(max(len(a),len(b))-len(a))+a\n        b='0'*(max(len(a),len(b))-len(b))+b\n        i=len(a)-1\n        #print(a,b)\n        while i>=0:\n            s1=str(int(a[i])+int(b[i]))+s1\n            i-=1\n        if int(s1)==int(s):\n            print(int(b))\n        else:\n            print(-1)\n            \n            \n'''\np m\n\n5 9\n3 7\n1 5\n\n3 2\n49 1\n\ndist[child]=dist[parent]+dist[node]\n\n\n9 8 7 5 3\n\nx%y not appear in a\nx>y\n\n0 1 5 6 7 \n\n'''\n\n    \n    \n    \n\n        \n            \n    \n#f()\n    \n\n'''\n\\\n\n\n1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7\n-5 -4 -3 -2 -1 0 1 2 3 4 5 6\n\n\n0 1 2 3-3\n4 5 6 7-7\n\n\n'''\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    a,s=map(int,input().split())\n    b=''\n    while a>0:\n        r1=a%10\n        r2=s%10\n        r3=s%100\n        m1=r1\n        m2=r1+9\n        a=a//10\n        if r2>=m1 and r2<=m2:\n            b=str(r2-r1)+b\n            s=s//10\n        elif r3>=m1 and r3<=m2:\n            b=str(r3-r1)+b\n            s=s//100\n        else:\n            print(-1)\n            break\n    else:\n        if s>0:\n           b=str(s)+str(b)\n        print(int(b))",
                true
            ],
            [
                "def solve():\n    for t in range(1):\n        a,s=map(int,input().split())\n        ans=[]\n        flag=False\n        while s:\n            x=a%10\n            y=s%10\n            if x<=y:\n                ans.append(y-x)\n            else:\n                s=s//10\n                y+=10*(s%10)\n                if x<y and y>=10 and y<=19:\n                    ans.append(y-x)\n                else:\n                    print(-1)\n                    return \n                    \n            a//=10\n            s//=10\n              \n        if a:\n            print(-1)\n        else:\n            while ans[-1]==0:\n                ans.pop(-1)\n\n            for ele in ans[::-1]:\n                print(ele,end=\"\")\n            print()\n            \n        \n        \nfor _ in range(int(input())):\n    solve()\n",
                true
            ],
            [
                "t = int(input())\n\ndef to_string(A):\n    return str(int(\"\".join([str(x) for x in A])))\n\n\nfor _ in range(t):\n    a, s = input().split()\n    i = len(a)-1\n    j = len(s)-1\n    b = []\n    valid = True\n    while i >= 0:\n        if j >= 0 and int(a[i]) <= int(s[j]):\n            b.append(int(s[j]) - int(a[i]))\n            i -= 1\n            j -= 1\n        elif j >= 1 and 0 <= int(s[j-1:j+1]) - int(a[i]) <= 9:\n            b.append(int(s[j-1:j+1]) - int(a[i]))\n            i -= 1\n            j -= 2\n        else:\n            valid = False\n            break\n    while j >= 0:\n        b.append(int(s[j]))\n        j -= 1\n    if valid:\n        print(to_string(b[::-1]))\n    else:\n        print(\"-1\")\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    A, S = map(str, input().split())\n    A = list(A)\n    S = list(S)\n    A = [int(c) for c in A]\n    S = [int(c) for c in S]\n    A.reverse()\n    #S.reverse()\n    #print(A)\n    #print(S)\n    B = []\n    flag = True\n    for a in A:\n        if len(S) == 0:\n            flag = False\n            break\n        else:\n            if S[-1] >= a:\n                b = S[-1]-a\n                B.append(b)\n                S.pop()\n            else:\n                if len(S) <= 1:\n                    flag = False\n                    break\n                s = S[-1]+S[-2]*10\n                b =s-a\n                if b >= 10 or b < 0:\n                    flag = False\n                    break\n                B.append(b)\n                S.pop()\n                S.pop()\n    #print(B)\n    #print(S)\n    if not flag:\n        print(-1)\n        continue\n    while S:\n        b = S.pop()\n        B.append(b)\n    #if not B:\n        #print(-1)\n        #continue\n    #B.reverse()\n    ans = 0\n    for i, b in enumerate(B):\n        ans += b*pow(10, i)\n    print(ans)\n    #B = [str(c) for c in B]\n    #B = ''.join(B)\n    #B = int(B)\n    #print(B)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, s = map(lambda x: ''.join(reversed(x)), input().split())\n    b = ''\n    n = len(a)\n    ns = len(s)\n    i = j = 0\n    while j < ns:\n        if i >= n:\n            b += s[j]\n        elif a[i] <= s[j]:\n            t = int(s[j]) - int(a[i])\n            if t <= 9:\n                b += str(t)\n            else:\n                print(-1)\n                break\n        else:\n            j += 1\n            if j >= ns:\n                print(-1)\n                break\n            t = int(s[j] + s[j - 1]) - int(a[i])\n            if 0 <= t <= 9:\n                b += str(t)\n            else:\n                print(-1)\n                break\n        i += 1\n        j += 1\n    else:\n        if i >= n:\n            print(int(b[::-1]))\n        else:\n            print(-1)",
                true
            ],
            [
                "from sys import stdin, stdout\nrd = lambda: list(map(int, stdin.readline().split()))\nrds = lambda: stdin.readline().rstrip()\nii = lambda: int(stdin.readline())\nINF = 1 << 62\nmod = 10**9 + 7\n\ndef solve(a, s):\n    \n    \n    sp = '0' * (abs(len(a) - len(s)))\n    if len(a) < len(s):\n        a = sp + a\n    else:\n        s = sp + s\n\n    # greeed\n    i = len(a)-1\n    j = len(s)-1\n    b = []\n    ok = True\n    while i >= 0 and j >= 0:\n        an = int(a[i])\n        sn1 = int(s[j])\n        \n        if sn1 >= an:\n            b.append(sn1 - an)\n            i -= 1\n            j -= 1\n        else:\n            if j == 0:\n                ok = False\n                break\n            else:\n                sn1 = int(s[j-1:j+1])\n                if sn1 > 18:\n                    ok = False\n                    break\n                d = sn1-an\n                if d > 9 or d < 0:\n                    ok = False\n                    break\n                b.append(d)\n                i-=1\n                j-= 2\n    \n    if j >= 0:\n        ok = False\n\n    #print('i', i, 'j', j, 'a', a, 's', s, 'b', b)\n\n    if i >= 0 and sum(int(a[p]) for p in range(0, i+1)) != 0:\n        ok = False\n\n    if not ok:\n        return -1\n    else:\n        b = b[::-1]\n        return int(''.join(map(str, b)))\n\n\n\nfor _ in range(ii()):\n    a, s = rds().split(' ')\n\n    print(solve(a,s))\n\n\n#stdout.write(' '.join(map(str, ar)))\n#stdout.write(f'{res}')\n\n",
                true
            ],
            [
                "import sys\nimport math\ninput=sys.stdin.readline\ndef solve(a,s):\n    a=[int(i) for i in a]\n    s=[int(i) for i in s]\n    i=len(a)-1\n    j=len(s)-1\n    ans=[]\n    while(True):\n        if(i==-1):\n            for k in range(j,-1,-1):\n                ans.append(s[k])\n            break\n        if(j==-1):\n            return -1\n        if(a[i]>s[j]):\n            if(j==0):\n                return -1\n            if(s[j-1]!=1):\n                return -1\n            else:\n                ans.append(int(str(s[j-1])+str(s[j]))-a[i])\n                j-=2\n                i-=1\n        else:\n            ans.append(s[j]-a[i])\n            j-=1\n            i-=1\n    ans.reverse()\n    index=len(ans)-1\n    for i in range(len(ans)):\n        if(ans[i]!=0):\n            index=i\n            break\n    ans=ans[index:]\n    anss=\"\"\n    for i in ans:\n        anss+=str(i)\n    if(len(anss)==0):\n        anss+='0'\n    return anss\nfor _ in range(int(input())):\n    print(solve(*input().split()))",
                true
            ],
            [
                "import sys\nimport math\nfrom collections import deque,Counter\nfrom sys import stdin\n\n#sys.setrecursionlimit(10**7)\n\nint1=lambda x: int(x)-1\nstinput=lambda :stdin.readline()[:-1]\nii=lambda :int(stinput())\nmi=lambda :map(int, stdin.readline().split())\nli=lambda :list(mi())\nmi1=lambda :map(int1, stdin.readline().split())\nli1=lambda :list(mi1())\nmis=lambda :map(str, stdin.readline().split())\nlis=lambda :list(mis())\n\nfrom collections import defaultdict\n#d=defaultdict(int)\n#d=defaultdict(lambda:1)\n\nimport heapq\n#heapq.heapify(hq)\n#heapq.heappop(hq)\n#heapq.heappush(hq,1)\n\nmod=10**9+7\nMod=998244353\nINF=10**18\nans=0\n\nt=ii()\n\ndef solve(a,s):\n  if len(a)==0:\n    return [s]\n  if len(s)==0:\n    return False\n  if int(a[-1])<=int(s[-1]):\n    x=solve(a[:-1],s[:-1])\n    if x:\n      y=int(s[-1])-int(a[-1])\n      x.append(str(y))\n      return x\n    else:\n      return False\n  elif len(s)>=2 and (s[-2])=='1':\n    x=solve(a[:-1],s[:-2])\n    if x:\n      y=int(s[-2]+s[-1])-int(a[-1])\n      x.append(str(y))\n      return x\n    else:\n      return False\n  return False\n\nfor _ in range(t):\n  seen={}\n  a,s=mis()\n  ans=solve(a,s)\n  if ans:\n    print(int(''.join(ans)))\n  else:\n    print(-1)\n  ",
                true
            ],
            [
                "# Codeforces Round #762 (Div. 3)\n# C. Wrong Addition\n\n\ndef solve(a, b):\n    i, j = len(a) - 1, len(b) - 1\n    diff = \"\"\n    while i >= 0 and j >= 0:\n        c, d = a[i], b[j]\n\n        # print(i, j, c, d)\n\n        if int(c) <= int(d):\n            diff += str(int(d) - int(c))\n        else:\n            j -= 1  # TODO ooB\n            if b[j] != '1':\n                return \"-1\"\n            else:\n                d = \"1\" + d\n                diff += str(int(d) - int(c))\n        i -= 1\n        j -= 1\n\n        if i > j:\n            return \"-1\"\n\n    if i < j:\n        diff += b[:j + 1][::-1]\n    return int(diff[::-1])\n\n\nT = int(input())\nfor _ in range(T):\n    a, b = input().split()\n    print(solve(a, b))\n",
                true
            ],
            [
                "for i in range(int(input())):\n  a, s = input().split()\n  a, s = a[::-1], s[::-1]\n  na = len(a)\n  ns = len(s)\n  ans = ''\n  k = 0\n  flag = True\n  for j in range(na):\n    if k >= ns:\n      flag = False\n      break\n    a_int = int(a[j])\n    s_int = int(s[k])\n    if a_int <= s_int:\n      ans += str(s_int - a_int)\n      k += 1\n    else:\n      if k + 1 >= ns:\n        flag = False\n        break\n      else:\n        s_int2 = int(s[k + 1] + s[k])\n        if s_int2 // 10 != 1:\n          flag = False\n          break\n        else:\n          ans += str(s_int2 - a_int)\n          k += 2\n\n  if flag:\n    print(int(s[k:][::-1] + ans[::-1]))\n  else:\n    print(-1)\n",
                true
            ],
            [
                "t = int(input())\nfor t in range(t):\n\n    a, s = list(map(int, input().split()))\n\n    gg, ans = 0, ''\n    while a > 0:\n        x = a % 10\n        y = s % 10\n        add = y - x\n        if add < 0: add += 10\n        ans = str(add) + ans\n        if add + x < 10:\n            a //= 10\n            s //= 10\n        else:\n            a //= 10\n            s //= 10\n            if s % 10 != (add + x) // 10:\n                gg = 1\n                break\n            else:\n                s //= 10\n\n    print(((str(s) if s > 0 else \"\") + str(ans)).lstrip('0') if not gg else -1)",
                true
            ],
            [
                "def solve():\n    a,b = input().split()\n    a = [int(i) for i in a]\n    b = [int(i) for i in b]\n    i = len(a)-1\n    j = len(b) - 1\n    ans = []\n    while (i>=0 and j>=0):\n        if (j < i):\n            return -1\n        if (a[i] > b[j]):\n            if j == 0:\n                return -1\n            elif b[j-1] != 1:\n                return -1\n            ans.insert(0, 10+b[j]-a[i])\n            j -= 2\n            i -= 1\n        elif (a[i] == b[j]):\n            ans.insert(0, 0)\n            i -= 1\n            j -= 1\n        else:\n            ans.insert(0, b[j]-a[i])\n            i -= 1\n            j -= 1\n    while (j>=0):\n        ans.insert(0, b[j])\n        j -= 1\n    while ans[0] == 0:\n        ans.pop(0)\n    return \"\".join([str(i) for i in ans])\nfor _ in range(int(input())):\n    print(solve())\n",
                true
            ],
            [
                "\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\nlogging.basicConfig(format=\"%(message)s\", level=logging.WARNING,)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\n# 30 MINUTES ATLEAST !!!!\n\n###################################################################################################################\n\n\nfrom collections import deque\n\n\ndef check(a, b, s):\n    S = deque()\n    if len(b) < len(a):\n        b = [0] * (len(a) - len(b)) + b\n\n    if len(a) < len(b):\n        a = [0] * (len(b) - len(a)) + a\n\n    for i in range(len(a) - 1, - 1, -1):\n        summ = a[i] + b[i]\n        S.appendleft(summ)\n\n    S = ''.join(map(str, S))\n    s = ''.join(map(str, s))\n\n    if S == s:\n        return True\n    return False\n\n\nfor i in range(int(input())):\n    a, s = map(str, input().split())\n    # print(a, s, int(a) < int(s), int(a) - int(s))\n    a = list(map(int, a))\n    s = list(map(int, s))\n\n    lsta = len(a) - 1\n    lsts = len(s) - 1\n    b = deque()\n    ok = True\n    while lsta > -1 and lsts > - 1:\n        summ = s[lsts]\n        if a[lsta] == summ:\n\n            if lsta == 0:\n                lsts -= 1\n                mul = 10\n                while lsts > -1:\n                    summ += mul * s[lsts]\n                    lsts -= 1\n                    mul *= 10\n\n            b.appendleft(summ - a[lsta])\n\n        elif a[lsta] > summ:\n            t = summ\n            if lsts - 1 >= 0:\n                summ += (10 * s[lsts - 1])\n            else:\n                ok = False\n                break\n\n            lsts -= 1\n\n            b.appendleft(abs(summ - a[lsta]))\n        else:\n            b.appendleft(summ - a[lsta])\n        lsta -= 1\n        lsts -= 1\n\n    if lsts >= 0:\n\n        summ = s[lsts]\n        mul = 10\n        lsts -= 1\n        while lsts > -1:\n            summ += mul * s[lsts]\n            # print(summ, mul * s[lsts], s[lsts])\n            lsts -= 1\n            mul *= 10\n        # print(summ)\n        b.appendleft(summ)\n\n    # print(b)\n\n    if ok:\n        number = []\n        for i in b:\n            for j in str(i):\n                if j == '-':\n                    ok = False\n                    break\n                number.append(int(j))\n\n        if ok and check(a, number, s):\n            number = int(''.join(map(str, b)))\n            print(number)\n        else:\n            print(-1)\n    else:\n        print(-1)\n",
                true
            ],
            [
                "def finda(b,s):\n    i,j = len(b)-1,len(s)-1\n    ans = \"\"\n    while i>=0 and j>=0:\n        small = int(b[i])\n        big = 0\n        if b[i]<=s[j]:\n            big = int(s[j])\n        elif j>0:\n            big = int(s[j-1:j+1])\n            j-=1\n        g = big-small\n        if g>9 or g<0:\n            return -1\n        ans = str(g)+ans\n        i-=1\n        j-=1\n    ans = s[:j+1]+ans\n    return int(ans) if i<0 else -1\n    \nfor _ in range(int(input())):\n    b,s = input().split()\n    print(finda(b,s))",
                true
            ],
            [
                "def ss(a,s):\n    i=len(s)-1\n    j=len(a)-1\n    l=[]\n    if len(s)<len(a):\n        return -1\n    if (len(s)==1)&(len(a)==1):\n        if int(s)>=int(a):\n            return int(s)-int(a)\n        else:\n            return -1\n    while((i>=0)&(j>=0)):\n        if int(s[i])>=int(a[j]):\n            l.append(str(int(s[i])-int(a[j])))\n            i=i-1\n            j=j-1\n        else:\n            if i==0:\n                if int(s[i])>=int(a[j]):\n                    l.append(str(int(s[i])-int(a[j])))\n                    i=i-1\n                    j=j-1\n                else:\n                    return -1\n            else:\n                if ((int(s[i-1:i+1])-int(a[j]))//10)>0:\n                    return -1\n                elif (int(s[i-1:i+1])-int(a[j]))<0:\n                    return -1\n                else:\n                    l.append(str(int(s[i-1:i+1])-int(a[j])))\n                    i=i-2\n                    j=j-1\n    if (i==-1)&(j>-1):\n        return -1\n    elif (i>-1)&(j==-1):\n        s1=s[:i+1]\n        s1=s1[::-1]\n        l1=list(s1)\n        l.extend(l1)\n        l=l[::-1]\n        return int(''.join(l))\n    else:\n        l=l[::-1]\n        return int(''.join(l))\n    return 0\nt=int(input())\nls=[]\nfor x in range(t):\n    s=str(input())\n    ls.append(s)\nla=[]\nfor y in ls:\n    x=y.split(' ',)\n    a=x[0]\n    s=x[1]\n    ans=ss(a,s)\n    la.append(ans)\nfor x in la:\n    print(x)",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nLOGN = 20\nINF = 10 ** 9 + 5\nMOD = 10 ** 9 + 7\n# ============================ START OF MY CODE ============================\n\ndef solve():\n    a, s = map(str, input().split())\n    b = []\n    ai = len(a) - 1\n    si = len(s) - 1\n\n    while ai >= 0 and si >= 0:\n        if int(s[si]) >= int(a[ai]):\n            b.append(int(s[si]) - int(a[ai]))\n            si -= 1\n            ai -= 1\n        elif si - 1 >= 0 and 0 <= int(s[si - 1:si + 1]) - int(a[ai]) <= 9:\n            b.append(int(s[si - 1:si + 1]) - int(a[ai]))\n            si -= 2\n            ai -= 1\n        else:\n            print(-1)\n            return\n\n    if ai >= 0:\n        print(-1)\n        return\n    while si >= 0:\n        b.append(s[si])\n        si -= 1\n    print(int(''.join([str(c) for c in reversed(b)])))\n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        solve()\n",
                true
            ],
            [
                "def solve():\n    [a, s] = input().split(\" \")\n\n    i = len(a) - 1\n    j = len(s) - 1\n\n    b = \"\"\n\n    # 1 11\n\n    # 1 - 1\n    # 1 - 0\n\n    #\n\n    while i >= 0 and j >= 0:\n        x = int(a[i])\n        y = int(s[j])\n\n        if x <= y:\n            b = str(y - x) + b\n\n        if x > y:\n            if j - 1 < 0:\n                return -1\n\n            y = 10 * int(s[j - 1]) + int(s[j])\n            j -= 1\n\n            if y >= 10 and y <= 18:\n                b = str(y - x) + b\n            else:\n                return -1\n\n        j -= 1\n        i -= 1\n\n    if j < 0 and i >= 0:\n        return -1\n\n    if i < 0 and j >= 0:\n        return s[0: j + 1] + b\n\n    return b.lstrip('0')\n\n\n\nif __name__ == \"__main__\":\n    t = int(input())\n\n    for _ in range(t):\n        print(solve())\n",
                true
            ],
            [
                "T=int(input())\nfor i in range(T):\n    a,c=input().split()\n    maxLen=max(len(a),len(c))\n    a=a.zfill(maxLen)\n    c=c.zfill(maxLen)\n    cur=maxLen-1\n    curA=maxLen-1\n    num=\"\"\n    while cur>=0:\n        digit=int(c[cur])-int(a[curA])\n        if digit<0:\n            digit=int(c[cur])+10-int(a[curA])\n            if cur==0 or c[cur-1]!='1':\n                num=\"\"\n                break\n            cur-=1\n        num=str(digit)+num\n        cur-=1\n        curA-=1\n    while curA>=0:\n        if a[curA]!='0':\n            num=\"\"\n            break\n        curA-=1\n\n    if num!=\"\":\n        print(int(num))\n    else:\n        print(-1)",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    a,s=input().split()\n    b=''\n    a=list(map(int,a))\n    s=list(map(int,s))\n    iS=len(s)-1\n    key=True\n    for i in range(len(a)-1,-1,-1):\n        if s[iS]==a[i]:\n            b+='0'\n            iS-=1\n        elif s[iS]>a[i]:\n            b+=str(s[iS]-a[i])\n            iS-=1\n        else:\n            if iS>0:\n                if s[iS-1]==1:\n                    b+=str(10+s[iS]-a[i])\n                    iS-=2\n                else:\n                    key=False\n                    break\n            else:\n                key=False\n                break\n        if i>0 and iS<0:\n            key=False\n            break\n    if key==False:\n        print('-1')\n    else:\n        for i in range(iS,-1,-1):\n            b+=str(s[i])\n        print(int(b[::-1]))\n        \n        \n            \n        \n                \n            \n        \n        \n    \n    \n        \n    \n",
                true
            ],
            [
                "from math import e\n\n\nt = int(input())\nfor _ in range(t):\n    a, s = input().split()\n    b = []\n    exists = True\n    while len(s) > 0:\n        if len(a) > len(s):\n            exists = False\n            break\n\n        if len(a) == 0:\n            for i in reversed(s):\n                b.insert(0, i)\n            break\n\n        if int(a[-1]) > int(s[-1]):\n            enter = int(s[-2:]) - int(a[-1])\n            if 0 <= enter <= 9:\n                b.insert(0,  str(enter))\n                s = s[:-2]\n                a = a[:-1]\n            else:\n                exists = False\n                break\n\n        else:\n            b.insert(0, str(int(s[-1]) - int(a[-1])))\n            s = s[:-1]\n            a = a[:-1]\n\n    if exists:\n        b = ''.join(b)\n        if len(b) == 1:\n            print(b)\n        else:\n            b = b.lstrip('0')\n            print(b)\n    else:\n        print(-1)\n",
                true
            ],
            [
                "import math\nt=int(input())\nwhile t>0:\n    t-=1\n    a,s=map(int,input().split())\n    b=\"\"\n    ans=True\n    while s:\n        if a>s or ans==False:\n            ans=False\n            break\n        x=a%10\n        y=s%10\n        z=s%100\n        if y>=x:\n            if (y-x)>=10:\n                ans=False\n            b+=str(y-x)\n            s=s//10\n            a=a//10\n        else:\n            if (z-x)>=10:\n                ans=False\n            b+=str(z-x)\n            s=s//100\n            a=a//10\n    if ans==False or \"-\" in b:\n        \n        print(-1)\n    else:\n        print(int(b[::-1]))",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    a,s = map(int,input().split())\n    b = 0\n    i = 1\n    while a>0:\n        lstdgt_a = a%10\n        lstdgt_s = s%10\n    \n        if lstdgt_s<lstdgt_a:\n            s = s//10\n            lstdgt_s += 10*(s%10)\n            \n        if lstdgt_s-lstdgt_a >9 or lstdgt_s<lstdgt_a:\n            b = -1\n            break\n        \n        b+= (lstdgt_s - lstdgt_a)*i\n        i*=10\n        a = a//10\n        s = s//10 \n        \n    if b!=-1:\n        b+=s*i\n    \n    print(b)\n        \n    \n    ",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    a, s = input().split()\n    finish = False\n    i = len(a )- 1\n    j = len(s) - 1\n    result = ''\n    while (not finish):\n        a1, s1 = int(a[i]), int(s[j])\n        if s1 == a1:\n            result += '0'\n            i -= 1\n            j -= 1\n        elif s1 > a1:\n            result += str(s1 - a1)\n            i -= 1\n            j -= 1\n        elif s1 < a1:\n            if j > 0:\n                s1 = int(s[j-1] + s[j])\n                j -= 1\n                if s1 > a1:    \n                    if s1 - a1 > 9:\n                        result = '-1'\n                        break\n                    else:\n                        result += str(s1 - a1)\n                        i -= 1\n                        j -= 1\n                else:\n                    result = '-1'\n                    break\n            else:\n                result = '-1'\n                break\n        if result == '-1':\n            finish = True\n        elif i < 0 and j >= 0:\n            a = '0' + a\n            i = 0\n        elif i >= 0 and j < 0:\n            result = '-1'\n            finish = True\n        elif i < 0 and j < 0:\n            finish = True\n    print(result if result == '-1' else result.rstrip('0')[::-1])",
                true
            ],
            [
                "def f(a,b,s):\n    s1=\"\"\n    l1=len(a)\n    l2=len(b)\n    \n    s1=\"\"\n    if(l1<l2):\n        a=(l2-l1)*\"0\"+a\n    elif(l1>l2):\n        b=(l1-l2)*\"0\"+b\n\n  \n\n   \n   \n    for i in range(len(a)-1,-1,-1):\n        x1=int(a[i])\n        y1=int(b[i])\n        s1=str(x1+y1)+s1\n        \n\n    \n   \n    return s==s1\n\nt=int(input())\nfor i in range(0,t):\n    a,s=map(str,input().split())\n    j=len(a)-1\n    k=len(s)-1\n    b=\"\"\n    flag=True\n    while(j>=0 and k>=0):\n        x1=int(s[k])\n        x2=int(a[j])\n        if(x1>=x2):\n            b=str(x1-x2)+b\n            k-=1\n            j-=1\n        else:\n            u=k-1\n            while(u>0 and int(s[u:k+1])<x2):\n                u-=1\n\n            if(u<0 or int(s[u:k+1])<x2):\n                flag=False\n                break\n            else:\n                x3=int(s[u:k+1])                            \n                b=str(x3-x2)+b\n                k-=2\n                j-=1\n\n        \n           \n\n\n   \n    if(j==-1 and k!=-1):\n        b=s[:k+1]+b\n\n\n    if(flag==False):\n        print(-1)\n    else:                \n        if f(a,b,s):\n            print(int(b))\n        else:\n            print(-1)\n\n\n\n        \n\n     \n",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\n\n\ndef solve(a, s):\n    n, m = len(s), len(a)\n    i = n - 1\n    j = m - 1\n    ans = []\n    while i >= 0 and j >= 0:\n        cur = s[i]\n        while int(cur) < int(a[j]):\n            if i <= 0:\n                return -1\n            i -= 1\n            cur = s[i] + cur\n        x = int(cur) - int(a[j])\n        if len(str(x)) > 1: return -1\n        ans.append(x)\n        i -= 1\n        j -= 1\n\n    while i >= 0:\n        ans.append(int(s[i]))\n        i -= 1\n\n    if i == -1 and j == -1:\n        return int(''.join(map(str, ans[::-1])))\n    return -1\n            \n        \n\n\nt = int(input())\nfor _ in range(t):\n    a, s = input().strip().split()\n    print(solve(a, s))\n    \n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nThe grasshopper is located on the numeric axis at the point with coordinate x_0.\n\nHaving nothing else to do he starts jumping between integer points on the axis. Making a jump from a point with coordinate x with a distance d to the left moves the grasshopper to a point with a coordinate x - d, while jumping to the right moves him to a point with a coordinate x + d.\n\nThe grasshopper is very fond of positive integers, so for each integer i starting with 1 the following holds: exactly i minutes after the start he makes a jump with a distance of exactly i. So, in the first minutes he jumps by 1, then by 2, and so on.\n\nThe direction of a jump is determined as follows: if the point where the grasshopper was before the jump has an even coordinate, the grasshopper jumps to the left, otherwise he jumps to the right.\n\nFor example, if after 18 consecutive jumps he arrives at the point with a coordinate 7, he will jump by a distance of 19 to the right, since 7 is an odd number, and will end up at a point 7 + 19 = 26. Since 26 is an even number, the next jump the grasshopper will make to the left by a distance of 20, and it will move him to the point 26 - 20 = 6.\n\nFind exactly which point the grasshopper will be at after exactly n jumps.\n\nInput\n\nThe first line of input contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nEach of the following t lines contains two integers x_0 (-10^{14} \u2264 x_0 \u2264 10^{14}) and n (0 \u2264 n \u2264 10^{14}) \u2014 the coordinate of the grasshopper's initial position and the number of jumps.\n\nOutput\n\nPrint exactly t lines. On the i-th line print one integer \u2014 the answer to the i-th test case \u2014 the coordinate of the point the grasshopper will be at after making n jumps from the point x_0.\n\nExample\n\nInput\n\n\n9\n0 1\n0 2\n10 10\n10 99\n177 13\n10000000000 987654321\n-433494437 87178291199\n1 0\n-1 1\n\n\nOutput\n\n\n-1\n1\n11\n110\n190\n9012345679\n-87611785637\n1\n0\n\nNote\n\nThe first two test cases in the example correspond to the first two jumps from the point x_0 = 0. \n\nSince 0 is an even number, the first jump of length 1 is made to the left, and the grasshopper ends up at the point 0 - 1 = -1.\n\nThen, since -1 is an odd number, a jump of length 2 is made to the right, bringing the grasshopper to the point with coordinate -1 + 2 = 1.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "t = int(input())\n\n\ndef solve(x, n):\n    if n % 4 == 0:\n        return x\n    if n % 4 == 2:\n        if x % 2 == 0:\n            return x + 1\n        return x - 1\n    if n % 4 == 1:\n        if x % 2 == 0:\n            return x - n\n        return x + n\n    if x % 2 == 0:\n        return x + n + 1\n    return x - n - 1\n\n\nfor _ in range(t):\n    x, n = map(int, input().split())\n\n    print(solve(x, n))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,d=map(int,input().split())\n    r=d%4\n    for i in range(d-r+1,d+1):\n        if x%2==0:\n            x-=i \n        else:\n            x+=i \n    print(x)",
                true
            ],
            [
                "for _ in range(int(input())):\n    x, n = map(int, input().split())\n    if n % 4 == 0:\n        d = 0\n    elif n % 4 == 1:\n        d = -n\n    elif n % 4 == 2:\n        d = 1\n    else:\n        d = n + 1\n    if x % 2 == 0:\n        print(x + d)\n    else:\n        print(x - d)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    lt=list(map(int,input().split()))\n    x,n=lt[0],lt[1]\n    if(x%2==0 and n%2==0):\n        if(n%4==0):\n            print(x)\n        else:\n            print(x+1)\n    elif(x%2==1 and n%2==0):\n        if(n%4==0):\n            print(x)\n        else:\n            print(x-1)\n    elif(x%2==0 and n%2==1):\n        if((n-1)%4!=0):\n            print(n+1+x)\n        else:\n            print(x-n)\n    else:\n        if(n-1)%4==0:\n            print(x+n)\n        else:\n            print(x-n-1)\n\n        \n    \n    ",
                true
            ],
            [
                "from sys import stdin,stdout\ndef INPUT():return list(int(i) for i in stdin.readline().split())\ndef inp():return stdin.readline()\ndef out(x):return stdout.write(x)\nfrom math import *\nfrom decimal import *\nINT_MAX=10**13\nfrom bisect import bisect_left,bisect_right\nimport sys\nMOD=10**9+7\nfrom random import randint as R\n# from heapq import heappush,heappop,heapify\n#320660CC\ninf=12345676543\nfrom collections import deque\nfrom sys import setrecursionlimit\n#setrecursionlimit(10**6)\nfrom collections import defaultdict\n#=============================================]\ndef calc(a,n):\n    if a&1==0:\n        if n%4==0:\n            return a\n        elif n%4==1:\n            return a-n\n        if n%4==2:\n            return a+1\n        return a+n+1\n    else:\n        if n%4==0:\n            return a\n        if n%4==1:\n            return a+n\n        if n%4==2:\n            return a-1\n        return  a-n-1\nfor _ in range(int(input())):\n    a,b=map(int,input().split())\n    print(calc(a,b))\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\n\n\n\nt = inp()\nfor i in range(t):\n    a, b = map(int, input().split())\n    if a % 2 == 0:\n        if b % 4 == 0:\n            print(a)\n        elif b % 4 == 1:\n            print(a - b)\n        elif b % 4 == 2:\n            print(a + 1)\n        elif b % 4 == 3:\n            print(a + b + 1)\n    elif a % 2 == 1:\n        if b % 4 == 0:\n            print(a)\n        elif b % 4 == 1:\n            print(a + b)\n        elif b % 4 == 2:\n            print(a - 1)\n        elif b % 4 == 3:\n            print(a - b - 1)\n",
                true
            ],
            [
                "from sys import stdin\nfrom collections import defaultdict as dd\nfrom collections import deque as dq\nfrom collections import Counter as ctr\nfrom heapq import heapify,heappush as ha, heappop as hp\nfrom math import ceil,floor,gcd,sqrt\nfrom bisect import bisect_left as bsl, bisect_right as bsr\nfrom bisect import insort_left as isl, insort_right as isr\nfrom itertools import permutations, combinations\nip = lambda : int(stdin.readline())\nips = lambda : str(stdin.readline())\nipm = lambda : map(int,stdin.readline().split())\nmod = int(1e9)+7\nmod2 = 998244353\nfor _ in range(ip()):\n    x,n = ipm()\n    v = x\n    k = n%4\n    t = n//4\n    t*=4\n    if (x%2)==0:\n        if k!=0:\n            while k!=0:\n                c = t+k\n                if k==1:\n                    c = -c\n                v+=c\n                k-=1\n    else:\n        if k!=0:\n            while k!=0:\n                c = t+k\n                if k==1:\n                    c = -c\n                v-=c\n                k-=1\n    print(v)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,n=map(int,input().split())\n    arr=[]\n    if x&1:\n        arr = [x, x + 1, x - 1, x - 4]\n        term = n // 4 + 1\n        rem = n % 4\n        if rem == 0 or rem == 2:\n            print(arr[rem])\n        elif rem == 1:\n            ans = arr[rem] + (term - 1) * (4)\n            print(ans)\n        else:\n            ans = arr[rem] + (term - 1) * (-4)\n            print(ans)\n    else:\n        arr=[x,x-1,x+1,x+4]\n        term=n//4+1\n        rem=n%4\n        if rem==0 or rem==2:print(arr[rem])\n        elif rem==1:\n            ans=arr[rem]+(term-1)*(-4)\n            print(ans)\n        else:\n            ans = arr[rem] + (term - 1) * (4)\n            print(ans)",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\nprint = sys.stdout.write\n\nfor _ in range(int(input())):\n    x, n = map(int, input().split())\n    d = [0, n, -1, -n - 1][n%4] * (1 if x % 2 else -1)\n    print(str(x + d) + \"\\n\")\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    x,n = map(int,input().split())\n    if x%2==0:\n        if n%2==0:\n            if (n//2)%2==0:\n                print(x)\n            else:\n                print(x+1)\n        else:\n            if ((n-1)//2)%2 == 0:\n                print(-n+x)\n            else:\n                print(n+1+x)\n    else:\n        if n%2==0:\n            if (n//2)%2==0:\n                print(x)\n            else:\n                print(x-1)\n        else:\n            if ((n-1)//2)%2 == 0:\n                print(n+x)\n            else:\n                print(-n-1+x)\n        ",
                true
            ],
            [
                "from os import path, truncate\nfrom sys import int_info, stdin, stdout\nif path.exists('tc.txt'):\n    stdin = open('tc.txt', 'r')\ndef gmi(): return map(int, stdin.readline().strip().split())\ndef gms(): return map(str, stdin.readline().strip().split())\ndef gari(): return list(map(int, stdin.readline().strip().split()))\ndef gart(): return tuple(map(int, stdin.readline().strip().split()))\ndef gars(): return list(map(str, stdin.readline().strip().split()))\ndef gs(): return stdin.readline().strip()\ndef gls(): return list(stdin.readline().strip())\ndef gi(): return int(stdin.readline())\n\nfor _ in range(int(input())):\n    x,n=map(int,input().split())\n    if x%2==0 and (n-1)%4==0:\n        print(x-n)\n    elif x%2==0 and (n-1)%4==1:\n        print(x+1)\n    elif x % 2 == 0 and (n-1) % 4 == 2:\n        print(x+n+1)\n    elif x % 2 == 0 and (n-1) % 4 == 3:\n        print(x)\n    elif x%2!=0 and (n-1)%4==0:\n        print(x+n)\n    elif x % 2 != 0 and (n-1) % 4 == 1:\n        print(x-1)\n    elif x % 2 != 0 and (n-1) % 4 == 2:\n        print(x-n-1)\n    elif x % 2 != 0 and (n-1) % 4 == 3:\n        print(x)\n\n\n\n\n\n    \n\n   \n\n    \n\n   \n\n# def maxsum(arr):\n#     n=len(arr)\n#     su=0\n#     leftdp=[0]*n\n#     rightdp=[0]*n\n#     c=0\n#     for i in range(0,n,2):\n#         su+=arr[i]\n#     for i in range(1, n, 2):\n#         leftdiff = arr[i]-arr[i-1]\n#         if c-1<0:\n#             leftdp[i]=leftdiff\n#         else:\n#             if leftdp[i-2]>0:\n#                 leftdp[i]=leftdiff+leftdp[i-2]\n#             else:\n#                 leftdp[i]=leftdiff\n#         rightdiff=0\n#         if i+1>=n:\n#             rightdiff=0\n#         else:\n#             rightdiff=arr[i]-arr[i+1]\n#         if c-1<0:\n#             rightdp[i]=rightdiff\n#         else:\n#             if rightdp[i-2]>0:\n#                 rightdp[i]=rightdiff+rightdp[i-2]\n#             else:\n#                 rightdp[i]=rightdiff\n#         c+=1\n#     maxm=0\n#     for i  in range(1,n,2):\n#          maxm=max(maxm,max(leftdp[i],rightdp[i]))\n#     return maxm + su\n        \n        \n\n# arr =list(map(int,input().split()))\n# re=maxsum(arr)\n# print(re)\n\n# x = math.floor(math.log(b)/math.log(2))\n# y = math.floor(math.log(a)/math.log(5))\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    x0, n = map(int,input().split())\n    if x0 % 2 == 0:\n        if n % 4 == 0:\n            print(x0)\n        elif n % 4 == 1:\n            print(x0 + (-1 - (n // 4) * 4))\n        elif n % 4 == 2:\n            print(x0 + 1)\n        else:\n            print(x0 + (4 + (n // 4) * 4))\n    else:\n        if n % 4 == 0:\n            print(x0)\n        elif n % 4 == 1:\n            print(x0 + (1 + (n // 4) * 4))\n        elif n % 4 == 2:\n            print(x0 - 1)\n        else:\n            print(x0 + (-4 - (n // 4) * 4))\n# nList = [2]\n# for i in range(1, 20):\n#     cur = nList[-1]\n#     if cur%2==0:\n#         nList.append(cur-i)\n#     else:\n#         nList.append(cur+i)\n# print(nList)\n\n# nList2 = [5]\n# for i in range(1, 20):\n#     cur = nList2[-1]\n#     if cur%2==0:\n#         nList2.append(cur-i)\n#     else:\n#         nList2.append(cur+i)\n# print(nList2)\n# print(987654321%4)",
                true
            ],
            [
                "for test in range(int(input())):\n    x,n = list(map(int, input().split()))\n    rem_steps = n%4\n    nearest_4 = (n//4)*4\n    if x%2 == 0:\n        if rem_steps == 1:\n            print (x - nearest_4 - 1)\n        elif rem_steps == 2:\n            print (x + 1)\n        elif rem_steps == 3:\n            print (x + 1 + nearest_4 + 3)\n        elif rem_steps == 0:\n            print (x)\n    else:\n        if rem_steps == 1:\n            print (x + nearest_4 + 1)\n        elif rem_steps == 2:\n            print (x - 1)\n        elif rem_steps == 3:\n            print (x - 1 - nearest_4 - 3)\n        elif rem_steps == 0:\n            print (x)",
                true
            ],
            [
                "import sys\ninput = lambda:sys.stdin.readline().strip()\nt = int(input())\nwhile t:\n    t-=1\n    x0,n = map(int,input().split())\n    if n%4==0:\n        print(x0)\n    elif n%4==1:\n        if x0&1:\n            print(x0+(n))\n        else:\n            print(x0-(n))\n    elif n%4==2:\n        if x0&1:\n            print(x0-1)\n        else:\n            print(x0+1)\n    else:\n        if x0&1:\n            print(x0-(n+1))\n        else:\n            print(x0+(n+1))",
                true
            ],
            [
                "l = int(input())\nfor looper in range(l):\n    x, n = list(map(int, input().split()))\n    coord = x\n    start = n % 4  # To minimize the steps as much as possible\n    for i in range(n - start + 1, n+1):\n        if coord % 2 == 0: # if it is an even number\n            coord -= i\n        else:\n            coord += i\n    print(coord)",
                true
            ],
            [
                "T = int(input())\nout = []\nfor _ in range(T):\n    x, n = map(int, input().split())\n    if x % 2 == 0:\n        if n % 4 == 0:\n            ans = x\n        elif n % 4 == 2:\n            ans = x + 1\n        elif n % 4 == 1:\n            ans = x - n\n        else:\n            ans = x + n + 1\n    else:\n        if x > 0:\n            if n % 4 == 2:\n                ans = x - 1\n            elif n % 4 == 0:\n                ans = x\n            elif n % 4 == 3:\n                ans = x - n - 1\n            else:\n                ans = x + n\n        else:\n            if n % 4 == 1:\n                ans = x + n\n            elif n % 4 == 2:\n                ans = x - 1\n            elif n % 4 == 3:\n                ans = x - n - 1\n            else:\n                ans = x\n\n    out.append(ans)\nprint(*out, sep=\"\\n\")\n",
                true
            ],
            [
                "a = [1, -1, -4, 0, 5, -8, 0, 9,]\nfor i in range(int(input())):\n    x0, n = [int(num) for num in input().split(\" \")]\n    distance = 0\n    if n % 4 == 0:\n        distance = 0\n    elif n % 4 == 2:\n        distance = -1\n    elif n % 4 == 1:\n        distance = n\n    else:\n        distance = -n - 1\n    if x0 % 2 == 1:\n        print(distance + x0)\n    else:\n        print(-distance + x0)\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    x,d=map(int,input().split())\n    app=[]\n    c=x\n    for i in range(4):\n        min=i+1\n        if(c&1):\n            c+=min\n        else:\n            c-=min\n        app.append(c)\n    t=d%4\n    if(t==2 or t==0):\n        if(t==0):\n            t=t+4\n        print(app[t-1])\n    else:\n        if(t==1):\n            d=d-1\n            l=d//4\n            if(x&1):\n                print(app[t-1]+l*4)\n            else:\n                print(app[t-1]-l*4)\n        else:\n            d=d-1\n            l=d//4\n            if(x&1):\n                print(app[t-1]-l*4)\n            else:\n                print(app[t-1]+l*4)",
                true
            ],
            [
                "for i in range(int(input())):\n    x,n = map(int,input().split())\n    a = 4*(n//4)\n    for i in range(a+1,n+1):\n        if(x%2==0): \n            x-=i\n        else:\n            x+=i\n    print(x)",
                true
            ],
            [
                "from math import *\nfrom decimal import *\nfrom decimal import Decimal as D\nfrom string import ascii_lowercase as lc\nfrom string import ascii_uppercase as uc\nfrom itertools import *\nfrom itertools import permutations as perm\nfrom itertools import product as prod\nfrom sys import *\nip = input\nra = lambda: list(map(int, input().split()))\nri = lambda: int(input())\nrd = lambda: map(int, input().split())\nMOD = 10 ** 9 + 7\nMOD2 = 998244353\ndef fibs(n, mod = None):\n    a, b, c = 1, 0, 1\n    for i in bin(n)[2:]:\n        if mod:\n            b, c = (b * a + c * b) % mod, (b * b + c * c) % mod\n            a = (c + mod - b) % mod\n            if i == '1': a, b, c = b % mod, c % mod, (b + c) % mod\n        else:\n            b, c = b * a + c * b, b * b + c * c\n            a = c - b\n            if i == '1': a, b, c = b, c, b + c            \n    return b\ndef debug(*a):\n    stderr.write(' '.join(map(str, a)) + '\\n')\ndef fp(x, p, m):\n    r = 1\n    while p:\n        if p % 2:\n            r = r * x % m\n            p -= 1\n        else:\n            x = x * x % m\n            p //= 2\n    return r\ndef fact(x, m):\n    r = 1\n    for i in range(2, x + 1):\n        r = r * i % m\n    return r\ndef C(n, k, m):\n    return fact(n, m) * fp(fact(n - k, m), m - 2, m) % m * fp(fact(k, m), m - 2, m) % m\nclass SegmentTree:\n    def f(self, a, b):\n        return a + b\n    def __init__(self, n, a):\n        self.tree = [0] * (2 * n)\n        self.n = n\n        for i in range(n):\n            self.tree[n + i] = a[i]\n        for i in range(n - 1, 0, -1):\n            self.tree[i] = self.f(self.tree[2 * i], self.tree[2 * i + 1])\n    def q(self, l, r):\n        l += self.n\n        r += self.n\n        res = 0\n        while r > 1:\n            if l % 2:\n                res = self.f(res, self.tree[l]) \n                l += 1\n            if r % 2:\n                r -= 1\n                res = self.f(res, self.tree[r])\n            r //= 2\n            l //= 2\n        return res\n    def u(self, index, value):\n        index += self.n\n        self.tree[index] = value\n        index //= 2\n        while index > 0:\n            self.tree[index] = self.f(self.tree[2 * index], self.tree[2 * index + 1])\n            index //= 2\ndef z_function(s):\n    l, r, n = 0, 0, len(s)\n    z = [0] * n\n    z[0] = 0\n    for i in range(1, n):\n        if r >= i: z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]: z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = l + z[i] - 1\n    return z\ndef pc_pre(a):\n    n = len(a)\n    r = [0] * (n + 1)\n    for i in range(n):\n        r[i + 1] = r[i] + a[i]\n    return r\ndef pc_suf(a):\n    n = len(a)\n    r = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        r[i] = r[i + 1] + a[i]\n    return r\ndef bsloe(a, v):\n    l, h = -1, len(a)\n    while h - l > 1:\n        m = (h + l) // 2\n        if a[m] > v: h = m\n        else: l = m\n    return l\ndef bsh(a, v):\n    l, h = -1, len(a)\n    while h - l > 1:\n        m = (h + l) // 2\n        if a[m] > v: h = m\n        else: l = m\n    return h\ndef test():\n    a = [1, 2, 3]\n    s = 'abcabcab'\n    assert(C(3, 2, 5) == 3)\n    assert(pc_pre(a) == [0, 1, 3, 6])\n    assert(pc_suf(a) == [6, 5, 3, 0])\n    assert(z_function(s) == [0, 0, 0, 5, 0, 0, 2, 0])\n    assert(fp(2, 3, 5) == 3)\n    assert(fact(3, 5) == 1)\n    t = SegmentTree(3, a)\n    assert(t.q(1, 3) == t.f(a[1], a[2]))\n    t.u(0, 5)\n    assert(t.q(0, 2) == t.f(5, a[1]))\n    assert(bsh(a, 3) == 3)\n    assert(bsloe(a, 3) == 2)\n    assert(fibs(10) == 55)\n    assert(fibs(1000, 10**9+7) == 517691607)\n    debug(\"tests passed\")\ntest()\n################    code goes here    ################\ndef brute(x, n):\n    for i in range(1, n + 1):\n        if x % 2 == 0:\n            x -= i\n        else: x += i\n    return x\ndef solver(x, n):\n    if x % 2 == 0: \n        if n % 4 == 0:\n            return (x)\n        if n % 4 == 1:\n            return (x - n)\n        if n % 4 == 2:\n            return (x + 1)\n        if n % 4 == 3:\n            return (x + n + 1)\n    if x % 2 == 1: \n        if n % 4 == 0:\n            return (x)\n        if n % 4 == 1:\n            return (x + n)\n        if n % 4 == 2:\n            return (x - 1)\n        if n % 4 == 3:\n            return (x - n - 1)\ndef solve():\n    x, n = rd()\n    if x % 2 == 0: \n        if n % 4 == 0:\n            print(x)\n            return\n        if n % 4 == 1:\n            print(x - n)\n            return\n        if n % 4 == 2:\n            print(x + 1)\n            return\n        if n % 4 == 3:\n            print(x + n + 1)\n            return\n    if x % 2 == 1: \n        if n % 4 == 0:\n            print(x)\n            return\n        if n % 4 == 1:\n            print(x + n)\n            return\n        if n % 4 == 2:\n            print(x - 1)\n            return\n        if n % 4 == 3:\n            print(x - n - 1)\n            return\ntests = [\n    [1, 1],\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [1, 5],\n    [0, 1],\n    [0, 2],\n    [0, 3],\n    [0, 4],\n    [0, 5],\n    ]\n#for x, n in tests:\n#    print(x, n, solver(x, n), brute(x, n))\n#    assert (solver(x, n) == brute(x, n))\nmultiple_cases = 1\nif multiple_cases:\n    t, = rd()\n    for _ in range(t):\n        solve()\nelse: solve()",
                true
            ],
            [
                "def position(current, jump_value):\n    if(current%2 == 0):\n        return current - jump_value\n    else:\n        return current + jump_value\ndef grasshopper(initial, jumps):\n    if(initial%2 == 0):\n        if(jumps%4 == 0):\n            return initial\n        elif(jumps%4 == 1):\n            return initial-1 + (int(jumps/4)*(-4))\n        elif(jumps%4 == 2):\n            return initial + 1\n        else:\n            return initial + 4 + (int(jumps/4)*4)\n    else:\n        if(jumps%4 == 2):\n            return initial - 1\n        elif(jumps%4 == 0):\n            return initial\n        elif(jumps%4 == 1):\n            return initial + 1 + (int(jumps/4)*4)\n        else:\n            return initial - 4 + (int(jumps/4)*(-4))\n\nl = []\nt = int(input())\nfor i in range(t):\n    key = input()\n    inp = key.split(' ')\n    l.append(grasshopper(int(inp[0]),int(inp[1])))\n\nfor ans in l:\n    print(ans)",
                true
            ],
            [
                "import math\n\nn = int(input())\nfor _ in range(n):\n    n, k = list(map(int, input().split()))\n    if n % 2 == 0:\n        if k % 4 == 0:\n            print(n)\n        elif k % 4 == 1:\n            print(n-4*math.floor(k/4)-1)\n        elif k % 4 == 2:\n            print(n+1)\n        elif k % 4 == 3:\n            print(n+4*math.ceil(k/4))\n    elif n % 2 == 1:\n        if k % 4 == 0:\n            print(n)\n        elif k % 4 == 1:\n            print(n+4*math.floor(k/4)+1)\n        elif k % 4 == 2:\n            print(n-1)\n        elif k % 4 == 3:\n            print(n-4*math.ceil(k/4))",
                true
            ],
            [
                "from collections import defaultdict\ntc=int(input())\nfor _ in range(tc):\n    x,n=list(map(int,input().split()))\n    if x%2==0:\n        p=x\n        if n%4==2:\n            p+=1\n        elif n%4==1:\n            p-=1\n            d=n//4\n            p-=d*4\n        elif n%4==3:\n            d=(n+1)//4\n            p+=d*4\n        print(p)\n    else:\n        p=x\n        if n%4==1:\n            p+=1\n            d=n//4\n            p+=d*4\n        elif n%4==2:\n            p-=1\n        elif n%4==3:\n            d=(n+1)//4\n            p-=d*4\n        print(p)",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    s, j = list(map(int, input().split()))\n    f = j\n    j %= 4\n    if j == 0:\n        print(s)\n    elif j == 1:\n        if s%2 != 0:\n            print(f + s)\n        else:\n            print(-f + s)\n    elif j == 2:\n        if s%2 == 0:\n            print(1 + s)\n        else:\n            print(s-1)\n    else:\n        if s%2 == 0:\n            print(f + 1 + s)\n        else:\n            print(-f -1 +s)",
                true
            ],
            [
                "_ = int(input())\nfor __ in range(_):\n    x, n = map(int, input().split())\n    if x % 2 == 1:\n        if n % 2 == 1:\n            if ((n-1) // 2) % 2 == 0:\n                print(x + n)\n            else:\n                print(x - n - 1)\n        else:\n            if (n // 2) % 2 == 0:\n                print(x)\n            else:\n                print(x - 1)\n    else:\n        if n % 2 == 1:\n            if ((n-1) // 2) % 2 == 0:\n                print(x - n)\n            else:\n                print(x + 1 + n)\n        else:\n            if (n//2) % 2 == 0:\n                print(x)\n            else:\n                print(x + 1)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x0, n = map(int, input().split())\n    k = 1\n    if n % 4 == 0:\n        print(x0)\n    elif n % 4 == 1:\n        if x0 % 2 == 0:\n            print(x0 - n)\n        else:\n            print(x0 + n)\n    elif n % 4 == 2:\n        if x0 % 2 == 0:\n            print(x0 + 1)\n        else:\n            print(x0 - 1)\n    else:\n        if x0 % 2 == 0:\n            print(x0 + n + 1)\n        else:\n            print(x0 - n - 1)\n",
                true
            ],
            [
                "t = int(input())\n\nfor test in range(t):\n    n,k = map(int,input().split())\n    start = ((k//4)*4)+1\n    ans = n\n    if(n%2 != 0):\n        if(k%4==1):\n            ans += start\n        elif(k%4==2):\n            ans -= 1\n        elif(k%4==3):\n            ans -= (start+3)\n    else:\n        if(k%4==1):\n            ans -= start\n        elif(k%4==2):\n            ans += 1\n        elif(k%4==3):\n            ans += (start+3)\n\n    print(ans)",
                true
            ],
            [
                "import sys\nimport math\n# input= sys.stdin.buffer.readline\nfor _ in range(int(input())):\n    x,n=[int(c) for c in input().split()]\n    if n%4 == 0:\n        print(x)\n    else:\n        mvs = n - (n%4) + 1\n        ans = x\n        for i in range(mvs,n+1):\n            if ans%2 == 0:\n                ans= ans -i\n            else:\n                ans = ans + i \n        \n        print(ans)",
                true
            ],
            [
                "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Nov  4 00:34:36 2021\n\n@author: Yogesh Panjwani\n\"\"\"\nt=int(input())\nfor _ in range(t):\n    x0 , n = map(int, input().split())\n    final= 0\n    val=0\n    if n==0:\n        print(x0)\n        continue\n    \n    ans = x0\n    if x0%2==0:\n        ans-=1\n        pair = (n-1)//4\n        ans -= 4*pair\n        r = (n-1)%4\n        if r==1:\n            ans += n\n        elif r==2:\n            ans += (n+n-1)\n        elif r==3:\n            ans += (-n+n-1+n-2)\n        \n        print(ans)\n        \n    else:\n        ans+=1\n        pair = (n-1)//4\n        ans += 4*pair\n        r = (n-1)%4\n        if r==1:\n            ans -= n\n        elif r==2:\n            ans -= (n+n-1)\n        elif r==3:\n            ans -= (-n+n-1+n-2)\n            \n        print(ans)",
                true
            ],
            [
                "for k in range(int(input())):\n    x,n=map(int,input().split())\n\n    r=n%4\n    f=((n//4)*4) +1\n    for i in range(f,n+1):\n        if(x%2==0):\n            x-=i\n        else:\n            x+=i\n    print(x)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\n\ndef oddGrasshopper():\n    x, n = inlt()\n    for s in range(n//4*4 + 1, n+1):\n        if x % 2 == 1:\n            x = x + s\n        else:\n            x = x - s\n    print(x)\n    return\n\n\nif __name__ == '__main__':\n    t = inp()\n    for i in range(t):\n        oddGrasshopper()\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    x, n = map(int, input().split())\n    if x % 2 == 0:\n        l = n%4\n        tot = -(n - l +1) * (l >= 1) + (n - l + 2) * (l >= 2) + (n - l + 3) * (l == 3)\n        print(x + tot)\n    else:\n        l = (n-2) % 4\n        tot =  -(n-l+1) * (l >=  1) + (n-l+2) * (l >= 2) + (n-l+3) * (l == 3)\n        print(x + (tot - 1))\n",
                true
            ],
            [
                "def solve():\n    x0, n = map(int, input().split())\n    if x0 % 2 == 0:\n        mod = n % 4\n        if mod == 0:\n            ans = x0\n        elif mod == 1:\n            ans = x0 - n\n        elif mod == 2:\n            ans = x0 + 1\n        else:\n            ans = x0 + (n + 1)\n    else:\n        mod = n % 4\n        if mod == 0:\n            ans = x0\n        elif mod == 1:\n            ans = x0 + n\n        elif mod == 2:\n            ans = x0 - 1\n        else:\n            ans = x0 - (n + 1)\n    print(ans)\n\n\nfor _ in range(int(input())):\n    solve()\n",
                true
            ],
            [
                "def grasshopper(x0: int, jump: int) -> int:\n    if jump == 1:\n        return x0 - 1 if x0 % 2 == 0 else x0 + 1\n    else:\n        group = (jump - 1) // 4\n        group_2 = 0 #(2 + (4 * (group - 1) + 2)) * 0.5 * group\n        group_3 = 0 #(3 + (4 * (group - 1) + 3)) * 0.5 * group\n        group_4 = 0 #(4 + (4 * (group - 1) + 4)) * 0.5 * group\n        #group_5 = (5 + (4 * (group - 1) + 5)) * 0.5 * group\n        if (jump - 1) % 4 == 1:\n            group_2 = 4 * group + 2\n        elif (jump - 1) % 4 == 2:\n            group_2 = 4 * group + 2\n            group_3 = 4 * group + 3\n        elif (jump - 1) % 4 == 3:\n            group_2 = 4 * group + 2\n            group_3 = 4 * group + 3\n            group_4 = 4 * group + 4\n        if x0 % 2 == 0:\n            x0 = x0 - 1 - 4*group + group_2 + group_3 - group_4\n        else:\n            x0 = x0 + 1 + 4*group - group_2 - group_3 + group_4\n        # print('x0=',x0)\n    return int(x0)\n\n\n\nn_input = int(input())\nfor _ in range(n_input):\n    input_x0, input_jump = map(int, input().split())\n    print(grasshopper(input_x0, input_jump))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    x,n=map(int,input().split())\n    \"\"\"s=0\n    for i in range(n):\n        s+=pow(-1,i+1)*i\n    if x%2==0:\n        print(x+s)\n    else:\n        print(x-s)\n    if x%2==0:\n        if n%2==0:\n            print(int(x+n/2))\n        else:\n            print(int(x+(n-1)/2-n))\n    else:\n        if n%2==0:\n            print(int(x-n/2))\n        else:\n            print(int(x-(n-1)/2+n))\n\"\"\"\n    \"\"\"for i in range(n):\n        x+=pow(-1,x+1)*i\n    print(x)\"\"\"\n    if n%4==0:\n        s=0\n    if n%4==1:\n        s=-1*n\n    if n%4==2:\n        s=1\n    elif n%4==3:\n        s=n+1\n    if x%2==0:\n        print(x+s)\n    else:\n        print(x-s)\n\"\"\" 0 [-1+2+3-4-5+6+7-8]\n    1 [+1-2-3+4+5-6-7+8]\"\"\"\n",
                true
            ],
            [
                "def total(a0, d, n):\n    if n == 0:\n        return 0\n    return int((2 * a0 + (n - 1) * d) * (n / 2))\n\nt = int(input())\nfor _ in range(t):\n    #n = int(input())\n    x, n = list(map(int, input().split()))\n    #a = list(map(int, input().split()))\n\n    dd = n // 4\n    \n    if x % 2 == 0:\n        if n % 4 == 0:\n            print(x)\n        elif n % 4 == 1:\n            print(x-n)\n        elif n % 4 == 2:\n            print(x+1)\n        else:\n            print(x+1+n)\n    \n\n    else:\n        if n % 4 == 0:\n            print(x)\n        elif n % 4 == 1:\n            print(x+n)\n        elif n % 4 == 2:\n            print(x-1)\n        else:\n            print(x-1-n)\n\n   ",
                true
            ],
            [
                "t=int(input())\n\nfor t in range(t):\n    x,n=[int(x) for x in input().split()]\n    #handle the small cases manually\n    a4=n//4\n    a1=(n-1)//4 +1\n    a2=(n-2)//4 +1\n    a3=(n-3)//4 +1\n    \n    ans= (a4)*(4+(a4-1)*2)+(a1)*(1+(a1-1)*2)-(a2)*(2+(a2-1)*2)-(a3)*(3+(a3-1)*2)\n    if x%2==0:\n        ans=-ans\n    ans=ans+x\n    print(int(ans))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x, n = map(int, input().split())\n    a = n//4\n    if x%2:\n        if n%4 == 0:\n            print(x)\n        if n%4 == 1:\n            print(x+4*a+1)\n        if n%4 == 2:\n            print(x-1)\n        if n%4 == 3:\n            print(x-4*a-4)\n    else:\n        if n%4 == 0:\n            print(x)\n        if n%4 == 1:\n            print(x-4*a-1)\n        if n%4 == 2:\n            print(x+1)\n        if n%4 == 3:\n            print(x+4*a+4)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    m, n = list(map(int, input().split()))\n    if m & 1:\n        if n % 4 == 1:\n            m += n\n        elif n % 4 == 2:\n            m += n - 1\n            m -= n\n        elif n % 4 == 3:\n            m += n - 2\n            m -= n\n            m -= (n - 1)\n        else:\n            m = m\n    else:\n        if n % 4 == 1:\n            m -= n\n        elif n % 4 == 2:\n            m -= n - 1\n            m += n\n        elif n % 4 == 3:\n            m -= n - 2\n            m += n\n            m += (n - 1)\n        else:\n            m = m\n    print(m)",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,n = map(int,input().split())\n    \n    if x%2 == 1:\n        if n%2 ==0:\n            if n%4 ==0:\n                print(x)\n            else:\n                print(x-1)\n            \n        else:\n            if (n-1)%4 ==0:\n                print(x+n)\n            else:\n                print(x-n-1)\n            \n    else:\n        if n%2 ==0:\n            if n%4 ==0:\n                print(x)\n            else:\n                print(x+1)\n        else:\n            if (n-1)%4 ==0:\n                print(x-n)\n            else:\n                print(x+n+1)\n            \n            \n            \n            ",
                true
            ],
            [
                "t = int(input())\nfor k in range(t):\n    x, n = map(int, input().split())\n    if x % 2 == 0:\n        if n % 4 == 1:\n            x = x - n\n        elif n % 4 == 2:\n            x = x + 1\n        elif n % 4 == 3:\n            x = x + n + 1\n    else:\n        if n % 4 == 1:\n            x = x + n\n        elif n % 4 == 2:\n            x = x - 1\n        elif n % 4 == 3:\n            x = x - n - 1       \n    print(x)",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,n=map(int,input().split())\n    t=n//4\n    n=n-(t*4)\n    count=(t*4)+1\n    while n:\n        if abs(x)%2==0:\n            x-=count\n        else:\n            x+=count\n        count+=1\n        n-=1\n    print(x)",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\n#sys.setrecursionlimit(10**7)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\n#Fenwick Tree point update range sum\ndef update_it(bit,i,val):\n    n=len(bit)\n    while(i<n):\n        bit[i]+=val\n        i+=i&(-i)\ndef get_ans(bit,i):\n    n=len(bit)\n    tot=0\n    while(i>0):\n        tot+=bit[i]\n        i-=i&(-i)\n    return tot\nprime=[2,3,5,7,11,13,17,19,23,29]\ndef hnbhai(tc):\n    x,n=sd()\n    if n%4==0:\n        print(x)\n        return\n    sign=1 if (x%2==0) else -1\n    if n%4==1:\n        print(x-n if sign==1 else x+n)\n        return\n    if n%4==2:\n        print(x+sign)\n        return\n    if n%4==3:\n        print(n+1+x if sign==1 else x-n-1)\n        return\n    return\nfor _ in range(sb()):\n    hnbhai(_+1)\n",
                true
            ],
            [
                "test_cases = int(input())\nfor t in range(test_cases):\n    x, n = map(int, input().split())\n    if n == 0:\n        print(x)\n    else:\n        if x % 2 == 0:\n            x = x - 1\n        else:\n            x = x + 1\n        n = n - 1\n        n_new = int(n/4)\n        if x % 2 == 1:\n            x = x - (4 * n_new)\n        else:\n            x = x + (4 * n_new)\n        for k in range((n_new*4) + 2, n + 2):\n            if x % 2 == 1:\n                x = x + k\n            else:\n                x = x - k\n        print(x)",
                true
            ],
            [
                "from math import ceil\n\n\ndef sum_ap(n, a, d):\n    return (n * ((2 * a) + ((n - 1) * d)))//2\n\n\nfor _ in range(int(input())):\n    x, n = map(int, input().split())\n\n    # sum -0, -1, +2, +3, -4, -5, +6, +7\n    n += 1\n    ans = 0\n    t = ceil(n/4)\n    if n % 4 == 0:\n        ans += sum_ap(t, 0, -4)\n        ans += sum_ap(t, -1, -4)\n        ans += sum_ap(t, 2, 4)\n        ans += sum_ap(t, 3, 4)\n\n    elif n % 4 == 1:\n        ans += sum_ap(t, 0, -4)\n        ans += sum_ap(t - 1, -1, -4)\n        ans += sum_ap(t - 1, 2, 4)\n        ans += sum_ap(t - 1, 3, 4)\n\n    elif n % 4 == 2:\n        ans += sum_ap(t, 0, -4)\n        ans += sum_ap(t, -1, -4)\n        ans += sum_ap(t - 1, 2, 4)\n        ans += sum_ap(t - 1, 3, 4)\n\n    else:\n        ans += sum_ap(t, 0, -4)\n        ans += sum_ap(t, -1, -4)\n        ans += sum_ap(t, 2, 4)\n        ans += sum_ap(t - 1, 3, 4)\n\n    if x % 2 == 0:\n        x += ans\n    else:\n        x -= ans\n\n    print(x)",
                true
            ],
            [
                "#Codeforces handle - \"@titanalpha\"\n#Email id - shubhamnokiafan@gmail.com\n\nfrom collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nimport copy\n\nMOD = 1000000007\nMAX = sys.maxsize\nMIN = -sys.maxsize\n\nclass get:\n    def int():\n        return list(map(int,input().split()))\n    def str():\n        return input().split()\n    def float():\n        return list(map(float,input().split()))\n    def map():\n        return map(int,input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x))+1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result,item)\n    return result\n\ndef LCM(a,b):\n    return (a*b)//(math.gcd(a,b))\n\ndef solve():\n    x,n = get.map()\n    pos = x\n    num = (n//4)*4 + 1\n    n = n%4\n    if n == 1:\n        if x%2 == 0:\n            pos -= num\n        else:\n            pos += num\n    elif n == 2:\n        if x%2 == 0:\n            pos += 1\n        else:\n            pos -= 1\n    elif n == 3:\n        if x%2 == 0:\n            pos += 1 + num + 2\n        else:\n            pos -= (1 + num + 2)\n    print(pos)\n\n    \nfor _ in range(int(input())):\n    solve()",
                true
            ],
            [
                "from decimal import Decimal\n\nt = int(input())\nfor _ in range(t):\n    x, n = map(Decimal, input().split())\n    even = n//2\n    odd = n-even\n    ans = 0\n    odd2 = odd//2\n    odd1 = odd - odd2\n    total1 = ((odd1)*(2+(odd1-1)*4))/2\n    total2 = ((odd2)*(6+(odd2-1)*4))/2\n    even2 = even//2\n    even1 = even - even2\n    total3 = ((even1)*(4+(even1-1)*4))/2\n    total4 = ((even2)*(8+(even2-1)*4))/2\n    if x % 2 == 0:\n        ans = x - total1 + total3 + total2 - total4\n        print(int(ans))\n    else:\n        ans = x + total1 - total3 - total2 + total4\n        print(int(ans))\n",
                true
            ],
            [
                "t = int(input())\n\nout = []\n\nfor i in range(t):\n    x, n = map(int, input(). split())\n    tmp = x\n    # for j in range(1, n+1):\n    #     if x % 2 == 0:\n    #         x -= j\n    #     else:\n    #         x += j\n    #     print(x, n%4)\n\n    if tmp % 2 == 0:\n        if n % 4 == 3:\n            x = tmp + n+1\n        elif n % 4 == 1:\n            x = tmp - n\n        elif n % 4 == 2:\n            x = tmp + 1\n        elif n % 4 == 0:\n            x = tmp\n    else:\n        if n % 4 == 3:\n            x = tmp - n - 1\n        elif n % 4 == 1:\n            x = tmp + n\n        elif n % 4 == 2:\n            x = tmp - 1\n        elif n % 4 == 0:\n            x = tmp\n    if n == 0:\n        x = tmp\n    out.append(x)\n\nfor i in range(len(out)):\n    print(out[i])\n",
                true
            ],
            [
                "from time import time\n\n_START_TIME_ = time()\n_DEBUGGING_ = False\n\n\ndef read_line() -> str:\n    if _DEBUGGING_:\n        return _fr_.readline()\n    else:\n        return input()\n\n\ndef write(*args, _sep=' ', _end='\\n'):\n    if _DEBUGGING_:\n        _fw_.write(f'{_sep.join(str(elem) for elem in args)}{_end}')\n    else:\n        print(*args, sep=_sep, end=_end)\n\n\ndef log(*args, _sep=' ', _end='\\n'):\n    if _DEBUGGING_:\n        print(*args, sep=_sep, end=_end)\n\n\ndef solve(x0, n):\n    for i in range(n // 4 * 4 + 1, n + 1):\n        if x0 % 2 == 0:\n            x0 -= i\n        else:\n            x0 += i\n\n    write(x0)\n\n\nif __name__ == '__main__':\n    # open the files for reading and writing\n    if _DEBUGGING_:\n        _fr_ = open('input.txt')\n        _fw_ = open('output.txt', 'w')\n\n    _t_ = int(read_line().strip())\n\n    for _ in range(_t_):\n        _x0_, _n_ = [int(x) for x in read_line().strip().split()]\n        solve(_x0_, _n_)\n\n    # close the files for reading and writing\n    if _DEBUGGING_:\n        _fr_.close()\n        _fw_.close()\n\n    # print the elapsed time\n    if _DEBUGGING_:\n        print('\\nElapsed time: {:.2f}s'.format(time() - _START_TIME_), end='')\n",
                true
            ],
            [
                "#-------------------imports-------#\nimport sys\nimport io,os\nimport string\nfrom io import BytesIO, IOBase\nfrom os import path\nfrom collections import Counter,OrderedDict\nimport math\nimport random\nimport bisect\nfrom functools import reduce\nfrom sys import stdin,stdout\nfrom math import gcd,floor,sqrt,log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl,bisect_right as br\n\n\n#------------------ONLINE JUDGE OR NOT-------#\n\nif(path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\",\"r\")\n    sys.stdout = open(\"output.txt\",\"w\")\nelse:\n    input = sys.stdin.readline\n    # input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\n\n\nsys.setrecursionlimit(100000000)\n\n\n\n#---------------------pre made and input functions-------#\ninp    =lambda: int(input())\nstrng  =lambda: input().strip()\njn     =lambda x,l: x.join(map(str,l))\nstrl   =lambda: list(input().strip())\nmul    =lambda: map(int,input().strip().split())\nmulf   =lambda: map(float,input().strip().split())\nseq    =lambda: list(map(int,input().strip().split()))\nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\nflush  =lambda: stdout.flush()\nstdstr =lambda: stdin.readline()\nstdint =lambda: int(stdin.readline())\nstdpr  =lambda x: stdout.write(str(x))\n\n\n\nmod=1000000007\n\n\n#---------------------input-------\na = inp()\n\n\ndef solve(x,n):\n\n    \n    if n==0:\n        return print(x)\n    if n==1:\n\n        if x&1==0 or x==0:\n            x-=1\n        else:\n            x+=1\n\n        return print(x)\n\n    if n==2:\n\n\n        if x&1==0 or x==0:\n            x-=1\n        else:\n            x+=1\n\n        if x&1==0 or x==0:\n            x-=2\n        else:\n            x+=2        \n\n        return print(x)        \n\n    o = x\n    if x&1==0 or x==0:\n        x-=1\n    else:\n        x+=1\n\n    if x&1==0 or x==0:\n        x-=2\n    else:\n        x+=2    \n\n\n    sec = x\n\n    fo = o\n\n    # print(sec,fo)\n\n\n    if n&1==0:\n        \n        if n%4==0:\n            return print(fo)\n        else:\n            return print(sec)    \n\n    else:\n        \n        if (n-1)%4==0:\n\n            new_val = fo\n\n        else:\n            new_val = sec\n\n\n        if new_val&1==0:\n            new_val -= n\n        else:\n            new_val +=n\n\n\n        return print(new_val)                 \n\n\n\n\n\n\n#----------actual inputs----------#\n\nfor i in range(a):\n    x,n = mul()\n    solve(x,n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#------------functions---------------------\ndef gcdoftwo(a,b):\n\n    #log(min(a,b))\n    if a == 0:\n        return b\n    else:\n        return gcdoftwo(b%a,a)\n\ndef lcm(a,b): return (a*b//(gcdoftwo(a,b)))        \n\ndef gcdofList(A): \n    res = A[0]\n    for c in A[1::]:\n        res = gcdoftwo(res , c) \n        if res == 1:\n            return res\n    return res         \n\ndef binpow(a,b):\n\n    #to calc a^b in log(n) time\n\n\n    res = 1\n\n\n    while b>0:\n\n        if b&1:\n            res = res*a\n        a = a*a\n        b>>=1\n    return res        \n\ndef fibo_in_logn(n):\n    if n == 0:\n        return [0, 1]\n\n    p = fibo_in_logn(n >> 1)\n    c = p.first * (2 * p.second - p.first)\n    d = p.first * p.first + p.second * p.second\n    if n & 1:\n        return {d, c + d}\n    else:\n        return {c, d}\n\n\n\n\n\ndef x_n_mod_m(a,b,m):\n\n    #to calculate x^n mod m\n\n    a  = a%m \n\n    res = 1\n    while b>0:\n        if b&1:\n            res = res*a%m \n        a = a*a%m\n        b>>=1\n\n    return res\n\n\n\n\ndef change_array(count,t):\n\n    emp = []\n    for i in range(len(t)):\n        emp.append(count[t[i]])\n    return emp    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t=int(input())\nfor i in range (0,t):\n    x,n=map(int,input().split())\n    if(x%2==0 and n%2==0):\n        if(n%4==0):\n            print(x)\n        else:\n            print(x+1)\n    else:\n        if(n>2 and x%2==0 and n%2!=0):\n            if((n-1)%4==0):\n                print(x-n)\n            else:\n                print(x+n+1)\n        else:\n            if (n <=2 and x % 2 == 0 and n % 2 != 0):\n                if(n==0):\n                    print(x)\n                else:\n                    if(n==1):\n                        print(x-1)\n                    else:\n                        print(x+1)\n            else:\n                if (n >2 and x % 2 != 0 and n % 2 != 0):\n                    if((n+1)%4==0):\n                        print(x-(n+1))\n                    else:\n                        print(x+n)\n                else:\n                    if(n <=2 and x % 2 != 0 and n % 2 != 0):\n                        if(n==0):\n                            print(x)\n                        if(n==1):\n                            print(x+1)\n                        if(n==2):\n                            print(x-1)\n                    else:\n                        if(n >2 and x % 2 != 0 and n % 2 == 0):\n                            if(n%4==0):\n                                print(x)\n                            else:\n                                print(x-1)\n\n\n                        else:\n                            if (n <= 2 and x % 2 != 0 and n % 2 == 0):\n                                if (n == 0):\n                                    print(x)\n                                if (n == 1):\n                                    print(x + 1)\n                                if (n == 2):\n                                    print(x - 1)\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nwhile(t!=0):\n\n    x,n = [int(i) for i in input().split()]\n    s = n%4\n    for i in range(s-1,-1,-1):\n        if(x%2==0):\n            x = x-(n-i)\n        else:\n            x = x+(n-i)\n    print(x)\n\n    t-=1",
                true
            ],
            [
                "import math\nfor i in range(int(input())):\n    a,b=map(int,input().split())\n    x1,x2=0,0\n    if b>1:\n        x1= -(b//2) if (b//2)%2==0 else (b//2)+1\n    if b>2:\n        if b%4==0 or (b+1)%4==0:\n            x2=3+((math.ceil(b/4)-1)*2)\n        else:\n            x2=-((b - 1) // 2)\n    if b<=1:\n        print(a+b if a%2!=0 else a-b)\n    else :\n        if a%2==0:\n            a-=1\n            a+=(x1+x2)\n        else:\n            a+=1\n            a-=(x1+x2)\n        print(a)\n",
                true
            ],
            [
                "tottestcases = 0\ntottestcases = int(input())\n\nwhile tottestcases > 0:\n    pos,jumps = map(int, input().split())\n    curr = 1\n    if pos % 2 == 1:\n        pos = pos +  1\n        temp = jumps - 1\n    elif pos % 2 == 0:\n        temp = jumps\n        pos = pos + 4\n        temp = jumps - 3\n    pos = pos + (temp // 4) * 4\n    if temp % 4 > 0:\n        if temp % 4 == 1:\n                    pos = pos - jumps\n        if temp % 4 == 2:\n                    pos = pos + 1 - 2*jumps\n        if temp % 4 == 3:\n                pos = pos + 1 - 2*(jumps -1) + jumps\n    print(pos)\n    tottestcases -= 1\n",
                true
            ],
            [
                "\nt=int(input())\n\nfor _ in range(t):\n    x,n=map(int,input().split())\n    p = (n+1)//2\n\n    if n%4==1:\n        d = n\n    elif n%4==0:\n        d = 0\n    elif n%4==2:\n        d=-1\n    else:\n        d = - (n+1)\n\n    if x%2==0:\n        print(x-d)\n    else:\n        print(x+d)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b=map(int,input().split())\n    x = 4*(b//4)\n    for i in range(x+1,b+1):\n        if(a%2==0): \n            a-=i\n        else:\n            a+=i\n    print(a)\n    ",
                true
            ],
            [
                "t=int(input())\nlist1=[]\nfor i in range(t):\n    list1.append([int(x) for x in input().split()])\nfor i in range(t):\n    s=list1[i][0]\n    if s%2==0:\n        m=(list1[i][1]-1)%4\n        if m==0:\n            s=s-1-4*((list1[i][1]-1)//4)\n        elif m==1:\n            s=s-1-4*((list1[i][1]-1)//4)+list1[i][1]\n        elif m==2:\n            s = s - 1 - 4*((list1[i][1]-1)//4) + 2*list1[i][1]-1\n        elif m==3:\n            s = s - 1 - 4*((list1[i][1]-1)//4) + list1[i][1]-3\n    else:\n        m = (list1[i][1] - 1) % 4\n        if m == 0:\n            s = s + 1 + 4*((list1[i][1]-1)//4)\n        elif m == 1:\n            s = s + 1 + 4*((list1[i][1]-1)//4) - list1[i][1]\n        elif m == 2:\n            s = s + 1 + 4*((list1[i][1]-1)//4) - 2 * list1[i][1] + 1\n        elif m == 3:\n            s = s + 1 + 4*((list1[i][1]-1)//4) - list1[i][1] + 3\n    print(s)",
                true
            ],
            [
                "for t in range(int(input())):\n    [x,n]=list(map(int,input().split()))\n    if (x%2 == 0):\n        if (n % 4 == 0):\n            print(x)\n        elif (n % 4 == 1):\n            print(x - n)\n        elif (n % 4 == 2):\n            print(x + 1)\n        elif (n % 4 == 3):\n            print(x + n + 1)\n\n    else:\n        if(n%4 == 0):\n            print(x)\n        elif(n%4 == 1):\n            print(x + n)\n        elif(n%4 == 2):\n            print(x - 1)\n        elif(n%4 == 3):\n            print(x - n - 1)\n        \n       ",
                true
            ],
            [
                "for i in range(int(input())):\n    a,b = map(int, input().split())\n    b1 = b%4\n    if b1==0:\n        print(a)\n    else:        \n        t = []\n        for i in range(b%4):\n            t.append(b-i)\n        t = t[::-1]    \n        t[0] = -t[0]\n        if a%2==0:\n            for i in range(len(t)):\n                a = a+t[i]\n        elif a%2!=0:\n            for i in range(b%4):\n                a = a-t[i]\n        print(a)        \n        ",
                true
            ],
            [
                "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\ninteractive = False\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\n\nflush = sys.stdout.flush\nif interactive and not testing:\n    input = sys.stdin.readline\nelse:\n    inputData = InputData()\n    input = inputData.input\n\ndef intin():\n    return(int(eval(input())))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(eval(input())))\ndef strin():\n    return eval(input())\ndef lout(l, sep=\"\\n\", toStr=True):\n    print((sep.join(list(map(str, l)) if toStr else l)))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print((args[0] if len(args)==1 else args))\n    if kargs: print([(k,v) for k,v in list(kargs.items())])\ndef ask(q):\n    sys.stdout.write(str(q)+'\\n')\n    flush()\n    return intin()\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\n\ndef main():\n    x,n = intlin()\n    if x%2 == 0:\n        if n%4==1:\n            x -= n\n        elif n%4==2:\n            x += 1\n        elif n%4==3:\n            x += n+1\n    else:\n        if n%4==1:\n            x += n\n        elif n%4==2:\n            x -= 1\n        elif n%4==3:\n            x -= n+1\n    return x\n\nanss = []\nfor _ in range(intin()):\n    anss.append(main())\n    # anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print((int(round(time() * 1000))  - start_time))\n",
                true
            ],
            [
                "import random\ndef func(ai,val):\n    i=0\n    while i<val+1:\n        if ai%2:\n            ai+=i\n        else:ai-=i\n        i+=1\n    return ai\nfor _ in range(int(input())):\n    xo,n=map(int,input().split())\n    # xo,n=random.randrange(1,10),random.randrange(1,10)\n    ans=0\n    if not xo%2:\n        if n%2:\n            if (n+1)/2%2:\n                ans=(xo-n)\n            else:\n                ans=(xo+n+1)\n        else:\n            if (n/2)%2:ans=(xo+1)\n            else:ans=(xo)\n    else:\n        if n%2:\n            if not (n+1)/2%2:\n                ans=xo-n-1\n            else:\n                ans=xo+n\n        else:\n            if not n/2%2:\n                ans=xo\n            else:ans=xo-1\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    x,n=map(int,input().split())\n    base=(n//4)*4\n    for n in range(base+1,n+1):\n        if(x%2==0):\n            x=x-n\n        else:\n            x=x+n\n    print(x)\n",
                true
            ],
            [
                "\n\n#1\n# for _ in range(int(input())):\n#     k=input()\n#     s=input()\n#     ans=0\n#     dic={}\n#     for i,elm in enumerate(k):\n#         dic[elm]=i\n#     prev=dic[s[0]]\n#     for elm in s[1:]:\n#         ans+=(abs(dic[elm]-prev))\n#         prev=dic[elm]\n#     print(ans)\n\n#2\nfor _ in range(int(input())):\n    x,n=map(int,input().split())\n    n-=1\n    q,r=n//4,n%4\n    if x%2==0:\n        x-=1\n        x-=q*4\n    else:\n        x+=1\n        x+=q*4\n    n+=1\n    for i in range(n-r+1,n+1):\n        if x%2==0:\n            x-=i\n        else:\n            x+=i\n    print(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# def solution(arr):\n#     n=len(arr)\n#     dp=arr[:]\n#     for i in range(2,n):\n#         if i-3>-1:\n#             dp[i]=max(dp[i-3]+dp[i],dp[i],dp[i-2]+dp[i])\n#         else:\n#             dp[i]=max(dp[i],dp[i-2]+dp[i])\n#     return max(dp)\n# arr=list(map(int,input().split()))\n# print(max(solution(arr[:-1]),solution(arr[1:])))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##group marbles\n\n# def solution(g1,g2,g3):\n#     g1=set(g1)\n#     g2=set(g2)\n#     g3=set(g3)\n#     n=len(g1)+len(g2)+len(g3)\n#     dp=[[0,0,0] for _ in range(n+1)]\n#     dp[1][0]=1 if 1 not in g1 else 0\n#     dp[1][1]=1 if 1 not in g2 else 0\n#     dp[1][2]=1 if 1 not in g3 else 0\n\n#     for i in range(2,n+1):\n#         dp[i][0]+=(1 if i not in g1 else 0)\n#         dp[i][0]+=dp[i-1][0]\n#         dp[i][1]+=(1 if i not in g2 else 0)\n#         dp[i][1]+=min(dp[i-1][0],dp[i-1][1])\n#         dp[i][2]+=(1 if i not in g3 else 0)\n#         dp[i][2]+=min(dp[i-1][0],dp[i-1][1],dp[i-1][2])\n\n#     print(dp)\n#     return min(dp[n])\n\n# g1=list(map(int,input().split()))\n# g2=list(map(int,input().split()))\n# g3=list(map(int,input().split()))\n# print(solution(g1,g2,g3))\n\n\n\n\n\n\n# def solution(lb,ub,diff):\n#     pre=diff[:]\n#     for i in range(1,len(diff)):\n#         pre[i]+=pre[i-1]\n\n#     maxi=max(pre)\n#     mini=min(pre)\n#     if maxi>0:\n#         lb=lb+maxi\n#     if mini<0:\n#         ub=ub-abs(mini)\n#     print(pre,lb,ub)\n#     return max(ub-lb+1,0)\n\n# arr=list(map(int,input().split()))\n# lb=int(input())\n# ub=int(input())\n# print(solution(lb,ub,arr))\n\n\n\n\n\n\n\n\n\n\n\n\n\n# n,m,k,x=map(int,input().split())\n# word=input()\n# lst=[]\n# for _ in range(m):\n#     lst.append(input())\n# for i in range(len(lst)):\n#     lst[i]=sorted(lst[i])\n# ans=[]\n# cnt=[0]\n# def backtrack(j):\n#     if len(ans)==m:\n#         cnt[0]+=1\n#         if cnt[0]==x:\n#             return ans\n#         return [0]\n#     k=len(lst[j])\n#     for i in range(k):\n#         ans.append(lst[j][i])\n#         temp=backtrack(j+1)\n#         if temp!=[0]:\n#             return temp\n#         ans.pop()\n#     return [0]\n\n# backtrack(0)\n# ans=''.join(ans)\n# print(ans)\n# word=list(word)\n# j=0\n# for i in range(len(word)):\n#     if word[i]=='#':\n#         word[i]=ans[j]\n#         j+=1\n# word=''.join(word)\n# print(word)\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t=input()\nt=int(t)\nm=[0]*t\nn=[0]*t\nfor i in range(t):\n    m[i], n[i] = map(int, input().split(\" \"))\nfor i in range(t):\n    temp=n[i]%4\n    if m[i] & 1:\n        if temp == 0:\n            print(m[i])\n        elif temp == 1:\n            print(n[i]+m[i])\n        elif temp == 2:\n            print(m[i]-1)\n        elif temp == 3:\n            print(m[i]-n[i]-1)\n    else:\n        if temp == 0:\n             print(m[i])\n        elif temp == 1:\n            print(m[i]-n[i])\n        elif temp == 2:\n            print(m[i]+1)\n        elif temp == 3:\n            print(m[i]+n[i]+1)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())\n    if k==0:\n        print(n)\n    elif n%2==0 and k%4==2:\n        print(n+1)\n    elif n%2==0 and k%4==3:\n        print(n+k+1)\n    elif n%2==0 and k%4==0:\n        print(n)\n    elif n%2==0 and k%4==1:\n        print(n-k)\n    elif n%2==1 and k%4==2:\n        print(n-1)\n    elif n%2==1 and k%4==3:\n        print(n-(k+1))\n    elif n%2==1 and k%4==0:\n        print(n)\n    elif n%2==1 and k%4==1:\n        print(n+k)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t) :\n    x, y = input().split()\n    x = int(x)\n    y = int(y)\n    bagh = y % 4\n    ##age zooj bashe mogheiat avalesh\n    if (x%2 == 0) and ( y != 0) :\n        if bagh == 0 :\n            print(x+0)\n        if bagh == 1 :\n            print(x-y)\n        if bagh == 2 :\n            print(x+1)\n        if bagh == 3 :\n            print(x+(y+1))\n    ##aghe fard bashe mogheiat avalesh\n    if (x%2 == 1) and ( y != 0) :\n        if bagh == 0 :\n            print(x)\n        if bagh == 1 :\n            print(x+y)\n        if bagh == 2 :\n            print(x-1)\n        if bagh == 3 :\n            print(x- (y+1))\n    if y == 0 :\n        print(x)\n",
                true
            ],
            [
                "def main():\n    for _ in range(int(input())):\n        x, k = map(int, input().split())\n        if x % 2 == 0:\n            if k % 2 == 0:\n                if k % 4 == 0:\n                    print(x)\n                else:\n                    print(x + 1)\n            else:\n                if (k + 1) % 4 == 0:\n                    print(x + k + 1)\n                else:\n                    print(x - k)\n        else:\n            if k % 2 == 0:\n                if k % 4 == 0:\n                    print(x)\n                else:\n                    print(x - 1)\n            else:\n                if (k + 1) % 4 == 0:\n                    print(x - k - 1)\n                else:\n                    print(x + k)\n\n\nmain()\n",
                true
            ],
            [
                "def checker(x,n):\n    c=0\n    if abs(x)%2==0:\n        d=-1\n    else:\n        d=1\n    if n%4==1:\n        c=x+d*(1+4*(n//4))\n    elif n%4==2:\n        c=x-d\n    elif n%4==3:\n        c=x-d*(4*(1+n//4))\n    elif n%4==0:\n        c=x\n\n    return c\ntestcase=int(input())\nfor i in range(0,testcase):\n    x,n=map(int,input().split())\n    print(checker(x,n))\n",
                true
            ],
            [
                "def solve():\n    x0, n = map(int, input().split())\n    q = 4 * (n // 4)\n    jumps = n % 4\n    last_few = [x0]\n    for _ in range(3):\n        if last_few[-1] & 1:\n            last_few.append(last_few[-1] + 1 + q)\n        else:\n            last_few.append(last_few[-1] - 1 - q)\n        q += 1\n    return last_few[jumps]\n    \n    \nif __name__=='__main__':\n    for _ in range(int(input())):\n        print(solve())\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x, n = map(int, input().split())\n    if n == 0:\n        print(x)\n        continue\n    m = n%4\n    if x%2==0:\n        if m == 1:\n            print(x - n)\n        elif m == 2:\n            print(x+1)\n        elif m == 3:\n            print(x+n+1)\n        else:\n            print(x)\n    else:\n        if m == 1:\n            print(x + n)\n        elif m == 2:\n            print(x-1)\n        elif m == 3:\n            print(x-n-1)\n        else:\n            print(x)",
                true
            ],
            [
                "for i in range(int(input())):\n    x0, time = map(int, input().split())\n    t = time\n    time -= 1\n    z = 1\n    if x0 % 2 == 0:\n        x0 -= 1\n        x0 -= 4 * (time // 4)\n    else:\n        x0 += 1\n        x0 += 4 * (time // 4)\n        z = -1\n    time = time % 4\n    if time != 0:\n        if time == 1:\n            x0 += z * t\n        elif time == 2:\n            x0 += z * (t + t - 1)\n        else:\n            x0 += z * (t - 3)\n    print(x0)",
                true
            ],
            [
                "t=int(input())\nfor tc in range(t):\n    n,k=[int(i) for i in input().split()]\n    if(n%2==0):\n        if(k%4==0):\n            print(n)\n        elif(k%4==1):\n            print(n-k)\n        elif(k%4==2):\n            print(n+1)\n        else:\n            print(n+k+1)\n    else:\n        if(k%4==0):\n            print(n)\n        elif(k%4==1):\n            print(n+k)\n        elif(k%4==2):\n            print(n-1)\n        else:\n            print(n-k-1)",
                true
            ],
            [
                "def placing(x,n):\n    if x%2==0:\n        if n%2==0:\n            div=n//2\n            if div%2!=0:\n                return x+1\n            else:\n                return x\n        else:\n            div=(n+1)//2\n            if div%2!=0:\n                return x+1-(n+1)\n            else:\n                return x+n+1\n    else:\n        if n%2==0:\n            div=n//2\n            if div%2!=0:\n                return x-1\n            else:\n                return x\n        else:\n            div=(n+1)//2\n            if div%2!=0:\n                return x-1+n+1\n            else:\n                return x-(n+1)\nt=int(input())\nfor i in range(t):\n    x,n=map(int,input().split())\n    print(placing(x,n))\n    ",
                true
            ],
            [
                "t = int(input())\n\nfor t_i in range(t):\n    x, n = list(map(int, input().split()))\n    \n    if n == 0:\n        print(x)\n    if n == 1:\n        if x % 2 == 0:\n            print(x - 1)\n        else:\n            print(x + 1)\n    if n >= 2:\n        a = (n - 1) // 4\n        b = (n - 1) % 4\n        last_group = 0\n        if b == 1:\n            last_group += n\n        elif b == 2:\n            last_group += n + n - 1\n        elif b == 3:\n            last_group += - n + n - 1 + n - 2\n            \n        if x % 2 == 1:\n            x0 = x + 1\n            # \u041d\u0435\u0447\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u044b\u0436\u043a\u0438\n            x0 += a * 4\n            x0 -= last_group\n        else:\n            x0 = x - 1\n            # \u0427\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u044b\u0436\u043a\u0438\n            x0 -= a * 4\n            x0 += last_group\n            \n        print(x0)",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    x,n=map(int,input().split())\n    if x%2 == 0:\n        m=n%4\n        if m==1 : x-=n\n        elif m== 2 : x+=1\n        elif m== 3 : x+=n+1\n    else:\n        m=n%4\n        if m==1 : x+=n\n        elif m== 2 : x-=1\n        elif m== 3 : x-=n+1\n\n    print(x)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    x,n=map(int,input().split())\n    ans=0\n    m=n%4\n    if x%2==0:\n        if m==1:\n            print(x-n)\n        elif m==2:\n            print(x+1)\n        elif m==3:\n            print(x+n+1)\n        else:\n            print(x)\n    else:\n        if m == 1:\n            print(x +n)\n        elif m == 2:\n            print(x - 1)\n        elif m == 3:\n            print(x -( n + 1))\n        else:\n            print(x)",
                true
            ],
            [
                "for t in range(int(input())):\n    x,n= map(int, input().split())\n    #lis = list(map(int, input().split()))\n    #s=input()\n    val=n%4\n    if n<=3:\n        step=1\n        for i in range(n):\n            if x%2==0:\n                x-=(i+1)\n            else:\n                x+=(i+1)\n            step+=1\n    else:\n\n        for i in range(val-1,-1,-1):\n            #print(i,x,n-i)\n            if x%2==0:\n                x-=(n-i)\n            else:\n                x+=(n-i)\n    print(x)",
                true
            ],
            [
                "import sys\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\nFILE=False;\nif FILE:\n    sys.stdin = open('input.txt','r')\n    sys.stdout = open('output.txt','w')\n\nt=get_int(); #number of test cases\nanswer=[]; #results\n\nfor i in range(0,t):\n    values=get_string().split();\n    x0=int(values[0]);\n    n=int(values[1]);\n    if (x0%2==0):\n        if (n%4==0):\n            tot=x0;\n        elif (n%4==1):\n            tot=-n+x0;\n        elif (n%4==2):\n            tot=1+x0;\n        else:\n            tot=n+1+x0;\n    else:\n        if (n%4==0):\n            tot=x0;\n        elif (n%4==1):\n            tot=n+x0;\n        elif (n%4==2):\n            tot=x0-1;\n        else:\n            tot=-(n+1)+x0;\n\n    answer.append(str(tot));\n    \n#save results\nfor item in answer:\n    sys.stdout.write(item)\n    sys.stdout.write('\\n')",
                true
            ],
            [
                "n = int(input())\nfor _ in range(n):\n    x0, num = map(int, input().split())\n    d = list()\n    while num % 4 != 0:\n        d.append(num)\n        num -= 1\n    for i in range(len(d)):\n        x = d.pop()\n        if x0 % 2 == 0:\n            x0 -= x\n        else:\n            x0 += x\n    print(x0)\n\n\n",
                true
            ],
            [
                "T = int(input())\nfor t in range(T):\n    x, n = map(int, input().split())\n    if n==0:\n        ans = x\n    elif x%2==0:\n        if n%4==1:\n            ans = x-n\n        elif n%4==2:\n            ans = x+1\n        elif n%4==3:\n            ans = x+n+1\n        elif n%4==0:\n            ans = x\n    else:\n        if n%4==1:\n            ans = x+n\n        elif n%4==2:\n            ans = x-1\n        elif n%4==3:\n            ans = x-n-1\n        elif n%4==0:\n            ans = x\n    print(ans)\n            \n",
                true
            ],
            [
                "t = int(input())\nlst = []\nwhile t > 0:\n    x, d = input().split(' ')\n    x, d = int(x), int(d)\n    if d == 0:\n        lst.append(x)\n    else:\n        \n        if x % 2 == 0:\n            if d % 2 == 0 and d > 2:\n                if d % 4 == 0:\n                    lst.append(x)\n                elif d % 2 == 0:\n                    lst.append(x+1)\n            elif d % 2 != 0 and d > 2:\n                if (d - 1) % 4 == 0:\n                    lst.append(x-d)\n                else:\n                    lst.append(x+d+1)\n            else:\n                if d == 1:\n                    lst.append(x-1)\n                elif d == 2:\n                    lst.append(x+1)\n                \n        else:\n            if d % 2 == 0 and d > 2:\n                if d % 4 == 0:\n                    lst.append(x)\n                elif d % 2 == 0:\n                    lst.append(x-1)\n            elif d % 2 != 0 and d > 2:\n                if (d - 1) % 4 == 0:\n                    lst.append(x+d)\n                else:\n                    lst.append(x-d-1)\n            else:\n                if d == 1:\n                    lst.append(x+1)\n                elif d == 2:\n                    lst.append(x-1)\n    \n    t-=1\nfor w in lst:\n    print(w)",
                true
            ],
            [
                "from sys import *\nfor _ in range(int(stdin.readline())):\n    x,n=map(int,stdin.readline().split())\n    if x&1==0:\n        if n==1:\n            ans=x-1\n        else:\n            if n&1==0:\n                if n%4==0:\n                    ans=x\n                else:\n                    ans=x+1\n            else:\n                if (n-1)%4==0:\n                    ans=x\n                    ans-=n\n                else:\n                    ans=x+1\n                    ans+=n\n    else:\n        if n==1:\n            ans=x+1\n        else:\n            if n&1==0:\n                if n%4==0:\n                    ans=x\n                else:\n                    ans=x-1\n            else:\n                if (n-1)%4==0:\n                    ans=x+n\n                else:\n                    ans=x-1-n\n    stdout.write(str(ans)+\"\\n\")",
                true
            ],
            [
                "for i in range(int(input())):\n    a, b = map(int, input().split())\n    if b == 0:\n        print(a)\n        continue\n    if a % 2 == 0:\n        if b % 4 == 0:\n            print(a)\n        elif b % 4 == 1:\n            print(a - b)\n        elif b % 4 == 2:\n            print(a + 1)\n        else:\n            print(a + b + 1)\n    else:\n        if b % 4 == 0:\n            print(a)\n        elif b % 4 == 1:\n            print(a + b)\n        elif b % 4 == 2:\n            print(a - 1)\n        else:\n            print(a - b - 1)",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    inp = input()\n    initial = int(inp.split()[0])\n    n = int(inp.split()[1])\n\n    rem = n%4\n    q = n//4\n\n    if rem == 0:\n        print(initial)\n        continue\n\n    if rem == 2:\n        for j in range(1, 3):\n            if initial%2 == 0:\n                initial -= j\n            else:\n                initial += j\n        print(initial)\n        continue\n\n    if rem == 1:\n        if initial%2 == 0:    #initial is even\n            print((initial-1)-4*q)\n        else:\n            print((initial+1)+4*q)\n\n    if rem == 3:\n        if initial%2 == 0:\n            print((initial+4)+4*q)\n        else:\n            print((initial-4)-4*q)\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor u in range(t):\n    x,n=map(int,input().split())\n    d = n % 4\n    if x % 2 == 0:\n        if d == 0:\n            ans = 0\n        if d == 2:\n            ans = 1\n        if d == 1:\n            ans = -n\n        if d== 3:\n            ans = -n+2+n-1+n\n        print(ans + x)\n    else:\n        if d == 0:\n            ans = 0\n        if d == 1:\n            ans = n\n        if d == 2:\n            ans = -1\n        if d == 3:\n            ans = -n-1\n        print(ans+x)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    x0, n = map(int, input().split())\n    if x0%2 == 0:\n        if n%4 == 1:\n            print(x0-n)\n        elif n%4 == 2:\n            print(x0+1)\n        elif n%4 == 3:\n            print(x0+n+1)\n        else:\n            print(x0)\n    else:\n        if n%4 == 1:\n            print(x0+n)\n        elif n%4 == 2:\n            print(x0-1)\n        elif n%4 == 3:\n            print(x0-n-1)\n        else:\n            print(x0)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\ndef kek(x, n):\n    if x % 2:\n        if (n % 2):\n            if (n + 1) % 4 == 0:\n                return( (x-1) - n )\n            else:\n                return( (x-1) + (n + 1) )\n        else:\n            if (n % 4 == 0):\n                return( (x-1) + 1)\n            else:\n                return( (x-1) )\n    else:\n        if (n % 2):\n            if (n + 1) % 4 == 0:\n                return(n + 1 + x)\n            else:\n                return(-n + x)\n        else:\n            if n % 4:\n                return(x + 1)\n            else:\n                return(x)\n\nt = int(input())\nfor _ in range(t):\n    x, n = map(int, input().split(\" \"))\n    print(kek(x, n))",
                true
            ],
            [
                "def getodd(n):\n    if n%2 == 0:\n        return n\n    return -n\n\ndef getodd1(n):\n    if n%2 == 0:\n        return -n\n    return n\n\ndef geteven(n):\n    if n%2 == 0:\n        return -n\n    return n + 1\nt = int(input())\n\nfor _ in range(t):\n    x, n = [int(i) for i in input().split()]\n    odd, even= -1, -1\n    if n%2 == 0:\n        even = int(n/2)\n        odd = even\n    else:\n        odd = int((n + 1)/2)\n        even = odd - 1\n\n    if x%2 == 0:\n        pos = x + getodd(odd) + geteven(even)\n    else:\n        pos = x + getodd1(odd) - geteven(even)\n    print(pos)\n",
                true
            ],
            [
                "from sys import stdin,stdout,setrecursionlimit\nstdin.readline\ndef mp(): return list(map(int, stdin.readline().strip().split()))\ndef it():return int(stdin.readline().strip())\nfrom collections import defaultdict as dd,Counter as C,deque\nfrom math import ceil,gcd,sqrt,factorial,log2,floor\nfrom bisect import bisect_right as br,bisect_left as bl\nfrom heapq import *\nmod = 10**9+7\ninf = (1<<60)\n\nfor _ in range(it()):\n    x,n = mp()\n    # print(n%4)\n    if x&1:\n        if n%4 == 0:\n            print(x)\n        elif n%4 == 2:\n            print(x-1)\n        elif n%4 == 1:\n            print((n//4)*4 +x+1)\n        else:\n            print(-((n//4)*4) +x-4)\n    else:\n        # print(n%4)\n        if n%4 == 0:\n            print(x)\n        elif n%4 == 2:\n            print(x+1)\n        elif n%4 == 1:\n            print(-((n//4)*4) +x-1)\n        else:\n            print(((n//4)*4) + x+4)\n",
                true
            ],
            [
                "from sys import stdin\ninput=stdin.readline\nrn=lambda:int(input())\nrns=lambda:map(int,input().split())\nrl=lambda:list(map(int,input().split()))\nrs=lambda:input().strip()\nYN=lambda x:print('YES') if x else print('NO')\nceil_div=lambda a,b:-(-a//b)\nmod=10**9+7\n\nfor _ in range(rn()):\n    x,n=rns()\n    m=n%4\n    b=n-m\n    if x%2==0:\n        a=[x,x-b-1,x+1,x+b+4]\n    else:\n        a=[x,x+b+1,x-1,x-b-4]\n    print(a[m])",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    x,n = map(int,input().split())\n    if(n==0):\n        print(x)\n    elif(n%4 == 1):\n        if(x%2==0):\n            print(x-n)\n        else:\n            print(x+n)\n    elif(n%4 == 2):\n        if(x%2 == 0):\n            print(x+1)\n        else:\n            print(x-1)\n    elif(n%4 == 3):\n        if(x%2 == 0):\n            print(x + n +1)\n        else:\n            print(x - n -1)\n    else:\n        print(x)",
                true
            ],
            [
                "import math\nfrom collections import OrderedDict\nfrom collections import Counter\nfrom itertools import combinations\nfrom itertools import accumulate\nimport operator\nimport bisect\n#a= list(map(int, input(\"\").strip().split()))[:n]\ndef solve(x,d):\n    c=x\n    e=[]\n    f=d%4\n    for i in range(4):\n        m=i+1\n        if c & 1:\n            c+=m\n        else:\n            c-=m\n        e.append(c)\n    if f==2 or f==0:\n        if f==0:\n            f+=4\n        print(e[f-1])\n        return\n    else:\n        d-=1\n        g=d//4\n        if f==1:\n            if x & 1:\n                print(e[f-1]+g*4)\n                return\n            else:\n                print(e[f-1]-g*4)\n                return\n        else:\n            if x & 1:\n                print(e[f-1]-g*4)\n                return\n            else:\n                print(e[f-1]+g*4)\n                return\n            \nt=int(input(\"\"))\nfor i in range(t):\n    x,d= list(map(int, input(\"\").strip().split()))[:2]\n    solve(x,d)",
                true
            ],
            [
                "import sys, collections, math, bisect, heapq, random, functools\ninput = sys.stdin.readline\nout = sys.stdout.flush\n\ndef solve():\n      x0,n = map(int,input().split())\n      if x0 & 1:\n          cnt = n // 4\n          left = n % 4\n          if left == 0:\n              print(x0)\n          elif left == 1:\n              print(x0 + 1 + cnt * 4)\n          elif left == 2:\n              print(x0 - 1)\n          else:\n              print(x0 - (cnt + 1) * 4)\n      else:\n          cnt = n // 4\n          left = n % 4\n          if left == 0:\n              print(x0)\n          elif left == 1:\n              print(x0 - (1 + cnt * 4))\n          elif left == 2:\n              print(x0 + 1)\n          else:\n              print(x0 + (cnt + 1) * 4)\n\n\n\nif __name__ == '__main__':\n      for i in range(int(input())):\n          solve()",
                true
            ],
            [
                "for _ in range(0,int(input())):\n\n    x,j=list(map(int,input().split()))\n    new_num=x\n    rep=x\n    count=0\n    if j==0:\n        print(x)\n        continue\n    for i in range(1,j+1):\n\n        if new_num%2==0:\n            count+=1\n            new_num=new_num-i \n            if new_num==rep:\n                break\n\n\n        else:\n            new_num+=i\n            count+=1 \n            if new_num==rep:\n                break \n    if count==j:\n        print(new_num)\n        continue\n        \n    if count>0:\n        it=((j//count)*count)+1\n        for j in range(it,j+1):\n\n            if rep%2==0:\n                rep=rep-it \n                it+=1\n\n\n            else:\n                rep+=it\n                it+=1 \n\n\n        print(rep)\n\n\n    ",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    x,n = tuple(map(int, input().split()))\n    count = x\n    if x % 2 == 0:\n        if n % 4 == 1:\n            count += (-n)\n        if n % 4 == 2:\n            count += 1\n        if n % 4 == 3:\n            count += n+1\n    if x % 2 == 1:\n        if n % 4 == 1:\n            count -= (-n)\n        if n % 4 == 2:\n            count -= 1\n        if n % 4 == 3:\n            count -= n+1\n    print(count)\n    ",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(0, t):\n    # # #\n    # x = -5\n    # for i in range(1, n + 1):\n    #     if (x % 2 == 0):\n    #         x -= i\n    #     else:\n    #         x += i\n    # print(x - (-5), end='\\t')\n\n    x, n = list(map(int, input().split()))\n    if (x % 2 == 0):\n        if n % 2 == 0:\n            if n % 4 == 0:\n                print(0 + x)\n            else:\n                print(1 + x)\n        else:\n            if n % 4 == 1:\n                print(-n + x)\n            else:\n                print(n + 1 + x)\n    else:\n        if n % 2 == 0:\n            if n % 4 == 0:\n                print(x)\n            else:\n                print(-1 + x)\n        else:\n            if n % 4 == 1:\n                print(x + n)\n            else:\n                print(x - n - 1)\n",
                true
            ],
            [
                "x = int(input(\"\"))\n\nfor i in range(x):\n    a = input().split(\" \")\n    one = int(a[0])\n    two = int(a[1])\n    \n    b = two % 4\n    \n    if (one % 2 == 0):\n        \n        \n        if (b == 1):\n            print(one - two)\n            \n        elif (b == 2):\n            print(one + 1)\n            \n        elif(b == 3):\n            print(one + 1 + two)\n            \n        elif (b == 0):\n            print(one)\n\n            \n    else :\n        \n        b = (two - 1) % 4\n        \n        temp = int(two/4)\n        \n        if (b == 0):\n            print(one+1 + 4 * (temp))\n        \n        if (b == 1):\n            \n            print(one-1)\n            \n        if (b == 2):\n            print(one - 4 * (temp + 1))\n            \n        if (b == 3):\n            print(one)",
                true
            ],
            [
                "for _ in range(int(input())):\n    x, n = map(int, input().split())\n\n    if n % 2 == 0:\n        if n // 2 % 2 == 0:\n            print(x)\n        elif x % 2 == 0:\n            print(x + 1)\n        else:\n            print(x - 1)\n        continue\n        # if x % 2 == 0:\n        #     if n // 2 % 2 == 0:\n        #         print(x)\n        #     else:\n        #         print(x + 1)\n        # else:\n        #     if n // 2 % 2 == 0:\n        #         print(x)\n        #     else:\n        #         print(x - 1)\n    if x % 2 == 0:\n        if (n - 1) // 2 % 2 == 0:\n            print(x - n)\n        else:\n            print(x + 1 + n)\n    else:\n        if (n - 1) // 2 % 2 == 0:\n            print(x + n)\n        else:\n            print(x - 1 - n)\n",
                true
            ],
            [
                "t = int(input())\n# 0 -1 1 4 0 -5 1 8 0 -9 1  12 0\n# 0  1 2 3 4  5 6 7 8  9 10 11 12\nfor qwer in range(t):\n    stro = input().split()\n    x = int(stro[0])\n    colvo = int(stro[1])\n    s = 0\n    if x % 2 == 0:\n        if colvo % 4 == 0:\n            s = 0\n        elif colvo % 4 == 2:\n            s = 1\n        elif colvo % 4 == 1:\n            s = -colvo\n        else:\n            s = colvo + 1\n    else:\n        if colvo % 4 == 0:\n            s = 1 - 1\n        elif colvo % 4 == 2:\n            s = 0 - 1\n        elif colvo % 4 == 1:\n            s = colvo + 1 - 1\n        else:\n            s = -colvo - 1\n    print(s + x)",
                true
            ],
            [
                "def posi(x0,n):\n    x=x0\n    i=1\n    N=n\n    if n==0:\n        return x0\n    if x0%2==0:\n        x=x-i\n        i+=1\n        while i<=n:\n            if ((n-i+1)/4)>0:\n                x=x+(i+i+1-(i+2)-(i+3))*(int((n-i+1)/4))\n                i=i+(int((n-i+1)/4))*4\n            if((n-i+1)%4)==3:\n                x=x+(i+i+1-(i+2))\n                i=i+3\n            if((n-i+1)%4)==2:\n                x=x+(i+i+1)\n                i=i+2\n            if((n-i+1)%4)==1:\n                x=x+i\n                i=i+1\n    else:\n        x=x+i\n        i+=1\n        while i<=n:\n            if ((n-i+1)/4)>0:\n                x=x+(-i-(i+1)+(i+2)+(i+3))*(int((n-i+1)/4))\n                i=i+(int((n-i+1)/4))*4\n            if((n-i+1)%4)==3:\n                x=x+(-i-(i+1)+(i+2))\n                i=i+3\n            if((n-i+1)%4)==2:\n                x=x+(-i-(i+1))\n                i=i+2\n            if((n-i+1)%4)==1:\n                x=x-i\n                i=i+1\n                \n    return x\n\ndef  main():\n    try:\n        l=[]\n        T=int(input())\n        for i in range(T):\n            st0,st=list(map(int,input().split()))\n            l.append(posi(st0,st))\n    except:\n        pass\n    print('\\n'.join(map(str, l)))\n\nif __name__==\"__main__\":\n    main()\n\n",
                true
            ],
            [
                "\nfor i in range(int(input())):\n    a = input().split()\n    n = int(a[0])\n    v = int(a[1])\n    for b in range(1):\n\n        if n%2 == 0:\n            if v%4 == 0:\n                print(n)\n                break\n            if v%4 == 1:\n                print(n-v)\n            if v%4 == 2:\n                print(n+1)\n            if v%4 == 3:\n                print(n+1+v)            \n            \n                \n        else:\n            if v%4 == 0:\n                print(n)\n                break\n            if v%4 == 1:\n                print(n+v)\n            if v%4 == 2:\n                print(n-1)\n            if v%4 == 3:\n                print(n-1-v) \n",
                true
            ],
            [
                "import sys\nfrom bisect import *\nfrom collections import deque\n#from functools import *\n#from fractions import Fraction as f\nfrom copy import *    \nfrom heapq import *\nfrom math import sqrt,ceil,gcd\nfrom itertools import permutations as prm,product\nfrom random import *\ndef eprint(*args):\n    print(*args, file=sys.stderr)\nzz=1\n \nsys.setrecursionlimit(10**5)\nif zz:\n    input=sys.stdin.readline\nelse:    \n    sys.stdin=open('input.txt', 'r')\n    sys.stdout=open('all.txt','w')\ndi=[[-1,0],[1,0],[0,1],[0,-1]]\n\ndef fori(n):\n    return [fi() for i in range(n)]    \ndef inc(d,c,x=1):\n    d[c]=d[c]+x if c in d else x\ndef ii():\n    return input().rstrip()    \ndef li():\n    return [int(xx) for xx in input().split()]\ndef fli():\n    return [float(x) for x in input().split()]    \ndef dadd(d,p,val):\n    if p in d:\n        d[p].append(val)\n    else:\n        d[p]=[val]        \ndef gi():    \n    return [xx for xx in input().split()]\ndef gtc(tc,*ans):\n    print(\"Case #\"+str(tc)+\":\",*ans)    \ndef cil(n,m):\n    return n//m+int(n%m>0)    \ndef fi():\n    return int(input())\ndef pro(a): \n    return reduce(lambda a,b:a*b,a)        \ndef swap(a,i,j): \n    a[i],a[j]=a[j],a[i]    \ndef bits(i,n):\n    p=bin(i)[2:]\n    return (n-len(p))*\"0\"+p    \ndef prec(a,pre):\n    for i in a:\n        pre.append(pre[-1]+i)\n    pre.pop(0)    \ndef YN(flag):\n    print(\"YES\" if flag else \"NO\")    \ndef si():\n    return list(input().rstrip())    \ndef mi():\n    return     map(int,input().split())            \ndef gh():\n    sys.stdout.flush()\ndef isvalid(i,j,n,m):\n    return 0<=i<n and 0<=j<m \ndef bo(i):\n    return ord(i)-ord('a')    \ndef graph(n,m):\n    for i in range(m):\n        x,y=mi()\n        a[x].append(y)\n        a[y].append(x)\n\n\nt=fi()\nINF=10**18\nuu=t\nmod=10**9+7\n\n\nwhile t>0:\n    t-=1\n    x,n=mi()\n    p=n%4\n    if p==0:\n        g=0\n    elif p==1:\n        g=n\n    elif p==2:\n        g=-n+(n-1)\n    else:    \n        g=-n-(n-1)+(n-2)        \n    print(x+g if x%2 else x-g)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, b = map(int,input().split())\n    if(a%2==0):\n        tp = b%4\n        if(tp==0):\n            print(a)\n        elif(tp==1):\n            print(a-((b//4)*4+1))\n        elif(tp==2):\n            print(a+1)\n        else:\n            print(a+(b+1))\n    else:\n        tp = b%4\n        if(tp==0):\n            print(a)\n        elif(tp==1):\n            print(a+((b//4)*4+1))\n        elif(tp==2):\n            print(a-1)\n        else:\n            print(a-(b+1))",
                true
            ],
            [
                "T = int(input())\nwhile T>0:\n    T -= 1\n    start, step = input().strip().split(\" \")\n    start, step = int(start), int(step)\n    m = step % 4\n    if start %2 == 0:\n        if m == 0:\n            ans = start\n        if m == 1:\n            ans = start - step\n        if m == 2:\n            ans = start + 1\n        if m == 3:\n            ans = start + step + 1\n    else:\n        if m == 0:\n            ans = start\n        if m == 1:\n            ans = start + step\n        if m == 2:\n            ans = start - 1\n        if m == 3:\n            ans = start - step - 1\n    print(ans)",
                true
            ],
            [
                "def op():\n    start, n = map(int, input().split())\n\n    if start%2==0:\n        if n%4==3:\n            return n+1+start\n        if n%4==2:\n            return 1+start\n        if n%4==1:\n            return -1*n +start\n        if n%4==0:\n            return start\n    if n%4==3:\n        return (-1*(n+1))+start\n    if n%4==2:\n        return start-1\n    if n%4==1:\n        return n+start\n    if n%4==0:\n        return start\n\nfor i in range(int(input())):\n    print(op())",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    x,n=input().split()\n    x=int(x)\n    n=int(n)\n    if n%2==0:\n        if (n/2)%2==0:\n            x=x+0\n        elif (n/2)%2==1 and x%2==0 :\n            x=x+1\n        elif (n/2)%2==1 and x%2==1 :\n            x=x-1\n    else:\n        if (n//2)%2==0:\n            x=x+0\n        elif (n//2)%2==1 and x%2==0:\n            x=x+1\n        elif (n//2)%2==1 and x%2==1:\n            x=x-1\n        if x%2==0:\n            x=x-n\n        else:\n            x=x+n\n    print(x)",
                true
            ],
            [
                "n = int(input()) \nfor j in range(n):\n    x, d = map(int,input().split())\n    for i in range(d // 4 * 4 + 1, d + 1):\n        if x % 2 == 1:\n            x += i\n        else:\n            x -= i\n    print(x)",
                true
            ],
            [
                "import math as m\ndef L():\n    return list(map(int, input().split()))\ndef I():\n    return int(input())\ndef M():\n    return map(int, input().split())\n\ndef solve():\n    x, n = M()\n    s = 0\n    if x % 2 == 0:\n        if n % 4 == 0:\n            print(x)\n        elif n % 4 == 1:\n            print(x - n)\n        elif n % 4 == 2:\n            print(x - (n-1) + n)\n        elif n % 4 == 3:\n            print(x - (n-2) + (n-1) + n)\n    else:\n        if n % 4 == 0:\n            print(x)\n        elif n % 4 == 1:\n            print(x + n)\n        elif n % 4 == 2:\n            print(x + (n-1) - n)\n        elif n % 4 == 3:\n            print(x + (n-2) - (n-1) - n)\n\nfor _ in range(int(input())):\n    solve()",
                true
            ],
            [
                "for _ in range(int(input().strip())):\n    x,n = map(int,input().strip().split())\n\n    if n == 0:\n        print(x)\n\n    elif x%2  == 0:\n        k = n%4\n        if k == 1:\n            print(x - n)\n        elif k == 2:\n            print(x + 1)\n        elif k == 3:\n            print(x + n + 1)\n        else:\n            print(x)\n\n    else:\n        k = n%4\n        if k == 1:\n            print(x + n)\n        elif k == 2:\n            print(x-1)\n        elif k == 3:\n            print(x - n - 1)\n        else:\n            print(x)",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,n=map(int,input().split())\n    if(x%2==0):\n        if(n%4==0):\n            print(x)\n        elif n%4==1:\n            print(x-n)\n        elif n%4==2:\n            print(x+1)\n        else:\n            print(x+n+1)\n    else:\n        if n%4==0:\n            print(x)\n        elif n%4==1:\n            print(x+n)\n        elif n%4==2:\n            print(x-1)\n        else:\n            print(x-n-1)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    \n    st,n=list(map(int,input().split()))\n    c=n%4\n    k=(n//4)*4+1\n    if(st%2==0):\n        for j in range(c):\n            if(st%2==0):\n                st-=k\n                k+=1\n            else:\n                st+=k\n                k+=1\n        print(st)\n    else:\n        for j in range(c):\n            if(st%2==0):\n                st-=k\n                k+=1\n            else:\n                st+=k\n                k+=1\n        print(st)\n    \n    ",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    x_0, n = map(int, input().split())\n    '''for i in range(1, n + 1):\n        if (x_0 % 2 == 1):\n            x_0 += i\n        else:\n            x_0 -= i\n    print(x_0)'''\n    \n    ''''if (n%4 == 0):\n        print(x_0)\n    elif (n%4 == 2):\n        print(x_0 + 1)\n    elif (n%4 == 1):\n        if (x_0 % 2 == 0):\n            print(x_0 - n)\n        else:\n            print(x_0 + n)\n    else:\n        if ((x_0 + 1) % 2 == 0):\n            print(x_0 +  - (n + 1))\n        else:\n            print(x_0 + (n + 1))'''\n    if (n%4 == 1):\n        if (x_0 % 2 == 0):\n            print(x_0 - n)\n        else:\n            print(x_0 + n)\n    elif (n%4 == 2):\n        if (x_0 % 2 == 0):\n            print(x_0 + 1)\n        else:\n            print(x_0 - 1)\n    elif (n%4 == 3):\n        if (x_0 % 2 == 0):\n            print(x_0 + 1 + n)\n        else:\n            print(x_0 - 1 - n)\n    else:\n        print(x_0)     \n    \n'''\n1 1           \n2\n1 2\n0\n1 3\n-3\n1 4\n1\n1 5\n6\n1 6\n0\n1 7\n-7\n1 8\n1\n1 9\n10\n1 10\n0\n1 11\n-11\n1 12\n1'''\n\n\n'''\n2 1\n1\n2 2\n3\n2 3\n6\n2 4\n2\n2 5\n-3\n2 6\n3\n2 7\n10\n2 8\n2\n2 9\n-7\n2 10\n3\n2 11\n14\n2 12\n2'''",
                true
            ],
            [
                "from sys import stdin\nlst = list(map(int, stdin.read().split()))\n_s = 0\ndef inp(n=1):\n    global _s\n    ret = lst[_s:_s + n]\n    _s += n\n    return ret\ndef inp1():\n    return inp()[0]\n\nt = inp1()\n\nfor _ in range(t):\n  x = inp1()\n  n = inp1()\n  n_start = n - n % 4\n  for i in range(n_start + 1, n + 1):\n    if x % 2 == 0:\n      x -= i\n    else:\n      x += i\n  print(x)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a,b = input().split()\n    a = int(a)\n    b = int(b)\n    if b <=3:\n        for j in range(1,b+1):\n            if a%2 == 0:\n                a = a -j\n            else:\n                a = a+j\n    elif a % 2 == 0:\n        if b%2 ==1:\n            if (b+b-2)%8 == 0:\n                a = a - ((b+b)*((b+b-2)//8+1))//2 +((b+b)*((b+b-10)//8+1))//2\n            else:\n                a = a - ((b+b-4)*((b+b-6)//8+1))//2 +((b+b+4)*((b+b-6)//8+1))//2\n        else:\n            p = b\n            b -=1\n            if (b+b-2)%8 == 0:\n                a = a - ((b+b)*((b+b-2)//8+1))//2 +((b+b)*((b+b-10)//8+1))//2\n                a = a + p\n            else:\n                a = a - ((b+b-4)*((b+b-6)//8+1))//2 +((b+b+4)*((b+b-6)//8+1))//2\n                a = a - p\n    else:\n        if b%2 ==1:\n            if (b+b-2)%8 == 0:\n                a = a + ((b+b)*((b+b-2)//8+1))//2 -((b+b)*((b+b-10)//8+1))//2\n            else:\n                a = a + ((b+b-4)*((b+b-6)//8+1))//2 -((b+b+4)*((b+b-6)//8+1))//2\n        else:\n            p = b\n            b -=1\n            if (b+b-2)%8 == 0:\n                a = a + ((b+b)*((b+b-2)//8+1))//2 -((b+b)*((b+b-10)//8+1))//2\n                a = a - p\n            else:\n                a = a + ((b+b-4)*((b+b-6)//8+1))//2 -((b+b+4)*((b+b-6)//8+1))//2\n                a = a + p\n        \n    print(a)",
                true
            ],
            [
                "t = int(input())\n\nx0 =[]\ndistance = []\n\nfor i in range(t):\n    inp = input().split(' ')\n    x0.append(int(inp[0]))\n    distance.append(int(inp[1]))\n\nfor i in range(t):\n    t = distance[i] % 4\n    san = distance[i] - t + 1\n    q = 0\n    if x0[i] % 2 == 0:\n        q += x0[i]\n        if san <= distance[i]:\n            q -= san\n            san += 1\n        if san <= distance[i]:\n            q += san\n            san += 1\n        if san <= distance[i]:\n            q += san\n            san += 1\n    else:\n        q += x0[i]\n        if san <= distance[i]:\n            q += san\n            san += 1\n        if san <= distance[i]:\n            q -= san\n            san += 1\n        if san <= distance[i]:\n            q -= san\n            san += 1\n    print(q)\n",
                true
            ],
            [
                "import sys\n\nnext(sys.stdin)\nfor line in sys.stdin:\n    a = line.strip().split()\n    pos = int(a[0])\n    jumps = int(a[1])\n    remaining_jumps = jumps % 4\n    count = jumps - remaining_jumps + 1\n\n\n    while remaining_jumps != 0:\n        if pos % 2 == 0:\n            pos -= abs(count)\n        else:\n            pos += abs(count)\n        remaining_jumps -= 1\n        count += 1\n\n    print(pos)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x0, n = map(int, input().split())\n    if n % 4 == 0:\n        print(x0)\n    elif n % 4 == 1:\n        if x0 % 2 == 0:\n            print(x0 - n)\n        else:\n            print(x0 + n)\n    elif n % 4 == 2:\n        if x0 % 2 == 0:\n            print(x0 + 1)\n        else:\n            print(x0 - 1)\n    elif n % 4 == 3:\n        if x0 % 2 == 0:\n            print(x0 + 1 + n)\n        else:\n            print(x0 - 1 - n)\n\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    x, n=map(int, input().split())\n    if x%2==1:\n        if n%4==3:\n            print(x-1-n)\n        elif n%4==0:\n            print(x)\n        elif n%4==1:\n            print(n+x)\n        else:\n            print(x-1)\n    else:\n        if n%4==0:\n            print(x)\n        elif n%4==1:\n            print(x-n)\n        elif n%4==2:\n            print(x+1)\n        else:\n            print(x+1+n)",
                true
            ],
            [
                "def jump(point, meters):\n    if point % 2 == 0:\n        return point - meters\n    else:\n        return point + meters\n\n\nfor t in range(int(input())):\n    x, n = map(int, input().split())\n    delta = n % 4\n    if delta == 3:\n        if x % 2 == 0:\n            print(x - (n - 2) + (n - 1) + n)\n            continue\n        else:\n            print(x + (n - 2) - (n - 1) - n)\n            continue\n    elif delta == 2:\n        if x % 2 == 0:\n            print(x - (n - 1) + n)\n            continue\n        else:\n            print(x + (n - 1) - n)\n            continue\n    elif delta == 1:\n        if x % 2 == 0:\n            print(x - n)\n            continue\n        else:\n            print(x + n)\n            continue\n    elif (delta == 0) and (n // 4 >= 1):\n        print(x)\n        continue\n    elif (delta == 0):\n        for i in range(1,n + 1):\n            x = jump(x, i)\n        print(x)\n        continue\n",
                true
            ],
            [
                "for i in range(int(input())):\n    x,n=map(int,input().split())\n    if x%2==0:\n        if n%4==1 or n%4==-1:\n            print(x-n)\n        elif n%4==2 or  n%4==-2:\n            print(1+x)\n        elif n%4==3 or  n%4==-3:\n            print(n+1+x)\n        else:\n            print(x)\n    else:\n        if n%4==1 or n%4==-1:\n            print(x+n)\n        elif n%4==2 or  n%4==-2:\n                print(x-1)\n        elif n%4==3 or  n%4==-3:\n            print(x-1-n)\n        else:\n            print(x)    \n\n\n    \n\n\n                \n    \n\n\n\n    \n\n    \n",
                true
            ],
            [
                "for fghn in range(int(input())):\n    x,n=list(map(int,input().split()))\n    j=n%4\n    ans=x\n    for i in range(j):\n        if(ans%2==0):\n            ans-=(n//4)*4+i+1\n        else:\n            ans+=(n//4)*4+i+1\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor test in range(t):\n    x, n = map(int, input().split())\n    if n % 4 == 0:\n        print(x)\n    elif n % 4 == 1:\n        if x % 2 == 0:\n            print((x - 1) - (4 * (n // 4)))\n        else:\n            print((x + 1) + (4 * (n // 4)))\n    elif n % 4 == 2:\n        if x % 2 == 0:\n            print(x + 1)\n        else:\n            print(x - 1)\n    else:\n        if x % 2 == 0:\n            print(x + 4 * (n // 4 + 1))\n        else:\n            print(x - 4 * (n // 4 + 1))\n\n",
                true
            ],
            [
                "T=int(input())\nfor _ in range(T):\n    x,n=map(int,input().split(\" \"))\n    if(x%2==0):\n        if(n<8):\n            for i in range(n):\n                #print(x)\n                if(x%2==0):\n                    x=x-i-1\n                else:\n                    x=x+i+1\n            print(x)\n        else:\n            if((n-1)%4==0):\n                a=-1\n            elif((n-1)%4==1):\n                a=-1 + 2\n            elif((n-1)%4==2):\n                a=-1 + 4\n            else:\n                a=-1 + 2\n            if(n%4==2):\n                x=x+(a+1)//2\n            elif(n%4==1):\n                x=x+(a-n+1-n)//2\n            elif(n%4==0):\n                x=x+(a-1)//2\n            else:\n                x=x+(a+n-1+n)//2\n            print(x)\n\n    else:\n        if(n<14):\n            for i in range(n):\n                #print(x)\n                if(x%2==0):\n                    x=x-i-1\n                else:\n                    x=x+i+1\n            print(x)\n        else:\n            if(n<14):\n                for i in range(n):\n                    if(x%2==0):\n                        x=x-i-1\n                    else:\n                        x=x+i+1\n                print(x)\n            else:\n                if((n-1)%4==0):\n                    a=1\n                elif((n-1)%4==1):\n                    a=1 - 2\n                elif((n-1)%4==2):\n                    a=1 - 4\n                else:\n                    a=1 - 2\n                if(n%4==2):\n                    x=x+(a-1)//2\n                elif(n%4==1):\n                    x=x+(a+n-1+n)//2\n                elif(n%4==0):\n                    x=x+(a+1)//2\n                else:\n                    x=x+(a-n+1-n)//2\n                print(x)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    x, n = map(int, input().split())\n    if x % 2 == 0:\n        if n % 4 == 0:\n            print(x)\n        elif n % 4 == 1:\n            print(x - n)\n        elif n % 4 == 2:\n            print(x + 1)\n        elif n % 4 == 3:\n            print(x + n + 1)\n    else:\n        if n % 4 == 0:\n            print(x)\n        elif n % 4 == 1:\n            print(x + n)\n        elif n % 4 == 2:\n            print(x - 1)\n        elif n % 4 == 3:\n            print(x - n - 1)\n",
                true
            ],
            [
                "tests = int(input())\nfor i in range(tests):\n    f, s = input().split()\n    x = int(f)\n    n = int(s)\n    q = n % 4\n    if q == 0:\n        print(x)\n    elif q == 1:\n        if x % 2 == 0:\n            x -= n\n        else:\n            x += n\n        print(x)\n    elif q == 2:\n        if x % 2 == 0:\n            x -= n - 1\n            x += n\n        else:\n            x += n - 1\n            x -= n\n        print(x) \n    elif q == 3:\n        if x % 2 == 0:\n            x -= n - 2\n            x += n - 1\n            x += n\n        else:\n            x += n - 2\n            x -= n - 1\n            x -= n\n        print(x) ",
                true
            ],
            [
                "t = int(input())\nfor q in range(t):\n    a,b = map(int,input().split())\n    for i in range((b // 4) * 4 + 1, b+1):\n        if a % 2 == 0:\n            a -= i\n        else:\n            a += i\n    print(a)\n",
                true
            ],
            [
                "from math import ceil\n\ndef jump(pos, c):\n    if (pos%2): return pos + c\n    else: return pos -c\n\n\nn = int(input())\n\nfor _ in range(n):\n    p, j = map(int, input().split())\n    \n    r = j%4\n    if(j==0):\n        print(p)\n    elif (p%2 == 0):\n        if r == 0:\n            print(p)\n        elif r == 1:\n            print(p-j)\n        elif r == 2:\n            print(1+p)\n        else:\n            print(p +1 + j)\n    else:\n        if r == 0:\n            print(p)\n        elif r == 1:\n            print( j+p)\n        elif r == 2:\n            print(p-1)\n        else:\n            print(p - j-1)\n    ",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    x,n=map(int,input().split())\n    k=(n//4)*4\n    n=n%4\n    for i in range(n):\n            if x%2==0: x-=i+1+k\n            else: x+=i+1+k\n    print(x)",
                true
            ],
            [
                "n=int(input())\nwhile n>0:\n    x,n1=map(int,input().split())\n    n2=(n1//4)*4+1\n    while n2<=n1:\n        if x%2==0:\n            x-=n2\n        else:\n            x+=n2\n        n2+=1\n    print(x)\n    n-=1\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,n=map(int, input().split( ))\n    if x%2==0:\n        if n%4==0:\n            print(x)\n        elif n%4==1:\n            print(x-n)\n        elif n%4==2:\n            print(x+1)\n        elif n%4==3:\n            print(x+n+1)\n    else:\n        if n%4==1:\n            print(x+n)\n        elif n%4==2:\n            print(x-1)\n        elif n%4==3:\n            print(x-n-1)\n        elif n%4==0:\n            print(x)\n",
                true
            ],
            [
                "\ndef solve(ch,num):\n    c=ch\n    arr=[]\n    num1=num%4\n    for i in range(4):\n        m=i+1\n        if c & 1:\n            c+=m\n        else:\n            c-=m\n        arr.append(c)\n    if num1==2 or num1==0:\n        if num1==0:\n            num1+=4\n        print(arr[num1-1])\n        return\n    else:\n        num-=1\n        g=num//4\n        if num1==1:\n            if ch & 1:\n                print(arr[num1-1]+g*4)\n                return\n            else:\n                print(arr[num1-1]-g*4)\n                return\n        else:\n            if ch & 1:\n                print(arr[num1-1]-g*4)\n                return\n            else:\n                print(arr[num1-1]+g*4)\n                return\n            \nt=int(input())\nfor i in range(t):\n    x,d= map(int, input(\"\").strip().split())\n    solve(x,d)",
                true
            ],
            [
                "import math\nT=int(input())\nfor _ in range(T):\n    x,n=map(int,input().split())\n    if x%2==0:\n        l=[x,x-1-4*(n//4),x+1,x+4+4*(n//4)]\n        print(l[n%4])\n    else:\n        l=[x,x+1+4*(n//4),x-1,x-4-4*(n//4)]\n        print(l[n%4])\n    \n    \n\n    \n    ",
                true
            ],
            [
                "t=int(input())\nwhile t>0:\n    st,j=map(int,input().split())\n    div = j // 2\n    u = (j + 1) // 2\n\n    if (st%2==0 and j%2==0):  #even, even\n\n        if div%2==0:\n            print(st)\n        else:\n            print(st+1)\n    elif (st%2==0 and j%2!=0): #even, odd\n       if u%2==0:\n           print(st+j+1)\n       else:\n           print(st-j)\n    elif (st%2!=0 and j%2==0): #odd, even\n\n        if (div%2==0):\n            print(st)\n        else:\n            print(st-1)\n\n    elif (st%2!=0 and j%2!=0):  #odd, odd\n\n        if div%2==0:\n            print(st+j)\n        else:\n            print(st-j-1)\n    t=t-1\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nmaps = [\n    lambda x: 0,\n    lambda x: x,\n    lambda x: -1,\n    lambda x: -x - 1\n]\n\nfor _ in range(t):\n    x0, n = map(int, input().split())\n    d = maps[n % 4](n)\n    print(x0 - d if x0 % 2 == 0 else x0 + d)",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,n = map(int,input().split())\n\n    if n%4==0:\n        print(x)\n    if n%4==1:\n        if x%2==0:\n            print(x-n)\n        else:\n            print(x+n)\n    if n%4==2:\n        if x%2==0:\n            print(x+1)\n        else:\n            print(x-1)\n    if n%4==3:\n        if x%2==0:\n            print(x+1+n)\n        else:\n            print(x-1-n)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,n=map(int,input().split())\n    if(n%4==0):\n        print(x)\n        continue\n    \n    else:\n        ans=x\n        v=n%4\n        a=n//4*4+1\n        for i in range(a,a+v):\n            if(ans%2==0):\n                ans-=i\n            else:\n                ans+=i\n        print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    x0,n=map(int,input().split())\n    if n>=4:\n        if x0%2==0:\n            if n%4==0:\n                print(x0)\n            elif n%4==1:\n                print(x0-n)\n            elif n%4==2:\n                print(x0+1)\n            elif n%4==3:\n                print(x0+n+1)\n        else:\n            if n%4==0:\n                print(x0)\n            elif n%4==1:\n                print(x0+n)\n            elif n%4==2:\n                print(x0-1)\n            elif n%4==3:\n                print(x0-n-1)\n    else:\n        if n==0:\n            print(x0)\n        if n==1:\n            print(x0-1 if x0%2==0 else x0+1)\n        if n==2:\n            print(x0+1 if x0%2==0 else x0-1)\n        if n == 3:\n            print(x0 + 4 if x0 % 2 == 0 else x0 - 4)\n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    x, n = map(int, input().split())\n    if n % 4 == 0:\n        print(x)\n    else:\n        if n % 4 == 1:\n            if x % 2 == 1:\n                print(x + n)\n            else:\n                print(x - n)\n        elif n % 4 == 2:\n            if x % 2 == 1:\n                print(x - 1)\n            else:\n                print(x + 1)\n        else:\n            if x % 2 == 0:\n                print(x + n + 1)\n            else:\n                print(x - n - 1)",
                true
            ],
            [
                "for _ in range(int(input())):\n    x,n=map(int,input().split())\n    if n==0:\n        print(x)\n    else:\n        if x%2==0 and n%2==0:\n            if n%4==2:\n                print(x+1)\n            else:\n                print(x)\n        elif x%2==0 and n%2==1:\n            if n%4==3:\n                print(x+n+1)\n            else:\n                print(x-n)\n        elif x%2==1 and n%2==0:\n            if n%4==2:\n                print(x-1)\n            else:\n                print(x)\n        elif x%2==1 and n%2==1:\n            if n%4==3:\n                print(x-n-1)\n            else:\n                print(x+n)\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n\n    arr = str(input())\n    param = [int(i) for i in arr.split()]\n    x,n = param\n\n    if (n==0):\n        print(x)\n        continue\n\n    l1,l2,l3,l4 = int((n+3)/4), int((n+2)/4), int((n+1)/4),int((n)/4)\n\n    s1,s2,s3,s4 = 2*(l1*l1) - l1, 2*(l2*l2), 2*(l3*l3) + l3, 2*(l4*l4) + 2*l4\n\n\n    if (x%2==0):\n        #! even\n        add = s2 + s3 - s1 - s4\n        print(x + add)\n    else:\n        add = s1 + s4 - s2 - s3\n        print(x + add)\n    \n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    x, n = map(int, input().split())\n    \n    if n % 4 == 0:\n        x += 0\n    elif n % 4 == 2:\n        x += 1 * pow(-1, x % 2)\n    elif n % 4 == 1:\n        x += pow(-1, x%2+1) * n\n    else:\n        x += pow(-1, x%2) * (n + 1)\n\n    print(x)",
                true
            ],
            [
                "# template begins\n#####################################\n \n# import libraries for input/ output handling\n# on generic level\nimport atexit, io, sys, math, heapq, collections\n\n#input handling\n#input of single integer\ndef get_int(): return int(sys.stdin.readline().strip())\n#input of multiple integers\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\n#input of list\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\n#input of string\ndef get_string(): return sys.stdin.readline().strip()\n\n#output handling\n#writing int output\ndef write_int(a): sys.stdout.write(str(a)+\"\\n\")\n#writing String\ndef write_str(a): sys.stdout.write(a+\"\\n\")\n#writing Array\ndef write_list(arr): sys.stdout.write(\" \".join(map(str, arr)) + \"\\n\")\n\n#general functions\n#swap\ndef swap(arr, a, b):\n    arr[a]^=arr[b]\n    arr[b]^=arr[a]\n    arr[a]^=arr[b]\n\n#NumberOfDigits\ndef int_len(a): return math.floor(math.log(a,10))+1\n\n#Powerof2\ndef isPowerOfTwo(x): return x and (not(x & (x-1)))\n\n#Sieve\ndef Sieve(n):\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n    res = []\n    for i in range(2,len(prime)):\n        if (prime[i]):\n            res.append(i)\n    return res\n\n#binarySearch\ndef binarySearch (arr, l, r, x):\n    if r >= l:\n  \n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid-1, x)\n        else:\n            return binarySearch(arr, mid + 1, r, x)\n    else:\n        return -1\ndef search(arr,x): return binarySearch(arr,0,len(arr)-1,x)\n\n#Array to String\ndef toString(A): return''.join(A)\n\n# String to array\ndef toArray(str): return str.split()\n\n#ArraySum\ndef arrSum(Arr):\n    Sum =0\n    for i in range (len(Arr)):\n        Sum+=Arr[i]\n    return Sum\n\ndef computeXOR(n) :\n \n    # Modulus operator are expensive\n    # on most of the computers. n & 3\n    # will be equivalent to n % 4.\n \n    # if n is multiple of 4\n    if n % 4 == 0 :\n        return n\n \n    # If n % 4 gives remainder 1\n    if n % 4 == 1 :\n        return 1\n \n    # If n%4 gives remainder 2\n    if n % 4 == 2 :\n        return n + 1\n \n    # If n%4 gives remainder 3\n    return 0\n \n\n\n#####################################\n# template ends\n\n# Code begins\n#####################################\n\n\nN = get_int()\nwhile N >0:\n    A,B = get_ints()\n    if B%4==0:\n        print(A)\n    else:\n        T = B%4\n        L = B-T\n        arr = [0]*T\n        for i in range(0,T):\n            arr[i]=L+i+1\n        if A%2==0:\n            arr[0]*=-1\n        else:\n            if len(arr)>1:\n                arr[1]*=-1\n            if len(arr)>2:\n                arr[2]*=-1\n        sum = arrSum(arr)\n        print(sum+A)\n\n\n\n    N-=1\n\n\n#####################################\n# Code ends\n\n\n# Creating 2D array sol = [[0 for i in range(N)] for j in range(N)]",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b=map(int,input().split())\n    f=b%4\n    for i in range(b-f+1,b+1):\n        if(a%2==0):\n            a-=i\n        else:\n            a+=i\n    print(a)",
                true
            ],
            [
                "import math\nt = int(input())\nfor i in range(t):\n    x, n = map(int,input().split())\n    if n % 4 == 3:\n        s = math.ceil(n/4)*4\n    elif n % 4 == 2:\n        s = 1\n    elif n % 4 == 0:\n        s = 0\n    else:\n        s = -(1+(math.floor(n/4)*4))\n    if x % 2 == 0:\n        print(x + s)\n    else:\n        print(x - s)",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**5)\nINF = 10**18\n\ndef solve():\n    x, n = map(int,input().split())\n    m = (n+2)//3\n    if x%2:\n        if n%4 == 0:\n            ans = x\n        elif n%4 == 1:\n            ans = (x+1) + n//4*4\n        elif n%4 == 2:\n            ans = x - 1\n        elif n%4 == 3:\n            ans = x + (n+3)//4*-4\n    else:\n        if n%4 == 0:\n            ans = x\n        elif n%4 == 1:\n            ans = (x-1) + (n//4)*-4\n        elif n%4 == 2:\n            ans = x + 1\n        elif n%4 == 3:\n            ans = x + (n+3)//4*4\n\n    print(ans)\n\nQ = int(input())\nfor _ in range(Q):\n    solve()\n\n# 9\n# 0 1\n# 0 2\n# 10 10\n# 10 99\n# 177 13\n# 10000000000 987654321\n# -433494437 87178291199\n# 1 0\n# -1 1\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nThe new generation external memory contains an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n].\n\nThis type of memory does not support changing the value of an arbitrary element. Instead, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. \n  2. Then you replace the segment a[l \u2026 r] with it's cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2. \n\n\n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort the given array a using no more than n cyclic shifts of any of its segments. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] \nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    s=sorted(arr)\n    cnt=0\n    lst=[]\n    for i in range(n):\n        if arr[i]==s[i]:\n            continue\n        for j in range(i+1,n):\n            if arr[j]==s[i]:\n                cnt+=1\n                lst.append([i+1,j+1,j-i])\n                for k in range(j,i,-1):\n                    arr[k]=arr[k-1]\n                arr[i]=s[i]\n                # print(arr)\n                break\n    print(cnt)\n    for i in lst:\n        print(*i)",
                true
            ],
            [
                "from collections import deque\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(__) for __ in input().split()]\n    ans = []\n\n    arr_sorted = arr[:]\n    arr_sorted.sort()\n\n    for _ in range(n):\n        if arr[_] != arr_sorted[_]:\n            idx = arr[_:].index(arr_sorted[_])+_\n            ans.append([_+1,idx+1,idx-_])\n\n            deq_rotated = deque(arr[_:idx+1])\n            deq_rotated.rotate(_-idx)\n            arr = arr[:_] + list(deq_rotated) +arr[idx+1:]\n    \n    print(len(ans))\n    for _ in ans:\n        print(*_)",
                true
            ],
            [
                "t=int(input())\nfor tt in range(t):\n    n=int(input())\n    a=[int(x)for x in input().split()]\n    i=0\n    ans=[]\n    while a!=sorted(a):\n        m=min(a[i:])\n        w=a[i:].index(m)\n        if w:\n            ans.append((i,i+w,w))\n        del a[i+w]\n        a.insert(i,m)\n        i+=1\n    print(len(ans))\n    for i in ans:\n        print(i[0]+1,i[1]+1,i[2],sep=' ')",
                true
            ],
            [
                "# p1579_B.py | https://codeforces.com/contest/1579/problem/B\n\ndef rotate_left(lst,l,r):\n    hold = [lst[r]]\n    for k in range(l,r):\n        hold.append(lst[k])\n    for k in range(l,r+1):\n        lst[k] = hold[k-l]\n    return lst\n\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    vals =  [int(s) for s in input().split()]\n    v2 = [s for s in vals]\n    v2.sort()\n    rots = []\n    for (i,v) in enumerate(v2):\n        if v != vals[i]:\n            j=i+1\n            while vals[j] != v:\n                j += 1\n            vals = rotate_left(vals,i,j)\n            rots.append((i+1, j+1, j-i))\n    print(len(rots))\n    for (l,r,d) in rots:\n        print(l,r,d)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int, input().split()))\n    ans=[]\n    for i in range(n-1):\n        idx=a.index(min(a))\n        if idx>0:\n            ans.append([i+1,i+idx+1,idx])\n        a=a[:idx]+a[idx+1:]\n    print(len(ans))\n    for k in ans:\n        print(*k)\n",
                true
            ],
            [
                "from sys import stdin, stdout\n#from math import gcd\ndef ilist_from_str(): return list(map(int, stdin.readline().strip().split()))\ndef ints_from_str(): return map(int, stdin.readline().strip().split())\ndef strs_from_str(): return stdin.readline().strip().split()\ndef print_(for_print): stdout.write(str(for_print) + '\\n')\ndef str_(): return stdin.readline().strip() \ndef int_(): return int(stdin.readline().strip())\ndef print_nl(): stdout.write('\\n')\ndef gcd_sum(n): return gcd(n, sum(map(int,(list(str(n))))))\n\n\n# My solution\ndef solve(n, l):\n    k, l_ans = 0, []\n    for i in range(n):\n        mn = min(l[i:n])\n        ind = l[i: n].index(mn) + i\n        if ind > i:\n            for j in range(ind - i):\n                l[ind - j] = l[ind - j - 1]\n            l[i] = mn\n            k += 1\n            l_ans.append(str(i + 1) + ' ' + str(ind + 1) + ' ' + str(ind - i))\n    print_(k)\n    for i in l_ans: print_(i)\n\n   \nsets = int_()\nfor _ in range(sets):   \n    solve(int_(), ilist_from_str())\n\n\n",
                true
            ],
            [
                "from sys import stdin, stdout\n#from math import gcd\ndef ilist_from_str(): return list(map(int, stdin.readline().strip().split()))\ndef ints_from_str(): return map(int, stdin.readline().strip().split())\ndef strs_from_str(): return stdin.readline().strip().split()\ndef print_(for_print): stdout.write(str(for_print) + '\\n')\ndef str_(): return stdin.readline().strip() \ndef int_(): return int(stdin.readline().strip())\ndef print_nl(): stdout.write('\\n')\ndef gcd_sum(n): return gcd(n, sum(map(int,(list(str(n))))))\n\n# My solution\ndef solve(n, l):\n    k, l_ans = 0, []\n    for i in range(n):\n        mn = min(l[i:n])\n        ind = l[i: n].index(mn) + i\n        #print(i, mn, ind, l)\n        if ind > i:\n            for j in range(ind - i):\n                l[ind - j] = l[ind - j - 1]\n            l[i] = mn\n            k += 1\n            l_ans.append(str(i + 1) + ' ' + str(ind + 1) + ' ' + str(ind - i))\n    print_(k)\n    #if k == 0: l_ans.append(str(' ') + ' ' + str(' ') + '  ')\n    #print(l)\n    for i in l_ans: print_(i)\n\n   \nsets = int_()\nfor _ in range(sets):   \n    solve(int_(), ilist_from_str())\n\n\n",
                true
            ],
            [
                "T = int(input())\nwhile T > 0:\n    T -= 1\n    input()\n    A = [int(x) for x in input().split()]\n    output = []\n    start = 1\n    while len(A) != 0:\n        i = min(list((a, i) for i, a in enumerate(A)))[1]\n        if i > 0:\n            output.append((start, start + i, i))\n        start += 1\n        A = A[:i] + A[i + 1 :]\n    print(len(output))\n    for a, b, c in output:\n        print(a, b, c)",
                true
            ],
            [
                "# cook your dish here\nfrom collections import Counter\nfrom sys import stdin, stdout\nimport math\nfrom collections import defaultdict\nfrom typing import DefaultDict\n\n# stdin.readline()\n# map(int, stdin.readline().split())\n# list(map(int, stdin.readline().split()))\n\nfor _ in range(int(stdin.readline())):\n    n=int(stdin.readline())\n    x=list(map(int, stdin.readline().split()))\n\n    y=x.copy()\n    y.sort()\n\n    if y==x:\n        print(0)\n    else:\n        ans=0\n        l=[]\n\n        for i in range(n):\n            if x[i]==y[i]:\n                pass\n            else:\n                for j in range(len(x[i:])):\n                    \n                    if x[i:][j]==y[i]:\n                        l.append([i+1,i+j+1,j])\n                        x=x[0:i]+x[i+j:i+j+1]+x[i:i+j]+x[i+j+1:]\n                        ans+=1\n                        break\n        print(ans)\n        for i in l:\n            print(*i)\n            \n\n\n",
                true
            ],
            [
                "t=int(input())\nfor sdfghbjn in range (t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=sorted(a)\n    l=[]\n    c=0\n    for i in range(n):\n        ind=a[i::].index(b[i])+i\n        if ind!=i:\n            c+=1\n            l.append((i+1,ind+1,ind-i))\n            a.pop(ind)\n            a.insert(i,b[i])\n    print(c)\n    for i in range(c):\n        print(l[i][0],l[i][1],l[i][2])\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    *l, = map(int,input().split())\n    so = sorted(l)\n    amount = 0\n    if l == so:\n        print(amount)\n    else:\n        steps = []\n        while l!=so:\n            ind = 0\n            ind_2 = 0\n            for i in range(n):\n                if l[i]!=so[i]:\n                    ind = i\n                    for j in range(i,n):\n                        if l[j] == so[i]:\n                            ind_2 = j\n                            break\n                    break\n            amount+=1\n            steps.append([ind+1,ind_2+1,ind_2-ind])\n            l = l[:ind]+l[ind_2:ind_2+1]+l[ind:ind_2]+l[ind_2+1:]\n        print(amount)\n        for i in range(amount):\n            print(*steps[i])\n            \n        \n",
                true
            ],
            [
                "def rolling(s, n):\n    l = len(s)\n    #\u53f3\u306b\u30b7\u30d5\u30c8\u306e\u5834\u5408\n    return s[n%l:] + s[:n%l] #\u5de6\u306b\u30b7\u30d5\u30c8\u306e\u5834\u5408\u306fn\u306e\u6b63\u8ca0\u3092\u9006\u306b\n\ndef solve():\n    N = int(input())\n    A = list(map(int,input().split()))\n    ans = []\n    for i in range(N):\n        minA = min(A[i:])\n        idx = A[i:].index(minA)\n        if idx != 0:\n            ans.append((i+1,i+idx+1,idx))\n            A[i:i+idx+1] = rolling(A[i:i+idx+1],idx)\n    print(len(ans))\n    for a in ans:\n        print(*a)\n\nQ = int(input())\nfor _ in range(Q):\n    solve()",
                true
            ],
            [
                "'''\n    Auther: ghoshashis545 Ashis Ghosh\n    College: Jalpaiguri Govt Enggineering College\n\n'''\nfrom os import path\nfrom io import BytesIO, IOBase\nimport sys\nfrom heapq import heappush,heappop\nfrom functools import cmp_to_key as ctk\nfrom collections import deque,Counter,defaultdict as dd \nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil,sqrt,log,gcd\ndef ii():return int(input())\ndef si():return input().rstrip()\ndef mi():return map(int,input().split())\ndef li():return list(mi())\nabc='abcdefghijklmnopqrstuvwxyz'\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\ndef bo(i):\n    return ord(i)-ord('0')\n\nfile = 1\ndef ceil(a,b):\n    return (a+b-1)//b\n\n\n\n\ndef solve():\n\n    \n    for _ in range(1,ii()+1):\n        n = ii()\n        a = li()\n        b = a[::]\n        b.sort()\n        res = []\n        for i in range(n):\n            if a[i]==b[i]:\n                continue\n            for j in range(i+1,n):\n                if a[j]==b[i]:\n                    d = j-i\n                    res.append([i+1,j+1,d])\n                    a[i] = a[j]\n                    a[i+1:j+1] = a[i:j]\n        print(len(res))\n        for i in res:\n            print(*i)\n        \n        \n\n\n\n\n\n\n\n            \n\n\n\n\n\n    \n        \n\n\n\n\n\n\n\n\n\n\n        \nif __name__ ==\"__main__\":\n\n    if(file):\n    \n       if path.exists('input.txt'):\n           sys.stdin=open('input.txt', 'r')\n           sys.stdout=open('output.txt','w')\n       else:\n           input=sys.stdin.readline\n    solve()\n",
                true
            ],
            [
                "def rotateArray(arr, n, d):\n        temp = []\n        i = 0\n        while (i < d):\n            temp.append(arr[i])\n            i = i + 1\n        i = 0\n        while (d < n):\n            arr[i] = arr[d]\n            i = i + 1\n            d = d + 1\n        arr[:] = arr[: i] + temp\n        return arr\nfor i in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    x=l.copy()\n    x.sort()\n    ans=0\n    a=[]\n    for i in range(n):\n        if l[i]==x[i]:\n            continue\n        else:\n           \n            r=i+l[i:].index(x[i])\n           \n            if r==i:\n                continue\n            a.append([i+1,r+1,r-i])\n            temp=rotateArray(l[i:r+1],len(l[i:r+1]),r-i)\n            \n            for j in range(len(temp)):\n                l[i+j]=temp[j]\n            ans+=1\n    print(ans)\n    for i in a:\n        print(i[0],i[1],i[2])\n    ",
                true
            ],
            [
                "def shifts(arr):\n    steps=[]\n    req = sorted(arr)\n    while(arr!=req):\n        nomat,ind = nonmatch(arr,req)\n        shift = ind-nomat\n        changed = [arr[ind]]\n        changed.extend(arr[nomat:ind])\n        arr[nomat:ind+1] = changed\n        steps.append([nomat,ind,shift])\n    return steps\ndef nonmatch(arr,req):\n    curr=-1\n    for i in range(len(arr)):\n        if(arr[i]!=req[i]):\n            curr = i\n            break\n    nex = -1\n    for i in range(curr,len(arr)):\n        if(arr[i]==req[curr]):\n            nex = i\n    return (curr,nex)\nfor j in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    steps = shifts(arr)\n    print(len(steps))\n    for i in steps:\n        print(f\"{i[0]+1} {i[1]+1} {i[2]}\")",
                true
            ],
            [
                "from collections import deque\n\nfor _ in range(int(input())):\n    n = int(input())\n\n    a = [int(i) for i in input().split()]\n\n    b = a.copy()\n    b.sort()\n    \n    ans = 0\n    out = []\n\n    start = 0\n\n    while(True):\n        if a == b:\n            break\n        \n\n        for i in range(start, n):\n            if a[i] == b[i] and i == start:\n                start += 1\n                break\n            if a[i] == b[start]:\n                temp = deque(a[start:i+1])\n                temp.rotate(-(i-start))\n                a = a[:start] + list(temp) + a[i+1:]\n                out.append([start+1, i+1, i-start])\n                start += 1\n                ans += 1\n                break\n    print(ans)\n    for i in out:\n        print(*i)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr1 = arr[:]\n    arr1.sort()\n    ans = []\n    cnt = 0\n    for i in range(n):\n        x = arr1[i]\n        start = i+1\n        zzz = arr.index(x)\n        end = zzz+1+i\n        arr.pop(zzz)\n        if abs(start-end) == 0:continue\n        ans.append([start, end, end-start])\n        cnt += 1\n    print(cnt)\n    for xx in ans:print(*xx)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    *a, = map(int, input().split())\n    ans = []\n    for i in range(n):\n        mn_i = a[i:].index(min(a[i:])) + i\n        if mn_i == i:\n            continue\n        if mn_i < i:\n            break\n        ans.append((i + 1, mn_i + 1, mn_i - i))\n        a[i:mn_i + 1] = [a[mn_i]] + a[i:mn_i]\n    print(len(ans))\n    for el in ans:\n        print(*el)",
                true
            ],
            [
                "def new_sub(lis):\n    min_index = lis.index(min(lis))\n    r = min_index\n    d = min_index\n    if min_index == 0:\n        return (r, d, False)\n    return (r, d, True)\n\ndef test():\n    #n = int(input(\"\"))\n    #a = list(map(int, input().split(\" \")))\n    t = int(input())\n    for _ in range(t):\n        counter = 0\n        n = int(input())\n        log = []\n        a = list(map(int, input().split(\" \")))\n        for i in range(n):\n            info = new_sub(a[i:])\n            if info[1]:\n                l = i + 1\n                r = i + info[0] + 1\n                d = info[0]\n                log.append((l, r, d))\n                for __ in range(d):\n                    v = a[(l-1)]\n                    del a[(l-1)]\n                    a.insert((r-1), v)\n                counter += 1\n                \n        print(counter)\n        for i in log:\n            print(i[0], i[1], i[2])\n\ntest()",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    store=[]\n    for i in range(n):\n        mini =min(arr[i:])\n        indx =-1\n        pos =-1\n        for j in range(i,n):\n            if arr[j] ==mini:\n                indx =j\n                pos =j\n                break\n        temp =arr[indx]\n        for k in range(pos, i, -1):\n            arr[k] =arr[k-1]\n        arr[i] =temp\n        if indx >i:\n            store.append([i, indx, indx-i])\n    l=len(store)\n    print(l)\n    for i in range(l):\n        print(store[i][0] +1, store[i][1] +1, store[i][2])",
                true
            ],
            [
                "for _ in range(int(input())):\n    shiftnumber = int(input())\n    arr = list(map(int, input().split()))\n    ans = []\n    c = 0\n    for i in range(shiftnumber - 1):\n        ind = arr.index(min(arr))\n\n        if ind > 0:\n            temp = str(i + 1) + ' ' + str(ind + i + 1) + ' ' + str(ind)\n            ans.append(temp)\n            c += 1\n\n        arr = arr[:ind] + arr[ind + 1:]\n\n    print(c)\n    for j in ans:\n        print(j)\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    actions = []\n    a = list(map(int, input().split()))\n    for i in range(len(a)-1):\n        min_pos = i\n        for j in range(i+1, len(a)):\n            if a[j]<a[min_pos]:\n                min_pos = j\n        if min_pos>i: # perform shifting\n            actions.append((i, min_pos))\n            opt = a[min_pos]\n            for j in range(min_pos, i, -1):\n                a[j] = a[j-1]\n            a[i] = opt\n    print(len(actions))\n    for ac in actions:\n        print(ac[0]+1, ac[1]+1, ac[1]-ac[0])",
                true
            ],
            [
                "# '''\n#      |\\_/|                  \n#      | @ @   Woof! \n#      |   <>              _  \n#      |  _/\\------____ ((| |))\n#      |               `--' |   \n#  ____|_       ___|   |___.' \n# /_/_____/____/_______|\n# I am here to guard this code, woof!\n# '''\n \nimport sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\n \nint_max = float('inf')\nint_min = -(float('inf'))\nANS = []\n# infile = open(sys.argv[1], \"r\")\n# input = infile.readline\ninput = stdin.readline\n \ndef solve():\n    pass\n \nt = int(input())\n# t = 1\n \nfor i in range(t):\n    n = int(input())\n    # n, k = map(int, input().split())\n    arr =  list(map(int, input().split()))\n    # arr = list(input())\n    # s = input().strip()\n\n    temp = arr[:]\n    temp.sort()\n    i = 0\n    ans = []\n    while i < n:\n        if arr[i] == temp[i]:\n            i += 1\n            continue\n        else:\n            l= i\n            r = i\n            for j in range(i, n):\n                if arr[j] == temp[i]:\n                    r = j\n                    break\n            # print(l, r)\n            tempVal = arr[r]\n            arr[l+1:r+1] = arr[l:r]\n            arr[l] = tempVal\n            ans.append([l+1, r + 1, r-l])\n        i += 1\n    # print(arr, temp)\n    print(len(ans))\n    for i in ans:\n        print(*i)\n# print('\\n'.join(ANS))",
                true
            ],
            [
                "from math import ceil, log, floor\nfrom collections import defaultdict\nimport sys\nimport os.path\n\nsys.setrecursionlimit(200000)\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r+\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\n\n# input = sys.stdin.readline\n# print=sys.stdout.write\ndef MI():\n    return map(int, input().split())\n\n\ndef solve():\n    n = int(input())\n    a=list(MI())\n\n    b=sorted(a)\n    l=[]\n    \n\n    for i in range(n):\n        if a[i]==b[i]:\n            continue\n        for j in range(i+1,n):\n            if a[j]==b[i]:\n                break\n        l.append([i+1,j+1,j-i])\n        prev=a[j]\n        for k in range(i,j+1):\n            pre=a[k]\n            a[k]=prev\n            prev=pre \n    print(len(l))\n    # print(a)\n    for i in l:\n        print(*i)\n\n\n\n\n        \n\n    \n\n    \n\n\n\nt=int(input())\nfor _ in range(t):\n    solve()",
                true
            ],
            [
                "for _ in range(int(input())):\n    k=int(input())\n    l=list(map(int,input().split()))\n    n=len(l)\n    t=l[:]\n    t.sort()\n    ans=[]\n    for i in range(n):\n        if l[i]!=t[i]:\n            idx=-1\n            for j in range(i,n):\n                if l[j]==t[i]:\n                    ans.append([i+1,j+1,j-i])\n                    idx=j\n                    break\n            prev=l[idx]\n            for j in range(i,idx+1):\n                temp=l[j]\n                l[j]=prev\n                prev=temp\n    print(len(ans))\n    for i in ans:\n        print(*i)\n",
                true
            ],
            [
                "\ndef cyc(arr,d):\n    nw=[0]*len(arr)\n    for i in range(len(arr)):\n        nw[i]=arr[(i+d)%len(arr)]\n    return nw\n\nfor _ in range(int(input())):\n\n    llen = int(input())\n    l = list(map(int,input().split()))\n\n    ans=[]\n    sortedp = 0\n    for i in range(sortedp,llen-1):\n        mn = 1e10\n        idx = -1\n        for j in range(sortedp,llen):\n            \n            if l[j] < mn:\n                mn = l[j]\n                idx=j\n        #perform on soredp to j amount of swaps d\u00e4remellan\n        x=abs(sortedp-idx)\n        if x == 0:\n            sortedp+=1\n            continue\n        nxt=cyc(l[sortedp:idx+1],x)\n\n        for k in range(len(nxt)):\n            l[k+sortedp] = nxt[k]\n        ans.append([sortedp+1,idx+1,x])\n        sortedp+=1\n    \n    print(len(ans))\n    for el in ans:\n        print(*el)\n\n'''\n1\n5\n2 5 1 4 3\n\n2\n1 3 2\n4 5 1\n'''\n\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=sorted(a)\n    c=0\n    ans=[]\n    for i in range(n):\n        if a[i]==b[i]:\n            continue\n        c+=1\n        j= a.index(b[i],i)\n        ans.append(i+1)\n        ans.append(j+1)\n        x=a[j]\n        for z in range(j,i,-1):\n            a[z],a[z-1]=a[z-1],a[z]\n    print(c)\n    for d in range(0,len(ans)-1,2):\n        print(ans[d],ans[d+1],ans[d+1]-ans[d])\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=[int(i) for i in input().split()]\n    ans=[]\n    for i in range(n):\n        x=min(a[i:])\n        ind= a.index(x,i)\n        if x==a[i]:\n            continue\n        else:\n            a = a[:i] + [x] + a[i:ind] + a[ind+1:]\n            ans+=[[i+1,ind+1,ind-i]]\n    print(len(ans))\n    for i in ans:\n        print(*i)\n\n\n            \n    \n    \n        ",
                true
            ],
            [
                "t=int(input())\nwhile t:\n    t-=1\n    n=int(input())\n    nums=list(map(int,input().split()))\n    nums_=sorted(nums)\n    cnt=0\n    to_ret=[]\n    for i in range(n):\n        if nums[i]!=nums_[i]:\n            cnt+=1\n            idx=nums[i:].index(nums_[i])\n            #print(idx)\n            to_ret.append([str(i+1),str(i+idx+1),str(idx)])\n            nums=nums[:i]+[nums[i+idx]]+nums[i:i+idx]+nums[i+idx+1:]\n            #print(nums)\n    print(cnt)\n    for i in range(cnt):\n        print(' '.join(to_ret[i]))",
                true
            ],
            [
                "import sys\nimport math\nfrom math import factorial, inf, gcd, sqrt\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nfrom bisect import *\nimport random\nfrom sys import stdin, stdout\nsys.setrecursionlimit(10**5)\n\n\ndef inp():\n    return stdin.readline().strip()\n\n\ndef iinp():\n    return int(inp())\n\n\ndef mp():\n    return map(int, inp().split())\n\n\ndef lmp():\n    return list(mp())\n\n\nt = iinp()\nfor i in range(t):\n    n = iinp()\n    a = lmp()\n    b = sorted(a)\n    ans = []\n    for i in range(n):\n        if a[0] != b[i]:\n            j = a.index(b[i])\n            ans.append([i + 1, j + i + 1, j])\n            a.pop(j)\n        else:\n            a.pop(0)\n    print(len(ans))\n    for i, j, k in ans:\n        print(i, j, k)\n",
                true
            ],
            [
                "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    d = [int(i) for i in sys.stdin.readline().split()]\n    r, rr = '', 0\n    for i in range(n-1):\n        x = d[i:]\n        a = x.index(min(x))\n        if a != 0:\n            r+='%d %d %d\\n' % (i+1, a+1+i, a)\n            rr+=1\n            d = d[:i]+[d[a+i]]+d[i:a+i]+d[a+1+i:]\n    sys.stdout.write(\"%d\\n%s\"%(rr,r))\n",
                true
            ],
            [
                "\nimport sys\n# import gc\ninput = sys.stdin.readline\n\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    # a, b = map(int, input().split())\n\n    b = sorted(a)\n    cnt = 0\n    ans = []\n    l = 0\n    for i in b:\n        # print(a, b)\n        ind = a[l:].index(i) + l\n        if l != ind:\n            c = a[l: ind].copy()\n            a[l] = a[ind]\n            a[l+1: ind+1] = c\n            cnt += 1\n            ans.append([l+1, ind+1, ind - l])\n            l += 1\n        else:\n            l += 1\n    print(len(ans))\n    for i in ans:\n        print(*i)\n    # print(a, ans)\n",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\ndef cycshift(a:list, n:int) -> list:\n    lenlist = len(a)\n    b = [0]*lenlist\n    for i in range(len(a)):\n        b[i-n] = a[i]\n\n    return b\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    count = 0\n    res = 0\n    b = []\n\n    for i in range(n):\n        mn = min(a)\n        if a[0] == mn:\n            a.pop(0)\n            count += 1\n        else:\n            id = a.index(mn)\n            b.append([1+count,id+1+count,id])\n            a[0:id+1] = cycshift(a[0:id+1],id)\n            a.pop(0)\n            count += 1\n            res += 1\n    \n    print(res)\n    for j in b:\n        print(*j)",
                true
            ],
            [
                "from sys import stdin\nimport collections, heapq, bisect, math\n \ninput = stdin.readline\n \ndef rint():\n    return int(input())\ndef rstr():\n    return input().strip()\ndef rlstr():\n    return list(input().strip().split())\ndef rlint():\n    return list(map(int, input().split()))\n\ndef main():\n    n = rint()\n    arr = rlint()\n    s = sorted(arr)\n    res = []\n\n    def shift(i , j) :\n\n        for k in range(j - 1 , i - 1 , -1) :\n            arr[k] , arr[k + 1] = arr[k + 1] , arr[k]\n\n    for i in range(n) :\n        j = i\n\n        while j < n and s[i] != arr[j] :\n            j += 1\n\n        if i != j :\n            shift(i , j)\n            res.append([i + 1 , j + 1 , j - i])\n\n    print(len(res))\n\n    for row in res :\n        print(*row)\n\nif __name__ == \"__main__\":\n    for _ in range(rint()) :\n        main()",
                true
            ],
            [
                "n=int(input())\n\nfor i in range(n):\n    a=int(input())\n    list_a=list(map(int,input().split()))\n    u=0\n    list_of_moves=[]\n    while u<a:\n\n        if list_a.index(min(list_a))==u:\n            list_a[u]=10**10\n            u+=1\n        else:\n            l=u\n            r=list_a.index(min(list_a))\n            lst=list_a[l:r+1]\n            for j in range(len(lst)):\n                del list_a[l]\n            ret = [0] * len(lst)\n            k=len(lst)-1\n            for j in range(len(lst)):\n                if j + k < len(lst) and j + k >= 0:\n                    ret[j] = lst[j + k]\n                if j + k >= len(lst):\n                    ret[j] = lst[j + k - len(lst)]\n                if j + k < 0:\n                    ret[j] = lst[j + k + len(lst)]\n            new_l=l\n            for j in range(len(ret)):\n                list_a.insert(l,ret[j])\n                l+=1\n            list_a[u] = 10 ** 10\n            u+=1\n\n            list_of_moves.append([new_l+1,r+1,r-new_l])\n    print(len(list_of_moves))\n    for weq in range(len(list_of_moves)):\n        print(' '.join(map(str,list_of_moves[weq])))\n",
                true
            ],
            [
                "from sys import stdin, stdout\nn = int(stdin.readline())\n\nfor i in range(n):\n    list_print_2 = []\n    length = int(stdin.readline())\n    cnt = 0\n    string = list(map(int, stdin.readline().split()))\n    index = 1\n    for i in range(length):\n        a = min(string)\n        x = string.index(a)\n        if x != 0:\n            list_print_2.append(str(0+index )+\" \" + str(x+index)+\" \" + str(x) + \"\\n\")\n            cnt += 1\n        string.remove(a)\n        index += 1\n    stdout.write(str(cnt)+ \"\\n\")\n    for k in range(len(list_print_2)):\n        stdout.write(list_print_2[k])\n\n\n\n\n\n# t = int(stdin.readline())\n# n = int(stdin.readline())\n# lst = [False]*(n+1)\n# lst_2 = []\n# for i in range(n):\n#     lst_2.append(list(map(int, stdin.readline().split())))\n# for i in range(n):\n#     if len(lst_2[i]) == 1 and lst_2[i][0] == 0:\n#             lst[i] = True\n#     elif:\n#         for k in lst_2[i]:\n#             if lst[k]:\n#                 lst[i] = True\n#             else:\n#                 lst[i] = False\n    \n\n\n\n# from sys import stdin, stdout\n# total_strength = 0\n# number_heros = int(stdin.readline())\n# lst = list(map(int, stdin.readline().split()))\n# lst.sort()\n# for i in range(number_heros):\n#     total_strength += lst[i]\n# number_dragon = int(stdin.readline())\n# for i in range(number_dragon):\n#     a, b = map(int, stdin.readline().split())\n#     for i in range(number_heros - 1):\n#         b_hero = lst[i]\n#         if abs(lst[i]-a) > abs(lst[i+1]-a):\n#             b_hero = lst[i+1]\n#     money = max(0, (a - b_hero) )\n#     money += max(0, (b - (total_strength-b_hero)))\n#     stdout.write(str(money//1) + \"\\n\")",
                true
            ],
            [
                "import bisect\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    o = l.copy()\n    o.sort()\n    if l == o:\n        sys.stdout.write(\"0\\n\")\n        # print(\"JI\")\n        continue\n\n    cnt = 0\n    ans = 0\n    w = []\n    while cnt < n:\n        # print(l,o)\n        if l[cnt] == o[cnt]:\n            cnt += 1\n            continue\n\n        for i in range(cnt,n):\n            if l[i] == o[cnt]:\n                ans += 1\n                w.append((cnt+1,i+1,i-cnt))\n                h = l[cnt:i]\n                # print(\"JI\")\n                q = l[i]\n                e = l[0:cnt]+[q]+h+l[i+1:n]\n                l = e\n                break\n\n        cnt += 1\n\n    # print(l)\n    sys.stdout.write(str(ans)+\"\\n\")\n    for i in w:\n        sys.stdout.write(str(i[0])+\" \"+str(i[1])+\" \"+str(i[2])+ \"\\n\")",
                true
            ],
            [
                "try:\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        count=0\n        output=[]\n        for j in range(n):\n            mn=a[j]\n            mnpos=j\n            for k in range(j,n):\n                if a[k]<mn:\n                    mn=a[k]\n                    mnpos=k\n            if mnpos!=j:\n                output.append((j+1,mnpos+1,mnpos-j))\n                count+=1\n                temp=mn\n                for k in range(mnpos,j,-1):\n                    a[k]=a[k-1]\n                a[j]=temp\n        print(count)\n        for j in range(count):\n            print(output[j][0],output[j][1],output[j][2])\nexcept:\n    pass\n",
                true
            ],
            [
                "\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = []\n    for i in range(n):\n        min_val = min(arr)\n        min_ind = arr.index(min_val)\n        if min_ind: \n            res.append([i + 1, i + 1 + min_ind, min_ind])\n        del arr[min_ind]\n    print(len(res))\n    for x in res:\n        print(*x)\n",
                true
            ],
            [
                "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int,stdin.readline().split()))\n    b = list(a)\n    k = []\n    b.sort()\n    c = 0\n    for i in range(n-1):\n        if a[i]!=b[i]:\n            c+=1\n            v = a.index(b[i],i)\n            d = v-i\n            k.append([i+1,v+1,d])\n            a = a[:i]+a[v:v+1]+a[i:v]+a[v+1:]\n    print(c)\n    for i in k:\n        print(*i)",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nThe robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nEach cell has one of the symbols 'L', 'R', 'D' or 'U' written on it, indicating the direction in which the robot will move when it gets in that cell \u2014 left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. He then moves to the adjacent square in the direction indicated on the current square in one move. \n\n  * If the robot moves beyond the edge of the board, it falls and breaks. \n  * If the robot appears in the cell it already visited before, it breaks (it stops and doesn't move anymore). \n\n\n\nRobot can choose any cell as the starting cell. Its goal is to make the maximum number of steps before it breaks or stops.\n\nDetermine from which square the robot should start its movement in order to execute as many commands as possible. A command is considered successfully completed if the robot has moved from the square on which that command was written (it does not matter whether to another square or beyond the edge of the board).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "from sys import stdin\n\ninput = stdin.readline\n\nmoves = {\n    \"R\": (0, 1),\n    \"L\": (0, -1),\n    \"U\": (-1, 0),\n    \"D\": (1, 0)\n}\n\nlengths = []\n\ndef dumbdfs(x, y):\n    global lengths\n    path = []\n    lenn = 0\n    curx = x\n    cury = y\n    cycle = False\n    cycle_start = 0\n\n    while curx >= 0 and curx < n and cury >= 0 and cury < m:\n\n        if lengths[curx][cury] == -1:\n            cycle_start = path.index((curx, cury))\n            cycle = True\n            break\n\n        if lengths[curx][cury] > 0:\n            lenn += lengths[curx][cury]\n            break\n\n        lenn += 1\n\n        lengths[curx][cury] = -1\n        path.append((curx, cury))\n\n        dx, dy = moves[field[curx][cury]]\n        curx += dx\n        cury += dy\n\n    if cycle:\n        for i in range(lenn, lenn-cycle_start, -1):\n            lengths[path[lenn - i][0]][path[lenn - i][1]] = i\n        for i in range(cycle_start, len(path)):\n            lengths[path[i][0]][path[i][1]] = lenn-cycle_start\n    else:\n        for i in range(lenn, lenn - len(path), -1):\n            lengths[path[lenn - i][0]][path[lenn - i][1]] = i\n\nt = int(input())\nfor _ in range(t):\n    input()\n    n, m = map(int, input().split(\" \"))\n    field = [input() for _ in range(n)]\n    lengths = [[0 for _ in range(m)] for _ in range(n)]\n\n    for x in range(n):\n        for y in range(m):\n            if not lengths[x][y]:\n                dumbdfs(x, y)\n\n    maxx = 0\n    maxy = 0\n    maxv = 0\n    for x in range(n):\n        for y in range(m):\n            if lengths[x][y] > maxv:\n                maxv = lengths[x][y]\n                maxx = x + 1\n                maxy = y + 1\n    \n    print(maxx, maxy, maxv)\n\n\"\"\"\n\n2 2\nUD\nRU\n\n\"\"\"\n",
                true
            ],
            [
                "def flood_fill(R, C, graph, r, c):\n    d = 0\n    nr, nc = r, c\n    x = C*nr+nc\n    path = {x:1}\n    loop = visited = False\n    while True:\n        if graph[x] >= 1:  # visited\n            d = (len(path)-1)+graph[x]\n            visited = True\n            break\n        dr, dc = DIRS[graph[x]]\n        nr, nc = divmod(x, C)\n        nr, nc = nr+dr, nc+dc\n        if not (0 <= nr < R and 0 <= nc < C):  # outside\n            break\n        x = C*nr+nc\n        if x in path:  # loop\n            d = len(path)\n            for y in path:\n                graph[y] = d\n                if loop or y == x:\n                    loop = True\n                    continue\n                d -= 1\n            break\n        path[x] = 1\n    if not loop:\n        if not visited:\n            d = len(path)\n        for y in path:\n            graph[y] = d\n            d -= 1\n    return graph[C*r+c]\n\ndef solution():\n    _ = input()\n    R, C = list(map(int, input().strip().split()))\n    graph = []\n    for _ in range(R):\n        graph.extend(list(map((lambda x: TRAN[x]), list(input().strip()))))\n    x = -1\n    for r in range(R):\n        for c in range(C):\n            flood_fill(R, C, graph, r, c)\n            y = C*r+c\n            if x == -1 or graph[y] > graph[x]:\n                x = y\n    i, j = divmod(x, C)\n    return \"%s %s %s\" % (i+1, j+1, graph[x])\n\nTRAN = {'U':0, 'D':-1, 'L':-2, 'R':-3}\nDIRS = {0:(-1, 0), -1:(1, 0), -2:(0, -1), -3:(0, 1)}\nfor case in range(eval(input())):\n    print('%s' % solution())\n",
                true
            ],
            [
                "def resolve(n, m, board):\n    v = [[0] * m for _ in range(n)]\n    idx = 0\n    mx, tr, tc = 0, 0, 0\n    for r in range(n):\n        for c in range(m):\n            if v[r][c] > 0:\n                continue\n            idx -= 1\n            cr, cc = r, c\n            stk = []\n            while 0 <= cr < n and 0 <= cc < m and v[cr][cc] == 0:\n                stk.append((cr, cc))\n                v[cr][cc] = idx\n                d = board[cr][cc]\n                if d == 'L':\n                    cc -= 1\n                elif d == 'R':\n                    cc += 1\n                elif d == 'U':\n                    cr -= 1\n                else:\n                    cr += 1\n            cv = 0\n            if 0 <= cr < n and 0 <= cc < m:\n                if v[cr][cc] > 0:\n                    cv = v[cr][cc] + 1\n                else:\n                    cv = len(stk)\n                    i = 0\n                    while stk[i] != (cr, cc):\n                        v[stk[i][0]][stk[i][1]] = cv\n                        i += 1\n                        cv -= 1\n                    for ccr, ccc in stk[i:]:\n                        v[ccr][ccc] = cv\n                    stk = []\n            else:\n                cv = 1\n            for i in range(len(stk) - 1, -1, -1):\n                v[stk[i][0]][stk[i][1]] = cv\n                cv += 1\n            if v[r][c] > mx:\n                mx, tr, tc = v[r][c], r, c\n    return f\"{tr + 1} {tc + 1} {mx}\"\n\n\nt = int(input())\n\nans = []\nfor _ in range(t):\n    input()\n    n, m = [int(_) for _ in input().split()]\n    board = [input() for _ in range(n)]\n    ans.append(resolve(n, m, board))\n\nprint('\\n'.join(ans))",
                true
            ],
            [
                "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\ndef f(x, y):\n    return x * m + y\n\ndef g(x):\n    return x // m, x % m\n\ndef bfs(nx, ny):\n    u = []\n    while not visit[nx][ny]:\n        f0 = f(nx, ny)\n        u.append(f0)\n        visit[nx][ny] = len(u)\n        dx, dy = d0[s[nx][ny]]\n        nx += dx\n        ny += dy\n        if 0 <= nx < n and 0 <= ny < m and visit[nx][ny] and dist[nx][ny] == -1:\n            break\n        if not 0 <= nx < n or not 0 <= ny < m or visit[nx][ny]:\n            c = 1 if not 0 <= nx < n or not 0 <= ny < m else dist[nx][ny] + 1\n            for i in range(len(u) - 1, -1, -1):\n                x, y = g(u[i])\n                dist[x][y] = c\n                c += 1\n            return\n    c = len(u) - visit[nx][ny] + 1\n    for i in range(visit[nx][ny] - 1, len(u)):\n        x, y = g(u[i])\n        dist[x][y] = c\n    for i in range(visit[nx][ny] - 2, -1, -1):\n        x, y = g(u[i])\n        c += 1\n        dist[x][y] = c\n    return\n\nt = int(input())\nd0 = {\"U\":(-1, 0), \"D\":(1, 0), \"L\":(0, -1), \"R\":(0, 1)}\nans = []\nfor _ in range(t):\n    input()\n    n, m = map(int, input().split())\n    s = [list(input().rstrip()) for _ in range(n)]\n    visit = [[0] * m for _ in range(n)]\n    dist = [[-1] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if not visit[i][j]:\n                bfs(i, j)\n    r, c, d = -1, -1, 0\n    for i in range(n):\n        di = dist[i]\n        for j in range(m):\n            if d < di[j]:\n                r, c, d = i + 1, j + 1, di[j]\n    ans.append(\" \".join(map(str, [r, c, d])))\nsys.stdout.write(\"\\n\".join(ans))",
                true
            ],
            [
                "import sys, collections, math, bisect, heapq, random, functools\ninput = sys.stdin.readline\nout = sys.stdout.flush\n\ndef solve():\n    blank = input()\n    n,m = map(int,input().split())\n    matrix = [list(input().rstrip('\\n')) for i in range(n)]\n    dir_ = {'U':(-1,0),'D':(1,0),'L':(0,-1),'R':(0,1)}\n    maxv,x,y = 0,0,0\n\n    dis = [[0 for i in range(m)] for i in range(n)]\n    def bfs(x,y):\n        nonlocal dis,dir_,matrix\n        path = []\n        is_loop = False\n        loop_head = 0\n        cx,cy = x,y\n        d = 0\n        while 0 <= cx < n and 0 <= cy < m:\n            if dis[cx][cy] == -1:\n                loop_head = path.index(cx * m + cy)\n                is_loop = True\n                break\n            if dis[cx][cy] > 0:\n                d += dis[cx][cy]\n                break\n            d += 1\n            dis[cx][cy] = -1\n            path.append(cx * m + cy)\n            (dx,dy) = dir_[matrix[cx][cy]]\n            cx += dx\n            cy += dy\n\n        if is_loop:\n            for i in range(0,loop_head):\n                dis[path[i] // m][path[i] % m] = d - i\n            for i in range(loop_head,len(path)):\n                dis[path[i] // m][path[i] % m] = d - loop_head\n        else:\n            for i in range(len(path)):\n                dis[path[i] // m][path[i] % m] = d - i\n\n    for i in range(n):\n        for j in range(m):\n            bfs(i,j)\n    for i in range(n):\n        for j in range(m):\n            if dis[i][j] > maxv:\n                maxv = dis[i][j]\n                x,y = i,j\n    print(x + 1,y + 1,maxv)\n\nif __name__ == '__main__':\n    for i in range(int(input())):\n        solve()",
                true
            ],
            [
                "def flood_fill(R, C, graph, r, c):\n    d = 0\n    nr, nc = r, c\n    x = C*nr+nc\n    path = {x:1}\n    loop = visited = False\n    while True:\n        if graph[x] >= 1:  # visited\n            d = (len(path)-1)+graph[x]\n            visited = True\n            break\n        dr, dc = DIRS[graph[x]]\n        nr, nc = divmod(x, C)\n        nr, nc = nr+dr, nc+dc\n        if not (0 <= nr < R and 0 <= nc < C):  # outside\n            break\n        x = C*nr+nc\n        if x in path:  # loop\n            d = len(path)\n            for y in path:\n                graph[y] = d\n                if loop:\n                    continue\n                elif y == x:\n                    loop = True\n                    continue\n                d -= 1\n            break\n        path[x] = 1\n    if not loop:\n        if not visited:\n            d = len(path)\n        for y in path:\n            graph[y] = d\n            d -= 1\n    return graph[C*r+c]\n\ndef solution():\n    _ = input()\n    R, C = list(map(int, input().strip().split()))\n    graph = []\n    for _ in range(R):\n        graph.extend(list(map((lambda x: TRAN[x]), list(input().strip()))))\n    x = -1\n    for r in range(R):\n        for c in range(C):\n            flood_fill(R, C, graph, r, c)\n            y = C*r+c\n            if x == -1 or graph[y] > graph[x]:\n                x = y\n    i, j = divmod(x, C)\n    return \"%s %s %s\" % (i+1, j+1, graph[x])\n\nTRAN = {'U':0, 'D':-1, 'L':-2, 'R':-3}\nDIRS = {0:(-1, 0), -1:(1, 0), -2:(0, -1), -3:(0, 1)}\nfor case in range(eval(input())):\n    print('%s' % solution())\n",
                true
            ],
            [
                "def flood_fill(R, C, graph, r, c):\n    nr, nc = r, c\n    x = C*nr+nc\n    path = {x:1}\n    while True:\n        if graph[x] >= 1:  # visited\n            d = (len(path)-1)+graph[x]\n            for y in path:\n                graph[y] = d\n                d -= 1\n            break\n        dr, dc = DIRS[graph[x]]\n        nr, nc = divmod(x, C)\n        nr, nc = nr+dr, nc+dc\n        if not (0 <= nr < R and 0 <= nc < C):  # outside\n            d = len(path)\n            for y in path:\n                graph[y] = d\n                d -= 1\n            break\n        x = C*nr+nc\n        if x in path:  # loop\n            d, loop = len(path), False\n            for y in path:\n                graph[y] = d\n                if loop or y == x:\n                    loop = True\n                    continue\n                d -= 1\n            break\n        path[x] = 1\n\ndef solution():\n    _ = input()\n    R, C = list(map(int, input().strip().split()))\n    graph = []\n    for _ in range(R):\n        graph.extend(list(map((lambda x: TRAN[x]), list(input().strip()))))\n    x = -1\n    for r in range(R):\n        for c in range(C):\n            flood_fill(R, C, graph, r, c)\n            y = C*r+c\n            if x == -1 or graph[y] > graph[x]:\n                x = y\n    i, j = divmod(x, C)\n    return \"%s %s %s\" % (i+1, j+1, graph[x])\n\nTRAN = {'U':0, 'D':-1, 'L':-2, 'R':-3}\nDIRS = {0:(-1, 0), -1:(1, 0), -2:(0, -1), -3:(0, 1)}\nfor case in range(eval(input())):\n    print('%s' % solution())\n",
                true
            ],
            [
                "import sys\nfor _ in range(int(sys.stdin.readline())):\n    sys.stdin.readline()\n    n, m = [int(_) for _ in sys.stdin.readline().split()]\n    d = [[-1 if j == 'R' else (-2 if j == 'U' else (-3 if j == 'L' else -4)) for j in sys.stdin.readline().strip()] for i in range(n)]\n    r = 0                        \n    pos = (0,0)\n    for i in range(n):\n        for j in range(m):\n            a,b,p,c,st = i,j,d[i][j],0,[]\n            while p < 0:\n                d[a][b] = 0\n                st.append((a,b))\n                if p == -1: b+=1\n                elif p == -2: a-=1\n                elif p == -3: b-=1\n                else: a+=1\n                c += 1\n                if 0 <= a < n and 0 <= b < m:\n                    p = d[a][b]\n                else: \n                    for ii,(x,y) in enumerate(st):\n                        d[x][y] = c-ii\n                    p = -1\n                    break\n            if p == 0:\n                jj = flag = 0\n                for ii,(x,y) in enumerate(st):\n                    d[x][y] = (c-jj) if flag else (c-ii)\n                    if x == a and y == b: flag = 1; jj = ii\n            if p > 0:\n                for ii,(x,y) in enumerate(st):\n                    d[x][y] = p + c - ii\n            if d[i][j] > r: r = d[i][j]; pos = (i,j)\n    print(pos[0]+1, pos[1]+1, r) ",
                true
            ],
            [
                "def flood_fill(R, C, graph, r, c):\n    d, nr, nc = 0, r, c\n    x = C*nr+nc\n    path = {x:1}\n    while True:\n        if graph[x] >= 1:  # visited\n            d = (len(path)-1)+graph[x]\n            break\n        dr, dc = DIRS[graph[x]]\n        nr, nc = divmod(x, C)\n        nr, nc = nr+dr, nc+dc\n        if not (0 <= nr < R and 0 <= nc < C):  # outside\n            break\n        x = C*nr+nc\n        if x in path:  # loop\n            break\n        path[x] = 1\n    d, loop = max(d, len(path)), False\n    for y in path:\n        graph[y] = d\n        if loop or y == x:\n            loop = True\n            continue\n        d -= 1\n\ndef solution():\n    _ = input()\n    R, C = list(map(int, input().strip().split()))\n    graph = []\n    for _ in range(R):\n        graph.extend(list(map((lambda x: TRAN[x]), list(input().strip()))))\n    x = -1\n    for r in range(R):\n        for c in range(C):\n            flood_fill(R, C, graph, r, c)\n            y = C*r+c\n            if x == -1 or graph[y] > graph[x]:\n                x = y\n    i, j = divmod(x, C)\n    return \"%s %s %s\" % (i+1, j+1, graph[x])\n\nTRAN = {'U':0, 'D':-1, 'L':-2, 'R':-3}\nDIRS = {0:(-1, 0), -1:(1, 0), -2:(0, -1), -3:(0, 1)}\nfor case in range(eval(input())):\n    print('%s' % solution())\n",
                true
            ],
            [
                "def flood_fill(R, C, graph, r, c):\n    nr, nc = r, c\n    x = C*nr+nc\n    path = {x:1}\n    while True:\n        if graph[x] >= 1:  # visited\n            d = (len(path)-1)+graph[x]\n            break\n        dr, dc = DIRS[graph[x]]\n        nr, nc = divmod(x, C)\n        nr, nc = nr+dr, nc+dc\n        if not (0 <= nr < R and 0 <= nc < C):  # outside\n            d = len(path)\n            break\n        x = C*nr+nc\n        if x in path:  # loop\n            d = len(path)\n            break\n        path[x] = 1\n    loop = False\n    for y in path:\n        graph[y] = d\n        if loop or y == x:\n            loop = True\n            continue\n        d -= 1\n\ndef solution():\n    _ = input()\n    R, C = list(map(int, input().strip().split()))\n    graph = []\n    for _ in range(R):\n        graph.extend(list(map((lambda x: TRAN[x]), list(input().strip()))))\n    x = -1\n    for r in range(R):\n        for c in range(C):\n            flood_fill(R, C, graph, r, c)\n            y = C*r+c\n            if x == -1 or graph[y] > graph[x]:\n                x = y\n    i, j = divmod(x, C)\n    return \"%s %s %s\" % (i+1, j+1, graph[x])\n\nTRAN = {'U':0, 'D':-1, 'L':-2, 'R':-3}\nDIRS = {0:(-1, 0), -1:(1, 0), -2:(0, -1), -3:(0, 1)}\nfor case in range(eval(input())):\n    print('%s' % solution())\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\n\n\ndef robotOnTheBoard2():\n    input()\n    n, m = inlt()\n    board = []\n    for i in range(n):\n        board.append(insr())\n\n    nxt_index = [-1] * (m * n)\n    in_degree = [0] * (m * n)\n    visited = [False] * (m * n)\n    values = [0] * (m * n)\n\n    for i in range(n):\n        for j in range(m):\n            index = i * m + j\n            nxt_i = i\n            nxt_j = j\n            if board[i][j] == 'L':\n                nxt_j -= 1\n            elif board[i][j] == 'R':\n                nxt_j += 1\n            elif board[i][j] == 'U':\n                nxt_i -= 1\n            elif board[i][j] == 'D':\n                nxt_i += 1\n            if nxt_i < 0 or nxt_i >= n or nxt_j < 0 or nxt_j >= m:\n                continue\n            nxt_index[index] = nxt_i * m + nxt_j\n            in_degree[nxt_i * m + nxt_j] += 1\n\n    for index in range(m*n):\n        if in_degree[index] != 0:\n            continue\n        seq = []\n        while not visited[index] and index != -1:\n            seq.append(index)\n            visited[index] = True\n            index = nxt_index[index]\n\n        # if this way out to the board\n        if index == -1:\n            for i, idx in enumerate(seq):\n                values[idx] = len(seq) - i\n        # encounter with other or looped\n        else:\n            base = values[index]\n            loop_flag = False\n            loop_length = len(seq)\n            for i, idx in enumerate(seq):\n                if idx == index:\n                    loop_flag = True\n                if loop_flag is False:\n                    loop_length -= 1\n                values[idx] = max(len(seq) - i, loop_length) + base\n\n    # Handle the loops\n    for index in range(m*n):\n        if values[index] > 0:\n            continue\n        loop_length = 0\n        seq = []\n        while not visited[index]:\n            seq.append(index)\n            visited[index] = True\n            index = nxt_index[index]\n            loop_length += 1\n\n        for idx in seq:\n            values[idx] = loop_length\n\n    maximum = max(values)\n    for i in range(m * n):\n        if values[i] == maximum:\n            print(i // m + 1, i % m + 1, values[i])\n            return\n\n\nif __name__ == '__main__':\n    t = inp()\n    for i in range(t):\n        robotOnTheBoard2()\n\n",
                true
            ],
            [
                "from collections import OrderedDict\n\ndef flood_fill(R, C, graph, r, c):\n    d, nr, nc = 0, r, c\n    x = C*nr+nc\n    path = OrderedDict({x:None})\n    while True:\n        if graph[x] >= 1:  # visited\n            d = (len(path)-1)+graph[x]\n            break\n        dr, dc = DIRS[graph[x]]\n        nr, nc = divmod(x, C)\n        nr, nc = nr+dr, nc+dc\n        if not (0 <= nr < R and 0 <= nc < C):  # outside\n            break\n        x = C*nr+nc\n        if x in path:  # loop\n            break\n        path[x] = None\n    d, loop = max(d, len(path)), False\n    for y in path:\n        graph[y] = d\n        if loop or y == x:\n            loop = True\n            continue\n        d -= 1\n\ndef solution():\n    _ = input()\n    R, C = list(map(int, input().strip().split()))\n    graph = []\n    for _ in range(R):\n        graph.extend(list(map((lambda x: TRAN[x]), list(input().strip()))))\n    x = -1\n    for r in range(R):\n        for c in range(C):\n            flood_fill(R, C, graph, r, c)\n            y = C*r+c\n            if x == -1 or graph[y] > graph[x]:\n                x = y\n    i, j = divmod(x, C)\n    return \"%s %s %s\" % (i+1, j+1, graph[x])\n\nTRAN = {'U':0, 'D':-3, 'L':-2, 'R':-1}\nDIRS = [(-1, 0), (1, 0), (0, -1), (0, 1)]\nfor case in range(eval(input())):\n    print('%s' % solution())\n",
                true
            ],
            [
                "def flood_fill(R, C, r, c, dp):\n    d, nr, nc = 0, r, c\n    x = C*nr+nc\n    path = [x]\n    while True:\n        if dp[x] >= 1:\n            d = (len(path)-1)+dp[x]\n            break\n        (dr, dc), dp[x] = DIRS[dp[x]], GRAY\n        nr, nc = divmod(x, C)\n        nr, nc = nr+dr, nc+dc\n        if not (0 <= nr < R and 0 <= nc < C):\n            break\n        x = C*nr+nc\n        if dp[x] == GRAY:\n            break\n        path.append(x)\n    d, cycle = max(d, len(path)), False\n    for y in path:\n        dp[y] = d\n        if cycle or y == x:\n            cycle = True\n            continue\n        d -= 1\n\ndef solution():\n    _ = input()\n    R, C = list(map(int, input().strip().split()))\n    dp = []\n    for _ in range(R):\n        dp.extend(list(map((lambda x: TRAN[x]), list(input().strip()))))\n    x = -1\n    for r in range(R):\n        for c in range(C):\n            flood_fill(R, C, r, c, dp)\n            y = C*r+c\n            if x == -1 or dp[y] > dp[x]:\n                x = y\n    i, j = divmod(x, C)\n    return \"%s %s %s\" % (i+1, j+1, dp[x])\n\nTRAN = {'U':0, 'D':-3, 'L':-2, 'R':-1}\nDIRS = [(-1, 0), (1, 0), (0, -1), (0, 1)]\nGRAY = -4\nfor case in range(eval(input())):\n    print('%s' % solution())\n",
                true
            ],
            [
                "def flood_fill(R, C, r, c, dp):\n    d, nr, nc = 0, r, c\n    x = C*nr+nc\n    path = [x]\n    while True:\n        if dp[x] >= 1:  # visited\n            d = (len(path)-1)+dp[x]\n            break\n        (dr, dc), dp[x] = DIRS[dp[x]], VISITING\n        nr, nc = divmod(x, C)\n        nr, nc = nr+dr, nc+dc\n        if not (0 <= nr < R and 0 <= nc < C):  # outside\n            break\n        x = C*nr+nc\n        if dp[x] == VISITING:  # cycle\n            break\n        path.append(x)\n    d, cycle = max(d, len(path)), False\n    for y in path:\n        dp[y] = d\n        if cycle or y == x:\n            cycle = True\n            continue\n        d -= 1\n\ndef solution():\n    _ = input()\n    R, C = list(map(int, input().strip().split()))\n    dp = []\n    for _ in range(R):\n        dp.extend(list(map((lambda x: TRAN[x]), list(input().strip()))))\n    x = -1\n    for r in range(R):\n        for c in range(C):\n            flood_fill(R, C, r, c, dp)\n            y = C*r+c\n            if x == -1 or dp[y] > dp[x]:\n                x = y\n    i, j = divmod(x, C)\n    return \"%s %s %s\" % (i+1, j+1, dp[x])\n\nTRAN = {'U':0, 'D':-3, 'L':-2, 'R':-1}\nDIRS = [(-1, 0), (1, 0), (0, -1), (0, 1)]\nVISITING = -4\nfor case in range(eval(input())):\n    print('%s' % solution())\n",
                true
            ],
            [
                "import sys\n\n\ndef solve():\n    _ = sys.stdin.readline()\n    n, m = map(int, sys.stdin.readline().split())\n    s = [list(sys.stdin.readline()[:-1]) for _ in range(n)]\n    dic = {\"L\":(0,-1), \"R\":(0,1), \"D\":(1, 0), \"U\":(-1, 0)}\n    ans = [1,1,0]\n    for i in range(n):\n        for j in range(m):\n            if isinstance(s[i][j], str):\n                x, y = i, j\n                path = []\n                while 0<=x<n and 0<=y<m and isinstance(s[x][y], str):\n                    path.append(x)\n                    path.append(y)\n                    dx, dy = dic[s[x][y]]\n                    s[x][y] = -1\n                    x = x + dx\n                    y = y + dy\n                \n                \n                if 0<=x<n and 0<=y<m and s[x][y] == -1:\n                    steps = 1\n                    ind = len(path) - 2\n                    while ind > 0 and not (path[ind] == x and path[ind+1] == y):\n                        steps += 1\n                        ind -= 2\n\n                    for z in range(ind, len(path), 2):\n                        nx, ny = path[z], path[z+1]\n                        s[nx][ny] = steps\n                    while len(path) > ind:\n                        path.pop()\n                steps = 0\n                if 0<=x<n and 0<=y<m:\n                    steps = s[x][y]\n                    \n                while len(path) > 0:\n                    steps += 1\n                    y = path.pop()\n                    x = path.pop()\n                    s[x][y] = steps\n                if steps > ans[2]:\n                    ans[0] = x+1\n                    ans[1] = y+1\n                    ans[2] = steps\n    # print(\"    +++++++\")\n    # for line in s:\n    #     print(\"   \", *line)\n    # print(\"    -------\")\n    print(*ans)\n\nfor t in range(int(input() ) ):\n    solve()\n    ",
                true
            ],
            [
                "def flood_fill(R, C, r, c, dp):\n    d, nr, nc = 0, r, c\n    x = C*nr+nc\n    path = [x]\n    while True:\n        if dp[x] >= 1:\n            d = (len(path)-1)+dp[x]\n            break\n        (dr, dc), dp[x] = DIRS[dp[x]], GRAY\n        nr, nc = divmod(x, C)\n        nr, nc = nr+dr, nc+dc\n        if not (0 <= nr < R and 0 <= nc < C):\n            break\n        x = C*nr+nc\n        if dp[x] == GRAY:\n            break\n        path.append(x)\n    d, cycle = max(d, len(path)), False\n    for y in path:\n        dp[y] = d\n        if cycle or y == x:\n            cycle = True\n            continue\n        d -= 1\n\ndef solution():\n    _ = input()\n    R, C = list(map(int, input().split()))\n    dp = []\n    for _ in range(R):\n        dp.extend(list(map((lambda x: TRAN[x]), list(input()))))\n    x = -1\n    for r in range(R):\n        for c in range(C):\n            flood_fill(R, C, r, c, dp)\n            y = C*r+c\n            if x == -1 or dp[y] > dp[x]:\n                x = y\n    i, j = divmod(x, C)\n    return \"%s %s %s\" % (i+1, j+1, dp[x])\n\nTRAN = {'U':0, 'D':-3, 'L':-2, 'R':-1}\nDIRS = [(-1, 0), (1, 0), (0, -1), (0, 1)]\nGRAY = -4\nfor case in range(eval(input())):\n    print('%s' % solution())\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nTheofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "n = int(input())\nfor i in range(n):\n    x = int(input())\n    print(-1*(x-1), x, sep = ' ')",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0, 1)\n    else:\n        print((n-1)*-1, n)\n",
                true
            ],
            [
                "def solve_case():\n    n = int(input())\n    m = n - 1\n    print(f'{-m} {n}')\n\n\nT = int(input())\nfor t in range(T):\n    solve_case()\n",
                true
            ],
            [
                "for _ in range(int(input())):n = int(input());print(-n + 1, n)",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    print(-(n - 1), n)\n        ",
                true
            ],
            [
                "t = int(input())\nwhile (t):\n    n = int(input())\n    if n<0:\n        print(n,-n-1)\n    elif n==0:\n        print(-1,1)\n    else: \n        print(-n+1,n)\n    t-=1",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    print(-n+1, n)",
                true
            ],
            [
                "\nt=int(input())\nif(1 <= t <= 10**14):\n    for i in range(t):\n        n= int(input())\n        if(1 <= n <= 10**18):\n            if(-10**18 <= -(n-1) <= n and n <= 10**18):\n                print(-(n-1),n)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    if n==1:\n        print(\"0 1\")\n    else:\n        print(\"{} {}\".format(-(n-1),n))",
                true
            ],
            [
                "\n\ndef solve():\n    n=int(input())\n\n    print(-1*(n-1),n)\n\n\n\nt=int(input())\nfor i in range(t):\n    solve()",
                true
            ],
            [
                "# import math\n# a, b, c, d = map(int, input().split())\nq = int(input())\nfor i in range(q):\n   a = int(input())\n   print(-a+1,a)",
                true
            ],
            [
                "t = int(input())\nwhile(t>0):\n     n = int(input())\n     x = n - 1\n     x = -x\n     print(x , n)\n     t-=1",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(1-n, n)",
                true
            ],
            [
                "# list(map(int,input.split(\" \")))\n\nn = int(input())\n\nfor i in range(n):\n    m = int(input())\n    \n    print(*[1-m,m])",
                true
            ],
            [
                "t=int(input())\nd={}\nfor i in range(t):\n    n=int(input())\n    d[i]=str(-(n-1))+' '+str(n)\nfor i in range(t):\n    print(d[i])",
                true
            ],
            [
                "from typing import Counter\nimport sys\nfrom collections import defaultdict as dd\nfrom math import *\n\ndef vinp():\n    return map(int,input().split())\ndef linp():\n    return list(map(int,input().split()))\ndef sinp():\n    return input()\ndef inp():\n    return int(input())\ndef mod(f):\n    return f % 1000000007\ndef pr(*x):\n    print(*x)\ndef finp():\n    f=open(\"input.txt\",\"r\")\n    f=f.read().split(\"\\n\")\n    return f\ndef finp():\n    f=open(\"input.txt\",\"r\")\n    f=f.read().split(\"\\n\")\n    return f\ndef fout():\n    return open(\"output.txt\",\"w\")\ndef fpr(f,x):\n    f.write(x+\"\\n\")\ndef csort(c):\n    sorted(c.items(), key=lambda pair: pair[1], reverse=True)\ndef indc(l,n):\n    c={}\n    for i in range(n):\n        c[l[i]]=c.get(l[i],[])+[i+1]\n    return c\nif __name__ ==\"__main__\":\n    cou=inp()\n    for i in range(cou):\n        n = inp()\n        pr(-(n-1),n)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n\n    print(int((n - 1) * (-1)), n)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(-n + 1, n)\n",
                true
            ],
            [
                "def myfunction():\n    t = int(input())\n    for i in range(t):\n        num = int(input())\n        if num == 0:\n            print(-1,1)\n        else:\n            print(-(num-1),num)\n        \n                \nif __name__==\"__main__\":\n    myfunction()",
                true
            ],
            [
                "def process(n):\n    if n==0:\n        return [-1, 1]\n    return [-1*(n-1), n]\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a, b = process(n)\n    print(f'{a} {b}')",
                true
            ],
            [
                "for x in range(int(input())) :\n    n = int(input())\n    print(-(n-1), n)",
                true
            ],
            [
                "t=int(input())\nfor tt in range(t):\n    n=int(input())\n    print(-n+1,n)",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect, heapq\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nmod = 998244353\n\ndef qmod(a, b):\n    res = 1\n    while b:\n        if b&1:\n            res = (res*a)%mod\n        b >>= 1\n        a = (a*a)%mod\n    return res\n\ndef inv(a):\n    return qmod(a, mod-2)\n\n\ndef my_main():\n    kase = inp()\n    pans = []\n    for ka in range(kase):\n        # print 'Case #%d: ' % (ka+1),\n        n = inp()\n        pans.append(\"%d %d\" % (-n+1, n))\n\n    print('\\n'.join(pans))\n\nmy_main()\n\n",
                true
            ],
            [
                "import sys\nimport math\nfrom bisect import bisect_left\nimport heapq\nfrom collections import deque\nfrom itertools import product, permutations\nimport random\ndef II():\n    return int(sys.stdin.readline())\n \ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n    return map(int, sys.stdin.readline().split())\n \ndef SI():\n    return sys.stdin.readline().strip()\n \ndef C(n, k, mod):\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\n \ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\n \nmod = 998244353\n \nfor _ in range(II()):\n    n = II()\n    print(-n+1, n)",
                true
            ],
            [
                "test = int(input())\nfor _ in range(0, test):\n    k = int(input())\n    if k == 1:\n        print(0, 1)\n    else:\n        print(-(k-1), k)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    # A=list(map(int,input().split()))\n\n    print(-n+1,n)\n\n    \n",
                true
            ],
            [
                "t0 = int(input())\nfor t in range(t0):\n    n = int(input())\n    print(\"{} {}\".format(-n+1, n))",
                true
            ],
            [
                "\nt=int(input())\n\nfor _ in range(t):\n    n=int(input())\n\n    if n<0:\n        print(n,abs(n)-1)\n    elif n>0:\n        print(-(n-1),n)\n    else:\n        print(-1,1)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    print(-(n-1),n)",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    #a = list(map(int,input().split()))\n    print(1-n,n)    ",
                true
            ],
            [
                "n = int(input())\nfor _ in range(n):\n    m = int(input())\n    print(f\"{-(m-1)} {m}\")",
                true
            ],
            [
                "test=int(input())\nwhile test>0:\n    num=int(input())\n    fi=1-num\n    se=num\n    print(fi, end = \" \")  \n    print(se)\n    test-=1\n    ",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    N = int(input())\n    r = N\n    l = -(N-1)\n    print(l,r)",
                true
            ],
            [
                "N=int(input())\nfor i in range(N):\n    n=int(input())\n    print(1-n,end=\" \")\n    print(n)\n",
                true
            ],
            [
                "T=int(input())\nfor i in range (T):\n    n = int(input())\n    print(str(-n+1)+\" \"+str(n))",
                true
            ],
            [
                "for ic in range(int(input())):\n     n = int(input())\n     print(-(n-1),n)\n     ",
                true
            ],
            [
                "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        if n==1:\n            print(0,1)\n            continue\n        print(-(n-1),n)\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "for k in range(int(input())):\n    n=int(input())\n    print(((-1)*(n-1)),n)",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    r = n\n    l = -(n-1)\n    print(l, r)\n\nif __name__ == \"__main__\":\n    t = int(input())\n    while t > 0:\n        solve()\n        t -= 1",
                true
            ],
            [
                "#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"7\n# 1\n# 2\n# 3\n# 6\n# 100\n# 25\n# 3000000000000\n\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\ndef get_divisors(n):\n    lower_divisors = []\n    upper_divisors = []\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\n\ndef solve(N):\n    # divs = get_divisors(2*N)\n    # for d in divs:\n    #     a = d\n    #     b = (2*N)//d\n    #     if (a+b-1) % 2 == 0 and (a-b+1) % 2 == 0:\n    #         r = (a+b-1)//2\n    #         l = (a-b+1)//2\n    #         if -10**18 <= l < r <= 10**18:\n    #             return [l, r]\n    # return []\n    return [-(N-1), N]\n\nT0 = int(input())\nfor _ in range(T0):\n    N = int(input())\n    print(*solve(N))",
                true
            ],
            [
                "t = int(input())\n\nwhile(t):\n    t = t - 1\n    n = int(input())\n    print(\"{} {}\".format(-n + 1, n))",
                true
            ],
            [
                "import sys, os.path, math\nif(os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\",\"r\")\n    sys.stdout = open(\"output.txt\",\"w\")\n \ndef hcf(a,b):\n    if(a%b==0):\n        return b\n    return hcf(b, a%b) \n\n###########################################\n\nfor t in range(int(input())):\n    n = int(input())\n    print(-n+1,n)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(-n + 1, n)\n",
                true
            ],
            [
                "import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\nfor _ in range(int(inpu())) :\n    n = int(inpu())\n    prin(str(1 - n) + ' ' + str(n) + '\\n')\n",
                true
            ],
            [
                "# <editor-fold desc=\"imports\">\nfrom os import path\nfrom sys import stdin, stdout\nif path.exists('tc.txt'):\n    stdin = open('tc.txt', 'r')\ndef gmi(): return map(int, stdin.readline().strip().split())\ndef gms(): return map(str, stdin.readline().strip().split())\ndef gari(): return list(map(int, stdin.readline().strip().split()))\ndef gart(): return tuple(map(int, stdin.readline().strip().split()))\ndef gars(): return list(map(str, stdin.readline().strip().split()))\ndef gs(): return stdin.readline().strip()\ndef gls(): return list(stdin.readline().strip())\ndef gi(): return int(stdin.readline())\n# </editor-fold>\n\ndef solve():\n    n = gi()\n    return (-n+1, n)\n\n\n# <editor-fold desc=\"Main\">\ntc = gi()\nwhile tc:\n    tc -= 1\n    print(*solve())\n# </editor-fold>",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 0:\n        print(-1, 1)\n    elif n > 0:\n        print(1 - n, n)\n    else:\n        print(n, -1 - n)",
                true
            ],
            [
                "for t in range(int(input())):\n    n = int(input())\n    print(-(n-1), n)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    print(1-n, n)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(-1*(n-1),n)",
                true
            ],
            [
                "cc = int(input())\nfor i in range(cc):\n    v = int(input())\n    l = -1 * (v-1)\n    print(f\"{l} {v}\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(-n + 1 , n , sep=\" \")",
                true
            ],
            [
                "inp1 = int(input())\nfor i in range(inp1):\n    a=int(input())\n    b=int((a*-1)+1)\n    print(str(b) + \" \" +str(a))",
                true
            ],
            [
                "x = int(input())\ncases = []\nfor i in range(0, x):\n    cases.append(int(input()))\nfor i in range(0, x):\n    print(str(-(cases[i])+1) + \" \" + str(cases[i]))",
                true
            ],
            [
                "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n==1:\n        print(0,1)\n    if n==-1:\n        print(-1,0)\n    if n==0:\n        print(-1,1)\n    x = 2*n\n    for j in range(1,math.floor(math.sqrt(x))):\n        if x%j == 0:\n            k = x//j-j\n            if k%2 !=0:\n                l = (k+1)//2\n                r = x//j-l\n                if l != r and (l+r)*(r-l+1)==x:\n                    print(l,r)\n                    break\n                l = (-k+1)//2\n                r = j-l\n                if l != r and (l+r)*(r-l+1)==x:\n                    print(l,r)\n                    break",
                true
            ],
            [
                "n = int(input())\nfor _ in range(n):\n    t = int(input())\n    print(1-t, t)",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    x = int(input())\n    print(str(-(x-1)) + ' ' + str(x))",
                true
            ],
            [
                "x=int(input())\ni=0\nwhile i<x:\n    l=int(input())\n    t=(l-1)*-1\n    \n    print(f\"{t} {l}\")\n    i+=1",
                true
            ],
            [
                "from sys import stdin\n# input=stdin.buffer.readline\ninput=lambda : stdin.readline().strip()\nlin=lambda :list(map(int,input().split()))\niin=lambda :int(input())\nmain=lambda :map(int,input().split())\nfrom math import ceil,sqrt,factorial,log\nfrom collections import deque\nfrom bisect import bisect_left\nmod=998244353\nmod=1000000007\n\ndef solve(we):    \n    n=iin()\n    print(-(n-1),n)\n\nqwe=1\nqwe=iin()\nfor _ in range(qwe):\n    solve(_+1)",
                true
            ],
            [
                "from math import ceil, sqrt\n\n\ndef get_ans(n):\n    \"\"\"nd = 2*n\n    for a in range(1, ceil(sqrt(2*nd)) + 1):\n        if nd % a == 0:\n            b = nd//a\n            if ((b - a) % 2) == 1:\n                l = (a - b + 1)//2\n                r = a - l\n                return [l, r]\n                print('q')\"\"\"\n    return [-(n-1), n]\n\n\nanss = []\nt = int(input())\nfor _ in range(t):\n    anss.append(get_ans(int(input())))\n\nfor i in anss:\n    print(i[0], i[1])\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n  n=int(input())\n  if(n==1):\n    print(0,1)\n  else:  \n    print(\"-\"+str(n-1),n)\n\n   \n\n  \n\n\n  \n\n    \n    ",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    if n > 0:\n        return -n+1, n\n    if n < 0:\n        return n, -n-1\n    return -1, 1\n\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor i in range(t):\n    print(*solve())\n",
                true
            ],
            [
                "t = int(input())\nfor tc in range(t):\n   n = int(input())\n   print(-(n-1),n)",
                true
            ],
            [
                "def solution():\n    for t in range(int(input())):\n        n = int(input()); l, r = 0, 0;\n\n        l = -(n-1); r = n;\n\n        print(\"{0:} {1:}\".format(l, r));\n    return;\nsolution();",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n=int(input())\n    print(-1*(n-1),n)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(str(-n+1) + \" \" + str(n))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    if n==1:\n        print(\"0\",n)\n    else:\n        print(-(n-1),n)\n",
                true
            ],
            [
                "import queue\nfrom math import inf, gcd, floor, sqrt, ceil, log, log2, log10, factorial\nimport sys\nfrom collections import *\nfrom random import *\nfrom itertools import *\n\nsys.setrecursionlimit(99999)\n#sys.stdin = open(\"input.txt\", 'r') # for debug purpose\neps = sys.float_info.epsilon\nP = 2\nINF = 1e9 + 1\nMOD = 10 ** 9 + 7\n\n\ndef is_prime(n):\n    if n == 0 or n == 1:\n        return False\n    d = 2\n    while d * d <= n:\n        if n % d == 0:\n            return False\n        d += 1\n    return True\n\n\ndef div_up(n, k):\n    if n % k == 0:\n        return n // k\n    else:\n        return n // k + 1\n\n\ndef num_len(n, base=10):\n    if n == 0:\n        return 1\n    return int(floor(log(n, base) + 1))\n\n\ndef dfs_sample(graph, cl, p, v):\n    cl[v] = 1\n    for to in graph[v]:\n        if cl[to] == 1 and p[v] != to:\n            # yay, cycle\n            pass\n        elif cl[to] == 0:\n            p[to] = v\n            dfs_sample(graph, cl, p, to)\n    cl[v] = 2\n\n\ndef down(a):\n    for i in range(1, len(a)):\n        if a[i] > a[i - 1]:\n            return False\n    return True\n\n\ndef up(a):\n    for i in range(1, len(a)):\n        if a[i] < a[i - 1]:\n            return False\n    return True\n\n\ndef code(c):\n    return ord(c) - 32\n\n\ndef _hash_(s):\n    res, p = 0, 1\n    for i in range(len(s)):\n        res += (code(s[i]) * p)\n        res %= MOD\n        p *= P\n        p %= MOD\n    return res % MOD\n\n\ndef remove_edge(v, u, graph):\n    graph[v].remove(u)\n    graph[u].remove(v)\n\n\nb = True\n\n\ndef dfs_stack(start, graph, visited, flags):\n    global b\n    stack = []\n    visited[start] = True\n    stack.append(start)\n    while len(stack) != 0:\n        v = stack.pop()\n        if not flags[v]:\n            b = False\n        for to in graph[v]:\n            if not visited[to]:\n                visited[to] = True\n                stack.append(to)\n\n\ndef all_eq(a):\n    for i in range(len(a) - 1):\n        if a[i] != a[i + 1]:\n            return False\n    return True\n\n\ndef kmp(s, pr):\n    n = len(s)\n    pr[0] = 0\n    for i in range(1, n):\n        j = pr[i - 1]\n        while j > 0 and s[i] != s[j]:\n            j = pr[j - 1]\n        if s[i] == s[j]:\n            j += 1\n        pr[i] = j\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef gcd_advanced(a, b):\n    if a == 0:\n        return 0, 1, b\n    x1, y1, g = gcd_advanced(b % a, a)\n    return y1 - x1 * (b // a), x1, g\n\n\ndef solve():\n    n = int(input())\n    print(-(n-1), n)\n\n\nfor _ in range(int(input())):\n    solve()\n\n\ndef debug():\n    pass\n\n# debug()",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools, copy\ninf = float('inf')\nmod = 10**9+7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // fractions.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(200000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\ndef initGrid(h,w):\n    for i in range(h):\n        grid.append(list(S()))\n################### Main (Author - 9th) ###################\n\nfor _ in range(I()):\n    n = I()\n    if n == 1:\n        print(0,1)\n    elif n == 2:\n        print(-1,2)\n    else:\n        print(-(n-1),n)\n            ",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    # find l and r\n    # l < r\n    \n    return [-n+1, n]\n    \nfor _ in range(int(input())):\n    print(*solve())",
                true
            ],
            [
                "t = int(input())\nwhile t != 0:\n  t = t - 1\n  n = int(input())\n  print(-n + 1, end = ' ')\n  print(n)",
                true
            ],
            [
                "import math\nc=int(input())\nb=0\nwhile b<c:\n    d=int(input())\n    print(-d+1,d)\n    b=b+1\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    x = int(input())\n    print(-x+1, x)\n",
                true
            ],
            [
                "t = int(input())\nwhile (t):\n    n = int(input())\n    print(-(n-1),n)\n    t -= 1",
                true
            ],
            [
                "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\nimport string\n\nORDA = 97  # a\n\n\ndef ii(): return int(input())\n\n\ndef mi(): return map(int, input().split())\n\n\ndef li(): return list(map(int, input().split()))\n\n\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\n\n\ndef revn(n): return str(n)[::-1]\n\n\ndef dd(): return collections.defaultdict(int)\n\n\ndef ddl(): return collections.defaultdict(list)\n\n\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\n\n\ndef divs(n, start=2):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n // i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\n\n\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\n\n\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\n\n\ndef convn(number, base):\n    new_number = 0\n    while number > 0:\n        new_number += number % base\n        number //= base\n    return new_number\n\n\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\ndef ispal(s):\n    for i in range(len(s) // 2 + 1):\n        if s[i] != s[-i - 1]:\n            return False\n    return True\n\n\nfor _ in range(ii()):\n    n = ii()\n    print(-n + 1, n)\n\n\n\n\n",
                true
            ],
            [
                "from math import ceil,floor\nfor i in range(int(input())):\n    x=int(input())\n    print(-x+1,x)",
                true
            ],
            [
                "for n in[*map(int,open(0))][1:]:print(1-n,n)",
                true
            ],
            [
                "#consecutivesumriddle\nT=int(input())\nwhile(T>0):\n    n = int(input())\n    a=(n-1)*-1\n    b=n\n    print(a, b)\n    T-=1",
                true
            ],
            [
                "t = int(input())\nfor test in range(t):\n    n = int(input())\n    print(-n+1, n)",
                true
            ],
            [
                "c=int(input())\nwhile c:\n    target=int(input())\n    print(-(target-1),target)\n    c-=1",
                true
            ],
            [
                "t = int(input())\n\nwhile(t):\n    n = int(input())\n    print(-n+1, n)\n    t -= 1\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    print(-1*(n-1),n)",
                true
            ],
            [
                "n = int(input())\n\nwhile (n != 0):\n    num = int(input())\n    r = num\n    l = -(num-1)\n    print(str(l) + \" \" + str(r))\n    n -= 1",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n\n    n=int(input())\n    \n    print(-n+1, n)\n\n\n",
                true
            ],
            [
                "def solve(Test_cases):\n    Resultant_list = []\n    for i in range(Test_cases):\n        # Start the code\n        n = int(input())\n\n        Resultant_list.append(-1*(n - 1))\n        Resultant_list.append(n)\n\n    return Resultant_list\n\n\nTest_cases = int(input())\nResult = solve(Test_cases)\nfor i in range(0, len(Result), 2):\n    print(Result[i], Result[i + 1])\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    if n == 0: print(-1, 1)\n    else: print(-(n-1), n)",
                true
            ],
            [
                "t=int(input())\nfor i in range(0,t):\n    num=int(input())\n    print('%d %d'%(-(num-1),num))",
                true
            ],
            [
                "t = int(input())\n \nfor _ in range(t):\n    n = int(input())\n    print(1 - n, n)\n",
                true
            ],
            [
                "for s in[*open(0)][1:]:print(-(int(s)-1),int(s))\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    print(-(n-1),n)",
                true
            ],
            [
                "n=int(input())\nfor x in range(n):\n    x=int(input())\n    print(1-x,x)",
                true
            ],
            [
                "#from collections import Counter\nfor _ in range(int(input())):\n    n=int(input())\n    #x,y=map(int,input().split())\n    #a=list(map(int,input().split()))\n    print(-(n-1),n)",
                true
            ],
            [
                "t=int(input())\nwhile t:\n    n=int(input())\n    print(-n+1,n)\n    t-=1",
                true
            ],
            [
                "'''\nDescription: stay hungry ,stay foolish\nDescripttion: Calm and analyze\nAuthor: Aklice\nDate: 2021-10-09 16:03:36\nLastEditors: Aklice\nLastEditTime: 2021-10-09 16:06:12\n'''\na = int(input())\ni = int(1)\nwhile i <= a:\n    b = int(input())\n    print(str(1 - b) + \" \" + str(b))\n    i += 1",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    t = int(input())\n    assert not(abs(t) > 1e18)\n    if t == 0:\n        print(-1, 1)\n    elif t < 0:\n        print(t, t*-1-1)\n    else:\n        print((t*-1)+1, t)\n       ",
                true
            ],
            [
                "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n < 0:\n        print(-n, n - 1)\n    elif n > 0:\n        print(-n + 1, n)\n    else:\n        print(-1, 1)\n\n",
                true
            ],
            [
                "import math\ndef solve():\n    n = int(input())\n    print(-n + 1, n)\n\nt = int(input())\nwhile t:\n    t -= 1\n    solve()",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    a=int(input())\n    print(-(a-1),a)",
                true
            ],
            [
                "cases = int(input())\nfor _ in range(cases):\n    num = int(input())\n\n    print(-abs(num-1), num)",
                true
            ],
            [
                "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom collections import Counter\nfrom collections import defaultdict as dd\n\n# sys.setrecursionlimit(100000000)\n\nflush = lambda: stdout.flush()\nstdstr = lambda: stdin.readline()\nstdint = lambda: int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nstdmap = lambda: map(int, stdstr().split())\nstdarr = lambda: list(map(int, stdstr().split()))\n\nmod = 1000000007\n\n\nfor _ in range(stdint()):\n    n = stdint()\n\n    r = n\n    l = -(n-1)\n\n    print(l,r)\n\n",
                true
            ],
            [
                "x = int(input())\nfor t in range(x):\n    n = int(input())\n    diff = n - 1\n    print(-diff, n)",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n=int(input())\n    print(1-n,n)",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    print(-(n-1), n)\n",
                true
            ],
            [
                "from collections import Counter, defaultdict,deque\nfrom sys import stdin,stdout\nfrom heapq import heapify,heappop,heappush\nimport io , os , sys\n#input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\ninput = stdin.readline\nfrom collections import OrderedDict\nfrom bisect import bisect_left , bisect_right\n \n \n \nmod = 10 **9 + 7\n \ndef mapinput():\n    return  map(int, input().split())\n \ndef listinput():\n    return [int(i) for i in input().split()]\n \ndef intinput():\n    return int(input())\n \ndef strinput():\n    return input().strip()\n \ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n    ans = []\n    for p in range(n + 1):\n        if prime[p]:\n            ans.append(p)\n    return ans\n \ndef writ(ss):\n    stdout.write(str(ss) + \"\\n\")\n \ndef mult(a , b, mod):\n    return ((a% mod) * (b%mod) ) % mod\n \n# def binn(arr , val):\n#     low = 0\n#     high = len(arr) -1 \n#     while low<= high:\n        \n#         mid = (low + high) >> 1 \n#         #print(low , high , mid , arr[mid] , val)\n#         if arr[mid] == val:\n#             return [mid]\n#         elif arr[mid] < val:\n#             low = mid + 1 \n#         else:\n#             high = mid -1\n        \n#         aa = [low , high]\n#         for i in range(-2,2):\n#             if 0 <= mid + i < len(arr) :\n#                 aa.append(mid+i)\n#         aa = set(aa)\n#         return aa\n \n \nfor test in range(intinput()):\n    def solve():\n        n = intinput()\n        return (-n +1, n )\n    print(*solve())\n        ",
                true
            ],
            [
                "T = int(input())\nwhile T:\n    N = int(input())\n    if N>0:\n        print(-(N-1),N)\n    elif N<0:\n        print(N,-(N+1))\n    else:\n        print(0)\n    T-=1",
                true
            ],
            [
                "# template begins\n#####################################\n \n# import libraries for input/ output handling\n# on generic level\nimport atexit, io, sys, math, heapq, collections\n\n#input handling\n#input of single integer\ndef get_int(): return int(sys.stdin.readline().strip())\n#input of multiple integers\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\n#input of list\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\n#input of string\ndef get_string(): return sys.stdin.readline().strip()\n\n#output handling\n#writing int output\ndef write_int(a): sys.stdout.write(str(a)+\"\\n\")\n#writing String\ndef write_str(a): sys.stdout.write(a+\"\\n\")\n#writing Array\ndef write_list(arr): sys.stdout.write(\" \".join(map(str, arr)) + \"\\n\")\n\n#general functions\n#swap\ndef swap(arr, a, b):\n    arr[a]^=arr[b]\n    arr[b]^=arr[a]\n    arr[a]^=arr[b]\n\n#NumberOfDigits\ndef int_len(a): return math.floor(math.log(a,10))+1\n\n#Powerof2\ndef isPowerOfTwo(x): return x and (not(x & (x-1)))\n\n#Sieve\ndef Sieve(n):\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n    res = []\n    for i in range(2,len(prime)):\n        if (prime[i]):\n            res.append(i)\n    return res\n\n#binarySearch\ndef binarySearch (arr, l, r, x):\n    if r >= l:\n  \n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid-1, x)\n        else:\n            return binarySearch(arr, mid + 1, r, x)\n    else:\n        return -1\ndef search(arr,x): return binarySearch(arr,0,len(arr)-1,x)\n\n#Array to String\ndef toString(A): return''.join(A)\n\n# String to array\ndef toArray(str): return str.split()\n\n#ArraySum\ndef arrSum(Arr):\n    Sum =0\n    for i in range (len(Arr)):\n        Sum+=Arr[i]\n    return Sum\n\ndef computeXOR(n) :\n \n    # Modulus operator are expensive\n    # on most of the computers. n & 3\n    # will be equivalent to n % 4.\n \n    # if n is multiple of 4\n    if n % 4 == 0 :\n        return n\n \n    # If n % 4 gives remainder 1\n    if n % 4 == 1 :\n        return 1\n \n    # If n%4 gives remainder 2\n    if n % 4 == 2 :\n        return n + 1\n \n    # If n%4 gives remainder 3\n    return 0\n \n\n\n#####################################\n# template ends\n\n# Code begins\n#####################################\n\nN = get_int()\nwhile N >0:\n    n = get_int()\n    print(-1*(n-1),n)\n\n    N-=1\n\n\n#####################################\n# Code ends\n\n\n# Creating 2D array sol = [[0 for i in range(N)] for j in range(N)]",
                true
            ],
            [
                "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Oct  9 15:14:53 2021\n\n@author: SHYAM\n\"\"\"\nt = int(input())\nfor tc in range(0,t):\n    n = int(input())\n    print(str(-(n-1))+\" \"+str(n))",
                true
            ],
            [
                "for u in range(int(input())):\n    n=int(input())\n    print(-(n-1),n)\n",
                true
            ],
            [
                "for i in range (int(input())):\n    a=int(input ())\n    print(1-a,a)",
                true
            ],
            [
                "t = int(input())\n\ndef find(n):\n    r=n-1\n    l= -r\n    return(l,n)\n\nfor i in range(t):\n    n = int(input())\n    l,r=find(n)\n    print(l,r)",
                true
            ],
            [
                "for x in range(int(input())):\n    n=int(input());print(-1*(n-1),n)",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nTheofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import bisect\nimport math\nfrom collections import deque\nimport heapq\n\nmod =  1000000007 \nN = 200005\n\ndef mul(a, b):\n    return (a*b)%mod\n\ndef add(a, b):\n    return (a+b) if (a+b<mod) else (a+b)-mod\n\ndef sub(a, b):\n    return (a-b) if (a-b>0) else (a-b)+mod\n\ndef powr(a, b):\n    ans = 1\n    while b>0:\n        if b & 1:\n            ans=mul(ans,a)\n        a = mul(a,a) \n        b//=2\n    return ans\n\ndef inv(n):\n    return powr(n, mod-2)\n\ndef factlist():\n    fact = [1]\n    for i in range(1, N):\n        fact.append(mul(fact[i-1],i))\n    return fact\n\ndef invfactlist(fact):\n    invfact=[0]*N\n    invfact[0]=1\n    invfact[N-1]= inv(fact[N-1])\n    for i in range(N-2, 0, -1):\n        invfact[i]= mul(invfact[i+1],(i+1))\n    \n    return invfact\n\ndef rot(S):\n    return list(zip(*S[::-1]))\n\ndef gcd(a, b):\n    if b==0:\n        return a\n    return gcd(b, a%b)\n\ndef generate():\n    ans = [0]\n    while ans[-1]<1000000000:\n        ans.append(1+ans[-1]*2)\n    return ans\n\ndef main():\n    dp = generate()\n    # print(dp[:10])\n    t = int(input())\n    while t:\n        t-=1\n        n,k  = map(int, input().split())\n        ans = 0\n        while k>0:\n            ind = bisect.bisect_right(dp, k-1)\n            p = powr(n, ind-1)\n            ans = add(ans, p) \n            k-= (dp[ind-1]+1)\n            # print(ans, p)\n        print(ans)\n    \n\n\n\nif __name__ == \"__main__\":\n    main()\n    \n    ",
                true
            ],
            [
                "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom collections import Counter\nfrom collections import defaultdict as dd\n\n# sys.setrecursionlimit(100000000)\n\nflush = lambda: stdout.flush()\nstdstr = lambda: stdin.readline()\nstdint = lambda: int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nstdmap = lambda: map(int, stdstr().split())\nstdarr = lambda: list(map(int, stdstr().split()))\n\nmod = 1000000007\n\n\nfor _ in range(stdint()):\n    n,k = stdmap()\n\n    b = bin(k)[2:]\n\n    b = b[::-1]\n\n    res = 0\n\n    for i in range(len(b)):\n        if(b[i] == \"1\"):\n            res = (res + pow(n, i, mod))%mod\n\n    print(res%mod)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    c = 0\n    ans = 0\n    while k > 0:\n        if k%2:\n            ans = (ans + n**c)%(1000000007)\n        k//=2\n        c+=1\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    ans = 0\n    temp = 2 ** 32\n    m = 32\n    while temp != 0:\n        if temp & k != 0:\n            ans += (n ** m)\n        temp = temp >> 1\n        m -= 1\n    print(ans%(int(1e9)+7))\n",
                true
            ],
            [
                "import math\nt = int(input())\nfor i in range(t):\n    n,k = input().split()\n    n,k = int(n),int(k)\n    s = 0\n    while k!=0 :\n        p = math.log(k)/math.log(2)\n        p = int(p)\n        s += n**p\n        k-= 2**p\n    print(s%int(1e9+7))",
                true
            ],
            [
                "m = 1000000007\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    b = bin(k)[2:][::-1]\n    count = 0\n    a = 0\n    for i in b:\n        if i == \"1\":\n            count = (count + pow(n, a, m)) % m\n        a += 1\n    print(count)",
                true
            ],
            [
                "# Har har mahadev\n# author : @ harsh kanani\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    mod = 10 ** 9 + 7\n    ans = c = 0\n    while k > 0:\n        if k % 2:\n            ans = (ans + n ** c) % mod\n        k //= 2\n        c += 1\n        #print(ans, k, c)\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = map(int, input().split())\n\n    result = int()\n\n    bin_k = bin(k)[2::][::-1]\n\n    for index_of_bin_k in range(len(bin_k)):\n        if bin_k[index_of_bin_k] == \"1\":\n\n            result += n ** index_of_bin_k\n\n    print(result % (10 ** 9 + 7))",
                true
            ],
            [
                "import sys\n# from io import BytesIO\n# from os import read, fstat\n# input = BytesIO(read(0, fstat(0).st_size)).readline\n# import sys\nfrom os import path\n\nif path.exists(\"Input.txt\"):\n    sys.stdin = open(\"Input.txt\", \"r\")\n    sys.stdout = open(\"Output.txt\", \"w\")\ninput = lambda: sys.stdin.readline().rstrip()\n\n# from sys import stdin\n# input = stdin.buffer.readline\n# SOME SHIT\n# map(int, input().split())\n# sys.stdout.write(\"\") ~ |\n\n\n\ndef solve_tc():\n    n, k = map(int, input().split())\n    k = list(bin(k))[:1:-1]\n    sum = 0\n    for i in range(len(k)):\n        if int(k[i]):\n            sum += n**i\n            sum = sum % 1000000007\n    return sum\n\n\nfor _ in range(int(input())):\n    sys.stdout.write(str(solve_tc()) + \"\\n\")",
                true
            ],
            [
                "import math\nmodd = 10**9+7\ndef calc(r,a,b):\n    ans = 0\n    binn = list(reversed(bin(b)[2:].zfill(a)))\n#     print(binn)\n    for i,v in enumerate(binn):\n        if (v=='1'):\n            ans+=r**i\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    r,k = map(int,input().split())\n    km = k\n    # k=k-1\n    k=k-1\n    a = math.log2(k+1)-1\n    a = int(a)\n    b = 2**(a+1)-1\n    a=a+1\n    c = km-b-1\n#     print(km,(a, c))\n    ans = r**a+calc(r,a,c)\n    print(int(ans%modd))\n\n\n        ",
                true
            ],
            [
                "import math\n\ndef bin(n):\n    list1 = []\n    if n == 0:\n        list1.append(0)\n        return list1\n    while n > 1:\n        list1.append(n%2)\n        n = n//2\n        #print(\"A\")\n    list1.append(1)\n    return (list1)\n\nlistout = []\ntest = int(input())\nm = 1000000007\nwhile test>0:\n    n,k = input().split()\n    n = int(n)\n    k= int(k)\n    listk = bin(k)\n    #print(listk)\n    count = 0\n    for x in range(len(listk)):\n        count = count + (int(n**x)*listk[x])\n        #print(count)\n    count = count % m\n    listout.append(int(count))\n    test = test - 1\n\nfor x in listout:\n    print(x)",
                true
            ],
            [
                "from math import sqrt,gcd,ceil,floor,log,factorial\nfrom itertools import permutations,combinations\nfrom collections import Counter, defaultdict\nimport collections,sys,threading\nimport collections,sys,threading\nfrom bisect import *\n#sys.setrecursionlimit(10**9)\n#threading.stack_size(10**8)\n#input=sys.stdin.readline\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().split())\ndef msi(): return map(str,input().split())\ndef li(): return list(mi())\n\ndef foo(n,k):\n    if floor(log(k,2))==ceil(log(k,2)):\n        return (n**floor(log(k,2)))%mod\n        \n    return (n**floor(log(k,2)))%mod + foo(n,k-2**floor(log(k,2)))\n\nt=ii()\nmod=10**9+7\nfor _ in range(t):\n    n,k=mi()\n    print(foo(n,k)%mod)\n    ",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n, k = [int(x) for x in input().split()]\n    a = 0\n    p = 0\n    while k != 0:\n        if k % 2:\n            a = (a + n**p) % (10**9 + 7)\n            k = k // 2\n        else:\n            k = k // 2\n        p += 1\n    print(a)\n\n",
                true
            ],
            [
                "\nt = int(input())\nfor _ in range(t):\n    n, k = [int(i) for i in input().split()]\n    count = 0\n    for i in range(32):\n        if k & 2**i != 0:\n            count += pow(n, i, 10**9 + 7)\n            count %= 10**9 + 7\n    print(count)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    result = 0\n    acc = 1\n    while k > 0:\n        if k&1 == 1:\n            result = (result + acc) % (10**9 + 7)\n        k >>= 1\n        acc = (acc * n) % (10**9 + 7)\n    print(result)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())\n    w=str(bin(k))\n    z=1\n    summ=0\n    for i in range(len(w)):\n        if w[-1-i]=='1':\n            summ+=z\n        z*=n\n    print(summ% (10**9+7))",
                true
            ],
            [
                "t = int(input())\na = []\nfor i in range(0,31):\n    a.append(2**i)\ndef find(k,l,r):\n    while l<=r:\n        x = (l+r)//2\n        if a[x]<=k:\n            l = x+1\n            kq = x\n        else:\n            r = x-1\n    return(a[kq],kq)\ndef doing(k,n):\n    val, neark = find(k,0,30)\n    if val == k:\n         return(n**neark)\n    else:\n        return(n**neark + doing(k-val,n))\n\nfor i in range(t):\n    s = input()\n    n = int(s[0:s.find(' ')])\n    k = int(s[s.find(' ')+1:])\n    print(doing(k,n) % 1000000007)\n    \n    ",
                true
            ],
            [
                "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\ninteractive = False\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\n\nflush = sys.stdout.flush\nif interactive and not testing:\n    input = sys.stdin.readline\nelse:\n    inputData = InputData()\n    input = inputData.input\n\ndef intin():\n    return(int(eval(input())))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(eval(input())))\ndef strin():\n    return eval(input())\ndef lout(l, sep=\"\\n\", toStr=True):\n    print((sep.join(list(map(str, l)) if toStr else l)))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print((args[0] if len(args)==1 else args))\n    if kargs: print([(k,v) for k,v in list(kargs.items())])\ndef ask(q):\n    sys.stdout.write(str(q)+'\\n')\n    flush()\n    return intin()\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\nMOD = 10**9+7\na = [1]\nwhile a[-1] < 10**9:\n    a.append(a[-1]*2)\nfor i in range(1,len(a)):\n    a[i] += a[i-1]\ndout(len(a))\ndef main():\n    n,k = intlin()\n    if k == 1:\n        return 1\n    i = len(a)-1\n    ans = 0\n    while k > 0:\n        if i == 0:\n            if k==1:\n                ans += 1\n            break\n        if not (k>a[i-1] and k<=a[i]):\n            i -= 1\n            continue\n        # dout(i=i,ai=a[i],k=k,num=pow(n,i,MOD))\n        ans += pow(n,i,MOD)\n        k -= a[i-1]+1\n        i -= 1\n    return ans%MOD\n\n\n\n\nanss = []\nfor _ in range(intin()):\n    anss.append(main())\n    # anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print((int(round(time() * 1000))  - start_time))\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    if k == 1:\n        print(k)\n        continue\n\n\n    mod = 10**9 + 7\n\n    s = bin(k)[2:]\n    l = len(s)\n\n    ans = 0\n    for i in range(len(s)-1, -1, -1):\n        if s[i] == '1':\n            ans += pow(n, (l-1)-i, mod)\n\n    print(ans%mod)\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n,k=list(map(int,input().split()))\n    a=bin(k)[2:]\n    z=0\n    for i in range(len(a)):\n        z=(z*n+int(a[i]))%1000000007\n    print(z)",
                true
            ],
            [
                "M=10**9+7\nfor t in range(int(input())):\n    n,k=map(int,input().split())\n    ans=0\n    cnt=-1\n    \n    while k>0:\n        cnt+=1\n        ans+=(n**cnt) if k%2==1 else 0\n        ans%=M\n        k=k//2\n    print(ans)",
                true
            ],
            [
                "import sys\nreadline=sys.stdin.readline\n\nT=int(readline())\nfor _ in range(T):\n    N,K=map(int,readline().split())\n    mod=10**9+7\n    lst=[1]\n    for i in range(35):\n        lst.append(lst[-1]*N%mod)\n    ans=0\n    for i in range(35):\n        if K>>i&1:\n            ans+=lst[i]\n            ans%=mod\n    print(ans)",
                true
            ],
            [
                "mod = 10**9 + 7\ndef modPow(x , y):\n    if y == 0 : return 1\n    if y==1: return x % mod\n    f = modPow(x, y//2) % mod\n    f = (f*f) % mod\n    if y%2 == 0: return f\n    else: return (x*f)%mod\n\n\nfor tc in range(int(input())):\n    n , k = [int(x) for x in input().split()]\n    sum = 0\n    for i in range(31):\n        if 1<<i & k != 0:    \n            sum = (sum + modPow(n, i)) % mod\n    print(sum)",
                true
            ],
            [
                "t = int(input())\nbiggie = 10**9 + 7\nfor _ in range(t):\n    nk = str(input()).split()\n    n = int(nk[0])\n    k = int(nk[1])\n    k_mod_2 = []\n    while k != 0:\n        k_mod_2.append(k%2)\n        k = k // 2\n    number = []\n    for i in range(len(k_mod_2)):\n        number.append(k_mod_2[i]*(n**i))\n    print(sum(number)%biggie)",
                true
            ],
            [
                "t = int(input())\nwhile t:\n    arr = [int(a) for a in input().split()]\n    n,k = arr\n    bi = \"{0:b}\".format(k)\n    j = len(bi)-1\n    ans =0\n    for i in range(len(bi)):\n        if bi[i] == '1':\n            ans += pow(n,j,1000000007)\n        j-=1\n    print(ans % 1000000007)\n    t-=1",
                true
            ],
            [
                "t=int(input())\nmod=1000000007\nfor _ in range(t):\n    n,k=map(int,input().split())\n    radix2=[]\n    while(True):\n        if(k==1): radix2.append(1);break\n        temp=k%2\n        radix2.append(temp)\n        k=k//2\n    l=len(radix2);pown=[1];ans=0\n    for i in range(1,l):\n        pown.append((pown[i-1]*n)%mod)\n        if(radix2[i]): ans+=pown[i]\n    if(radix2[0]): ans+=1\n    print(ans%mod)",
                true
            ],
            [
                "MOD = 1000000007\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    ans = 0\n    for digit in bin(k):\n        ans *= n\n        if digit == '1':\n            ans += 1\n        ans %= MOD\n    print(ans)\n",
                true
            ],
            [
                "\nmod = (10**9) +7\ndef solve(st,base):\n    start=0\n    ans=0\n    for i in st[::-1]:\n        if(i=='1'):\n            ans+= (base**start)%mod\n        start+=1\n    return ans%mod\n\n\n\ndef fun(ls):\n    base , k = ls\n    summ =0\n    count=-1\n    if(k==1):\n        print(1)\n        return\n    while(summ<k):\n        count+=1\n        summ+= (2**count)\n        \n    last = 2**count\n    if(summ==k):\n        last_add = 2**(count)\n        current = summ - last_add\n        in_bin = k-current - 1\n        bn = bin(in_bin)[2:]\n        st = '1'+ (count-len(bn))*\"0\"+bn\n        print(solve(st,base))\n    else:\n        last_add = 2**(count)\n        current = summ - last_add\n        in_bin = k-current - 1\n        bn = bin(in_bin)[2:]\n        st = '1'+ (count-len(bn))*\"0\"+bn\n        print(solve(st,base))\n\n\n\n\n\nT = int(input())\n# T=1\nfor i in range(T):\n    # st= input()\n    # n = int(input())\n    ls = list(map(int, input().split()))\n    # ls = list(map(int, input().split()))\n    fun(ls)\n\n\n",
                true
            ],
            [
                "def main():\n    tc=1\n    tc = int(input())\n    for _ in range(tc):\n        n,k=map(int,input().split())\n        n = int(n)\n        cnt=0\n        s=bin(k).replace(\"0b\",\"\")\n        s=s[::-1]+\"0\"*32\n        for i in range(32):\n            if s[i]==\"1\":\n                cnt = (cnt + pow(n, i)) % (10**9+7)\n        print(cnt)\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "mod=10**9+7\nfor _ in range(int(input())):\n    k,n=map(int,input().split())\n    ans=0\n    s=bin(n)\n    n=len(s)\n    x=1\n    for i in range(n-1,1,-1):\n        ans=(ans+int(s[i])*x)%mod\n        x=(x*k)%mod\n    print(ans)\n    ",
                true
            ],
            [
                "def power(n,y,m=1000000007):\n   n %= m\n   res = 1\n   while(y > 0):\n      if(y & 1):\n         res = res * n % m\n      n = n * n % m\n      y >>= 1\n   \n   return res\nt = int(input())\nfor tc in range(t):\n   n,k = map(int,input().split())\n   s = bin(k)\n   s = s[2:]\n   a = 32-len(s)\n   s='0'*(a)+s\n   ans = 0\n   s = s[::-1]\n   for i in range(32):\n      if(s[i]=='1'):\n         ans=(ans+power(n, i))%1000000007\n   print(ans)",
                true
            ],
            [
                "#bismilleh\ndef getlistint(): return(list(map(int,stdin.readline().split())))\ndef getmapint(): return(map(int,stdin.readline().split()))\ndef getliststr(): return(list(stdin.readline().split()))\ndef getint(): return(int(stdin.readline().strip()))\ndef getstr(): return(stdin.readline().strip())\ndef pr(s): stdout.write(str(s)+\"\\n\")\ndef prlist(l): stdout.write(\" \".join(list(map(str,l)))+\"\\n\")\n\nfrom sys import stdin,stdout\nfor _ in range(getint()):\n    n,k=getmapint()\n    b=bin(k)[2:]\n    s=0\n    for i in range(len(b)):\n        if b[i]==\"1\":\n            s+=n**(len(b)-1-i)\n    pr(s%(10**9+7))\n",
                true
            ],
            [
                "#DaRk DeveLopeR\nimport sys\n\n\n#taking input as string \ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\ninp = lambda: list(map(int,sys.stdin.readline().rstrip(\"\\r\\n\").split()))\nmod = 10**9+7; Mod = 998244353; INF = float('inf')\n#______________________________________________________________________________________________________\nimport math\nfrom bisect import *\nfrom heapq import *\nfrom collections import defaultdict as dd\nfrom collections import OrderedDict as odict\nfrom collections import Counter as cc\nfrom collections import deque\nfrom itertools import groupby\nsys.setrecursionlimit(20*20*20*20+10) #this is must for dfs\n\n\n\ndef solve():\n\n  n,k=map(int,input().split())\n\n  s=bin(k)[2:]\n  i=0\n  t=len(s)\n  l=t\n  ans=0\n\n  while t:\n\n      if s[l-i-1]==\"1\":\n          ans+=pow(n,i)\n      ans%=mod\n      i+=1\n      t-=1\n  print(ans)\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\ndef main():\n    global tt\n    if not ONLINE_JUDGE:\n        sys.stdin = open(\"input.txt\",\"r\")\n        sys.stdout = open(\"output.txt\",\"w\")\n    t = 1\n    t = takein()\n    #t = 1\n    for tt in range(1,t + 1):\n        solve()\n    if not ONLINE_JUDGE:\n        print(\"Time Elapsed :\",time.time() - start_time,\"seconds\")\n        sys.stdout.close()\n\n#---------------------- USER DEFINED INPUT FUNCTIONS ----------------------#\ndef takein():\n    return (int(sys.stdin.readline().rstrip(\"\\r\\n\")))\n\n\n# input the string\n\ndef takesr():\n    return (sys.stdin.readline().rstrip(\"\\r\\n\"))\n\n\n# input int array\ndef takeiar():\n    return (list(map(int, sys.stdin.readline().rstrip(\"\\r\\n\").split())))\n\n\n# input string array\ndef takesar():\n    return (list(map(str, sys.stdin.readline().rstrip(\"\\r\\n\").split())))\n\n\n# innut values for the diffrent variables\ndef takeivr():\n    return (map(int, sys.stdin.readline().rstrip(\"\\r\\n\").split()))\n\n\ndef takesvr():\n    return (map(str, sys.stdin.readline().rstrip(\"\\r\\n\").split()))\n\n \n \n#------------------ USER DEFINED PROGRAMMING FUNCTIONS ------------------#\n\ndef PrimeChecker(a):  \n    # Checking that given number is more than 1  \n    if a > 1:  \n        # Iterating over the given number with for loop  \n        for j in range(2, int(a/2) + 1):  \n            # If the given number is divisible or not  \n            if (a % j) == 0:  \n                return False  \n                break  \n        # Else it is a prime number  \n        else:  \n            return True  \n    # If the given number is 1  \n    else:  \n        return False \ndef ispalindrome(s):\n\n    return s==s[::-1]\n \ndef invert(bit_s):\n\n\n      \n    # convert binary string \n    # into integer\n    temp = int(bit_s, 2)\n      \n    # applying Ex-or operator\n    # b/w 10 and 31\n    inverse_s = temp ^ (2 ** (len(bit_s) + 1) - 1)\n      \n    # convert the integer result \n    # into binary result and then \n    # slicing of the '0b1' \n    # binary indicator\n    rslt = bin(inverse_s)[3 : ]\n\n    return str(rslt)       \n\ndef counter(a):\n    q = [0] * max(a)\n    for i in range(len(a)):\n        q[a[i] - 1] = q[a[i] - 1] + 1\n    return(q)\n \ndef counter_elements(a):\n    q = dict()\n    for i in range(len(a)):\n        if a[i] not in q:\n            q[a[i]] = 0\n        q[a[i]] = q[a[i]] + 1\n    return(q)\n \ndef string_counter(a):\n    q = [0] * 26\n    for i in range(len(a)):\n        q[ord(a[i]) - 97] = q[ord(a[i]) - 97] + 1\n    return(q)\n \ndef factorial(n,m = 1000000007):\n    q = 1\n    for i in range(n):\n        q = (q * (i + 1)) % m\n    return(q)\n \ndef factors(n):\n    q = []\n    for i in range(1,int(n ** 0.5) + 1):\n        if n % i == 0: q.append(i); q.append(n // i)\n    return(list(sorted(list(set(q)))))\n \ndef prime_factors(n):\n    q = []\n    while n % 2 == 0: q.append(2); n = n // 2\n    for i in range(3,int(n ** 0.5) + 1,2):\n        while n % i == 0: q.append(i); n = n // i\n    if n > 2: q.append(n)\n    return(list(sorted(q)))\n \ndef transpose(a):\n    n,m = len(a),len(a[0])\n    b = [[0] * n for i in range(m)]\n    for i in range(m): \n        for j in range(n): \n            b[i][j] = a[j][i]\n    return(b)\n \ndef power_two(x):\n    return (x and (not(x & (x - 1))))\n \ndef ceil(a, b):\n    return -(-a // b)\n\n\n\ndef seive(n):\n    a = [1]\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p ** 2,n + 1, p): \n                prime[i] = False\n        p = p + 1\n    for p in range(2,n + 1): \n        if prime[p]: \n            a.append(p)\n    return(a)\n\n \ndef pref(li):\n    pref_sum = [0]\n    for i in li:\n        pref_sum.append(pref_sum[-1]+i)\n    return pref_sum\n \ndef kadane(x):  # maximum sum contiguous subarray\n    sum_so_far = 0\n    current_sum = 0\n    for i in x:\n        current_sum += i\n        if current_sum < 0:\n            current_sum = 0\n        else:\n            sum_so_far = max(sum_so_far, current_sum)\n    return sum_so_far\n\ndef binary_search(li, val):\n    # print(lb, ub, li)\n    ans = -1\n    lb = 0\n    ub = len(li)-1\n    while (lb <= ub):\n        mid = (lb+ub) // 2\n        # print('mid is',mid, li[mid])\n        if li[mid] > val:\n            ub = mid-1\n        elif val > li[mid]:\n            lb = mid+1\n        else:\n            ans = mid  # return index\n            break\n    return ans\n\n\n \ndef upper_bound(li, num):\n    answer = -1\n    start = 0\n    end = len(li)-1\n \n    while (start <= end):\n        middle = (end+start) // 2\n \n        if li[middle] <= num:\n            answer = middle\n            start = middle+1\n \n        else:\n            end = middle-1\n    return answer  # max index where x is not greater than num\n\n\ndef lower_bound(li, num):\n    answer = -1\n    start = 0\n    end = len(li)-1\n \n    while (start <= end):\n        middle = (end+start) // 2\n        if li[middle] >= num:\n            answer = middle\n            end = middle-1\n        else:\n            start = middle+1\n    return answer  # min index where x is not less than num\n#-----------------------------------------------------------------------#\nONLINE_JUDGE = __debug__\nif ONLINE_JUDGE:\n    input = sys.stdin.readline\n    \nmain()",
                true
            ],
            [
                "def poww(a,b):\n    res = 0\n    sch = 1\n    for i in range(len(a)-1,-1,-1):\n        if a[i] == '1':\n            res += sch\n        sch *= b\n        sch %= 1_000_000_007\n    return res % 1_000_000_007\n\n\n\na = int(input())\nfor i in range(a):\n    n,k = map(int,input().split())\n    k = bin(k)[2:]\n    #print(n,k)\n    print(poww(k,int(n)))\n",
                true
            ],
            [
                "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Oct 15 16:55:24 2021\n\n@author: ThanhNT\n\"\"\"\n# b\u01b0\u1edbc 1 chuy\u1ec3n s\u1ed1 k v\u1ec1 nh\u1ecb ph\u00e2n\n# b\u01b0\u1edbc 2 t\u00ednh t\u1ed5ng theo c\u00f4ng th\u1ee9c\nmax_value = 10**9 + 7\ndef special_number(n, k):    \n    b = bin(k).replace(\"0b\", \"\")        \n    #print(b)\n    \n    i = len(b)\n    result = 0\n    for index in range (len(b)):\n        i -=1\n        result = result + int(b[index])*(n**i)\n        index +=1\n        if result > max_value:\n            result = result % max_value\n    return result\n\n\nif __name__ == \"__main__\":\n\n    t = int(input())\n    for _ in range(0, t):\n        n, k = map(int,input().split(\" \"))\n        print (special_number(n, k))",
                true
            ],
            [
                "def solve():\n    n, k = map(int, input().split())\n    s = bin(k)\n    s = s[2:]\n    ans = 0\n    md = 1000000007\n    cnt = 0 \n    for i in range(len(s) - 1, -1, -1):\n        ans = (ans + int(s[i]) * pow(n, cnt)) % md\n        cnt += 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
                true
            ],
            [
                "# import sys\n\nMOD: int = int(1e9 + 7)\n\n\ndef main() -> None:\n    # inF = open(\".\\\\_input.txt\", \"r\")\n    # outF = open(\".\\\\_output.txt\", \"w\")\n    # sys.stdout = outF\n    # sys.stdin = inF\n    t: int = int(input())\n    for i in range(t):\n        run()\n    # inF.close()\n    # outF.close()\n\n\ndef run() -> None:\n    n, k = map(int, input().split())\n    print(sum(pow(n, i, MOD) if (1 << i) & k else 0 for i in range(32)) % MOD)\n\n\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    b = bin(k)[2:]\n    a = 0\n    p = 0\n    for c in b[::-1]:\n        if c == '1':\n            a += n**p\n            a %= 1000000007\n        p += 1\n    print(a)",
                true
            ],
            [
                "def answer(n, k):\n    k = bin(k)[2:]\n    l = len(k) - 1\n    s = 0\n    for j,i in enumerate(k):\n        s += n ** (l - j) * int(i)\n    print(s % M)\n\nM = 10 ** 9 + 7\n\nfor _ in range(int(input())):\n    n, k = [int(x) for x in input().split()]\n    answer(n, k)\n    ",
                true
            ],
            [
                "from math import log2\ndef solve(n,k):\n    x=int(log2(k))\n    ans=n**x\n    k-=2**x\n    if k:\n        return(ans+solve(n,k))\n    else:\n        return(ans)\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    print(solve(n,k)%1000000007)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    p=10**9+7\n    bink=str(bin(k))[::-1]\n    ans=0\n    for i in range(len(bink)):\n        if bink[i]==\"1\":\n            ans+=(n**(i))%p\n    print(ans%p)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nmod = 10 ** 9 + 7\n\nfor _ in range(int(input())):\n  n, k = map(int, input().split())\n  res = 0\n  for i in range(30, -1, -1):\n    if k & (1 << i):\n      k ^= (1 << i)\n      res += pow(n, i, mod)\n      res %= mod\n  print(res)",
                true
            ],
            [
                "from collections import deque\nimport bisect\nimport sys\ninput = sys.stdin.readline\n\nM = (10**9)+7\n#Fast modular exponentiation\ndef power(x,y):\n    ans = 1\n    while(y>0):\n        if(y%2 == 1):\n            ans = (ans*x)%M\n        y = y //2\n        x = (x*x)%M\n    return ans%M\n\n\nfor _ in range(int(input())):\n    n,k = map(int,input().split())\n    s = bin(k)[2:]\n    i = len(s)-1\n    ans = 0\n    cnt = 0\n    while i > -1:\n        if s[i] == \"1\":\n            ans = (ans+power(n,cnt))%M\n\n        cnt += 1\n        i -= 1\n\n    sys.stdout.write(str(ans)+\"\\n\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    total = 0\n    mod = 1000000007\n\n    num = bin(k)[2:][::-1]\n\n    for i in range(len(num)):\n        if num[i] == '1':\n            total += n**i\n    print(total % mod)",
                true
            ],
            [
                "ESP = 1000000007\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    tec = 0\n    for i in bin(k)[2:]:\n        tec *= n\n        if i == '1':\n            tec += 1\n        tec %= ESP\n    print(tec)",
                true
            ],
            [
                "mod = 10 ** 9 + 7\n\n\ndef func(a, b):\n    result = 1\n    for i in range(0, b):\n        result = (result * a) % mod\n    return result\n\n\nt = int(input())\nwhile t:\n    n, k = map(int, input().split())\n    k = bin(k)\n    k = str(k)\n    res = 0\n    k = k[2:]\n    g = len(k)\n    for i in range(g - 1, -1, -1):\n        if k[i] == '0':\n            continue\n        else:\n            res = (res + func(n, (g - i - 1))) % mod\n    print(res)\n    t -= 1\n",
                true
            ],
            [
                "# RANK1ZEN; 3966 PEAK NA FLEX SUPPORT; Battlenet ID -> Knuckles#11791\n# region -----------------------------------------------------------------------------------------|\n# MNNNNNNNNNNNNNNNNMNho///++//+oooooossssssssssssysssooyyyyyso+//++//shNNNNNNNNNNNNNM\n# MNNNNNNNNNNNNNNMNy////////++++oooooooooossssssssoosssssysyyysoossss+/oshNNNNNNNNNNM\n# MNNNNNNNNNNNNMNs///////+oooooo++++oooooooooooso+ossssssssssssssssssss++soymMNNNNNNM\n# MNNNNNNNNNNNMd/:-//+//shNNmhsoo+++++++++ooooo++oooooooooossssssssssssso+ooosmNNNNNM\n# MNNNNNNNNNNMh::://+/+ymMMMMmhsoso+++++++++o+/+ooooooooooooooooooooossso++o+++hMNNNM\n# MNNNNNNNNNMy//-:/+/osmMMMMNhssyshNdssoooo++:++++++++++oooooooooooooooooo++-++/sMMNM\n# MNNNNNNNNMd:/:///+/ohNMMMNhsohyyNMNNNdhhs+:++++++++++++++++++++ooooooooo/+.o+:/+NNM\n# MNNNNNNNMm/:/-///++ooshmmhs+sysdMMMMNdMMd/+++++ooo++++++++++++++++++++++::-++/:/sNM\n# MNNNNNNMN/://-+++++++++oo+//yosNMNMNmNMNo/o/oshNmhyoo+++++++++++++++++++/-/+++:/:sM\n# MNNNNNMNo://-/+++++:/+++++//++osyhmdhMNs/o/+shMMMMmsooooyo++/+++++++++++://+++://oM\n# MNNNNNMs:///:/++++//++-/+/:++++++ooooyo++o-oyNNMMmysooymmso/+shysyyysooo+/++o+/-s+M\n# MNNNNMd:///+:/++++-++:`++:/++++//++++++:+-/oyhsmys+oohmyo++:sNMdmMMNNysy+-ohNs+-myM\n# MNNNMN::///+-:+++:.+/``++/++++++++++++:+/`+++oo/:/++oyo+oy+odNddMMMMmyyh:-sdMh/odyN\n# MNNNNo:///++-:+o/`::```++/+++++++++++//+-.o++:-:/++/+/+ymo/+ossyyhdhssy+.:ohhd/sy+M\n# MMNMh-///+++--oo:`/````++-+++++++++++-o/`/+:.:/+++//+hmNo/++++++ooooooo-`/+o++/++-M\n# MMMN/:///+++-.o/````-s:+/:++++++++++/++`.:.-/++++/+sdmmo/+++++++++++++: -+++++////M\n# MMMh:///++++-`+:```/dN+/::++++++++++++:``.+ooo++ohNMNm++oooooooo+++++o+ :++++/-//oM\n# MMd:/-/+++++-`/.``:hmm//./+++++++++o/o..:osoooymmdddmoooooooooooooo+oms.+++++////+M\n# MMo// -+++++:`.`` dNddo-.:+++++++++++--/soo:.--::ymh+ssssssssssooo+sNN/++++++++/-dM\n# Md/// `/+++o/```` dMddN.-:++++++++++/`/o/+:``-:-`/ooyssssssssssssoodmMo++++++++//NM\n# M/:// `-+oooo.``` oMNMM+--/+++++++++/:yd-``.`-+o+hoyyoosyyyyyyys:+o+o++o//+++++/hMM\n# m++:/```:oooo/````.dmNNm/-/+++++++//+dhy::ohs:/hysyosyyyyyyyyys:----:-/o/ooo++/-mMM\n# s:++//```/oooo-  ``yNmdm:-/++++++////MMNmdhoys+ssssyyyyyysoysss:-.odd/o+/+oo++-+MMM\n# s`:++/````:oooo. ```:hNNh-/++++++//:hNNNMMNMdsossyyyyyyss+osdM/o/:yNyoo///ooo/.MMNM\n# d `-++/-```:+oo+-`````-+ds/++++++//-mMMMNNhs+syyysysyys+osdMMNyoshdh/+/o:ooo+.+MMNM\n# M/` `-/+/-``.:ooo-```````s:++++++++/mNdhsoossssyyhyo/-+hmMMMMNNNNNNo//+.:oo++ oMMNM\n# MMo``:..-//-.`-+oo:.`````/+++++++++:ooossyhyyyo+:-:ohNMmMMMMMNmNNNh:/:` :oo/: mMMNM\n# MMMh.oMh+``.-:-.-/o+-````mh/+++++++:++++/:--:+syhmMMMMMNMMMMMMMMMo-.//``+oo:`-MMNNM\n# MMMMh-omNd+````..`./+/.`hMMs+++++++/dmmmmNMMNNMMMMMMMMMMMMMMMMms:`` :/..+oo: yMNNNM\n# MNNNMN/``..``````````.-.+dNy-oooooo/o+s++sNMMNmNMMmmNMMMMMMMmo-   ``-/.-oo+- yMNNNM\n# MNNNNMMNdy-``````..``````-+o/+ooooo/++///:`:yMMMMMMMMMMMMds/`/++/````o--o++- MMNNNM\n# MMNNMMMMMN:`........-:+oyssoo+ssssss:ooo+/+:`:mMMMMMNho/.````+ooohd+//:+ooo-/MMMMMM\n# MMMMMMMMMMs.-...-.-osyyyyysdMhshhhhhossssssdh-.ss+/-.``----.sdhy+mMMMsosssy:sMMMMMM\n# endregion --------------------------------------------------------------------------------------|\n# region -----------------------------------------------------------------------------------------|\nclass Comba:\n    def __init__(self, mod):\n        self.fact = array.array(\"i\", [0] * MX); self.fact[0] = 1\n        self.fact_inv = array.array(\"i\", [0] * MX)\n        self.mod = mod\n\n        for i in range(1, MX):\n            self.fact[i] = (self.fact[i - 1] * i) % self.mod\n\n        self.fact_inv[MX - 1] = pow(self.fact[MX - 1], self.mod - 2, self.mod)\n        for i in range(MX - 2, -1, -1):\n            self.fact_inv[i] = (self.fact_inv[i + 1] * (i + 1)) % self.mod\n\n    def ncr(self, n, r):\n        if r > n or n < 0 or r < 0: return 0\n        return (self.fact[n] * self.fact_inv[r] % self.mod) * self.fact_inv[n - r] % self.mod\n    \n    def npr(self, n, r):\n        if r > n or n < 0 or r < 0: return 0\n        return self.fact[n] * self.fact_inv[n - r] % self.mod\n\ndef lcm(a, b): return a * b // gcd(a, b)\n\ndef rw_file():\n    sys.stdin = open(r\"\", \"r\")\n    sys.stdout = open(r\"\", \"w\")\n\n# queries -> stdin.buffer.readline\ndef re(data=str): return data(sys.stdin.readline().rstrip())\ndef mp(data=str): return map(data, sys.stdin.readline().split())\n\nimport sys, array\nfrom bisect import bisect_left, bisect_right, insort_left\nfrom math import ceil, floor, log, sqrt, gcd\nfrom collections import deque, defaultdict, Counter\nfrom heapq import heappush, heappop, heapify\n\nmod, mod9, nl, MX = 1000000007, 998244353, \"\\n\", 200003\n# endregion --------------------------------------------------------------------------------------|\n\ndef solve(tc):\n    n, k = mp(int)\n    ans = 0\n    for m in range(43):\n        if (1 << m) & k: \n            ans = (ans + n ** m) % mod\n    \n    print(ans)\n    \n\n\n    return None\n \ndef main():\n    # rw_file()\n    tests = 1; tests = re(int)\n    for case in range(1, tests + 1): solve(case)\n\nif __name__ == \"__main__\":\n    main()\n",
                true
            ],
            [
                "MOD = 10 ** 9 + 7\n\nfor _ in range(int(input())):\n    k, n = map(int, input().split())\n    x = bin(n)[2:][::-1]\n\n    s = 0\n    for i in range(len(x)):\n        if x[i] == '1':\n            s = (s + pow(k, i, MOD)) % MOD\n\n    print(s)",
                true
            ],
            [
                "mod=(10**9)+7\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    s=bin(k)[2:]\n    su=0\n    lens=len(s)\n    for i in range(lens):\n        if s[i]==\"1\":\n            su+=n**(lens-i-1)\n    print(su%(mod))\n    ",
                true
            ],
            [
                "import sys\ndef hp(n):\n    while n%2==0:\n        n=n//2\n    if n==1:\n        return True\n    else:\n        return False\ntry:\n    m=10**9+7\n    def main():\n        n,k=map(int,input().split())\n        ans=0\n        x=bin(k)[2:][::-1]\n        p=1\n        ans=0\n       \n        for si in x:\n            ans+=((p)*int(si))\n            p=(p*n)\n\n\n        print(int(ans%m))\n\n        \n        \n        \n\n\n\nexcept:\n    pass\n\nfor _ in range(int(input())):\n     main()\n",
                true
            ],
            [
                "'''\n    Auther: ghoshashis545 Ashis Ghosh\n    College: Jalpaiguri Govt Enggineering College\n\n'''\nfrom os import path\nfrom io import BytesIO, IOBase\nimport sys\nfrom heapq import heappush,heappop\nfrom functools import cmp_to_key as ctk\nfrom collections import deque,Counter,defaultdict as dd \nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil,sqrt,log,gcd\ndef ii():return int(input())\ndef si():return input().rstrip()\ndef mi():return map(int,input().split())\ndef li():return list(mi())\nabc='abcdefghijklmnopqrstuvwxyz'\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\ndef bo(i):\n    return ord(i)-ord('0')\n\nfile = 1\ndef ceil(a,b):\n    return (a+b-1)//b\n\n\n\n\ndef solve():\n\n    \n    for _ in range(1,ii()+1):\n        n,k = mi()\n        tot = 0\n        p = 1\n        for i in range(31):\n            if (k>>i)&1:\n                tot += p\n                tot %= mod\n            p *= n\n            p %= mod\n        print(tot)\n        \n        \n\n\n\n\n\n\n\n            \n\n\n\n\n\n    \n        \n\n\n\n\n\n\n\n\n        \nif __name__ ==\"__main__\":\n\n    if(file):\n    \n       if path.exists('input.txt'):\n           sys.stdin=open('input.txt', 'r')\n           sys.stdout=open('output.txt','w')\n       else:\n           input=sys.stdin.readline\n    solve()\n",
                true
            ],
            [
                "1,2,4,8,16\n1,2,3,4,5,6,7,8,9,10\n\n1,3,9,27\n1,3,4,9,10,12,13,27\n\ndef log2(k):\n    return k.bit_length() - 1\n\ndef calc(n,k):\n    if k==0:\n        return 0\n    if k==1:\n        return 1\n    start=log2(k)\n    #print(start)\n    return calc(n, k-2**start)+n**start\n\nT=int(input())\nfor t in range(T):\n    n,k=map(int,input().split(' '))\n    #print('\\n')\n    print(calc(n, k)%(10**9+7))",
                true
            ],
            [
                "\nfrom math import log2\nM=10**9+7\nfor _ in range(int(input())):\n    n,k=map(int, input().split())\n    ans=0\n    while k>=1:\n        ans=(ans+n**(int(log2(k))))%M\n        k-=2**(int(log2(k)))\n    print(ans)\n",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n\n    n, k = map(int, input().split())\n\n    x = bin(k)[2:]\n\n    P = 1000000007\n\n    x = list(reversed(x))\n\n    l = len(x)\n\n    ans = 0\n\n    for i in range(l):\n        if x[i]=='1':\n            ans = ans%P + ((n%P)**i)%P\n    \n    print(ans%P)\n",
                true
            ],
            [
                "t = int(input())\nMOD = 10**9 + 7\nfor _ in range(t):\n    n, c = map(int, input().split())\n    s = 0\n    count = 0\n    while c:\n        if c & 1:\n            s += n**count\n\n        count += 1\n        c >>= 1\n\n    print(s%MOD)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    c = 1\n    pov = 0\n    arr = []\n    while k > 0:\n        if c  == k:\n            k -= c\n            arr.append(pov)\n        elif c * 2 > k:\n            k -= c\n            arr.append(pov)\n            c = 1\n            pov = 0\n        else:\n            c *= 2\n            pov += 1\n    a = 0\n    for ind in range(len(arr)):\n        a = (a + (n ** arr[ind])) % int(1e9+7)\n    print(a)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    num,index = map(int,input().split())\n    temp = 1\n    res = 0\n    while(index>0):\n        lol = index%2\n        index = index//2\n        if lol == 1:\n            res+=temp\n        temp*=num\n        \n    print(res%1000000007)",
                true
            ],
            [
                "import sys\nimport math\nfrom collections import Counter\ninput = sys.stdin.readline\nN = int(1e9 + 7)\n#use input().strip() \n\n\nfor _ in range(int(input().strip())):\n    n, k = [int(j) for j in input().strip().split()]\n    b = [0 for i in range(50)]\n    count = 0\n    t = 1\n    a = []\n    while(k):\n        if (k % 2 == 0):\n            k //= 2\n            count += 1\n        elif (k % 2 == 1):\n            k -= 1\n            b[count] += 1\n            if (b[count] > 1):\n                t = 0\n        else:\n            print(-1)\n            t = 0\n        if t != 0:\n            for i in range(50):\n                if (b[i] > 0):\n                    a.append(i)\n    a = list(set(a))\n    ans = 0\n    for i in a:\n        ans += pow(n, i, N)\n    print(ans % N)",
                true
            ],
            [
                "MOD = 10**9+7\nfor _ in range(int(input())):\n    n, k = [int(x) for x in input().split()]\n    r = 0\n    # for j in range(32):\n    #     if (k&(1<<j)):\n    #         ans = (ans+p)%MOD\n    #     p *= n\n    #     p %= MOD\n    s = 0\n    count = 0\n    while k:\n        if k & 1:\n            s += n ** count\n\n        count += 1\n        k >>= 1\n    print(s % MOD)",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect, heapq\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nmod = int(1e9+7)\n\ndef qmod(a, b):\n    res = 1\n    while b:\n        if b&1:\n            res = (res*a)%mod\n        b >>= 1\n        a = (a*a)%mod\n    return res\n\ndef inv(a):\n    return qmod(a, mod-2)\n\n\ndef my_main():\n    kase = inp()\n    pans = []\n    for ka in range(kase):\n        # print 'Case #%d: ' % (ka+1),\n        n, k = inp()\n        ans = [0]\n        def kth(kk):\n            if not kk:\n                return\n            if kk==1:\n                ans[0] += 1\n                return\n            per = 1\n            now = 1\n            for i in range(2, 40):\n                if per*2 > kk:\n                    ans[0] += now\n                    kth(kk - per)\n                    break\n                per *= 2\n                now *= n\n                now %= mod\n        kth(k)\n        pans.append(str(ans[0]%mod))\n    print('\\n'.join(pans))\n\nmy_main()\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, k = [int(v) for v in input().split()]\n    ans, div = 0, 10 ** 9 + 7\n    s = bin(k).replace(\"0b\", \"\")\n    for i, c in enumerate(s):\n        if c == \"1\":\n            ans += n ** (len(s) - i - 1) % div\n            ans %= div\n    print(ans)\n",
                true
            ],
            [
                "mod = 10**9 + 7\n\nt = int(input())\ncp = [1]\nfor _ in range(30):\n    cp.append(cp[-1] * 2)\nfor _ in range(t):\n    n, k = map(int, input().split())\n    pw = [1]\n    ans = 0\n    for _ in range(30):\n        pw.append((pw[-1] * n) % mod)\n    for i in range(30, -1, -1):\n        if cp[i] <= k:\n            #print(cp[i])\n            k -= cp[i]\n            ans += pw[i]\n    print(ans % mod)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n , k = map(int , input().split())\n    k = list(bin(k)[2:])\n    k.reverse()\n    ans = 0\n    for i in range(len(k)):\n        ans += (int(k[i]) * (n**i))%((10**9)+7)\n    print(ans%((10**9)+7))",
                true
            ],
            [
                "#!/usr/bin/env python3\nimport sys\nimport getpass  # not available on codechef\nimport math, random\nimport functools, itertools, collections, heapq, bisect\nfrom collections import Counter, defaultdict, deque\ninput = sys.stdin.readline  # to read input quickly\n\n# available on Google, AtCoder Python3, not available on Codeforces\n# import numpy as np\n# import scipy\n\nM9 = 10**9 + 7  # 998244353\nyes, no = \"YES\", \"NO\"\n# d4 = [(1,0),(0,1),(-1,0),(0,-1)]\n# d8 = [(1,0),(1,1),(0,1),(-1,1),(-1,0),(-1,-1),(0,-1),(1,-1)]\n# d6 = [(2,0),(1,1),(-1,1),(-2,0),(-1,-1),(1,-1)]  # hexagonal layout\nMAXINT = sys.maxsize\n\n# if testing locally, print to terminal with a different color\nOFFLINE_TEST = getpass.getuser() == \"hkmac\"\n# OFFLINE_TEST = False  # codechef does not allow getpass\ndef log(*args):\n    if OFFLINE_TEST:\n        print('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n\ndef solve(*args):\n    # screen input\n    if OFFLINE_TEST:\n        log(\"----- solving ------\")\n        log(*args)\n        log(\"----- ------- ------\")\n    return solve_(*args)\n\ndef read_matrix(rows):\n    return [list(map(int,input().split())) for _ in range(rows)]\n\ndef read_strings(rows):\n    return [input().strip() for _ in range(rows)]\n\ndef minus_one(arr):\n    return [x-1 for x in arr]\n\ndef minus_one_matrix(mrr):\n    return [[x-1 for x in row] for row in mrr]\n\n# ---------------------------- template ends here ----------------------------\n\n\ndef solve_(n,k):\n    # your solution here\n\n    # k in base n\n    # k -= 1\n    binarr = bin(k)[2:]\n\n    # log(binarr)\n\n    res = 0\n    for c in binarr:\n        res *= n\n        if c == \"1\":\n            res += 1\n        res = res%M9\n        # log(res)\n\n    return res\n\n\n# for case_num in [0]:  # no loop over test case\n# for case_num in range(100):  # if the number of test cases is specified\nfor case_num in range(int(input())):\n\n    # read line as an integer\n    # k = int(input())\n\n    # read line as a string\n    # srr = input().strip()\n\n    # read one line and parse each word as a string\n    # lst = input().split()\n\n    # read one line and parse each word as an integer\n    n,k = list(map(int,input().split()))\n    # lst = list(map(int,input().split()))\n    # lst = minus_one(lst)\n\n    # read multiple rows\n    # arr = read_strings(k)  # and return as a list of str\n    # mrr = read_matrix(k)  # and return as a list of list of int\n    # mrr = minus_one_matrix(mrr)\n\n    res = solve(n,k)  # include input here\n\n    # print length if applicable\n    # print(len(res))\n\n    # parse result\n    # res = \" \".join(str(x) for x in res)\n    # res = \"\\n\".join(str(x) for x in res)\n    # res = \"\\n\".join(\" \".join(str(x) for x in row) for row in res)\n\n    # print result\n    # print(\"Case #{}: {}\".format(case_num+1, res))   # Google and Facebook - case number required\n\n    print(res)\n",
                true
            ],
            [
                "# https://codeforces.com/contest/1594/problem/B\n\nn = int(input())\nfor _ in range(n):\n    base, k = map(int, input().split())\n    answer = 0\n    for i in range(30):\n        if k >> i == 0: break\n        answer += ((k >> i) % 2) * base ** i\n    answer %= 10**9+7\n    print(answer)\n",
                true
            ],
            [
                "# https://codeforces.com/contest/1594/problem/B\n\nn = int(input())\nfor _ in range(n):\n    base, k = map(int, input().split())\n    bin_k = bin(k)[2:]\n    len_bin_k = len(bin_k)\n    answer = 0\n    for i in range(len_bin_k):\n        answer += base ** (len_bin_k - i - 1) * int(bin_k[i])\n    answer %= 10**9 + 7\n    print(answer)\n",
                true
            ],
            [
                "MOD = 1000000007\nT = int(input())\nfor _ in range(T):\n  N, K = map(int, input().split())\n  B = bin(K)[2:][::-1]\n  res = 0\n  pow = 1\n  for i, w in enumerate(B):\n    if w == '1':\n      res += pow\n      res %= MOD\n    pow *= N\n    pow %= MOD\n  print(res)",
                true
            ],
            [
                "t = int(input())\nmod = 10**9 + 7\nfor i in range(t):\n    n, k = tuple(input().split())\n    solve = 0\n    bits = reversed(bin(int(k))[2:])\n    for k, v in enumerate(bits):\n        if v == \"1\":\n            solve += (int(n)**k)\n    print(solve%mod)",
                true
            ],
            [
                "import math\ndef solve(n,c):\n    a=0\n    j=1\n    while c>0:\n        if c%2==1:\n            a=(a+j)%(10**9+7)\n        j=(j*n)\n        c=c//2\n    print(a)\n    \nt=int(input(\"\"))\nfor i in range(t):\n    a,c= list(input(\"\").strip().split())[:2]\n    solve(int(a),int(c))",
                true
            ],
            [
                "from sys import stdin\nfrom math import log2\n\nfor testcase in range(int(stdin.readline())):\n    n, k = map(int, stdin.readline().split())\n    \n    KthSpecialNumber = 0\n\n    while k:\n        nextNPowerInKthTerm = int(log2(k))\n        KthSpecialNumber += n**nextNPowerInKthTerm\n        k -= 2**nextNPowerInKthTerm\n    \n    print(KthSpecialNumber%(10**9+7))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    m=1e9+7;i=0;ans=0\n    MOD = 1000000007;\n\n\n    # Returns modulo exponentiation\n    # for two numbers represented as\n    # long long int. It is used by\n    # powerStrings(). Its complexity\n    # is log(n)\n    def powerLL(x, n):\n\n        result = 1;\n        while (n):\n            if (n & 1):\n                result = result * x % MOD;\n            n = int(n / 2);\n            x = x * x % MOD;\n        return result;\n    def powerStrings(sa, sb):\n\n        a = 0;\n        b = 0;\n\n        for i in range(len(sa)):\n            a = (a * 10 + (ord(sa[i]) -\n                           ord('0'))) % MOD;\n\n        for i in range(len(sb)):\n            b = (b * 10 + (ord(sb[i]) -\n                           ord('0'))) % (MOD - 1);\n\n        # exponentiation\n        return powerLL(a, b);\n    while k>0:\n        if k&1:\n            ans=(ans+powerStrings(str(n),str(i)))%m\n        k=k>>1\n        i+=1\n    print(int(ans))\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    s = str(bin(k))[2:]\n    o = 0\n    m = 10**9 + 7\n    for i in range(len(s)):\n        o += ((n ** i) % m) * ((int(s[-(i + 1)])) % m)\n        o = o % m\n    print(int(o % m))",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    n,k = map(int, input().split())\n    mod = 1000000007\n    num = 0\n    while k>0:\n        x = int(math.log(k,2))\n        x %= mod\n        c = (n**x)%mod\n        \n        num +=c\n        k -= 2**x\n        \n    print(num%mod)",
                true
            ],
            [
                "def ans(k,a):\n    x = 0\n    while k>a:\n        a = a + 2**x\n        x+=1\n    k = k - 2**(x-1)\n    return (x-1,k)\nfor _ in range(int(input())):\n    n, k  = map(int, input().split())\n    a = 0\n    y = 0\n    while k !=0:\n        p,k = ans(k,a)\n        y = y + n**p\n    print(y%((10**9)+7))",
                true
            ],
            [
                "from collections import Counter\nt = int(input())\nfor _ in range(t) :\n    n, k = map(int, input().split())\n    b = (bin(k)[2:])\n    ans = 0\n    for i in range(len(b) - 1, -1, -1) :\n        if b[i] == \"1\" :\n            ans = (ans + n ** (len(b) - 1 - i)) % 1000000007\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    x=str(bin(k))[2:]\n    x=x[::-1]\n    s=0\n    count=0\n    for i in x:\n        if i=='1':\n            s=s+(n**count)%(10**9+7)\n            count+=1\n        else:count+=1\n    print(s%(10**9+7))",
                true
            ],
            [
                "# https://codeforces.com/contest/1594/problem/B\n\nn = int(input())\nfor _ in range(n):\n    base, k = map(int, input().split())\n    answer = 0\n    for i in range(30):\n        shifted_k = k >> i\n        if shifted_k == 0: break\n        answer += (shifted_k % 2) * base ** i\n    answer %= 10**9+7\n    print(answer)\n",
                true
            ],
            [
                "mod = 10**9+7\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    cnt,ans = 0,0\n    while k:\n        if k%2:\n            ans = (ans+pow(n,cnt,mod))%mod\n        cnt+=1\n        k//=2\n    print(ans)",
                true
            ],
            [
                "# list(map(int,input.split(\" \")))\n\nm = int(input())\n\nfor i in range(m):\n    [n,k] = list(map(int,input().split(\" \")))\n    \n    a = int(bin(k).replace(\"0b\", \"\"))\n    r = 0\n    k = 1\n\n    while(a>0):\n        if a%2==1:\n            r += k\n        k = k*n\n        a = a//10\n    print(r%1000000007)",
                true
            ],
            [
                "def intlog2(n):\n  j, p = 1, 0\n  while 2 * j <= n:\n    j *= 2 \n    p += 1\n  return (p, j)\n\ndef term(n, k):\n  if k < 1:\n    return 0\n  x, y = intlog2(k)\n  return (pow(n, x, M) + term(n, k - y)) % M\n\nt = int(input())\nM = 10 ** 9 + 7\nfor case in range(t):\n  n, k = (int(x) for x in input().split())\n  print(term(n, k))",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    t = bin(k)\n    a, summa = t[2:], 0\n    for i in range(len(a)):\n        summa += int(a[-i - 1]) * (n ** i)\n    print(summa % ((10 ** 9) + 7))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n        n, k = map(int, input().split())\n        power = 0\n        result = 0;\n        while(k>0):\n                if(k%2==1):\n                        result += n**power\n                k = k//2\n                power += 1\n        print(result%(10**9+7))\n",
                true
            ],
            [
                "def recursion(n,k):\n    if k ==1:\n        return 1\n    else:\n        r =0\n        while 2**r-1<k:\n            r+=1\n        if k-2**(r-1)==0:\n            return n**(r-1)\n        else:\n            return n**(r-1)+recursion(n,k-2**(r-1))\n        \n\nT = int(input())\nwhile T:\n    n,k = map(int,input().split())\n    print(recursion(n,k)%(10**9+7))\n    T-=1\n    ",
                true
            ],
            [
                "md =int(1e9+7)\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    x=bin(k)[2:][::-1]\n    np=1 \n    ans=0\n    for i in range(len(x)):\n        if x[i]=='1':\n            ans+=np \n            ans%=md \n        else:\n            pass \n        np*=n \n    print(int(ans))",
                true
            ],
            [
                "MOD = 1_000_000_007\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    digit = list(reversed(list(bin(k)[2:])))\n    # print(digit)\n    ans = 0\n    for idx in range(len(digit)):\n        if digit[idx] == '1':\n            ans += n ** idx\n            ans %= MOD\n    print(ans)\n",
                true
            ],
            [
                "n= int(input())\na = []\nfor i in range(n):\n    b= []\n    y= 0\n    x = list(map(int,input().split()))\n    while x[1] > 0 :\n      for k in range(10**7):\n        if x[1]< 2**k:\n            b.append(k-1)\n            x[1] = x[1] - (2**(k-1))\n            break\n \n    for j in range(len(b)):\n             y += x[0]**b[j]\n    if y > (10**9)+7:\n        y = y%((10**9)+7)\n \n    a.append(y)\nfor i in range(n):\n print(a[i])",
                true
            ],
            [
                "def L():\n    return list(map(int,input().split()))\ndef I():\n    return int(input())\n\ndef solve():\n    n,x = map(int,input().split())\n    bini = bin(x)\n    cout = 0\n    ans = 1\n    # print(bini)\n    for x in bini[2:][::-1]:\n        if x == \"1\":\n            ans += n**cout\n            ans = ans % 1000000007\n        cout += 1\n    print(ans-1)\n\n\n\nfor _ in range(int(input())):\n    solve()",
                true
            ],
            [
                "for i in range (int(input())):\n    n,k=map(int, input().split())\n    q=str(bin(k))\n    q=q[2:len(q)]\n    ans=0\n    l=len(q)\n    for i in range (l):\n        ans+=(int(q[i]))*(n**(l-i-1))\n    print(ans%(10**9+7))",
                true
            ],
            [
                "modd = 1000000007\n\n\ndef solve():\n    n, k = list(map(int, input().split()))\n    bi = bin(k)[2:]\n    return sum(pow(n, len(bi) - i - 1, modd) for i in range(len(bi)) if bi[i] == '1') % modd\n\n\nt = int(input())\nwhile t:\n    t -= 1\n    print(solve())\n",
                true
            ],
            [
                "inf=10**9+7\nt=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())\n    a=bin(k)[2:]\n    ans=0\n    for i in range(len(a)):\n        if a[i]==\"1\":\n            ans+=(n**((len(a)-i)-1))%inf\n    print(ans%inf)",
                true
            ],
            [
                "from sys import stdin\ninp = stdin.readline\n\nt = int(inp())\n\nfor _ in range(t):\n    n, k = map(int, inp().split())\n    ans = 0\n    for i in range(len(bin(k)) - 1):\n        mold = 2**i\n        if k & mold:\n            ans = (ans + n**i) % (10**9 + 7)\n\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    b=bin(k).replace('0b','')\n    ans=0\n    mod=1000000007\n    count=0\n   \n    for i in range(len(b)-1,-1,-1):\n        if b[i]=='1':\n            ans+=(pow(n,count,mod)%mod)\n        count+=1\n    print(ans%mod)\n",
                true
            ],
            [
                "mod = 10**9 + 7\n\ndef p(a, b):\n    res = 1\n    for i in range(b):\n        res = (res*a) % mod\n    return res\n\nt = int(input())\n\nwhile t:\n    n, k = map(int,input().split())\n    k = bin(k)\n    k = str(k)\n    res = 0\n    k = k[2::]\n    for i in range(len(k)-1, -1, -1):\n        if k[i] == '0':\n            continue\n        else:\n           res = (res + p(n, (len(k)-i-1))) % mod\n    print(res)\n    t-=1\n",
                true
            ],
            [
                "t=int(input())\nl=[]\n\nfor a1 in range(t):\n    x=list(map(int,input().split()))\n    l.append(x)\n\n\n    \n    \nfor a2 in range(t):\n    sum=0\n    b=bin(l[a2][1])\n    bi=b[2:]\n    \n    bi=list(bi)\n      \n    bi = [int(item) for item in bi]\n    bi =bi[::-1]\n    \n    for j in range(len(bi)):\n        sum=sum + bi[j]*(l[a2][0]**j)\n        sum%=(10**9+7)\n    print(sum)    ",
                true
            ],
            [
                "a=int(input())\nfor i in range(a):\n    n=input()\n    n=n.split(' ')\n    er=bin(int(n[1]))\n    t=er[2:len(er)]\n    t=list(t)\n    t.reverse()\n    p=int(n[0])\n    pt=0\n    for i in range(len(t)):\n        pt+=(p**i)*int(t[i])\n    print(pt%int(1e9+7))\n    \n",
                true
            ],
            [
                "mod=10**9+7\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    z=k.bit_length()-1\n    ans=list(\"1\"+\"0\"*z)\n    if z:\n        k-=pow(2,z)\n        bk=bin(k)[2:]\n        for i in range(len(bk)):\n            ans[-(i+1)]=bk[-(i+1)]\n    an=0\n    p=1\n    for i in range(len(ans)-1,-1,-1):\n        if ans[i]==\"1\":\n            an=(an+p)%mod\n        p=(p*n)%mod\n    print(an)",
                true
            ],
            [
                "for i in range(int(input())):\n    n,k=map(int,input().split())\n    mod=10**9+7\n    ans=c=0\n    while k>0:\n        if k%2:\n            ans=(ans+n**c)%mod\n        k//=2\n        c+=1\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    ans = 0\n    for p, x in enumerate(reversed(bin(k)[2:])):\n        ans += int(x) * n ** p\n    print(ans % (10 ** 9 + 7))\n",
                true
            ],
            [
                "counter = int(input())\n\nfor i in range(counter):\n    a, n = map(int, input().split())\n\n    k = bin(n)\n    k = str(k)\n    lis = list(k)\n    del(lis[0])\n    del(lis[0])\n    leng = len(lis)\n    op = 0\n    for i in range(leng):\n        if lis[leng - i -1] == '1':\n            op += a**i\n    print(int(op%(int(1e9 + 7))))",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    i=0\n    m=10**9+7\n    a=0\n    p=1\n    while i<31:\n        if k & 1<<i:\n            a=(a+p)%m\n\n        p*=n\n        p=p%m\n        i+=1\n\n    print(a)",
                true
            ],
            [
                "t = int(input())\nmod = 1000000007\n    \ndef solve():\n    n, k = map(int, input().split())\n    res = 0\n    for i in range(0, 32):\n        if (k >> i) & 1:\n            res = res % mod + ((n % mod)**(i % mod)) % mod\n    print(res % mod)\n \nfor i in range(1, t + 1):\n    solve()",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())    \n    binary_k=list(int(x) for x in bin(k)[2:])\n    binary_k=list(reversed(binary_k))\n    ans=0\n    max_len=len(binary_k)\n\n    for j in range(max_len):\n        if binary_k[j]==1:\n            ans+=n**(j)\n    print(ans%(7+(10**9)))",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n,k = list(map(int,input().strip().split()))\n    \n    sum=0\n    count=0\n    \n    while k:\n        if k%2 == 1:\n            sum += n**count\n    \n        k = k//2;\n        count+=1\n    \n    print(sum % (10**9+7))\n        \n        \n        \n        \n            \n        \n    \n\n",
                true
            ],
            [
                "mod=1000000007\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    r=0\n    p=1\n    for i in range(31):\n        if(k&(1<<i)):\n            r=int((r+p)%mod)\n        p=int((p*n)%mod)\n    print(r)    \n    \n        \n    ",
                true
            ],
            [
                "def read_nums():\n    return [int(x) for x in input().split()]\n\n\ndef solve():\n    n, k = read_nums()\n    k_bin = bin(k)[2:]\n\n    res = 0\n    p = 1\n    for ch in reversed(k_bin):\n        res += int(ch) * p\n        p *= n\n        res = res % (1_000_000_000 + 7)\n    print(res)\n\n\ndef main():\n    t, = read_nums()\n    for _ in range(t):\n        solve()\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "# task b\nconst = 10**9+7\n\ndef max_k(n, k):\n    q = bin(k)[2:]\n    result = 0\n    for i in range(len(q)):\n        cur = q[-i-1]\n        temp = n**i * int(cur)\n        result += temp\n        \n    return int(result % (const))\n\nt = int(input())\npairs = []\nfor i in range(t):\n    pairs.append(list(map(int, input().split())))\nfor i in range(t):\n    n, k = pairs[i]\n    print(max_k(n,k))",
                true
            ],
            [
                "import sys\n\nif __name__ == \"__main__\":\n    inp = sys.stdin.readline()\n    test = int(inp.strip('\\n'))\n\n    result = \"\"\n    for i in range(test):\n        inp = sys.stdin.readline()\n        n, k = list(map(int, inp.strip('\\n').split()))\n\n        val = bin(k).lstrip('0b')\n        size = len(val)\n\n        num = 0\n\n        for i in range(size):\n            if val[i] == '1':\n                num = num + n ** (size - 1 - i)\n        num %= 1000000000 + 7\n        sys.stdout.write(str(num) + '\\n')\n",
                true
            ],
            [
                "from math import ceil, log, floor\nfrom collections import defaultdict,deque\nimport sys\nimport os.path\n\nsys.setrecursionlimit(200000)\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r+\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\n\n# input = sys.stdin.readline\n# print=sys.stdout.write\ndef MI():\n    return map(int, input().split())\n\nmod=10**9+7\n\ndef solve():\n    # n = int(input())\n    n,k=MI()\n    # a=list(MI())\n    # print(1,((1+8*n)**(1/2)-1)//2)\n    # \n    ans=0\n    while(k>0):\n        r=0\n        for i in range(0,34):\n            if 2**i>k:\n                break\n            r=i\n        ans+=(n**r)%mod\n        k-=2**r\n        # print(ans)\n    print(ans%mod)\n\n\n\n\n    \n    \n    \n\n\n\n\n\n   \n                \n\n\n\n\n\n    \n\n\n\n        \n\n    \n\n    \n\n\n\nt=int(input())\nfor _ in range(t):\n    solve()",
                true
            ],
            [
                "from collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, log2, sqrt, gcd\nimport bisect\nimport copy\nfrom itertools import combinations\nimport sys\nimport heapq\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef input(): return sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n    n,k=get_ints()\n    mod=(10**9)+7\n    ans=0\n    for i in range(32):\n         if (k&(1<<i))>0:\n             ans+=pow(n,i,mod)\n             ans%=mod\n\n    print(ans)",
                true
            ],
            [
                "\nfor _ in range(int(input().strip())):\n    n,k = list(map(int, input().strip().split()))\n    num = bin(k)[2:]\n    ans = 0\n    for i in range(len(num)):\n        ans = (ans*n + int(num[i]))%1000000007\n    \n    print(ans)",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    a,b=map(int,input().split())\n    ans=0\n    x,y=1,3\n    num=2\n    if b==1:\n        print(1)\n    elif b==2:\n        print(a)\n    else:\n        while y<b:\n            x,y=y,2*y+1\n            num+=1\n        b=bin(b)[2:]\n        for i in b:\n            num-=1\n            ans+=int(i)*pow(a,(num))\n        print(ans%1000000007)\n\n        \n",
                true
            ],
            [
                "t=int(input())\no=0\nwhile o!=t:\n    o+=1\n    n,k=map(int,input().split())\n    k_2=''\n    while k>=2:\n        k_2=str(k%2)+k_2\n        k=k//2\n    k_2=str(k)+k_2\n    sum=0\n    for i in range(len(k_2)-1,-1,-1):\n        \n        if k_2[i]=='1':\n            sum+=n**(len(k_2)-1-i)\n    print(sum%(10**9+7))",
                true
            ],
            [
                "#Codeforces handle - \"@titanalpha\"\n#Email id - shubhamnokiafan@gmail.com\n\nfrom collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nimport copy\n\nMOD = 1000000007\nMAX = sys.maxsize\nMIN = -sys.maxsize\n\nclass get:\n    def int():\n        return list(map(int,input().split()))\n    def str():\n        return input().split()\n    def float():\n        return list(map(float,input().split()))\n    def map():\n        return map(int,input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x))+1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result,item)\n    return result\n\ndef LCM(a,b):\n    return (a*b)//(math.gcd(a,b))\n\ndef solve():\n    n,k = get.map()\n    bi = bin(k).replace(\"0b\",\"\")\n    sum_ = 0\n    for i in range(len(bi)-1,-1,-1):\n        if bi[i] == \"1\":\n            sum_ += pow(n,len(bi)-1-i,MOD)\n            sum_ = sum_%MOD\n    print(sum_)\nfor _ in range(int(input())):\n    solve()",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nThere are n block towers in a row, where tower i has a height of a_i. You're part of a building crew, and you want to make the buildings look as nice as possible. In a single day, you can perform the following operation:\n\n  * Choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j), and move a block from tower i to tower j. This essentially decreases a_i by 1 and increases a_j by 1. \n\n\n\nYou think the ugliness of the buildings is the height difference between the tallest and shortest buildings. Formally, the ugliness is defined as max(a)-min(a). \n\nWhat's the minimum possible ugliness you can achieve, after any number of days?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "# -*- coding: UTF-8 -*-\nt = int(input())\ninputdata = []\nfor i in range(t):\n    input()\n    inputdata.append(input().split(\" \"))\n    for j in range(len(inputdata[i])):\n        inputdata[i][j] = int(inputdata[i][j])\nfor i in range(t):\n    res = 0\n    l = len(inputdata[i])\n    ost = sum(inputdata[i]) % l\n    while(ost > 0):\n        ost -= l;\n        res += 1\n    print(res)\n        \n    \n",
                true
            ],
            [
                "# import heapq\n# import copy\n# from collections import deque\n# import sys\n# import bisect\n\n\n# def cost(a, b):\n#     return abs(a-b)\n\n\n# def solve(n, arr):\n#     arr.sort()\n#     arr = deque(arr)\n#     maxh = arr.pop()\n#     minh = arr.popleft()\n#     prev = abs(maxh-minh)\n#     ct = prev\n#     ctct = 0\n#     if ct < 2:\n#         return ct\n#     change = True\n#     while change:\n#         maxh = maxh-ct//2\n#         minh = minh+ct//2\n#         bisect.insort(arr, maxh)\n#         bisect.insort(arr, minh)\n#         maxh = arr.pop()\n#         minh = arr.popleft()\n#         ct = abs(maxh-minh)\n#         if ct == prev:\n#             if ctct < n:\n#                 ctct += 1\n#             else:\n#                 change = False\n#         else:\n#             prev = ct\n#             ctct = 0\n\n#     return ct\n\n\ndef fsolve(n, arr):\n    s = sum(arr)\n    if s % n == 0:\n        return 0\n    else:\n        return 1\n    # minheap = heapq.heapify(copy(arr))\n    # maxheap = [-1*i for i in arr]\n    # maxheap = heapq.heapify(copy(maxheap))\n    # nochange = False\n    # while (minheap[0]-abs(maxheap[0])) != 0 and not nochange:\n    #     maxh = abs(heapq.heappop(maxheap))\n    #     minh = abs(heapq.heappop(minheap))\n    #     cost = maxh-minh\n    #     if cost == 0:\n    #         return 0\n    #     else:\n    #         maxh = maxh - cost//2\n    #         minh = minh + cost//2\n    #         heapq.heappush(maxheap)\n\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int, input().rstrip().split()))\n        ans = fsolve(n, arr)\n        print(ans)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    print(1 if sum(a)%n else 0)",
                true
            ],
            [
                "from sys import stdin\ndef solve():\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(1 if sum(a) % n else 0)\nT = int(stdin.readline())\nfor t in range(T):\n    solve()\n\n",
                true
            ],
            [
                "number = int(input())\nug = []\nif number > 0:\n    for x in range(0, number):\n        bd = int(input())\n        bd_list = list(input().split())\n        somma = 0\n        for x in bd_list:\n            x = int(x)\n            somma += x\n        resto = somma % len(bd_list)\n        if resto == 0:\n            ug.append(0)\n        else:\n            ug.append(1)\nelse:\n    print(0)\nif len(ug) > 0:\n    for x in range(0,len(ug)):\n        print(ug[x])\n        \n\n",
                true
            ],
            [
                "import math\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    maxi = 0\n    mini = 0\n    builds = list(map(int, input().strip().split()))\n    Sum = sum(builds)\n    mini = Sum // N\n    maxi = math.ceil(Sum/N)\n    print(maxi - mini)",
                true
            ],
            [
                "num = int(input())\nfor i in range(num):\n  n = int(input())\n  arr = input().split(' ')\n  for i in range(len(arr)):\n    arr[i] = int(arr[i])\n  if sum(arr)%n==0:\n    print(0)\n  else:\n    print(1)\n  \n",
                true
            ],
            [
                "for t in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    ans=0\n    for i in range(0,n):\n        ans+=l[i]\n    if(ans%n==0):\n        print(\"0\")\n    else:\n        print(\"1\")\n",
                true
            ],
            [
                "import math\ndef sol(suj,y):\n    return int(suj/y)\ndef ceel(suj,y):\n    return math.ceil(suj/y) \ndef fun():\n    print(var-yuk)\ndef add(yuk,var):\n    return var+yuk\ntest=int(input())\nfor i in range(test):\n    y=int(input())\n    arr=[int(item) for item in input().split()]\n    suj=0\n    for i in range(y):\n        suj=suj+arr[i]\n    yuk=sol(suj,y)\n    var= ceel(suj,y)\n    fun()\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n = int(input())\n    a=[int(n) for n in input().split()]\n\n    if (sum(a))%(len(a))==0:\n        print(\"0\")\n    else:\n        print(\"1\")",
                true
            ],
            [
                "def solution():\n    # Solution 1\n    l = int(input())\n    a = [int(x) for x in input().split()]\n    if sum(a)%l:\n        print(1)\n    else:\n        print(0)\n\n\n\ntry:\n    import sys\n    import os\n    if (os.path.exists(\"1.in.txt\")):\n        sys.stdin = open(\"1.in.txt\",\"r\")\n        sys.stdout = open(\"1.out.txt\",\"w\")\nexcept:\n    pass\n\nt = int(input())\nwhile t:\n    solution()\n    t -= 1",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    if sum(map(int,input().split())) % n==0:\n        print(0)\n    else:\n        print(1)\n    ",
                true
            ],
            [
                "def averages(n, heights):\n    sm = sum(heights)\n    rem = sm % n\n    if rem == 0:\n        return 0\n    else:\n        return 1\n\n\ntest_cases = input()\nno_of_lines = 2 * int(test_cases)\ninp = []\nfor i in range(no_of_lines):\n    inp.append(input().split(' '))\n\n\n\nfor i in range(0, int(test_cases)):\n    n = int(inp[2*i][0])\n    heights = [int(j) for j in inp[2*i+1]]\n    print(averages(n, heights))\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a = [int(x) for x in input().split()]\n    b = sum(a)%n\n    if b:\n        print(1)\n    else:\n        print(0)",
                true
            ],
            [
                "t=int(input())\nfor i in range(0,t):\n    n=int(input())\n    L=list(map(int,input().split()))\n    s=0\n    for j in range(0,n):\n        s+=L[j]\n    if(s%n==0):\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    # n,h = map(int,input().split())\n    arr = list(map(int,input().split()))\n    sm = sum(arr)\n    mn = sm//n\n    mx = math.ceil(sm/n)\n    print(mx-mn)\n    ",
                true
            ],
            [
                "def sol(a,b):\n    total=sum(a)\n    ans=total%b\n    if ans==0:\n        return ans\n    else:\n        return 1\n    \n    \n        \n        \n        \n    \n    \n\n\n\n\n\n\n\n\n\n\n\n    \n    \n\np=int(input());\nfor i in range(p):\n    i2=input()\n    i3=input().split(\" \")\n    q=[int(x) for x in i3 ]\n    print(sol(q,int(i2)))\n\n\n\n        \n                    \n                    \n         \n                \n                \n            \n        \n    \n            \n        \n\n    \n            \n        \n    \n    \n    \n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    r=int(input())\n    l=list(map(int,input().split(\" \")))\n    s=0\n    for i in range(len(l)):\n        s+=l[i]\n    if(s%len(l)==0):\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    ans = 0 if sum(arr)%n==0 else 1\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor test in range(t):\n    n = int(input())\n    pole = input().split()\n    for i in range(n):\n        pole[i] = int(pole[i])\n    if sum(pole) % n == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    val = sum(list(map(int,input().split())))\n    if val%n==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "a = int(input())\nres = 1\nfor i in range(a):\n    n = int(input())\n    l = list(map(int, input().split()))\n    sm = sum(l)\n    res = sm % n\n    if res != 0:\n        print(1)\n    else:\n        print(0)\n        \n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(a) for a in input().split()]\n    if sum(a) % n == 0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "from collections import Counter\nfrom queue import Queue\nimport math\n\n\n\nif __name__ == '__main__':\n    T = int(input())\n    for t in range(T):\n        n = int(input())\n        A = [int(a) for a in input().split()]\n        print(0 if sum(A) % n == 0 else 1)\n\n\n",
                true
            ],
            [
                "t = int(input())\n\ndef dosth(a,s):\n    return 1\n    \nfor _ in range(t):\n    n = int(input())\n    \n    hs = [int(i) for i in input().split()]\n    \n    offset = sum(hs) % len(hs)\n    \n    if(offset == 0):\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sum(a) % n == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    print(1 if sum(a)%n else 0)",
                true
            ],
            [
                "import math\ndef closing_gap(n, arr):\n    summ = sum(arr)\n    return math.ceil(summ/n)-int(summ/n)        \n    \n    \nt = int(input())\nans = []\nwhile t!=0:\n    n =int(input())\n    arr = list(map(int, input().split()))\n    ans.append(closing_gap(n,arr))\n    t-=1 \n\n     \nfor i in ans:\n    print(i)",
                true
            ],
            [
                "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        nums = list(map(int, input().split()))\n        x = sum(nums) % n\n        print(0 if x == 0 else 1)\nmain()",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=sum(a)\n    if s%n==0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    s=sum(l)\n    if(s%len(l)==0):\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    a = list(input().split())\n    tong = 0\n    for i in range(len(a)):\n        a[i] = int(a[i])\n        tong += int(a[i])\n    tb = tong/n\n    if int(tb) == tb:\n        print(0)\n    else:\n        print(1)\n\n\n\nfor i in range(int(input())):\n    solve()",
                true
            ],
            [
                "import math\nfor i in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    hmin,hmax=sum(l)//n,math.ceil(sum(l)/n)\n    print(hmax-hmin)",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n=input()\n    lst=[int(x) for x in input().split()]\n    avg=sum(lst)/len(lst)\n    if avg == int(avg):\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    t = int(input())\n    p = list(map(int, input().split()))\n    mini = min(p)\n    maxi = max(p)\n    val = 0\n    sum = 0\n    for i in range(len(p)):\n        sum += p[i]\n    if sum % t == 0:\n        print(0)\n    else:\n        k = sum/t\n        y = sum // t\n        x = k - y\n        m = math.ceil(x)\n        print(m)\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    print(0 if sum(c) % n == 0 else 1)",
                true
            ],
            [
                "t = int (input())\nfor i in range (t):\n    n = int(input())\n    a = list(map(int , input().split()))\n    s = sum(a)\n    baghi = s % n \n    if baghi > 0 :\n        print(1)\n\n    else:\n        print(0)",
                true
            ],
            [
                "total = 0\nt = int(input())\nfor tm in range(t):\n    n = int(input())\n    ara = [int(x) for x in input().split(' ')]\n    total = sum(ara,0)\n    if total % n == 0:\n        print('0')\n    else:\n        print('1')\n\n\n\n    ",
                true
            ],
            [
                "#####----ANTARA KUNDU----####\nimport random\nfrom collections import Counter, defaultdict\nfrom copy import deepcopy as dc\nimport math\ntry:\n    t=int(input())\n    for tt in range(1,t+1):\n        n=int(input())\n        a=list(map(int,input().split()))\n        x=sum(a)\n        if x%n==0:\n            print(0)\n        else:\n            print(1)\n        #x,y=map(int,input().split())\n        \nexcept EOFError as e:\n    pass",
                true
            ],
            [
                "from collections import defaultdict\nimport sys\nimport math\ninput = sys.stdin.readline\nflush = sys.stdout.flush\nget_int = lambda : int(input().rstrip())\nget_arr = lambda : [int(w) for w in input().split()]\nfrom collections import deque\n\nt = get_int()\n\nfor _ in range(t):\n    n = get_int()\n    arr = get_arr()\n\n    print(0 if sum(arr) % n == 0 else 1)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if sum(a)%n==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    if sum(A) % n == 0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "import math\nfor _ in range(int(input())) :\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s = sum(a)\n    print(math.ceil(s/n) - int(s/n))\n    ",
                true
            ],
            [
                "import math\ndef solve():\n     n = int(input())\n     a = list(map(int, input().split()))\n     \n     if sum(a) % n == 0:\n          print(0)\n     else:\n          print(1)\n          \nt = int(input())\nfor i in range(t):\n    solve()",
                true
            ],
            [
                "n = int(input())\n\nwhile (n):\n    i = int(input())\n    j = list(map(int, input().split(\" \")))\n\n    total = sum(j)\n\n    if total % i == 0:\n        print('0')\n    \n    else:\n        print(1)\n    n -= 1  \n",
                true
            ],
            [
                "import sys\nimport math\nfrom math import gcd,sqrt,log2,ceil,floor\nimport heapq as hq\nfrom bisect import bisect_right, bisect_left, bisect\nimport itertools\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\nfrom sys import stdin, stdout, setrecursionlimit\ndef isPowerOfTwo(x):\n    return (x and (not(x & (x - 1))))\nMOD = int(1e9) + 7\nalp = 'abcdefghijklmnopqrstuvwxyz'\nv = {'a':1, 'e':1, 'i':1, 'o':1, 'u':1}\nc = {}\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    # l,r = list(map(int, stdin.readline().rstrip().split()))\n    # digits = list(stdin.readline().strip('\\n'))\n    # a = list(stdin.readline().strip('\\n'))\n    # b = list(stdin.readline().strip('\\n'))\n    # t = str(stdin.readline().strip('\\n'))\n    if sum(a)%n == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "t =int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if sum(a)%n==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int,input().split()))\n    sum = 0\n    for i in l:\n        sum += i\n    if sum % n == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    a=[int(x) for x in input().split()]\n    b=sorted(a)\n    second_max=b[-2]\n    if len(set(a))==1:\n        print(0)\n    else:\n        if sum(a)%n==0:\n            print(0)\n        else:\n            print(1)\n            ",
                true
            ],
            [
                "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\nimport string\n\nORDA = 97  # a\n\n\ndef ii(): return int(input())\n\n\ndef mi(): return map(int, input().split())\n\n\ndef li(): return list(map(int, input().split()))\n\n\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\n\n\ndef revn(n): return str(n)[::-1]\n\n\ndef dd(): return collections.defaultdict(int)\n\n\ndef ddl(): return collections.defaultdict(list)\n\n\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\n\n\ndef divs(n, start=2):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n // i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\n\n\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\n\n\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\n\n\ndef convn(number, base):\n    new_number = 0\n    while number > 0:\n        new_number += number % base\n        number //= base\n    return new_number\n\n\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\ndef ispal(s):\n    for i in range(len(s) // 2 + 1):\n        if s[i] != s[-i - 1]:\n            return False\n    return True\n\n\nfor _ in range(ii()):\n    n = ii()\n    a = li()\n    if sum(a) % n:\n        print(1)\n    else:\n        print(0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    li = list(map(int,input().split()))\n    li.sort()\n    \n    while(True):\n        left = 0\n        right= n-1\n        flag = False\n        li.sort()\n        while(left < right):\n            diff = li[right]-li[left]\n            diff = diff//2\n            \n            if( diff != 0):\n                li[left] += diff\n                li[right] -= diff\n                flag = True\n            left += 1\n            right -= 1\n        if(flag == False):\n            break;\n        #print(li)\n    mini = min(li)\n    maxi = max(li)\n    print(abs(maxi-mini))",
                true
            ],
            [
                "import math\n\nT = int(input())\n\nwhile T>0:\n    n = int(input())\n    l = list(map(int,input().split(' ')))\n    r = sum(l)%n\n    if r!=0:\n        r=1\n    print(r)\n    T=T-1",
                true
            ],
            [
                "for t in range(int(input())):\n    n = int(input())\n    heights = list(map(int, input().split()))\n    tot = sum(heights)\n    print(1) if tot%n else print(0)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=sum(map(int,input().split()))\n    if a % n:\n        print(1)\n    else:\n        print(0)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(0,t):\n    a = int(input())\n    b = list(map(int,input().split()))\n    k = sum(b)\n    if k%len(b) == 0:\n        print(0)\n    else:\n        l = k%len(b)\n        m = []\n        for ele in range(0,len(b)):\n            m.append(l)\n        for ele in range(0,l):\n            m[ele] = m[ele] + 1\n        #print(m)\n        print(max(m) - min(m))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    s = sum(list(map(int,input().split())))\n    if(s%n == 0):\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "from typing import DefaultDict\nfrom math import sqrt\nfrom collections import OrderedDict, defaultdict\nimport math\nfrom sys import maxsize\n\ndef sieve_erasthones(n):\n    #prime number less than equal to n\n    #complexixty n*log(log(n))\n    cnt=0\n    prime=[True for i in range(n+1)]\n    p=2\n    while (p*p<=n):\n        if (prime[p]==True):\n            for i in range(p**2,n+1,p):\n                prime[i]=False\n        p+=1\n    prime[0]=False \n    prime[1]=False \n    for p in range(n+1):\n        if prime[p]:\n            cnt+=1 \n    return cnt\n\ndef calculate(p,q):\n    mod = 998244353\n    expo = 0 \n    expo = mod - 2 \n    while (expo):\n        if (expo & 1):\n            p = (p*q)%mod\n        q = (q*q)%mod\n        expo >>= 1 \n    return p\n\ndef count_factors(n):\n    i=1\n    c=0\n    while i<=math.sqrt(n):\n        if n%i==0:\n            if n//i==i:\n                c+=1\n            else:\n                c+=2\n        i+=1\n    return c\n\ndef ncr_modulo(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den,\n            p - 2, p)) % p\n\ndef isprime(n):\n    prime_flag = 0\n    if(n > 1):\n        for i in range(2, int(sqrt(n)) + 1):\n            if (n % i == 0):\n                prime_flag = 1\n                break\n        if (prime_flag == 0):\n            return True \n        else:\n            return False\n    else:\n        return True\n\ndef smallestDivisor(n):  \n    if (n % 2 == 0):\n        return 2\n    i = 3\n    while(i * i <= n): \n        if (n % i == 0):\n            return i\n        i += 2\n    return n\n\ndef dict_ele_count(l):\n    d=DefaultDict(lambda:0)\n    for ele in l:\n        d[ele]+=1\n    return d \n\ndef max_in_dict(d):\n    maxi=0\n    for ele in d:\n        if d[ele]>maxi:\n            maxi=d[ele]\n    return maxi\n\ndef element_count(s):\n    # returns 2-D list of elements and its count\n    l=[]\n    k=s[0]\n    c=0\n    for ele in s:\n        if ele==k:\n            c+=1 \n        else:\n            l.append([k,c])\n            k=ele \n            c=1\n    l.append([k,c])\n    return l\n\ndef modular_exponentiation(x,y,p): \n    res = 1  \n    x=x%p \n    if x==0:\n        return 0\n\n    while (y > 0):\n        if ((y & 1) != 0):\n            res = (res * x)%p\n        y = y >> 1 \n        x = (x * x)%p\n\n    return res\n\n\nbool=True\nflag=True\nmod= 10**9 + 7\nans=0\nd=defaultdict(lambda:0)\nvowels=['a','e','i','o','u']\n\nfor _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    # l2=list(map(int,input().split()))\n    if sum(l)%n==0:\n        print(0)\n    else:\n        print(1)\n    \n",
                true
            ],
            [
                "test_size = int(input())\nanswer = []\nfor i in range(test_size):\n    size = int(input())\n    buildings = list(map(int,input().split()))\n    answer.append(0 if sum(buildings) % len(buildings) == 0 else 1)\nfor i in answer:\n    print(i)",
                true
            ],
            [
                "tcase = int(input())\nfor i in range(tcase):\n    n = int(input())\n    lst = list(map(int,input().split()))\n    v = sum(lst)\n    if v%n == 0:\n        print(0)\n    else:\n        print(1)\n               ",
                true
            ],
            [
                "for _ in range(eval(input())):\n    n = eval(input())\n    m = list(map(int,input().split()))\n    print(1 if sum(m)%n else 0)\n",
                true
            ],
            [
                "import sys, math\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\nmod = 10**9 + 7\n#mod = 998244353\ninput = lambda: sys.stdin.readline().rstrip()\nli = lambda: list(map(int, input().split()))\n\nt = int(input())\noutput = []\nfor _ in range(t):\n    N = int(input())\n    A = li()\n    su = sum(A)\n    ans = 0\n    if su % N :\n        ans = 1\n    output.append(ans)\n\n    \nfor o in output:\n    print(o)",
                true
            ],
            [
                "t=int(input())\nwhile(t>0):\n    n=int(input())\n    a=list(map(int,input().split(' ')))\n    a.sort(reverse=False)\n    if(sum(a)%n==0):\n        print(0)\n    else:\n        print(1)\n            \n    t-=1\n",
                true
            ],
            [
                "arr=[]\nfor t in range(int(input())):\n    n=int(input())\n    listArr=list(map(int,input().split()))\n    if sum(listArr) % n == 0:\n        arr.append(0)\n    else:\n        arr.append(1)\n        \nfor a in arr:\n    print(a)",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    m = int(input())\n    l = list(map(int, input().split()))\n    k = sum(l)\n    if k % m == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "try:\n    a=int(input())\n    for i in range(a):\n        b=int(input())\n        c=input().split()\n        d=0\n        for j in c:\n            d+=int(j)\n        k=d%(len(c))\n        if k!=0:\n            k=1\n        print(k)\nexcept:\n    print()",
                true
            ],
            [
                "n = int(input())\nfu = []\nlst = []\nwhile n>0:\n    t = int(input())\n    k = [int(item) for item in input().split()]\n    fu.append(k)\n    n-=1\n\nfor f in fu:\n    k = max(f)-min(f)\n    while(k>1):\n        fj = int(int(k) / 2)\n        f[f.index(max(f))]-=fj\n        f[f.index(min(f))]+=fj\n        k =max(f) - min(f)\n\n    print(f\"{k}\")",
                true
            ],
            [
                "# cook your dish here\nfrom collections import Counter\nfrom sys import stdin, stdout\nimport math\nfrom collections import defaultdict\n\n# stdin.readline()\n# int(stdin.readline())\n# map(int, stdin.readline().split())\n# list(map(int, stdin.readline().split()))\n\nfor _ in range(int(stdin.readline())):\n    n=int(stdin.readline())\n    x=list(map(int, stdin.readline().split()))\n    a=sum(x)\n    \n    if a%n==0:\n        print(0)\n    else:\n        \n        print(1)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    if(sum(l)%n == 0):\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "for t in range(int(input())):\n    n=int(input())\n    ns=list(map(int,input().split()))\n    if sum(ns)%n==0:\n        print(\"0\")\n    else:\n        print(\"1\")",
                true
            ],
            [
                "t = int(input())\nfor q in range(t):\n    n = int(input())\n    arr  = [int(x) for x in input().split()]\n    if sum(arr)%n == 0:\n        print(0)\n    else:\n        print(1)    ",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby, accumulate, permutations\nfrom copy import deepcopy\n\nINF = float('inf')\n# MOD = 10**9+7\n# sys.setrecursionlimit(10**6)\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n    n = int(input())\n    A = rl()\n    total = sum(A)\n    print(0 if total % n == 0 else 1)",
                true
            ],
            [
                "import heapq\nimport copy\nfrom collections import deque\nimport sys\nimport bisect\n\n\ndef cost(a, b):\n    return abs(a-b)\n\n\ndef solve(n, arr):\n    arr.sort()\n    arr = deque(arr)\n    maxh = arr.pop()\n    minh = arr.popleft()\n    prev = abs(maxh-minh)\n    ct = prev\n    ctct = 0\n    if ct < 2:\n        return ct\n    change = True\n    while change:\n        maxh = maxh-ct//2\n        minh = minh+ct//2\n        bisect.insort(arr, maxh)\n        bisect.insort(arr, minh)\n        maxh = arr.pop()\n        minh = arr.popleft()\n        ct = abs(maxh-minh)\n        if ct == prev:\n            if ctct < n:\n                ctct += 1\n            else:\n                change = False\n        else:\n            prev = ct\n            ctct = 0\n\n    return ct\n    # minheap = heapq.heapify(copy(arr))\n    # maxheap = [-1*i for i in arr]\n    # maxheap = heapq.heapify(copy(maxheap))\n    # nochange = False\n    # while (minheap[0]-abs(maxheap[0])) != 0 and not nochange:\n    #     maxh = abs(heapq.heappop(maxheap))\n    #     minh = abs(heapq.heappop(minheap))\n    #     cost = maxh-minh\n    #     if cost == 0:\n    #         return 0\n    #     else:\n    #         maxh = maxh - cost//2\n    #         minh = minh + cost//2\n    #         heapq.heappush(maxheap)\n\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int, input().rstrip().split()))\n        ans = solve(n, arr)\n        print(ans)\n",
                true
            ],
            [
                "from sys import stdin, stdout, maxsize\nfrom math import sqrt, log, factorial as ft, gcd, ceil, floor\nfrom collections import defaultdict\n\nii = lambda: int(input())\ndi = lambda: defaultdict(lambda: 0)\ndl = lambda: defaultdict(lambda: list())\nli = lambda: list(map(int, stdin.readline().strip().split()))\nmi = lambda: map(int, stdin.readline().strip().split())\nsi = lambda: stdin.readline().strip()\n\n\"\"\"\npx = 1000000\nprime = [1] * (px + 1)\nfor p in range(2, int(sqrt(px)) + 1):\n    if prime[p]:\n        for i in range(p * p, px + 1, p): prime[i] = 0\nprime[0] = prime[1] = 0\n\"\"\"\n\nfor _ in range(ii()):\n    n = ii()\n    a = li()\n    s = sum(a)\n    if s % n == 0: print(0)\n    else: print(1)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    heightsorig = input().split()\n    totalsum = 0\n    for height in heightsorig:\n        totalsum += int(height)\n    avgheight = totalsum / n\n    if avgheight % 1 == 0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "t=int(input())\nfor r in range(t):\n    c=int(input())\n    ch=input()\n    l=ch.split()\n    for i in range(len(l)):\n        l[i]=int(l[i])\n    if sum(l)%len(l)==0:\n        print(0)\n    else :print(1)    \n        \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int,input().split()))\n    s = sum(A)\n    if s%n==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "import sys\nimport math\nfrom sys import stdin, stdout\n \n# TAKE INPUT\ndef get_ints_in_variables():\n    return map(int, sys.stdin.readline().strip().split())\ndef get_int(): return int(input())\ndef get_ints_in_list(): return list(\n    map(int, sys.stdin.readline().strip().split()))\ndef get_list_of_list(n): return [list(\n    map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\ndef get_string(): return sys.stdin.readline().strip()\n \ndef main():\n    # Write Your Code Here\n    for t in range(get_int()):\n        n = int(input())\n        arr = get_ints_in_list()\n        while True:\n            arr.sort()\n            if abs(arr[0]-arr[n-1]) <= 1:\n                break\n            tmp1 = (arr[0]+arr[n-1])\n            arr[0] = tmp1//2\n            arr[n-1] = tmp1-arr[0]\n        res = abs(arr[0] - arr[n-1])\n        print(res)\n\n\n#  calling main Function\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "import math,sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());mod1=1000000007;mod2=998244353\n\nfor _ in range(I()):\n    n=I();a=L()\n    s=sum(a)\n    if s%n==0:print(0);continue\n    print(1)",
                true
            ],
            [
                "a = int(input())\nsumm = 0\nfor i in range(a):\n    summ = 0\n    c = int(input())\n    b = input()\n    b1 = b.split(' ')\n    for i in range(c):\n        summ = summ + int(b1[i])\n    if summ % c == 0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    k=int(input())\n    arr=list(map(int,input().split()))\n    all=sum(arr)\n    left=all%k\n    if left==0:\n      print('0')\n    else:\n      print('1')\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    L = list(map(int,input().split()))\n    print(1 if sum(L)%n else 0)\n    ",
                true
            ],
            [
                "from statistics import mean\nfor _ in range(int(input())):\n    n=int(input())\n    heights = map(int,input().split())\n    h=list(heights)\n    x=mean(h)\n    if(isinstance(x,int)==True):\n        print(\"0\")\n    elif(isinstance(x,float)==True):\n        print(\"1\")",
                true
            ],
            [
                "# import sys\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt','w')\n\ndef function(testCases):\n    while(testCases!=0):\n        n = int(input())\n        arr = list(map(int, input().split(\" \")))\n        sumOfArr = sum(arr)\n        print(min(1, sumOfArr%n))\n        testCases -= 1  \nfunction(int(input()))",
                true
            ],
            [
                "for i in range(int(input())):\n    null = input()\n    b = [int(x) for x in str(input()).split(\" \")]\n    if sum(b)%len(b)==0:\n        print(\"0\")\n    else:\n        print(\"1\")\n        ",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = 0\n    n = int(input())\n    x = input().split()\n    for j in range(n):\n        s += int(x[j])\n    if (s % n == 0):\n        print(0)\n        continue\n    else:\n        print(1)",
                true
            ],
            [
                "def main():\n\n    T = int(input())\n    \n    for k in range(T):\n\n        n = int(input())\n        array = list(map(int, input().split(' ')))\n\n        temp = sum(array)\n        if temp%n == 0:\n            ans = 0\n        else:\n            ans = 1\n        \n        print(ans)\n\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(0 if sum(a) % n == 0 else 1)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a=int(input());\n    b=list(map(int,input().split()))\n    c=sum(b)\n    if(c%a!=0):\n        print(1)\n    else:\n        print(0)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    ref = []\n    a = int(input())\n    vec = list(map(int, input().split()))\n    ans = int(sum(vec)%len(vec))\n    print(0) if ans == 0 else print(1)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n  n = int(input())\n  a = list(map(int, input().split()))[:n]\n  s = sum(a)\n  if (s%n==0):\n    print(0)\n  else:\n    print(1)\n  ",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    Hs = list(map(int,input().strip().split()))\n    summ = sum(Hs)\n    if summ%n == 0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if sum(a)%n:\n        print(1)\n    else:\n        print(0)",
                true
            ],
            [
                "test_case = int(input())\nfor i in range (test_case):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    avgg = sum(ls)/n\n    if avgg.is_integer():\n        print(\"0\")\n    else:\n        print(\"1\")\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    heights = list(map(int,input().split()))\n    sumh = sum(heights)\n    if sumh % n == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    l=list(input().split())\n    sum=0\n    for j in l:\n        sum+=int(j)\n    if sum%n==0:\n        print(0)\n    else:\n        print(1)\n        ",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    h=input()\n    a=[int(j) for j in h.split()]\n    x=min(a)\n    S=0\n    for k in range(n):\n        S+=a[k]-x\n    if S%n==0:\n        print(0)\n    else:\n        print(1)\n        \n\n        \n    \n    \n        \n        \n            \n    ",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    s = sum(a)\n    if (s % n == 0):\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    length=int(input())\n    lst=list(map(int,input().split()))\n    rem= sum(lst)%length\n    if rem == 0:\n        print(\"0\")\n    else:\n        print(\"1\")",
                true
            ],
            [
                "'''input\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\n'''\n\n\n\n\n \nfrom bisect import bisect_right as bl\nfrom random import randint as R\nRI = lambda : [int(_x) for _x in input().split()]\nII = lambda : int(input())\n\nimport sys\n\n\nfor _ in range(II()):\n    n = II()\n    A = RI()\n\n    if sum(A) % n == 0:\n        print (0)\n    else:\n        print (1)\n",
                true
            ],
            [
                "t = int(input())\n#import collections\n \nfor caseNr in range(1, t + 1):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    #a, s = input().split()\n    \n    #arr = list(map(int, input().split()))\n    #n, a, b = list(map(int, input().split()))\n    #board1 = list(map(int, input().split()))\n    #board2 = list(map(int, input().split()))\n    #num = int(input())\n    #arr = list(input())\n    #print(arr)\n    #string = str(input())\n    #print(arr)\n    #print(arr[0:2])\n    \n    if sum(arr) % n == 0:\n        print(0)\n    else:\n        print(1)\n  ",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    x=sum(a)%n\n    if(x==0):\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "# -*- coding: utf-8 -*-\n\nfrom sys import stdin\n\ndef solve():\n    \n    for _ in range(int(stdin.readline().strip())):\n        n = int(stdin.readline().strip())\n        A = list(map(int, stdin.readline().strip().split()))\n        \n        if sum(A)%n == 0:\n            print (0)\n        else:\n            print (1)  \n        \nif __name__ == \"__main__\":\n    solve()",
                true
            ],
            [
                "t=int(input())\nwhile t>0:\n    t-=1\n    n=int(input())\n    a=list(map(int,input().split()))\n    ans=sum(a)\n    x=ans%n\n    if x==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    y=int(input())\n    x=list(map(int,input().split()))\n    if sum(x)%y==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "T = int(input())\nfor t in range(T):\n    n = int(input())\n    A = [int(i) for i in input().split()]\n    if sum(A)%n == 0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        entrada = list(map(int, input().split()))\n        entrada.sort()\n        \n        while entrada[-1] - entrada[0] > 1:\n            r = entrada[0] + entrada[-1]\n            if r % 2 == 0:\n                entrada[0] = r // 2\n                entrada[-1] = r //2\n            else:\n                r1 = r //2\n                r2 = r - r1\n                entrada[0] = r1\n                entrada[-1] = r2\n\n            entrada.sort()\n\n        print(entrada[-1] - entrada[0])\n\n\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "from sys import stdin\n\nfor testcase in range(int(stdin.readline())):\n    length = int(stdin.readline())\n    values = list(map(int, stdin.readline().split()))\n    print(int(sum(values)%length>0))\n",
                true
            ],
            [
                "\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    sum = 0\n    l = input().split()\n    for i in l:\n        sum+=int(i)\n    if sum % n == 0:\n        print(0)\n    else:\n        print(1)\n\n",
                true
            ],
            [
                "z = int(input())\nfor _ in range(z):\n    n_buildings = int(input())\n    buildings = input().split()\n    #print(buildings)\n    b_list = list(map(int, buildings))\n    #print(b_list)\n    if sum(b_list)%n_buildings == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sum(a)\n    if b%n == 0:\n        print(0)\n    else: print(1)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t) :\n    n = int(input())\n    l = [*map(int,input().split(\" \"))]\n    sum = 0\n    for j in l :\n        sum += j \n    if (sum % n == 0) :\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "t1 = int(input())\nfor _ in range(t1):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if sum(l) % n:\n        print(1)\n    else:\n        print(0)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    sums = 0\n    for i in lst:\n        sums = sums + i\n    if(sums%n == 0):\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "import sys\nimport math\nfrom collections import deque,Counter\nfrom sys import stdin\n\n#sys.setrecursionlimit(10**7)\n\nint1=lambda x: int(x)-1\nstinput=lambda :stdin.readline()[:-1]\nii=lambda :int(stinput())\nmi=lambda :map(int, stdin.readline().split())\nli=lambda :list(mi())\nmi1=lambda :map(int1, stdin.readline().split())\nli1=lambda :list(mi1())\nmis=lambda :map(str, stdin.readline().split())\nlis=lambda :list(mis())\n\nfrom collections import defaultdict\n#d=defaultdict(int)\n#d=defaultdict(lambda:1)\n\nimport heapq\n#heapq.heapify(hq)\n#heapq.heappop(hq)\n#heapq.heappush(hq,1)\n\nmod=10**9+7\nMod=998244353\nINF=10**18\nans=0\n\nt=ii()\nfor _ in range(t):\n  n=ii()\n  a=li()\n  sm=sum(a)\n  if sm%n==0:\n    print(0)\n  else:\n    print(1)",
                true
            ],
            [
                "t = int(input())\nfor j in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    avg = sum(l)/len(l)\n\n    if avg == sum(l)//len(l):\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "t=int(input())\nwhile(t):\n    t-=1\n    n=int(input())\n    num=list(map(int,input().split()))\n    sum=0\n    for i in num:\n        sum+=i\n    if(sum%n==0):\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "\n\ndef runCase():\n    N = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    \n    s = 0\n    for i in arr:\n        s+=i\n        \n    if s % N == 0:\n        print(0)\n    else:\n        print(1)\n\n    \n    \n\n\n\ntestCase = int(input())\n\nwhile(testCase):\n    runCase()\n    testCase-=1\n    \n",
                true
            ],
            [
                "from sys import stdin,stdout\ninput = stdin.readline\n\ndef output(answer):\n    stdout.write(\"{}\\n\".format(answer))\n    \nfor _ in range(int(input())):\n    \n    n = int(input())\n    arr = list(map(int,input().split()))\n    \n    rem = sum(arr)%n\n    if rem == 0:\n        output(0)\n    else:\n        output(1)",
                true
            ],
            [
                "t = int(input())\nwhile(t>0):\n    n = int(input())\n    s = 0\n    a = [int(x) for x in input().split()]\n    for x in a:\n        s += x\n    if(s%n==0):\n        print(0)\n    else:\n        print(1)\n    t-=1",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools,copy,random\nfrom functools import reduce \nimport operator\n \n\ninf = 10**9+7\nmod = (10**9+7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // math.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(20000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\n#0\ndef find(i) :\n    if par[i] != i : par[i] = find(par[i]);\n    return par[i]\ndef union(a, b) :\n    a = find(a)\n    b = find(b)\n    if a == b : return False\n    par[a] = b\n    return True\n#par = [i for i in range(n)]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    return graph\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\n \ndef initGrid(h,w):\n    for i in range(h):\n        s = S()\n        grid.append(list(s))\n    return grid\n \ndef soe(limit):\n    a = [True] * limit                          # Initialize the primality list\n    a[0] = a[1] = False\n \n    for (i, isprime) in enumerate(a):\n        if isprime:\n            yield i\n            for n in range(i*i, limit, i):     # Mark factors non-prime\n                a[n] = False\n    return a\n\n################## Main (Author - 9th) ################## \n\nfor _ in range(I()):\n    n = I()\n    a = LI()\n    #print(sum(a), n, sum(a)//n)\n    if sum(a)%n == 0:\n        print(0)\n    else:\n        print(1)\n    \n",
                true
            ],
            [
                "def find(n, L):\n    sum = 0\n    for elem in L:\n        sum += int(elem)\n    if sum %n == 0:\n        return 0\n    return 1\n\ncases = int(input())\nfor _ in range(cases):\n    n = int(input())\n    L = input().split( )\n    print(find(n, L))",
                true
            ],
            [
                "test = int(input())\n\nfor t in range(test):\n    n = int(input())\n    a = [int(i) for i in input().split()] \n    al = sum(a)\n    \n    avg = al//n\n    #print(avg)\n    \n    ex = avg*n\n    if ex==al:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n\n    x = sum(a) % n\n    if x == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "import sys,os,io\ninput = sys.stdin.readline # for strings\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline # for non-strings\n\nPI = 3.141592653589793238460\nINF =  float('inf')\nMOD  = 1000000007\n# MOD = 998244353\n\n\ndef bin32(num):\n    return '{0:032b}'.format(num)\n\ndef add(x,y):\n    return (x+y)%MOD\n\ndef sub(x,y):\n    return (x-y+MOD)%MOD\n\ndef mul(x,y):\n    return (x*y)%MOD\n\ndef gcd(x,y):\n    if y == 0:\n        return x\n    return gcd(y,x%y)\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\ndef power(x,y):\n    res = 1\n    x%=MOD\n    while y!=0:\n        if y&1 :\n            res = mul(res,x)\n        y>>=1\n        x = mul(x,x)\n        \n    return res\n        \ndef mod_inv(n):\n    return power(n,MOD-2)\n\ndef prob(p,q):\n    return mul(p,power(q,MOD-2))    \n  \ndef ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef ls():\n    return [i for i in input().split()]\n\nfor t in range(ii()):\n    t+=1\n    n = ii()\n    a = li()\n    total = sum(a)\n    d = total%n\n    if d == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "def compute(arr):\n  k = sum(arr) - (sum(arr)//len(arr))*len(arr)\n  s = k%len(arr)\n  if s > 0:\n    return 1\n  else:\n    return 0\n\nif __name__ == \"__main__\":\n  t = int(input())\n  main = []\n  for i in range(t):\n    k = input()\n    a = list(map(int, input().split()))\n    main.append(a)\n  for i in range(len(main)):\n    print(compute(main[i]))",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    if sum(a)%n == 0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "num=input()\nt=int(num)\nfor _ in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    if sum(l)%n==0:\n        print(\"0\")\n    elif sum(l)%n!=0:\n        print(\"1\")",
                true
            ],
            [
                "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    lst = sorted(list(map(int, input().split())))\n    u = sum(lst)/n\n    if int(u) == u:\n        ans.append(0)\n    else:\n        ans.append(1)\n    \n    \nfor x in ans:\n    print(x)",
                true
            ],
            [
                "import math\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    lst=list(map(int,input().split()))\n    if sum(lst)%n==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    \n    if sum(arr)%n == 0:\n        print(\"0\")\n    else:\n        print(\"1\")",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    heights = [int(x) for x in input().split()]\n\n    avg = sum(heights) / n\n    avg_int = sum(heights) // n\n\n    if avg == avg_int:\n        print(0)\n    else:\n        print(1)\n\nfor _ in range(int(input())):\n    solve()",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    l=list(map(int,list(input().split())))\n    total=0\n    for i in l:\n        total=total+i\n    if total%n==0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l1=list(map(int,input().split()))\n    if sum(l1)%n==0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    h = list(map(int,input().split()))\n    s1 = sum(h)\n    if s1%n==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "example=int(input())\n\nfor x in range(example):\n    length=int(input())\n    line=[int(a) for a in input().split()]\n    total=sum(line)\n    if total%length==0: print(0)\n    else: print(1)\n",
                true
            ],
            [
                "from sys import stdin, stdout\n\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = sorted(list(map(int, stdin.readline().split())))\n    if sum(a) / n == int(sum(a) / n):\n        stdout.write('0\\n')\n    else:\n        stdout.write('1\\n')\n",
                true
            ],
            [
                "def closingGap(n,a):\n    total = 0    \n    for i in a:\n        total += i\n    \n    if(total%n == 0):\n        return 0\n    else:\n        return 1\n \nif __name__ == '__main__':\n    t = int(input())  #no. of test cases\n    for i in range(t):\n        n = int(input())    #no. of buildings\n        a = list(map(int, input().split()))\n        result = closingGap(n,a)\n        print(result)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s = sum(a)\n    if s%n==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "import math \nt = int(input())\nwhile t:\n    t-=1\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    s = sum(arr)\n    mi = s//n\n    ma = math.ceil(s/n)\n    print(ma-mi)",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if sum(arr)%n==0:\n        print('0')\n    else:\n        print(\"1\")",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    summ = sum(a)\n    if summ%n == 0:\n        print(0)\n    else:\n        print(1)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if sum(arr) % n:\n        print(1)\n    else:\n        print(0)",
                true
            ],
            [
                "for _ in range(0,int(input())):\n    b=int(input())\n    a=list(map(int,input().split()))\n    if sum(a)%b==0:\n        print(0)\n    else:\n        print(1)",
                true
            ],
            [
                "def func():\n    n=int(input())\n    l=list(map(int,input().split()))\n    if sum(l)%n==0:\n        return 0\n    return 1\n\n\n\n\n\n\n\n\n\nt = int(input())\n\nfor i in range(t):\n    print(func())\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    sm=(n*(n+1))//2\n    a=list(map(int,input().split()))\n    if(sum(a)%n==0):\n        print(\"0\")\n    else:\n        print(\"1\")",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nThere are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    if a == b + c or b == a + c or c == a + b:\n        print('YES')\n    elif a == b and c % 2 == 0:\n        print('YES')\n    elif a == c and b % 2 == 0:\n        print('YES')\n    elif b == c and a % 2 == 0:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "\n\n\ndef func():\n    x,y,z=map(int,input().split())\n    if x==y+z:\n        return 'YES'\n    elif y==x+z:\n        return 'YES'\n    elif z==x+y:\n        return 'YES'\n    elif x==y and z%2==0:\n        return 'YES'\n    elif y==z and x%2==0:\n        return 'YES'\n    elif z==x and y%2==0:\n        return 'YES'\n    return 'NO'\n\n\n\nt = int(input())\n\nfor i in range(t):\n    print(func())",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    a, b, c = map(int, input().split())\n    if (a == b and c % 2 == 0) or (b == c and a % 2 == 0) or (a == c and b % 2 == 0):\n        print('YES')\n    elif (a == b +c or b == a+c or c == a+b):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "\nn = int(input())\n\n\n\nfor i in range(0, n):\n    l1, l2, l3 = map(int, input().split())\n    maxx = max([l1, l2, l3])\n    minn = min([l1, l2, l3])\n    mid = l1 + l2 + l3 - maxx - minn\n    if l1 != l2 and l2 != l3 and l1 != l3:\n        if maxx == minn + mid:\n            print(\"YES\")\n            continue\n    else:\n        if l1 == l2:\n            tmp = l3\n            if tmp % 2 == 0:\n                print(\"YES\")\n                continue\n        if l1 == l3:\n            tmp = l2\n            if tmp % 2 == 0:\n                print(\"YES\")\n                continue\n        if l3 == l2:\n            tmp = l1\n            if tmp % 2 == 0:\n                print(\"YES\")\n                continue\n    print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    l1, l2, l3 = map(int, input().split())\n    if l1 == l2:\n        if l3 % 2 == 0:\n            print('YES')\n        else:\n            print('NO')\n    elif l2 == l3:\n        if l1 % 2 == 0:\n            print('YES')\n        else:\n            print('NO')\n    elif l1 == l3:\n        if l2 % 2 == 0:\n            print('YES')\n        else:\n            print('NO')\n    elif l1 != l2 != l3:\n        a = []\n        a.append(l1)\n        a.append(l2)\n        a.append(l3)\n        a.sort()\n        if a[0] + a[1] == a[-1]:\n            print('YES')\n        else:\n            print('NO')\n",
                true
            ],
            [
                "for i in range(int(input())):\n    l1,l2,l3=map(int,input().split())\n    if l1==l2  :\n        if l3%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif l2==l3:\n        if l1%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif l3==l1 :\n        if l2%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if max(l1,l2,l3)==l1+l2+l3-max(l1,l2,l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")    ",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    bl=False\n    l1,l2,l3=map(int,input().split(' '))\n    if(l1==l2 and l3%2==0):\n        bl=True\n    if(l2==l3 and l1%2==0):\n        bl=True\n    if(l3==l1 and l2%2==0):\n        bl=True\n    if(l1!=l2 and l2!=l3 and l3!=l1 and (l1+l2==l3 or l2+l3==l1 or l3+l1==l2)):\n        bl=True\n\n\n    if(bl):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    l1,l2,l3=map(int,input().split())\n    if(l1==l2 and l2==l3 and (l1%2==0)):\n        print('YES')\n    elif(l1==l2):\n        l=int(l3/2)\n        if(l3==l+l):\n            print('YES')\n        else:\n            print('NO')\n    elif(l2==l3):\n        l=int(l1/2)\n        if(l1==l+l):\n            print('YES')\n        else:\n            print('NO')\n    elif(l1==l3):\n        l=int(l2/2)\n        if(l2==l+l):\n            print('YES')\n        else:\n            print('NO')\n    elif(l1!=l2 and l2!=l3 and l3!=l1):\n        if(l3==(l1+l2)):\n            print('YES')\n        elif(l2==(l1+l3)):\n            print('YES')\n        elif(l1==(l2+l3)):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "    #from _typeshed import SupportsKeysAndGetItem\nimport collections\nimport sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\n# sys.stdin=open(\"input.txt\",\"r\");\n# sys.stdout=open(\"output.txt\",\"w\")\n####### GLOBAL ###############\nMOD=1000000007\nNO=lambda:print(\"NO\")\nYES=lambda:print(\"YES\")\n_1=lambda:print(-1)\nari=lambda:[int(_) for _ in input().split()]\ncin=lambda:int(input())\ncis=lambda:input()\nshow=lambda x: print(x)\nfast= lambda:sys.stdin.readline()\n\n########### END #########\n######\ntest_case=1\ntest_case=int(input())\n######\nsys.setrecursionlimit(10**6)\n    \ndef ans():\n    x,y,z=ari()\n    st=set([x,y,z])\n    st=list(st)\n    m=0\n    if x==y or x==z:\n        m=x\n    elif y==z:\n        m=y\n    # print(m)\n    if len(st)==2 or len(st)==1:\n        if ((x+y+z)-(m*2))%2==0:\n            YES()\n        else:\n            NO()\n    else:\n        if max(st)==(x+y+z)-max(st):\n            YES()\n        else:\n            NO()\n    return\nfor _ in range(test_case):\n    ans()\n    ",
                true
            ],
            [
                "import sys\nimport bisect\nimport math\nfrom collections import deque\ninput = lambda: sys.stdin.readline().strip()\nmod = 10**9 + 7\n\ndef solve():\n    a,b,c=map(int, input().split())\n    if a==(b+c) or b==(a+c) or c==(a+b):\n        return \"YES\"\n    arr = sorted([a,b,c])\n    for i in range(3):\n        if arr[i%3] == arr[(i+1)%3] and arr[(i+2)%3]%2==0:\n            return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    t=1\n    t = int(input())\n    for _ in range(t):\n        print(solve())",
                true
            ],
            [
                "for _ in range(int(input())):\n    a = sorted(list(map(int, input().split())))\n    if ((a[0]+a[1] == a[2]) or (a[0]==a[1] and a[2] & 1==0) or (a[2]==a[1] and a[0] & 1==0)):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    l1,l2,l3=list(map(int,input().split()))\n    if (l1+l2+l3)%2!=0:\n        print(\"NO\")\n    elif ([l1%2,l2%2,l3%2]).count(0)==3 and (l1==l2==l3 or (l1==l2 or l2==l3 or l3==l1)):\n        print(\"YES\")\n    elif ([l1%2,l2%2,l3%2]).count(1)==2 and (l1==l2 or l2==l3 or l3==l1):\n        print(\"YES\")\n    elif (l1+l2==l3 or l2+l3==l1 or l3+l1==l2)  :\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "def canRectangle(a, b, c):\n    if a == b and c % 2 == 0:\n        return True\n    elif a == c and b % 2 == 0:\n        return True\n    elif b == c and a % 2 == 0:\n        return True\n    elif a == b + c:\n        return True\n    elif b == a + c:\n        return True\n    elif c == a + b:\n        return True\n    return False\n\n\nt = int(input())\nans = []\nfor i in range(t):\n    a, b, c = [int(x) for x in input().split()]\n    ans.append(canRectangle(a, b, c))\nfor i in range(t):\n    if ans[i]:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = [int(i) for i in input().split()]\n    s.sort()\n    if s[-1]==s[0]+s[1]:\n        print(\"YES\")\n    else:\n        su = set(s)\n        if len(su)<len(s):\n            for i in s:\n                if s.count(i)>1:\n                    a = i\n            s.remove(a)\n            s.remove(a)\n            b = s[0]\n            if(b%2==0):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c = sorted(list(map(int,input().split())))\n\n    if ((c==b+a) or (a%2==0 and b==c) or ((c%2==0 and b==a))):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "t = int(input())\nfor k in range(t):\n    data = input().split()\n    first = int(data[0])\n    second = int(data[1])\n    third = int(data[2])\n    condition = False\n    if first == second:\n        if third % 2 == 0:\n            if not condition:\n                condition = True\n    if first != second:\n        if third == first + second:\n            if not condition:\n                condition = True\n    if first == third:\n        if second % 2 == 0:\n            if not condition:\n                condition = True\n    if first != third:\n        if second == first + third:\n            if not condition:\n                condition = True\n    if second == third:\n        if first % 2 == 0:\n            if not condition:\n                condition = True\n    if second != third:\n        if first == second + third:\n            if not condition:\n                condition = True\n    if condition:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\n#from decimal import Decimal \n \n#from statistics import mode\n \nfrom itertools import combinations as cb\n \ndef int_arr(): return list(map(int, sys.stdin.readline().strip().split()))\n \ndef str_arr(): return list(map(str, sys.stdin.readline().strip().split()))\n \ndef input(): return sys.stdin.readline().strip()\n \n \n\n\n# sys.stdin = open('Hilbert Hotel/input.txt', 'r')\n# sys.stdout = open('Hilbert Hotel/output.txt', 'w')\n\n\nfor _ in range(int(input())):\n    a,b,c=int_arr()\n    if a==b+c or b==a+c or c==a+b or (a==c and b-b//2==b//2) or (a==b and c-c//2==c//2) or (c==b and a-a//2==a//2):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    l = list(map(int, input().split()))\n    l.sort()\n\n    if (l[2] > l[1] and l[2] == l[0] + l[1]) or (l[2] == l[1] and l[0] % 2 == 0) or (l[1] == l[0] and l[2] % 2 == 0):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\n\n\nfor i in range(inp()):\n    l1,l2,l3=sorted(invr())\n    if l1==l2 :\n        if l3%2==0 :\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif l3==l2 :\n        if l1%2==0 :\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if (l1+l2==l3):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    l1,l2,l3 = map(int,input().split())\n    if l1+l2 == l3:\n        print(\"YES\")\n    elif l2+l3 == l1:\n        print(\"YES\")\n    elif l1+l3 == l2:\n        print(\"YES\")\n    else:\n        if l1 == l2 and l3%2 == 0:\n            print(\"YES\")\n        elif l1 == l3 and l2%2 == 0:\n            print(\"YES\")\n        elif l2 == l3 and l1%2 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    \n            ",
                true
            ],
            [
                "t = int(input())\n#import collections\nimport math\n \nfor caseNr in range(1, t + 1):\n    #n = int(input())\n    #arr = list(map(int, input().split()))\n    ls = list(map(int,input().split()))\n    \n    #arr = list(map(int, input().split()))\n    #n, a, b = list(map(int, input().split()))\n    #board1 = list(map(int, input().split()))\n    #board2 = list(map(int, input().split()))\n    #num = int(input())\n    #arr = list(input())\n    #print(arr)\n    #string = str(input())\n    #print(arr)\n    #print(arr[0:2])\n    \n    flag = 'NO'\n    \n    #first\n    first = ls[0]\n    if ls[1] == ls[2]:\n        if first % 2 == 0:\n            flag = 'YES'\n    else:\n        if ls[0] == ls[1] + ls[2]:\n            flag = 'YES'\n            \n    #second\n    first = ls[1]\n    if ls[0] == ls[2]:\n        if first % 2 == 0:\n            flag = 'YES'\n    else:\n        if ls[1] == ls[0] + ls[2]:\n            flag = 'YES'\n    \n    #third\n    first = ls[2]\n    if ls[0] == ls[1]:\n        if first % 2 == 0:\n            flag = 'YES'\n    else:\n        if ls[2] == ls[0] + ls[1]:\n            flag = 'YES'\n            \n    print(flag)",
                true
            ],
            [
                "import sys\nimport math\nfrom math import gcd,sqrt,log2,ceil,floor\nimport heapq as hq\nfrom bisect import bisect_right, bisect_left, bisect\nimport itertools\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\nfrom sys import stdin, stdout, setrecursionlimit\ndef isPowerOfTwo(x):\n    return (x and (not(x & (x - 1))))\nMOD = int(1e9) + 7\nalp = 'abcdefghijklmnopqrstuvwxyz'\nv = {'a':1, 'e':1, 'i':1, 'o':1, 'u':1}\nc = {}\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    # n = int(stdin.readline())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    # l,r = list(map(int, stdin.readline().rstrip().split()))\n    # digits = list(stdin.readline().strip('\\n'))\n    # a = list(stdin.readline().strip('\\n'))\n    # b = list(stdin.readline().strip('\\n'))\n    # t = str(stdin.readline().strip('\\n'))\n    a.sort()\n    x,y,z = a\n    # print(x,y,z)\n    if x + y == z:\n        print(\"YES\")\n    else:\n        if x == y:\n            if z%2 == 0:\n                print(\"YES\")\n            else:\n                print('NO')\n        elif y == z:\n            if x%2 == 0:\n                print(\"YES\")\n            else:\n                print('NO')\n        elif z == x:\n            if y%2 == 0:\n                print(\"YES\")\n            else:\n                print('NO')\n        else:\n            print('NO')",
                true
            ],
            [
                "n = int(input())\nfor z in range(n):\n    a, b, c = map(int, input().split())\n    if (a == b + c) or (b == a + c) or (c == a + b) or ((a == b) and (c % 2 == 0)) or ((a == c) and (b % 2 == 0)) or ((c == b) and (a % 2 == 0)):\n        print(\"YES\")\n    else:\n        print('NO')",
                true
            ],
            [
                "for t in range(int(input())):\n    n,m,o=map(int,input().split())\n    h=max(n,max(m,o))\n    j=n+m+o\n    if((n==m and o%2==0 )or (n==o and m%2==0) or (m==o and n%2==0) ):\n        print(\"YES\")\n    elif((n+m+o)%2==0 and j//2==h):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "import sys\nimport math\nimport bisect\nfrom sys import stdin,stdout\nfrom math import gcd,floor,sqrt,log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl,bisect_right as br\n\nsys.setrecursionlimit(100000000)\n\ndef solve():\n    l1, l2, l3 = map(int, input().split())\n    if l1+l2 == l3 or l1+l3 == l2 or l2+l3 == l1:\n        return \"YES\"\n    if (l1==l2 and l3%2 == 0) or (l1==l3 and l2%2 == 0) or (l2==l3 and l1%2 == 0) :\n        return \"YES\" \n    return \"NO\"\n    \n\n        \n\ndef main():\n     t = int(input())\n     while(t):\n         print(solve())\n         t -= 1\n\n\nif __name__ == '__main__':\n    main()  ",
                true
            ],
            [
                "def f(x,y,z):\n    if x==y:\n        return (True,x,y)\n    elif x==z:\n        return (True,x,z)\n    elif y==z:\n        return (True,y,z)\n    return (False,0)\n\n\nX = lambda : map(int,input().split())\nt,=X()\nfor i in range(t):\n    a,b,c=X()\n    L=[a,b,c]\n    if f(a,b,c)[0]:\n        L.remove(f(a,b,c)[1])\n        L.remove(f(a,b,c)[2])\n        if L[0]%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        L.sort()\n        if L[2]==L[1]+L[0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\n\n",
                true
            ],
            [
                "cases = int(input())\nfor abc in range(cases):\n    Length = list(map(int,input().split()))[:3]\n    Length.sort()\n    if Length[2] == (Length[1]+Length[0]):\n        print(\"YES\")\n    elif Length[0] == Length[1] and Length[2]%2==0:\n        print(\"YES\")\n    elif(Length[1]==Length[2]) and Length[0]%2==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "n = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    if a > b and a > c:\n        f = a\n        if b+c == f:\n            print('YES')\n            continue\n    if b > a and b > c:\n        f = b\n        if a+c == f:\n            print('YES')\n            continue\n    if c > a and c > b:\n        f = c\n        if a+b == f:\n            print('YES')\n            continue\n    if a == b or b == c or a == c:\n        if a == b:\n            if c%2 == 0:\n                print('YES')\n                continue\n        elif b == c:\n            if a%2 == 0:\n                print('YES')\n                continue\n        elif a == c:\n            if b%2 == 0:\n                print('YES')\n                continue\n    print('NO')\n\n\n",
                true
            ],
            [
                "def breaktest(a,b,c):\n    if c == a+b and c > max(a,b):\n        return True\n    if a == b and c % 2 == 0:\n        return True\n    else:\n        return False\n\nT = int(input())\nfor testcase in range(1,T+1):\n    a,b,c = list(map(int, input().split()))\n    if breaktest(a,b,c) or breaktest(c,b,a) or breaktest(a,c,b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    l1,l2,l3 = map(int,input().split())\n\n    ans = False\n    for i in range(3):\n        if i==0:\n            if l1 == l2 and l3%2 == 0:\n                ans = True\n            else:\n                if l1+l2 == l3:\n                    ans = True\n        elif i == 1:\n            if l2 == l3 and l1%2 == 0:\n                ans = True\n            else:\n                if l3+l2 == l1:\n                    ans = True\n        else:\n            if l1 == l3 and l2%2 == 0:\n                ans = True\n            else:\n                if l1+l3 == l2:\n                    ans = True\n    print('YES') if ans == True else print('NO')  ",
                true
            ],
            [
                "for _ in range(int(input())):\n    a=list(map(int,input().split()))\n    a.sort()\n    if(a[-1]!=a[0]+a[1]):\n        if((a[0]==a[1] and a[-1]%2==0) or (a[1]==a[2] and a[0]%2==0) ):print('YES')\n        else:print('NO')\n    else:print('YES')",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    a = list(int(x) for x in input().split())\n    a.sort()\n    if (a[-1] == a[1]+a[0]):\n        print(\"YES\")\n    elif a[0]==a[1]:\n        if (a[2]%2==0):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif a[2]==a[1]:\n        if (a[0]%2==0):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "from collections import Counter\nt = int(input())\n\n\nwhile t>0:\n    l = list(map(int,input().split()[:3]))\n    l.sort()\n    d = Counter(l)\n    m = -1\n    ans = -1\n    for i,k in d.items():\n        if k == 2:\n            m = i\n        if k ==3 and i%2 == 0:\n            ans = 1\n    if m>0:\n        for i, k in d.items():\n            if i != m:\n                if i%2 == 0:\n                    ans =1\n\n    if l[0]+l[1] == l[2] or ans ==1 :\n        print('YES')\n    else:\n        print('NO')\n    t-=1",
                true
            ],
            [
                " \nfrom os import environ\nimport sys\nimport math\nfrom bisect import bisect_left\n# from collections import defaultdict\nif environ.get(\"epoweripi\"):\n    sys.stdin = open('../../input.txt', 'r')\n    sys.stdout = open('../../output.txt', 'w')\n\ninput = sys.stdin.readline\nmod = (10**9) + 7\ndef I(): return input().strip() \ndef II(): return int(input().strip())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(map(int, input().split()))\n\n#if using python3\nif sys.version[0]==\"3\":\n    print = sys.stdout.write \n    def P(z=''):    \n        print(str(z)+'\\n')\n    def LP(z=[]): \n        for i in z:\n            print(str(i)+' ')\n        print('\\n')\n#if using pypy2/python2\nelse:\n    def P(z=''):    \n        print(str(z))\n    def LP(z=[]): \n        for i in z:\n            print(str(i)+' ', end='')\n        print()\n\n######## mathematical functions\ndef gcd(a, b):\n    return a if b==0 else gcd(b, a%b)\ndef sieve(n):\n    isPrimes = [True for i in range(n+1)]\n    isPrimes[0], isPrimes[1] = False, False\n    p = 2\n    while p*p<=n:\n        if isPrimes[p]==True:\n            for j in range(p*p,n+1,p):\n                isPrimes[j] = False\n        p+=1\n    #return accordingly\ndef swap(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\n########\n\ndef solve():\n    l = LI()\n    l.sort()\n    if l[0]+l[1]==l[2]:\n        P(\"YES\")\n    else:\n        if l[1]==l[2]:\n            if l[0]%2==0:\n                flag = 1\n            else:\n                flag = 0\n        elif l[0]==l[1]:\n            if l[2]%2==0:\n                flag = 1\n            else:\n                flag = 0 \n        else:\n            flag = 0\n            \n        if flag:\n            P(\"YES\")\n        else:\n            P(\"NO\")\n    \ndef main():\n    for _ in range(II()):\n        solve()\n\nif __name__==\"__main__\":\n    main()\n\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    s=list(map(int,input().split()))\n    s=sorted(s)\n    a=s[0]\n    b=s[1]\n    c=s[2]\n    if a!=b!=c:\n        if (a+b==c) or (b+c==a) or (a+c==b):\n            print(\"YES\")        \n        else:\n            print(\"NO\")\n    elif a==b==c:\n        if a%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if a==b and b!=c:\n            if c%2==0:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif b==c and b!=a:\n            if a%2==0:\n                print(\"YES\")\n            else:\n                print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    if(a==b and c%2==0):\n        print(\"YES\")\n    elif (b==c and a%2==0):\n        print('YES')\n    elif (c==a and b%2==0):\n        print('YES')\n    elif(a==b+c or b==c+a or c==a+b):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t=int(input())\nwhile t!=0:\n    s=[int(x) for x in input().split()]\n    a=s[0]\n    b=s[1]\n    c=s[2]\n    if a+b==c or b+c==a or c+a==b:\n        print('YES')\n    elif (a==b and c%2==0 )or (b==c and a%2==0) or (a==c and b%2==0) :\n        print('YES')\n    else:\n        print('NO')\n    t-=1\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    a,b,c=map(int,input().split())\n    if (a==(b+c)) or (b==(a+c)) or (c==(a+b)):\n        print(\"YES\")\n    elif (a==b and c%2==0) or (b==c and a%2==0) or (a==c and b%2==0):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for i in range(int(input())):\n    l1, l2, l3 = map(int, input().split())\n    flag = False\n    if l1 + l2 == l3:\n        flag = True\n    elif l2 + l3 == l1:\n        flag = True\n    elif l1 + l3 == l2:\n        flag = True\n    elif l1 == l2 and l3%2==0:\n        flag = True\n    elif l2 == l3 and l1%2==0:\n        flag = True\n    elif l1 == l3 and l2%2==0:\n        flag = True\n    else:\n        flag = False\n    if flag == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    if a==b and c%2==0:\n        print(\"YES\")\n    elif a%2==1 and b%2==1 and c%2==1:\n        print(\"NO\")\n    elif b==c and a%2==0:\n        print(\"YES\")\n    elif c==a and b%2==0:\n        print(\"YES\")\n    elif a==b and b==c and a!=1:\n        print(\"YES\")\n    elif a+b==c or b+c==a or c+a==b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        ",
                true
            ],
            [
                "# cook your dish here\ndef sticks(l):\n    for i in range(3):\n        if l[(i+1)%3]==l[(i+2)%3]:\n            if l[i]%2==0:\n                return True \n        else:\n            if l[i]==(l[(i+1)%3]+l[(i+2)%3]):\n                return True \n    return False\nn = int(input())\nfor i in range(n):\n    l = list(map(int,input().strip().split()))\n    op = sticks(l)\n    if op==True:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "def caso1(a,b,c):\n  if a==b and c%2==0:\n    return True\n  elif a==c and b%2==0:\n    return True\n  elif c==b and a%2==0:\n    return True\n  else:\n    return False\n \ndef caso2(a,b,c):\n  list=[a, b, c]\n  list.sort()\n  if list[2]-list[1]==list[0]:\n    return True\n  else:\n    return False\n \nn=int(input())\nfor i in range(n):\n  new_list=input()\n  new_list=new_list.replace(\" \",\",\")\n  my_list = new_list.split(\",\")\n  for i in range(0, 3):\n      my_list[i] = int(my_list[i])\n  a=my_list[0]\n  b=my_list[1]\n  c=my_list[2]\n  val1=caso1(a,b,c)\n  val2=caso2(a,b,c)\n  if val1==True or val2==True:\n    print('YES')\n  else:\n    print('NO')\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c = sorted(map(int,input().split()))\n    if (a==b and c%2==0) or (b==c and a%2==0) or (a+b)==c:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "T = int(input())\nfor _ in range(T):\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] + a[1] == a[2] or sum(a) % 2 == 0 and len(set(a)) < 3:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    if(a==b and c%2==0):\n          print('YES')\n    elif(b==c and a%2==0):\n          print('YES')\n    elif(c==a and b%2==0):\n          print('YES')\n    elif(a==b+c or b==c+a or c==a+b):\n          print('YES')\n    else:\n          print('NO')",
                true
            ],
            [
                "t = int(input())\nrec = []\n\ndef solve(lst):\n    copy = lst\n    for i in range(3):\n        count = lst.count(lst[i])\n        if count == 2:\n            for j in copy:\n                if j!=lst[i]:\n                    if j%2==0:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n        if count == 3:\n            if lst[i]%2==0:\n                return \"YES\"\n            else:\n                return \"NO\"\n\n    for i in range(3):\n        for j in range(3):\n            if i != j:\n                ele = lst[i] - copy[j]\n                if ele>0:\n                    if ele == lst[3-i-j]:\n                        return \"YES\"\n\n    return \"NO\"\n\n\nfor _ in range(t):\n    lst = [int(i) for i in input().split()]\n    rec.append(lst)\n\nanswer = []\n\nfor i in rec:\n    ans = solve(i)\n    answer.append(ans)\n\nfor i in answer:\n    print(i)\n\n\n\n",
                true
            ],
            [
                "import sys\nimport os.path\nfrom collections import *\nimport math\nimport bisect\nimport heapq as hq\nfrom fractions import Fraction\nfrom random import randint\n\nif os.path.exists(\"input.txt\"):\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\ninput = sys.stdin.readline\n\n##########################################################\ndef solve():\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    if sum(arr[:-1]) == arr[-1]:\n        print(\"YES\")\n    elif arr[-1] == arr[1] and arr[0] % 2 == 0:\n        print(\"YES\")\n    elif arr[0] == arr[1] and arr[-1] % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nwhile t:\n    t -= 1\n    solve()\n\n\n##########################################################\n",
                true
            ],
            [
                "import sys, bisect, math\nfrom collections import deque, Counter\n\ninput = lambda: sys.stdin.readline().strip()\nceil = lambda x: math.ceil(x)\nmod = 10**9 + 7\n\ndef solve():\n    a,b,c = sorted(map(int, input().split()))\n    if a+b == c or (a==b and c%2==0) or (b==c and a%2==0):\n        return \"YES\"\n    return \"NO\"\n\n\nif __name__ == \"__main__\":\n    t=1\n    t = int(input())\n    for _ in range(t):\n        print(solve())",
                true
            ],
            [
                "from collections import defaultdict\nt = int(input())\n\nfor test in range(t):\n    freq = defaultdict(int)\n    arr = list(map(int, input().split()))\n    for i in arr:\n        freq[i] += 1\n    case1 = False\n    same = -1\n    not_poss = False\n    case2 = False\n    for key in freq:\n        if freq[key] == 2:\n            case1 = True\n            same = key\n        elif freq[key] == 3:\n            case2 = True\n    if case1:\n        for i in arr:\n            if i != same:\n                if i % 2 == 1:\n                    not_poss = True\n    elif case2:\n        if arr[0] % 2 == 1:\n            not_poss = True\n    else:\n        if max(arr) != sum(arr) / 2:\n            not_poss = True\n    \n\n\n    if not_poss:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    if(a==b and c%2==0):\n        print('YES')\n    elif(b==c and a%2==0):\n        print('YES')\n    elif(a==c and b%2==0):\n        print('YES')\n    elif(a==b+c or b==c+a or c==a+b):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "for i in range(int(input())):\n    x,y,z=map(int,input().split())\n    if (abs(x-y)==z or abs(z-y)==x or abs(x-z)==y or(x%2==0 and y==z)or (z%2==0 and y==x) or (y%2==0 and x==z)):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "import sys\n\nt = eval(input())\nfor _ in range(t):\n    s = input()\n    arr = [int(a) for a in s.split(' ')]\n    arr = sorted(arr)\n\n    girth = sum(arr)\n    if girth % 2 != 0:\n        print('NO')\n    else:\n        if arr[0] == arr[1] or arr[1] == arr[2]:\n            print('YES')\n        elif arr[0] + arr[1] == arr[2]:\n            print('YES')\n        else:\n            print('NO')\n",
                true
            ],
            [
                "# cook your dish here\nt = int(input())\n\nfor _ in range(t):\n    a = list(map(int,input().split()))\n    a.sort()\n    \n    if(a[0] == a[1] and a[2]%2 == 0) or (a[1] == a[2] and a[0]%2 == 0):\n        print(\"YES\")\n    elif a[0] + a[1] == a[2]:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for i in range(int(input())):\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    a = arr[0]\n    b = arr[1]\n    c = arr[2]\n    if c == a+b or a==b and c%2==0 or b==c and a%2==0 or a==c and b%2==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    ",
                true
            ],
            [
                "for t in range(int(input())):\n    a, b, c = map(int, input().split(\" \"))\n    ans = False\n    if (b == a and c % 2 == 0) or (b == c and a % 2 == 0) or (a == c and b % 2 == 0):\n        ans = True\n    l = list(sorted([a, b, c]))\n    if l[-1] == l[0] + l[1]:\n        ans = True\n    print(\"YES\" if ans else \"NO\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c = map(int , input().split())\n    if a+b==c or a+c==b or b+c == a:\n        print(\"YES\")\n    elif a==b and c&1==0:\n        print(\"YES\")\n    elif b==c and a&1==0:\n        print(\"YES\")\n    elif a==c and b&1==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        ",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n   a,b,c = map(int,input().split())\n   li = [a,b,c]\n   li.sort()\n   if li[0]+li[1]==li[2]:\n      print(\"YES\")\n   elif li[0]==li[1]:\n      if li[2]%2==0:\n         print(\"YES\")\n      else:\n         print(\"NO\")\n   elif li[1]==li[2]:\n      if li[0]%2==0:\n         print(\"YES\")\n      else:\n         print(\"NO\")\n   else:\n      print(\"NO\")",
                true
            ],
            [
                "testcases_of_lengths=int(input())\nfor _ in range(0,testcases_of_lengths):\n    listoflengths=list(map(int,input().split()))\n    listoflengths.sort()\n    if listoflengths[2]==listoflengths[1]+listoflengths[0]:\n        print(\"YES\")\n    elif((listoflengths[0]==listoflengths[1] and listoflengths[2]%2==0)or\n    (listoflengths[1]==listoflengths[2] and listoflengths[0]%2==0) or\n    (listoflengths[2]==listoflengths[0] and listoflengths[1]%2==0)):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for s in[*open(0)][1:]:x,y,z=sorted(map(int,s.split()));print('YNEOS'[x+y+z&1or\nx!=y!=z!=x+y::2])",
                true
            ],
            [
                "n = int(input())\ndef make(n1, n2, n3):\n    if n1 % 2 == 0:\n        if n2 == n3:\n            return True\n    if n2 + n3 == n1:\n        return True\n    else:\n        return False\nwhile n > 0:\n    n -= 1\n    l = input().split(' ')\n    l1, l2, l3 = int(l[0]), int(l[1]), int(l[2])\n    if make(l1,l2,l3) | make(l2,l1,l3) | make(l3,l2,l1):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "for i in range(int(input())):\n    a,b,c=map(int,input().split())\n    if(a==b and c%2==0):\n        print('YES')\n    elif(b==c and a%2==0):\n        print('YES')\n    elif(c==a and b%2==0):\n        print('YES')\n    elif(a==b+c or b==c+a or c==a+b):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "import sys\n# from abc import abstractmethod\n# from collections import deque\nimport math\n# from typing import AnyStr \nimport heapq\n# import random\n# import copy\n# from decimal import Decimal\n# from collections import defaultdict\n# from typing import AnyStr\n\nINF = int(1e15 + 1)\nmod = 1000000007\n\nread = sys.stdin.readline\nsys.setrecursionlimit(10**5)\ndx = [0 , 1, 0, -1]\ndy = [-1, 0, 1, 0]\nseg = []\n\ndef power(bottom, up):\n    # print(bottom, up)\n    if up == 1:\n        return bottom\n    elif up == 0:\n        return 1\n    tmp = power(bottom, int(up // 2))\n    if up % 2 == 0:\n        return (tmp * tmp)\n    else:\n        return (tmp * tmp * bottom)\n\ndef modpower(bottom, up):\n    print(bottom, up)\n    if up == 1:\n        return bottom\n    elif up == 0:\n        return 1\n    tmp = power(bottom, int(up // 2))\n    if up % 2 == 0:\n        return (tmp * tmp) % mod\n    else:\n        return (tmp * tmp * bottom) % mod\n\ndef ccw(p1, p2, p3):\n    a = p2[0] - p1[0]\n    b = p2[1] - p1[1]\n\n    c = p3[0] - p1[0]\n    d = p3[1] - p1[1]\n\n    tmp = a * d - b * c\n\n    if tmp > 0:\n        return 1\n    elif tmp == 0:\n        return 0\n    else:\n        return -1\n\ndef lower_bound(item):\n    left =0 \n    right = len(queue)\n\n    while left < right:\n        mid = int((left + right) // 2)\n        if queue[mid] >= item:\n            right = mid\n        elif queue[mid] < item:\n            left = mid + 1\n\n    return int((left + right)// 2)\n\ndef make_seg(left, right, node):\n    if left == right:\n        seg[node] = arr[left - 1]\n        return seg[node]\n    \n    mid = int((left + right) // 2)\n    seg[node] = make_seg(left , mid , node * 2)\n    seg[node] += make_seg(mid + 1 , right , node * 2 + 1)\n\n    return seg[node]\n\ndef seg_replace(left , right, node,index, diff):\n    if index < left or index > right:\n        return\n\n    seg[node] += diff\n    if left == right:\n        return\n    \n    mid = (left + right) // 2\n    seg_replace(left , mid , node * 2 , index, diff)\n    seg_replace(mid + 1 , right , node *2 + 1, index,  diff)\n\ndef seg_sum(left, right, start , end, node):\n    if start <= left and right <= end:\n        return seg[node]\n\n    if end < left or start > right:\n        return 0\n\n    mid = (left+right) // 2\n\n    return seg_sum(left , mid , start , end, node * 2) + seg_sum(mid + 1 , right , start , end, node * 2 + 1)\n\ndef lazy_seg_replace(left, right, node,  start, end , diff):\n    if seg_lazy[node] != 0:\n        seg[node] += seg_lazy[node] * (right - left + 1)\n\n        if left != right:\n            seg_lazy[node * 2] += seg_lazy[node]\n            seg_lazy[node * 2 + 1] += seg_lazy[node]\n        \n        seg_lazy[node] = 0\n\n    if start<= left and right <= end:\n        seg_lazy[node] += diff\n        seg[node] += seg_lazy[node] * (right - left + 1)\n\n        if left != right:\n            seg_lazy[node * 2] += seg_lazy[node]\n            seg_lazy[node * 2 + 1] += seg_lazy[node]\n        \n        seg_lazy[node] = 0\n        return seg[node]\n    \n    if end < left or start > right:\n        return seg[node]\n    \n\n    mid = (left + right) // 2\n\n    seg[node] = lazy_seg_replace(left, mid, node * 2 , start , end, diff)\n    seg[node] += lazy_seg_replace(mid + 1 , right , node * 2 + 1 , start , end , diff)\n\n    return seg[node]\n\ndef lazy_seg_sum(left , right, node , start , end):\n    # print(left , right , start, end)\n    if seg_lazy[node] != 0:\n        seg[node] += seg_lazy[node] * (right - left + 1)\n\n        if left != right:\n            seg_lazy[node * 2] += seg_lazy[node]\n            seg_lazy[node * 2 + 1] += seg_lazy[node]\n        \n        seg_lazy[node] = 0\n    \n    if start <= left and right <= end:\n        tmp = seg[node]\n        seg[node] = 0\n        return tmp\n    \n    if end < left or right < start:\n        return 0\n    \n    mid = (left+ right) // 2\n    if mid >= end:\n        tmp = lazy_seg_sum(left , mid , node * 2 , start , end)\n    else:\n        tmp = lazy_seg_sum(mid + 1 , right , node * 2  + 1, start , end)\n\n    seg[node] -= tmp\n    return tmp\n    # return lazy_seg_sum(left , mid , node * 2 , start , end) + lazy_seg_sum(mid + 1 , right , node * 2 + 1 , start,  end) \n        \ndef seg_index(left , right,  node , idx):\n    seg[node] -= 1\n    if left == right:\n        return left\n    mid = (left + right) // 2\n    if seg[node * 2] < idx:\n        return seg_index(mid + 1 , right , node * 2 + 1 , idx - seg[node * 2])\n    else:\n        return seg_index(left , mid , node * 2 , idx )\n\nloop = int(read())\n# li = list(map(int, read().strip().split()))\n\nanswer_li  =[]\nfor _ in range(loop):\n    first , second,  third = map(int,read().strip().split())\n\n    if first == second and third % 2 == 0:\n        answer_li.append(\"YES\")\n    elif first == third and second % 2 == 0:\n        answer_li.append(\"YES\")\n    elif first % 2 == 0 and second == third:\n        answer_li.append(\"YES\")\n    elif first + second == third:\n        answer_li.append(\"YES\")\n    elif first + third == second:\n        answer_li.append(\"YES\")\n    elif second + third == first:\n        answer_li.append(\"YES\")\n    else:\n        answer_li.append(\"NO\")\nprint(\"\\n\".join(map(str , answer_li)))",
                true
            ],
            [
                "t = int(input())\nfor test_case in range(t):\n    l_1, l_2, l_3 = map(int, input().split())\n    if l_1 == l_2:\n        if l_3 % 2 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif l_2 == l_3:\n        if l_1 % 2 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif l_3 == l_1:\n        if l_2 % 2 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if l_1 == (l_2 + l_3) or l_2 == (l_3 + l_1) or l_3 == (l_2 + l_1):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\n\n\n",
                true
            ],
            [
                "def rect(l1,l2,l3):\n    if l3==l1:\n        x=l2//2 \n        y=l2-x\n        if x==y:\n            return True\n    elif l2==l3:\n        x=l1//2 \n        y=l1-x \n        if x==y:\n            return True\n    elif l1==l2:\n        x=l3//2 \n        y=l3-x \n        if x==y:\n            return True\n    else:\n        if l2+l3==l1:\n            return True \n        elif l1+l3==l2:\n            return True\n        elif l1+l2==l3:\n            return True \n        else:\n            return False\nt=int(input())\nfor i in range(t):\n    l1,l2,l3=map(int,input().split())\n    x=rect(l1,l2,l3)\n    if x==True:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for i in range(int(input())):\n    a,b,c=map(int,input().split())\n    if a%2==0 and b==c:\n        print(\"YES\")\n    elif b%2==0 and a==c:\n        print(\"YES\")\n    elif c%2==0 and a==b:\n        print(\"YES\")\n    elif a==c+b and a-b==c:\n        print(\"YES\")\n    elif b==a+c and b-a==c:\n        print(\"YES\")\n    elif c==a+b and c-a==b:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "from math import ceil, log2, floor,sqrt,gcd\nfrom collections import defaultdict,deque\nfrom bisect import bisect_left\nimport sys\nimport os.path\nfrom itertools import permutations\nsys.setrecursionlimit(200000)\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r+\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\n\n# input = sys.stdin.readline\n# print=sys.stdout.write\ndef MI():\n    return map(int, input().split())\nmod=10**9+7\n\n\ndef solve(testcase):\n    # input()\n    # n = int(input())\n    # l1,l2,l3=MI()\n    # n,k1=MI()\n    a=list(MI())\n    a.sort() \n\n    if a[0]==a[1] and a[2]%2==0:\n        print(\"YES\")\n    elif a[1]==a[2] and a[0]%2==0:\n        print(\"YES\")\n    elif a[0]==a[2] and a[1]%2==0:\n        print(\"YES\")\n    else:\n        if a[0]+a[1]==a[2]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n        \n    \n\n    \n    \n\n    \n\nt=int(input())\n# t=1\nfor _ in range(t):\n    solve(_+1)\n\n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    a,b,c=map(int,input().split())\n    if(a==b and b==c):\n        if(a%2==0):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif(a==b and c%2==0):\n        print(\"YES\")\n    elif(c==b and a%2==0):\n        print(\"YES\")\n    elif(a==c and b%2==0):\n        print(\"YES\")\n    else:\n        x=max(a,b,c)\n        if(a==x):\n            if(b+c==a):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif(b==x):\n            if(a+c==b):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if(b+a==c):\n                print(\"YES\")\n            else:\n                print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    if(a==b and c%2==0):\n        print(\"YES\")\n    elif(b==c and a%2==0):\n        print(\"YES\")\n    elif(c==a and b%2==0):\n        print(\"YES\")\n    elif(a==b+c or b==c+a or c==a+b):\n       print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    l = list(map(int , input().split()))\n\n    l.sort()\n    pos = False\n    if l[0] + l[1] == l[2]:\n        print(\"YES\")\n        continue\n    elif l[1] == l[2]:\n        pos = l[0] % 2 == 0\n    elif l[0] == l[1]:\n        pos = l[2] % 2 == 0\n    elif l[0] == l[2]:\n        pos = l[1] % 2 == 0\n    \n    if pos: print(\"YES\")\n    else: print(\"NO\")\n\n\n\n\n\n\n    \n",
                true
            ],
            [
                "def solve(l):\n    l.sort()\n    l1, l2, l3 = l\n    if (l1 == l2 and l3%2 == 0 and l3>1): return \"YES\"\n    if (l2 == l3 and l1%2 == 0 and l1 > 1): return \"YES\"\n    if (l1 == l2+l3): return \"YES\"\n    if (l2 == l1+l3): return \"YES\"\n    if (l3 == l1+l2): return \"YES\"\n    return \"NO\"\n\nfor _ in range(int(input())):\n    l = list(map(int, input().split()))\n    print(solve(l))",
                true
            ],
            [
                "def main():\n    t = int(input())\n    for i in range(t):\n        lados = list(map(int, input().split()))\n        lados.sort()\n        \n        if lados[0] == lados[1] and lados[0] == lados[2]:\n            if lados[0] % 2 != 0:\n                print(\"NO\")\n            else: \n                print(\"YES\")\n        elif lados[0] == lados[1]:\n            if lados[2]%2 != 0:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n        elif lados[2] == lados[1]:\n            if lados[0]%2 != 0:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n        else:\n            if lados[0] == lados[1] + lados[2]:\n                print(\"YES\")\n            elif lados[1] == lados[0] + lados[2]:\n                print(\"YES\")\n            elif lados[2] == lados[1] + lados[0]:\n                print(\"YES\")\n            else: \n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "# cook your dish here\n# cook your dish here\n#-------------------imports-------#\nimport sys\nimport io,os\nimport string\nfrom io import BytesIO, IOBase\nfrom os import path\nfrom collections import Counter,OrderedDict\nimport itertools\n\nfrom itertools import chain, combinations\nimport math\nimport random\nimport bisect\nfrom functools import reduce\nfrom sys import stdin,stdout\nfrom math import gcd,floor,sqrt,log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl,bisect_right as br\n\n\n#------------------ONLINE JUDGE OR NOT-------#\n\nif(path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\",\"r\")\n    sys.stdout = open(\"output.txt\",\"w\")\nelse:\n    input = sys.stdin.readline\n    # input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\n\n\nsys.setrecursionlimit(100000000)\n\n\n\n#---------------------pre made and input functions-------#\nsimp    =lambda: int(input())\nstrng  =lambda: input().strip()\njn     =lambda x,l: x.join(map(str,l))\nstrl   =lambda: list(input().strip())\nmul    =lambda: map(int,input().strip().split())\nmulf   =lambda: map(float,input().strip().split())\nseq    =lambda: list(map(int,input().strip().split()))\nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\nflush  =lambda: stdout.flush()\nstdstr =lambda: stdin.readline()\nstdint =lambda: int(stdin.readline())\nstdpr  =lambda x: stdout.write(str(x))\n\n\n#------------functions---------------------\n\n#---------------------input-------\n\nn = simp()\n\n\ndef if_its_binaryform_palindrome(n):\n\n    res = 0\n\n    k = n\n    while k > 0:\n        #to finish the job\n        res = (res << 1) | (k & 1)\n        k = k >> 1  \n\n    return n == res\n\n\n\n\n\n\ndef solve(d):\n\n    a,b,c = d[0],d[1],d[2]\n\n    if a==b:\n        if c&1==0:\n            return 'YES'\n        return 'NO'\n    elif b==c:\n        if a&1==0:\n            return 'YES'\n        return 'NO'\n    elif a==c:\n        if b&1==0:\n            return 'YES'\n        return 'NO'    \n\n\n    if a+b==c or b+c==a or a+c==b:\n        return 'YES'\n    return 'NO'    \n\nfor i in range(n):\n    # d = seq()\n    a = seq()\n    # d = seq()\n    print(solve(a))\n    # r = strng()\n    # t = strng()\n    # d = strng()\n    # t = seq()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef seive(n):\n    \"\"\" preprocessing  \"\"\"\n \n    prime = [1 for i in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n         \n        # this is prime number.\n        if (prime[p] == 1):\n             \n            # Update all multiples of p in array\n            for i in range(p ** 2, n + 1, p):\n                prime[i] = 0\n                \n        p += 1\n    prime[0]= 0\n    prime[1]= 0\n    \n    # print(prime)\n    for i in range(1,n+1):\n        prime[i] += prime[i-1]\n        \n    return prime\n\ndef list_of_prime_sieve(n):\n\n    #an array of True True\n    primes = [True]*(n+1)\n    #changing o and 1 to False\n    primes[0]==primes[1]==False\n\n    #now for every true we find\n    for i in range(2,int(n**(1/2))+1):\n        if primes[i]==True:\n            #we change their multiples to False\n            for j in  range(i*i,n+1,i):\n                primes[j]=False\n\n\n    list_primes = []\n    for i in range(2,len(primes)):\n        if primes[i]==True:\n            list_primes.append(i)\n\n    return list_primes\n\ndef count_primes(a):\n    return len(list_of_prime_sieve(a))    \n\n\ndef gcdoftwo(a,b):\n\n    #log(min(a,b))\n    if a == 0:\n        return b\n    else:\n        return gcdoftwo(b%a,a)\n\ndef lcm(a,b): return (a*b//(gcdoftwo(a,b)))        \n\ndef gcdofList(A): \n    res = A[0]\n    for c in A[1::]:\n        res = gcdoftwo(res , c) \n        if res == 1:\n            return res\n    return res         \n\ndef binpow(a,b):\n\n    #to calc a^b in log(n) time\n\n\n    res = 1\n\n\n    while b>0:\n\n        if b&1:\n            res = res*a\n        a = a*a\n        b>>=1\n    return res        \n\ndef fibo_in_logn(n):\n    if n == 0:\n        return [0, 1]\n\n    p = fibo_in_logn(n >> 1)\n    c = p.first * (2 * p.second - p.first)\n    d = p.first * p.first + p.second * p.second\n    if n & 1:\n        return {d, c + d}\n    else:\n        return {c, d}\n\n\n\n\n\ndef x_n_mod_m(a,b,m):\n\n    #to calculate x^n mod m\n\n    a  = a%m \n\n    res = 1\n    while b>0:\n        if b&1:\n            res = res*a%m \n        a = a*a%m\n        b>>=1\n\n    return res\n\n\n\n\ndef change_array(count,t):\n\n    emp = []\n    for i in range(len(t)):\n        emp.append(count[t[i]])\n    return emp    \n\n\n\n\n# prime = []\n\ndef simpleSieve(limit):\n\n    mark = [True for i in range(limit + 1)]\n    p = 2\n    while (p * p <= limit):\n        if (mark[p] == True):\n            for i in range(p * p, limit + 1, p):\n                mark[i] = False\n        p += 1\n    for p in range(2, limit):\n        if mark[p]:\n            prime.append(p)\n            # print(p,end = \" \")\n    return prime        \n\ndef segmentedSieve(n):\n    limit = int(math.floor(math.sqrt(n)) + 1)\n    t = []\n    t += simpleSieve(limit)\n\n    low = limit\n    high = limit * 2\n    while low < n:\n        if high >= n:\n            high = n\n\n        mark = [True for i in range(limit + 1)]\n\n        for i in range(len(prime)):\n\n            loLim = int(math.floor(low / prime[i]) *\n                                        prime[i])\n            if loLim < low:\n                loLim += prime[i]\n            for j in range(loLim, high, prime[i]):\n                mark[j - low] = False\n\n        # t = []        \n        for i in range(low, high):\n            if mark[i - low]:\n                t.append(i)\n                # print(i, end = \" \")\n\n        low = low + limit\n        high = high + limit\n\n    return t\n\n\n\n\nmod=1000000007\n\ndef occurrences(string, sub):\n    count = start = 0\n    while True:\n        start = string.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "for _ in range (int(input())):\n    a, b, c=map(int, input().split())\n    if a==b+c or b==a+c or c==a+b:\n        print(\"YES\")\n    else:\n        if (a==b and c%2==0) or (a==c and b%2==0) or (c==b and a%2==0):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    a = list(map(int, input().split()))\n    g = False\n    if a[1]==a[0] and a[2]%2==0:\n        g = True\n    elif a[1] == a[2] and a[0] % 2 == 0:\n        g = True\n    elif a[2] == a[0] and a[1] % 2 == 0:\n        g = True\n    else:\n        r = max(a)\n        a.remove(r)\n        if r-a[0]==a[1] or r-a[1]==a[0]:\n            g = True\n    if g:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "for _ in range(int(input())):\n    a=list(map(int,input().split()))\n    a.sort()\n    if a[0]+a[1]==a[2]:\n        print(\"YES\")\n    elif (a[0]==a[1] and a[2]%2==0):\n        print(\"YES\")\n    elif (a[1]==a[2] and a[0]%2==0):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    a,b,c=map(int,input().split())\n    if(a==b and c%2==0):\n        print('YES')\n    elif(b==c and a%2==0):\n        print('YES')\n    elif(c==a and b%2==0):\n        print('YES')\n    elif(a==b+c or b==c+a or c==a+b):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "# -*- coding: UTF-8 -*-\nt = int(input())\ninputdata = []\ndef getres(data,rep):\n    copy = data\n    data.remove(rep)\n    data.remove(rep)\n    if (dat[0] % 2 == 0):\n        print(\"YES\")\n    else:\n        lastchance(copy)\ndef lastchance(dat):\n    Max = max(dat)\n    dat.remove(Max)\n    if (Max - sum(dat) == 0):\n        print(\"YES\")\n    else:\n        print(\"NO\")\nfor i in range(t):\n    inputdata.append(input().split(\" \"))\n    for j in range(len(inputdata[i])):\n        inputdata[i][j] = int(inputdata[i][j])\nfor dat in inputdata:\n    if (dat.count(dat[0]) >= 2):\n        rep = dat[0]\n        getres(dat,rep)\n    elif (dat.count(dat[1]) >= 2):\n        rep = dat[1]\n        getres(dat,rep)\n    else:\n        lastchance(dat)\n    \n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    nums = sorted([a, b, c], reverse=True)\n    if (nums[0] == nums[1] + nums[2]) or (nums[0] == nums[1] and nums[2] % 2 == 0) or (nums[2] == nums[1] and nums[0] % 2 == 0):\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "from sys import stdin,stdout\ninput = stdin.readline\n\ndef output(answer):\n    stdout.write(\"{}\\n\".format(answer))\n    \nfor _ in range(int(input())):\n    \n    arr = list(map(int,input().split()))\n    arr.sort()\n    \n    flag = False\n    \n    if arr[2] == arr[1] + arr[0]:\n        flag = True\n        \n    if arr[0] == arr[1] and arr[2]%2 == 0:\n        flag = True\n    \n    if arr[1] == arr[2] and arr[0]%2 == 0:\n        flag = True\n        \n    if flag:\n        output(\"YES\")\n    else:\n        output(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    arr = sorted([int(a) for a in input().split()], reverse=True)\n    l1, l2, l3 = arr[0], arr[1], arr[2]\n    if l1==l2 and l2==l3 and l1%2==0: print(\"YES\")\n    elif l2==l3 and not l1%2: print(\"YES\")\n    elif l1==l2 and not l3%2: print(\"YES\")\n    elif l1== (l2+l3): print(\"YES\")\n    else: print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, b, c = input().split()\n    a, b, c = [int(a), int(b), int(c)]\n    if a == b:\n        if c%2 == 0: print('YES')\n        else : print('NO')\n    elif b == c:\n        if a%2 == 0: print('YES')\n        else : print('NO')\n    elif a == c:\n        if b%2 == 0: print('YES')\n        else : print('NO')\n    else:\n        if a + b + c - max(a,b,c) == max(a,b,c): print('YES')\n        else : print('NO')",
                true
            ],
            [
                "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\ninteractive = False\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\n\nflush = sys.stdout.flush\nif interactive and not testing:\n    input = sys.stdin.readline\nelse:\n    inputData = InputData()\n    input = inputData.input\n\ndef intin():\n    return(int(eval(input())))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(eval(input())))\ndef strin():\n    return eval(input())\ndef lout(l, sep=\"\\n\", toStr=True):\n    print((sep.join(list(map(str, l)) if toStr else l)))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print((args[0] if len(args)==1 else args))\n    if kargs: print([(k,v) for k,v in list(kargs.items())])\ndef ask(q):\n    sys.stdout.write(str(q)+'\\n')\n    flush()\n    return intin()\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\n# 3,3,7\ndef main():\n    a,b,c = sorted(intlin())\n    if a==b:\n        return c%2 == 0\n    if b==c:\n        return a%2 == 0\n    return a+b == c\n        \n\n\nanss = []\nfor _ in range(intin()):\n    anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print((int(round(time() * 1000))  - start_time))\n",
                true
            ],
            [
                "testcases = int(input())\nfor _ in range(testcases):\n    l1,l2,l3 = [int(i) for i in input().split()]\n    # print([l1,l2,l3])\n    d = {}\n    for i in [l1,l2,l3]:\n        if d.get(i) is None:\n            d[i] = 1\n        else:\n            d[i] += 1\n    #print(d)\n    if len(d.keys()) == 1:\n        if l1 % 2 == 0:\n            print('YES')\n        else:\n            print('NO')\n    elif len(d.keys()) == 2:\n        max_value = max(d, key=d.get)\n        min_value = min(d, key=d.get)\n        if min_value % 2 == 0:\n            print('YES')\n        else:\n            print('NO')\n        # print(max_value, min_value)\n        # if min_value == 2*max_value:\n        #     print('YES')\n        # else:\n        #     print('NO')\n    else:    #length of d.keys() == 3\n        if l1 == sum([l2,l3]) or l2 == sum([l1,l3]) or l3 == sum([l1,l2]):\n            print('YES')\n        else:\n            print('NO')",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    a,b,c=map(int,input().split())\n    if a==b and b==c and a==c:\n        if a%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif a==b or b==c or a==c:\n        if a==b:\n            if c%2==0: print(\"YES\")\n            else: print(\"NO\")\n        if b==c:\n            if a%2==0: print(\"YES\")\n            else: print(\"NO\")\n        if a==c:\n            if b%2==0: print(\"YES\")\n            else: print(\"NO\")\n    else:\n        l=[a,b,c]\n        m=max(l)-min(l)\n        l.remove(max(l))\n        if m==max(l):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    x,y,z=map(int,input().split())\n    if(abs(x-y)==z or abs(z-y)==x or abs(x-z)==y or (x%2==0 and y==z) or (y%2==0 and x==z) or (z%2==0 and x==y)):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    s=list(map(int,input().split()))\n    a=min(s[0]*-1,s[1],s[2])\n    b=min(s[0],s[1]*-1,s[2])\n    c=min(s[0],s[1],s[2]*-1)\n    if((c==(a+b) or b==(a+c) or a==(b+c) or(a==b and c%2==0) or (c==b and a%2==0) or (a==c and b%2==0) )and (a<0 and b<0 and c<0)):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "def solve():\n     l1,l2,l3 = map(int,input().split())\n     m = max(l1,l2)\n     m = max(m,l3)\n     s = 0\n     \n     if l1 != m:\n          s += l1\n     if l2 != m:\n          s += l2\n     if l3 != m:\n          s += l3\n          \n     \n     \n     if l1 == l2 == l3 and (l1+l2+l3)%2 == 0:\n          print(\"YES\")\n     elif l1 == l2 == l3 and (l1+l2+l3)%2 != 0:\n          print(\"NO\")\n     elif l1 == l2 and l3 % 2 == 0:\n          print(\"YES\")\n     elif l1 == l3 and l2 % 2 == 0:\n          print(\"YES\")\n     elif l2 == l3 and l1 % 2 == 0:\n          print(\"YES\")\n     elif m == s:\n          print(\"YES\")\n     else:\n          print(\"NO\")\n     \n          \nt = int(input())\nfor i in range(t):\n    solve()",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    arr=list(map(int,input().split()))\n    l=sorted(arr)\n    if l[0]+l[1]==l[2] or l[0]==l[1] and l[2]%2==0 or l[1]==l[2] and l[0]%2==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    if a==b==c:\n        if a%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif a==b:\n        if c%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif b==c:\n        if a%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif c==a:\n        if b%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if a==b+c or b==a+c or c==a+b:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for i in range(int(input())):\n    a,b,c = map(int,input().split())\n    if a+b==c or b+c==a or c+a==b:\n        print(\"YES\")\n    elif (a==b and c%2==0) or(b==c and a%2==0) or (c==a and b%2==0):\n        print(\"YES\")\n    else:\n        print('NO')",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    k = [a, b, c]\n    k.sort()\n    if k[0] + k[1] == k[2] or (k[0] == k[1] and k[2] % 2 == 0) or (k[1] == k[2] and k[0] % 2 == 0):\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "ans = []\nt = int(input())\nfor lala in range(t):\n    l1, l2, l3 = input().split()\n    l1 = int(l1)\n    l2 = int(l2)\n    l3 = int(l3)\n    if (l1 == l2+l3) or (l2 == l1+l3) or (l3 == l1+l2) or (l1==l2 and l3%2==0) or (l1==l3 and l2%2==0) or (l3==l2 and l1%2==0):\n        ans.append(\"YES\")\n    else:\n        ans.append(\"NO\")\n\nfor x in ans:\n    print(x)",
                true
            ],
            [
                "for _ in range(int(input())):\n    l = [int(x) for x in input().split()]\n    l.sort()\n    if (l[2] == l[0]+l[1]) or (l[0] % 2 == 0 and l[1] == l[2]) or (l[2] % 2 == 0  and l[1] == l[0]):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "m=[]\nfor i in range(0,int(input())):\n    r, k, j=map(int, input().split())\n    if(abs(r - k)==j or abs(r - j)==k or abs(k - j)==r):\n        m.append(\"YES\")\n    elif(r == k):\n        if(j%2==0):\n            m.append(\"YES\")\n        else:\n            m.append(\"NO\")\n    elif (j == k):\n        if (r%2==0):\n            m.append(\"YES\")\n        else:\n            m.append(\"NO\")\n    elif (r == j):\n        if (k%2==0):\n            m.append(\"YES\")\n        else:\n            m.append(\"NO\")\n    else:\n        m.append('NO')\nfor l in range(len(m)):\n    print(m[l])\n",
                true
            ],
            [
                "for i in range(int(input())):\n    a, b, c = map(int, input().split())\n    if a + b == c or b + c == a or a + c == b:\n        print('YES')\n    elif a == b and c % 2 == 0:\n        print('YES')\n    elif c == b and a % 2 == 0:\n        print('YES')\n    elif a == c and b % 2 == 0:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    l=[int(x) for x in input().split()]\n    l.sort()\n    if l[0]+l[1]==l[2]:\n        print(\"YES\")\n    elif l[0]==l[1] or l[1]==l[2]:\n        if (l[0]==l[1] and l[2]%2==0) or (l[1]==l[2] and l[0]%2==0):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif l[0]!=l[1] and l[1]!=l[2]:\n        if l[0]+l[1]==l[2]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "from collections import Counter\nt=int(input())\nfor i in range(t):\n    arr=list(map(int,input().split()))\n    arr=sorted(arr)\n    if len(set(arr))==1:\n        if arr[0]%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif len(set(arr))==2:\n        ans=0\n        a=Counter(arr)\n        for i in arr:\n            if a[i]==1:\n                ans=i\n        if ans%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n                \n    else:\n        if max(arr)-min(arr)==arr[1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        ",
                true
            ],
            [
                "\"\"\"\nAccomplished using the EduTools plugin by JetBrains https://plugins.jetbrains.com/plugin/10081-edutools\n\nTo modify the template, go to Preferences -> Editor -> File and Code Templates -> Other\n\"\"\"\n\nif __name__ == \"__main__\":\n    # Write your solution here\n    def get_data_a():\n        data = []\n        t = int(input())\n        for i in range(t):\n            data.append([int(k) for k in input().split()])\n        return data\n\n    def get_res_a(data):\n        res = []\n        for ls in data:\n            l1 = ls[0]\n            l2 = ls[1]\n            l3 = ls[2]\n            if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n                res.append('YES')\n            elif (l1 + l2 == l3) or (l1 + l3 == l2) or (l2 + l3 == l1):\n                res.append('YES')\n            else:\n                res.append('NO')\n\n        # for ls in data:\n        #     equals = False\n        #     ls_s = sorted(ls)\n        #     l_prev = 0\n        #     l_eq = 0\n        #     for l in ls_s:\n        #         if l == l_prev:\n        #             equals = True\n        #             l_eq = l\n        #             break\n        #         l_prev = l\n        #     l_n_eq = 0\n        #     for l in ls:\n        #         if l != l_eq:\n        #             l_n_eq = l\n        #             break\n        #     if equals and l_n_eq % 2 == 0:\n        #         res.append('YES')\n        #     elif for\n\n        return res\n\n    d = get_data_a()\n    # print(d)\n    r = get_res_a(d)\n    for m in r:\n        print(m)\n",
                true
            ],
            [
                "def solve (l1,l2,l3):\n    # Write your code here\n    if l1%2!=0 and l2%2!=0 and l3%2!=0:\n        return 'NO'\n    else:\n        if (l2+l3==l1) or (l1+l3==l2) or (l2+l1==l3):\n            return 'YES'\n        elif (l1%2==0 and l2==l3) or (l2%2==0 and l1==l3) or (l3%2==0 and l2==l1):\n            return 'YES'\n        return 'NO'\n    \n    pass\n\nT = int(input())\nfor _ in range(T):\n    l1,l2,l3=map(int, input().split())\n\n    out_ = solve(l1,l2,l3)\n    print (out_)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a, b, c = sorted(map(int, input().split()))\n    if a + b == c or a == b and c % 2 == 0 or b == c and a % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "import sys\nfrom os import pardir, path\nif(path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\",\"r\")\n    sys.stdout = open(\"output.txt\",\"w\")\n\n\ndef CheckRectangle(sticks):\n    for i in range(len(sticks)):\n        sticks[i].sort()\n        temp = sticks[i]\n\n        for j in range(0,len(sticks)):\n            if temp[0] == temp[1]:\n                if temp[2] % 2 == 0:\n                    print(f\"YES\")\n                    break\n                else:\n                    print(f\"NO\")\n                    break\n\n            elif temp[1] == temp[2] and temp[0] % 2 == 0:\n                print(f\"YES\")\n                break\n\n            elif temp[0] + temp[1] == temp[2]:\n                print(f\"YES\")\n                break\n            else:\n                print(f\"NO\")\n                break\n\n\n\n\n\n\"\"\"Code\"\"\"\nT = int(input())\nsticks = [None]*T\nresult = []\n\n\n#input\nfor i in range(0,T):\n    sticks[i] = [int(num) for num in input().strip().split()[:3]]\n\nCheckRectangle(sticks)",
                true
            ],
            [
                "import math\nt = int(input())\nfor i in range(t):\n    a,b,c = map(int, input().split())\n    if(a==b and c%2==0):\n        print(\"YES\")\n    elif(a==c and b%2==0):\n        print(\"YES\")\n    elif(b==c and a%2==0):\n        print(\"YES\")\n    elif(max(a,b,c) == (a+b+c)-max(a,b,c)):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        ",
                true
            ],
            [
                "no_test_case = int(input())\n\nfor test_case in range(no_test_case):\n    input_test = list(map(int, input().split()))\n\n    [l1,l2,l3] = input_test\n\n    if l1-l2 == l3:\n        print('YES')\n    elif l1-l3 == l2:\n        print('YES')\n    elif l2-l1 == l3:\n        print(\"YES\")\n    elif l2-l3 == l1:\n        print(\"YES\")\n    elif l3-l1 == l2:\n        print(\"YES\")\n    elif l3-l2 == l1:\n        print(\"YES\")\n    elif l1 == l2 and l3%2 == 0:\n        print(\"YES\")\n    elif l2 == l3 and l1%2 == 0:\n        print(\"YES\")\n    elif l1 == l3 and l2%2 == 0:\n        print(\"YES\")\n    else :\n        print(\"NO\")\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nThere is a grid, consisting of n rows and m columns. Each cell of the grid is either free or blocked. One of the free cells contains a lab. All the cells beyond the borders of the grid are also blocked.\n\nA crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\". Each command means moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import sys,os,io\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef isGood(i,j):\n    if (i<0 or j<0 or i>=n or j>=m or a[i][j]=='#' or a[i][j]=='L' or a[i][j]=='+'):\n        return 0\n    return 1\n\n\nfor _ in range (int(input())):\n    n,m = [int(i) for i in input().split()]\n    a = []\n    li,lj = -1,-1\n    for i in range (n):\n        a.append(list(input().strip()))\n        if 'L' in a[-1]:\n            li,lj = i,a[-1].index('L')\n    q = deque([(li,lj)])\n    parent = {}\n    parent[(li,lj)] = -1\n    vis = [[0]*m for i in range (n)]\n    while q:\n        # print(q)\n        ci,cj = q.popleft()\n        cnt = 0\n        cur = []\n        if isGood(ci+1,cj):\n            cur.append((ci+1,cj))\n            cnt+=1\n        if isGood(ci-1,cj):\n            cur.append((ci-1,cj))\n            cnt+=1\n        if isGood(ci,cj+1):\n            cur.append((ci,cj+1))\n            cnt+=1\n        if isGood(ci,cj-1):\n            cur.append((ci,cj-1))\n            cnt+=1\n        if cnt <= 1 and a[ci][cj]=='.':\n            a[ci][cj]='+'\n            vis[ci][cj]=1\n            for i in cur:\n                if (vis[i[0]][i[1]]==0):\n                    q.append(i)\n        if a[ci][cj]=='L':\n            for i in cur:\n                if (vis[i[0]][i[1]]==0):\n                    q.append(i)\n            \n    for i in a:\n        print(''.join(i))",
                true
            ],
            [
                "import sys\nimport math\nfrom collections import deque,Counter\nfrom sys import stdin\n\n#sys.setrecursionlimit(10**7)\n\nint1=lambda x: int(x)-1\nstinput=lambda :stdin.readline()[:-1]\nii=lambda :int(stinput())\nmi=lambda :map(int, stdin.readline().split())\nli=lambda :list(mi())\nmi1=lambda :map(int1, stdin.readline().split())\nli1=lambda :list(mi1())\nmis=lambda :map(str, stdin.readline().split())\n\npr=print\nrg=range\n\nfrom collections import defaultdict\n\nmod=10**9+7\nMod=998244353\nINF=10**18\nans=0\n\nt=ii()\nfor _ in range(t):\n  h,w=mi()\n  s=[['.']*w for i in range(h)]\n  sx,sy=0,0\n  for i in range(h):\n    t=stinput()\n    for j in range(w):\n      s[i][j]=t[j]\n      if t[j]=='L':\n        sx,sy=i,j\n  d=deque()\n  d.append((sx,sy))\n  dxdy=[(0,1),(1,0),(-1,0),(0,-1)]\n  while d:\n    x,y=d.pop()\n    for dx,dy in dxdy:\n      nx,ny=x+dx,y+dy\n      if 0<=nx<h and 0<=ny<w and s[nx][ny]=='.':\n        cnt=0\n        for ddx,ddy in dxdy:\n          nnx,nny=nx+ddx,ny+ddy\n          if 0<=nnx<h and 0<=nny<w and s[nnx][nny]=='.':\n            cnt+=1\n        if cnt<=1:\n          s[nx][ny]='+'\n          d.append((nx,ny))\n  for i in s:\n    print(''.join(i))",
                true
            ],
            [
                "import sys\n\n# sys.setrecursionlimit(200005)\nint1 = lambda x: int(x)-1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline().rstrip()\ndij = [(0, 1), (-1, 0), (0, -1), (1, 0)]\n# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n# inf = 18446744073709551615\ninf = 4294967295\n# md = 10**9+7\nmd = 998244353\n\ndef solve(h, w, ss):\n    fin = [[4]*w for _ in range(h)]\n    st = []\n    for i, row in enumerate(ss):\n        for j, c in enumerate(row):\n            if c == \"#\":\n                fin[i][j] = -2\n                for di, dj in dij:\n                    ni, nj = i+di, j+dj\n                    if ni < 0 or nj < 0 or ni >= h or nj >= w: continue\n                    if fin[ni][nj] < 0: continue\n                    fin[ni][nj] -= 1\n            elif c == \"L\":\n                st.append((i, j))\n                fin[i][j] = -2\n            else:\n                if i == 0: fin[i][j] -= 1\n                if j == 0: fin[i][j] -= 1\n                if i == h-1: fin[i][j] -= 1\n                if j == w-1: fin[i][j] -= 1\n\n    def sub(i, j):\n        for di, dj in dij:\n            ni, nj = i+di, j+dj\n            if ni < 0 or nj < 0 or ni >= h or nj >= w: continue\n            if fin[ni][nj] < 0: continue\n            fin[ni][nj] -= 1\n            if fin[ni][nj] < 2:\n                st.append((ni, nj))\n                fin[ni][nj] = -1\n\n    while st:\n        i, j = st.pop()\n        sub(i, j)\n\n    for i in range(h):\n        for j in range(w):\n            if fin[i][j] == -1:\n                ss[i][j] = \"+\"\n\n    for row in ss: print(\"\".join(row))\n\nfor testcase in range(II()):\n    h, w = LI()\n    ss = [list(SI()) for _ in range(h)]\n    solve(h, w, ss)\n    # solve2(n,aa)\n",
                true
            ],
            [
                "import sys\nimport time\ninput = sys.stdin.readline\n\ndef adj(row, col):\n    ret = []\n    for r, c in ((row+1, col), (row-1, col), (row, col+1), (row, col-1)):\n        if mtrix[r][c] == \".\":\n            ret.append((r, c))\n    return ret\n\ndef spc(row, col):\n    kr = adj(row, col)\n    if len(kr) == 1:\n        return kr[0]\n    if len(kr) == 0:\n        return True\n    return False\n\n#otime = time.time()\nt = int(input())\nfor _ in range(t):\n\n    r, c = map(int, input().split())\n    mtrix = [\"#\" * (c+2)]\n    labs = []\n    for i in range(r):\n        an = [\"#\"]\n        sh = input()\n\n        for ch in range(c):\n            if sh[ch] == \"L\":\n                labs.append((i+1, ch+1))\n            an.append(sh[ch])\n\n        an.append(\"#\")\n        mtrix.append(an)\n\n    mtrix.append(mtrix[0])\n    r += 2\n    c += 2\n\n    #itime = time.time()\n    #print(\"{} ms elapsed for queue init\".format(round((itime-otime)*1000, 3)))\n    q = set()\n    for i, j in labs:\n        for lar, lac in adj(i, j):\n            xf = adj(lar, lac)\n\n            if len(xf) == 1:\n                q.add(xf[0])\n                mtrix[lar][lac] = \"+\"\n\n            elif len(xf) == 0:\n                mtrix[lar][lac] = \"+\"\n\n    while q:\n        nq = set()\n        \n        for ra, ca in q:\n            if mtrix[ra][ca] == \".\":\n                val = spc(ra, ca)\n                if val:\n                    if type(val) != bool:\n                        nq.add(val)\n                    mtrix[ra][ca] = \"+\"\n\n        q = nq\n\n    #etime = time.time()\n    #print(\"{} ms elapsed for bfs\".format(round((etime-itime)*1000, 3)))\n    \n    for row in range(1, r-1):\n        print(*mtrix[row][1:-1], sep=\"\")\n\n    #ftime = time.time()\n    #print(\"{} ms elapsed for print\".format(round((ftime-etime)*1000, 3)))\n\n    #ttime = time.time()\n    #print(\"{} ms elapsed total\".format(round((ttime-otime)*1000, 3)))\n    #print(outf)\n\n\n\n        \n\n\n\n",
                true
            ],
            [
                "import sys, math\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\n#mod = 10**9 + 7\nmod = 998244353\ninput = lambda: sys.stdin.readline().rstrip()\nli = lambda: list(map(int, input().split()))\nfrom collections import deque\n\nt = int(input())\n\ndef inside(h, w):\n    return 0 <= h < H and 0 <= w < W\n\nfor _ in range(t):\n    H, W = li()\n    grid = [list(input()) for _ in range(H)]\n    start = 0\n    for h in range(H):\n        if start:\n            break\n        for w in range(W):\n            if grid[h][w] == 'L':\n                start = (h, w)\n                break\n    queue = deque()\n\n    for i, j in ((1, 0), (0, 1), (-1, 0), (0, -1)):\n        dh, dw = start\n        dh += i; dw += j\n        if inside(dh, dw) and grid[dh][dw] == '.':\n            queue.append((dh, dw))\n\n    while queue:\n        h, w = queue.popleft()\n        cnt = 0\n        for i, j in ((1, 0), (0, 1), (-1, 0), (0, -1)):\n            dh = h + i\n            dw = w + j\n            if inside(dh, dw) and grid[dh][dw] == '.':\n                cnt += 1\n        if cnt <= 1:\n            grid[h][w] = '+'\n            for i, j in ((1, 0), (0, 1), (-1, 0), (0, -1)):\n                dh = h + i\n                dw = w + j\n            \n                if inside(dh, dw) and grid[dh][dw] == '.':\n                    queue.append((dh, dw))\n\n    for x in grid:\n        print(''.join(x))\n\n                \n\n\n\n    ",
                true
            ],
            [
                "import sys\nimport math\nfrom collections import deque,Counter\nfrom sys import stdin\n\n#sys.setrecursionlimit(10**7)\n\nint1=lambda x: int(x)-1\nstinput=lambda :stdin.readline()[:-1]\nii=lambda :int(stinput())\nmi=lambda :map(int, stdin.readline().split())\nli=lambda :list(mi())\nmi1=lambda :map(int1, stdin.readline().split())\nli1=lambda :list(mi1())\nmis=lambda :map(str, stdin.readline().split())\n\npr=print\nrg=range\n\nfrom collections import defaultdict\n\nmod=10**9+7\nMod=998244353\nINF=10**18\nans=0\ndef main():\n  t=ii()\n  ANS=[0]*10**6\n  tmp=0\n  for _ in range(t):\n    h,w=mi()\n    #s=[['.']*w for i in range(h)]\n    s=['.']*w*h\n    def f(i,j):\n      return w*i+j\n    sx,sy=0,0\n    for i in range(h):\n      t=stinput()\n      for j in range(w):\n        #s[i][j]=t[j]\n        s[f(i,j)]=t[j]\n        if t[j]=='L':\n          sx,sy=i,j\n    d=deque()\n    d.append((sx,sy))\n    dxdy=[(0,1),(1,0),(-1,0),(0,-1)]\n    tmp=[0]*(h*w)\n    for x in range(h):\n      for y in range(w):\n        if s[f(x,y)]=='.':\n          num=0\n          for dx,dy in dxdy:\n            nx,ny=x+dx,y+dy\n            if 0<=nx<h and 0<=ny<w and s[f(nx,ny)]!='#':\n              num+=1\n          tmp[f(x,y)]=num\n    while d:\n      x,y=d.pop()\n      for dx,dy in dxdy:\n        nx,ny=x+dx,y+dy\n        #if 0<=nx<h and 0<=ny<w and s[nx][ny]=='.':\n        if 0<=nx<h and 0<=ny<w and s[f(nx,ny)]=='.':\n          tmp[f(nx,ny)]-=1\n          if tmp[f(nx,ny)]<=1:\n            #s[nx][ny]='+'\n            s[f(nx,ny)]='+'\n            d.append((nx,ny))\n    #print(s)\n    for i in range(h):\n      print(''.join(s[w*i:w*(i+1)]))\nif __name__=='__main__':\n  main()",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby, accumulate\nfrom copy import deepcopy\nMOD = 10**9+7\nINF = float('inf')\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\ndef possibleMoves(x, y):\n    cnt = 0\n    for dx, dy in directions:\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.':\n            cnt += 1\n\n    return cnt\n\nfor _ in range(int(input())):\n    n, m = rl()\n    grid = [list(rs()) for _ in range(n)]\n    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'L':\n                q = [(i, j)]\n                break\n\n\n    while q:\n        nq = []\n        for x, y in q:\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.' and possibleMoves(nx, ny) <= 1:\n                    nq.append((nx, ny))\n                    grid[nx][ny] = '+'\n\n        q = nq\n\n    for row in grid:\n        print(\"\".join(row))",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nLOGN = 20\nINF = 10 ** 9 + 5\nMOD = 10 ** 9 + 7\n# ============================= START OF MY CODE =============================\n\nfrom collections import deque\n\ndef solve():\n    # only cells with less than or equal to 2 possible directions can be start\n    m, n = map(int, input().split())\n    grid = [list(input()) for _ in range(m)]\n    start = next((i, j) for i in range(m) for j in range(n) if grid[i][j] == 'L')\n\n    valid = lambda i, j: 0 <= i < m and 0 <= j < n\n    dirs = [0, 1, 0, -1, 0]\n\n    q = deque([start])\n    while q:\n        x, y = q.popleft()\n        for (dx, dy) in zip(dirs, dirs[1:]):\n            nx = x + dx; ny = y + dy\n            if not valid(nx, ny) or not grid[nx][ny] == '.':\n                continue\n            freedom = 0\n            for (dx, dy) in zip(dirs, dirs[1:]):\n                nx2 = nx + dx; ny2 = ny + dy\n                if not valid(nx2, ny2):\n                    continue\n                freedom += grid[nx2][ny2] == '.'\n            if freedom <= 1:\n                grid[nx][ny] = '+'\n                q.append((nx, ny))\n\n    for row in grid:\n        print(\"\".join(row))\n\n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        solve()",
                true
            ],
            [
                "import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\nt = int(inpu())\n\ndef adj(r, c, mat):\n    # UDLR\n    out = [0, 0, 0, 0]\n    if r > 0:\n        if mat[r - 1][c] == '.':\n            out[0] = 1\n    if r < len(mat) - 1:\n        if mat[r + 1][c] == '.':\n            out[1] = 1\n    if c > 0:\n        if mat[r][c - 1] == '.':\n            out[2] = 1\n    if c < len(mat[0]) - 1:\n        if mat[r][c + 1] == '.':\n            out[3] = 1\n    return out\nfor _ in range(t):\n    n, m = map(int, inpu().split())\n    strs = []\n    for i in range(n):\n        s = [*inpu()]\n        if \"L\" in s:\n            lab = (i, s.index('L'))\n        strs.append(s)\n    layer = [lab]\n    while layer != []:\n        newlayer = []\n        for r, c in layer:\n            a = adj(r, c, strs)\n            if a[0] and strs[r - 1][c] == '.':\n                b = sum(adj(r - 1, c, strs))\n                if b < 2:\n                    newlayer.append((r - 1, c))\n                    strs[r - 1][c] = '+'\n            if a[1] and strs[r + 1][c] == '.':\n                b = sum(adj(r + 1, c, strs))\n                if b < 2:\n                    newlayer.append((r + 1, c))\n                    strs[r + 1][c] = '+'\n            if a[2] and strs[r][c - 1] == '.':\n                b = sum(adj(r, c - 1, strs))\n                if b < 2:\n                    newlayer.append((r, c - 1))\n                    strs[r][c - 1] = '+'\n            if a[3] and strs[r][c + 1] == '.':\n                b = sum(adj(r, c + 1, strs))\n                if b < 2:\n                    newlayer.append((r, c + 1))\n                    strs[r][c + 1] = '+'\n\n        layer = newlayer\n    for guy in strs:\n        prin(''.join(guy))\n\n\n",
                true
            ],
            [
                "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\ndef bfs(sx, sy):\n    q = deque()\n    q.append((sx, sy))\n    visit = [[0] * m for _ in range(n)]\n    visit[sx][sy] = 1\n    while q:\n        i, j = q.popleft()\n        c, c0 = 0, 0\n        if s[i][j] == \"L\":\n            for di, dj in d:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < m:\n                    if not s[ni][nj] == \"#\":\n                        q.append((ni, nj))\n        else:\n            for di, dj in d:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < m:\n                    if not s[ni][nj] == \"#\":\n                        c += 1\n                        if s[ni][nj] == \"+\" or s[ni][nj] == \"L\":\n                            c0 += 1\n            ok = 0\n            if c <= 2:\n                ok = 1\n            elif c == 3 and c0 >= 2:\n                ok = 1\n            elif c == 4 and c0 >= 3:\n                ok = 1\n            if not ok:\n                continue\n            s[i][j] = \"+\"\n            visit[i][j] = 1\n            for di, dj in d:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < m:\n                    if not s[ni][nj] == \"#\" and not visit[ni][nj]:\n                        q.append((ni, nj))\n    return\n\nt = int(input())\nd = [(1, 0), (-1, 0), (0, 1), (0, -1)]\nans = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = [list(input().rstrip()) for _ in range(n)]\n    for i in range(n):\n        si = s[i]\n        for j in range(m):\n            if si[j] == \"L\":\n                sx, sy = i, j\n                break\n    bfs(sx, sy)\n    for i in s:\n        ans.append(\"\".join(i))\nsys.stdout.write(\"\\n\".join(ans))",
                true
            ],
            [
                "from sys import stdin, stdout\n\n\ndef solve_test(n, m, v: list):\n    def in_matrix(i, j):\n        return 0 <= i < len(v) and 0 <= j < len(v[0]) and v[i][j] == '.'\n\n    def count(i, j):\n        return in_matrix(i, j) and not visited[i][j]\n\n    def only_path(i, j):\n        cnt = count(i, j + 1) + count(i, j - 1) + count(i + 1, j) + count(i - 1, j)\n        return cnt <= 1\n\n    lab_i = lab_j = None\n    for i in range(n):\n        for j in range(m):\n            if v[i][j] == 'L':\n                lab_i = i\n                lab_j = j\n    stack = [(lab_i, lab_j)]\n    visited = [[False for j in range(m)] for i in range(n)]\n    while len(stack) > 0:\n        i, j = stack.pop()\n        visited[i][j] = True\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        for dx, dy in directions:\n            new_i = i + dx\n            new_j = j + dy\n            if in_matrix(new_i, new_j) and only_path(new_i, new_j) and not visited[new_i][new_j]:\n                if not visited[new_i][new_j]:\n                    stack.append((new_i, new_j))\n    for i in range(n):\n        for j in range(m):\n            if v[i][j] != 'L' and visited[i][j]:\n                v[i][j] = '+'\n    return v\n\n\ndef solve():\n    tests = int(stdin.readline().strip())\n    for test in range(tests):\n        n, m = [int(x) for x in stdin.readline().split()]\n        matrix = [[x for x in stdin.readline().strip()] for i in range(n)]\n        answer = solve_test(n, m, matrix)\n        to_print = \"\\n\".join([''.join([str(x) for x in y]) for y in answer])\n        stdout.write(to_print+'\\n')\n\n\nif __name__ == '__main__':\n    solve()\n",
                true
            ],
            [
                "\nfrom collections import deque\n\ndef main():\n    \n    def countDegrees(i, j):\n        cnts = 0\n        for ii, jj in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n            if 0 <= ii < n and 0 <= jj < m and grid[ii][jj] != '#':\n                cnts += 1\n        return cnts\n    \n    def countBadPaths(i, j):\n        cnts = 0\n        for ii, jj in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n            if 0 <= ii < n and 0 <= jj < m and grid[ii][jj] == '.':\n                cnts += 1\n        return cnts\n    \n    t = int(input())\n    allans = []\n    for _ in range(t):\n        n, m = readIntArr()\n        grid = []\n        for _ in range(n):\n            grid.append(list(input()))\n        li = lj = -1\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    li = i\n                    lj = j\n        vi = [[False for _a in range(m)] for _b in range(n)]\n        deg2 = [(li, lj)]\n        vi[li][lj] = True\n        deg3or4 = deque()\n        while deg2 or deg3or4:\n            if deg2:\n                i, j = deg2.pop() # already marked\n                # print(i, j)\n                for ii, jj in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n                    if 0 <= ii < n and 0 <= jj < m and not vi[ii][jj] and grid[ii][jj] != '#':\n                        vi[ii][jj] = True\n                        d = countDegrees(ii, jj)\n                        if d == 1: # deadend, ok\n                            grid[ii][jj] = '+'\n                        elif d == 2: # ok\n                            grid[ii][jj] = '+'\n                            deg2.append((ii, jj))\n                        else: # 3 or 4. delay check\n                            deg3or4.append((ii, jj))\n            else:\n                # see if any of the deg3or4 can proceed\n                hasChange = False\n                for _ in range(len(deg3or4)):\n                    i, j = deg3or4.popleft()\n                    # print(i, j)\n                    if countBadPaths(i, j) <= 1: # ok\n                        hasChange = True\n                        grid[i][j] = '+'\n                        for ii, jj in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n                            if 0 <= ii < n and 0 <= jj < m and not vi[ii][jj] and grid[ii][jj] != '#': \n                                vi[ii][jj] = True\n                                d = countDegrees(ii, jj)\n                                if d == 1: # deadend, ok\n                                    grid[ii][jj] = '+'\n                                elif d == 2: # ok\n                                    grid[ii][jj] = '+'\n                                    deg2.append((ii, jj))\n                                else: # 3 or 4. delay check\n                                    deg3or4.append((ii, jj))\n                        break\n                    else:\n                        deg3or4.append((i, j))\n                if hasChange == False: # cannot continue\n                    break\n        allans.extend(grid)\n    multiLineArrayOfArraysPrint(allans)\n        \n    \n    return\n\n\nimport sys\n# input=sys.stdin.buffer.readline #FOR READING PURE INTEGER INPUTS (space separation ok)\ninput=lambda: sys.stdin.readline().rstrip(\"\\r\\n\") #FOR READING STRING/TEXT INPUTS.\n\ndef oneLineArrayPrint(arr):\n    print(' '.join([str(x) for x in arr]))\ndef multiLineArrayPrint(arr):\n    print('\\n'.join([str(x) for x in arr]))\ndef multiLineArrayOfArraysPrint(arr):\n    print('\\n'.join([''.join([str(x) for x in y]) for y in arr]))\n \ndef readIntArr():\n    return [int(x) for x in input().split()]\n# def readFloatArr():\n#     return [float(x) for x in input().split()]\n \ndef makeArr(defaultValFactory,dimensionArr): # eg. makeArr(lambda:0,[n,m])\n    dv=defaultValFactory;da=dimensionArr\n    if len(da)==1:return [dv() for _ in range(da[0])]\n    else:return [makeArr(dv,da[1:]) for _ in range(da[0])]\n \ndef queryInteractive(i,j):\n    print('? {} {}'.format(i,j))\n    sys.stdout.flush()\n    return int(input())\n \ndef answerInteractive(i,j,k):\n    print('! {} {} {}'.format(i,j,k))\n    sys.stdout.flush()\n \ninf=float('inf')\n# MOD=10**9+7\n# MOD=998244353\n\nfrom math import gcd,floor,ceil\nimport math\n# from math import floor,ceil # for Python2\n \nfor _abc in range(1):\n    main()",
                true
            ],
            [
                "import math;from heapq import heappush,heappop,heapify;import random;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());mod1=1000000000+7;mod2=998244353\nfor _ in range(I()):\n    n,m=M()\n    l=[];lx=ly=0;c=[0,1,0,-1,0]\n    for i in range(n):\n        l.append(list(S()))\n        if 'L' in l[-1]:\n            lx=i;ly=l[-1].index('L')\n    def solve(i,j):\n        p=0\n        for k in range(4):\n            p+=(0<=i+c[k]<n and 0<=j+c[k+1]<m) and (l[i+c[k]][j+c[k+1]]=='.')\n        return p\n    q=deque()\n    q.append((lx,ly))\n    while q:\n        r=q.popleft()\n        for k in range(4):\n            x,y=r[0]+c[k],r[1]+c[k+1]\n            if (0<=x<n and 0<=y<m) and l[x][y]=='.' and solve(x,y)<=1:\n                l[x][y]='+'\n                q.append((x,y))\n    for i in l:\n        print(''.join(i))",
                true
            ],
            [
                "\ndef main():\n    \n    def countBadPaths(i, j):\n        cnts = 0\n        for ii, jj in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n            if 0 <= ii < n and 0 <= jj < m and grid[ii][jj] == '.':\n                cnts += 1\n        return cnts\n    \n    t = int(input())\n    allans = []\n    for _ in range(t):\n        n, m = readIntArr()\n        grid = []\n        for _ in range(n):\n            grid.append(list(input()))\n        li = lj = -1\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    li = i\n                    lj = j\n        # vi = [[False for _a in range(m)] for _b in range(n)]\n        # st = [(li, lj)]\n        vi = [False] * (n * m)\n        st = [li * m + lj]\n        vi[li * m + lj] = True\n        while st:\n            i, j = divmod(st.pop(), m)\n            for ii, jj in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n                if 0 <= ii < n and 0 <= jj < m and grid[ii][jj] != '#'\\\n                    and countBadPaths(ii, jj) <= 1 and not vi[ii * m + jj]:\n                    vi[ii * m + jj] = True\n                    grid[ii][jj] = '+'\n                    st.append((ii * m + jj))\n        allans.extend(grid)\n    multiLineArrayOfArraysPrint(allans)\n        \n    \n    return\n\n\nimport sys\n# input=sys.stdin.buffer.readline #FOR READING PURE INTEGER INPUTS (space separation ok)\ninput=lambda: sys.stdin.readline().rstrip(\"\\r\\n\") #FOR READING STRING/TEXT INPUTS.\n\ndef oneLineArrayPrint(arr):\n    print(' '.join([str(x) for x in arr]))\ndef multiLineArrayPrint(arr):\n    print('\\n'.join([str(x) for x in arr]))\ndef multiLineArrayOfArraysPrint(arr):\n    print('\\n'.join([''.join([str(x) for x in y]) for y in arr]))\n \ndef readIntArr():\n    return [int(x) for x in input().split()]\n# def readFloatArr():\n#     return [float(x) for x in input().split()]\n \ndef makeArr(defaultValFactory,dimensionArr): # eg. makeArr(lambda:0,[n,m])\n    dv=defaultValFactory;da=dimensionArr\n    if len(da)==1:return [dv() for _ in range(da[0])]\n    else:return [makeArr(dv,da[1:]) for _ in range(da[0])]\n \ndef queryInteractive(i,j):\n    print('? {} {}'.format(i,j))\n    sys.stdout.flush()\n    return int(input())\n \ndef answerInteractive(i,j,k):\n    print('! {} {} {}'.format(i,j,k))\n    sys.stdout.flush()\n \ninf=float('inf')\n# MOD=10**9+7\n# MOD=998244353\n\nfrom math import gcd,floor,ceil\nimport math\n# from math import floor,ceil # for Python2\n \nfor _abc in range(1):\n    main()",
                true
            ],
            [
                "from sys import stdin,stdout,setrecursionlimit\nfrom math import gcd,sqrt,factorial,pi,inf\nfrom collections import deque,defaultdict\nfrom bisect import bisect,bisect_left\nfrom time import time\nfrom itertools import permutations as per\nfrom heapq import heapify,heappush,heappop,heappushpop\ninput=stdin.readline\nR=lambda:map(int,input().split())\nI=lambda:int(input())\nS=lambda:input().rstrip('\\r\\n')\nL=lambda:list(R())\nP=lambda x:stdout.write(str(x)+'\\n')\nlcm=lambda x,y:(x*y)//gcd(x,y)\nnCr=lambda x,y:(f[x]*inv((f[y]*f[x-y])%N))%N\ninv=lambda x:pow(x,N-2,N)\nsm=lambda x:(x**2+x)//2\nN=10**9+7\n\ndef chk(x,y):\n    if a[x][y]!='.':return False\n    dg=0\n    if x+1<n and a[x+1][y]=='.':\n        dg+=1\n    if x-1>=0 and a[x-1][y]=='.':\n        dg+=1\n    if y+1<m and a[x][y+1]=='.':\n        dg+=1\n    if y-1>=0 and a[x][y-1]=='.':\n        dg+=1\n    if dg<2:\n        a[x][y]='+'\n        #print(x,y)\n    return dg<2\n\nfor _ in range(I()):\n    n,m=R()\n    a=[list(S()) for i in range(n)]\n    stk=deque([])\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]=='L':\n                stk.append((i,j))\n                break\n        if stk:break\n    while stk:\n        #print(stk)\n        x,y=stk.popleft()\n        if x+1<n and chk(x+1,y):\n            stk+=(x+1,y),\n        if x-1>=0 and chk(x-1,y):\n            stk+=(x-1,y),\n        if y+1<m and chk(x,y+1):\n            stk+=(x,y+1),\n        if y-1>=0 and chk(x,y-1):\n            stk+=(x,y-1),\n    for i in range(n):\n        print(*a[i],sep='')\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYelisey has an array a of n integers.\n\nIf a has length strictly greater than 1, then Yelisei can apply an operation called minimum extraction to it: \n\n  1. First, Yelisei finds the minimal number m in the array. If there are several identical minima, Yelisey can choose any of them. \n  2. Then the selected minimal element is removed from the array. After that, m is subtracted from each remaining element. \n\n\n\nThus, after each operation, the length of the array is reduced by 1.\n\nFor example, if a = [1, 6, -4, -2, -4], then the minimum element in it is a_3 = -4, which means that after this operation the array will be equal to a=[1 {- (-4)}, 6 {- (-4)}, -2 {- (-4)}, -4 {- (-4)}] = [5, 10, 2, 0].\n\nSince Yelisey likes big numbers, he wants the numbers in the array a to be as big as possible.\n\nFormally speaking, he wants to make the minimum of the numbers in array a to be maximal possible (i.e. he want to maximize a minimum). To do this, Yelisey can apply the minimum extraction operation to the array as many times as he wants (possibly, zero). Note that the operation cannot be applied to an array of length 1.\n\nHelp him find what maximal value can the minimal element of the array have after applying several (possibly, zero) minimum extraction operations to the array.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the original length of the array a. The second line of the description lists n space-separated integers a_i (-10^9 \u2264 a_i \u2264 10^9) \u2014 elements of the array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of them containing the answer to the corresponding test case. The answer to the test case is a single integer \u2014 the maximal possible minimum in a, which can be obtained by several applications of the described operation to it.\n\nExample\n\nInput\n\n\n8\n1\n10\n2\n0 0\n3\n-1 2 0\n4\n2 10 1 7\n2\n2 3\n5\n3 2 -4 -2 0\n2\n-1 1\n1\n-2\n\n\nOutput\n\n\n10\n0\n2\n5\n2\n2\n2\n-2\n\nNote\n\nIn the first example test case, the original length of the array n = 1. Therefore minimum extraction cannot be applied to it. Thus, the array remains unchanged and the answer is a_1 = 10.\n\nIn the second set of input data, the array will always consist only of zeros.\n\nIn the third set, the array will be changing as follows: [\\color{blue}{-1}, 2, 0] \u2192 [3, \\color{blue}{1}] \u2192 [\\color{blue}{2}]. The minimum elements are highlighted with \\color{blue}{blue}. The maximal one is 2.\n\nIn the fourth set, the array will be modified as [2, 10, \\color{blue}{1}, 7] \u2192 [\\color{blue}{1}, 9, 6] \u2192 [8, \\color{blue}{5}] \u2192 [\\color{blue}{3}]. Similarly, the maximum of the minimum elements is 5.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for _ in range(int(input())):\n  n=int(input())\n  l=list(map(int,input().split()))\n  l.sort()\n  s=0\n  x=l[0]\n  mn=x\n  for i in range(n):\n    x=l[i]-s\n    s+=x\n    mn=max(x,mn)\n    \n  print(mn)\n",
                true
            ],
            [
                "import sys\n\nt = int(input())\nres = []\nfor j in range(t):\n  n = int(input())\n  a = list(map(int, input().split()))\n  a = sorted(a)\n  x = -sys.maxsize - 1\n  s = 0\n  for i in range(n):\n    x = max(x, a[i])\n    s += a[i]\n    if i < n - 1:\n      a[i + 1] -= s\n  # minA = [0] * n\n  # newA = a.copy()\n  # x = 0\n  # minA[n - 1] = min(a)\n  # x = minA[n - 1]\n  # del newA[newA.index(x)]\n  # newA = list(map(lambda y: y - x, newA))\n  # for i in range(n - 1):\n  #   if len(newA) == 0:\n  #     break\n  #   curMinA = min(newA)\n  #   val = max(minA[n - 2 - i + 1], curMinA)\n  #   if minA[n - 2 - i + 1] <= val:\n  #     minA[n - 2 - i] = val\n  #     x = minA[n - 2 - i]\n  #     if curMinA in newA:\n  #       del newA[newA.index(curMinA)]\n  #     newA = list(map(lambda y: y - curMinA, newA))\n  #   else:\n  #     break\n  res.append(x)\n\nfor index in range(t):\n  print(res[index])",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    # n, k = map(int, input().split())\n    arr= list(map(int, input().split()))\n    # output_arr =[]\n    \n    \n    # box= \n    if len(arr)==1:\n        print(arr[0])\n        continue\n    arr.sort()\n    # print(arr)\n    sumo= arr[0]\n    # print(sumo)\n    res= arr[0]\n    for i in range(1,len(arr)):\n        if i == len(arr):\n            break\n        box= (arr[i])- sumo\n        sumo= sumo+ box\n        # print(\"sumo\", sumo)\n        # print(\"box\", box)\n        if box > res:\n            res= box\n            # print(\"res\", res)\n        \n        \n\n    print(res)",
                true
            ],
            [
                "for s in[*open(0)][2::2]:a=sorted(map(int,s.split()));print(max(y-x\nfor x,y in zip([0]+a,a)))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input().split()\n    for j in range(n):\n        s[j] = int(s[j])\n    s.sort()\n    hieu = 0\n    res = s[0]\n    for i in range(1,n):\n        s[i] = s[i] - hieu -s[i-1]\n        hieu+=s[i-1]\n        res =  max(res,s[i])\n    print(res)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(num) for num in input().split()]\n\n    if n == 1:\n        print(*a)\n    else:\n        m = min(a)\n\n        if m < 0:\n            del a[a.index(m)]\n\n            a = [ai - m for ai in a]\n\n            b = []\n            c = []\n            for ai in a:\n                if ai < 0:\n                    b.append(abs(ai))\n                else:\n                    c.append(ai)\n\n            b = sum(b)\n            a = [ci + b for ci in c]\n\n        a.sort()\n        max_min = a[0]\n        minus = a[0]\n\n        for ind in range(1, len(a)):\n            max_min = max(max_min, a[ind] - minus)\n            minus += a[ind] - minus\n\n        print(max_min)",
                true
            ],
            [
                "import math;from heapq import heappush,heappop,heapify;import random;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());H=1000000000+7\nfor _ in range(I()):\n    n=I()\n    l=L()\n    if len(l)==1:\n        print(l[0]);continue\n    p=min(l)\n    if p<0:\n        l.pop(l.index(p))\n        for i in range(n-1):\n            l[i]-=p\n    l.sort();m=min(l)\n    for i in range(len(l)-1):\n        m=max(l[i+1]-l[i],m)\n    print(m)",
                true
            ],
            [
                "from os import path, truncate\nfrom sys import int_info, stdin, stdout\nif path.exists('tc.txt'):\n    stdin = open('tc.txt', 'r')\ndef gmi(): return map(int, stdin.readline().strip().split())\ndef gms(): return map(str, stdin.readline().strip().split())\ndef gari(): return list(map(int, stdin.readline().strip().split()))\ndef gart(): return tuple(map(int, stdin.readline().strip().split()))\ndef gars(): return list(map(str, stdin.readline().strip().split()))\ndef gs(): return stdin.readline().strip()\ndef gls(): return list(stdin.readline().strip())\ndef gi(): return int(stdin.readline())\n\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==1:\n        print(a[0])\n        continue\n    else:\n        cnt=min(a)\n        a.sort()\n        n=len(a)\n        for i in range(1,n):\n            cnt=max(cnt,a[i]-a[i-1])\n        print(cnt)\n\n\n\n\n\n\n    \n\n   \n\n    \n\n   \n\n# def maxsum(arr):\n#     n=len(arr)\n#     su=0\n#     leftdp=[0]*n\n#     rightdp=[0]*n\n#     c=0\n#     for i in range(0,n,2):\n#         su+=arr[i]\n#     for i in range(1, n, 2):\n#         leftdiff = arr[i]-arr[i-1]\n#         if c-1<0:\n#             leftdp[i]=leftdiff\n#         else:\n#             if leftdp[i-2]>0:\n#                 leftdp[i]=leftdiff+leftdp[i-2]\n#             else:\n#                 leftdp[i]=leftdiff\n#         rightdiff=0\n#         if i+1>=n:\n#             rightdiff=0\n#         else:\n#             rightdiff=arr[i]-arr[i+1]\n#         if c-1<0:\n#             rightdp[i]=rightdiff\n#         else:\n#             if rightdp[i-2]>0:\n#                 rightdp[i]=rightdiff+rightdp[i-2]\n#             else:\n#                 rightdp[i]=rightdiff\n#         c+=1\n#     maxm=0\n#     for i  in range(1,n,2):\n#          maxm=max(maxm,max(leftdp[i],rightdp[i]))\n#     return maxm + su\n        \n        \n\n# arr =list(map(int,input().split()))\n# re=maxsum(arr)\n# print(re)\n\n# x = math.floor(math.log(b)/math.log(2))\n# y = math.floor(math.log(a)/math.log(5))\n",
                true
            ],
            [
                "from collections import defaultdict as d\ndef solve():\n  n = int(input())\n  ll = list(map(int, input().split()))\n  if n == 1:\n    return ll[0]\n  ans = -9999999999\n  temp_sum = 0\n  ll.sort()\n  for i in range(n-1):\n    x = ll[i] - temp_sum\n    temp_sum += x\n    ans = max(ans, x)\n  ans = max(ans, ll[-1] - temp_sum)\n  return ans\n\n\nt = int(input())\nwhile t != 0:\n  res = solve()\n  print(res)\n  t -=1\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    mx = min(a)\n    k = 0\n    for i in range(len(a)-1):\n        mx = max(mx,a[i + 1] - a[i] + k)\n        a[i + 1] = a[i + 1] - a[i] + k\n        k -= a[i]\n    print(mx)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    maxes = []\n    m = 0\n    while len(arr) != 1:\n        maxes.append(arr[-1] - m)\n        m += (arr[-1] - m)\n        del arr[-1]\n    maxes.append(arr[0] - m)\n    print(max(maxes))\n\n",
                true
            ],
            [
                "def f():\n    n=int(input())\n    l=sorted(map(int,input().split()))\n    if n==1:\n        return l[0]\n    t=l[0]\n    for i in range(1,n):\n        t=max(t,l[i]-l[i-1])\n    return t\nfor _ in range(int(input())):\n    print(f())",
                true
            ],
            [
                "n = int(input())\n\nfor _ in range(0, n):\n    input()\n    line = [int(i) for i in input().split()]\n    line.sort()\n    res = line[0]\n    for i in range(0, len(line)-1):\n        diff = line[i+1] - line[i]\n        res = max(res, diff)\n\n    print(res)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = sorted(list(map(int, input().split()))) + [-1000000000]\n    m = 0\n    if n == 1:\n        print(arr[0])\n        continue\n    s = 0\n    c = 0\n    m = arr[0]\n    for i in range(n):\n        c += arr[i] - c\n        if arr[i + 1] - c > m:\n            m = arr[i + 1] - arr[i]\n    print(m)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a=sorted(a)\n    res=a[0]\n    for i in range(n-1):\n        res=max(res,a[i+1]-a[i])\n    print(res)\n        ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    line = sorted(list(map(int, input().split())))\n    k = line[0]\n    for i in range(1, n):\n        k = max(k, line[i] - line[i - 1])\n    print(k)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    if n == 1: ans = x[0]\n    else:\n        x = sorted(x)\n        ans = x[0]\n        for i in range(1, n):\n            xd = x[i] - x[i-1]\n            if xd > ans : ans = xd\n    print(ans)",
                true
            ],
            [
                "for t in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    if n==1:\n        print(*l)\n        continue\n    l.sort()\n    mx=l[0]\n    for i in range(1,n):\n        if (l[i]-l[i-1])>mx:\n            mx=l[i]-l[i-1]\n       \n    print(mx) ",
                true
            ],
            [
                "import math\nT=int(input())\nfor _ in range(T):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==1:\n        print(a[0])\n        continue\n    a.sort()\n    neg=0\n    i=0\n    rem=0\n    pos=0\n    ans=-999999999\n    while i<n:\n        ans=max(ans,a[i]+abs(neg)-pos)\n        if a[i]+abs(neg)-pos<0:\n            neg+=(a[i]+neg)\n        else:\n            pos+=(a[i]+abs(neg)-pos)\n\n        i+=1\n    print(ans)\n    \n\n    \n    ",
                true
            ],
            [
                "def minimal(a):\n    if len(a) == 1:\n        return a[0]\n    a.sort()\n    f = [0] * len(a)\n    f[0] = a[0]\n    s = f[0]\n    for i in range(1, len(a)):\n        f[i] = a[i] - s\n        s += f[i]\n    return max(f)\n\n\nt = int(input())\n# 0 -1 1 4 0 -5 1 8 0 -9 1  12 0\n# 0  1 2 3 4  5 6 7 8  9 10 11 12\nfor qwer in range(t):\n    n = int(input())\n    stro = list(map(int, input().split()))\n    print(minimal(stro))",
                true
            ],
            [
                "t = int(input())\nDIC = {}\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    i = 0\n    tot = 0\n    mx = lst[0]\n    while i < n:\n        mx = max(mx, lst[i] - tot)\n        tot += lst[i] - tot\n        i += 1\n    print(mx)\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    K = list(map(int, input().split()))\n    K.sort()\n    count = K[0]\n    for i in range(n-1):\n        count = max(count,K[i+1]-K[i])\n    print(count)\n",
                true
            ],
            [
                "def main():\n    n = int(input())\n    array = sorted([int(x) for x in input().split()])\n    mx, sm = array[0], array[0]\n    for i in range(1, n):\n        cnt = array[i] - sm\n        sm += cnt\n        mx = max(mx, cnt)\n    print(mx)\n\n\nif __name__ == '__main__':\n    # tests = 1\n    tests = int(input())\n    while tests > 0:\n        tests -= 1\n        main()\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport math\nimport random\nimport heapq\n#sys.setrecursionlimit(10**6)\ninput=sys.stdin.readline\ndef pow(a,n):\n    if n==0:\n        return 1 \n    x=pow(a,n//2)\n    if n%2==0 :\n        return (x*x)\n    else:\n        return (x*x*a)\n \ndef gcd(a,b):\n    while b!=0:\n        a,b=b,a%b\n    return a \n    \ndef bs(arr,le,ri):\n    l=0\n    arr.sort()\n    r=len(arr)-1\n    ans=10000000\n    while l<=r:\n        m=(l+r)//2\n        if arr[m]>=le and arr[m]<=ri:\n            ans=arr[m]\n            r=m-1\n        elif arr[m]<le:\n            l=m+1 \n        else:\n            r=m-1\n    return ans\n \nt=int(input())\n# t=1\nwhile t>0:\n    n=int(input())\n    l=list(map(int,input().split()))\n    l.sort()\n    ans=l[0]\n    s=l[0]\n    for i in l[1:]:\n        ans=max(ans,i-s)\n        s=i\n    print(ans)\n    t-=1\n",
                true
            ],
            [
                "import heapq\nfor step in range(int(input())):\n  n = int(input())\n  heap = list(map(int,input().split()))\n  heapq.heapify(heap)\n  ans = -1e9-1\n  res = 0\n  for i in range(n):\n    m = heapq.heappop(heap)\n    ans = max(m-res,ans)\n    res = m\n  print(ans)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\n\ndef minimumExtraction():\n    n = inp()\n    a = sorted(inlt())\n    diff = 0\n    ret = a[0]\n    for i in range(len(a)):\n        ret = max(ret, a[i] - diff)\n        diff += a[i] - diff\n    print(ret)\n    return\n\n\nif __name__ == '__main__':\n    t = inp()\n    for i in range(t):\n        minimumExtraction()\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**5)\nINF = 10**18\n\nimport heapq  # heapq\u30e9\u30a4\u30d6\u30e9\u30ea\u306eimport\ndef solve():\n    N = int(input())\n    A = list(map(int,input().split()))\n    if N == 1:\n        print(A[0])\n        return\n\n    heapq.heapify(A)\n    cnt = 1\n    ans = heapq.heappop(A)\n    add = ans\n    while cnt < N:\n        n = heapq.heappop(A)\n        cnt += 1\n        ans = max(ans, n-add)\n        add += n-add\n        # print(n,add,ans)\n    \n    print(ans)\n\nQ = int(input())\nfor _ in range(Q):\n    solve()\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if(n==1):\n        print(a[0])\n        continue\n    else:\n        a.sort()\n        s=a[0]\n        for i in range(1,n):\n            a[i]-=s\n            s+=a[i]\n        print(max(a))",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    x = sorted(list(map(int, input().split())))\n    cur, ans = x[0], x[0]\n    for i in x[1:]:\n        ans = max(ans, i - cur)\n        cur += i - cur\n    print(ans)\n",
                true
            ],
            [
                "test = int(input())\n\nfor _ in range(test):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n\n    ans = arr[0]\n    diff = arr[0]\n\n    for i in range(1, n):\n        ele = arr[i] - diff\n        ans = max(ans, ele)\n        diff += ele\n\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(a[0])\n        continue\n    s = 0\n    a.sort()\n    mx = a[0]\n    for i in range(n - 1):\n        s -= a[i] + s\n        mx = max(mx, a[i + 1] + s)\n    print(mx)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==1:\n        print(a[0])\n    elif n==2:\n        print(max(min(a),max(a)-min(a)))\n    else:\n        a.sort()\n        a1 = []\n        a1.append(a[0])\n        s=-float(\"inf\")\n        for i in range(len(a)-1):\n            a1.append(a[i+1]-a[i])\n        print(max(a1))\n\n",
                true
            ],
            [
                "from sys import stdin as f\nfrom heapq import heapify, heappush, heappop\n\n\nt = int(next(f))\nout = []\n\n\nfor _ in range(t):\n    n = int(next(f))\n    a = list(map(int, input().split()))\n    heapify(a)\n    c = 0\n    mx = -float('inf')\n    m = heappop(a)\n    while len(a) > 0:\n        if m > mx:\n            mx = m\n        c += m\n        m = heappop(a) - c\n    if m > mx:\n        mx = m\n    out.append(mx)\n\nprint(*out, sep='\\n')\n",
                true
            ],
            [
                "import heapq as hq\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    hq.heapify(a)\n    ans = a[0]\n    ad = 0\n\n    for i in range(n):\n        #b = [i+ad for i in a]\n        #print(b)\n        x = hq.heappop(a) + ad\n        #print(x, ad)\n        ad -= x\n        ans = max(ans, x)\n        #print(x)\n    print(ans)",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    l.sort()\n    ans=[]\n    ans.append(l[0])\n    if(n==1):\n        print(l[0])\n    else:\n        for i in range(n-1):\n            ans.append(l[i+1]-l[i])\n        print(max(ans))",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    if n==1:\n        print(a[0])\n        continue\n    else:\n        ans=a[0]\n        for i in range(n-1):\n            \n            \n            ans=max(ans,a[i+1]-a[i])\n            \n                     \n        print(ans)",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math, random\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nmod = 1000000007\n\ndef my_main():\n    kase = inp()\n    pans = []\n    mx = int(1e17)\n    for ka in range(kase):\n        n = inp()\n        da = inp(True)\n        da.sort()\n        mx = da[0]\n        sm = 0\n        for i in range(1, n):\n            mx = max(mx, da[i] - da[i-1])\n        pans.append(str(mx))\n    print('\\n'.join(pans))\n\nmy_main()\n\n",
                true
            ],
            [
                "import sys\nreadline = sys.stdin.readline\n\nT = int(readline())\n\nfor t in range(T):\n  N = int(readline())\n  A = list(map(int,readline().split()))\n  A = sorted(A)\n  \n  minus_sum = 0\n  best = A[0]\n  \n  for i in range(N - 1):\n    minus_sum += A[i]\n    A[i + 1] -= minus_sum\n    if A[i + 1] > best:\n      best = A[i + 1]\n  print(best)\n",
                true
            ],
            [
                "#rOkY\n#FuCk\n\n################################### KoPaL ####################################\n\n\nt=int(input())\nwhile(t>0):\n    ma=0\n    a=int(input())\n    l=list(map(int,input().split()))\n    mn=min(l)\n    l.sort()\n    for i in range(0,len(l)-1,1):\n        mn=max(mn,l[i+1]-l[i])\n    print(mn)\n    t-=1\n",
                true
            ],
            [
                "for _ in range(1,int(input())+1):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    arr.sort()\n    if n==1:\n        print(arr[0])\n    else:\n        maxi=arr[0]\n        for i in range(len(arr)-1):\n            j=abs(arr[i]-arr[i+1])\n            maxi=max(maxi,j)\n        print(maxi)",
                true
            ],
            [
                "import sys, collections, math, bisect, heapq, random, functools\n\ninput = sys.stdin.readline\nout = sys.stdout.flush\n\n\ndef solve():\n    n = int(input())\n    k = [*map(int, input().split())]\n    k.sort()\n    ans = k[0]\n    diff = -k[0]\n    for i in range(1,n):\n        cur = k[i] + diff\n        ans = max(cur,ans)\n        diff -= cur\n    print(ans)\n\n\n\n\nif __name__ == '__main__':\n    for i in range(int(input())):\n        solve()",
                true
            ],
            [
                "import sys\nimport heapq\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve(n, arr):\n  ans = min(arr)\n\n  c = 0\n\n  heapq.heapify(arr)\n\n  while n > 1:\n    temp = heapq.heappop(arr)\n    n -= 1\n\n    temp1 = temp - c\n\n    ans = max(ans, temp1)\n\n    c += temp1\n\n    # print(arr)\n\n  temp = heapq.heappop(arr)\n  temp1 = temp - c\n\n  ans = max(ans, temp1)\n\n\n  print(ans)\n\n    \n\n\n\n\n\n\n\nT = get_int()\nwhile T:\n  n = get_int()\n  arr = get_list()\n  solve(n, arr)\n  T -= 1\n",
                true
            ],
            [
                "import sys\nimport math\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom math import inf\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    arr.sort()\n\n    mx = arr[0]\n\n    for i in range(n-1):\n        mx = max(mx,arr[i+1]-arr[i])\n\n    print(mx)\n    ",
                true
            ],
            [
                "b = int(input())\nwhile b:\n    b = b - 1\n    n = int(input())\n    k=list(map(int,input().split()))\n    k.sort()\n    ans=k[0]\n    if n==1:\n        print(ans)\n    else:\n        for i in range(1,n):\n            ans=max(ans,k[i]-k[i-1])\n        print(ans)\n\n",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    l = input()\n    l = [int(i) for i in l.split()]\n    try:\n      if (n == 1):\n        print(l[0])\n        return\n      elif(n == 2):\n        a = min(l)\n        l.remove(a)\n        a = max(a, l[0] - a)\n        print(a)\n        return\n      else:\n        l.sort()\n        mx = l[0]\n        for i in range(n - 1):\n          mx = max(mx, l[i + 1] - l[i])\n        print(mx)\n    \n    except EOFError as e:\n      print(\"Error\")\n\n#cases\nfor case in range(int(input())):\n  solve()\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\ninp_vars_int = lambda: map(int, input().split())\ninp_list_int = lambda: list(map(int, input().split()))\n\nt = int(input())\n\nfor _ in range(t):\n    _ = input()\n    a = inp_list_int()\n    n = len(a)\n    a_s = sorted(a)\n    diff = [a_s[i] - a_s[i-1] for i in range(1, n)]\n    d_s = sorted(diff)\n    if n == 1:\n        print(a[0])\n    else:\n        print(max(a_s[0], max(d_s)))",
                true
            ],
            [
                "t= int(input())\nres=[]\nfor i in range(t):\n    n= int(input())\n    l=input().split()\n    l=[int(i) for i in l]\n    l.sort()\n    sum=0\n    max=-10**9-1\n    for i in range(n):\n        # if i-sum>=0:\n        #     break\n\n        # else:\n        #     sum+=i\n        # temp=l[i]\n        l[i]-=sum\n        sum+=l[i]\n\n        if l[i]>max:\n            max=l[i]\n\n\n    res.append(max)\n\nfor i in res:\n    print(i)\n\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    li=[a[0]]\n    for i in range(1,n):\n        li.append(a[i]-a[i-1])\n    print(max(li))",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    for i in range(n-1, 0, -1):\n        a[i] -= a[i-1]\n    print(max(a))",
                true
            ],
            [
                "t = int(input())\nfor case in range(t):\n  n = int(input())\n  a = list(map(int,input().split()))\n  a.sort()\n  ans = -float('inf')\n  count = 0\n  for i in range(n):\n      a[i]-=count\n      ans = max(ans,a[i])\n      count+=a[i]\n  print(ans)",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    arr.sort()\n    m = -10**9-1\n    for i in range(len(arr)-1):\n        x = arr[i+1] - arr[i]\n        m = max(m,x)\n    if len(arr) > 1:\n        print(max(arr[0],m))\n    else:\n        print(arr[0])",
                true
            ],
            [
                "a = int(input())\nres = []\nfor i in range(a):\n    k = int(input())\n    n = input().split()\n    for i in range(k):\n        n[i] = int(n[i])\n    n = sorted(n)\n    m = n[0]\n    for i in range(k - 1):\n        if n[i + 1] - n[i] > m:\n            m = n[i + 1] - n[i]\n    res.append(m)\nfor i in res:\n    print(i)",
                true
            ],
            [
                "for tc in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    if n==1:\n        print(l[0])\n        continue\n    l.sort()\n    maxi=l[0]\n    for i in range(1,n):\n        maxi=max(l[i]-l[i-1],maxi)\n    print(maxi) ",
                true
            ],
            [
                "for s in[*open(0)][2::2]:a=0,*sorted(map(int,s.split()));print(max(y-x for x,y in zip(a,a[1:])))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t) :\n    n=int(input())\n    araye=input().split()\n    for ii in range(n) :\n        araye[ii]=int(araye[ii])\n    araye.sort()\n    mini=araye[0]\n    for j in range(n-1) :\n        if araye[j+1]-araye[j] > mini :\n             mini = araye[j+1]-araye[j]\n    print(mini)\n",
                true
            ],
            [
                "import heapq\nt = int(input())\nfor case in range(t):\n  n = int(input())\n  l = [int(i) for i in input().split()]\n  heapq.heapify(l)\n  best = heapq.heappop(l)\n  subtract = best\n  while l:\n    x = heapq.heappop(l)\n    best = max(best, x - (subtract))\n    subtract = subtract + (x - subtract)\n  print(best)",
                true
            ],
            [
                "import heapq\nimport math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int,input().split()))\n \n    if len(arr) == 1:\n        print(arr[0])\n    else:\n        heapq.heapify(arr)\n        ans = 0\n        \n        maxv = -math.inf\n        \n        while arr:\n            m = heapq.heappop(arr)            \n            left = m-ans\n            ans += (m-ans)\n            maxv= max(maxv,left)\n        print(maxv)\n        \n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    max_min = -(10**10)\n    d = 0;\n    for i in range(n):\n        max_min = max(max_min, a[i] - d)\n        d = a[i]\n    print(max_min)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if(n==1):\n        print(a[0])\n        continue\n    else:\n        a.sort()\n        m=a[0]\n        for i in range(len(a)-1):\n            m=max(a[i+1]-a[i],m)\n        print(m)",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n\n    nums.sort()\n    max_min = float('-inf')\n    cur = 0\n    for i in range(n):\n        new = nums[i] + cur\n        max_min = max(max_min, new)\n        cur -= new\n\n    print(max_min)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    if n==1:\n        print(l[0])\n        continue\n    l.sort()\n    t=[]\n    for i in range(1,n):\n        t.append(l[i]-l[i-1])\n    if max(t)<min(l):\n        print(min(l))\n    else:\n        print(max(t))\n\n    \n",
                true
            ],
            [
                "from heapq import *\n\nt = int(input())\ndef solve(n, a, idx, offset):\n    mins = []\n    heap = a\n    heapify(heap)\n    offset = 0\n    while (len(heap) != 1):\n        mins.append(heappop(heap) - offset)\n        offset += mins[-1]\n    mins.append(heap[0] - offset)\n    return max(mins)\n\n    \nfor case in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    print(solve(n, a, 0, 0))\n\n   \n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    aaa=list(map(int,input().split()))\n    aaa.sort()\n    go=True\n    s=0\n    b=aaa[0]\n    bm=b\n    for j in range (1,n):\n        s-=aaa[j-1]+s\n        #print(j,aaa[j],s,b)\n        if aaa[j]+s >bm : bm=aaa[j]+s\n        #print(j,s,b,bm)\n        \n    \n    \n    print(bm)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    maxim = a[0]\n    s = maxim\n    for i in range(1, n):\n        maxim = max(maxim, a[i] - s)\n        a[i] = a[i] - s\n        s += a[i]\n    print(maxim)",
                true
            ],
            [
                "# alh = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    mass = list(map(int, input().split()))\n    if n == 1:\n        print(*mass)\n        continue\n    mass = sorted(mass)\n    ans = [mass[0], mass[1]-mass[0]]\n    i = 2\n    while i < n:\n        ans.append(mass[i]-mass[i-1])\n        i += 1\n    print(max(ans))",
                true
            ],
            [
                "t = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    s = s.split(' ')\n    for i in range(0, n):\n        s[i] = int(s[i])\n    s.sort()\n    maxraz = 0\n    if len(s) > 1:\n        for i in range(1, len(s)):\n            if s[i] - s[i - 1] > maxraz:\n                maxraz = s[i] - s[i - 1] \n        if maxraz > s[0]:\n            print(maxraz)\n        else:\n            print(s[0])\n    else:\n        print(s[0])\n\n    t -= 1\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    ans=-1e10\n    if(n==1):\n        ans=input()\n\n    else:\n        arr=list(map(int, input().split()))\n        #print(arr)\n        arr.sort()\n        #print(arr)\n        ans=arr[0]\n        for i in range(1,n):\n            h=arr[i]-arr[i-1]\n            if ans<=h:\n                #print(\"debug\",h, ans)\n                ans=h\n    print(ans)",
                true
            ],
            [
                "'''Author- Akshit Monga'''\nfrom sys import stdin, stdout\ninput = stdin.readline\n\ndef ceil(a,b):\n    return (a+b-1)//b\n\nt = int(input())\nfor _ in range(t):\n    n=int(input())\n    a=[int(x) for x in input().split()]\n    a=sorted(a)\n    ans=a[0]\n    delta=0\n    # print(a)\n    for i in range(n-1):\n        delta-=(a[i]+delta)\n        # print(delta)\n        ans=max(ans,a[i+1]+delta)\n    print(ans)",
                true
            ],
            [
                "# 8\n# 1\n# 10\n# 2\n# 0 0\n# 3\n# -1 2 0\n# 4\n# 2 10 1 7\n# 2\n# 2 3\n# 5\n# 3 2 -4 -2 0\n# 2\n# -1 1\n# 1\n# -2\n\n# 10\n# 0\n# 2\n# 5\n# 2\n# 2\n# 2\n# -2\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    if len(l) == 1:\n        print(l[0])\n        continue\n    if l[0] >= 0:\n        l.insert(0, 0)\n    max_val = 0\n    for j in range(len(l)-1):\n        if l[j+1] - l[j] > max_val:\n            max_val = l[j+1] - l[j]\n    print(max_val)\n",
                true
            ],
            [
                "t = int(input())\n\ninf = -(10**17)\n\nans = []\nfor _ in range(t):\n    n = int(input())\n    nums = [int(_) for _ in input().split()]\n    nums.sort()\n    val = nums[0]\n    pre = nums[0]\n    flag = True\n    for n in nums[1:]:\n        val, pre = max(val, n-pre), n\n    ans.append(str(val))\n\nprint('\\n'.join(ans))",
                true
            ],
            [
                "from heapq import heapify, heappop\nfrom sys import stdin\n\n\ndef maximize(l):\n    heapify(l)\n    total = 0\n    result = None\n    while len(l) != 0:\n        s = heappop(l)\n        d = s - total\n        total = s\n        if result is None:\n            result = d\n        else:\n            result = max(result, d)\n\n    return result\n\n\nt = int(stdin.readline())\n\nfor _ in range(t):\n    stdin.readline()\n    data = [int(d) for d in stdin.readline().strip().split()]\n    result = maximize(data)\n    print(result)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(0,t):\n    n = int(input())\n    lst = list(map(int,input().split()))\n    lst2 = []\n    if n == 1:\n        print(lst[0])\n    else:\n        lst2.append(min(lst))\n        lst.sort()\n        for a in range(1,n):\n            lst2.append(lst[a]-lst[a-1])\n        print(max(lst2))\n\n",
                true
            ],
            [
                "import math\nfrom collections import Counter\nimport copy\n#'YES'\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    arr.sort()\n    prev = arr[0]\n    ans = prev\n    for i in range(1, n):\n        temp = arr[i] - prev\n        ans = max(ans, temp)\n        prev += temp\n    print(ans)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    s=sorted(list(map(int,input().split()))[:n])\n    m=d=s[0]\n    for i in range(1,n):\n        s[i]-=d\n        d+=s[i]\n        m=max(m,s[i])\n    print(m)",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    arr = [int(num) for num in input().split(\" \")]\n    arr.sort()\n    s = 0\n    newArr = [arr[0]]\n    j = 1\n    for j in range(len(arr)-1):\n        newArr.append(arr[j+1] - arr[j])\n    print(max(newArr))\n",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\n\n\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    if N == 1:\n        print(A[0])\n    else:\n        A.sort()\n        print(max(A[0], max(y - x for x, y in zip(A, A[1:]))))\n\n\nfor _ in range(int(input())):\n    solve()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    a.sort()\n    ans = a[0]\n    for i in range(1,len(a)):\n        ans = max(ans, a[i]-a[i-1])\n    print(ans)\n",
                true
            ],
            [
                "from heapq import heapify,heappush,heappop,heappushpop\nfrom collections import defaultdict as dd, deque as dq,Counter as C\nfrom math import factorial as f ,ceil,gcd,sqrt,log\nfrom bisect import bisect_left as bl ,bisect_right as br\nfrom itertools import combinations as c,permutations as p\nfrom math import factorial as f ,ceil,gcd,sqrt,log\nfrom sys import stdin\ninput = stdin.readline\nmp = lambda : map(int,input().split())\nit = lambda: int(input())\nls = lambda : list(input().strip().split())\nmt = lambda  r : [ ls() for _ in range(r)]\nlcm = lambda a,b : (a*b)//gcd(a,b)\n\nfor _ in range(it()):\n    a = it()\n    b = list(mp())\n    b.sort()\n    b = dq(b)\n    tot =0\n    mx = b[0]\n    while b:\n        k = b.popleft()\n        tot+=k\n        if b:\n            mx = max(b[0]-tot,mx)\n            b[0]-=tot\n    print(mx)",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n=int(input())\n    a=sorted(list(map(int,input().split())))\n    c=a[0]\n    for i in range(1,n):\n        c=max(c,a[i]-a[i-1])\n    print(c)\n",
                true
            ],
            [
                "import sys\nimport os.path\n \nif(os.path.exists('input.txt')) :\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    sys.stderr = open(\"error.txt\", \"w\")\n    \ndepth = 1000000\nmod = 1000000007 \nlim = mod * mod\nsys.setrecursionlimit(depth) \n \nlinp = lambda: list(minp())\nminp = lambda: map(int, input().split())\n \nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\n \ndxy = [(1, 0),(-1, 0),(0, 1),(0, -1)]\n\nfor _ in range(int(input())) :\n    n = int(input())\n    a = sorted(linp())\n    ans = a[0]\n    for i in range(1, n) :\n        ans = max(ans, a[i]-a[i-1])\n    print(ans)",
                true
            ],
            [
                "'''removing a negative minimum will always result in good things,\nsince the next minimum will be larger than the previous, and will also be increased by the removal.\nSolution is greedy. Remove a minimum if 2nd_minimum-1st_minimum > 1st_minimum.\n'''\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(a[0])\n        continue\n    a.sort()\n    ma_min = a[0]\n    add = 0\n    for v in a:\n        if v+add > ma_min:\n            ma_min = v+add\n        add += -v-add\n    print(ma_min)\n",
                true
            ],
            [
                "t=int(input())\nfor o in range(t):\n    n = int(input())\n    l= sorted(list(map(int , input().split())))\n    \n    arr=[l[0]]\n    for i in range(n-1):\n        arr+=[l[i+1]-l[i]]\n    if(arr==[]):\n        print(l[0])\n    else:\n        r=max(arr)\n        print(r)\n",
                true
            ],
            [
                "import heapq\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    heapq.heapify(a)\n    ans = heapq.heappop(a)\n    keep = ans\n    while n > 1:\n        b = heapq.heappop(a)\n        ans = max(ans, b-keep)\n        keep = b\n        n -= 1\n    print(ans)\n    ",
                true
            ],
            [
                "from collections import deque\n\nt = int(input())\nfor _ in range(t):\n    ln = int(input())\n    arr = deque(sorted(list(map(int, input().split()))))\n    ans = -1000000000\n    stk = 0\n    for _ in range(len(arr)):\n        #print(arr)\n        mi = arr.popleft()\n        #print('f', mi, stk)\n        if ans < mi-stk:\n            ans = mi-stk\n        stk += mi-stk\n    print(ans)\n    \n    ",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\nprint = sys.stdout.write\n\nfor _ in range(int(input())):\n    _ = input()\n    a = [0] + sorted(map(int, input().split()))\n    best = -9999999999\n    for i in range(1, len(a)):\n        best = max(best, a[i] - a[i - 1])\n    print(str(best) + \"\\n\")\n\n",
                true
            ],
            [
                "    #from _typeshed import SupportsKeysAndGetItem\nimport sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\n# sys.stdin=open(\"input.txt\",\"r\");\n# sys.stdout=open(\"output.txt\",\"w\")\n####### GLOBAL ###############\nMOD=1000000007\nNO=lambda:print(\"NO\")\nYES=lambda:print(\"YES\")\n_1=lambda:print(-1)\nari=lambda:[int(_) for _ in input().split()]\ncin=lambda:int(input())\ncis=lambda:input()\nshow=lambda x: print(x)\nfast= lambda:sys.stdin.readline()\n\n########### END #########\n######\ntest_case=1\ntest_case=int(input())\n######\nsys.setrecursionlimit(10**6)\n    \ndef ans():\n    n=cin()\n    \n    arr=ari()\n    if n==1:\n        print(*arr)\n        return\n    arr.sort()\n    maxi=arr[0]\n    # arr.append(0)\n    \n    for i in range(len(arr)-1):\n        maxi=max(maxi,arr[i+1]-arr[i])\n    print(maxi)\n    return\nfor _ in range(test_case):\n    ans()\n    ",
                true
            ],
            [
                "t = int(input())\n\nfor test in range(t):\n    n = int(input())\n    p = list(map(int,input().split()))\n    if(len(p)==1):\n        print(p[0])\n        continue\n    elif(len(p)==2):\n        print(max(min(p[0],p[1]),abs(p[0]-p[1])))\n        continue\n    ans = min(p)\n    p.sort()\n    for i in range(len(p)-2,-1,-1):\n        ans = max(ans,p[i+1]-p[i])\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    line = [int(i) for i in input().split()]\n    line.sort()\n    awn = line[0]\n    for i in range(n - 1):\n        i = line[i + 1] - line[i]\n        if i > awn:\n            awn = i\n\n    print(awn)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if n == 1:\n        print(a[0])\n    else:\n        ans = min(a)\n        for i in range(len(a) - 1, -1, -1):\n            ans = max(ans, a[i] - a[i - 1])\n        print(ans)       ",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    k=p=0\n    smax=a[0]\n    for j in range(n-1):\n        k-=a[p]\n        smax=max(smax,k+a[p+1])\n        a[p+1]+=k\n        p+=1\n    print(smax)\n",
                true
            ],
            [
                "for t in range(int(input())):\n    n= int(input())\n    lis = list(map(int, input().split()))\n    if len(lis)==1:\n        print(lis[0])\n    else:\n        lis.sort()\n        maximum=lis[-1]\n        count=0\n        index=-1\n        #print(lis)\n        if lis[0]<0:\n            temp=lis[0]\n            for i in range(len(lis)):\n                lis[i]= lis[i]-temp\n                #print(lis[i],temp)\n        for i in range(len(lis)):\n            if lis[i]==0:\n                index=i\n        if index == n-1:\n            print(0)\n        else:\n            lis = lis[index+1:]\n            #print(lis)\n            if len(lis)==1:\n                print(lis[0])\n            else:\n                count=0\n                res=lis[0]\n                for i in range(len(lis)):\n                    val=lis[i]-count\n                    #print(val,i)\n                    if val>res:\n                        res=val\n                    count+=val\n                print(res)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    k=1\n    b=[0]*n\n    for j in range(1,n):\n        b[j]=-a[j-1]\n    for j in range(1,n):\n        \n        a[j]+=b[j]\n    print(max(a))",
                true
            ],
            [
                "for _ in range(int(input())):\n    l = int(input())\n    a = input().split()\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    if len(a) == 1:\n        print(a[0])\n        continue\n    a.sort()\n    m = a[0]\n    for i in range(len(a) - 1):\n        m = max(m,a[i+1] - a[i])\n\n    print(m)\n",
                true
            ],
            [
                "# Code by : Sam._.072\nimport sys\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    x=a[0]\n    h=a[0]\n    for i in range(1,n):\n        if a[i]-x>h:\n            h=a[i]-x\n        x+=(a[i]-x)\n    print(h)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nT = int(input())\nresult = []\nfor _ in range(T):\n    _ = input()\n    a = list(map(int, input()[:-1].split()))\n\n    # Values\n    max_val = float(-float('inf'))\n    sub_count = 0\n\n    # Sorting\n    a.sort()\n\n    if len(a) == 1:\n        result.append(str(a[0]))\n        continue\n\n    for i in range(0, len(a) - 1):\n        # Checking max_val\n        fst = a[i]\n        max_val = max(max_val, fst)\n        \n        # set sub_count\n        sub_count += fst\n        # calculate\n        a[i + 1] -= sub_count\n\n    # Last\n    result.append(str(max(max_val, a[-1])))\n\nprint('\\n'.join(result))",
                true
            ],
            [
                "t= int(input())\nfor q in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    lis = [ arr[0]]\n    for i in range(n-1):\n        lis.append(arr[i+1] - arr[i])\n    print(max(lis))    ",
                true
            ],
            [
                "\n\ndef solve(a, n):\n    a.sort()\n    ans = a[0]\n    for i in range(1, n):\n        ans = max(ans, a[i] - a[i - 1])\n    return ans\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(a, n))",
                true
            ],
            [
                "import math\nfrom collections import OrderedDict        \n\n\nt = int(input())\nwhile(t>0):\n    n = int(input())\n    inp = input()\n\n    a = list(map(int,inp.split(\" \")))\n    flag = 1\n    a.sort()\n    if(n == 1):\n        print(a[0])\n    else:    \n        max = a[0]\n        for i in range(0,n-1):\n            s = a[i+1] - a[i]\n            if(s>max):\n                max = s    \n\n        print(max)\n\n\n    # print(a[i] - adder)\n                    \n    t-=1    \n\n            \n\n#                            \u2580\u2588 \u2584\u2588 \u2588\u2580\u2588 \u2588\u2580\u2588 \n#                            \u2588\u2584 \u2591\u2588 \u2588\u2584\u2588 \u2588\u2584\u2588\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    arr.sort()\n    mx=arr[0]\n    for i in range(n-1):\n        if arr[i+1]-arr[i]>mx:\n            mx=arr[i+1]-arr[i]\n    print(mx)",
                true
            ],
            [
                "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\ninteractive = False\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\n\nflush = sys.stdout.flush\nif interactive and not testing:\n    input = sys.stdin.readline\nelse:\n    inputData = InputData()\n    input = inputData.input\n\ndef intin():\n    return(int(eval(input())))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(eval(input())))\ndef strin():\n    return eval(input())\ndef lout(l, sep=\"\\n\", toStr=True):\n    print((sep.join(list(map(str, l)) if toStr else l)))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print((args[0] if len(args)==1 else args))\n    if kargs: print([(k,v) for k,v in list(kargs.items())])\ndef ask(q):\n    sys.stdout.write(str(q)+'\\n')\n    flush()\n    return intin()\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\nfrom heapq import *\n# from Queue import Queue\n\ndef main():\n    n = intin()\n    a = intlin()\n    heapify(a)\n    ans = a[0]\n    cml = 0\n    # dout(a)\n    while len(a)>1:\n        cur = heappop(a)\n        # dout(a)\n        cml = cur\n        ans = max(ans, a[0]-cml)\n        # dout(cur=cur,cml=cml,a0=a[0], ans=ans)\n\n    return ans\n\nanss = []\nfor _ in range(intin()):\n    anss.append(main())\n    # anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print((int(round(time() * 1000))  - start_time))\n",
                true
            ],
            [
                "T = int(input())\nwhile T>0:\n    T -= 1\n    n = int(input())\n    array = sorted([int(x) for x in input().split()])\n    ans = array[0]\n    for i in range(len(array) - 1):\n        ans = max(ans, array[i+1] - array[i])\n    print(ans)",
                true
            ],
            [
                "from math import ceil, log2, floor,sqrt,gcd\nfrom collections import defaultdict,deque\n\nimport sys\nimport os.path\n\nsys.setrecursionlimit(200000)\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r+\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\n\n# input = sys.stdin.readline\n# print=sys.stdout.write\ndef MI():\n    return map(int, input().split())\n\ndef bfs(s,adj):\n     \n    V = 10**5+2\n    visited = [False] * V\n    level = [0] * V\n  \n    for i in range(V):\n        visited[i] = False\n        level[i] = 0\n    queue = deque()\n    visited[s] = True\n    queue.append(s)\n    level[s] = 0\n  \n    while (len(queue) > 0):\n\n        s = queue.popleft()\n        for i in adj[s]:\n            if (not visited[i]):\n                level[i] = level[s] + 1\n                visited[i] = True\n                queue.append(i)\n  \n\n    \n             \n    return level\n\ndef dfs(node,tree,d,v):\n    v[node]=1\n    for j in d[node]:\n        if v[j]==0:\n            tree[node].append(j)\n            dfs(j,tree,d,v)\n\nmod=10**9+7\ndef solve(testcase):\n    n = int(input())\n    # x,n=MI()\n    a=list(MI())\n    a.sort()\n    neg=pos=0\n    m=10**10\n    minp=10**10\n    ans=min(a)\n    m1=-10**10\n    maxp=-10**10\n    # print(a)\n    \n    \n    for i in a:\n        ans=max(ans,i-neg)\n        if i-neg>0:\n            pos+=i-neg\n            neg+=i-neg\n        else:\n            neg+=i-neg\n        \n            \n    \n    \n    \n    # ans=max(ans,(a[-1]-neg)-(pos-a[-1]))\n\n\n\n\n\n\n    # a[-1]-(neg)\n    print(ans)\n\n    \n    # # neg=pos=0\n    # if m==10**10:\n    #     print(neg)\n    # else:\n    #     print(m-neg)\n\n    \n\n\n\n\n        \n    \n        \n\n    \n   \n\n\n    \n            \n        \n    \n\n    \n    \n        \n    \n  \n        \n\n\n            \n\n\n\n\n        \n\n\n    \n\n\n\n\n\n\n\n    \n    \n\n    \n\n    \n    \n    \n\n    \n\n\n\n\n    \n\n\n\n\n    \n    \n    \n\nt=int(input())\nfor _ in range(t):\n    solve(_+1)",
                true
            ],
            [
                "t = int(input())\na = []\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int,input().split()))\n    s.sort()\n    minus = 0\n    ans = -10000000000000000000000000000000000000000000\n    for i in range(n):\n        ans = max(ans, s[i]-minus)\n        minus = s[i]\n    a.append(ans)\nfor elem in a:\n    print(elem)\n",
                true
            ],
            [
                "from sys import stdin,stdout\ninput = stdin.readline\nfor _ in range(int(input())):\n    n=int(input())\n    li=list(map(int,input().split()))\n    if n==1:\n        print(li[0])\n        continue\n    li.sort()    \n    ans=li[0]\n    for i in range(1,n):\n        ans=max(ans,li[i]-li[i-1])\n    print(ans)",
                true
            ],
            [
                "\n\ntestcase=int(input())\n\nfor test in range(testcase):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    res=a[0]\n    for i in range(1,n):\n        res=max(res,a[i]-a[i-1])\n    print(res)\n\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\n#sys.setrecursionlimit(10**7)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\n#Fenwick Tree point update range sum\ndef update_it(bit,i,val):\n    n=len(bit)\n    while(i<n):\n        bit[i]+=val\n        i+=i&(-i)\ndef get_ans(bit,i):\n    n=len(bit)\n    tot=0\n    while(i>0):\n        tot+=bit[i]\n        i-=i&(-i)\n    return tot\nprime=[2,3,5,7,11,13,17,19,23,29]\ndef hnbhai(tc):\n    n=sb()\n    a=sd()\n    a.sort()\n    temp=0\n    mx=float(\"-inf\")\n    for i in range(n):\n        mx=max(mx,a[i]-temp)\n        temp+=a[i]-temp\n    print(mx)\nfor _ in range(sb()):\n    hnbhai(_+1)\n",
                true
            ],
            [
                "import sys\n#sys.setrecursionlimit(20000)\n#from collections import deque #Counter\n#from itertools import accumulate\n#from functools import product\n#import math\n\n\ndef rall():\n    return sys.stdin.readlines()\ndef rl():\n    return sys.stdin.readline().strip()\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr( something='' ):\n    sys.stdout.write( str(something) + '\\n')\ndef pra( array ):\n    sys.stdout.write( ' '.join([str(x) for x in array]) + '\\n')\n\n\ndef solve(array):\n    return array\n\n\nif __name__ == '__main__':\n\n    NT = int( rl() )\n    #a,b = map(int,rl().split(' '))\n\n    for ti in range(NT):\n        _ = int(rl())\n        array = list(map(int, rl().split(' ')))\n        if True:#len(array)==1:\n            #mx = array[0]\n        #else:\n            s = sorted(array)\n            #print(s)\n            l = s[0]\n            mx = s[0]\n            for v in s[1:]:\n                d = v-l\n                mx = max(mx,d)\n                l = v\n\n        #a,b = map(int, rl().split(' '))\n        # vals = rl_types( [str,float,float] )\n        pr(mx)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n\n    if len(arr) == 1:\n        print(arr[0])\n        continue\n\n    arr.sort()\n\n    for i in range(len(arr)-1, 0, -1):\n        arr[i] -= arr[i-1]\n\n    print(max(arr))\n\n\n\n\n",
                true
            ],
            [
                "import sys,math\n#sys.stdin=open('input.txt','r')\n#sys.stdout=open('output.txt','w')\n\n\n\n\ndef solve():\n    n=int(input())\n    l=list(map(int,input().split()))\n    if(len(l)==1):\n        print(l[0])\n        return\n    l.sort()\n    ans=[]\n    ans.append(l[0])\n    for i in range(len(l)):\n        if(i==0):\n            dec=l[0]\n            continue\n        val=l[i]-dec\n        ans.append(val)\n        dec+=val\n    #print(ans)\n    print(max(ans))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt=int(input())\nwhile(t!=0):\n    solve()\n    t-=1\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    l.sort()\n    m=min(l)\n    if n==1:\n        print(l[0])\n    else:\n        for i in range(n-1):\n            m=max(m,l[i+1]-l[i])\n\n        print(m)\n\n    \n\n    ",
                true
            ],
            [
                "import sys\nfrom heapq import heappush, heappop\ninput = sys.stdin.readline\n\nt = int(input())\n\n_ans = []\n\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n\n    heap = []\n    ans = -10e9 - 1\n    if a[0] < 0:\n        ans = max(ans, a[0])\n        for i in range(1, n):\n            heappush(heap, a[i] - a[0])\n    else:\n        for i in range(n):\n            heappush(heap, a[i])\n    \n    p = 0\n    while(len(heap) > 0):\n        v = heappop(heap)\n        ans = max(ans, v - p)\n        p += v - p\n\n    _ans.append(ans)\n\nfor el in _ans:\n    print(el)",
                true
            ],
            [
                "def get_ans(n, a):\n    max_min = -10000000000\n    already_deleted_sum = 0\n    a.sort()\n    for _i in range(len(a)):\n        i = a[_i]\n        i -= already_deleted_sum\n        max_min = max(max_min, i)\n        already_deleted_sum += i\n    return max_min\n\n\nanss = []\nt = int(input())\nfor _ in range(t):\n    _n = int(input())\n    _a = list(map(int, input().split()))\n    anss.append(get_ans(_n, _a))\n\nfor ans in anss:\n    print(ans)\n",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    l = input()\n    l = [int(i) for i in l.split()]\n    try:\n      if (n == 1):\n        print(l[0])\n        return\n      elif(n == 2):\n        a = min(l)\n        l.remove(a)\n        a = max(a, l[0] - a)\n        print(a)\n        return\n      else:\n        l.sort()\n        mx = l[0]\n        for i in range(n - 1):\n          mx = max(mx, l[i + 1] - l[i])\n        print(mx)\n\n    except EOFError as e:\n      print(\"Error\")\n\n\nfor case in range(int(input())):\n  solve()\n",
                true
            ],
            [
                "t = int(input())\n\nwhile t>0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    min = a[0]\n    minus = a[0]\n    for index in range(1, n):\n        # print(a)\n        a[index]-=minus\n        if min<a[index]:\n            min = a[index]\n        minus+=a[index]\n    print(min)\n    t-=1\n\n# from heapq import heapify, heappush, heappop\n\n# t = int(input())\n\n# while t>0:\n#     n = int(input())\n#     a = list(map(int, input().split()))\n#     heapify(a)\n#     min = a[0]\n#     for i in range(n):\n#         e = heappop(a)\n#         if e>min:\n#             min = e\n#         for j in range(n-i-1):\n#             a[j]-=e\n#         heapify(a)\n#         # print(a)\n#     print(min)\n#     t-=1",
                true
            ],
            [
                "t=int(input())\n\nfor t in range(t):\n    n=int(input())\n    a=[int(x) for x in input().split()]\n    a.sort()\n    ans=a[0]\n    for i in range(1,n):\n        if a[i]-a[i-1]>ans:\n            ans=a[i]-a[i-1]\n    print(ans)\n        \n        \n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import sys\ninput = sys.stdin.readline\n\nT = int(input())\nresult = []\n\nfor _ in range(T):\n    raw_keyboard = input()[:-1]\n    word = input()[:-1]\n    t = 0\n\n    if len(word) == 1:\n        result.append(str(0))\n        continue\n\n    key_map = {}\n    for i, k in enumerate(raw_keyboard):\n        key_map[k] = i + 1\n\n    for i in range(len(word)-1):\n        t += abs(key_map[word[i]] - key_map[word[i+1]])\n    result.append(str(t))\n\nprint('\\n'.join(result))",
                true
            ],
            [
                "\n\nt = int(input())\n\nres = []\n\nfor i in range(t):\n    d = {}\n    s2 = str(input())\n    for i in range(len(s2)):\n        d[s2[i]] = i + 1\n    s = str(input())\n    ans = 0\n    for i in range(1, len(s)):\n        ans += abs(d[s[i]] - d[s[i-1]])\n    res.append(ans)\n\nfor i in res:\n    print(i)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    alph=input()\n    s=input()\n    suu=0\n    for i in range(len(s)-1):\n        suu+=abs(alph.index(s[i+1])-alph.index(s[i]))\n    print(suu)",
                true
            ],
            [
                "t = int(input())\nfor qwer in range(t):\n    clav = list(input())\n    sl = list(input())\n    s = 0\n    d = clav.index(sl[0])\n    for el in sl[1:]:\n        s += abs(clav.index(el) - d)\n        d = clav.index(el)\n    print(s)",
                true
            ],
            [
                "t = int(input())\nfor j in range(t):\n    letters = str(input())\n    s = str(input())\n    dictiony = {}\n    calculating = []\n    word = []\n    sum = 0\n    for m in s:\n        word.append(m)\n    for i in letters:\n        dictiony[i] = letters.index(i)\n    for k in word:\n        calculating.append(dictiony.get(k))\n    n = 0\n    while n != (len(word)-1) and len(s) > 0:\n        calc = abs(calculating[n + 1] - calculating[n])\n        sum += calc\n        n += 1\n    print(sum)\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    cnt = 0\n    st = input()\n    st1 = input()\n    for j in range(1, len(st1)):\n        cnt += abs(st.index(st1[j]) - st.index(st1[j - 1]))\n    print(cnt)",
                true
            ],
            [
                "for i in range(int(input())):\n    key = input()\n    s = input()\n    cnt=0\n    for j in range(len(s)-1):\n        cnt+=abs(key.index(s[j]) - key.index(s[j+1]))\n    print(cnt)\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**5)\nINF = 10**18\n\ndef solve():\n    keyboard = input()\n    s = input()\n\n    cur = -1\n    ans = 0\n    for c in s:\n        if cur == -1:\n            cur = keyboard.index(c)\n        else:\n            cur2 = keyboard.index(c)\n            ans += abs(cur2 - cur)\n            cur = cur2\n    print(ans)\n    \nQ = int(input())\nfor _ in range(Q):\n    solve()",
                true
            ],
            [
                "\nt = int(input())\n\n\nwhile t > 0:\n    keyboard = input()\n    s = input()\n    start = -1\n    total = 0\n    for i in range(len(s)):\n        loc = keyboard.find(s[i])\n        # print(s[i], loc)\n        assert loc != -1\n        if start >= 0:\n            total += abs(loc - start)\n        start = loc\n    print(total)\n    t -= 1",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    order = dict(zip(list(input()),range(1,27)))\n    string = input()\n    time=0\n    for i in range(1,len(string)):\n        time+= abs(order[string[i]]-order[string[i-1]])\n    print(time)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    l1 = list(s)\n    s1 = input()\n    l2 = list(s1)\n    l3 = []\n    sum = 0\n    k = 0\n    for i in range(0,len(l2)):\n        for j in range(0,len(l1)):\n            if(l2[i] == l1[j]):\n               l3.append(j+1)\n                \n    l = len(l3)\n    for i in range(0,l-1):\n        sum = sum + (abs(l3[i+1] - l3[i]))\n    print(sum)\n",
                true
            ],
            [
                "test = int(input())\nlistT = []\nfor k in range(test): \n    board = input()\n    letter = input()\n    listT.append((board,letter))\nfor z in listT:\n    boardlen = len(z[0])\n    letterlen = len(z[1])\n    ans = 0\n    if(letterlen > 1):\n        location = [j for i in z[1] for j in range(0,boardlen) if z[0][j] == i ]\n        length = len(location)\n        for l in range(0,length-1):\n            ans = ans + abs(location[l+1] - location[l])\n        print(ans)\n    else:\n        print(ans)",
                true
            ],
            [
                "def solve():\n    atoz = list(input())\n    s = input()\n    n = [atoz.index(i)+1 for i in s]\n    c = 0\n    for i in range(len(n)-1):\n        c = c + abs(n[i] - n[i+1])\n    print(c)\nt = int(input())\nfor _ in range(t):\n    solve()",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    al = input()\n    m = {}\n    for j in range(26):\n        m[al[j]] = j\n    s = input()\n    ans = 0\n    for j in range(1, len(s)):\n        ans += abs(m[s[j]] - m[s[j - 1]])\n    print(ans)\n",
                true
            ],
            [
                "ladwa = int(input())\nfor fcuk in range(ladwa):\n    klh = []\n    sum=0\n    shakeer = input()\n    basha = input()\n    for j in range(len(basha)):\n        for i in range(len(shakeer)):\n            if(basha[j]==shakeer[i]):\n                klh.append(i+1)\n    for i in range(1,len(klh)):\n        sum = sum + abs(klh[i-1] - klh[i])\n    print(sum)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a = input()\n    b = input()\n    c = {}\n    s = 0\n    for i in a:\n        c[i] = a.index(i)\n    for i in range(len(b) - 1):\n        s = s + abs(c[b[i + 1]] - c[b[i]])\n    print(s)\n",
                true
            ],
            [
                "import sys\n\nnum_testcases = None\ninputs = []\ni = 0\n\nfor line in sys.stdin:\n    if not num_testcases:\n        num_testcases = int(line)\n\n    if i % 2 == 1:\n        inputs.append([line.strip()])\n    elif len(inputs) > 0:\n        inputs[-1].append(line.strip())\n\n    i += 1\n\nfor a in inputs:\n    keyboard = a[0]\n    s = a[1]\n    d = {}\n    for i, c in enumerate(keyboard):\n        d[c] = i\n\n    prev = None\n    output = 0\n    for c in s:\n        if prev == None:\n            prev = c\n        else:\n            dist = d[prev] - d[c]\n            output += abs(dist)\n            prev = c\n\n    print(output)\n\n",
                true
            ],
            [
                "def calc(i, s):\n\n    ans = 0\n    for val in s:\n        ans += abs(i - index[val])\n        i = index[val]\n\n    return ans\n\n\nfor _ in range(int(input())):\n    keyboard = input()\n    string = input()\n\n    index = {}\n    for i in range(len(keyboard)):\n        index.update({keyboard[i]: i})\n\n    a = 10**9\n    for i in range(len(keyboard)):\n        cur_idx = index[keyboard[i]]\n        a = min(a, calc(cur_idx, string))\n\n    print(a)\n",
                true
            ],
            [
                "def op():\n    keyboard = list(input())\n    s = list(input())\n    p = keyboard.index(s[0])\n    o = 0\n    for i in range(len(s)):\n        o += abs(keyboard.index(s[i])-p)\n        p = keyboard.index(s[i])\n    return o\nfor i in range(int(input())):\n    print(op())",
                true
            ],
            [
                "def input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n    \ntest_cases = input_int()\nkeyboards = []\nkeywords = []\n\nwhile test_cases:\n    keyboards.append(input())\n    keywords.append(input())\n    \n    test_cases -= 1\n\nfor i in range(len(keywords)):\n    dict_key = {}\n    result = 0\n    \n    for letter in keywords[i]:\n        if letter not in dict_key:\n            dict_key[letter] = 0\n            \n    for index, letter in enumerate(keyboards[i]):\n        if letter in dict_key:\n            dict_key[letter] = index+1\n    \n    prev = -1\n    \n    for letter in keywords[i]:\n        if prev == -1:\n            prev = dict_key[letter]\n            continue\n        \n        result += abs(prev - dict_key[letter])\n        prev = dict_key[letter]\n\n    print(result)",
                true
            ],
            [
                "def main():\n    n = int(input())\n    for i in range(n):\n        alp = input()\n        word = input()\n        pr = alp.index(word[0])\n        sum = 0\n        for j in range(1, len(word)):\n            x = alp.index(word[j])\n            sum += abs(pr - x)\n            pr = x\n\n        print(sum)\n\nmain()",
                true
            ],
            [
                "from itertools import permutations, combinations, combinations_with_replacement\nfrom bisect import bisect_left, bisect_right  # https: // docs.python.org/3/library/bisect.html\nfrom typing import List\nfrom math import ceil, floor, gcd, sqrt\nfrom itertools import accumulate\nimport string\n\ndef main():\n    tt = int(input())\n    for _ in range(tt):\n        # n, a, b = map(int, input().split())\n        # lst1 = list(map(int, input().split()))\n        # lst2 = list(map(int, input().split()))\n        n = input()\n        dd = {}\n        for i in range(26):\n            dd[n[i]] = dd.get(n[i], i+1)\n        # print(dd)\n        word = input()\n\n        s = 0\n        for j in range(1, len(word)):\n            s= s+ abs(dd[word[j]]-dd[word[j-1]])\n        print(s)\nmain()",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    sx=input()\n    d={}\n    for i in range(len(sx)):\n        d[sx[i]]=i+1\n    # print(d)\n    s=input()\n    c=0\n    curr=d[s[0]]\n    for i in range(1,len(s)):\n        # print(curr,d[s[i]],abs(curr-d[s[i]]))\n        c+=abs(curr-d[s[i]])\n        curr=d[s[i]]\n    print(c)",
                true
            ],
            [
                "import math\n\ndef solve(s, d):\n    r = 0\n    if len(s) <= 1:\n        return r\n    for i in range(1, len(s)):\n        r += abs(d[s[i]] - d[s[i - 1]])\n    \n    return r\n\nt=int(input())\nfor _ in range(t):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        d[s[i]] = i + 1\n    s = input()\n    print(solve(s, d))",
                true
            ],
            [
                "for _ in range(int(input())):\n    x=0\n    mp={}\n    for i in input():\n        mp[i]=x\n        x+=1\n    \n    s=[mp[i] for i in input()]\n    print(sum(abs(s[i]-s[i+1]) for i in range(len(s)-1)))\n    ",
                true
            ],
            [
                "#  map(int, input().split())\n#  list(map(int, input().split()))\n\nfor _ in range(int(input())):\n    keyboard = list(input())\n    s = list(input())\n    time = 0\n    for i in range(1,len(s)):\n        time += abs(keyboard.index(s[i]) - keyboard.index(s[i - 1]))\n    print(time)",
                true
            ],
            [
                "t=int(input())\nwhile t>=1:\n    t-=1\n    a=str(input())\n    s=str(input())\n    alpha=list(a)\n    l=[]\n    for i in range(len(s)):\n        for j in range(len(alpha)):\n            if s[i]==alpha[j]:\n                l.append(j+1)\n    ans=0\n    for i in range(len(l)-1):\n        ans+=abs(l[i]-l[i+1])\n    print(ans)\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor xx in range(t):\n    s = input()\n    #print(s)\n    a = input()\n    #print(a)\n    c = [0 for xe in range(0, 26)]\n    for i in range(len(s)):\n        c[ord(s[i]) - ord('a')] = i\n    pr = -1\n    ans = 0\n    for i in range(len(a)):\n        if pr == -1:\n            pr = c[ord(a[i]) - ord('a')]\n        else:\n            ans = ans + abs(c[ord(a[i]) - ord('a')] - pr)\n            pr = c[ord(a[i]) - ord('a')]\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    keys = input()\n    inp = input()\n    dkeys = {}\n    for i in range(len(keys)):\n        dkeys[keys[i]] = i + 1\n    ans = 0\n    for i in range(1,len(inp)):\n        ans += abs(dkeys[inp[i]] - dkeys[inp[i-1]])\n    print(ans)\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    letters = input()\n\n    mat = {}\n    in_ = 0\n    \n    for i in letters:\n        mat[i] = in_\n        in_ += 1\n\n    word = input()\n    time = 0\n\n    for i in range(1, len(word)):\n        time += abs(mat[word[i]] - mat[word[i-1]])\n\n    print(time)\n        \n",
                true
            ],
            [
                "n=int(input())\nfor i in range(0,n):\n    sum=0\n    q=input()\n    s=input()\n    for j in range(0,len(s)-1):\n        t1=0\n        t=0\n        for k in range(0,len(q)):\n            if (q[k]==s[j]):\n                t1=k\n            if (q[k]==s[j+1]):\n                t=k\n        sum=sum+abs(t1-t)\n    print (sum)",
                true
            ],
            [
                "a = int(input())\nfor i in range(a):\n    st = str(input())\n    st1 = str(input())\n    ls = []\n    for i in range(len(st1)):\n        for j in range(len(st)):\n            if(st1[i] == st[j]):\n                ls.append(j)\n    print(sum([abs(ls[x] - ls[x-1]) for x in range(1,len(ls))]))            \n    ",
                true
            ],
            [
                "# cook your dish here\nt = int(input())\nfor i in range(t):\n    alpha = {}\n    s = list(input())\n    for idx, ch in enumerate(s):\n        alpha[ch] = idx\n    \n    ans = 0\n    inp = list(input())\n    inp.append(inp[-1])\n    for idx, ch in enumerate(inp[:-1]):\n        ans = ans + abs(alpha[ch] - alpha[inp[idx+1]])\n    \n    print(ans)",
                true
            ],
            [
                "def stri(s):\n    return [char for char in s]\n\ndef solve():\n    keyboard =stri(input())\n    s = str(input())\n    compt = 0\n    for i in range(1,len(s)) :\n        compt += abs( keyboard.index(s[i-1]) - keyboard.index(s[i]))\n        #print(abs( keyboard.index(s[i-1])  - keyboard.index(s[i])))\n    print(compt)    \n    \ndef main():\n    t = int(input())\n    \n    for i in range(t):\n        solve()\n    \n    \nmain()",
                true
            ],
            [
                "# alh = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nt = int(input())\nfor _ in range(t):\n    alh = input()\n    st = input()\n    ans = 0\n    for i in range(1, len(st)):\n        ans += abs(alh.index(st[i]) - alh.index(st[i-1]))\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a=input()\n    s=input()\n    t=0\n    for i in range(1,len(s)):t+=abs(a.index(s[i-1])-a.index(s[i]))\n    print(t)",
                true
            ],
            [
                "for i in range(int(input())):\n    let=input()\n    str=input()\n    count=0\n    k=len(str)\n    for i in range(1,k):\n        count+=abs(let.find(str[i])-let.find(str[i-1]))\n    print(count)\n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    count = 0\n    board = input()\n    word = input()\n\n    board = list(board)\n    word  = list(word)\n\n\n    n = len(word)\n    for i in range(0,n-1):\n\n        a = board.index(word[i])+1\n        b = board.index(word[i+1])+1\n        count = count + abs(a-b)\n    print(count)\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\n#sys.setrecursionlimit(10**7)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\n#Fenwick Tree point update range sum\ndef update_it(bit,i,val):\n    n=len(bit)\n    while(i<n):\n        bit[i]+=val\n        i+=i&(-i)\ndef get_ans(bit,i):\n    n=len(bit)\n    tot=0\n    while(i>0):\n        tot+=bit[i]\n        i-=i&(-i)\n    return tot\nprime=[2,3,5,7,11,13,17,19,23,29]\ndef hnbhai(tc):\n    s=sa()\n    t=sa()\n    d={}\n    for i in range(26):\n        d[s[i]]=i\n    tot=0\n    for i in range(1,len(t)):\n        tot+=abs(d[t[i]]-d[t[i-1]])\n    print(tot)\n    return\nfor _ in range(sb()):\n    hnbhai(_+1)\n",
                true
            ],
            [
                "t = int(input())\nanswers = []\nfor i in range(t):\n    keyboard = input()\n    word = input()\n    prev_letter = word[0]\n    prev_coords = keyboard.find(prev_letter)\n    word = word[1:]\n    ans = 0\n    for letter in word:\n        if letter != prev_letter:\n            coords = keyboard.find(letter)\n            ans += abs(coords - prev_coords)\n            prev_letter = letter\n            prev_coords = coords\n    answers.append(ans)\nfor ans in answers:\n    print(ans)",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math, random\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nmod = 1000000007\n\ndef my_main():\n    kase = inp()\n    pans = []\n    mx = int(1e17)\n    for ka in range(kase):\n        mp = {c:idx for idx, c in enumerate(inst())}\n        da = inst()\n        ans = 0\n        for i in range(1, len(da)):\n            ans += abs(mp[da[i]] - mp[da[i-1]])\n        pans.append(str(ans))\n    print('\\n'.join(pans))\n\nmy_main()\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a = input()\n    a = list(a)\n    s = input()\n    l =[]\n    for i in range(len(s)):\n        l.append(a.index(s[i])+1)\n    s= 0 \n    for i in range(1,len(l)):\n        s = s + (abs(l[i]-l[i-1]))\n    print(s)",
                true
            ],
            [
                "n=int(input())\nans=[]\na=0\n\nfor i in range(n):\n  l=str(input())\n  l=l.lower()\n  q=str(input())\n  q=q.lower()\n  for k in range(len(q)-1):\n    s=abs((l.find(q[k+1]))-l.find(q[k]))\n    a+=s\n  ans.append(a)\n  a=0\n\nfor i in ans:\n  print(i)\n",
                true
            ],
            [
                "'''Author- Akshit Monga'''\nfrom sys import stdin, stdout\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    a=input().strip()\n    d={}\n    for i in range(26):\n        d[a[i]]=i\n    s=input().strip()\n    ans=0\n    for i in range(len(s)-1):\n        ans+=abs(d[s[i+1]]-d[s[i]])\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    d={x:i for i,x in enumerate(s)}\n    k=input()\n    n=len(k)\n    ans=0\n    for i in range(1,n):\n        ans+=abs(d[k[i]]-d[k[i-1]])\n    print(ans)",
                true
            ],
            [
                "for _ in range(2*(int(input()))):\n    a=input()\n    if(_%2==0):\n        d={}\n        for i in range(len(a)):\n            d[a[i]]=i\n    else:\n        sum1=0\n        for i in range(len(a)-1):\n            sum1+=abs(d[a[i]]-d[a[i+1]])\n        print(sum1)",
                true
            ],
            [
                "n = int(input())\nL = []\nfor i in range(n):\n    st = input()\n    st2 = input()\n    s = 0\n    ind = st.index(st2[0])\n    for j in range(1, len(st2)):\n        ind2 = st.index(st2[j])\n        s += abs(ind - ind2)\n        ind = ind2\n    L.append(s)\nfor el in L:\n    print(el)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=26\n    inp= input()\n    string=list(input())\n    li=[]\n    ans=0\n    for j in range(len(string)):\n        for k in range(26):\n        \n                if string[j]==inp[k]:\n                    d=k+1\n                    li.append(d)\n    '''print(li)\n    print(len(li)-1)\n    print(abs(li[0]-li[1]))\n    print(abs(li[1]-li[2]))\n    print(abs(li[2]-li[3]))\n    print(abs(li[3]-li[4]))'''\n    \n    for l in range(len(li)-1):\n        ans+=abs(li[l]-li[l+1])\n    print(ans)\n    ",
                true
            ],
            [
                "n=int(input())\nfor _ in range(n):\n    cl=input()\n    instr=input()\n    ln=0\n    st=instr[0]\n    stIn=cl.index(st)\n    for i in instr:\n        if not i==st:\n            iIn=cl.index(i)\n            ln+=abs(stIn-iIn)\n            st=i\n            stIn=iIn\n    print(ln)\n",
                true
            ],
            [
                "from sys import stdin,stdout\ndef INPUT():return list(int(i) for i in stdin.readline().split())\ndef inp():return stdin.readline()\ndef out(x):return stdout.write(x)\nfrom math import *\nfrom decimal import *\nINT_MAX=10**13\nfrom bisect import bisect_left,bisect_right\nimport sys\nMOD=10**9+7\nfrom random import randint as R\n# from heapq import heappush,heappop,heapify\n#320660CC\ninf=12345676543\nfrom collections import deque\nfrom sys import setrecursionlimit\n#setrecursionlimit(10**6)\nfrom collections import defaultdict\n#=============================================]\nfor _ in range(int(input())):\n    keyb=input()\n    A=list(keyb)\n    s=input()\n    ans=0\n    for i in range(1,len(s)):\n        ans+=abs(A.index(s[i])-A.index(s[i-1]))\n        #print(ans)\n    print(ans)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    x = input()\n    s = input()\n    arr = [x.index(item) for item in s]\n    ans = 0\n    for i in range(1,len(arr)):\n        ans+=abs(arr[i]-arr[i-1])\n    print (ans)",
                true
            ],
            [
                "T = int(input())\nt = 0\nwhile (t<T):\n    S = str(input())\n    s = str(input())\n    D = 0\n    G = 0\n    for i in s:\n        G += abs(D - S.find(i))\n        D = S.find(i)\n    print (G - S.find(s[0]))\n    t += 1",
                true
            ],
            [
                "''''\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\n'''\n\n\nn=int(input())\nfor i in range(0,n):\n    \n    s=input().rstrip()\n    o=input().rstrip()\n    \n    x=list(s)\n    y=list(o)\n    L=[]\n    for j in range(0,len(y)):\n        \n        for k in range(0,len(x)):\n            \n            if x[k] == y[j]:\n                L.append(k+1)\n                break;\n    # print(L)\n    ans = 0;\n    for j in range(0,len(L)-1):\n        ans += abs(L[j+1]-L[j])\n        \n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=list(input())\n    k=list(input())\n    c=0\n    for i in range(1,len(k)):\n        x=n.index(k[i-1])\n        y=n.index(k[i])\n        c+=abs(x-y)\n    print(c)",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    s = input()\n    s1 = input()\n\n    d = [0] * 26\n    for i in range(len(s)):\n        d[ord(s[i]) - ord('a')] = i\n\n    ans = 0\n    for i in range(len(s1)):\n        if i != 0:\n            ans += abs(d[ord(s1[i]) - ord('a')] - d[ord(s1[i - 1]) - ord('a')])\n\n    print(ans)\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\ninp_vars_int = lambda: map(int, input().split())\ninp_list_int = lambda: list(map(int, input().split()))\n\nt = int(input())\n\nfor _ in range(t):\n    k = {let: i for i, let in enumerate(input())}\n    s = input()\n    res = 0\n    for i in range(1, len(s)):\n        res += abs(k[s[i]] - k[s[i-1]])\n    print(res)",
                true
            ],
            [
                "import sys\n\ndef get_int():\n    return int(input())\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys,sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef solve(s, keyboard):\n    indexOf = {}\n    for i, c in enumerate(keyboard):\n        indexOf[c] = i\n    result = 0\n    for i in range(1, len(s)):\n        result += abs(indexOf[s[i]] - indexOf[s[i-1]])\n    return result\n\nif __name__ == \"__main__\":\n    t = get_int()\n    while t:\n        keyboard = get_string()\n        s = get_string()\n        print(solve(s, keyboard))\n        t -= 1",
                true
            ],
            [
                "\nkey = {}\nfor _ in range(int(input())):\n    keyboard = input().strip()\n    for i in range(26):\n        key[keyboard[i]] = i\n    res = 0\n    s=  input().strip().lower()\n    for i in range(1,len(s)):\n        res += abs(key[s[i]]- key[s[i-1]])\n    print(res)",
                true
            ],
            [
                "test_case = int(input())\nfor a in range(test_case):\n    string = input()\n    lst_of_string = list(string)\n    pattern = input()\n    lst_of_pattern = list(pattern)\n    lst_of_index = []\n    sum = 0\n    for item in lst_of_pattern:\n        temp = lst_of_string.index(item)\n        lst_of_index.append(temp)\n    for i in range(1,len(lst_of_index)):\n        difference = abs(lst_of_index[i] - lst_of_index[i-1])\n        sum = sum+difference\n    print(sum)",
                true
            ],
            [
                "T = int(input())\nfor t in range(T):\n    s = input().strip()\n    q = input().strip()\n    count = 0\n    if len(q) > 1:\n        for i in range(len(q) - 1):\n            count += abs((s.index(q[i + 1]) + 1) - (s.index(q[i]) + 1))\n    print(count)",
                true
            ],
            [
                "for i in  range(int(input())):\n    x=input()\n    y=input()\n    s=0\n    if(len(y)==y.count(y[0])):\n        print(s)\n        continue\n    if(len(y)==1):\n        print(s)\n        continue\n    for j in range(len(y)-1):\n        s+=abs(x.index(y[j+1])-x.index(y[j]))\n    print(s)\n        ",
                true
            ],
            [
                "import bisect\nimport math\nfrom collections import deque\nimport heapq\nimport functools\nfrom collections import defaultdict\n\nmod =  998244353 \nN = 200005\n\ngetnums = lambda: map(int, input().split())\ngetnum = lambda: int(input())\n\ndef mul(a, b):\n    return (a*b)%mod\n\ndef add(a, b):\n    return (a+b) if (a+b<mod) else (a+b)-mod\n\ndef sub(a, b):\n    return (a-b) if (a-b>=0) else (a-b)+mod\n\ndef powr(a, b):\n    ans = 1\n    while b>0:\n        if b & 1:\n            ans=mul(ans,a)\n        a = mul(a,a) \n        b//=2\n    return ans\n\ndef inv(n):\n    return powr(n, mod-2)\n\ndef factlist():\n    fact = [1]\n    for i in range(1, N):\n        fact.append(mul(fact[i-1],i))\n    return fact\n\ndef invfactlist(fact):\n    invfact=[0]*N\n    invfact[0]=1\n    invfact[N-1]= inv(fact[N-1])\n    for i in range(N-2, 0, -1):\n        invfact[i]= mul(invfact[i+1],(i+1))\n    \n    return invfact\n\ndef rot(S):\n    return list(zip(*S[::-1]))\n\ndef gcd(a, b):\n    if b==0:\n        return a\n    return gcd(b, a%b)\n\ndef generate():\n    ans = [0]\n    while ans[-1]<1000000000:\n        ans.append(1+ans[-1]*2)\n    return ans\n\n\ndef __gcd(a, b):\n    if (a == 0):\n        return b\n    return __gcd(b % a, a)\n \n\ndef LcmOfArray(arr, idx):\n\n    if (idx == len(arr)-1):\n        return arr[idx]\n    a = arr[idx]\n    b = LcmOfArray(arr, idx+1)\n    return int(a*b/__gcd(a,b)) \n\n\ncon = dict()\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.child = None\n        self.parent = None\n\n\n    def addrear(self, y):\n        self.child = y\n        y.parent = self\n\n\n    def deleterear(self, y):\n        self.child = None\n        y.parent = None\n\n    def findparent(self):\n        parent = self.parent\n        node = self\n        while parent:\n            node = parent\n            parent = parent.parent\n        return node\n\n    def getelem(self):\n        lst = [self.val]\n        ch = self.child\n        while ch:\n            lst.append(ch.val)\n            ch= ch.child\n        return lst\n\n\n\ndef main():\n    t = getnum()\n    while t:\n        t-=1\n        s = input()\n        s1 = input()\n        mp = dict()\n        for i in range(26):\n            mp[s[i]]=i\n\n        last = mp[s1[0]]\n        ans = 0\n        for i in range(1, len(s1)):\n            ans += abs(last-mp[s1[i]])\n            last = mp[s1[i]]\n        print(ans)\n\n\n    \n\n\n\nif __name__ == \"__main__\":\n    main()\n    \n    ",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=26\n    inp= input()\n    string=list(input())\n    li=[]\n    ans=0\n    for j in range(len(string)):\n        for k in range(26):\n        \n                if string[j]==inp[k]:\n                    d=k+1\n                    li.append(d)\n    \n    for l in range(len(li)-1):\n        ans+=abs(li[l]-li[l+1])\n    print(ans)",
                true
            ],
            [
                "cases = int(input())\nfor _ in range(cases):\n    keyboard = input()\n    keyboard_dict = {}\n    for value, key in list(enumerate(keyboard)):\n        keyboard_dict[key] = value\n    word = input()\n    word = [char for char in word]\n    ans = 0\n    for i in range(len(word)-1):\n        ans += abs(keyboard_dict[word[i]] - keyboard_dict[word[i+1]])\n    print(ans)\n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    s=str(input()) \n    f=str(input())\n    l=list(s) \n    d=list(f)\n    a=[]\n    for i in range(len(d)):\n        for j in range(0,26):\n            if(d[i]==l[j]):\n               a.append(j+1)\n    count=0\n    for i in range(len(a)-1):\n     c=abs(a[i+1]-a[i])\n     count+=c\n    print(count)",
                true
            ],
            [
                "for _ in range(int(input())):\n    keyboard = input()\n    word = input()\n\n    ans=0\n\n    prev=keyboard.index(word[0])\n    for ch in word:\n        for i in range(26):\n            if keyboard[i]==ch:\n                ans+=abs(i-prev)\n                prev=i\n    print(ans)",
                true
            ],
            [
                "n = int(input())\nwhile(n>0):\n    n-=1\n    alfa = input()\n    string = input()\n    tempo = 0\n    for i in range(len(string)-1):\n        tempo+= abs((alfa.index(string[i])+1)-(alfa.index(string[i+1])+1))\n    print(tempo)",
                true
            ],
            [
                "for _ in range(int(input())):\n    keyboard = input().strip()\n    string = input().strip()\n    # print(keyboard,string)\n    prev,total = 0,0\n    for i in range(1,len(string)):\n        total+=abs(keyboard.index(string[i-1])-keyboard.index(string[i]))\n    print(total)",
                true
            ],
            [
                "t=int(input())\nwhile(t>0):\n    c=0\n    l=input()\n    k=input()\n    new1=list(k)\n    new=list(l)\n    q=[]\n    for i in range(len(new1)):\n        for j in range(len(new)):\n            if new1[i]==new[j]:\n                q.append(j+1)\n    for a in range(len(q)-1):\n        c+=abs(q[a]-q[a+1])\n    t-=1\n    print(c)\n\n        \n\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    k = input()\n    s = input()\n    cnt = 0\n    if(len(s)>1):\n        for j in range(1, len(s)):\n            cnt += abs(k.index(s[j])-k.index(s[j-1]))\n    print(cnt)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    s1 = input()\n    B = []\n    for c1 in s1:\n        for c in range(len(s)):\n            if c1 == s[c]:\n                B.append(c + 1)\n    s2 = 0\n    for j in range(len(B) - 1):\n        s2 = s2 + abs(B[j] - B[j + 1])\n    print(s2)\n    \n                ",
                true
            ],
            [
                "\nt = 0\n\ndef ra(nums):\n     return [a for a,b in zip(nums, nums[1:]+[not nums[-1]]) if a != b]\n\nfor x in range(int(input())):\n    a = [char for char in input()]\n    b = [char for char in input()]\n    b = ra(b)\n    t = 0\n    ans = []\n    for x in b:\n        ans.append(a.index(x)+1)\n    for y in range(len(ans)-1):\n        t += abs(ans[y]-ans[y+1])\n    print(t)",
                true
            ],
            [
                "import math\nfor i in range(int(input())):\n    alfavit = input()\n    slovo = input()\n    count = 0\n    for a in range(len(slovo) - 1):\n        count += math.fabs(alfavit.index(slovo[a]) - alfavit.index(slovo[a + 1]))\n    print(int(count))\n",
                true
            ],
            [
                "for i in range(int(input())):\n    keys = input()\n    word = input()\n    list1 = []\n    output = []\n    out2 = []\n    count = 0 \n    for i in keys:\n        list1.append(ord(i)-96)\n    for i in word:\n        if count == 0:\n            out2.append(keys.index(i))\n            output.append(keys.index(i))\n            count+=1\n        else:\n            out2.append(keys.index(i))\n            output.append(abs(out2[count-1]-keys.index(i)))\n            count+=1\n    ans = 0\n    ok = 0\n    for i in output:\n        if ok != 0:\n            ans += i\n        ok+=1\n    print(ans)\n",
                true
            ],
            [
                "n = int(input())\nfor i1 in range(n):\n    alf = input()\n    s = input()\n    d = {}\n    for j in range(26):\n        d[alf[j]] = j+1\n    k = 0\n    for i in range(1, len(s)):\n        k += abs(d[s[i]] - d[s[i - 1]])\n    print(k)",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    a=input()\n    b=input()\n    ans=0\n    n=len(b)\n    for i in range(n-1):\n        ans+=abs(a.index(b[i])-a.index(b[i+1]))\n    print(ans)\n        \n",
                true
            ],
            [
                "r = []\n\n\nfor _ in range(int(input())):\n    kb = dict(zip(input(), range(1,27)))\n    cost = 0\n    w = input()\n    c0 = w[0]\n    for c in w[1:]:\n        cost += abs(kb[c0] - kb[c])\n        c0 = c\n    r.append(cost)\nfor cost in r:\n    print(cost)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ndef mp():return map(int,input().split())\ndef lmp():return list(map(int,input().split()))\ndef mps(A):return [tuple(map(int, input().split())) for _ in range(A)]\nimport math\nimport bisect\nimport heapq\nfrom copy import deepcopy as dc\nfrom itertools import accumulate\nfrom collections import Counter, defaultdict, deque\ndef ceil(U,V):return (U+V-1)//V\ndef modf1(N,MOD):return (N-1)%MOD+1\ninf = int(1e20)\nmod = int(1e9+7)\n\nt = int(input())\nfor _ in range(t):\n    s = input()[:-1]\n    goal = input()[:-1]\n    d = dict()\n    for i in range(26):\n        d[s[i]] = i\n    cnt = 0\n    for i in range(len(goal)-1):\n        crt = d[goal[i]]\n        nxt = d[goal[i+1]]\n        cnt += abs(crt-nxt)\n    print(cnt)\n",
                true
            ],
            [
                "t = int(input())\nsum = []\nfor i in range(t):\n    yep = 0\n    keyboard = ' '.join(input()).split()\n    word = ' '.join(input()).split()\n    for k in range(len(word)-1):\n        yep += abs(keyboard.index(word[k+1]) - keyboard.index(word[k]))\n    sum.append(yep)\nfor j in range(len(sum)):\n    print(sum[j])\n",
                true
            ],
            [
                "a=int(input())\nfor i in range(a):\n    p=[]\n    sum=sum1=sum2=count=0\n    n=input()\n    m=input()\n    for j in n:\n        sum1=sum1+1\n    for j in m:\n        sum2=sum2+1\n    for j in range(sum2):\n        for c in range(sum1):\n            if m[j]==n[c]:\n                p.append(int(c)+1)\n                sum=sum+1\n                break\n    for j in range(sum-1):\n        # count=count+p[j+1]\n         count=count+abs(p[j+1]-p[j])\n    print(count)",
                true
            ],
            [
                "# Time:  O(n)\n# Space: O(n)\n\nfrom itertools import islice\n\ndef solution():\n    keyboard, s = [input().strip() for _ in range(2)]\n    idx = {c:i for i, c in enumerate(keyboard)}\n    return sum(abs(idx[x]-idx[y]) for x, y in zip(islice(s, 1, len(s)), islice(s, 0, len(s)-1)))\n\nfor case in range(eval(input())):\n    print('%s' % solution())\n\n",
                true
            ],
            [
                "def solve(l,s):\n    ans = 0\n    for i in range(len(s)-1):\n        ans += abs(l.index(s[i])-l.index(s[i+1]))\n    return ans\nfor _ in range(int(input())):\n    l = list(input())\n    s = input()\n    print(solve(l,s))",
                true
            ],
            [
                "def solve(s, letter):\n  alpha={}\n  c=1\n  for i in letter:\n    alpha[i]=c\n    c+=1\n  if len(s)==1:\n    return 0\n  ans = 0\n  n = len(s)\n  for i in range(1,n):\n    ans += abs(alpha[s[i]]-alpha[s[i-1]])\n  return ans\n    \n  \n\n\nif __name__ == \"__main__\":\n  t = int(input())\n  while t!=0:\n    letter = input()\n    s = input()\n    print(solve(s, letter))\n    t-=1",
                true
            ],
            [
                "import sys\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_string():\n    return sys.stdin.readline().strip()\nFILE=False;\n\nif FILE:\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\nt=get_int(); #number of test cases\nanswer=[]; #results\nfor i in range(0,t):\n    keyboard=get_string();\n    word=get_string();\n    length=len(word);\n    match=[];\n    time=0;\n    for j in range(0,length):\n        idx=keyboard.find(word[j]);\n        match.append(idx+1);\n        if j>0:\n           time=time+abs(match[j-1]-match[j]);\n    answer.append(str(time));\nfor item in answer:\n    sys.stdout.write(item)\n    sys.stdout.write('\\n')",
                true
            ],
            [
                "def solve():\n    m = input()\n    s = input()\n    mas = []\n    for i in range(len(m)):\n        mas.append(m[i])\n    k = dict(zip(mas,list(range(1,len(mas)+1))))\n    if len(s)==0:\n        return 0\n    else:\n        ans = 0\n        for j in range(1,len(s)):\n            ans+=abs(k[s[j]]-k[s[j-1]])\n        return ans\n\n\nt = int(input())\nfor i in range(t):\n    print(solve())",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    w = input()\n    m = {}\n    for i in range(26):\n        m[s[i]] = i + 1\n    ans = 0\n    for i in range(len(w)-1):\n        ans += abs(m[w[i]] - m[w[i+1]])\n    print(ans)        ",
                true
            ],
            [
                "for _ in range(int(input())):\n    t=input()\n    s=input()\n    A=[]\n    for i,v in enumerate(s):\n        a=t.index(v)\n        A.append(a)\n    res=0\n    if set(A)==1:\n        print(0)\n    else:\n        for i in range(1,len(A)):\n            res+=abs(A[i]-A[i-1])\n        print(res)",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    k=input()\n    s=input()\n    d={}\n    for each in s:\n        d[each]=k.find(each)\n    ans=0\n    for i in range(len(s)):\n        if i>0:\n            ans+=abs(d[s[i]]-d[s[i-1]])\n    print(ans)\n      \n            \n    ",
                true
            ],
            [
                "t=int(input(\"\"))\nwhile t!=0:\n    str1=input(\"\")\n    fin=input(\"\")\n    cnt=0\n    li=[]\n    for ele in fin:\n        p=str1.index(ele)+1\n        li.append(p)\n    for i in range(0,len(li)-1):\n        diff=li[i]-li[i+1]\n        if diff<0:\n            diff=-diff\n        cnt=cnt+diff\n    print(cnt)\n    t=t-1",
                true
            ],
            [
                "for i in range(int(input())):\n    x=input()\n    y=input()\n    s=0\n    for i in range(len(y)-1):\n        s+=abs(x.index(y[i])-x.index(y[i+1]))\n    print(s)",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n    s = str(input())\n    t = str(input())\n    c = 0\n    a = []\n    for i in range(len(t)):\n        k = t[i]\n        l = i\n        for i in range(len(s)):\n            if k == s[i]:\n                a.append(i+1)\n    for i in range(len(a)-1):\n        c += abs(a[i+1] - a[i])\n    print(c)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a = []\n    n = input()\n    a.append(n)\n    s = \"\".join(a)\n\n    b = []\n    m = input()\n    b.append(m)\n    s1 = \"\".join(b)\n\n    c = []\n    for j in range(len(s1)):\n        c.append((s.find(s1[j])) + 1)\n    l=[]\n    for i in range(len(c)-1):\n        diff = abs(c[i] - c[i + 1])\n        l.append(diff)\n    x = sum(l)\n    print(x)\n\n",
                true
            ],
            [
                "'''input\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n'''\n\nimport sys\n\ndef function(a,b):\n    str_dict = {}\n    for i,ltr in enumerate(a):\n        str_dict[ltr] = i\n    movements = 0\n    for i in range(1,len(b)-1):\n        movements += abs(str_dict[b[i]] - str_dict[b[i-1]])\n    return movements\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        a = sys.stdin.readline()\n        b = sys.stdin.readline()\n        res = function(a,b)\n        print(res)\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "def keyboard(arr,word):\n    time=0\n    prev=arr.index(word[0])\n    for i in word:\n        index=arr.index(i)\n        time+=abs(prev-index)\n        prev=index\n    return time\nt=int(input())\nfor _ in range(t):\n    arr=list(input())\n    word=input()\n    print(keyboard(arr,word))",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    key = input()\n    word = input()\n    time = 0\n    for j in range(len(word) - 1):\n        time += abs(key.index(word[j]) - key.index(word[j + 1]))\n    print(time)",
                true
            ],
            [
                "t=int(input())\nwhile(t):\n    l=input()\n    d={}\n    for i in range(len(l)):\n        d[l[i]]=i+1\n    s=input()\n    c=0\n    for i in range(1,len(s)):\n        c+=abs(d[s[i]]-d[s[i-1]])\n    print(c)\n    t-=1",
                true
            ],
            [
                "t = int(input())\nfor i in range (t):\n    s = input()\n    ss = input()\n    ans = 0\n    for x in range  (1 , len(ss)):\n        ans+=abs(s.index(ss[x-1])-s.index(ss[x]))\n    print(ans)\n\n\n\n",
                true
            ],
            [
                "t=int(input())\nfor o in range(t):\n    sttr = input()\n    test= input()\n    \n    if(len(sttr)<1):\n        print(\"0\")\n    else:\n        d=dict()\n        for i in range (len(sttr)):\n            d[sttr[i]] =  i+1\n        \n        s=0\n        for j in range (len(test)-1):\n            s+=abs(d[test[j]]-d[test[j+1]])\n        print(s)",
                true
            ],
            [
                "# cook your dish here\n\ndef fun(s,t):\n    n = len(t)\n    if n == 1: return 0\n    \n    ans = 0\n    d = {}\n    for i,ch in enumerate(s):\n        d[ch] = i\n    \n    for i in range(1,len(t)):\n        ans += abs(d[t[i]] - d[t[i-1]])\n        \n    return ans\n\nt = int(input())\nfor i in range(t):\n    # n = int(input())\n    s = input()\n    t = input()\n    # n,k = map(int,input().split())\n    # arr = list(map(int,input().split()))\n    ans = fun(s,t)\n    print(ans)",
                true
            ],
            [
                "def main():\n    for _ in range(int(input())):\n        kb = input()\n        s = input()\n        ans = 0\n        for i in range(len(s) - 1):\n            ans += abs(kb.index(s[i]) - kb.index(s[i + 1]))\n        print(ans)\n\n\nmain()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s,m=input(),input()\n    res=0\n    for i in range(len(m)-1):\n        j=s.index(m[i])\n        res=res+abs(j-s.index(m[i+1]))\n    print(res)",
                true
            ],
            [
                "ts=int(input())\nwhile ts>0:\n    temp='ygy'\n    t=0\n    nums=str(input())\n    sr=str(input())\n    for i in range(1,len(sr)):\n        temp=sr[i-1]\n        t=t+abs(nums.index(sr[i])-nums.index(temp))\n    print(t)\n    ts=ts-1\n\n\n\n\n",
                true
            ],
            [
                "t=input()\nt=int(t)\nn=[0]*t\nm=[0]*t\nfor i in range(t):\n    n[i]=input()\n    m[i]=input()\nnl=len(m)\nfor k in range(nl):\n    n2=len(m[k])\n    sum=0\n    for z in range(n2-1):\n        sum+=abs(n[k].index(m[k][z])-n[k].index(m[k][z+1]))\n    print(sum)",
                true
            ],
            [
                "\nfor i in range(int(input())):\n    a=0\n    q=list(input())\n    A=input()\n    for i in range(len(list(A))-1):\n        a=a+abs(q.index(A[i])-q.index(A[i+1]))\n    print(a)",
                true
            ],
            [
                "t = int(input())\nfor j in range(t):\n    letters = list(input())\n    word = list(input())\n    ans = 0\n    last = letters.index(word[0])\n    for letter in word:\n        for j in range(26):\n            if letter == letters[j]:\n                ans += abs(j - last)\n                last = j\n                break\n    print(ans)\n\n",
                true
            ],
            [
                "x=int(input())\nfor i in range(x):\n    key=input()\n    s=input()\n    sum=0\n    NUM=31\n    for j in range(1,len(s)):\n        sum+=abs((key.index(s[j]))-(key.index(s[j-1])))\n    print(sum)",
                true
            ],
            [
                "for _ in range(int(input())):\n    main, n=input(),list(map(str, input().split()))\n    ls=list(*n)\n    dc={}\n    for i in range(1,27):\n        dc[main[i-1]]=i\n    ans=0\n    for i in range(len(ls)-1):\n        ans+=abs(dc[ls[i]]-dc[ls[i+1]])\n    print(ans)\n",
                true
            ],
            [
                "t = int(input())\nfor m in range(t):\n    n = 26\n    key = input()\n    word = list(input())\n    l = []\n    result = 0\n    for i in range(len(word)):\n        for j in range(26):\n            if (word[i] == key[j]):\n                k = j+1\n                l.append(k)\n    for x in range(len(l)-1):\n        result += abs(l[x]-l[x+1])\n    print(result)",
                true
            ],
            [
                "t = int(input())\nwhile t>0:\n    alpbts = str(input())\n    word = str(input())\n    s = 0\n    for i in range(len(word)-1):\n        s += abs(alpbts.index(word[i+1])-alpbts.index(word[i]))\n    print(s)\n    t -= 1",
                true
            ],
            [
                "def number_finder(letter):\n  for number, alpha_letter in zip(numbers, alphabet):\n    if alpha_letter == letter:\n      return number\n\ndef time_counter(alphabet, word):\n  time = 0\n  first = word[:-1]\n  second = word[1:]\n  for i in range(len(word)-1):\n    time += abs(number_finder(first[i]) - number_finder(second[i]))\n  return time\n\nn = int(input())\nfor i in range(n):\n  alphabet = list(input())\n  word = list(input())\n  numbers = []\n  for i in range(len(alphabet)):\n    numbers.append(i+1)\n  print(time_counter(alphabet, word))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a = input()\n    b = input()\n    answ = 0\n    pos = a.find(b[0])\n    for j in b[1:]:\n        answ += abs(a.find(j) - pos)\n        pos = a.find(j)\n    print(answ)",
                true
            ],
            [
                "#1607A\n\ncases=int(input())\nfor test in range(0,cases):\n    letters=str(input())\n    s=str(input())\n    size=len(s)\n    t=[]\n    for i in range(0,size):\n        for j in range(0,26):\n            if(s[i]==letters[j]):\n                t.append(j+1)\n\n    su=0\n    if(size>1):\n        for i in range(0,size-1):\n            su+=abs(t[i+1]-t[i])\n    print(su)\n\n        \n",
                true
            ],
            [
                "import sys\n\n# sys.setrecursionlimit(200005)\nint1 = lambda x: int(x)-1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline().rstrip()\n# inf = 10**16\ninf = 4294967295\n# md = 10**9+7\nmd = 998244353\n\ndef solve():\n    s=SI()\n    t=SI()\n    ctoi={}\n    for i,c in enumerate(s):\n        ctoi[c]=i\n    ans=0\n    now=ctoi[t[0]]\n    for c in t[1:]:\n        i=ctoi[c]\n        ans+=abs(now-i)\n        now=i\n    print(ans)\n\nfor testcase in range(II()):\n    solve()\n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    s1=input()\n    s2 =input()\n    m={}\n    sub=sum=0\n    for i in range(0,26):\n        m[s1[i]]=i+1\n    for j in range(len(s2)-1):\n        sum+=abs(m[s2[j+1]]-m[s2[j]])\n    print(sum)",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n=input()\n    s=input();c=0\n    if len(s)==1:print(0)\n    else:\n         for i in range(len(s)-1):\n             c+=abs(n.index(s[i])-n.index(s[i+1]))\n         print(c)",
                true
            ],
            [
                "def solution():\n    keyboard, s = [input().strip() for _ in range(2)]\n    idx = {c:i for i, c in enumerate(keyboard)}\n    prev = s[0]\n    result = 0\n    for i in range(1, len(s)):\n        result += abs(idx[s[i]]-idx[prev])\n        prev = s[i]\n    return result\n\nfor case in range(eval(input())):\n    print('%s' % solution())\n\n",
                true
            ],
            [
                "t = int(input())\nA = []\nfor i in range(t):\n    a = input()\n    b = input()\n    A.append((a, b))\nfor i in A:\n    a = i[0]\n    b = i[1]\n    s = 0\n    if len(b) == 1:\n        print(0)\n    else:\n        q = b[0]\n        b = b[1:]\n        for z in b:\n            s += abs(a.index(z)-a.index(q))\n            q = z\n        print(s)\n",
                true
            ],
            [
                "T = int(input())\nwhile T>0:\n    T -= 1\n    s = input()\n    target = input()\n    ans = 0\n    for i in range(len(target) - 1):\n        ans += abs(s.index(target[i]) - s.index(target[i+1]) )\n    print(ans)",
                true
            ],
            [
                "T = int(input())\n\n\ndef main(keyboard,string):\n    if len(string) == 0:\n        return 0\n    \n    dictionary = {}\n    position = 1\n    for char in keyboard:\n        dictionary[char] = position\n        position+=1\n    \n    #print(dictionary)\n    \n    cost = 0\n    initial_pos = dictionary[string[0]]\n    for i in range(1,len(string)):\n        next_pos = dictionary[string[i]]\n        cost = cost + abs(next_pos-initial_pos)\n        #print(next_pos,initial_pos)\n        initial_pos = next_pos\n        \n    return cost\n        \n        \n        \n\n\n\nfor _ in range(T):\n    keyboard = input().strip()\n    string = input().strip()\n    \n    \n    print(main(keyboard,string))",
                true
            ],
            [
                "t=int(input())\nwhile(t):\n    su=0\n    l=[]\n    s=input()\n    string=input()\n    for i in range(0,len(string)):\n         for j in range(0,len(s)):\n            if(string[i]==s[j]):\n                l.append(j+1)\n    for k in range(0,len(l)-1):\n        su+=abs(l[k+1]-l[k])\n    print(su)\n    t-=1",
                true
            ],
            [
                "from collections import *\n\nfor y in range(int(input())):\n    s=input()\n    \n    d=defaultdict(int)\n    for i in range(1,27):\n        d[s[i-1]]=i\n    s2=input()\n    ans=0\n    for i in range(1,len(s2)):\n        res=abs(d[s2[i]]-d[s2[i-1]])\n        ans+=(res)\n    print(ans)",
                true
            ],
            [
                "for i in range(int(input())):\n    s = input()\n    a = input()\n    al = len(a)\n    ad = 0\n    for i in range(1,al):\n        ad += abs((s.index(a[i]) - s.index(a[i-1])))\n    print(ad)\n        ",
                true
            ],
            [
                "a = int(input())\nfor i in range(a):\n    ind = 0\n    count = 0\n    klava = input()\n    line = input()\n    for j in range(len(line)):\n        if (j == 0):\n            ind = klava.index(line[0])\n        else:\n            count += abs(ind - klava.index(line[j]))\n            ind = klava.index(line[j])\n    print(count)",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    y=input()\n    s=input()\n    x=[]\n    sum1=0\n    for each in s:\n        x.append(y.index(each)+1) \n    for i in range(len(x)-1):\n        sum1 += abs(x[i]-x[i+1])\n    print(sum1)\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    st = input()\n    res = 0\n    bf = s.index(st[0])\n    for i in st[1:]:\n        res += abs(s.index(i) - bf)\n        bf = s.index(i)\n    print(res)",
                true
            ],
            [
                "for i in range(int(input())):\n    a=str(input())\n    a=list(a)\n    b=str(input())\n    b=list(b)\n    x=a.index(b[0])\n    dis=0\n    for jib in b:\n        fit = x\n        nex = a.index(jib)\n        diff = abs(nex - fit)\n        dis += diff\n        x=nex\n\n    print(dis)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a=input()\n    b=input()\n    s=0\n    for i in range(len(b)-1):\n        s+=abs(a.index(b[i])-a.index(b[i+1]))\n    print(s)",
                true
            ],
            [
                "for test in range(int(input())):\n    keyboard = input()\n    s = input()\n    no_assign = {}\n    for i in range(1, len(keyboard)+1):\n        no_assign[keyboard[i-1]] = i\n    ans = 0\n    for i in range(1, len(s)):\n        ans += abs(no_assign[s[i]]- no_assign[s[i-1]])\n    print (ans)",
                true
            ],
            [
                "from sys import stdin\nfrom collections import defaultdict\nlst = stdin.read().split()\n_s = 0\ndef inp(n=1):\n    global _s\n    ret = lst[_s:_s + n]\n    _s += n\n    return ret\ndef inp1():\n    return inp()[0]\n\nt = int(inp1())\nfor _ in range(t):\n  alph = inp1()\n  d_alph = defaultdict(lambda: 0)\n  for i in range(26):\n    d_alph[alph[i]] = i + 1\n\n  s = inp1()\n  s_pos = []\n  for l in s:\n    s_pos.append(d_alph[l])\n\n  time = 0\n  for i in range(1, len(s)):\n    time += abs(s_pos[i] - s_pos[i - 1])\n  print(time)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    d = {}\n    for i, l in enumerate(input()):\n        d[l] = i\n    out = 0\n    s = input()\n    if len(s) > 1:\n        for i in range(1, len(s)):\n            out += abs(d[s[i]] - d[s[i - 1]])\n    print(out)",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    dic={}\n    for i in range(len(s)):\n        dic[s[i]]=i+1\n\n    x=input()\n    ans=0\n    for i in range(len(x)-1):\n        ans+=abs(dic[x[i]]-dic[x[i+1]])\n\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    A = input()\n    st = input()\n    d = dict()\n    for i in range(26):\n        d[A[i]]  =i\n        \n    if len(st) ==0:\n        print(0)\n        continue\n    if len(st) ==1:\n        print(0)\n        continue\n    \n    k = st[0]\n    ans = 0\n    for i in range(1,len(st)):\n        ans += abs(d[st[i]] - d[k])\n        k = st[i]\n        \n    print(ans)",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. For example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times. \n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "r=range\nI=lambda:[*map(int,input().split())]\nn,q=I()\nQ=99\np=[0]+I()\nv=[*p]\nP=[*r(n+1)]\nfor i in P:\n    v[p[i]]=i\n    for _ in r(Q):P[i]=p[P[i]]\nwhile q:\n    a,b,c=I();q-=1\n    if a>1:\n        while c>Q:b=P[b];c-=Q\n        while c:b=p[b];c-=1\n        print(b)\n    else:\n        d,e=p[b],p[c];p[b],p[c]=e,d;v[d],v[e]=c,b\n        for i in r(Q-1):b,c=v[b],v[c]\n        for j in r(Q):P[b],P[c]=e,d;b,c,e,d=p[b],p[c],p[e],p[d]\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou are given a sequence a_1, a_2, ..., a_n consisting of n pairwise distinct positive integers.\n\nFind \\left\u230a \\frac n 2 \\right\u230b different pairs of integers x and y such that: \n\n  * x \u2260 y; \n  * x and y appear in a; \n  * x~mod~y doesn't appear in a. \n\n\n\nNote that some x or y can belong to multiple pairs.\n\n\u230a x \u230b denotes the floor function \u2014 the largest integer less than or equal to x. x~mod~y denotes the remainder from dividing x by y.\n\nIf there are multiple solutions, print any of them. It can be shown that at least one solution always exists.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the sequence.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^6).\n\nAll numbers in the sequence are pairwise distinct. The sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nThe answer for each testcase should contain \\left\u230a \\frac n 2 \\right\u230b different pairs of integers x and y such that x \u2260 y, x and y appear in a and x~mod~y doesn't appear in a. Print the pairs one after another.\n\nYou can print the pairs in any order. However, the order of numbers in the pair should be exactly such that the first number is x and the second number is y. All pairs should be pairwise distinct.\n\nIf there are multiple solutions, print any of them.\n\nExample\n\nInput\n\n\n4\n2\n1 4\n4\n2 8 3 4\n5\n3 8 5 9 7\n6\n2 7 5 3 4 8\n\n\nOutput\n\n\n4 1\n8 2\n8 4\n9 5\n7 5\n8 7\n4 3\n5 2\n\nNote\n\nIn the first testcase there are only two pairs: (1, 4) and (4, 1). \\left\u230a \\frac 2 2 \\right\u230b=1, so we have to find one pair. 1~mod~4=1, and 1 appears in a, so that pair is invalid. Thus, the only possible answer is a pair (4, 1).\n\nIn the second testcase, we chose pairs 8~mod~2=0 and 8~mod~4=0. 0 doesn't appear in a, so that answer is valid. There are multiple possible answers for that testcase.\n\nIn the third testcase, the chosen pairs are 9~mod~5=4 and 7~mod~5=2. Neither 4, nor 2, appears in a, so that answer is valid.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int, input().split()))\n    a.sort()\n    y=a[0]\n    for i in range(1,n//2 + 1):\n        print(a[i] , y)\n",
                true
            ],
            [
                "def solve_test():\n    n = int(input())\n    numbers = list(map(int, input().split(\" \")))\n    numbers.sort()\n    minimum = min(numbers)\n    for i in range(1, n // 2 + 1):\n        print(numbers[i], minimum)\n\n\ndef solve():\n    tests = int(input())\n    for _ in range(tests):\n        solve_test()\n\n\nif __name__ == '__main__':\n    solve()\n",
                true
            ],
            [
                "t = int(input())\nfor idx in range(t):\n    n = int(input())\n    arr = []\n    data = input().split(\" \")\n    for i in range(n):\n        arr.append(int(data[i]))\n    \n    arr.sort()\n    for i in range(1, n//2 + 1):\n        print(arr[i], arr[0])\n    ",
                true
            ],
            [
                "import math\n\nif __name__ == \"__main__\":\n    t = int(input())\n    while t >= 1:\n        n = int(input())\n        x = list(map(int, input().split()))\n        x.sort()\n        numberOfPairs = math.floor(n / 2)\n        for i in range(numberOfPairs):\n            print(\"{} {}\".format(x[i + 1], x[0]))\n        t = t - 1\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    for i in range(n//2):\n        print(a[i+1], a[0])\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    l.sort()\n    c=n//2\n    i=1\n    while(c):\n        print(l[i],l[0])\n        i+=1\n        c-=1",
                true
            ],
            [
                "import string\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in range(n // 2):\n        print(a[i + 1], a[0])\n\n",
                true
            ],
            [
                "import sys\nfrom typing import List\n\n\ndef ri(): return [int(i) for i in input().split()]\n\n\ndef rs(): return input()[:-1]\n\n\ndef main():\n    t = ri()[0]\n\n    for _ in range(t):\n        n = ri()[0]\n        a = sorted(ri())\n        y = a[0]\n        for i in range(n // 2):\n            print(a[i + 1], y)\n\n\ninput = sys.stdin.readline\nmain()\n",
                true
            ],
            [
                "t=int(input())\nwhile t:\n    n=int(input())\n    l=list(map(int,input().split()))\n    l.sort()\n    dic={}\n    for x in l:\n        dic[x]=1\n    ans=[]\n    x=n//2\n    i=1\n    while x:\n        print(l[i],l[0])\n        x-=1\n        i+=1\n    t-=1",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    A = sorted(list(map(int, input().split())))\n    for i in range(n//2):\n        print(A[i+1],A[0])",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=[int(i) for i in input().split()]\n    l.sort()\n    for i in range(n//2):\n        print(l[i+1],l[0])",
                true
            ],
            [
                "tc=int(input())\nfor i in range(tc):\n    x=int(input())\n    list1=list(map(int,input().split()))\n    list1.sort()\n    list2=[]\n    y=min(list1)\n    list1=list1[1:]\n    for i in list1:\n        if i%y<=y:\n            list2.append(str(i)+' '+str(y))\n    for i in range(x//2):\n        print(list2[i])",
                true
            ],
            [
                "# Author Name: Ajay Meena\n# Codeforce : https://codeforces.com/profile/majay1638\nimport sys\nimport math\nimport bisect\nimport heapq\nfrom bisect import bisect_right\nfrom sys import stdin, stdout\n\n# -------------- INPUT FUNCTIONS ------------------\n\n\ndef get_ints_in_variables(): return map(\n    int, sys.stdin.readline().strip().split())\n\n\ndef get_int(): return int(sys.stdin.readline())\n\n\ndef get_ints_in_list(): return list(\n    map(int, sys.stdin.readline().strip().split()))\ndef get_list_of_list(n): return [list(\n    map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\n\n\ndef get_string(): return sys.stdin.readline().strip()\n\n# -------- SOME CUSTOMIZED FUNCTIONS-----------\n\n\ndef myceil(x, y): return (x + y - 1) // y\n\n# -------------- SOLUTION FUNCTION ------------------\n\n\ndef Solution():\n    # Write Your Code Here\n    for _ in range(get_int()):\n        n = get_int()\n        arr = sorted(get_ints_in_list())\n        y = arr[0]\n        for i in range(n//2):\n            print(arr[i+1], y)\n\n\ndef main():\n    # Take input Here and Call solution function\n    Solution()\n\n\n# calling main Function\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    ar=list(map(int,input().split()))[:n]\n    ar.sort()\n    for i in range(1,(n//2)+1):\n        print(ar[i],ar[0])\n        ",
                true
            ],
            [
                "n=int(input())\nfor i in range (n):\n    n1=int(input())\n    a=[int(i) for i in input().split()]\n    a.sort()\n    cnt=0\n    for j in range(1,len(a)):\n        print(a[j], a[0])\n        cnt+=1\n        if cnt==len(a)//2:\n                break",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    a.sort()\n    for i in range(len(a)//2):\n        print(a[i+1], a[0])",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    *a, = map(int, input().split())\n    a.sort()\n    y = a[0]\n    for i in range(1, n // 2 + 1):\n        print(a[i], y)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ndef answer():\n    n = int(input())\n    a = list(map(int,input().split()))\n    a.sort()\n    m = a[0]\n    for i in range((n)//2):\n        print(a[i+1],m)\n    return\n    \n    \nfor _ in range(int(input())):\n    answer()",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 1\n    while i <= n // 2:\n        print(a[i], a[0])\n        i += 1\n\n\nfor _ in range(int(input())):\n    solve()\n",
                true
            ],
            [
                "for s in[*open(0)][2::2]:\n    a = sorted([int(x) for x in s.split()])\n    for i in range(int(len(a)/2)):\n        print(a[i+1], a[0])\n",
                true
            ],
            [
                "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = sorted([int(a) for a in input().split()])\n    count = 0\n    for i in range(1, n):\n        print(a[i], a[0])\n        count += 1\n        if count == n // 2:\n            break",
                true
            ],
            [
                "t=int(input())\nfor tt in range(t):\n  n=int(input())\n  a=list(map(int, input().split()))\n  a.sort()\n  for r in range(1,(n//2)+1):\n    print(a[r],a[0])",
                true
            ],
            [
                "import sys\nimport os.path\n \nif(os.path.exists('input.txt')) :\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    sys.stderr = open(\"error.txt\", \"w\")\n    \ndepth = 1000000\nmod = 1000000007 \nlim = mod * mod\nsys.setrecursionlimit(depth) \n \nlinp = lambda: list(minp())\nminp = lambda: map(int, input().split())\n \nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\n\ndxy = [(1, 0),(-1, 0),(0, 1),(0, -1)]\n\ndef expo(a, b) :\n    if not b : return 1\n    v = expo(a, b//2)\n    v = (v * v) % mod\n    if b%2 : v = (v * a) % mod\n    return v\n\ndef modinv(a, b) :\n    d = expo(b, mod-2)\n    v = (a * d) % mod\n    return v\n\ndef checkPrime(n) :\n    if n < 4 : return True\n    if n%2 == 0 : return False\n    for i in range(3, int(sqrt(n))+1, 2) :\n        if n%i == 0 :\n            return False\n    return True\n\nfor _ in range(int(input())) :\n    n = int(input())\n    a = sorted(linp())\n    c, i = 0, 1\n    while c < (n//2) :\n        print(a[i], a[0])\n        i += 1; c += 1",
                true
            ],
            [
                "t = int(input())\nfor s in range(t):\n    n = int(input())\n    X = list(map(int,input().split()))\n    X.sort()\n    ans = []\n    for j in range(1,n,1):\n        ans.append([X[j],X[0]])\n    \n    \n    for j in range(n//2):\n        print(*ans[j])\n    \n    \n    \n        \n        ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    x = sorted(map(int, input().split()))\n    i = 0\n    for k in range(i+1, i+1+n//2):\n        print(x[k], x[i])",
                true
            ],
            [
                "import sys\nfrom math import sqrt,gcd\nfrom collections import deque\nsys.setrecursionlimit(10**8)\nI  =lambda :int(input())\nS  =lambda :input().strip()\nM  =lambda :map(int,input().strip().split())\nL  =lambda :list(map(int,input().strip().split()))\nmod=1000000007\n\n##########################################################\n\n\n\nfor i in range(I()):\n    n=I()\n    l=L()\n    l.sort()\n    d={i:1 for i in l}\n    c=n//2\n    i=0\n    while c>0:\n        j=i+1\n        while c>0 and j<n:\n            if l[j]%l[i] not in d:\n                print(l[j],l[i])\n                c-=1\n            j+=1\n        i+=1",
                true
            ],
            [
                "def main():\n    n = int(input())\n    x = sorted([int(x) for x in input().split()])\n    cnt = 0\n    for i in range(1, n):\n        if n // 2 == cnt:\n            break\n        print(x[i], x[0])\n        cnt += 1\n\n\nif __name__ == '__main__':\n    # tests = 1\n    tests = int(input())\n    while tests:\n        tests -= 1\n        main()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    for i in range(1, n // 2 + 1):\n        print(s[i], s[0])",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    l.sort()\n    for i in range(1,n//2+1):\n        print(l[i],l[0])",
                true
            ],
            [
                "def pair(nums):\n    nums.sort()\n    results = []\n    for i in range(1, len(nums) // 2 + 1):\n        results.append(f\"{nums[i]} {nums[0]}\")\n    return \"\\n\".join(results)\n\n\nif __name__ == \"__main__\":\n    inp, results = int(input()), []\n    for _ in range(inp):\n        _ = input()\n        results.append(pair(list(map(int, input().split()))))\n    print(*results, sep=\"\\n\")\n",
                true
            ],
            [
                "import sys\n\n\"\"\"\nso upper limit is 10**6\n\nin any pair (a,b) a >= b otherwise a mod b will be equal a and lie in input, also cannot pick 1\n\nits also ideal that b|a since all integer are positive\n\nfor index i > 1, in counting sort\ni, i*2, i*3, i*4 can be picked freely if exist since a mod b in case of multiples would be 0, \n\nsimilarly (i+1), 2*(i+1) can also be picked freely\n\nnow above will count all possible multiple pairs\n\n\nwhat about primes / co-primes:\nabout 2:\n2 can only have 1 as mod since we already counted multiple\nso if 1 exist we cannot pick\notherwise 2, and every other odd number can make a pair\n\nother: co prime (odd, odd) and (even, odd) pairs:\nwe can do a double loop here for these numbers\n\nwe can also simply do a double loop with counting sort and have these numbers in a set\n\"\"\"\n\nimport sys\n\n\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\ndef solve():\n    n = int(input())\n    nums = list(map(int,input().split()))\n    nums.sort()\n    nums_set = set(nums)\n    count= 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if nums[j] % nums[i] not in nums_set:\n                count+=1\n                print(nums[j],nums[i])\n            if count >= n // 2:\n                return\n\n\nT = int(input())\nfor t in range(T):\n    solve()\n\n\n",
                true
            ],
            [
                "import sys\n\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    A = sorted(A)\n    for i in range(1, n//2+1):\n        print(A[i], A[0])",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = min(a)\n    a.sort()\n    for i in range(1, n//2 + 1):\n        print(a[i], m)\n",
                true
            ],
            [
                "import sys\nfrom collections import deque\nimport math\nfrom bisect import bisect_left\nfrom functools import cmp_to_key\ndef II():\n    return int(sys.stdin.readline())\n \ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n    return map(int, sys.stdin.readline().split())\n \ndef SI():\n    return sys.stdin.readline().strip()\n \ndef FACT(n, mod):\n    s = 1\n    facts = [1]\n    for i in range(1,n+1):\n        s*=i\n        s%=mod\n        facts.append(s)\n    return facts[n]\n \ndef C(n, k, mod):\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\n \ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int,input().split()))\n    l.sort()\n    for j in range(1,n//2 + 1):\n        print(l[j],l[0])",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    for j in range(1,n//2+1):\n        print(arr[j],arr[0])\n",
                true
            ],
            [
                "from typing import Sequence\n\nT = int(input())\nfor t in range (T):\n    l_of_sequence = int(input())\n    sequence = list(map(int , input().split()))\n    sequence.sort()\n    for i in range (l_of_sequence // 2):\n        print (sequence[i+1] , sequence[0])",
                true
            ],
            [
                "t = int(input())\nfor q in range(0, t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    \n    li.sort()\n    \n    requirement = n // 2\n    temp = 1\n\n    for i in range(0, requirement):\n        print(li[temp], li[0])\n        temp += 1\n",
                true
            ],
            [
                "g = int(input())\nfor _ in range(g):\n    n = int(input())\n    l = list(map(int,input().strip().split()))\n    l.sort()\n    count = 0\n    out = False\n    si = len(l)\n    ch = si//2\n    #print(\"kdsf\")\n    for i in range(si-1):\n        for j in range(i+1,si):\n            a = l[i]%l[j]\n            b = l[j]%l[i]\n            lp = si-1\n            fp = 0\n            while(fp<lp):\n                mid = (lp+fp)//2\n                if l[mid]==a:\n                    break\n                elif l[mid]<a:\n                    fp = mid\n                else:\n                    lp = mid\n            else:\n                count += 1\n                print(l[i],l[j])\n            if count==ch:\n                out = True\n                break\n            \n\n            lp = si-1\n            fp = 0\n            while(fp<lp):\n                mid = (lp+fp)//2\n                if l[mid]==b:\n                    break\n                elif l[mid]<a:\n                    fp = mid\n                else:\n                    lp = mid\n            else:\n                print(l[j],l[i])\n                count += 1\n            if count==ch:\n                out = True\n                break\n        if out:\n            break\n",
                true
            ],
            [
                "def getint():\n    return [int(i) for i in input().split()]\ndef get():\n    return int(input())\ndef getstr():\n    return [i for i in input().split()]\ndef S():\n    for test in range(int(input())):\n        solve()\nimport math\nimport itertools as it\nimport bisect\nimport time\nimport collections as ct\n\ndef lower_bound(a,x):\n    l=-1\n    r=len(a)\n    while l+1!=r:\n        mid=l+r>>1\n        if a[mid]<x:\n            l=mid\n        else:\n            r=mid\n    return r\ndef upper_bound(a,x):\n    l=-1\n    r=len(a)\n    while l+1!=r:\n        mid=l+r>>1\n        if a[mid]<=x:\n            l=mid\n        else:\n            r=mid\n    return r\ndef solve():\n    n=get()\n    a=getint()\n    a.sort()\n    n//=2\n    for i in range(1,n+1):\n        print(a[i],a[0])\n\n\n#solve()\nS()",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    m=min(arr)\n    s=set(arr)\n    ans=[]\n    for el in sorted(arr)[1:]:\n        if el%m not in s:\n            ans.append((el,m))\n    for a,b in ans[:n//2]:\n        print(a,b)        ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    a.sort()\n    for i in range(1,n//2+1):\n        print(a[i],a[0])",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    b=[int(k) for k in input().split()]\n   \n\n\n    b.sort()\n    \n    for k in range(1,n//2+1):\n        print(b[k],b[0])\n     \n\n                \n\n\n    \n    ",
                true
            ],
            [
                "from math import ceil, log2, floor,sqrt,gcd\nfrom collections import defaultdict,deque\nfrom bisect import bisect_left\nimport sys\nimport os.path\n\nsys.setrecursionlimit(200000)\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r+\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\n\n# input = sys.stdin.readline\n# print=sys.stdout.write\ndef MI():\n    return map(int, input().split())\n\n# def bfs(s,adj):\n     \n#     V = 10**5+2\n#     visited = [False] * V\n#     level = [0] * V\n  \n#     for i in range(V):\n#         visited[i] = False\n#         level[i] = 0\n#     queue = deque()\n#     visited[s] = True\n#     queue.append(s)\n#     level[s] = 0\n  \n#     while (len(queue) > 0):\n\n#         s = queue.popleft()\n#         for i in adj[s]:\n#             if (not visited[i]):\n#                 level[i] = level[s] + 1\n#                 visited[i] = True\n#                 queue.append(i)           \n#     return level\n\n\nmod=10**9+7\n\n\ndef solve(testcase):\n    n= int(input())\n    # n,p,q=MI()\n    \n        \n\n    a=list(MI())\n    a.sort()\n    for i in range(1,n//2+1):\n        print(a[i],a[0])\n        \n    \n\nt=int(input())\n# t=1\nfor _ in range(t):\n    solve(_+1)",
                true
            ],
            [
                "#Mamma don't raises quitter.................................................\n#manan is improving, keep hustling manan bhai ;)\nfrom collections import deque as de\nimport math\nimport sys\nfrom math import sqrt as sq\nfrom math import floor as fl\nfrom math import ceil as ce\nfrom sys import stdin, stdout\nimport time\n\nsys.setrecursionlimit(10**7)\nfrom collections import Counter as cnt\nfrom functools import  reduce\n\nfrom itertools import groupby as gb\n#from fractions import Fraction as fr\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom typing import Coroutine\n\ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    \nclass My_stack():\n    def __init__(self):\n        self.data = []\n    def my_push(self, x):\n        return (self.data.append(x))\n    def my_pop(self):\n        return (self.data.pop())\n    def __iter__(self):\n        return iter(self.data)\n    def my_peak(self):\n        return (self.data[-1])\n    def my_contains(self, x):\n        return (self.data.count(x))\n    def my_show_all(self):\n        return (self.data)\n    def isEmpty(self):\n      return len(self.data)==0\n    def len(self):\n        return len(self.data)\n    \n\narrStack = My_stack() \n\nclass graph():\n    def __init__(self):\n        self.graphdict = {}\n    def add_edge(self, node, neighbor):\n        if node not in self.graphdict:\n            self.graphdict[node]=[neighbor]\n        else:\n            self.graphdict[node].append(neighbor)\n    def show_edge(self):\n        for node in self.graphdict:\n            for neighbors in self.graphdict:\n                print(node, neighbors)\n    def show_graph(self):\n        return self.graphdict\n\n    \n\n\n    \n            \n\n#decimal to binary   \ndef decimalToBinary(n): \n    return bin(n).replace(\"0b\", \"\")\n#binary to decimal\ndef binarytodecimal(n):\n    return int(n,2)\n\ndef isPrime(n) : \n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\ndef get_prime_factors(number):\n    prime_factors = []\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number = number / 2\n    for i in range(3, int(math.sqrt(number)) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(int(i))\n            number = number / i\n\n    if number > 2:\n        prime_factors.append(int(number))\n    return prime_factors\n\ndef get_frequency(list):\n    dic={}\n    for ele in list:\n        if ele in dic:\n            dic[ele] += 1\n        else:\n            dic[ele] = 1\n    return dic\n\ndef Log2(x): \n    return (math.log10(x) / \n            math.log10(2)); \n\n \n# Function to get product of digits\ndef getProduct(n):\n    product = 1\n    while (n != 0):\n        product = product * (n % 10)\n        n = n // 10\n    return product\n#fucntion to find regular bracket sequence\ndef regularBracketsequence(str,arrStack):\n    for i in range(len(str)):\n        if str[i] =='(':\n            arrStack.my_push(str[i])\n        else:\n            if arrStack.isEmpty():\n                return False\n            else:\n                arrStack.my_pop()\n    if arrStack.isEmpty():\n        return True\n    else:\n        return False\n\n#function to find LCM of two numbers\ndef lcm(x,y):\n   lcm = (x*y)//math.gcd(x,y)\n   return lcm\n\ndef isPowerOfTwo(n): \n    return (math.ceil(Log2(n)) == math.floor(Log2(n))); \n#to check whether the given sorted sequnce is forming an AP or not....\ndef checkisap(list):\n    d=list[1]-list[0]\n    for i in range(2,len(list)):\n        temp=list[i]-list[i-1]\n        if temp !=d:\n            return False\n    return True\n\n#seive of erathanos\ndef primes_method5(n):\n    out ={}\n    sieve = [True] * (n+1)\n    for p in range(2, n+1):\n        if (sieve[p]):\n            out[p]=1\n            for i in range(p, n+1, p):\n                sieve[i] = False\n    return out\n#fucntion to get unique number to a cell in a matrix\ndef id(i, j, col): #one based indexing and columnwise numeration\n    ans= (i-1)*col\n    ans+=j\n    return ans\n\n#function to get the sum of digits\ndef getSum(n): \n      \n    strr = str(n)\n    list_of_number = list(map(int, strr.strip()))\n    return sum(list_of_number)\ndef checkperfectsquare(n):\n    if (ce(sq(n)) == fl(sq(n))):\n        return True\n    else:\n        return False\n#this used for selecting r objects from n ojects\ndef combinatrics(n,r):\n    num=n\n    deno=n-r\n    pr=1\n    for i in range(num,deno,-1):\n        pr*=i\n    an=1\n    for i in range(1,r+1):\n        an*=i\n    ans=pr//an\n    return ans\n#ceil  function gives wrong answer after 10^17 so i have to create my own :)\n# because i don't want to doubt on my solution of 900-1000 problem set.\ndef ceildiv(x,y): \n    return (x+y-1)//y \n  \ndef di():return map(int, input().split())\ndef ii():return int(input())\ndef li():return list(map(int, input().split()))\ndef si():return list(map(str, input()))\ndef indict():\n    dic = {}\n    for index, value in enumerate(input().split()):\n        dic[int(value)] = int(index)\n    return dic\ndef frqdict(): \n    # by default it is for integer input. :)\n    dic={}\n    for index, value in enumerate(input()):\n        if value not in dic:\n            dic[value] =1\n        else:\n            dic[value] +=1\n    return dic\n\n#sys.stdin = open('input.txt', 'r')\n#sys.stdout = open('output.txt', 'w')\n#practice like your never won\n#perform like you never lost\nt=ii()\nwhile t:\n    t-=1\n    n=ii()\n    a=sorted(li())\n    for i in range(1,(n//2)+1):\n        print( a[i], a[0])\n    ",
                true
            ],
            [
                "import sys\nimport bisect\nimport math\nfrom collections import deque\ninput = lambda: sys.stdin.readline().strip()\nmod = 10**9 + 7\n\ndef solve():\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    ans=\"\"\n    for i in range(1,(n//2)+1):\n        ans+=str(a[i])+\" \"+str(a[0])+\"\\n\"\n    return ans[:-1]\n\nif __name__ == \"__main__\":\n    t=1\n    t = int(input())\n    for _ in range(t):\n        print(solve())",
                true
            ],
            [
                "# '''\n#      |\\_/|                  \n#      | @ @   Woof! \n#      |   <>              _  \n#      |  _/\\------____ ((| |))\n#      |               `--' |   \n#  ____|_       ___|   |___.' \n# /_/_____/____/_______|\n# I am here to guard this code, woof!\n# '''\n\n\n\nimport sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\n \nint_max = float('inf')\nint_min = -(float('inf'))\nmod = 10**9 + 7\nANS = []\n# infile = open(sys.argv[1], \"r\")\n# input = infile.readline\ninput = stdin.readline\n \ndef solve():\n    pass\n \nt = int(input())\n# t = 1\n \nfor i in range(t):\n    n = int(input())\n    # n, k = map(int, input().split())\n    arr =  list(map(int, input().split()))\n    # arr = list(input())\n    arr.sort()\n    j = 1\n    for i in range(n//2):\n        print(arr[j], arr[0])\n        j += 1\n\n\n# print('\\n'.join(ANS))",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools,copy,random\nfrom functools import reduce \nimport operator\n \ninf = float('inf')\nmod = 10**9+7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // fractions.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(20000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\n \ndef find(i) :\n    if par[i] != i : par[i] = find(par[i]);\n    return par[i]\ndef union(a, b) :\n    a = find(a)\n    b = find(b)\n    if a == b : return False\n    par[a] = b\n    return True\n#par = [i for i in range(n)]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    return graph\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\n \ndef initGrid(h,w):\n    for i in range(h):\n        s = S()\n        grid.append(list(s))\n    return grid\n \ndef soe(limit):\n    a = [True] * limit                          # Initialize the primality list\n    a[0] = a[1] = False\n \n    for (i, isprime) in enumerate(a):\n        if isprime:\n            yield i\n            for n in range(i*i, limit, i):     # Mark factors non-prime\n                a[n] = False\n    return a\n\n################### Main (Author - 9th) ################## \n\nfor _ in range(I()):\n    n = I()\n    cnt = n//2\n    a = LI()\n    a.sort()\n    mn = min(a)\n    a.remove(mn)\n    chk = set(a)\n    for i in range(n-1):\n        if cnt == 0: break\n        #print(a[i], mn, a[i]%mn not in chk, a[i]!=mn)\n        if (mn%a[i]) not in chk and a[i] != mn:\n            print(a[i],mn)\n            cnt-=1\n    #exit()\n\n         \n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(0, t):\n    b = int(input())\n    c = list(map(int, input().split()))\n    c.sort()\n    for g in range(0, b // 2):\n        print(c[g + 1], c[0])",
                true
            ],
            [
                "### Codeforces handle - \"@titanalpha\"\n#Email id - shubhamnokiafan@gmail.com\n\nfrom collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nimport copy\nfrom decimal import Decimal,getcontext\ngetcontext().prec = 32\n\nMOD = 1000000007\nMAX = sys.maxsize\nMIN = -sys.maxsize\nprime = []\n\nclass get:\n    def int():\n        return list(map(int,input().split()))\n    def str():\n        return input().split()\n    def float():\n        return list(map(float,input().split()))\n    def map():\n        return map(int,input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x))+1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result,item)\n    return result\n\ndef LCM(a,b):\n    return (a*b)//(math.gcd(a,b))\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2,sqrt(n)):\n        if n%i == 0:\n            return False\n    return True\n\ndef solve():\n    n = int(input())\n    a = get.int()\n    a.sort()\n    for i in range(n//2):\n        print(a[i+1], a[0])\n    \nfor _ in range(int(input())):\n    solve()",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    # n, k = map(int, input().split())\n    arr= list(map(int, input().split()))\n    # output_arr =[]\n\n    arr.sort()\n    for i in range(len(arr)//2):\n        print(arr[i+1], arr[0])\n    ",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    lst=list(map(int,input().split()))\n    lst.sort()\n    for j in range(1,n//2+1):\n        print(lst[j],lst[0])",
                true
            ],
            [
                "t=int(input())\nfor i in range (0,t):\n    n= int(input())\n    l=[int(i) for i in input().split()]\n    l.sort()\n    for i in range(0,n//2):\n        print(l[i+1],end=\" \")\n        print(l[0])\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split(' ')))[:n]\n    lst_1 = sorted(lst)\n    x = n//2\n    y = lst_1[0]\n    cou = 0\n    for i in lst_1[1:]:\n        if cou < x:\n            print(i, y)\n            cou += 1\n",
                true
            ],
            [
                "from math import *\nt = int(input())\n\n\nfor i in range(t):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    lis.sort()\n    for i in range(1,n//2+1):\n        print(lis[i],lis[0])\n",
                true
            ],
            [
                "import math\ndef solve(n,A):\n    A.sort()\n    mi = min(A)\n    ans = []\n    cnt = math.floor(n/2)\n    for a in A[1:cnt+1]:\n        ans.append((a,mi))\n    return ans\n\ndef main():\n    ans = []\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        A = list(map(int, input().split(' ')))\n        ans.append(solve(n,A))\n    for a in ans:\n        for x,y in a:\n            print(f\"{x} {y}\")\n\n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "import sys\n\n# sys.setrecursionlimit(200005)\nint1 = lambda x: int(x)-1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline().rstrip()\ndij = [(0, 1), (-1, 0), (0, -1), (1, 0)]\n# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n# inf = 18446744073709551615\ninf = 4294967295\nmd = 10**9+7\n# md = 998244353\n\ndef solve():\n    n=II()\n    aa=LI()\n    aa.sort()\n    for a in aa[1:1+n//2]:\n        print(a,aa[0])\n\nfor testcase in range(II()):\n    solve()\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    l.sort()\n    for i in range(1,(n//2)+1):\n        sys.stdout.write(str(l[i])+\" \"+str(l[0])+\"\\n\")\n\n",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\n\nt=int(input())\nfor you in range(t):\n    n=int(input())\n    l=input().split()\n    li=[int(i) for i in l]\n\n    li.sort()\n    for i in range(1,1+(n//2)):\n        print(li[i],li[0])\n",
                true
            ],
            [
                "t = int(input())\nfor m in range(t):\n    n = int(input())\n    int_list = list(map(int, input().split()))\n    int_list.sort()\n    #int_list.reverse()\n    #print(int_list)\n\n    sum = 0\n    y = int_list[0]\n    for i in range(n):\n        x = int_list[i + 1]\n        mod = x % y\n\n        sum = sum + 1\n        print(x, y)\n        if sum >= n // 2:\n            #print(\"broken\")\n            break\n\n#print(sum)\n",
                true
            ],
            [
                "#####----ANTARA KUNDU----####\nimport random\nfrom collections import Counter, defaultdict\nfrom copy import deepcopy as dc\nimport math\ntry:\n    t=int(input())\n    for tt in range(1,t+1):\n        n=int(input())\n        a=list(map(int,input().split()))\n        a.sort()\n        for i in range(1,1+n//2):\n            print(a[i],a[0])\n        #x,y=map(int,input().split())\n        \nexcept EOFError as e:\n    pass",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n\n    l=list(map(int,input().split()))\n\n    l.sort()\n    \n    c=n//2\n    i=1\n\n    while c>0:\n\n        print(l[i],l[0])\n\n        i+=1\n        c-=1\n\n\n    \n\n\n\n\n\n    \n        \n\n\n\n    \n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        \n    \n\n            \n\n\n\n\n        \n\n\n\n\n\n        \n    \n\n    \n    \n        \n        \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    N=int(input())\n    arr=sorted(list(map(int,input().split())))\n    for i in range(1,N//2+1):\n        print(arr[i],arr[0])",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    l.sort()\n    for i in range(1,n//2+1):\n        print(l[i],l[0])",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    n = n//2\n    a = list(map(int,input().split()))\n    a = sorted(a)\n    y = a[0]\n    i = 1\n    while i<n+1:\n        print(a[i],y)\n        i+=1",
                true
            ],
            [
                "# Author : Ghulam Junaid\nfor i in range(int(input())):\n    lenn = int(input())\n    list1 = list(map(int,input().split()))\n    list1.sort()\n    for i in range(1,lenn//2+1):\n        print(list1[i],list1[0])\n",
                true
            ],
            [
                "t=int(input())\nwhile(t):\n   t-=1\n   n=int(input())\n   ls = list(map(int , input().split()))\n   ls.sort()\n   y=int(len(ls)/2)\n   x=range(1 , y+1)\n   for i in x:\n       print(ls[i] , ls[0]) \n    ",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou are given a string s of length n consisting of characters a and/or b.\n\nLet \\operatorname{AB}(s) be the number of occurrences of string ab in s as a substring. Analogically, \\operatorname{BA}(s) is the number of occurrences of ba in s as a substring.\n\nIn one step, you can choose any index i and replace s_i with character a or b.\n\nWhat is the minimum number of steps you need to make to achieve \\operatorname{AB}(s) = \\operatorname{BA}(s)?\n\nReminder:\n\nThe number of occurrences of string d in s as substring is the number of indices i (1 \u2264 i \u2264 |s| - |d| + 1) such that substring s_i s_{i + 1} ... s_{i + |d| - 1} is equal to d. For example, \\operatorname{AB}(aabbbabaa) = 2 since there are two indices i: i = 2 where aabbbabaa and i = 6 where aabbbabaa.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000). Description of the test cases follows.\n\nThe first and only line of each test case contains a single string s (1 \u2264 |s| \u2264 100, where |s| is the length of the string s), consisting only of characters a and/or b.\n\nOutput\n\nFor each test case, print the resulting string s with \\operatorname{AB}(s) = \\operatorname{BA}(s) you'll get making the minimum number of steps.\n\nIf there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\nb\naabbbabaa\nabbb\nabbaab\n\n\nOutput\n\n\nb\naabbbabaa\nbbbb\nabbaaa\n\nNote\n\nIn the first test case, both \\operatorname{AB}(s) = 0 and \\operatorname{BA}(s) = 0 (there are no occurrences of ab (ba) in b), so can leave s untouched.\n\nIn the second test case, \\operatorname{AB}(s) = 2 and \\operatorname{BA}(s) = 2, so you can leave s untouched. \n\nIn the third test case, \\operatorname{AB}(s) = 1 and \\operatorname{BA}(s) = 0. For example, we can change s_1 to b and make both values zero.\n\nIn the fourth test case, \\operatorname{AB}(s) = 2 and \\operatorname{BA}(s) = 1. For example, we can change s_6 to a and make both values equal to 1.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for _ in range(int(input())):\n    s = input()\n    \n    if len(s)==1:\n        print(s)\n        continue\n    \n    if s[0]==s[len(s)-1]:\n        print(s)\n    else:\n        ns = \"\"\n        if s[0]=='a':\n            ns='b'\n        else:\n            ns='a'\n        print(ns+s[1:])",
                true
            ],
            [
                "for i in range(int(input())):\n    string = input()\n    if string[0] != string[-1]:\n        string = string[-1]+ string[1:]\n    print(string)",
                true
            ],
            [
                "for _ in range(int(input())):\n    f=input()\n    x=[]\n    for i in f:\n        x.append(i)\n    count1=0\n    count2=0\n    if(len(x)>1):\n        for i in range(len(x)-1):\n            if(x[i]==\"a\" and x[i+1]==\"b\"):\n                count1+=1\n            elif(x[i]==\"b\" and x[i+1]==\"a\"):\n                count2+=1\n        if(count1==count2):\n            print(f)\n        else:\n            if(count1>count2):\n                for i in range(len(x)):\n                    if(x[i]==\"a\"):\n                        x[i]=\"b\"\n                        break\n\n            else:\n                for i in range(len(x)):\n                    if(x[i]==\"b\"):\n                        x[i]=\"a\"\n                        break\n            str=\"\"\n            for i in x:\n                str+=i\n            print(str)\n    else:\n        print(f)",
                true
            ],
            [
                "def abc(s):\n    if s.count(\"ab\")==s.count(\"ba\"):\n        return True\n    return False\n\nfor _ in range(int(input())):\n    s = input().strip()\n    if abc(s):\n        print(s)\n    else:\n        l = len(s)\n        for i in range(l):\n            if s[i]==\"a\":\n                d = s[ : i] + \"b\" + s[i+1 : ]\n            else:\n                d = s[ : i] + \"a\" + s[i+1 : ]\n\n            if abc(d):\n                print(d)\n                break",
                true
            ],
            [
                "def check_equal(s):\n    ab,ba = 0,0\n    for i in range(1,len(s)):\n        if s[i]=='a' and s[i-1]=='b': ba+=1\n        if s[i]=='b' and s[i-1]=='a': ab+=1\n    if ab==ba: print(s)\n    else:\n        if ab>ba:\n            if s[0] == 'a':\n                print('b'+s[1:])\n            elif s[len(s)-1] == 'b':\n                print(s[:len(s)]+'a')\n        elif ba>ab:\n            if s[0] == 'b':\n                print('a'+s[1:])\n            elif s[len(s)-1] == 'a':\n                print(s[:len(s)]+'b')\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        s = input()\n        if len(s)<=1: print (s)\n        else: check_equal(s)\n",
                true
            ],
            [
                "\nt = int(input())\n\nfor _ in range(t):\n    s = input()\n    changes = []\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            changes.append(i)\n    \n    if len(changes) % 2 == 0:\n        print(s)\n    else:\n        c = 'a' if s[0] == 'b' else 'b'\n        print(c + s[1:])\n\n",
                true
            ],
            [
                "from collections import deque\n\nfor _ in range(int(input())):\n    s = input()\n    a = s.count('ab')\n    b = s.count('ba')\n    \n    if a == b:\n        print(s)\n    else:\n        new = \"\"\n        for i in range(len(s)):\n            if s[i] == \"a\": \n                new = s[:i] + \"b\" + s[i + 1:]\n            else:\n                new = s[:i] + \"a\" + s[i + 1:]\n            a = new.count('ab')\n            b = new.count('ba')\n            \n            if a == b:\n                print(new)\n                break",
                true
            ],
            [
                "x = int(input())\n\nab = lambda x: x.count(\"ab\")\nba = lambda x: x.count(\"ba\")\n\n\n\nfor _ in range(x):\n    x = input()\n    if x.count(\"ab\") == x.count(\"ba\"):\n        print(x)\n        continue\n\n    xx = list(x)\n    if xx[0] == \"a\":\n        xx[0] = \"b\"\n    else:\n        xx[0] = \"a\"\n\n    xx = \"\".join(xx)\n    if xx.count(\"ab\") == xx.count(\"ba\"):\n        print(xx)\n        continue\n\n    xx = list(x)\n    if xx[-1] == \"a\":\n        xx[-1] = \"b\"\n    else:\n        xx[-1] = \"a\"\n        \n    xx = \"\".join(xx)\n    if x.count(\"ab\") == x.count(\"ba\"):\n        print(xx)\n        continue\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n  s=input()\n  c1=0\n  c2=0\n  a=[]\n  b=[]\n  for i in range(1,len(s)):\n    if s[i-1]+s[i]==\"ab\":\n      c1=c1+1\n      a.append(i-1)\n    elif s[i-1]+s[i]==\"ba\":\n      c2=c2+1\n      b.append(i-1)    \n  if c1>c2:\n    n=a[len(a)-1]\n    k=s.replace(s[n],'b',1)\n    print(k)\n\n  elif c1<c2:  \n    n=b[len(b)-1]\n    k=s.replace(s[n],'a',1)\n    print(k)\n  else:\n    print(s)   \n\n\n",
                true
            ],
            [
                "    #from _typeshed import SupportsKeysAndGetItem\nimport sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\n# sys.stdin=open(\"input.txt\",\"r\");\n# sys.stdout=open(\"output.txt\",\"w\")\n####### GLOBAL ###############\nMOD=1000000007\nNO=lambda:print(\"NO\")\nYES=lambda:print(\"YES\")\n_1=lambda:print(-1)\nari=lambda:[int(_) for _ in input().split()]\ncin=lambda:int(input())\ncis=lambda:input()\nshow=lambda x: print(x)\nfast= lambda:sys.stdin.readline()\n\n########### END #########\n######\ntest_case=1\ntest_case=int(input())\n######\nsys.setrecursionlimit(10**6)\n    \ndef ans():\n    s=cis()\n    abcount=0\n    bacount=0\n    n=len(s)\n    s=list(s)\n    def bruteforce(news):\n        abcount=0\n        nonlocal n\n        bacount=0\n        for i in range(n-1):\n            if s[i]==\"a\" and s[i+1]==\"b\":\n                abcount+=1\n            if s[i]==\"b\" and s[i+1]==\"a\":\n                bacount+=1\n        # print(abcount,bacount)\n        if abcount==bacount:\n            return \"\".join(news)\n        return False\n    ans=bruteforce(s)\n    if bruteforce(s)!=False:\n        print(ans)\n        return \n        \n    for i in range(n):\n        val=s[i]\n        if s[i]==\"a\":\n            s[i]=\"b\"\n            ans=bruteforce(s)\n            if ans!=False:\n                print(ans)\n                return\n            s[i]=\"a\"\n        else:\n            s[i]=\"a\"\n            ans=bruteforce(s)\n            if ans!=False:\n                print(ans)\n                return\n            s[i]=\"b\"\n    print(ans)\n            \n            \n    # print(\"b\"*len(a))\n    return\nfor _ in range(test_case):\n    ans()\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    ab = s.count('ab')\n    #print(ab)\n    ba = s.count('ba')\n    #print(ba)\n    s = list(s)\n    if ab > ba:\n        if s[0] == 'a':\n            s[0] = 'b'\n        elif s[-1] == 'a':\n            s[0] = 'b'\n    elif ba > ab:\n        if s[0] == 'b':\n            s[0] = 'a'\n        elif s[-1] == 'b':\n            s[0] = 'a'\n    print(''.join(i for i in s))\n\n",
                true
            ],
            [
                "\n\n\n\ndef solve(s):\n    if s[0] == s[-1]:\n        return s\n    s = s[-1] + s[1:]\n    return s\n\n\n\n\n\n\n\n\n\nt = int(input())\n\nfor i in range(t):\n    s = input()\n    print(solve(s))\n    # print(s)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s=input()\n    count=0\n    add=0\n    x=0\n    y=0\n    for j in range(len(s)-1):\n        if s[j]==\"a\" and s[j+1]==\"b\":\n            count+=1\n            x=j\n\n        elif s[j]==\"b\" and s[j+1]==\"a\":\n            add+=1\n            y=j\n    \n    if count==add:\n        print(s)\n    else:\n        if count>add:\n            \n            s=s.replace(s[x],\"b\",1)\n            print(s)\n            \n        else:\n            s=s.replace(s[y],\"a\",1)\n            print(s)\n        \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    \n    ab = 0\n    ba = 0\n    for i in range(n-1):\n        if s[i]=='a' and s[i+1]=='b':ab+=1\n        elif s[i]=='b' and s[i+1]=='a':ba += 1\n    \n    if ab == ba:\n        print(s)\n    else:\n        if s[0]=='a':\n            print('b'+s[1:])\n        else:\n            print('a'+s[1:])",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    s=input()\n    if s[0]==s[len(s)-1]: print(s)\n    else:\n        s=s[len(s)-1]+s[1:]\n        print(s)",
                true
            ],
            [
                "T = int(input())\nfor t in range(T):\n    s = input().strip()\n    ab, ba = s.count('ab'), s.count('ba')\n    if ab == ba:\n        print(s)\n    elif ab > ba:\n        print(s.replace('a', 'b',ab-ba))\n    else:\n        print(s.replace('b', 'a',ba-ab))",
                true
            ],
            [
                "import sys \ninput = lambda:sys.stdin.readline().strip()\nt = int(input())\ndef match(s,m):\n    i = 0\n    res = 0\n    while i+len(m)<=len(s):\n        if s[i:i+len(m)]==m:\n            res+=1\n            i = i+len(m)\n            continue \n        i+=1\n    return res \nwhile t:\n    t-=1\n    s = list(input())\n    a = match(s,list(\"ab\"))\n    b = match(s,list(\"ba\"))\n    if a==b:\n        print(\"\".join(s))\n    elif a>b:\n        print(\"\".join(['b']+s[1:]))\n    else:\n        print(\"\".join(['a']+s[1:]))",
                true
            ],
            [
                "T = int(input())\nfor _ in range(T):\n    s = list(input())\n\n    if s[0] == s[-1]:\n        pass\n    else:\n        s[0] = 'b' if s[0] == 'a' else 'a'\n\n    print(\"\".join(s))\n        ",
                true
            ],
            [
                "def count(s):\n    c1 = 0\n    c2 = 0\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i]=='a' and s[i+1]=='b':\n            c1+=1\n        if s[i]=='b' and s[i+1]=='a':\n            c2+=1\n    if c1==c2:\n        return 1\n    else:\n        return 0\n    \nfor _ in range(int(input())):\n    s = input()\n    s = list(s)\n    n = len(s)\n    if count(s)==1:\n        llstr =''\n        for i in s:\n            llstr +=str(i)\n        print(llstr)\n    else:\n        for i in range(len(s)):\n            s1 = s\n            if s1[i]=='a':\n                s1[i]='b'\n            else:\n                s1[i] = 'a'\n            if count(s1)==1:\n                llstr = ''\n                for i in s:\n                    llstr += str(i)\n                print(llstr)\n                break\n",
                true
            ],
            [
                "tc = int(input())\ndct = {1:'a',-1:'b'}\ndef get_key(val):\n    for key, value in dct.items():\n         if val == value:\n             return key\n\n\nwhile(tc):\n    polpo = input()\n    a=polpo.count('ab')\n    b=polpo.count('ba')\n    polpo=list(polpo)\n    if(a!=b):\n        if (abs(a-b)==2):\n            polpo[0] = dct[-1*get_key(polpo[0])]\n            polpo[-1] = dct[-1*get_key(polpo[-1])]\n            print(''.join(polpo))\n        else:\n            c = polpo[0]\n            polpo[0] = dct[-1*get_key(polpo[0])]\n            if(polpo.count('ab') != polpo.count('ba')):\n                polpo[0] = c\n                polpo[-1] = dct[-1*get_key(polpo[-1])]\n                print(''.join(polpo))\n            else:\n                print(''.join(polpo))\n    else:\n        print(''.join(polpo))\n    tc-=1",
                true
            ],
            [
                "test_case = int(input())\n\ndef make_equal(keep):\n    while keep.count('ab') != keep.count('ba'):\n        if keep.count('ab') > keep.count('ba'):\n            keep = keep.replace('a','b',1)\n        else :\n            keep = keep.replace('b','a',1)\n    return  keep\n\nwhile test_case :\n    string = input()\n    if string.count('ab') == string.count('ba'):\n        print(f\"{string}\")\n    else :\n        print(make_equal(string))\n    test_case -= 1",
                true
            ],
            [
                "n=int(input())\nfor _ in range(n):\n    s=input()\n    c1=s.count('ab')\n    c2=s.count('ba')\n    if c1==c2:\n        print(s)\n    else:\n        if s[0]=='a':\n            l=s[1:]\n            print('b'+l)\n        else:\n            l=s[1:]\n            print('a'+l)",
                true
            ],
            [
                "from sys import stderr\n\ndef is_good(s):\n    return s.count(\"ab\") == s.count(\"ba\")\n\nt = int(input())\n\nfor _ in range(t):\n    s = input()\n    if is_good(s):\n        print(s)\n    else:\n        s1 = s\n        if s1[0] == \"a\":\n            s1 = \"b\" + s1[1:]\n            print(s1, file=stderr)\n            if is_good(s1):\n                print(s1)\n                continue\n        elif s1[0] == \"b\":\n            s1 = \"a\" + s1[1:]\n            print(s1, file=stderr)\n            if is_good(s1):\n                print(s1)\n                continue\n\n        if s1[-1] == \"a\":\n            s1 = s1[:-1]+ \"b\"\n            print(s1, file=stderr)\n            if is_good(s1):\n                print(s1)\n                continue\n        elif s1[-1] == \"b\":\n            s1 = s1[:-1]+\"a\"\n            print(s1, file=stderr)\n            if is_good(s1):\n                print(s1)\n                continue\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    n=list(s)\n    ab=0\n    ba=0\n    for i in range(len(s)-1):\n        if s[i] == 'a' and s[i+1]== 'b':\n            ab+=1\n        if s[i] == 'b' and s[i+1] == 'a':\n            ba+=1\n    if ab == ba:\n        print(s)\n    elif s[0]=='b':\n        n[0]='a'\n        print(''.join(n))\n    else:\n        n[0]='b'\n        print(''.join(n))",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = list(input())\n    #aList = []\n    #bList = []\n    abCount, baCount = 0, 0\n    for i in range(0, (len(s) - 1)):\n        if(s[i] == \"a\" and s[i + 1] == \"b\"):\n            abCount += 1\n            #aList.append(i)\n            \n        if(s[i] == \"b\" and s[i + 1] == \"a\"):\n            baCount += 1\n            #bList.append(i)\n            \n    #print(\"abCount =\", abCount, \"baCount =\", baCount)\n   \n    if(abCount == baCount):\n        print(\"\".join(s))\n\n    else:\n        if(s[0] == \"a\"):\n            s[0] = \"b\"\n        else:\n            s[0] = \"a\"\n        print(\"\".join(s))\n        \n    ",
                true
            ],
            [
                "t = int(input())\nfrom collections import defaultdict as dd\ndef find_change(orig: str, new:str) -> tuple:\n    orig_score = (1,0) if orig == 'ab' else (0,1) if orig == 'ba' else (0,0)\n    new_score = (1,0) if new == 'ab' else (0,1) if new == 'ba' else (0,0)\n    return (new_score[0] - orig_score[0], new_score[1] - orig_score[1])\nfor _ in range(t):\n    s = input().strip()\n    ab,ba = 0,0\n    for i in range(len(s)-1):\n        if s[i] == 'a' and s[i+1] == 'b':\n            ab += 1\n        elif s[i] == 'b' and s[i+1] == 'a':\n            ba += 1\n    # find the minimum number of steps needed to make ab == ba\n    for i in range(len(s)):\n        if ab == ba: break\n        change = (0,0)\n        c = s[i]\n        flipped = 'a' if c == 'b' else 'b'\n        if i > 0:\n            change = find_change(s[i-1:i+1], s[i-1]+flipped)\n        if i < len(s)-1:\n            tmp = find_change(s[i:i+2], flipped+s[i+1])\n            change = (change[0] + tmp[0], change[1] + tmp[1])\n        #greedy\n        new_state = (ab + change[0], ba + change[1])\n        if abs(new_state[0] - new_state[1]) < abs(ab - ba):\n            ab += change[0]\n            ba += change[1]\n            s = s[:i] + flipped + s[i+1:]\n    print(s)\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = list(input())\n    ab = 0\n    ba = 0\n    for i in range(1, len(s)):\n        if s[i] == \"a\" and s[i - 1] == \"b\":\n            ba += 1\n        elif s[i] == \"b\" and s[i - 1] == \"a\":\n            ab += 1\n    if ab > ba:\n        s[0] = \"b\"\n    elif ba > ab:\n        s[0] = \"a\"\n    print(*s, sep=\"\")\n",
                true
            ],
            [
                "import math\nfrom collections import OrderedDict\nfrom collections import Counter\nfrom itertools import combinations\n#a= list(map(int, input(\"\").strip().split()))[:n]\ndef solve(s):\n    s=list(s)\n    if s[0]!=s[len(s)-1]:\n        s[0]=s[len(s)-1]\n    print(''.join(s))\nt= int(input(\"\"))\nfor i in range(t):\n    n= input(\"\")\n    solve(n)",
                true
            ],
            [
                "for t in range(int(input())):\n\n    s = input()\n    n = len(s)\n    ab=0\n    ba=0\n    for i in range(n-1):\n        if s[i]=='a' and s[i+1]=='b':\n            ab+=1\n        if s[i]=='b' and s[i+1]=='a':\n            ba+=1\n\n    if ab==ba:\n        print(s)\n    elif ab>ba:\n        diff = ab-ba\n        ans = list(s)\n        i=0\n        while(i<len(ans) and diff):\n            if ans[i]=='a':\n                ans[i]='b'\n                diff-=1\n            i += 1\n        print(''.join(ans))\n    else:\n        diff = ba - ab\n        ans = list(s)\n        i = 0\n        while (i < len(ans) and diff):\n            if ans[i] == 'b':\n                ans[i] = 'a'\n                diff -= 1\n            i += 1\n        print(''.join(ans))\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = [i for i in input()]\n    n = len(s)\n    c1 = 0\n    c2 = 0\n\n    for i in range(1, n):\n        if s[i] == \"a\" and s[i-1] == \"b\":\n            c2+=1\n        elif s[i] == \"b\" and s[i-1] == \"a\":\n            c1+=1\n    if c1 == c2:\n        print(\"\".join(s))\n    elif c1 > c2:\n        for i in range(n):\n            if s[i] == \"a\":\n                s[i] = \"b\"\n                break\n        print(\"\".join(s))\n    else:\n        for i in range(n):\n            if s[i] == \"b\":\n                s[i] = \"a\"\n                break\n        print(\"\".join(s))\n    \n    \n",
                true
            ],
            [
                "def convert(s):\n    str1 = \"\"\n    return (str1.join(s))\n \n \nt = int(input())\ncases = []\n \nfor i in range(0, t):\n    cases.append(input())\n \nfor case in cases:\n \n    case = list(case)\n    case[0] = case[len(case)-1]\n    print(convert(case))",
                true
            ],
            [
                "def make_equal(keep):\n    while keep.count('ab') != keep.count('ba'):\n        if keep.count('ab') > keep.count('ba'):\n            keep = keep.replace('a','b',1)\n        else :\n            keep = keep.replace('b','a',1)\n    return  keep\n\ntest_case = int(input())\nwhile test_case :\n    string = input()\n    if string.count('ab') == string.count('ba'):\n        print(f\"{string}\")\n    else :\n        print(make_equal(string))\n    test_case -= 1\n",
                true
            ],
            [
                "from sys import stdin, stdout\nip = lambda : stdin.readline().rstrip(\"\\r\\n\")\nnum = lambda : int(ip())\nips = lambda : ip().split()\nmp = lambda : map(int, ips())\nls = lambda : list(mp())\nout = lambda x, end='\\n': stdout.write(str(x)+end)\nfrom collections import defaultdict, Counter, deque\nfrom math import gcd\n\n# inf = float(\"inf\")\n# mod = 10**9+7\n    \nfor _ in range(num()):\n    s = ip()\n    if len(s) == 1:\n        out(s)\n        continue\n    x = s.count('ab')\n    y = s.count('ba')\n    if x > y:\n        if s[0] == 'a':\n            out('b'+s[1:])\n        elif s[-1] == 'b':\n            out(s[:-1]+'a')\n    elif x < y:\n        if s[0] == 'b':\n            out('a'+s[1:])\n        elif s[-1] == 'a':\n            out(s[:-1]+'b')\n    else:\n        out(s)",
                true
            ],
            [
                "from math import *\nfrom operator import *\n \nn = int(input())\ns = list()\nfor _ in range(n):\n    s.append(input())\nfor subs in s:\n    ab = subs.count(\"ab\")\n    ba = subs.count(\"ba\")\n    if ab > ba:\n        if subs[0] == 'a':\n            subs = 'b' + subs[1 : len(subs)]\n            print(subs)\n        elif subs[len(s) - 1] == 'b':\n            subs = subs[0 : len(subs) - 1] + 'a'\n            print(subs)\n    elif ab < ba:\n        if subs[0] == 'b':\n            subs = 'a' + subs[1 : len(subs)]\n            print(subs)\n        elif subs[len(s) - 1] == 'a':\n            subs = subs[0 : len(subs) - 1] + 'b'\n            print(subs)\n    else:\n        print(subs)",
                true
            ],
            [
                "n = int(input())\nfor _ in range(n):\n    s = str(input())\n    x = s[0]\n    res = 0\n    for c in s:\n        res = (res + 1) % 2 if c != x else res\n        x = c\n    if res == 1:\n        s = 'b' + s[1:] if s[0] == 'a' else 'a' + s[1:]\n    print(s)",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\nINF=int(1e9)+7\n\ndef solve():\n    s=input().rstrip()\n    if s.count('ab')==s.count('ba'):\n        print(s)\n    else:\n        if s[0]=='a':\n            print('b'+s[1:])\n        else: print('a'+s[1:])\n\nt=int(input())\nwhile(t):\n    t-=1\n    solve()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    if n <2 or s[0] == s[-1]:\n        print(s)\n        continue\n    print(s[-1] + s[1:])",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    ab,ba=0,0\n    s=input()\n    for i in range(len(s)-1):\n        if(s[i]=='a' and s[i+1]=='b'):\n            ab+=1\n        if(s[i]=='b' and s[i+1]=='a'):\n            ba+=1\n    if(ab==ba):\n        print(s)\n    elif(ab>ba):\n        print(s.replace('a','b',1))\n    elif(ba>ab):\n        print(s.replace('b','a',1))",
                true
            ],
            [
                "for _ in range(int(input())):\n    p = input()\n    if p[0] != p[-1]:\n        if p[0] == 'a':\n            print('b'+p[1:])\n        else:\n            print('a'+p[1:])\n    else:\n        print(p)",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    s = input()\n    ab = s.count('ab')\n    ba = s.count('ba')\n    if ab>ba:\n        s = s.replace('a', 'b', 1)\n    elif ba>ab:\n        s = s.replace('b', 'a', 1)\n        \n    print(s)\n",
                true
            ],
            [
                "# <editor-fold desc=\"imports\">\nfrom os import path\nfrom sys import stdin, stdout\nif path.exists('tc.txt'):\n    stdin = open('tc.txt', 'r')\ndef gmi(): return map(int, stdin.readline().strip().split())\ndef gms(): return map(str, stdin.readline().strip().split())\ndef gari(): return list(map(int, stdin.readline().strip().split()))\ndef gart(): return tuple(map(int, stdin.readline().strip().split()))\ndef gars(): return list(map(str, stdin.readline().strip().split()))\ndef gs(): return stdin.readline().strip()\ndef gls(): return list(stdin.readline().strip())\ndef gi(): return int(stdin.readline())\n# </editor-fold>\n\n\n\ndef solve():\n    s = gs()\n    ab, ba = s.count('ab'), s.count('ba')\n    ans = ''\n\n    if ab == ba: return s\n    elif ab > ba:\n        d = ab-ba\n        for i in s:\n            if i == 'a' and d:\n                ans += 'b'\n                d -= 1\n            else:\n                ans += i\n    else:\n        d = ba-ab\n        for i in s:\n            if i == 'b' and d:\n                ans += 'a'\n                d -= 1\n            else:\n                ans += i\n    return ans\n\n\n\n\n\n\n\n# <editor-fold desc=\"Main\">\ntc = gi()\nwhile tc:\n    tc -= 1\n    ans = solve()\n    print(ans)\n# </editor-fold>",
                true
            ],
            [
                "import math as m\nfor _ in range(int(input())):\n    s=input(); x=s.count('ab'); y=s.count('ba');\n    if(x==y): print(s);\n    if(x>y): print('b'+s[1:])\n    if(y>x): print('a'+s[1:])\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    if s[0] == s[-1]:\n        print(s)\n    else:\n        if s[0] == 'a':\n            print('b' + s[1:])\n        else:\n            print('a' + s[1:])\n",
                true
            ],
            [
                "from sys import stdin\nfrom collections import defaultdict as dd\nfrom collections import deque as dq\nfrom collections import Counter as ctr\nfrom heapq import heapify,heappush as ha, heappop as hp\nfrom math import ceil,floor,gcd,sqrt\nfrom bisect import bisect_left as bsl, bisect_right as bsr\nfrom bisect import insort_left as isl, insort_right as isr\nfrom itertools import permutations, combinations\nip = lambda : int(stdin.readline())\nips = lambda : str(stdin.readline())\nipm = lambda : map(int,stdin.readline().split())\nmod = int(1e9)+7\nmod2 = 998244353\nfor _ in range(ip()):\n    s = ips()\n    s = s[:len(s)-1]\n    if s[0]!=s[len(s)-1]:\n        s = s[len(s)-1]+s[1::]\n    print(s)\n",
                true
            ],
            [
                "def occur(A):\n    rev = []\n    now = ''\n    for i in range(len(A)):\n        if A[i] != now:\n            rev.append(1)\n            now = A[i]\n        else:\n            rev[-1] += 1\n    return rev\ndef differ(t):\n    if t == 'a':\n        return 'b'\n    if t == 'b':\n        return 'a'\nT = int(input())    \nANS = []    \nfor _ in range(T):\n    S = list(input())\n    oc = occur(S)\n    ans = S\n    if len(oc) % 2 == 0:\n        ans[0] = differ(S[0])\n    ANS.append(''.join(ans))\nfor ans in ANS:\n    print(ans)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    st=str(input())\n    c1=st.count(\"ab\")\n    c2=st.count(\"ba\")\n    if c1==c2:\n        print(st)\n    else:\n        if c1>c2:\n            lst=list(st)\n            c=lst.index(\"a\")\n            del lst[c]\n            lst.insert(c,\"b\")\n            st1=\"\"\n            for x in range(len(lst)):\n                st1=st1+lst[x]\n            print(st1)\n        else:\n            lst1=list(st)\n            c=lst1.index(\"b\")\n            del lst1[c]\n            lst1.insert(c,\"a\")\n            st2=\"\"\n            for y in range(len(lst1)):\n                st2=st2+lst1[y]\n            print(st2)",
                true
            ],
            [
                "import math\nt = int(input())\nfor _ in range(t):\n    s = list(input())\n    if s[0] == s[-1]:\n        for i in s:\n            print(i,end=\"\")\n    else:\n        s[0] = s[-1]\n        for i in s:\n            print(i,end=\"\")\n    print()",
                true
            ],
            [
                "n=int(input())\nfor _ in range(n):\n    s=input()\n    ab=s.count('ab')\n    ba=s.count('ba')\n    #print(ab,ba)\n    if ab==ba:\n        print(s)\n    else:\n        if s[0]=='a':\n            x='b'\n            y=s[1:]\n        else:\n            x='a'\n            y=s[1:]\n        print(x+y)\n    '''\n    elif if abs(ab-ba)==1:\n        if ab>ba:\n            x=0\n            y=0\n            for i in range(n-1):\n                print(s[i],'all')\n                if s[i]=='a' and s[i+1]=='b':\n                    x+=1\n                elif s[i]=='b' and s[i+1]=='a':\n                    y+=1\n        elif ba>ab:\n            x=0\n            y=0\n            for i in range(n-1):\n                print(s[i],'all')\n                if s[i]=='a' and s[i+1]=='b':\n                    x+=1\n                elif s[i]=='b' and s[i+1]=='a':\n                    y+=1\n    else:\n        x=0\n        y=0\n        for i in range(n-1):\n            print(s[i],'all')\n            if s[i]=='a' and s[i+1]=='b':\n                x+=1\n            elif s[i]=='b' and s[i+1]=='a':\n                y+=1\n            if x==y:\n                pass\n            else:\n    '''\n    \n            ",
                true
            ],
            [
                "from collections import deque\n\ndef get_count(string, x, y):\n    count = 0\n    for i in range(len(string)-1):\n        if string[i] == x and string[i+1] == y:\n            count += 1\n    return count\n        \n\ndef solve():\n    string = input()\n    ab, ba = get_count(string, \"a\", \"b\"), get_count(string, \"b\", \"a\")\n    if ab == ba:\n        return string\n    \n    q, visited = deque(), set()\n    q.append(string)\n    \n    while q:\n        # print(\"q\", q)\n        for _ in range(len(q)):\n            # print(\"q\", q)\n            cur = q.popleft()\n            # print(\"cur->\", cur, \"visited->\", visited)\n            # print(\"cur\", cur)\n            if cur in visited:\n                # print(\"cur is visited\")\n                continue\n            else:\n                # print(\"cur is NOT visited\")\n                visited.add(cur)\n                # print(\"visited now\", visited)\n            \n            ab, ba = get_count(cur, \"a\", \"b\"), get_count(cur, \"b\", \"a\")\n            # print(\"ab, ba\", ab, ba)\n            if ab == ba:\n                return cur\n              \n            for i in range(len(cur)):\n                char = string[i]\n                if char == \"a\":\n                    new_char = \"b\"\n                else:\n                    new_char = \"a\"\n                \n                new_string = string[:i] + new_char + string[i+1:]\n                # print(\"new_string\", new_string)\n                if new_string in visited:\n                    # print(\"new_string is visited\", new_string)\n                    continue\n                # else:\n                q.append(new_string)\n        # print(\"\\n\")\n    \n    \nfor i in range(int(input())):\n    print(solve())",
                true
            ],
            [
                "t = int(input())\nfor k in range(t):\n    s = input()\n    count_ab = s.count('ab')\n    count_ba = s.count('ba')\n    if (count_ab == count_ba):\n        print(s)\n    else:\n        if s[0] == 'a':\n            print('b' + s[1:])\n        else:\n            print('a' + s[1:])\n\n\n",
                true
            ],
            [
                "'''\ndef fun():\n    n = int(input())\n    up = list(map(int, input().split()))\n    down = list(map(int, input().split()))\n    up = up[::-1]\n    down = down[::-1]\n    curr_idx = 0\n    stops = []\n    power = up[curr_idx]-down[curr_idx] #power = max steps frog can jump\n    while True:\n        print(curr_idx, power)\n        if power+curr_idx == n:\n            break\n        old_power = power\n        old_curr_idx = curr_idx\n\n        new_power = power\n        new_curr_idx = curr_idx\n        \n        for i in range(old_curr_idx+1, old_power+old_curr_idx+1, 1):\n            if i+up[i]-down[i] > new_power+new_curr_idx :\n                new_power = up[i]-down[i]\n                new_curr_idx = i\n        if new_power == old_power and new_curr_idx == old_curr_idx:\n            print(-1)\n            return\n        curr_idx = new_curr_idx\n        power = new_power\n        stops.append(n-new_curr_idx)\n    \n    print(len(stops))\n    for i in stops:\n        print(i, end=\" \")\n    return\n    \nfun()\n'''\n\n\ndef fun():\n    n = int(input())\n    for i in range(n):\n        s = input()\n        if s[0] != s[-1]:\n            s = s[-1]+s[1:]\n        print(s)\n            \n\nfun()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "from sys import stdin\nlst = stdin.read().split()\n_s = 0\ndef inp(n=1):\n    global _s\n    ret = lst[_s:_s + n]\n    _s += n\n    return ret\ndef inp1():\n    return inp()[0]\n\nt = int(inp1())\nfor _ in range(t):\n  s = inp1()\n  if s[0] != s[-1]:\n    s = s[-1] + s[1:]\n  print(s)\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    s=input()\n    c1,c2=0,0\n    for i in range(len(s)-1):\n        if s[i]+s[i+1]=='ab':\n            c1+=1 \n        if s[i]+s[i+1]=='ba':\n            c2+=1 \n    if c1==c2:\n        print(s)\n    else:\n        if s[0]=='a':\n            print('b'+s[1:])\n        else:\n            print('a'+s[1:])",
                true
            ],
            [
                "import math;from heapq import heappush,heappop,heapify;import random;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());H=1000000000+7\nfor _ in range(I()):\n    s=S()\n    print(s[-1]+s[1:])\n",
                true
            ],
            [
                "import sys\nimport os.path\n \nif(os.path.exists('input.txt')) :\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    sys.stderr = open(\"error.txt\", \"w\")\n    \ndepth = 1000000\nmod = 1000000007 \nlim = mod * mod\nsys.setrecursionlimit(depth) \n \nlinp = lambda: list(minp())\nminp = lambda: map(int, input().split())\n \nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\n \ndxy = [(1, 0),(-1, 0),(0, 1),(0, -1)]\n\nfor _ in range(int(input())) :\n    s = [c for c in input()]\n    if s[0] != s[-1] :\n        if s[0] == 'a' : s[0] = 'b'\n        else : s[0] = 'a'\n    print(\"\".join(s))",
                true
            ],
            [
                "for _ in range(int(input())):\n    s= list(input())\n    abs=0\n    bas=0\n    for i in range(len(s)-1):\n        if s[i]=='a' and s[i+1]=='b':\n            abs+=1\n        if s[i]=='b' and s[i+1]=='a':\n            bas+=1\n    #print(abs,bas)\n    if abs==bas:\n        print(\"\".join(s))\n    else:\n        if s[0]=='a':\n            s[0]='b'\n        else:\n            s[0]='a'\n        print(\"\".join(s))",
                true
            ],
            [
                "import math;from heapq import heappush,heappop,heapify;import random;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());H=1000000000+7\nfor _ in range(I()):\n    s=S()\n    n=len(s)\n    if s[0]!=s[-1]:\n        print(s[-1]+s[1:])\n    else:\n        print(s)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    ab = s.count('ab')\n    ba = s.count('ba')\n    a = list(s)\n    while ab > ba:\n        idx = a.index('a')\n        a[idx] = 'b'\n        ab -= 1\n    while ab < ba:\n        idx = a.index('b')\n        a[idx] = 'a'\n        ba -= 1\n    print(''.join(a))",
                true
            ],
            [
                "from sys import stdin, stdout\nnmbr = lambda: int(input())\nlst = lambda: list(map(int, input().split()))\nfor _ in range(nmbr()):\n    s=input()\n    n=len(s)\n    if n==1:\n        print(''.join(s))\n        continue\n    if n==2:\n        print(s[0]*2)\n        continue\n    ab=ba=0\n    for i in range(n-1):\n        if s[i:i+2]=='ab':ab+=1\n        elif s[i:i+2]=='ba':ba+=1\n    # print(ab, ba)\n    s=list(s)\n    if ab>ba:\n        s[0]='b'\n    elif ba>ab:\n        s[0]='a'\n    print(''.join(s))\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(0,t):\n    a = input()\n    if a[0] == a[-1]:\n        print(a)\n    else:\n        b = list(a)\n        b[0]=b[-1]\n        d = \"\".join(b)\n        print(d)\n",
                true
            ],
            [
                "def main():\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    inf = 1e17\n    # mod = 998244353\n    mod = 10 ** 9 + 7\n\n    # Max = 10 ** 6\n    # primes = []\n    # prime = [True for i in range(Max + 1)]\n    # p = 2\n    # while (p * p <= Max + 1):\n    #\n    #     # If prime[p] is not\n    #     # changed, then it is a prime\n    #     if (prime[p] == True):\n    #\n    #         # Update all multiples of p\n    #         for i in range(p * p, Max + 1, p):\n    #             prime[i] = False\n    #     p += 1\n    #\n    # for p in range(2, Max + 1):\n    #     if prime[p]:\n    #         primes.append(p)\n\n    # print(len(primes))\n\n    def factorial(n):\n        f = 1\n\n        for i in range(1, n + 1):\n            f = (f * i) % mod  # Now f never can\n        # exceed 10^9+7\n\n        return f\n\n    def factorial_by(n, by):\n        f = 1\n\n        for i in range(1, n + 1):\n            if i == by:\n                continue\n            f = (f * i) % mod  # Now f never can\n        # exceed 10^9+7\n\n        return f\n\n    def ncr(n, r):\n        # initialize numerator\n        # and denominator\n        num = den = 1\n        for i in range(r):\n            num = (num * (n - i)) % mod\n            den = (den * (i + 1)) % mod\n        return (num * pow(den,\n                          mod - 2, mod)) % mod\n\n    def primeFactors(num):\n\n        pf = []\n        while num % 2 == 0:\n            pf.append(2)\n            num = num // 2\n\n        # n must be odd at this point\n        # so a skip of 2 ( i = i + 2) can be used\n        for i in range(3, int(math.sqrt(num)) + 1, 2):\n\n            # while i divides n , print i and divide n\n            while num % i == 0:\n                pf.append(i)\n                num = num // i\n\n        # Condition if n is a prime\n        # number greater than 2\n        if num > 2:\n            pf.append(num)\n\n        return pf\n\n    class Node(object):\n        def __init__(self, name, d):\n            self.d = d\n            self.name = name\n\n        def __repr__(self):\n            pass\n\n    def solve(s):\n        s_str = \"\".join(s)\n        if s_str.count('ab') > s_str.count('ba'):\n            if s[0] == 'a':\n                s[0] = 'b'\n\n            else:\n                s[-1] = 'b'\n        elif s_str.count('ab') < s_str.count('ba'):\n\n            if s[0] == 'b':\n                s[0] = 'a'\n            else:\n                s[-1] = 'a'\n\n\n        return \"\".join(s)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    t = int(input())\n    ans = []\n    for _ in range(t):\n        s = list(input()[:-1])\n        #n = int(input())\n\n        # n,m,k= map(int, input().split())\n        # grid = []\n        # for i in range(n):\n        #     grid.append([int(x) for x in input().split()])\n        # #s = list(map(int,list(input()[:-1])))\n        #a = [int(x) for x in input().split()]\n        # b = [int(x) for x in input().split()]\n        # q = int(input())\n        # queries = []\n        # for i in range(q):\n        #     x1,x2 = map(int, input().split())\n        #     queries.append([x1,x2])\n\n        # tree = []\n        #\n        #\n        # for i in range(n+1):\n        #     tree.append([])\n        #\n        # for i in range(n-1):\n        #     u, v = map(int, input().split())\n        #     tree[u].append(v)\n        #     tree[v].append(u)\n        #\n        ans.append(solve(s))\n\n    p = 1\n    for answer in ans:\n        # print('Case #'+str(p)+\": \"+str(answer))\n        print(answer)\n        p += 1\n\n\nif __name__ == \"__main__\":\n    import sys, threading\n    import bisect\n    import math\n    import itertools\n    from sys import stdout\n\n    ############  Sorted Containers  ######################\n    import heapq\n    from queue import PriorityQueue\n    from collections import deque\n\n    ############ Tree Problems ( Use Python 3) ###########\n    #sys.setrecursionlimit(2 ** 32 // 2 - 1)\n    #threading.stack_size(1 << 27)\n\n    input = sys.stdin.readline\n    thread = threading.Thread(target=main)\n    thread.start()\n    thread.join()\n",
                true
            ],
            [
                "import sys\n#sys.setrecursionlimit(20000)\n#from collections import deque #Counter\n#from itertools import accumulate\n#from functools import product\n#import math\n\n\ndef rall():\n    return sys.stdin.readlines()\ndef rl():\n    return sys.stdin.readline().strip()\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr( something='' ):\n    sys.stdout.write( str(something) + '\\n')\ndef pra( array ):\n    sys.stdout.write( ' '.join([str(x) for x in array]) + '\\n')\n\n\ndef solve(array):\n    return array\n\n\nif __name__ == '__main__':\n\n    NT = int( rl() )\n    #a,b = map(int,rl().split(' '))\n\n    for _ in range(NT):\n        s = rl()\n        nab,nba = 0,0\n        nab = sum([(1 if s[i]=='a' and s[i+1]=='b' else 0) for i in range(len(s)-1)])\n        nba = sum([(1 if s[i]=='b' and s[i+1]=='a' else 0) for i in range(len(s)-1)])\n        #print(nab,nba)\n        if nab>nba:\n            s = 'b'+s[1:]\n        elif nba>nab:\n            s = 'a'+s[1:]\n        nab = sum([(1 if s[i]=='a' and s[i+1]=='b' else 0) for i in range(len(s)-1)])\n        nba = sum([(1 if s[i]=='b' and s[i+1]=='a' else 0) for i in range(len(s)-1)])\n        #print(nab,nba)\n        pr(s)\n\n",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    a=input()\n    x=a.count(\"ab\")\n    y=a.count(\"ba\")\n    if(x!=y):\n        if(a[0]=='a'):\n            a='b'+a[1:]\n        else:\n            a='a'+a[1:]\n    print(a)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n    \n\ndef AB(s):\n    cnt = 0\n    for i in range(len(s)-1):\n        if s[i:i+2] == 'ab':\n            cnt += 1\n    return cnt\n\n\ndef BA(s):\n    cnt = 0\n    for i in range(len(s)-1):\n        if s[i:i+2] == 'ba':\n            cnt += 1\n    return cnt\n\n\nt = int(input())\nfor __ in range(t):\n    s = input().rstrip()\n    ab = AB(s)\n    ba = BA(s)\n\n    i = 0\n\n    while ab != ba:\n        if i != 0: \n            if s[i] == 'a':\n                s = s[:i] + 'b' + s[i+1:]\n            else:    \n                s = s[:i] + 'a' + s[i+1:]\n            \n        if ab > ba:\n            s = s[:i] + 'b' + s[i+1:]\n        if ab < ba:\n            s = s[:i] + 'a' + s[i+1:]\n        ab = AB(s)\n        ba = BA(s)\n        \n    print(s)",
                true
            ],
            [
                "for i in range(int(input())):\n    s = input()\n    cnta=0\n    cntb=0\n    for j in range(len(s)-1):\n        if s[j]=='a' and s[j+1]=='b':\n            cnta+=1\n        elif s[j]=='b'and s[j+1]=='a':\n            cntb+=1 \n    if cnta!=cntb:\n        diff = abs(cnta-cntb)\n        if cnta>cntb:\n            for j in range(len(s)-1):\n                if s[j] =='a' and diff>0:\n                    s = s[:j] + 'b' + s[j+1:]\n                    diff-=1\n        else:\n            for j in range(len(s)-1):\n                if s[j] =='b' and diff>0:\n                    s = s[:j] + 'a' + s[j+1:]\n                    diff-=1\n                \n    print(s)\n\n            ",
                true
            ],
            [
                "# Code by : Sam._.072\n\nfor _ in range(int(input())):\n    s=input()\n    x=s.count('ab')\n    y=s.count('ba')\n    # print(x,y)\n    if x==y:\n        print(s)\n    elif x>y:\n        i=0\n        z=\"\"\n        while i <len(s):\n            if x>y and s[i]=='a':\n                z+='b'\n                i+=1\n                x-=1\n            else:\n                z+=s[i]\n                i+=1\n        print(z)\n    else:\n        i=0\n        z=\"\"\n        while i<len(s):\n            if y>x and s[i]=='b':\n                z+='a'\n                i+=1\n                y-=1\n            else:\n                z+=s[i]\n                i+=1\n        print(z)\n\n    ",
                true
            ],
            [
                "t = input()\nt = int(t)\nwhile t:\n    t -= 1\n    s = input()\n    ab = 0\n    ba = 0\n    for i in range(len(s)-1):\n        if s[i] == 'a' and s[i+1] == 'b':\n            ab += 1\n        elif s[i] == 'b' and s[i+1] == 'a':\n            ba += 1\n    if ab == ba:\n        pass\n    elif ab > ba and s[0] == 'a':\n        s = 'b' + s[1:]\n    elif ab > ba:\n        s = s[:len(s)-1] + 'a'\n    elif ba > ab and s[0] == 'b':\n        s = 'a' + s[1:]\n    else:\n        s = s[:len(s)-1] + 'b'\n    print(s)\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    s=input()\n    a=0\n    for i in range(len(s)-1):\n        if s[i]=='a' and s[i+1]=='b':\n            a+=1\n        if s[i]=='b' and s[i+1]=='a':\n            a-=1\n    if a==0:\n        print(s)\n    else:\n        if s[0]=='a':\n            s='b'+s[1:]\n        else:\n            s='a'+s[1:]\n        a=0\n        for i in range(len(s)-1):\n            if s[i]=='a' and s[i+1]=='b':\n                    a+=1\n            if s[i]=='b' and s[i+1]=='a':\n                a-=1\n        if a==0:\n            print(s)\n        else:\n            if s[0]=='a':\n                s='b'+s[1:]\n            else:\n                s='a'+s[1:]\n            if s[-1]=='a':\n                s=s[:-1]+'b'\n            else:\n                s=s[:-1]+'a'\n            a=0\n            for i in range(len(s)-1):\n                if s[i]=='a' and s[i+1]=='b':\n                        a+=1\n                if s[i]=='b' and s[i+1]=='a':\n                    a-=1\n            if a==0:\n                print(s)\n            else:\n                if s[0]=='a':\n                    s='b'+s[1:]\n                else:\n                    s='a'+s[1:]\n                print(s)",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou are given an array a consisting of n positive integers. You have to choose a positive integer d and paint all elements into two colors. All elements which are divisible by d will be painted red, and all other elements will be painted blue.\n\nThe coloring is called beautiful if there are no pairs of adjacent elements with the same color in the array. Your task is to find any value of d which yields a beautiful coloring, or report that it is impossible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of elements of the array.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^{18}).\n\nOutput\n\nFor each testcase print a single integer. If there is no such value of d that yields a beautiful coloring, print 0. Otherwise, print any suitable value of d (1 \u2264 d \u2264 10^{18}).\n\nExample\n\nInput\n\n\n5\n5\n1 2 3 4 5\n3\n10 5 15\n3\n100 10 200\n10\n9 8 2 6 6 2 8 6 5 4\n2\n1 3\n\n\nOutput\n\n\n2\n0\n100\n0\n3\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "from collections import Counter, defaultdict\nimport math\nimport bisect\n\n\ndef getlist():\n    return list(map(int, input().split()))\n\ndef compute_gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\n\ndef maplist():\n    return map(int, input().split())\n\ndef main():\n    t = int(input())\n    for num in range(t):\n        n = int(input())\n        arr = getlist()\n        gcd1 = arr[0]\n        gcd2 = arr[1]\n        for i,numbers in enumerate(arr):\n            if i%2==0:\n                gcd1 = compute_gcd(gcd1,numbers)\n            else:\n                gcd2 = compute_gcd(gcd2,numbers)\n        # print(gcd1,gcd2)\n        i = 1\n        flag=  True\n        while i<n and gcd1>1:\n            if arr[i]%gcd1==0:\n                flag = False\n                break\n            i+=2\n        if flag is True and gcd1>1:\n            print(gcd1)\n        else:\n            i = 0\n            flag1 = True\n            while i<n and gcd2>1:\n                if arr[i]%gcd2==0:\n                    flag1 = False\n                    break\n                i+=2\n            if flag1 is True and gcd2>1:\n                print(gcd2)\n            else:\n                print(0)\n\n\nmain()\n",
                true
            ],
            [
                "def gcd(a,b):\n    while(a%b!=0):\n        t=a%b\n        a,b=b,t\n    return b\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    sgcd=set()\n    ogcd=l[0]\n    egcd=l[1]\n    f=0\n    for i in range(n):\n        if i<n-1:\n            sgcd.add(gcd(l[i],l[i+1]))\n        if(i%2==0):\n            ogcd=gcd(ogcd,l[i])\n        else:\n            egcd=gcd(egcd,l[i])\n    #print(sgcd,ogcd,egcd)\n    if(ogcd!=1 and ogcd not in sgcd):\n        for i in range(1,n,2):\n            if(l[i]%ogcd==0):\n                ogcd=0\n                break\n        if(ogcd!=0):\n            print(ogcd)\n            continue\n    if egcd!=1 and egcd not in sgcd:\n        for i in range(0,n,2):\n            if(l[i]%egcd==0):\n                egcd=0\n                break\n        if(egcd!=0):\n            print(egcd)\n            continue\n    \n    print(0)\n        \n    \n        \n    \n\n    ",
                true
            ],
            [
                "import math\nfor s in[*open(0)][2::2]:\n a=*map(int,s.split()),;b=[0]*3;i=0\n for x in a:b[i]=math.gcd(b[i],x);i^=1\n print(b[[*(all(x%b[i]for x in a[i^1::2])for i in(0,1)),1].index(1)])",
                true
            ],
            [
                "import sys, math\n \ndef get_string(): return sys.stdin.readline().strip()\ndef get_ints(): return list(map(int, sys.stdin.readline().strip().split())) \ndef get_strings(): return list(sys.stdin.readline().strip().split())\ndef get_num(): return int(sys.stdin.readline().strip())\n\nt = get_num()\nfor _ in range(t):\n  n = get_num()\n  arr = get_ints()\n  d = [0, 0]\n  for i in range(n):\n    d[i % 2] = math.gcd(d[i % 2], arr[i])\n  success = [True, True]\n  for i in range(n):\n    other = (i + 1) % 2\n    success[other] = success[other] and arr[i] % d[other] != 0\n  if success[0]:\n    print(d[0])\n  elif success[1]:\n    print(d[1])\n  else:\n    print(0)",
                true
            ],
            [
                "# cook your dish here\nimport sys\n#import random\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\n#import math\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\ndx = [0,0,1,-1]\ndy = [1,-1,0,0]\nmod = 10**9 + 7\nmod1 = 998244353\n\nfor _ in range (ii()) :\n    n = ii()\n    a = il()\n\n    g = 0\n    g1 = 0\n\n    for i in range (0,n,2) :\n        g = gcd(g,a[i])\n    for i in range (1,n,2) :\n        g1 = gcd(g1,a[i])\n\n    if (g == g1) :\n        print(0)\n    else :\n\n        fl = 0\n        fl1 = 0\n        if (1) :\n            for i in range (1,n,2) :\n                if (a[i]%g == 0) :\n                    fl = 1\n                    break\n        if(1) :\n            for i in range (0,n,2) :\n                if (a[i]%g1 == 0) :\n                    fl1 = 1\n                    break\n\n        if (fl and fl1) :\n            print(0)\n        elif (fl) :\n            print(g1)\n        else :\n            print(g)\n",
                true
            ],
            [
                "def gcd(a, b):\n    if(b == 0):\n        return a\n    else:\n        return gcd(b, a % b)\nt=int(input())\nfor z in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==2:\n        if a[0]==a[1]:\n            print(0)\n        else:\n            print(max(a[1],a[0]))\n        continue\n    d=gcd(a[0],a[2])\n    for i in range(4,n,2):\n        d=gcd(d,a[i])\n    f=True\n    for i in range(1,n,2):\n        if a[i]%d==0:\n            f=False\n            break\n    if f:\n        print(d)\n        continue\n    if n>3:\n        d=gcd(a[1],a[3])\n        for i in range(5,n,2):\n            d=gcd(d,a[i])\n        f=True\n        for i in range(0,n,2):\n            if a[i]%d==0:\n                f=False\n                break\n        if f:\n            print(d)\n            continue\n    else:\n        if a[0]%a[1]!=0 and a[2]%a[1]!=0:\n            print(a[1])\n            continue\n    print(0)",
                true
            ],
            [
                "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nt = int(input())\nfor u in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    gc = -1\n    for i in range(0, len(ar), 2):\n        if gc == -1:\n            gc = ar[i]\n        else:\n            gc = gcd(gc, ar[i])\n    can = True\n    for i in range(1, len(ar), 2):\n        if ar[i] % gc == 0:\n            can = False\n            break\n    if can:\n        print(gc)\n    else:\n        can = True\n        gc = -1\n        for i in range(1, len(ar), 2):\n            if gc == -1:\n                gc = ar[i]\n            else:\n                gc = gcd(gc, ar[i])\n        can = True\n        for i in range(0, len(ar), 2):\n            if ar[i] % gc == 0:\n                can = False\n                break\n        if can:\n            print(gc)\n        else:\n            print(0)",
                true
            ],
            [
                "import math\nfor i in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    odd,even=l[::2],l[1::2]\n    gcd1,gcd2=odd[0],even[0]\n    for i in odd:\n        gcd1=math.gcd(gcd1,i)\n    for i in even:\n        gcd2=math.gcd(gcd2,i)\n    if gcd1 and all(i%gcd1 for i in even):\n        print(gcd1)\n    elif gcd2 and all(i%gcd2 for i in odd):\n        print(gcd2)\n    else:\n        print(0)",
                true
            ],
            [
                "def gcd(a, b):\n    while a * b != 0:\n        a, b = b, a % b\n    return a + b\n\ndef gcd_for_line(data: list):\n    m_list = data.copy()\n    while len(m_list) > 1:\n        m_list[0] = gcd(m_list[0], m_list[1])\n        m_list.pop(1)\n    return m_list[0]\n\nfor i in range(int(input())):\n    n = int(input())\n    line = list(map(int, input().split()))\n    gcd_line = list()\n    honest_ind_line = list()\n    for j in range(len(line)):\n        if (j + 1) % 2 == 1:\n            gcd_line.append(line[j])\n        else:\n            honest_ind_line.append(line[j])\n\n    g = gcd_for_line(gcd_line)\n\n    Flag = True\n    for e in honest_ind_line:\n        if e % g == 0:\n            Flag = False\n            break\n    if Flag:\n        print(g)\n        continue\n    d = gcd_for_line(honest_ind_line)\n    Flag1 = True\n    for elem in gcd_line:\n        if elem % d == 0:\n            Flag1 = False\n    if Flag1:\n        print(d)\n        continue\n    print(0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''''for i in range(int(input())):\n    n, k = map(int, input().split())\n    line = sorted(list(map(int, input().split())), key=lambda x: abs(x))\n    s = 0\n    coord = 0\n    atm = k\n    all = n\n    while all > 0 or atm != 0:\n        now = coord\n        if atm <= 0:\n            atm = k\n            s += abs(coord)\n            now = 0\n        coord = line[0]\n        all -= atm\n        atm -= line.count(coord)\n        s += abs(coord - now)\n        for j in range(line.count(coord)):\n            line.remove(coord)\n    print(s)\n'''''",
                true
            ],
            [
                "import math\n\ndef is_divisible(num, den):\n    return num % den == 0\n\nt = int(input().strip())\nfor i in range(t):\n    n = int(input().strip())\n    nums = list(map(int, input().split()))\n    odd_gcd = nums[0]\n    for j in range(2, len(nums), 2):\n        odd_gcd = math.gcd(odd_gcd, nums[j])\n    if odd_gcd > 1:\n        all_not_divisble = True\n        for j in range(1, len(nums), 2):\n            if is_divisible(nums[j], odd_gcd):\n                all_not_divisble = False\n                break\n        if all_not_divisble:\n            print(odd_gcd)\n            continue\n\n    even_gcd = nums[1]\n    for j in range(3, len(nums), 2):\n        even_gcd = math.gcd(even_gcd, nums[j])\n    if even_gcd > 1:\n        all_not_divisble = True\n        for j in range(0, len(nums), 2):\n            if is_divisible(nums[j], even_gcd):\n                all_not_divisble = False\n                break\n        if all_not_divisble:\n            print(even_gcd)\n            continue\n\n    print(0)",
                true
            ],
            [
                "\nimport sys, collections, math, bisect, heapq, random, functools,io,os,copy\ninput = sys.stdin.readline\nout = sys.stdout.flush\ndef rep():\n    a = list(map(int,input().split()))\n    return a\n\ndef sep():\n    a = list(input().split())\n    return a\n\n\nclass UnionFind:\n    def __init__(self, x) -> None:\n        self.uf = [-1] * x\n\n    def find(self, x):\n        r = x\n        while self.uf[x] >= 0:\n            x = self.uf[x]\n\n        while r != x:\n            self.uf[r], r = x, self.uf[r]\n        return x\n\n    def union(self, x, y):\n        ux, uy = self.find(x), self.find(y)\n        if ux == uy:\n            return\n        if self.uf[ux] >= self.uf[uy]:\n            self.uf[uy] += self.uf[ux]\n            self.uf[ux] = uy\n        else:\n            self.uf[ux] += self.uf[uy]\n            self.uf[uy] = ux\n        return\n\n    def __print__(self):\n        return self.uf\n\n\ndef spfa(x,g,n):\n    dis = [float('inf') for i in range(n)]\n    dis[x] = 0\n    state = [False for i in range(n)]\n    state[x] = True\n    queue = collections.deque()\n    queue.append(x)\n    while queue:\n        cur = queue.popleft()\n        state[cur] = False\n        for next_ in g[cur]:\n            if dis[next_] > dis[cur] + 1:\n                dis[next_] = dis[cur] + 1\n                if state[next_] == False:\n                    state[next_] = True\n                    queue.append(next_)\n    return dis\n\n\ndef gcd(x,y):\n    if y == 0:\n        return x\n    return gcd(y,x % y)\n\n\n\n\ndef solve():\n    n = int(input())\n    a = rep()\n    if n == 2:\n        if a[0] == a[1]:\n            print(0)\n        else:\n            print(max(a))\n    else:\n        b1 = a[0]\n        b2 = a[1]\n        l = 2\n        r = 3\n        while r < n:\n            b2 = gcd(b2,a[r])\n            r += 2\n\n        while l < n:\n            b1 = gcd(b1,a[l])\n            l += 2\n\n\n\n        flag1 = 1\n        l = 1\n        while l < n:\n                if a[l] % b1 == 0:\n                    flag1 = 0\n                    break\n                l += 2\n\n        flag2 = 1\n        l = 0\n        while l < n:\n                if a[l] % b2 == 0:\n                    flag2 = 0\n                    break\n                l += 2\n        if not flag1 and not flag2:\n                print(0)\n        else:\n                if flag1:\n                    print(b1)\n                else:\n                    print(b2)\n\nif __name__ == '__main__':\n    for i in range(int(input())):\n        solve()",
                true
            ],
            [
                "t = int(input())\nimport math \nfrom functools import reduce\nfrom math import gcd \nfor s in range(t):\n    n = int(input())\n    A = list(map(int,input().split()))\n    X = []\n    Y = []\n    for j in range(n):\n        if (j%2 == 0):\n            X.append(A[j])\n        else:\n            Y.append(A[j])\n    a = reduce(gcd,X)\n    b = reduce(gcd,Y)\n    ok1 = True \n    ok2 = True \n    for i in range(n):\n        if i%2 == 1:\n            if A[i]%a !=0:\n                continue \n            else:\n                ok1 = False \n        if i%2 == 0:\n            if A[i]%b !=0:\n                continue \n            else:\n                ok2 = False \n    if ok1 == True:\n        print(a)\n    elif ok2 == True:\n        print(b)\n    else:\n        print(0)\n                \n            \n    ",
                true
            ],
            [
                "def gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a + b\n\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g1 = a[0]\n    g2 = a[1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            g1 = gcd(g1, a[i])\n        else:\n            g2 = gcd(g2, a[i])\n\n    res1 = res2 = True\n    for i in range(n):\n        if i % 2 == 0:\n            if a[i] % g2 == 0:\n                res2 = False\n        else:\n            if a[i] % g1 == 0:\n                res1 = False\n    if res1:\n        print(g1)\n    elif res2:\n        print(g2)\n    else:\n        print(0)\n    \n",
                true
            ],
            [
                "import math\ndef Paint_The_Array(a, n):\n    even = [a[i] for i in range(0,n,2)]\n    odd = [a[i] for i in range(1,n,2)]\n    \n    gcd_odd = odd[0]\n    gcd_even = even[0]\n    \n    for e in even:\n        gcd_even = math.gcd(gcd_even, e)\n    \n    poss = True\n    for o in odd:\n        if o % gcd_even == 0 and o != 1:\n            poss = False\n            break\n    if poss and gcd_even != 1:\n        return gcd_even\n        \n    \n    for o in odd:\n        gcd_odd = math.gcd(gcd_odd, o)\n    \n    poss = True\n    for e in even:\n        if e % gcd_odd == 0 and e != 1:\n            poss = False\n            break\n    if poss and gcd_odd != 1 :\n        return gcd_odd\n    \n    return 0\nt = int(input())\nfor _ in range(t):\n    n =int(input())\n    a = list(map(int, input().split()))\n    print(Paint_The_Array(a, n))",
                true
            ],
            [
                "t = int(input())\n\ndef gcd(my_list):\n    result = my_list[0]\n    for x in my_list[1:]:\n        if result < x:\n            temp = result\n            result = x\n            x = temp\n        while x != 0:\n            temp = x\n            x = result % x\n            result = temp\n    return result \n\n\n\nfor tt in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = 0\n    l1, l2 = [], []\n    for i in range(n):\n        if i %2 == 0:\n            l2.append(a[i])\n        else:\n            l1.append(a[i])\n    gcd1 = gcd(l1)\n    gcd2 = gcd(l2)\n    ret1, ret2 = True, True\n    for num in l1:\n        if num % gcd2 == 0:\n            ret1 = False\n            break \n    for num in l2:\n        if num % gcd1 == 0:\n            ret2 = False\n            break\n    if ret1 == True:\n        print(gcd2)\n    elif ret2 == True:\n        print(gcd1)\n    else:\n        print(0)\n    ",
                true
            ],
            [
                "t=int(input())\nimport math\nfor i in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    oddpos=[]\n    evenpos=[]\n    flag1,flag2=0,0\n    ans=0\n    for j in range(0,len(l),2):\n        evenpos.append(l[j])\n    for j in range(1,len(l),2):\n        oddpos.append(l[j])\n    def gcd (a,b):\n        if (b == 0):\n            return a\n        else:\n            return gcd (b, a % b)\n    resodd = oddpos[0]\n    reseven = evenpos[0]\n    for c in oddpos[1::]:\n        resodd = gcd(resodd , c)\n    for c in evenpos[1::]:\n        reseven = gcd(reseven , c)\n    if resodd!=1:\n        for j in range(len(evenpos)):\n            if evenpos[j]%resodd==0:\n                flag1=1\n        if flag1==0:\n            ans=resodd\n    if reseven!=1:\n        for j in range(len(oddpos)):\n            if oddpos[j]%reseven==0:\n                flag2=1\n        if flag2==0:\n            ans=reseven\n    print (ans)\n\n",
                true
            ],
            [
                "import sys\nfrom math import gcd\ninput = sys.stdin.readline \n\ndef lcm(li):\n    f = li[0]\n    for i in li[1:]:\n        f = (f*i)//gcd(f, i)\n    return f\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    g1 = a[0]\n    for i in a[::2]:\n        g1 = gcd(g1, i)\n\n    g2 = a[1]\n    for i in a[1::2]:\n        if i % g1 == 0:\n            g1 //= gcd(g1, i)\n\n        g2 = gcd(g2, i)\n\n\n    for i in a[::2]:\n        if i%g2 == 0:\n            g2 //= gcd(g2, i)\n\n    if g1 != 1:\n        print(g1)\n    elif g2 != 1:\n        print(g2)\n    else:\n        print(0)\n",
                true
            ],
            [
                "t = int(input())\nret = []\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\nfor i in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    gcd_0 = a[0]\n    gcd_1 = a[1]\n    for ii in range(0,n,2):\n        gcd_0 = gcd(gcd_0,a[ii])\n    for ii in range(1,n,2):\n        gcd_1 = gcd(gcd_1,a[ii])\n    \n    flg0 = True\n    flg1 = True\n    for ii in range(1,n,2):\n        if(a[ii]%gcd_0==0):\n            flg0 = False\n            break\n    for ii in range(0,n,2):\n        if(a[ii]%gcd_1==0):\n            flg1 = False\n            break\n    if(flg0):\n        ret.append(gcd_0)\n    elif(flg1):\n        ret.append(gcd_1)\n    else:\n        ret.append(0)\n\nprint(*ret,sep=\"\\n\")\n",
                true
            ],
            [
                "import sys,math;input=sys.stdin.readline\nfor _ in range(int(input())):\n    n=int(input())\n    d=list(map(int,input().split()))\n    od=sorted([d[i]for i in range(0,n,2)])#1,3,5th..\n    ed=sorted([d[i]for i in range(1,n,2)])#2,4,6th..\n    res=True\n    #od is red\n    g=od[0]\n    for i in od:g=math.gcd(g,i)\n    for i in ed:\n        if i%g==0:\n            res=False\n            break\n    if not res:\n        res=True\n        #ed is red\n        g=ed[0]\n        for i in ed:g=math.gcd(g,i)\n        for i in od:\n            if i%g==0:\n                res=False\n                break\n    if res:print(g)\n    else:print(0)\n    \n",
                true
            ],
            [
                "from sys import stdin\nfrom math import gcd\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    g1, g2 = 0, 0\n    for i in range(n):\n        if i % 2 == 0:\n            g1 = gcd(g1, a[i])\n        else:\n            g2 = gcd(g2, a[i])\n    for i in range(1, n, 2):\n        if a[i] % g1 == 0:\n            break\n    else:\n        print(g1)\n        continue\n    for i in range(0, n, 2):\n        if a[i] % g2 == 0:\n            break\n    else:\n        print(g2)\n        continue\n    print(0)",
                true
            ],
            [
                "import math\nfrom functools import reduce\n\nfor j in range(int(input())):\n    n = int(input())\n    \n    ls = list(map(int, input().split()))\n    le = [ls[i] for i in range(0,n,2)]\n    la = [ls[i] for i in range(1,n,2)]\n    \n    gcd0 = reduce(lambda x,y:math.gcd(x,y), le)\n    gcd1 = reduce(lambda x,y:math.gcd(x,y), la)\n\n    gcd = 0\n    if not(gcd) and all(i % gcd0 for i in la):\n        gcd = gcd0\n    if not(gcd) and all(i % gcd1 for i in le):\n        gcd = gcd1\n    \n    print(gcd)\n",
                true
            ],
            [
                "from math import gcd\nfrom functools import reduce\nt=int(input())\nfor j in range(t):\n    n=int(input())\n    mas=list(map(int,input().split()))\n    k=[]\n    s=[]\n    for i in range(n):\n        if i%2==0:\n            k.append(mas[i])\n        else:\n            s.append(mas[i])\n    k.sort()\n    s.sort()\n    a=reduce(gcd,k)\n    b=reduce(gcd,s)\n    aa=True\n    bb=True\n    #print(a,b)\n    for i in k:\n        if i%a!=0:\n            aa=False\n        if i%b==0:\n            bb=False\n    for i in s:\n        if i%b!=0:\n            bb=False\n        if i%a==0:\n            aa=False\n    if aa:\n        print(a)\n    elif bb:\n        print(b)\n    else:\n        print(0)\n",
                true
            ],
            [
                "import sys \nimport math\n# from heapq import heappop,heapify\n# sys.stdin = open('input.txt', 'r')  \n# sys.stdout = open('output.txt', 'w') \n\nfor t in range(int(input())):\n    n=int(input())\n    arr = list(map(int,input().split()))\n    gcd1=arr[0]\n    gcd2=arr[1]\n    for i in range(0,n,2):\n        gcd1 = math.gcd(gcd1,arr[i])\n    for i in range(1,n,2):\n        gcd2 = math.gcd(gcd2,arr[i])\n    chk = False\n    for i in range(1,n,2):\n        if arr[i]%gcd1==0:\n            chk=True\n    if not chk:\n        print(gcd1)\n    else:\n        chk=False\n        for i in range(0,n,2):\n            if arr[i]%gcd2==0:\n                chk=True\n        if not chk:\n            print(gcd2)\n        else:\n            print(0)\n\n",
                true
            ],
            [
                "import math\ndef solve():\n     n = int(input())\n     a = list(map(int, input().split()))\n     \n     def gcd(a):\n          x = 0\n          for i in a:\n               x = math.gcd(x,i)\n          return x\n     \n     e, o = a[::2], a[1::2]\n     g1,g2 = gcd(e), gcd(o)\n     if g1 != 0 and all(x % g1 !=0 for x in o):\n          print(g1)\n     elif g2 != 0 and all(x % g2 != 0 for x in e):\n          print(g2)\n     else:\n          print(0)\n    \nt = int(input())\nfor i in range(t):\n    solve()",
                true
            ],
            [
                "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    x1 = a[0]\n    x2 = a[1]\n    for i in range(0,n,2):\n        x1 = math.gcd(x1,a[i])\n    for i in range(1,n,2):\n        x2 = math.gcd(x2,a[i])\n    f = 0\n    for i in range(n):\n        if(i%2==0):\n            if(a[i]%x1!=0):\n                f = 1\n                break\n        else:\n            if(a[i]%x1==0):\n                f = 1\n                break\n    if(f==0):\n        print(x1)\n        continue\n    f = 0\n    for i in range(n):\n        if(i%2==0):\n            if(a[i]%x2==0):\n                f = 1\n                break\n        else:\n            if(a[i]%x2!=0):\n                f = 1\n                break\n    if(f==0):\n        print(x2)\n        continue\n    print(0)\n\n",
                true
            ],
            [
                "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n\ndef func():\n        n = int(input())\n        a = list(map(int, input().split()))\n        g1 = 0\n        v = 2\n        for i in range(0, n, 2):\n            g1 = gcd(a[i], g1)\n        g2 = 0\n        for i in range(1, n, 2):\n            g2 = gcd(a[i], g2)\n            if a[i] % g1 == 0 and v == 2:\n                v = 1\n        if v == 2:\n            print(g1)\n            return\n        for i in range(0, n, 2):\n            if a[i] % g2 == 0 and v == 1:\n                print(0)\n                return\n        print(g2)\n        return\n\nt = int(input())\nfor i in range(t):\n    func()\n",
                true
            ],
            [
                "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    ok = True\n    g = 0\n    for i in range(0, n, 2):\n        g = gcd(g, A[i])\n    for i in range(1, n, 2):\n        if A[i] % g == 0:\n            ok = False\n            break\n    if ok:\n        print(g)\n        continue\n\n    ok = True\n    g = 0\n    for i in range(1, n, 2):\n        g = gcd(g, A[i])\n    for i in range(0, n, 2):\n        if A[i] % g == 0:\n            ok = False\n            break\n    print(g if ok else 0)",
                true
            ],
            [
                "def hcfnaive(a,b):\n    if(b==0):\n        return a\n    else:\n        return hcfnaive(b,a%b)\n\n\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    a=[int(i) for i in input().split()]\n    b,c=[],[]\n    for j in range(n):\n        if j%2==0:\n            b.append(a[j])\n        else:\n            c.append(a[j])\n    p=True\n    q=True\n    x=b[0]\n    y=c[0]\n    for j in range(1,len(b)):\n        if b[j]==1:\n            p=False\n            break\n        x=hcfnaive(x,b[j])\n        if x==1:\n            p=False\n            break\n    for j in range(1,len(c)):\n        if c[j]==1:\n            q=False\n            break\n        y=hcfnaive(y,c[j])\n        if y==1:\n            q=False\n            break\n    r,u=True,True\n    if p==True:\n        for j in range(len(c)):\n            if c[j]%x==0:\n                r=False\n                break\n    if q==True:\n        for j in range(len(b)):\n            if b[j]%y==0:\n                u=False\n                break\n    if p==True and r==True:\n        print(x)\n    elif q==True and u==True:\n        print(y)\n    else:\n        print(0)\n\n\n\n",
                true
            ],
            [
                "import math\n\ndef solve(n, arr):\n    d = arr[0]\n    p = True\n    for j in range(0, n, 2):\n        d = math.gcd(d, arr[j])\n    for j in range(1, n, 2):\n        if arr[j] % d == 0:\n            p = False\n    if p:\n        return d\n    d = arr[1]\n    for j in range(1, n, 2):\n        d = math.gcd(d, arr[j])\n    for j in range(0, n, 2):\n        if arr[j] % d == 0:\n            return 0\n    return d\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    print(solve(n, arr))\n",
                true
            ],
            [
                "# cook your dish here\ndef computeGCD(x, y):\n  \n   while(y):\n       x, y = y, x % y\n  \n   return x\nimport sys\ninput = sys.stdin.readline\n#t=1\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    g1,g2=0,0\n    for i in range(n):\n        if i%2:\n            g1=computeGCD(g1,l[i])\n        else:\n            g2=computeGCD(g2,l[i])\n    ans=0\n    if g1!=1:\n        f=0\n        for i in range(n):\n            if i%2==0 and l[i]%g1==0:\n                f=1\n                break\n        if f==0:\n            ans=g1\n    if g2!=1:\n        f=0\n        for i in range(n):\n            if i%2 and l[i]%g2==0:\n                f=1\n                break\n        if f==0:\n            ans=g2\n    print(ans)\n    ",
                true
            ],
            [
                "import math as m\nfor _ in range(int(input())):\n    n=int(input());\n    l=list(map(int,input().split()));\n    a=l[1::2]; b=l[::2];\n    aa=a[0]; bb=b[0];\n    for i in range(1,len(a)): aa=m.gcd(a[i],aa);\n    for i in range(1,len(b)): bb=m.gcd(b[i],bb);\n    flag1=1; flag2=1;\n    for x in a:\n        if((x%bb)==0): flag1=0;\n    for x in b:\n        if((x%aa)==0): flag2=0;\n    if(flag1): print(bb); continue;\n    if(flag2): print(aa); continue;\n    print(0);\n",
                true
            ],
            [
                "import sys\nfrom math import gcd\n\ndef gcdGeneral(numbers):\n    if len(numbers)==0:\n        return 1\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        curr=gcd(numbers[0],numbers[1])\n        for i in range(2,len(numbers)):\n            curr=gcd(curr,numbers[i])\n        \n    return curr\n\ndef parseInput():\n    rawInput = sys.stdin.read().split(\"\\n\")\n    rawInput = rawInput[1:-1]\n    inputs = rawInput[1::2]\n    return inputs\n\ndef findD(numbers):\n    numbers=numbers.split()\n    for i in range(len(numbers)):\n        numbers[i]=int(numbers[i])\n    half1=numbers[::2]\n    half2=numbers[1::2]\n\n    d1=gcdGeneral(half1)\n    d2=gcdGeneral(half2)\n    \n    works= d1!=1\n    if works:    \n        for n in half2:\n            if n%d1==0:\n                works=False\n                break\n    if works:\n        return d1\n    \n    works=d2!=1\n    if works:\n        for n in half1:\n            if n%d2==0:\n                works=False\n                break\n    if works:\n        return d2\n\n    return 0\n\nfor numbers in parseInput():\n    print(findD(numbers))\n    \n        \n",
                true
            ],
            [
                "import math\ndef Solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 2:\n        if a[0] != a[1]:\n            print(max(a))\n        else:\n            print(0)\n    else:\n        u_b = a[0]\n        u_c = a[1]\n        for i in range(2, len(a), 2):\n            u_b = math.gcd(u_b, a[i])\n        for j in range(3, len(a), 2):\n            u_c = math.gcd(u_c, a[j])\n        if u_b == 1 and u_c == 1:\n            print(0)\n        else:\n            k = 0\n            if u_b != 1:\n                r = 0\n                for i in range(1, len(a), 2):\n                    if a[i] % u_b == 0:\n                        r = r + 1\n                if r == 0:\n                    print(u_b)\n                    k = 1\n            if k == 0 and u_c != 1:\n                r = 0\n                for i in range(0, len(a), 2):\n                    if a[i] % u_c == 0:\n                        r = r + 1\n                if r == 0:\n                    print(u_c)\n                    k = 1\n            if k == 0:\n                print(0)\nq = int(input())\n\nwhile q > 0:\n    Solve()\n    q =  q - 1",
                true
            ],
            [
                "from math import gcd\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    gcd1 = a[0]\n    gcd2 = a[1]\n    for i in range(2, n, 2):\n        gcd1 = gcd(gcd1, a[i])\n    for i in range(3, n, 2):\n        gcd2 = gcd(gcd2, a[i])\n    flag1 = True\n    flag2 = True\n    for i in range(n):\n        if i % 2 == 0:\n            if a[i] % gcd2 == 0:\n                flag2 = False\n        else:\n            if a[i] % gcd1 == 0:\n                flag1 = False\n    if flag1:\n        print(gcd1)\n    elif flag2:\n        print(gcd2)\n    else:\n        print(0)\n",
                true
            ],
            [
                "from sys import stdin, stdout\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a \n    return gcd(b, a % b)\n\nt = int(stdin.readline())\nfor tt in range(t):\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().split()]\n\n    gcd0, gcd1 = 0, 0\n\n    success = True\n    for i in range(0, n, 2):\n        gcd0 = gcd(gcd0, a[i])\n\n    for i in range(1, n, 2):\n        if a[i] % gcd0 == 0:\n            success = False\n            break\n\n    if success:\n        stdout.write(str(gcd0) + '\\n')\n        continue\n\n    success = True\n    for i in range(1, n, 2):\n        gcd1 = gcd(gcd1, a[i])\n\n    for i in range(0, n, 2):\n        if a[i] % gcd1 == 0:\n            success = False\n            break\n\n    stdout.write(str(gcd1 if success else 0) + '\\n')",
                true
            ],
            [
                "# cook your dish here\n# code\n#    ___________________________________\n#   |                                   |\n#   |                                   |\n#   |        _,     _   _     ,_        |\n#   |    .-'` /     \\'-'/     \\ `'-.    |\n#   |   /    |      |   |      |    \\   |\n#   |  ;      \\_  _/     \\_  _/      ;  |\n#   | |         ``         ``         | |\n#   | |                               | |\n#   |  ;    .-.   .-.   .-.   .-.    ;  |\n#   |   \\  (   '.'   \\ /   '.'   )  /   |\n#   |    '-.;         V         ;.-'    |\n#   |        `                 `        |\n#   |                                   |\n#   |___________________________________|\n#   |                                   |\n#   |  Author      :   Ramzz            |\n#   |  Created On  :   21-07-2020       |\n#   |___________________________________|\n#\n#    _ __ __ _ _ __ ___  ________\n#   | '__/ _` | '_ ` _ \\|_  /_  /\n#   | | | (_| | | | | | |/ / / / \n#   |_|  \\__,_|_| |_| |_/___/___|\n#\n\nimport math\nimport collections\nfrom sys import stdin,stdout,setrecursionlimit\nfrom bisect import bisect_left as bsl\nfrom bisect import bisect_right as bsr\nimport heapq as hq\nsetrecursionlimit(2**20)\n\nt = 1\nt = int(stdin.readline())\n\nfor _ in range(t):\n    n = int(stdin.readline())\n    #s = stdin.readline().strip('\\n')\n    a = list(map(int, stdin.readline().rstrip().split()))\n    \n    ans = a[0]\n    for i in range(2,n,2):\n        ans = math.gcd(ans,a[i])\n    chk = True\n    for i in range(1,n,2):\n        if a[i]%ans == 0:\n            chk = False\n            break\n        \n    ans1 = a[1]\n    for i in range(3,n,2):\n        ans1 = math.gcd(ans1,a[i])\n    chk1 = True\n    for i in range(0,n,2):\n        if a[i]%ans1 == 0:\n            chk1 = False\n            break\n        \n    if chk:\n        print(ans)\n    elif chk1:\n        print(ans1)\n    else:\n        print(0)",
                true
            ],
            [
                "from math import gcd\ndef gcdd(lst):\n    if len(lst)<2:\n        return lst[0]\n    g=lst[0]\n    for i in range(1,len(lst)):\n        g=gcd(g,lst[i])\n    return g\n\n\ndef odder(lst):\n    for i in lst:\n        if i%2==0:\n            return False\n    return True\n\n\ndef ever(lst):\n    for i in lst:\n        if i%2!=0:\n            return False\n    return True\n\n\nfor _ in range(int(input())):\n    n=int(input())\n    lst=[int(x) for x in input().split()]\n    lst1=[lst[x] for x in range(n) if x%2==0]\n    lst2=[lst[x] for x in range(n) if x%2!=0]\n    gcd1=gcdd(lst1)\n    gcd2=gcdd(lst2)\n    if all(x%gcd1 !=0 for x in lst2 ):\n        ans=gcd1\n    elif all(x%gcd2 !=0 for x in lst1):\n        ans=gcd2\n    else:\n        ans=0\n    print(ans)",
                true
            ],
            [
                "from math import gcd\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    l=[int(x) for x in input().split()]\n    l1=l[0::2]\n    l2=l[1::2]\n    g1=l1[0]\n    g2=l2[0]\n    for i in l1[1:]:\n        g1=int(gcd(g1,i))\n    for j in l2[1:]:\n        g2=int(gcd(g2,j))\n    if g1==g2:\n        print(0)\n    else:\n        for k in l2:\n            if k%g1==0:\n                a1=0\n                break\n        else:\n            a1=g1\n        \n        for k in l1:\n            if k%g2==0:\n                a2=0\n                break\n        else:\n            a2=g2\n        if a1==0:\n            if a2==0:\n                print(0)\n            else:\n                print(a2)\n        else:\n            print(a1)",
                true
            ],
            [
                "from functools import reduce\nfrom math import gcd\n\nt= int(input())\n\ndef getgcd(list):\n    return reduce(gcd, list)\n\ndef paint(arr):\n    a = arr[::2]\n    b = arr[1::2]\n    x = getgcd(a)\n    for i in b:\n        if i%x == 0:\n            break\n    else: \n        return x\n    x = getgcd(b)\n    for i in a:\n        if i%x == 0:\n            break\n    else:\n        return x\n    return 0\n    # if x in [0,1]:\n    #     print(0)\n    # elif getgcd(a) == getgcd(b):\n    #     print(0)\n    # elif getgcd(a) > getgcd(b):\n    #     for i in b:\n    #         if i%getgcd(a) == 0:\n    #             print(0)\n    #             break\n    #     else: print(x)\n    # elif getgcd(b) > getgcd(a):\n    #     for i in a:\n    #         if i%getgcd(b) == 0:\n    #             print(0)\n    #             break\n    #     else: print(x)\n    # else: print(x)\n\nfor i in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if len(set(arr)) > 1:\n        if len(arr) > 2:\n            print(paint(arr))\n        else: print(max(arr))\n    else: print(0)\n\n\n",
                true
            ],
            [
                "#####----ANTARA KUNDU----####\nimport random\nfrom collections import Counter, defaultdict\nfrom copy import deepcopy as dc\nimport math\ntry:\n    t=int(input())\n    for tt in range(1,t+1):\n        n=int(input())\n        a=list(map(int,input().split()))\n        gcd1,gcd2=a[1],a[0]\n        for i in range(len(a)):\n            if i%2:\n                gcd1=math.gcd(gcd1,a[i])\n            else:\n                gcd2=math.gcd(gcd2,a[i])\n        if gcd1==gcd2:\n            print(0)\n        else:\n            flag1,flag2=0,0\n            for i in range(len(a)):\n                if i%2 and a[i]%gcd2==0 and gcd2!=1:\n                    flag1=1\n                elif i%2==0 and a[i]%gcd1==0 and gcd1!=1:\n                    flag2=1\n            if flag1!=0 and flag2!=0:\n                print(0)\n            else:\n                if flag1==0 and gcd2!=1:\n                    print(gcd2)\n                elif flag2==0 and gcd1!=1:\n                    print(gcd1)\n                else:\n                    print(0)\n        #x,y=map(int,input().split())\n        \nexcept EOFError as e:\n    pass",
                true
            ],
            [
                "# cook your dish here\ndef gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\n        \nt=int(input())\nfor q in range(t):\n    n=int(input())\n    arr = list(map(int,input().split()))\n    d=0\n    gcd1=arr[0]\n    gcd2=arr[1]\n    for i in range(2,n,2):\n        gcd1=gcd(gcd1,arr[i])\n    for i in range(3,n,2):\n        gcd2=gcd(gcd2,arr[i])\n        \n    flag=-1\n    if gcd1!=1:\n        d=gcd1\n        flag=1\n        while(flag<n):\n            if arr[flag]%gcd1==0:\n                d=0\n                break\n            flag+=2\n        \n    if gcd2!=1 and d==0:\n        d=gcd2\n        flag=0\n        while flag<n:\n            if arr[flag]%gcd2==0:\n                d=0\n                break\n            flag+=2\n    print(d)",
                true
            ],
            [
                "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    gcd1 = l[0]\n    gcd2 = l[1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            gcd1 = gcd(gcd1, l[i])\n        else:\n            gcd2 = gcd(gcd2, l[i])\n    flag1 = 0\n    flag2 = 0\n    for i in range(n):\n        if not flag2 and i % 2 == 0 and l[i] % gcd2 == 0:\n            flag2 = 1\n        if not flag1 and i % 2 and l[i] % gcd1 == 0:\n            flag1 = 1\n    if not flag1:\n        print(gcd1)\n    elif not flag2:\n        print(gcd2)\n    else:\n        print(0)\n",
                true
            ],
            [
                "import math\n\n\ndef gcd(a):\n    x = 0\n    for p in a:\n        x = math.gcd(x, p)\n    return x\n\n\nt = int(input())\nfor test_case in range(t):\n    n = int(input())\n    list_case = list(map(int, input().split()))\n    even_elements = []\n    odd_elements = []\n    for index in range(0, n, 2):\n        even_elements.append(list_case[index])\n    for index in range(1, n, 2):\n        odd_elements.append(list_case[index])\n    gcd_even = gcd(even_elements)\n    gcd_odd = gcd(odd_elements)\n    run_even = True\n    run_odd = True\n    #print(gcd_even, gcd_odd)\n    for i in range(len(odd_elements)):\n        if odd_elements[i] % gcd_even == 0:\n            run_even = False\n            break\n\n    for i in range(len(even_elements)):\n        if even_elements[i] % gcd_odd == 0:\n            run_odd = False\n            break\n    if run_even:\n        print(gcd_even)\n    elif run_odd:\n        print(gcd_odd)\n    else:\n        print(0)\n\n\n\n\n\n\n",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    l=int(input())\n    a=list(map(int,input().split()))\n    g1=a[0]\n    g2=a[1]\n    for i in a[::2]:\n        g1=math.gcd(g1,i)\n    for i in a[1::2]:\n        g2=math.gcd(g2,i)\n        \n    if all(map(lambda x:x%g1==0,a[::2])) and all(map(lambda x:x%g1!=0,a[1::2])):\n        print(g1)\n    elif all(map(lambda x:x%g2==0,a[::2])) and all(map(lambda x:x%g2!=0,a[1::2])):\n        print(g2)\n    elif all(map(lambda x:x%g1!=0,a[::2])) and all(map(lambda x:x%g1==0,a[1::2])):\n        print(g1)\n    elif all(map(lambda x:x%g2!=0,a[::2])) and all(map(lambda x:x%g2==0,a[1::2])):\n        print(g2)\n    else:\n        print(0)\n    ",
                true
            ],
            [
                "from functools import *\ndef gcd(x, y):\n    while y:\n        x, y = y, x%y\n    return x\ndef check(s):\n    for k in range(1, len(s)):\n        if s[k]==s[k-1]:\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    v1 = reduce(gcd, [a[k] for k in range(0, n, 2)])\n    v2 = reduce(gcd, [a[k] for k in range(1, n, 2)])\n    s1, s2 = '', ''\n    for k in range(n):\n        if a[k]%v1==0:\n            s1+=\"R\"\n        else:\n            s1+=\"B\"\n        if a[k]%v2==0:\n            s2+=\"R\"\n        else:\n            s2+=\"B\"\n    if check(s1):\n        print(v1)\n    elif check(s2):\n        print(v2)\n    else:\n        print(0)",
                true
            ],
            [
                "def gcd(a):\n    x = 0\n    for y in a:\n        while y: x, y = y, x % y\n    return x\ndef problem(a):\n    even, odd = a[::2], a[1::2];x, y = gcd(even), gcd(odd)\n    if x and all(i % x != 0 for i in odd):return x\n    if y and all(i % y != 0 for i in even):return y\n    return 0\nfor _ in range(int(input())):input();print(problem(list(map(int, input().split()))))",
                true
            ],
            [
                "def find_gcd(x, y):\n     \n    while(y):\n        x, y = y, x % y\n     \n    return x\n         \n\n\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    b=list(map(int,input().split()))\n    gcd1=b[0]\n    gcd2=b[1]\n    for j in range(n):\n        if(j%2==0):\n            gcd1 = find_gcd(gcd1, b[j])\n        else:\n            gcd2 = find_gcd(gcd2, b[j])\n    if(gcd1==1 and gcd2==1):\n        print(0)\n        continue\n    f=0\n    for j in range(n):\n        if(j%2==1):\n            if(b[j]%gcd1==0):\n                f=1\n                break\n    if(f==0):\n        print(gcd1)\n        continue\n    f=0\n    for j in range(n):\n        if(j%2==0):\n            if(b[j]%gcd2==0):\n                f=1\n                break\n    if(f==0):\n        print(gcd2)\n    else:\n        print(0)",
                true
            ],
            [
                "def gcd(x , y):\n    if y == 0: return x\n    else : return gcd(y, x % y)\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    a = [s[i] for i in range(n) if i % 2 == 1]\n    b = [s[i] for i in range(n) if i % 2 == 0]\n    ra = a[-1]\n    rb = b[-1]\n    for x in a: ra = gcd(ra , x)\n    for x in b: rb = gcd(rb , x)\n    ok = True\n    for i in range(len(a)): \n        if a[i] % rb == 0: \n            ok = False\n    if ok: print(rb);continue\n    ok = True\n    for i in range(len(b)): \n        if b[i] % ra == 0: \n            ok = False\n    if ok: print(ra)\n    else: print(0)",
                true
            ],
            [
                "def gcd(a, b):\n    if a == b: return a\n    elif a > b:\n        a, b = b, a\n    while a > 0:\n        a, b = b%a, a\n    return b\n \nfor _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    if n == 2:\n        if x[0] == x[1]: print(0)\n        else: print(max(x))\n    elif n == 3:\n        g = gcd(x[0], x[2])\n        if x[1] % g > 0: print(g)\n        elif x[0] % x[1] > 0 and x[2] % x[1] > 0: print(x[1])\n        else: print(0)\n    else:\n        # n >= 4\n        g1 = gcd(x[0], x[2])\n        g2 = gcd(x[1], x[3])\n        m1 = max(x[0], x[2])\n        m2 = max(x[1], x[3])\n        for i in range(4, n):\n            if i % 2 == 0:\n                if g1 > 1: g1 = gcd(g1, x[i])\n                m1 = max(m1, x[i])\n            if i % 2 == 1:\n                if g2 > 1: g2 = gcd(g2, x[i])\n                m2 = max(m2, x[i])\n        if g1 == 1 and g2 == 1:\n            print(0)\n        elif g1 == 1 and g2 > 1:\n            if m1 < g2: ans = g2\n            elif m1 == g2: ans = 0\n            elif m1 > g2:\n                ans = g2\n                for i in range(0, n, 2):\n                    if x[i] % g2 == 0:\n                        ans = 0\n                        break\n            print(ans)\n        elif g1 > 1 and g2 == 1:\n            if m2 < g1: ans = g1\n            elif m2 == g1: ans = 0\n            elif m2 > g1:\n                ans = g1\n                for i in range(1, n, 2):\n                    if x[i] % g1 == 0:\n                        ans = 0\n                        break\n            print(ans)\n        elif g1 > 1 and g2 > 1:\n            if m1 < g2: ans = g2\n            elif m2 < g1: ans = g1\n            elif m1 == g2: ans = 0\n            elif m2 == g1: ans = 0\n            #elif gcd(g1, g2) > 1: ans = 0\n            else:\n                # gcd(g1, g2) = 1\n                # m1 > g2 and m2 > g1\n                ans = g1\n                for i in range(1, n, 2):\n                    if x[i] % g1 == 0:\n                        ans = 0\n                        break\n                if ans == 0:\n                    ans = g2\n                    for i in range(0, n, 2):\n                        if x[i] % g2 == 0:\n                            ans = 0\n                            break\n            print(ans)",
                true
            ],
            [
                "import math\ndef gc(arr):\n    an = arr[0]\n    for j in range(1,len(arr)):\n        an = math.gcd(an,arr[j])\n    return an\nfor j in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ev=[]\n    od=[]\n    i=0\n    while(i<n):\n        if(i%2==0):\n            od.append(arr[i])\n        else:\n            ev.append(arr[i])\n        i+=1\n    evg = gc(ev)\n    odg = gc(od)\n    ok=-1\n    for i in ev:\n        if(i%odg==0):\n            ok=0\n            break\n    if(ok!=0):\n        print(odg)\n        continue\n    ok=-1\n    for i in od:\n        if(i%evg==0):\n            ok=0\n            break\n    if(ok!=0):\n        print(evg)\n    else:\n        print(0)\n",
                true
            ],
            [
                "import math\n\ndef solve(n, arr):\n    d = arr[0]\n    p = True\n    for j in range(0, n, 2):\n        d = math.gcd(d, arr[j])\n    for j in range(1, n, 2):\n        if arr[j] % d == 0:\n            p = False\n    if p:\n        return d\n    p = True\n    d = arr[1]\n    for j in range(1, n, 2):\n        d = math.gcd(d, arr[j])\n    for j in range(0, n, 2):\n        if arr[j] % d == 0:\n            p = False\n    if p:\n        return d\n    return 0\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    print(solve(n, arr))\n",
                true
            ],
            [
                "t = int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a%b)\n\ndef gcd_list(A):\n    res = A[0]\n    for b in A[1:]:\n        res = gcd(res, b)\n    return res\n\nfor _ in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    a, b = gcd_list(nums[::2]), gcd_list(nums[1::2])\n    if a != 1 and not [x for x in nums[1::2] if x%a==0]:\n        print(a)\n    elif n != 1 and not [x for x in nums[::2] if x%b==0]:\n        print(b)\n    else:\n        print(0)\n\n",
                true
            ],
            [
                "import math\ndef gcd(a):\n    x = 0\n    for p in a:\n        x = math.gcd(x, p)\n        \n    \n    return x\n         \n\n\n\n\n\n# cook your dish here\nfor i in range(int(input())):\n    n=int(input())\n    A=[int(k) for k in input().split()]\n    f=A[::2]\n    s=A[1::2]\n      \n    \n    F=gcd(f)\n    S=gcd(s)\n    \n    if F!=0 and  all(x % F != 0 for x in s):\n        print(F)\n    elif S!=0 and  all(x % S != 0 for x in f):\n        print(S)\n    else:\n        print(0)\n               \n            \n \n \n\n \n \n\n  \n    \n    \n            ",
                true
            ],
            [
                "from math import gcd\ndef r(a):\n    p=a[0]\n    for i in a:\n        p=gcd(p,i)\n\n    return p\n\n\n\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=[]\n    c=[]\n    for i in range(0,n,2):\n        b.append(a[i])\n    for j in range(1,n,2):\n        c.append(a[j])\n    rb,rc=r(b),r(c)\n    a1=[]\n    b1=[]\n    for i in range(n):\n        a1.append(a[i]%rb)\n        b1.append(a[i]%rc)\n    f1,f2=True,True\n    for i in range(n-1):\n        if (a1[i]==0 and a1[i+1]==0) or (a1[i]!=0 and a1[i+1]!=0):\n            f1=False\n        if (b1[i]==0 and b1[i+1]==0) or (b1[i]!=0 and b1[i+1]!=0):\n            f2=False\n    if f1:\n        print(rb)\n    elif f2:\n        print(rc)\n    else:\n        print(0)\n##    print(a1,b1)\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\n\nfrom math import gcd\ndef gcd_all(L):\n    g = 0\n    for a in L:\n        g = gcd(g, a)\n    return g\n\ndef calc(A, B):\n    g = gcd_all(A)\n    for b in B:\n        if b % g == 0:\n            break\n    else:\n        return g\n    g = gcd_all(B)\n    for a in A:\n        if a % g == 0:\n            break\n    else:\n        return g\n    return 0\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    I = [int(a) for a in input().split()]\n    A = I[::2]\n    B = I[1::2]\n    print(calc(A, B))\n",
                true
            ],
            [
                "import sys\nimport math\n\nt = int(sys.stdin.readline())\nans = []\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    nums = list(map(int, sys.stdin.readline().split()))\n    n1, n2 = nums[0], nums[1]\n    for i in range(2, len(nums), 2):\n        n1 = math.gcd(n1, nums[i])\n    for i in range(3, len(nums), 2):\n        n2 = math.gcd(n2, nums[i])\n    res = 0\n    if n1 > 1:\n        res = n1\n        for x in nums[1::2]:\n            if x % n1 == 0:\n                res = 0\n                break\n    if res == 0 and n2 > 1:\n        res = n2\n        for x in nums[0::2]:\n            if x % n2 == 0:\n                res = 0\n                break\n    ans.append(str(res))\n\nprint('\\n'.join(ans))\n",
                true
            ],
            [
                "import math\nx=int(input())\nfor i in range(x):\n    a=int(input())\n    c=input().split()\n    even1=[]\n    odd1=[]\n    for j in range(a):\n        c[j]=int(c[j])\n        if j&1==0:\n            even1.append(c[j])\n        else:\n            odd1.append(c[j])\n    even1.sort()\n    odd1.sort()\n    gcd1 = even1[0]\n    gcd2 = odd1[0]\n    for kk in range(len(even1)):\n        gcd1 = math.gcd(even1[kk], gcd1)\n    for ll in range(len(odd1)):\n        gcd2 = math.gcd(odd1[ll],gcd2)\n    flag = True\n    ans = gcd1\n    if gcd1==gcd2:\n        print(0)\n    else:\n        for mm in odd1:\n            if mm % gcd1 == 0:\n                ans = gcd2\n                flag = False\n                break\n        for gg in even1:\n            if gg % gcd2 == 0:\n                if ans == gcd2:\n                    ans = 0\n                else:\n                    ans = gcd1\n                break\n        print(ans)\n\n",
                true
            ],
            [
                "import math\n\ndef niceArray(arr, l, d):\n    prev = 2\n    for i in arr:\n        v = i % d == 0\n        if prev == v:\n            return False\n        prev = v\n    return True\n\ncases = int(input())\nfor c in range(cases):\n    l = int(input())\n    nmbrs = list(map(int, input().split()))\n    \n    check1 = nmbrs[0]\n    for i in range(2, l, 2):\n        check1 = math.gcd(check1, nmbrs[i])\n    if niceArray(nmbrs, l, check1):\n        print(check1)\n        continue\n    \n    check2 = nmbrs[1]\n    for i in range(3, l, 2):\n        check2 = math.gcd(check2, nmbrs[i])\n    if niceArray(nmbrs, l, check2):\n        print(check2)\n        continue\n    \n    print(0)\n    \n",
                true
            ],
            [
                "from math import gcd\n\ndef solve():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    gcd1, gcd2 = 0, 0\n    for i in range(0, n, 2):\n        gcd1 = gcd(gcd1, nums[i])\n    for i in range(1, n, 2):\n        gcd2 = gcd(gcd2, nums[i])\n    \n    c, d = 1, 1\n    for i in range(1, n, 2):\n        if nums[i] % gcd1 == 0:\n            c = 0\n            break\n    for i in range(0, n, 2):\n        if nums[i] % gcd2 == 0:\n            d = 0\n            break\n    if not c and not d:\n        print(0)\n    elif c:\n        print(gcd1)\n    else:\n        print(gcd2)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
                true
            ],
            [
                "import math\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b1 = []\n    b2 = []\n    for i in range(n):\n        if i % 2 == 0:\n            b1. append(a[i])\n        else:\n            b2.append(a[i])\n    d1 = reduce(math.gcd, b1)\n    d2 = reduce(math.gcd, b2)\n    flag_d1 = 0\n    flag_d2 = 0\n    if d1 == 1 and d2 == 1:\n        print(0)\n        continue\n    for i in range(n):\n        if i % 2 == 0:\n            if a[i] % d2 == 0:\n                flag_d2 = 1\n        else:\n            if a[i] % d1 == 0:\n                flag_d1 = 1\n    if flag_d1 == 0:\n        print(d1)\n    elif flag_d2 == 0:\n        print(d2)\n    else:\n        print(0)\n",
                true
            ],
            [
                "from functools import reduce\n\n\ndef gcd(x, y):\n    if x > y:\n        x, y = y, x\n    if x == 0:\n        return y\n    return gcd(y % x, x)\n\n\ndef check(gc, arr):\n    return reduce(lambda x, y: x * y, [i % gc for i in arr[::2]], arr[0]) != reduce(lambda x, y: x * y,\n                                                                                    [i % gc for i in arr[1::2]], arr[1])\n\n\nfor i in range(int(input())):\n    input()\n    arr = list(map(int, input().split()))\n    gc1 = reduce(gcd, arr[::2], arr[0])\n    gc2 = reduce(gcd, arr[1::2], arr[1])\n    if check(gc1, arr):\n        print(gc1)\n    elif check(gc2, arr):\n        print(gc2)\n    else:\n        print(0)\n",
                true
            ],
            [
                "\nimport sys, collections, math, bisect, heapq, random, functools,io,os,copy\ninput = sys.stdin.readline\nout = sys.stdout.flush\ndef rep():\n    a = list(map(int,input().split()))\n    return a\n\ndef sep():\n    a = list(input().split())\n    return a\n\n\nclass UnionFind:\n    def __init__(self, x) -> None:\n        self.uf = [-1] * x\n\n    def find(self, x):\n        r = x\n        while self.uf[x] >= 0:\n            x = self.uf[x]\n\n        while r != x:\n            self.uf[r], r = x, self.uf[r]\n        return x\n\n    def union(self, x, y):\n        ux, uy = self.find(x), self.find(y)\n        if ux == uy:\n            return\n        if self.uf[ux] >= self.uf[uy]:\n            self.uf[uy] += self.uf[ux]\n            self.uf[ux] = uy\n        else:\n            self.uf[ux] += self.uf[uy]\n            self.uf[uy] = ux\n        return\n\n    def __print__(self):\n        return self.uf\n\n\ndef spfa(x,g,n):\n    dis = [float('inf') for i in range(n)]\n    dis[x] = 0\n    state = [False for i in range(n)]\n    state[x] = True\n    queue = collections.deque()\n    queue.append(x)\n    while queue:\n        cur = queue.popleft()\n        state[cur] = False\n        for next_ in g[cur]:\n            if dis[next_] > dis[cur] + 1:\n                dis[next_] = dis[cur] + 1\n                if state[next_] == False:\n                    state[next_] = True\n                    queue.append(next_)\n    return dis\n\n\ndef gcd(x,y):\n    if y == 0:\n        return x\n    return gcd(y,x % y)\n\n\n\n\ndef solve():\n    n = int(input())\n    a = rep()\n    c1,c2 = a[0],a[1]\n    for i in range(0,n,2):\n        c1 = gcd(c1,a[i])\n    for i in range(1,n,2):\n        c2 = gcd(c2,a[i])\n    if c1 == 1 and c2 == 1:\n        print(0)\n    else:\n        flag = 1\n        for i in range(1,n,2):\n          if a[i] % c1 == 0:\n             flag = 0\n             break\n        if flag:\n          print(c1)\n\n        else:\n          flag2 = 1\n          for i in range(0,n,2):\n              if a[i] % c2 == 0:\n                flag2 = 0\n                break\n          if flag2:\n            print(c2)\n          else:\n            print(0)\n\nif __name__ == '__main__':\n    for i in range(int(input())):\n        solve()",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\ndef gcd(a,b):\n  if(b==0):\n    return a\n  else:\n    return gcd(b,a%b)\n\n\ndef solve():\n  n = get_int()\n  arr = get_list()\n\n  arr1 = []\n  arr2 = []\n\n  for i, ele in enumerate(arr):\n    if i%2 == 0:\n      arr1.append(ele)\n    else:\n      arr2.append(ele)\n\n  g1 = arr1[0]\n  l1 = len(arr1)\n  for i in range(1, l1):\n    g1 = gcd(g1, arr1[i])\n\n  g2 = arr2[0]\n  l2 = len(arr2)\n  for i in range(1, l2):\n    g2 = gcd(g2, arr2[i])\n  \n  # print(g1, g2)\n\n  if g1 == 1 and g2 == 1:\n    print(0)\n    return\n  \n  if g1 != 1:\n    flag = 0\n    for ele in arr2:\n      if ele%g1 == 0:\n        flag = 1\n        break\n    \n    if flag == 0:\n      print(g1)\n      return\n  \n  if g2 != 1:\n    flag = 0\n    for ele in arr1:\n      if ele%g2 == 0:\n        flag = 1\n        break\n    \n    if flag == 0:\n      print(g2)\n      return\n  \n  print(0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT = get_int()\nwhile T:\n  solve()\n  T -= 1\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ndef mp():return map(int,input().split())\ndef lmp():return list(map(int,input().split()))\ndef mps(A):return [tuple(map(int, input().split())) for _ in range(A)]\nimport math\nimport bisect\nimport heapq\nimport time\nfrom copy import copy as cc\nfrom copy import deepcopy as dc\nfrom itertools import accumulate\nfrom collections import Counter, defaultdict, deque\ndef ceil(U,V):return (U+V-1)//V\ndef modf1(N,MOD):return (N-1)%MOD+1\ninf = int(1e18+20)\nmod = int(1e9+7)\nfrom functools import reduce\ndef gcd(numbers):\n    return reduce(math.gcd, numbers)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = lmp()\n    odd = []\n    even = []\n    for i in range(n):\n        if i % 2 == 0:\n            odd.append(a[i])\n        else:even.append(a[i])\n    og = gcd(odd)\n    eg = gcd(even)\n    ans = 0\n    flag = True\n    for j in even:\n        if j % og == 0:flag = False\n    if flag:\n        print(og)\n        continue\n\n    flag = True\n    for j in odd:\n        if j % eg == 0:flag = False\n    if flag:\n        ans = eg\n        print(eg)\n        continue\n    print(0)\n\n",
                true
            ],
            [
                "\n\n\ndef gcd2(a, b):\n    if (a == 0):\n        return b;\n    return gcd2(b % a, a);\n\n\ndef gcd(arr):\n\n    result = arr[0];\n    for i in range(1, len(arr)):\n    \n        result = gcd2(arr[i], result);\n \n        if(result == 1):\n           return 1;\n        \n    \n    return result;\n\n\nT = int(input())\n\nfor t in range(T):\n    n = int(input())\n    nums = [int(x) for x in input().split(\" \")]\n\n    a = nums[0:len(nums):2]\n    b = nums[1:len(nums):2]\n    \n    d = gcd(a)\n    if d > 1 and not any([i % d == 0 for i in b]):\n        print(d)\n        continue\n    d = gcd(b)\n    if d > 1 and not any([i % d == 0 for i in a]):\n        print(d)\n        continue\n    print(0)\n    ",
                true
            ],
            [
                "from math import *\nfrom functools import reduce\nimport sys\n\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    r=[]\n    r1=[]\n    for i in range(1,len(a),2):\n        r.append(a[i])\n        r1.append(a[i-1])\n    if n%2!=0:\n        r1.append(a[n-1])\n    #print(r1,\" k \")\n    k1=reduce(lambda x, y: gcd(x, y), r)\n    k2=reduce(lambda x, y: gcd(x, y), r1)\n    #print(k1,k2)\n    p1=1\n    p2=1\n    for i in range(1,len(a),2):\n        #print(a[i]%k2)\n        if a[i]%k2==0:\n            p1=0\n        if a[i-1]%k1==0:\n            p2=0\n    if n%2!=0:\n        if a[n-1]%k1==0:\n            p2=0\n    if p1==p2==0:\n        print(0)\n    else:\n        if p1!=0:\n            print(k2)\n        else:\n            print(k1)\n",
                true
            ],
            [
                "'''\n    Auther: ghoshashis545 Ashis Ghosh\n    College: Jalpaiguri Govt Enggineering College\n\n'''\nfrom os import path\nfrom io import BytesIO, IOBase\nimport sys\nfrom heapq import heappush,heappop\nfrom functools import cmp_to_key as ctk\nfrom collections import deque,Counter,defaultdict as dd \nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil,sqrt,log,gcd\ndef ii():return int(input())\ndef si():return input().rstrip()\ndef mi():return map(int,input().split())\ndef li():return list(mi())\nabc='abcdefghijklmnopqrstuvwxyz'\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\ndef bo(i):\n    return ord(i)-ord('0')\n\nfile = 1\ndef ceil(a,b):\n    return (a+b-1)//b\n\n\n\n\ndef solve():\n\n    \n    for _ in range(1,ii()+1):\n        n = ii()\n        a = li()\n        x1,x2 = a[0],a[1]\n        for i in range(2,n):\n            if i%2:\n                x2 = gcd(x2,a[i])\n            else:\n                x1 = gcd(x1,a[i]) \n        ok = True\n        for i in range(n):\n            if i%2 and a[i]%x1==0:\n                ok = False\n                break\n        if ok:\n            print(x1)\n            continue\n        ok = True\n        for i in range(n):\n            if i%2==0 and a[i]%x2==0:\n                ok = False\n                break\n        if ok:\n            print(x2)\n        else:\n            print(0)\n        \n        \n\n\n\n\n\n\n\n            \n\n\n\n\n\n    \n        \n\n\n\n\n\n\n\n\n        \nif __name__ ==\"__main__\":\n\n    if(file):\n    \n       if path.exists('input.txt'):\n           sys.stdin=open('input.txt', 'r')\n           sys.stdout=open('output.txt','w')\n       else:\n           input=sys.stdin.readline\n    solve()\n",
                true
            ],
            [
                "import math\n\n\ndef gcd_many(s):\n    g = 0\n    for i in range(len(s)):\n        if i == 0:\n            g = s[i]\n        else:\n            g=math.gcd(g,s[i])\n    return g\nmm = int(input())\nfor i in range(mm):\n    le = int(input())\n    lst = list(map(int,input().split()))\n    ou = lst[1:len(lst):2]\n    ji = lst[0:len(lst):2]\n    a = gcd_many(ji)\n    flag = 0\n    for l in ou:\n        if l%a == 0:\n            flag = 1\n            break\n    if flag == 0:\n        print(a)\n    else:\n        b = gcd_many(ou)\n        for l in ji:\n            if l%b == 0:\n                flag = 0\n                break\n        if flag == 1:\n            print(b)\n        else:\n            print(0)",
                true
            ],
            [
                "import math\nsr=lambda: input()\nir=lambda: int(sr())\nlr=lambda: list(map(int, sr().split()))\n\ninf = 10**18\n# mod = 10**9+7\nmod = 998244353\n\nif __name__=='__main__':\n    test = ir()\n    for t in range(test):\n        n=ir()\n        a = lr()\n        kouho1 = a[0]\n        kouho2 = a[1]\n        for i in range(1,n,2):\n            kouho1 = math.gcd(kouho1, a[i-1])\n            kouho2 = math.gcd(kouho2, a[i])\n        if n%2 == 1:\n            kouho1 = math.gcd(kouho1, a[-1])\n        flg1 = True\n        flg2 = True\n        for i in range(1,n,2):\n            if a[i-1] % kouho2 == 0:\n                flg1 = False\n            if a[i] % kouho1 == 0:\n                flg2 = False\n        if n%2 == 1:\n            if a[-1] % kouho2 == 0:\n                flg1 = False\n        if not (flg1 or flg2):\n            print(0)\n        elif flg2:\n            print(kouho1)\n        else:\n            print(kouho2)\n",
                true
            ],
            [
                "from functools import reduce\nfrom math import gcd\ndef Solve():\n    n = int(input())\n    arr1 = list(map(int, input().split()))\n    oddPos, evenPos = list(), list()\n    \n    check = True\n    for i in range(n):\n        if check:\n            check = False\n            oddPos.append(arr1[i])\n        else:\n            check = True\n            evenPos.append(arr1[i])\n    \n    gcd1 = reduce(lambda x, y : gcd(x, y), oddPos)\n    gcd2 = reduce(lambda x, y : gcd(x, y), evenPos)\n    \n    check1, check2 = True, True\n    for val1 in evenPos:\n        if val1 % gcd1 == 0:\n            check1 = False\n            break\n    \n    if check1:\n        print(gcd1)\n        return\n\n    for val2 in oddPos:\n        if val2 % gcd2 == 0:\n            check2 = False\n            break\n\n    if check2:\n        print(gcd2)\n        return\n\n    print(0)\n    \n\nfor _ in range(int(input())):\n    Solve()",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    \n    odd = []\n    even = []\n    og, eg =0,0\n    for i in range(n):\n        if i%2==0:\n            even.append( a[i] )\n            eg = math.gcd( a[i], eg )\n        else:\n            odd.append(a[i])\n            og = math.gcd( a[i], og )\n    \n    new_o = list(map( lambda x:x%eg, odd))\n    new_e = list(map( lambda x:x%og, even))\n    if new_o.count( 0 ) ==0:\n        print( eg )\n    elif new_e.count( 0 ) ==0:\n        print( og )\n    else:\n        print( 0 )",
                true
            ],
            [
                "def factorisation(a):\n    ans = []\n    for i in range(2, int(a ** 0.5 + 1)):\n        if a % i == 0:\n            ans.append(i)\n    return ans\n\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef check(d, a):\n    mode = 1\n    if a[0] % d == 0:\n        mode = 0\n    for i in range(1, len(a)):\n        if mode == 1 and a[i] % d != 0:\n            return False\n        elif mode == 0 and a[i] % d == 0:\n            return False\n        mode += 1\n        mode %= 2\n    return True\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    f = a[0]\n    for i in range(2, n, 2):\n        f = gcd(f, a[i])\n    s = a[1]\n    for i in range(3, n, 2):\n        s = gcd(s, a[i])\n    if check(f, a):\n        print(f)\n    elif check(s, a):\n        print(s)\n    else:\n        print(0)",
                true
            ],
            [
                "from math import gcd\nfrom functools import reduce\nfrom types import new_class\ndef find_gcd(list):\n    x = reduce(gcd, list)\n    return x\n\nfor test in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    even_ele, odd_ele = [], []\n    for i in range(n):\n        if i%2 == 0:\n            even_ele.append(arr[i])\n        else:\n            odd_ele.append(arr[i])\n    gcd1 = find_gcd(even_ele)\n    gcd2 = find_gcd(odd_ele)\n    check_1 = 0\n    check_2 = 0\n    if gcd1 != 1:\n        flag = 0\n        for i in odd_ele:\n            if i%gcd1 == 0:\n                flag = 1\n                break\n        if flag == 0:\n            pass\n        else:\n            check_1 = 1\n    else:\n        check_1 = 1\n    if gcd2 != 1:\n        flag = 0\n        for i in even_ele:\n            if i%gcd2 == 0:\n                flag = 1\n                break\n        if flag == 0:\n            pass\n        else:\n            check_2 = 1\n    else:\n        check_2 = 1\n    # print ('gcds',gcd1, gcd2)\n    # print ('checks', check_1, check_2)\n    if check_1 == 0:\n        print (gcd1)\n    elif check_2 == 0:\n        print (gcd2)\n    else:\n        print (0)",
                true
            ],
            [
                "import math\n\ndef find_gcd(x, y):\n     \n    while(y):\n        x, y = y, x % y\n     \n    return x\n\nfor t in range((int)(input())):\n    n = (int)(input())\n    a = [int(x) for x in input().split()]\n\n    g1 = []\n    g2 = []\n    gcd1 = int()\n    gcd2 = int()\n\n    for i in range((int)(len(a))):\n        if i % 2 == 0: g1.append(a[i])\n        else: g2.append(a[i])\n    \n\n    \n    if (int)(len(g1)) > 1:\n        gcd1 = find_gcd(g1[0], g1[1])\n        \n        for i in range(2, len(g1)):\n            gcd1 = find_gcd(gcd1, g1[i])\n    else:\n        gcd1 = g1[0]\n\n    nextstep = 0    \n\n    for i in g2:\n        if i % gcd1 == 0:\n            nextstep = 1\n        \n    if nextstep == 0:\n        print(gcd1)\n        continue\n\n\n    if (int)(len(g2)) > 1:\n        gcd2 = find_gcd(g2[0], g2[1])\n        \n        for i in range(2, len(g2)):\n            gcd2 = find_gcd(gcd2, g2[i])\n    else:\n        gcd2 = g2[0]\n\n    nextstep = 0    \n\n    for i in g1:\n        if i % gcd2 == 0:\n            nextstep = 1\n        \n    if nextstep == 0:\n        print(gcd2)\n    else:\n        print(0)\n\n\n    ",
                true
            ],
            [
                "##n=int(input())\n##for i in range(n):\n##    found=True\n##    num=int(input())\n##    ans=0\n##    x=[int(i) for i in input().split()]\n##    mino=9999999\n##    for i in range(1,len(x),2):\n##        if(x[i]<mino):\n##            mino=x[i]\n####    print(mino)\n##    for j in range(mino,0,-1):\n##        found=True\n##        for i in range(1,len(x),2):\n##            if(x[i]%j!=0 or x[i-1]%j==0):\n##                found=False\n##                break\n##        if(found):\n##            ans=j\n##            break\n####    print(found)\n##    if(not found):\n##        mino=9999999\n##        for i in range(0,len(x),2):\n##            if(x[i]<mino):\n##                mino=x[i]\n####        print(mino)\n##        for j in range(mino,1,-1):\n##            found=True\n##            for i in range(0,len(x),2):\n##                if(x[i]%j!=0 or (i+1<len(x) and x[i+1]%j==0)):\n##                    found=False\n##                    break\n##            if(found):\n##                ans=j\n##    print(ans)\n\ndef gcd (a,b):\n    if (b == 0):\n        return a\n    else:\n         return gcd (b, a % b)\nA = [12, 24, 27, 30, 36]\nres = A[0]\nfor c in A[1::]:\n    res = gcd(res , c)\n\nn=int(input())\nfor i in range(n):\n    found=True\n    num=int(input())\n    ans=0\n    fin=0\n    x=[int(i) for i in input().split()]\n    gc=x[0]\n    ##print(gc)\n    for i in x[2::2]:\n        gc=gcd(gc,i)\n    ##print(\"gc\"+str(gc))\n    if(gc!=1):\n        for i in x[1::2]:\n            ##print(\"i\"+str(i))\n            if(i%gc==0):\n                ##print(\"i\"+str(i))\n                found=False\n                break\n    else:\n        found=False\n    if(not found):\n        gc=x[1]\n        found=True\n        ##print(\"here\")\n        for i in x[3::2]:\n            gc=gcd(gc,i)\n        ##print(\"gc\"+str(gc))\n        for i in x[::2]:\n            ##print(\"i\"+str(i))\n            if(i%gc==0):\n                found=False\n                break\n    if(found):\n        print(gc)\n    else:\n        print(0)\n    \n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou are given an array a of length n.\n\nLet's define the eversion operation. Let x = a_n. Then array a is partitioned into two parts: left and right. The left part contains the elements of a that are not greater than x (\u2264 x). The right part contains the elements of a that are strictly greater than x (> x). The order of elements in each part is kept the same as before the operation, i. e. the partition is stable. Then the array is replaced with the concatenation of the left and the right parts.\n\nFor example, if the array a is [2, 4, 1, 5, 3], the eversion goes like this: [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5].\n\nWe start with the array a and perform eversions on this array. We can prove that after several eversions the array a stops changing. Output the minimum number k such that the array stops changing after k eversions.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print a single integer k \u2014 the number of eversions after which the array stops changing.\n\nExample\n\nInput\n\n\n3\n5\n2 4 1 5 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n\n\nOutput\n\n\n1\n2\n0\n\nNote\n\nConsider the fist example.\n\n  * The first eversion: a = [1, 4, 2, 5, 3], x = 3. [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5]. \n  * The second and following eversions: a = [2, 1, 3, 4, 5], x = 5. [2, 1, 3, 4, 5] \u2192 [2, 1, 3, 4, 5], [] \u2192 [2, 1, 3, 4, 5]. This eversion does not change the array, so the answer is 1. \n\n\n\nConsider the second example. \n\n  * The first eversion: a = [5, 3, 2, 4, 1], x = 1. [5, 3, 2, 4, 1] \u2192 [1], [5, 3, 2, 4] \u2192 [1, 5, 3, 2, 4]. \n  * The second eversion: a = [1, 5, 3, 2, 4], x = 4. [1, 5, 3, 2, 4] \u2192 [1, 3, 2, 4], [5] \u2192 [1, 3, 2, 4, 5]. \n  * The third and following eversions: a = [1, 3, 2, 4, 5], x = 5. [1, 3, 2, 4, 5] \u2192 [1, 3, 2, 4, 5], [] \u2192 [1, 3, 2, 4, 5]. This eversion does not change the array, so the answer is 2. \nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for t in range(int(input())):\n  n=int(input())\n  arr=list(map(int,input().split()))\n  arr=arr[::-1]\n  maxi=arr[0]\n  count=0\n  for i in range(1,len(arr)):\n    if arr[i]>maxi:\n      count+=1\n      maxi=arr[i]\n  print(count)",
                true
            ],
            [
                "def solve():\n    N = int(input())\n    A = list(map(int,input().split()))\n    A = A[::-1]\n    count = 0\n    prev = A[0]\n    for i in range(1,N):\n        if A[i] > prev:\n            prev = A[i]\n            count += 1\n    print(count)\n\nT = int(input())\nfor i in range(T):\n    solve()",
                true
            ],
            [
                "# cook your dish here\nk=int(input())\nfor _ in range(k):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    max_till_now=arr[-1]\n    ans=0\n    for i in range(n-2,-1,-1):\n        if(arr[i]<=max_till_now):\n            continue\n        else:\n            ans+=1\n            max_till_now=arr[i]\n    print(ans)\n            ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n\n    mn = max(a)\n    count = 0\n    curr = n-1\n    prev = -1\n    while a[curr] != mn:\n        if(prev == -1 or a[curr] > a[prev]):\n            count += 1\n            prev = curr\n        curr -= 1\n\n    print(count)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    m=max(a)\n    e=0\n    c=a[-1]\n    for i in range(n-1,-1,-1):\n        if(a[i]>c):\n            c=a[i]\n            e+=1\n        if(c==m):\n            break \n    print(e)\n\n        \n        \n        \n",
                true
            ],
            [
                "import math\nimport math as m\ndef L():\n    return list(map(int, input().split()))\ndef I():\n    return int(input())\ndef M():\n    return map(int, input().split())\n# def sortzip(arr1,arr2,ForS):\n#     return sorted(zip(arr1,arr2), key=lambda x:x[ForS])\nfrom math import sqrt\nfrom itertools import count, islice\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n) - 1)))\n\ndef solve():\n    n = I()\n    arr = L()\n    nowval = -1\n    res=0\n    maxi = max(arr)\n    if arr[-1] == maxi:\n        print(0)\n        return\n    nowval = arr[-1]\n    res = 1\n    for i in range(n-1,-1,-1):\n        if arr[i] == maxi:\n            print(res)\n            return\n        if arr[i] > nowval:\n            res+=1\n            nowval =arr[i]\n    print(res)\n\nfor _ in range(I()):\n    solve()\n\n\n\n",
                true
            ],
            [
                "from sys import stdin\n\nfor testcase in range(int(stdin.readline())):\n    length = int(stdin.readline())\n    values = list(map(int, stdin.readline().split()))\n    minimum_eversions = 0\n    currentEnd = values[-1]\n    for index in range(length-2, -1, -1):\n        if values[index]>currentEnd:\n            currentEnd = values[index]\n            minimum_eversions += 1\n\n    print(minimum_eversions)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    x = l[-1]\n    c =0\n    for i in range(n-1,-1,-1):\n        if l[i] > x:\n            x = l[i]\n            c+=1\n    if x == l[-1]:\n        print(0)\n    else:\n        print(c)\n        \n        \n        ",
                true
            ],
            [
                "\ndef getint():\n    return [int(i) for i in input().split()]\ndef get():\n    return int(input())\ndef getstr():\n    return [i for i in input().split()]\ndef S():\n    for test in range(int(input())):\n        solve()\nimport math\nimport itertools as it\nimport bisect\nimport time\nimport collections as ct\n\ndef lower_bound(a,x):\n    l=-1\n    r=len(a)\n    while l+1!=r:\n        mid=l+r>>1\n        if a[mid]<x:\n            l=mid\n        else:\n            r=mid\n    return r\ndef upper_bound(a,x):\n    l=-1\n    r=len(a)\n    while l+1!=r:\n        mid=l+r>>1\n        if a[mid]<=x:\n            l=mid\n        else:\n            r=mid\n    return r\ndef solve():\n    n=get()\n    a=getint()\n    ans=0\n    cnt=a[-1]\n    for i in range(n-1,-1,-1):\n        if cnt<a[i]:\n            ans+=1\n            cnt=a[i]\n    print(ans)\n\n\nS()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    p=int(input())\n    y=list(map(int,input().split()))\n    cnt=1\n    g=max(y)\n    if p==1 or y[p-1]==g:\n        print(0)\n    else:\n        tp=y[p-1]\n        for i in range(p-2,-1,-1):\n            if y[i]==g:\n                break\n            if y[i]>tp:\n                cnt+=1\n            tp=max(tp,y[i])\n        print(cnt)\n",
                true
            ],
            [
                "from sys import stdin\ninput=stdin.readline\nrn=lambda:int(input())\nrns=lambda:map(int,input().split())\nrl=lambda:list(map(int,input().split()))\nrs=lambda:input().strip()\nYN=lambda x:print('YES') if x else print('NO')\nceil_div=lambda a,b:-(-a//b)\nmod=10**9+7\n\nfor _ in range(rn()):\n    n=rn()\n    a=rl()\n    ans=0\n    m=-1\n    ma=max(a)\n    while a:\n        if a[-1]==ma:\n            break\n        if a[-1]>m:\n            ans+=1\n            m=a[-1]\n        a.pop()\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    #max elem to compare\n    mmax = max(arr)\n    i = n - 2\n    cur = arr[-1]\n    if cur == mmax:\n        print(0)\n        continue\n    step = 1\n    while arr[i] != mmax:\n        if arr[i]>cur:\n            step += 1\n            cur = arr[i]\n        i -= 1\n    print(step)",
                true
            ],
            [
                "for s in[*open(0)][2::2]:\n    a = [*map(int,s.split())]\n    c = ans = 0\n    for x in a[::-1]:\n        if x > c: c = x; ans += 1\n    print(ans-1)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    k = -1\n\n    m = -1\n    i = n-1\n    while i>=0:\n        if a[i]>m:\n            k+=1\n            m = a[i]\n        i-=1\n\n    print(k)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    lst=[int(x) for x in input().split()]\n    ans=0\n    maxi=max(lst)\n    if maxi==lst[n-1]:\n        print(0)\n    else:\n        # lst=deque(lst)\n        x = lst[n - 1]\n        ans+=1\n        for i in range(n-2,-1,-1):\n            if lst[i]>x:\n                x=lst[i]\n                # print(lst,x,ans)\n                if  x==maxi:\n                    print(ans)\n                    break\n                ans+=1",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    last = a[-1]\n    mx = max(a)\n    mn = 0\n    k = 0\n    for i in range(len(a)-1, -1, -1):\n        if a[i] < mx and a[i] > mn:\n            k += 1\n            mn = a[i]\n        if a[i] == mx:\n            break\n    print(k)\n\n",
                true
            ],
            [
                "tt=1\ntt=int(input())\nfor _ in range (tt):\n    #input()\n    n=int(input())\n    #n,m=map(int,input().split())\n    a=list(map(int,input().split()))\n    #b=list(map(int,input().split()))\n    #s=input()\n    #n=len(s)\n    prev=a[-1]\n    ans=0\n    for i in range (n-1,-1,-1):\n        if a[i]>prev:\n            ans+=1\n            prev=a[i]\n    print(ans)",
                true
            ],
            [
                "cases = int(input())\nfor i in range(cases):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    max = arr[n-1]\n    for i, item in enumerate(reversed(arr)):\n        if item>max:\n            max = item\n            count += 1\n    print(count)\n\n\n# while flag:\n#     last = new[len(new)-1]\n#     flag = False\n#     new2 = []\n#     if last == max(new):\n#         pass\n#     for item in new:\n#         if item > last:\n#             flag = True\n#             new2.append(item)\n#     new = new2\n#     count += 1\n# print(count-1)",
                true
            ],
            [
                "t=int(input())\nfor asdfghjklbvcljfskdjfdlsfjsdlfjslfj in range(t):\n    input()\n    arrrrrrrray=list(map(int,input().split()))\n    x=arrrrrrrray[len(arrrrrrrray)-1]\n    ans=0\n    for i in range(len(arrrrrrrray)-2,-1,-1):\n        if(arrrrrrrray[i]>x):\n            ans+=1 \n            x=arrrrrrrray[i]\n    print(ans)",
                true
            ],
            [
                "import math\n#\n\n\ndef test():\n    n = count = -1\n\n    mx = mx1 = 0\n\n    n = int(input())\n\n    a = list(map(int, input().split()))\n\n    for i in range(n):\n\n        if(a[i] > mx):\n            mx = a[i]\n\n    for i in range(n-1, -1, -1):\n      \n        if(a[i] > mx1):\n            mx1 = a[i]\n            count += 1\n    print(count)\n\n\n# rjkkbxtcndj pfgecrjd\nt = int(input())\nfor i in range(t):\n    test()\n",
                true
            ],
            [
                "#rOkY\n#FuCk\n\n################################### KoPaL ####################################\n\nt=int(input())\nwhile(t>0):\n    a=int(input())\n    l=list(map(int,input().split()))\n    k=l[len(l)-1]\n    cnt=0\n    i=len(l)-1\n    while(i>=0):\n        if(l[i]>k):\n            cnt+=1\n            k=l[i]\n        i-=1\n    print(cnt)\n    t-=1\n",
                true
            ],
            [
                "# by the authority of GOD     author: Kritarth Sharma #\nimport sys\nfrom collections import defaultdict,deque\nfrom bisect import bisect_left\nimport math\ninput=sys.stdin.readline\ndef inp():\n    l=list(map(int,input().split()))\n    return l\n\nfor _ in range(int(input())):\n        n,=inp()\n        l=inp()\n        s=0\n        x=l[-1]\n        for i in range(n-2,-1,-1):\n            if l[i]>x:\n                s+=1\n                x=l[i]\n            \n            \n        print(s)\n\n\n        \n\n        \n            \n            \n\n\n\n        \n\n\n\n\n\n            \n        \n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n  n=int(input())\n  arr=list(map(int,input().split()))\n  arr=arr[::-1]\n  maxi=arr[0]\n  count=0\n  for i in range(1,len(arr)):\n    if arr[i]>maxi:\n      count+=1\n      maxi=arr[i]\n  print(count)",
                true
            ],
            [
                "# cook your dish here\nimport sys\n#import random\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\n#import math\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\ndx = [0,0,1,-1]\ndy = [1,-1,0,0]\nmod = 10**9 + 7\nmod1 = 998244353\n\nfor _ in range (ii()) :\n    n = ii()\n    a = il()\n\n    ans = 0\n    x = max(a)\n\n    i = n-1\n\n    while (i >= 0) :\n        if (a[i] == x) :\n            break\n        ans += 1\n        j = i\n        i -= 1\n        while (i >= 0) :\n            if (a[i] > a[j]) :\n                break\n            i -= 1\n\n    print(ans)\n",
                true
            ],
            [
                "### Codeforces handle - \"@titanalpha\"\n#Email id - shubhamnokiafan@gmail.com\n\nfrom collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nimport copy\nfrom decimal import Decimal,getcontext\ngetcontext().prec = 32\n\nMOD = 1000000007\nMAX = sys.maxsize\nMIN = -sys.maxsize\nprime = []\n\nclass get:\n    def int():\n        return list(map(int,input().split()))\n    def str():\n        return input().split()\n    def float():\n        return list(map(float,input().split()))\n    def map():\n        return map(int,input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x))+1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result,item)\n    return result\n\ndef LCM(a,b):\n    return (a*b)//(math.gcd(a,b))\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2,sqrt(n)):\n        if n%i == 0:\n            return False\n    return True\n\ndef solve():\n    n = int(input())\n    a = get.int()\n    if a[-1] == max(a):\n        print(0)\n        return\n    max_ = MIN\n    j = 0\n    for i in range(n-1,-1,-1):\n        if a[i] > max_:\n            max_ = a[i]\n            j = i\n    r_max = MIN\n    res = 0\n    for i in range(n-1,j,-1):\n        if a[i] > r_max:\n            r_max = a[i]\n            res += 1\n    print(res)\n\n\n\nfor _ in range(int(input())):\n    solve()",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int, input().split(' ')))\n    eversions=0\n    cur=a[n-1]\n    counter=n-2\n    while counter!=-1:\n        if a[counter]>cur:\n            cur=a[counter]\n            eversions+=1\n        counter-=1\n    print(eversions)",
                true
            ],
            [
                "t=int(input())\nfor te in range(t):\n    n=int(input())\n    a=list(map(int,input().split(\" \")))\n    maxi=max(a)\n    count=0\n    if(a[-1]==maxi):\n        print(count)\n    else:\n        count=0\n        maxb=a[-1]\n        for i in range(n-2,-1,-1):\n            if(a[i]>maxb):\n                maxb=a[i]\n                count+=1\n        print(count)",
                true
            ],
            [
                "import sys\n\ndef solve(n, arr):\n    answer = 0\n    maxi = float(\"-inf\")\n    max_index = -1\n    for i in range(n):\n        if arr[i] >= maxi:\n            maxi = arr[i]\n            max_index = i\n    i = n - 2\n    current = arr[n - 1]\n    if current != maxi:\n        answer += 1\n    while i > max_index:\n        if arr[i] > current:\n            answer += 1\n            current = arr[i]\n        i -= 1\n    return answer\n\ndef main():\n    test_case = int(sys.stdin.readline())\n    for tc in range(test_case):\n        n = int(sys.stdin.readline())\n        arr = [int(a) for a in sys.stdin.readline().split()]\n        print(solve(n, arr))\n\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "def max1(a):\n    maxi=0\n    for i in range(len(a)):\n        if a[i]>=a[maxi]:\n            maxi=i\n    return maxi\n\nfor i in range(int(input())):\n    n=int(input())\n    a=[int(j) for j in input().split()]\n    maxi=max1(a)\n    ans,ele=0,0\n    if a[n-1]!=a[maxi]:\n        ele=n-1\n        ans+=1\n    else:\n        print('0')\n        continue\n    for j in range(n-2,maxi,-1):\n        if a[j]>a[ele]:\n            ele=j\n            ans+=1\n    print(ans)\n",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n=int(input())\n    li=list(map(int,input().split()))\n    ans=0 \n    m=max(li)\n    if(li[n-1]!=m):\n        ans=ans+1 \n    for i in range(n-2,0,-1):\n        if(li[i]>li[i+1]):\n            if(li[i]==m):\n                break\n            else:\n                ans=ans+1\n        else:\n            li[i],li[i+1]=li[i+1],li[i]\n    print(ans)\n        \n        ",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools,copy,random\nfrom functools import reduce \nimport operator\n \ninf = float('inf')\nmod = 10**9+7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // fractions.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(20000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\n \ndef find(i) :\n    if par[i] != i : par[i] = find(par[i]);\n    return par[i]\ndef union(a, b) :\n    a = find(a)\n    b = find(b)\n    if a == b : return False\n    par[a] = b\n    return True\n#par = [i for i in range(n)]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    return graph\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\n \ndef initGrid(h,w):\n    for i in range(h):\n        s = S()\n        grid.append(list(s))\n    return grid\n \ndef soe(limit):\n    a = [True] * limit                          # Initialize the primality list\n    a[0] = a[1] = False\n \n    for (i, isprime) in enumerate(a):\n        if isprime:\n            yield i\n            for n in range(i*i, limit, i):     # Mark factors non-prime\n                a[n] = False\n    return a\n\n################## Main (Author - 9th) ################## \n\nfor _ in range(I()):\n    n = I()\n    a = LI()\n    mx = max(a)\n    if a[-1] == mx:\n        print(0)\n        continue\n    cnt = 1\n    temp = a[-1]\n    for i in reversed(range(n-1)):\n        if a[i] == mx: break\n        if a[i] > temp:\n            temp = a[i]\n            cnt+=1\n    print(cnt)\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    A = list(map(int,input().split()))\n    A = A[::-1]\n    curr = A[0]\n    cnt = 0 \n    for j in range(1,n,1):\n        if A[j]>curr:\n            cnt +=1 \n            curr = A[j]\n    print(cnt)\n",
                true
            ],
            [
                "t = int(input())\nfor x in range(t):\n    n = int(input())\n    col = 0\n    s = list(map(int,input().split()))\n    if n == 1:\n        print(col)\n    else:\n        ma = s[n-1]\n        for i in range(n-2,-1,-1):\n            if s[i] > ma:\n                col += 1\n                ma = s[i]\n        print(col)\n",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n=int(input())\n    arr=list(map(int, input().split()))\n    l=arr[-1]\n    ans=0\n    for i in range(n-2,-1,-1):\n        if arr[i]>l:\n            ans+=1\n            l=arr[i]\n    print(ans)\n\n",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools,copy,random\nfrom functools import reduce \nimport operator\n \ninf = float('inf')\nmod = 10**9+7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // fractions.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(20000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\n \ndef find(i) :\n    if par[i] != i : par[i] = find(par[i]);\n    return par[i]\ndef union(a, b) :\n    a = find(a)\n    b = find(b)\n    if a == b : return False\n    par[a] = b\n    return True\n#par = [i for i in range(n)]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    return graph\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\n \ndef initGrid(h,w):\n    for i in range(h):\n        s = S()\n        grid.append(list(s))\n    return grid\n \ndef soe(limit):\n    a = [True] * limit                          # Initialize the primality list\n    a[0] = a[1] = False\n \n    for (i, isprime) in enumerate(a):\n        if isprime:\n            yield i\n            for n in range(i*i, limit, i):     # Mark factors non-prime\n                a[n] = False\n    return a\n\n################## Main (Author - 9th) ################## \n\nfor _ in range(I()):\n    n = I()\n    a = LI()\n    mx = max(a)\n    cnt = 0\n    temp = a[-1]\n    for i in reversed(range(n-1)):\n        if a[i] > temp:\n            temp = a[i]\n            cnt+=1\n        if a[i] == mx: break\n    print(cnt)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    prev = n - 1\n    cur = n - 2\n    count = 0\n    while cur >= 0:\n        if a[prev] < a[cur]:\n            count += 1\n            prev = cur\n        cur -= 1\n    print(count)\n",
                true
            ],
            [
                "# cook your dish here\nimport math\ndef modInverse(p, q):\n    \n        mod = 998244353\n        expo = 0\n        expo = mod - 2\n\n        # Loop to find the value\n        # until the expo is not zero\n        while (expo):\n            if (expo & 1):\n                p = (p * q) % mod\n            q = (q * q) % mod\n            expo >>= 1\n        return p\n        \ndef answer(x,y,li):\n    s=[]\n    for p in range(0,len(li)-1):\n        s.append(li[p+1]-li[p])\n    s.append(int(1e18))\n    \n    def solu(s,fi,y):\n        m=0\n        for j in range(0,len(s)):\n            m=m+min(s[j],fi)\n        return(m>=y)\n        \n    low=1\n    high=int(1e18)\n    ans=0\n    while (low<high):\n        fi=(low+high)//2\n        if solu(s,fi,y):\n            high=fi\n            ans=fi\n        else:\n            low=fi+1\n    \n    return ans\n    \n    \nt=int(input())\nfor i in range (0,t):\n    x=int(input())\n    s=input()\n    r=-1;m=0\n    for x in map(int,s.split()[::-1]):\n        \n        if x>m:\n            r+=1\n            m=x\n    print(r)\n",
                true
            ],
            [
                "# Problem: B. \u0412\u044b\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n# Contest: Codeforces - Codeforces Round #759 (Div. 2, \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 \u041e\u0442\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u043c \u0440\u0430\u0443\u043d\u0434\u0435 3 \u0422\u0435\u0445\u043d\u043e\u043a\u0443\u0431\u043a\u0430 2022)\n# URL: https://codeforces.com/contest/1591/problem/B\n# Memory Limit: 256 MB\n# Time Limit: 1000 ms\n# \n# Powered by CP Editor (https://cpeditor.org)\n\nimport bisect\n\nmod = 10 ** 9 + 7\neps = 10 ** -9\n\n\ndef __gcd(a, b):\n    return a if b == 0 else __gcd(b, a % b)\n    \n\ndef __lcm(a, b):\n    return a * b / __gcd(a, b)\n\n\ndef __fact(n):\n    return 1 if n == 1 else n * __fact(n - 1)\n\n\ndef __mex(a):\n    mex = 0\n    a.sort()\n    for x in a:\n        if x <= mex:\n            mex += 1\n        else:\n            break\n    return mex\n\ndef __dist(x1, y1, x2, y2):\n    return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\ndef __getprimes(n):\n    isprime = [True for i in range(n + 1)]\n    primes = []\n     \n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i * i, n + 1, i):\n                isprime[j] = False\n    for i in range(2, n + 1):\n        if isprime[i]:\n            primes.append(i)\n    return primes\n\ndef __modInverse(a, m):\n    \n    m0 = m\n    y = 0\n    x = 1\n    if (m == 1):\n        return 0\n    \n    while(a > 1):\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = y\n        y = x - q * y\n        x = t\n    if (x < 0):\n        x = x + m0\n    return x\n    \n    \n    \ndef __isprime(n):\n    if n < 2:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n    \ndef __cntprimediv(n):\n    ret = 0\n    x = n\n    i = 2\n    while i * i <= x:\n        while n % i == 0:\n            n //= i\n            ret += 1\n        i += 1\n    if n > 1:\n        ret += 1\n    return ret\n    \ndef __primefactors(n):\n    ret = []\n    x = n\n    i = 2\n    while i * i <= x:\n        while n % i == 0:\n            ret.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        ret.append(n)\n    return ret\n    \n\ndef __sumdigit(n):\n    ret = 0\n    while n > 0:\n        ret += n % 10\n        n //= 10\n    return ret\n\ndef __zfunc(s):\n    n = len(s)\n    z = [0 for i in range(n)]\n    l = 0\n    r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 1\n    return z\n    \n    \ndef __to(n, x):\n    ret = ''\n    while n > 0:\n        q = n % x\n        if q < 10:\n            ret += str(q)\n        else:\n            ret += chr(q - 10 + ord('a'))\n        n //= x\n    return ret[::-1]\n    \n    \ndef solve(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mx = max(a)\n    last = a[-1]\n    ans = 1\n    for i in range(n - 1, -1, -1):\n        if a[i] == mx:\n            break\n        else:\n            if a[i] > last:\n                ans += 1\n                last = a[i]\n    if a[-1] == mx:\n        ans = 0\n    print(ans)\n        \nt = 1\nt = int(input())\n\n\nfor i in range(t):\n    solve(i + 1)",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    a = list(input().split())\n    dem = 0\n    for i in range(n):\n        a[i] = int(a[i])\n    ma = a[n-1]\n    for i in range(n-2, -1, -1):\n        if a[i] > ma:\n            dem += 1\n            ma = a[i]\n    print(dem)\nfor i in range(int(input())):\n    solve()",
                true
            ],
            [
                "for t in range(int(input())):\n    N = int(input())\n    \n    A = list(map(int, input().split()))\n    \n    count = 0\n    \n    curr = A[-1]\n    \n    maxx = max(A)\n    \n    for i in range(N - 1, -1, -1):\n        if A[i] > curr:\n            count += 1\n            curr = A[i]\n        if A[i] == maxx:\n            break\n    \n    print(count)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    steps = 0\n    prev = 1\n    j = prev\n    while j<=len(A):\n        j+= 1\n        while j<=len(A) and A[-j]<=A[-prev]:\n            j +=1\n        if j > len(A): \n            break\n        else:\n            prev = j\n            steps += 1\n    print(steps)\n\n\n\n",
                true
            ],
            [
                "from math import *\n \n#from math import factorial as fact, comb as ncr \nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\n\nfrom array import array\nfrom re import search\n \nli=lambda : list(map(int,input().split()))\narr=lambda a: array('i',a)\nbi=lambda n: bin(n).replace(\"0b\", \"\")\nyn=lambda f: print('NYOE S'[f::2])\nsbstr=lambda a,s: search('.*'.join(a),s)\n\n'''def isprime(a):\n    if a==2: return True\n    elif a%2==0: return False\n    n=3\n    while n<=a**0.5:\n        if a%n==0:\n            return False\n        n+=2\n    return True\n'''\n'''def nf(n,a):\n    b=a*a\n    c=b*a\n    d=c*a\n    e=n\n    ct=0\n    while e%a==0:\n        if e%d==0:\n            ct+=4\n            e=e//d\n        if e%c==0:\n            ct+=3\n            e=e//c\n        if e%b==0:\n            ct+=2\n            e=e//b\n        if e%a==0:\n            ct+=1\n            e=e//a\n    return ct\n'''\n\ndef solve():\n    for _ in range(int(input())):\n        n=int(input())\n        a=li()[::-1]\n        c=0\n        m=max(a)\n        t=a[0]\n        for i in range(n):\n            if a[i]>t:\n                t=a[i]\n                c+=1\n            elif t==m:\n                break\n        print(c)\n\n\nsolve()",
                true
            ],
            [
                "for t in range(int(input())):\n  n = int(input())\n  a = list(map(int, input().split()))\n  count = 0\n  currmin = 0\n  for i in range(n)[::-1]:\n    if a[i] > currmin:\n      count += 1\n    currmin = max(currmin, a[i])\n  print(count-1)\n",
                true
            ],
            [
                "from sys import stdin\n\n\ndef read_input():\n    n = int(stdin.readline())                     # read an integer.\n    a = list(map(int, stdin.readline().split()))  # read several integers of a line.\n    return n, a\n\n\ndef solve(n, a):\n    answer = 0\n    running_max = a[-1]\n    for ai in a[::-1]:\n        if ai > running_max:\n            answer += 1\n            running_max = ai\n    return answer\n\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        input = read_input()\n        answer = solve(*input)\n        print(answer)\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "def arrayEversion(n,array):\n    m = max(array)\n    max_index = 0\n    for x in reversed(range(n)):\n        if array[x] == m:\n            max_index = x\n            break\n    if m == array[-1]:\n        return 0\n    if m == array[-2]:\n        return 1\n    else:\n        prev = array[-1]\n        c = 0\n        for x in reversed(range(max_index,n-1)):\n            if array[x] > prev:\n                c+=1\n                prev = array[x]\n            # print(array[x],prev)\n\n        return c\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int,input().split()))\n    print(arrayEversion(n,l))\n",
                true
            ],
            [
                "import math,sys\n#from itertools import permutations, combinations;import heapq,random;\nfrom collections import defaultdict,deque\nimport bisect as bi\ndef yes():print('YES')\ndef no():print('NO')\n#sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');\ndef I():return (int(sys.stdin.readline()))\ndef In():return(map(int,sys.stdin.readline().split()))\ndef Sn():return sys.stdin.readline().strip()\n#sys.setrecursionlimit(1500)\ndef dict(a):\n    d={} \n    for x in a:\n        if d.get(x,-1)!=-1:\n            d[x]+=1\n        else:\n            d[x]=1\n    return d\ndef find_gt(a, x):\n    'Find leftmost value greater than x'\n    i = bi.bisect_left(a, x)\n    if i != len(a):\n        return i\n    else:            \n        return -1\ndef main():\n    try:\n        n=I()\n        l=list(In())\n        d=set()\n        l1 = l\n        n1= len(l1)\n        mx= max(l1)\n        ans=0\n        cur_mx= -float('inf')\n        for i in range(n1-1,-1,-1):\n            if l1[i]==mx:\n                break\n            if cur_mx<l1[i]:\n                ans+=1\n                cur_mx=l1[i]\n        print(ans)\n    except:\n        pass\n        \nM = 998244353\nP = 1000000007\n \nif __name__ == '__main__':\n    for _ in range(I()):main()\n    #for _ in range(1):main()\n#End#\n\n#        ******************* All The Best *******************   #",
                true
            ],
            [
                "a=int(input())\nfor i in range(a):\n\n    s=int(input())\n    z=list(map(int,input().split()))\n\n    t=max(z)\n    cnt=0\n    maxa=0\n    for i in range(len(z)-1,-1,-1):\n        if(z[i]==t):\n            break\n        if(z[i]>maxa):\n            maxa=z[i]\n            cnt+=1\n    print(cnt)\n\n        \n",
                true
            ],
            [
                "from sys import stdin, stdout, setrecursionlimit as srl\nfrom threading import stack_size\nfrom collections import deque, defaultdict as dd\nfrom math import gcd, ceil, sqrt\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\n\n#srl(int(1e6))\n#input = stdin.readline\nflush = stdout.flush\n\np = int(1e9+7)\n\ntc = 1\ntc = int(input())\nfor _ in range(1, tc+1):\n    # print(f\"Case #{_}: \", end = '')\n\n    n = int(input())\n    m = list(map(int, input().split()))\n\n    mx = max(m)\n    cnt = 0\n    curr = 0\n\n    for i in range(n-1, -1, -1):\n        if (m[i] == mx):\n            print(cnt)\n            break\n        elif (m[i] > curr):\n            cnt += 1\n            curr = m[i]",
                true
            ],
            [
                "t=int(input())\nwhile(t):\n    t=t-1\n    n=int(input())\n    a=list(map(int,input().split()))\n    check=a[n-1]\n    ans=0\n    for i in reversed(range(0,n-1)):\n        if(a[i]>check):\n            check=a[i]\n            ans+=1\n    print(ans)",
                true
            ],
            [
                "for i in range(int(input())):\n  n = int(input())\n  a = list(map(int, input().split()))\n  a = a[::-1]\n  ma = max(a)\n  pre = a[0]\n  ans = 0\n  if ma == pre:\n    print(0)\n    continue\n\n  ans = 1\n  for j in range(1, n):\n    if a[j] == ma:\n      break\n    elif a[j] <= pre:\n      continue\n    else:\n      ans += 1\n      pre = a[j]\n\n  print(ans)",
                true
            ],
            [
                "t = int(input())\n\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = l[:: -1]\n    m = max(l)\n    c = 0\n\n    x = l[0]\n\n    for i in range(1, n):\n        if l[i] > x:\n            x = l[i]\n            c += 1\n            if x == m:\n                break\n    print(c)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input().split()\n    maximum = 1\n    for i in range(n):\n        a[i] = int(a[i])\n        if a[i] >= maximum:\n            maximum = a[i]\n\n    if a[n - 1] == maximum:\n        print(0)\n    else:\n        k = 1\n        newMax = a[n - 1]\n        for j in range(n - 1, 0, -1):\n            if a[j] > newMax:\n                if a[j] == maximum:\n                    break\n                k += 1\n                newMax = a[j]\n\n        print(k)\n",
                true
            ],
            [
                "import sys\nimport math\nimport collections\nimport heapq\n\ndy = [1, 0, -1, 0]\ndx = [0, 1, 0, -1]\n\nr = lambda: sys.stdin.readline().rstrip()\nMIS = lambda: map(int, r().split())\n\n\nfor _ in range(int(r())):\n    N = int(r())\n    L = list(MIS())\n    ans = 0\n    now = L[-1]\n    for i in range(N-2, -1, -1):\n        if L[i] > now:\n            now = L[i]\n            ans += 1\n    print(ans)",
                true
            ],
            [
                "import math,sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());mod1=1000000007;mod2=998244353\nfor _ in range(I()):\n    n=I()\n    a=L();m=max(a)\n    if a[-1]==m:print(0);continue\n    ans=1;cur=a[-1]\n    for i in range(n-2,-1,-1):\n        if a[i]==m:\n            break\n        if a[i]>cur:\n            ans+=1\n            cur=a[i]\n    print(ans)",
                true
            ],
            [
                "import heapq;import sys;import math;from collections import deque;from bisect import bisect_left,bisect_right;I=sys.stdin.readline;II=lambda :int(I());IN=lambda x:map(int,x.split());FN=lambda x:map(float,x.split());L=lambda x:list(IN(x));M=1000000007;P=print;T=True;F=False\nfor _ in range(II()):\n    n=II()\n    a=L(I())\n    c=0;l=0\n    for i in range(n-1,-1,-1):\n        if(a[i]>l):\n            c+=1\n            l=a[i]\n    print(c-1)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    c=0\n    m=l[-1]\n    for i in range(n-2,-1,-1):\n        if(l[i]>m):\n            c+=1\n            m=l[i]\n    print(c)",
                true
            ],
            [
                "for _ in range(int(input())):\n    array_length = int(input())\n    array = list(map(int, input().split()))\n    maximum = max(array)\n    number_of_eversions = 0\n    index = array_length - 1\n    local_maximum = 0\n    while index >= 0:\n        if array[index] == maximum:\n            print(number_of_eversions)\n            break\n        else:\n            if array[index] > local_maximum:\n                local_maximum = array[index]\n                number_of_eversions += 1\n        index -= 1\n",
                true
            ],
            [
                "\"\"\"\n    Author : Ashish Sasmal\n    Python3 / PyPy3\n\"\"\"\n\nfrom sys import stdin as sin\ndef aint():return int(input())\ndef amap():return map(int,sin.readline().split())\ndef alist():return list(map(int,sin.readline().split()))\ndef astr():return input()\n\nfor _ in range(aint()):\n    n = aint()\n    a = alist()\n    m = max(a)\n    ans = 0\n    i = n-2\n    curr = a[-1]\n    while i>=0:\n        if a[i]>curr:\n            ans+=1\n            curr = a[i]\n        i-=1\n    print(ans)\n            ",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    b  = int(input())\n    a = list(map(int, input().strip().split()))\n    maximum_1 = max(a)\n    pos = b-1\n    point = 0\n    while a[pos]!=maximum_1:\n        j = pos - 1\n        while a[j]<= a[pos]:\n            j = j -1\n        pos = j\n        point = point + 1\n    print(point)\n            ",
                true
            ],
            [
                "tt = int(input())\nfor TT in range(tt):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    mx = a[-1]\n    cnt = 0\n    for x in reversed(a):\n        if x > mx:\n            mx = x\n            cnt += 1\n    print(cnt)\n",
                true
            ],
            [
                "testcases=int(input())\nfor i in range(testcases):\n    n=int(input())\n    table=[int(x) for x in input().strip().split()]\n    k=0\n    maxi= max(table)\n    index = n-1\n    nexti=table[index]\n    while maxi != nexti:\n        k+=1\n        while nexti>=table[index] and index >0:\n            index-=1\n        nexti=table[index]\n\n\n    print(k)\n\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    lst = [*map(int, input().split())]\n    res, curmax = 0, lst[n - 1]\n\n    for i in range(n - 1, -1, -1):\n        if lst[i] > curmax:\n            curmax = lst[i]\n            res += 1\n    print(res)\n",
                true
            ],
            [
                "t = int(input().strip())\n\nfor i in range(t):\n    n = int(input().strip())\n    numbers = [int(i) for i in input().strip().split()]\n    last = numbers[n-1]\n    count=0\n    for index in reversed(range(n-1)) :\n        if numbers[index]>last :\n            count+=1\n            last = numbers[index] \n    print(count)",
                true
            ],
            [
                "import sys\n\n# sys.setrecursionlimit(200005)\nint1 = lambda x: int(x)-1\npDB = lambda *x: print(*x, end=\"\\n\", file=sys.stderr)\np2D = lambda x: print(*x, sep=\"\\n\", end=\"\\n\\n\", file=sys.stderr)\ndef II(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline().rstrip()\n# dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]\n# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n# inf = 18446744073709551615\ninf = 4294967295\n# md = 10**9+7\nmd = 998244353\n\ndef solve():\n    n = II()\n    aa = LI()\n    now = aa[-1]\n    ans = 0\n    for i in range(n-1)[::-1]:\n        if aa[i] > now:\n            ans += 1\n            now = aa[i]\n    print(ans)\n\nfor testcase in range(II()):\n    solve()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, a = int(input()), list(map(int, input().split()))\n    pre, ans, ma = 0, 0, max(a)\n    for num in a[::-1]:\n        if num == ma: break\n        if num > pre:\n            pre, ans = num, ans + 1\n    print(ans)\n    \n        \n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    v = [int(i) for i in input().split()]\n    p = max(v)\n    if (v[-1] == p):\n        print(0)\n        continue\n    p1 = v[-1]\n    ans = 1\n    for i in range(n-1, -1, -1):\n        if v[i] <= p1:\n            continue\n        elif v[i] == p:\n            print(ans)\n            break\n        else:\n            p1 = v[i]\n            ans += 1\n    else:\n        print(ans)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    count = 0\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    ax = a[n-1]\n    for y in range(n - 2, -1, -1):\n        if ax < a[y]:\n            count += 1\n            ax = a[y]\n    print(count)",
                true
            ],
            [
                "for _ in range(int(input())):\n    x = int(input())\n    array = list(map(int, input().split()))\n    great = max(array)\n    array = list(reversed(array))\n\n    ans = 0\n\n    temp = array[0]\n    for i in array:\n\n        if i > temp and temp != great:\n            ans += 1\n            temp = i\n\n    print(ans)",
                true
            ],
            [
                "def input_int():\n    return int(input())\n    \ndef input_multiple():\n    return map(int, input().split())\n\nt = input_int()\n\nwhile t>0:\n    n = input_int()\n    a = list(input_multiple())\n    count = 0\n    i = n-1\n    while i>=0:\n        j=i-1\n        while j>=0 and a[j]<=a[i]:\n            j-=1\n        if j<0:\n            break\n        count+=1\n        i=j\n    print(count)\n    t -= 1",
                true
            ],
            [
                "import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\n\nt = int(inpu())\nfor _ in range(t):\n    n = int(inpu())\n    a = list(map(int, inpu().split()))\n    big = max(a)\n    ind = n - 1\n    tot = 0\n    seen = 0\n    while a[ind] != big:\n        if a[ind] > seen:\n            seen = a[ind]\n            tot += 1\n        ind -= 1\n    print(tot)",
                true
            ],
            [
                "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, functools,copy,random\nfrom functools import reduce \nimport operator\n \ninf = float('inf')\nmod = 10**9+7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef LS(): return input().split()\ndef endl(): return print('\\n')\ndef lcm(a,b): return (a*b) // fractions.gcd(a,b)\ndef grayCode (n): return n ^ (n >> 1);\nsys.setrecursionlimit(20000)    # adjust numbers\ngraph = collections.defaultdict(list)\ngrid = []\nvisited = set()\nways = [\"D\",\"U\",\"R\",\"L\"]\ndx =   [1,-1,0,0]\ndy =   [0,0,1,-1]\n \ndef find(i) :\n    if par[i] != i : par[i] = find(par[i]);\n    return par[i]\ndef union(a, b) :\n    a = find(a)\n    b = find(b)\n    if a == b : return False\n    par[a] = b\n    return True\n#par = [i for i in range(n)]\ndef initGraph(m):\n    for _ in range(m):\n        u,v = LI()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    return graph\ndef initGraphW(m):\n    for _ in range(m):\n        a,b,c = LI()\n        graph[a-1].append((b-1,c))\n        graph[b-1].append((a-1,c))\n \ndef initGrid(h,w):\n    for i in range(h):\n        s = S()\n        grid.append(list(s))\n    return grid\n \ndef soe(limit):\n    a = [True] * limit                          # Initialize the primality list\n    a[0] = a[1] = False\n \n    for (i, isprime) in enumerate(a):\n        if isprime:\n            yield i\n            for n in range(i*i, limit, i):     # Mark factors non-prime\n                a[n] = False\n    return a\n\n################## Main (Author - 9th) ################## \n\nfor _ in range(I()):\n    n = I()\n    a = LI()\n    x = 1\n    start = a[0]\n    for i in range(1,n):\n        if start <= a[i]:\n            x+=1\n        start = a[i]\n    if x == n:\n        print(0)\n        continue\n    if a[-1] == max(a):\n        print(0)\n        continue\n    cnt = 1\n    temp = a[-1]\n    mx = max(a)\n    for i in reversed(range(n-1)):\n        if a[i] == mx: break\n        if a[i] > temp:\n            temp = a[i]\n            cnt+=1\n    print(cnt)\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "'''\n      ___           ___                         ___                       ___           ___                         ___\n     /\\__\\         /\\  \\         _____         /\\  \\                     /\\  \\         /\\  \\                       /\\__\\\n    /:/ _/_        \\:\\  \\       /::\\  \\        \\:\\  \\       ___         /::\\  \\       |::\\  \\         ___         /:/ _/_\n   /:/ /\\  \\        \\:\\  \\     /:/\\:\\  \\        \\:\\  \\     /\\__\\       /:/\\:\\__\\      |:|:\\  \\       /\\__\\       /:/ /\\  \\\n  /:/ /::\\  \\   ___  \\:\\  \\   /:/  \\:\\__\\   ___ /::\\  \\   /:/__/      /:/ /:/  /    __|:|\\:\\  \\     /:/  /      /:/ /::\\  \\\n /:/_/:/\\:\\__\\ /\\  \\  \\:\\__\\ /:/__/ \\:|__| /\\  /:/\\:\\__\\ /::\\  \\     /:/_/:/__/___ /::::|_\\:\\__\\   /:/__/      /:/_/:/\\:\\__\\\n \\:\\/:/ /:/  / \\:\\  \\ /:/  / \\:\\  \\ /:/  / \\:\\/:/  \\/__/ \\/\\:\\  \\__  \\:\\/:::::/  / \\:\\~~\\  \\/__/  /::\\  \\      \\:\\/:/ /:/  /\n  \\::/ /:/  /   \\:\\  /:/  /   \\:\\  /:/  /   \\::/__/       ~~\\:\\/\\__\\  \\::/~~/~~~~   \\:\\  \\       /:/\\:\\  \\      \\::/ /:/  /\n   \\/_/:/  /     \\:\\/:/  /     \\:\\/:/  /     \\:\\  \\          \\::/  /   \\:\\~~\\        \\:\\  \\      \\/__\\:\\  \\      \\/_/:/  /\n     /:/  /       \\::/  /       \\::/  /       \\:\\__\\         /:/  /     \\:\\__\\        \\:\\__\\          \\:\\__\\       /:/  /\n     \\/__/         \\/__/         \\/__/         \\/__/         \\/__/       \\/__/         \\/__/           \\/__/       \\/__/\n\n'''\n\"\"\"\n\u2591\u2591\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2588\n\u2591\u2584\u2580\u2591\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2591\u2591\u2588\u2591\n\u2591\u2588\u2591\u2584\u2591\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2591\u2584\u2591\u2588\u2591\n\u2591\u2588\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2591\n\u2591\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2591\n\u2584\u2588\u2580\u2588\u2580\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2580\u2580\u2588\u2588\u2588\n\u2588\u2588\u2591\u2591\u2580\u2588\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2588\u2580\u2591\u2591\u2588\u2588\n\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2580\u2591\u2591\u2591\u2591\u2580\u2588\u2591\u2591\u2591\u2591\u2588\u2588\n\u2588\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2588\u2588\n\u2591\u2580\u2588\u2588\u2588\u2584\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2584\u2588\u2588\u2588\u2580\u2591\n\u2591\u2591\u2591\u2580\u2588\u2588\u2584\u2591\u2580\u2588\u2588\u2580\u2591\u2584\u2588\u2588\u2580\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\"\"\"\nimport sys\nimport math\nimport collections\nimport operator as op\nimport heapq as hq\nfrom collections import deque\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2, floor, log\nfrom bisect import bisect_right, bisect_left, bisect\nfrom itertools import permutations\n\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\nfrom functools import reduce\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(2**20)\n\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom  # or / in Python 2\n\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return (list(factors))\n\ndef isPowerOfTwo(x):\n    return (x and (not(x & (x - 1))))\n\ndef check(a,k,n):\n    ans = 0\n    for i in range(n-1):\n        ans += min(k, a[i+1] - a[i])\n    ans += k\n    return ans\n\nMOD = 1000000007  # 10^9 + 7\nPMOD = 998244353\nLOGN = 30\n# alp = 'abcdefghijklmnopqrstuvwxyz'\nalp = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nN = 2 * 100005 + 1\n\nT = 1\nT = int(input())\nfor _ in range(T):\n    # n,k = list(map(int, stdin.readline().rstrip().split()))\n    # K = int(stdin.readline())\n    n = int(stdin.readline())\n    # n, h = list(map(int, input().rstrip().split()))\n    a = list(map(int, input().rstrip().split()))\n    # s = str(stdin.readline().strip('\\n'))\n    # s = list(stdin.readline().strip('\\n'))\n    # m = str(stdin.readline())\n    # c = list(map(int, stdin.readline().rstrip().split())) \n    mx = -1\n    for i in range(n):\n        mx = max(a[i],mx)\n    if mx == a[-1]:\n        print(0)\n        continue\n\n    x = a[-1]\n    ans = 0\n    for i in range(n-1,-1,-1):\n        if a[i] > x:\n            ans += 1\n            x = a[i]\n        if a[i] == mx:\n            break\n    print(ans)",
                true
            ],
            [
                "# cook your dish here\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    maxi = max(a)\n    idx = n-1\n    ans = 0\n    while a[idx]!=maxi:\n        i = idx - 1\n        while a[i]<=a[idx]:\n            i = i - 1\n        idx = i\n        ans = ans + 1\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n\n    n = int(input())\n\n    arr = list(map(int,input().split()))\n\n\n    c = 0\n\n    arr = arr[::-1]\n\n    t = arr[0]\n\n    for i in arr:\n\n        if i > t:\n            c+=1\n            t = i\n\n    print(c)",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    rev = a[::-1]\n    amax = max(rev)\n    pos = rev.index(amax)\n    l = rev[:pos+1]\n    first = l[0]\n\n    steps = 0\n\n    for item in l:\n        if item > first:\n            first = item\n            steps += 1\n\n    # steps = 0\n    # while a[-1] != amax:\n    #     a = [x for x in a if x > a[-1]]\n    #     steps += 1\n\n    print(steps)",
                true
            ],
            [
                "from bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mx = max(a)\n    i = n - 2\n    cur = a[-1]\n    if cur == mx:\n        print(0)\n        continue\n    k = 1\n    while a[i]!=mx:\n        if a[i]>cur:\n            k+=1\n            cur = a[i]\n        i-=1\n    print(k)\n    ",
                true
            ],
            [
                "cases = int(input())\nfor loop in range(cases):\n    datalen = int(input())\n    data = input().split(\" \")\n    for i in range(len(data)):\n        data[i] = int(data[i])\n    data = data[::-1]\n\n    currmax = data[0]\n    k = 0\n    for d in data:\n        if d > currmax:\n            currmax = d\n            k += 1\n\n    print(k)\n",
                true
            ],
            [
                "import sys\nfrom collections import deque\nimport math\nfrom bisect import bisect_left\nfrom functools import cmp_to_key\ndef II():\n    return int(sys.stdin.readline())\n \ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n    return map(int, sys.stdin.readline().split())\n \ndef SI():\n    return sys.stdin.readline().strip()\n \ndef FACT(n, mod):\n    s = 1\n    facts = [1]\n    for i in range(1,n+1):\n        s*=i\n        s%=mod\n        facts.append(s)\n    return facts[n]\n \ndef C(n, k, mod):\n    return (FACT(n,mod) * pow((FACT(k,mod)*FACT(n-k,mod))%mod,mod-2, mod))%mod\n \ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\n\nfor _ in range(II()):\n    n = II()\n    a = LI()\n    i = n-1\n    ans = 0\n    m = max(a)\n    c = a[-1]\n    while i >= 0:\n        if a[i]>c:\n            ans+=1\n            c = a[i]\n        i-=1\n    print(ans)",
                true
            ],
            [
                "for _ in range(eval(input())):\n    n=eval(input()); a = list(map(int,input().split()))\n\n    ans=0; k = a[-1]\n    for h in range(n-1, -1,-1):\n        if a[h]>k:\n            k=a[h]; ans+=1\n    print(ans)\n",
                true
            ],
            [
                "import math\nimport sys\nimport bisect\nfrom itertools import permutations\n\ndef lm():return map(int,input   ().split())\ndef xd(): return int(input())\ndef ll():return list(map(int, input().split()))\ndef xx(x):sys.stdout.write(x)\n\nn = xd()\n\nfor i in range(n):\n    \n    a = xd()\n\n    arr = ll()\n\n    count = 0\n\n    for j in range(1, len(arr)):\n\n        if (arr[len(arr) - 1 - j] > arr[len(arr) - 1]):\n\n            arr[len(arr) - 1] = arr[len(arr) - 1 - j]\n            count +=1\n\n    print(count)",
                true
            ],
            [
                "def main():\n    n = int(input())\n    arr = list(map(int, input().split()))[::-1]\n\n    comp = int()\n    k = 0\n\n    for i in range(n):\n        if i == 0:\n            comp = arr[i]\n\n        elif arr[i] > comp:\n            comp = arr[i]\n            k += 1\n\n    print(k)\n\nfor _ in range(int(input())):\n    main()",
                true
            ],
            [
                "t = int(input())\nfor k in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    ans = a[-1]\n    dem = 0\n    a.reverse()\n    for i in range(1,len(a)):\n        if(a[i]>ans):\n            ans = a[i]\n            dem+=1\n    print(dem)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = a[::-1]\n    c = 0\n    k = 0\n    for i in range(a.index(max(a))):\n        if a[i] > c:\n            c = a[i]\n            k += 1\n    print(k)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    x1=a.index(max(a))\n    x2=max(a)\n    c=0\n    p=a[-1]\n    if p==x2:\n        print(0)\n    else:\n        for j in range(n-2,x1-1,-1):\n            if p==x2:\n                break\n            elif a[j]>p:\n                p=a[j]\n                c=c+1\n        print(c)",
                true
            ],
            [
                "import collections\n\ndef readLine():\n    return list(map(int, input().strip().split()))\n\ndef readInt():\n    return int(input())\n\ndef readString():\n    return input()\n\ndef tcase():\n    t = readInt()\n    for _ in range(t):\n        solve()\n\ndef solve():\n    n = readInt()\n    arr = readLine()\n    m = -1\n    k = 0\n    for i in range(n-1, -1, -1):\n        if arr[i] > m:\n            m = arr[i]\n            k += 1\n    print(k-1)\n    \n    \n\n\ntcase()\n# solve()",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    cnt=0\n    point=n-1\n    for i in range(n-2,-1,-1):\n        if arr[point]<arr[i]:\n            cnt+=1\n            point=i\n    print(cnt)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    li=list(map(int,input().split()))\n    ans=0 \n    m=max(li)\n    p=0\n    for i in range(n-1,0,-1): \n        if(li[i]==m):\n            break\n        elif(li[i]>p):\n            ans=ans+1 \n            p=li[i]\n    print(ans)",
                true
            ],
            [
                "\ntest=int(input())\nwhile(test):\n    n=int(input())\n    a=list(map(int,input().split()))\n    an=a[n-1]\n    max=0\n    count=0\n    i=n-1\n    while(i>=0):\n        if a[i]>max:\n            max=a[i]\n            count+=1\n        i=i-1\n    print(count-1)\n    test=test-1",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    o=int(input())\n    x=list(map(int,input().split()))\n    m=max(x)\n    c=0\n    l=-2\n    while x[-1]!=m:\n        if x[l]> x[-1]:\n            x[l],x[-1]=x[-1],x[l]\n            c+=1\n        else:\n            l-=1\n    print(c)",
                true
            ],
            [
                "for _ in range(int(input())):\n  n=int(input())\n  x=list(map(int,input().split()))\n  maks=max(x)\n  i=n-1\n  res=0\n  while(x[i]!=maks):\n    j=i-1\n    while(x[j]<=x[i]):\n      j-=1\n    i=j\n    res+=1\n  print(res)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    M = max(a)\n    j = n - 1\n    m = -1\n    for _ in range(1000000000):\n        if j < 0:\n            break\n        if a[j] == M:\n            break\n        if a[j] > m:\n            ans += 1\n            m = a[j]\n        j -= 1\n    print(ans)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    x=arr[-1]\n    ans=0\n    for i in range(n-2,-1,-1):\n        if(arr[i]>x):\n            ans+=1 \n            x=arr[i]\n    print(ans)",
                true
            ],
            [
                "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\ninteractive = False\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\n\nflush = sys.stdout.flush\nif interactive and not testing:\n    input = sys.stdin.readline\nelse:\n    inputData = InputData()\n    input = inputData.input\n\ndef intin():\n    return(int(eval(input())))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(eval(input())))\ndef strin():\n    return eval(input())\ndef lout(l, sep=\"\\n\", toStr=True):\n    print((sep.join(list(map(str, l)) if toStr else l)))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print((args[0] if len(args)==1 else args))\n    if kargs: print([(k,v) for k,v in list(kargs.items())])\ndef ask(q):\n    sys.stdout.write(str(q)+'\\n')\n    flush()\n    return intin()\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\n\ndef main():\n    n = intin()\n    a = intlin()\n    ans = 0\n    x = max(a)\n    for i in range(n-1,-1,-1):\n        if i == n-1:\n            cur = a[i]\n            if cur == x:\n                break\n            continue\n        if a[i] > cur:\n            cur = a[i]\n            ans += 1\n            if cur == x:\n                break\n    return ans\n\nanss = []\nfor _ in range(intin()):\n    anss.append(main())\n    # anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print((int(round(time() * 1000))  - start_time))\n",
                true
            ],
            [
                "def func():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    pr = -1\n    for i in range(n-1, -1, -1):\n        if a[i] > pr:\n            ans += 1\n            pr = a[i]\n    print(ans-1)\n    return\n\n\nt = int(input())\nfor i in range(t):\n    func()\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\nsys.setrecursionlimit(3*10**5)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\ngp=[]\nans=[]\nf=0\nw=[]\n#Fenwick Tree point update range sum\ndef update_it(bit,i,val):\n    n=len(bit)\n    while(i<n):\n        bit[i]+=val\n        i+=i&(-i)\ndef get_ans(bit,i):\n    n=len(bit)\n    tot=0\n    while(i>0):\n        tot+=bit[i]\n        i-=i&(-i)\n    return tot\ndef dfs(i,prod,rem,n):\n    if rem==0:\n        while(i<len(n)):\n            prod*=int(n[i])\n            i+=1\n        return prod\n    if i==len(n):\n        return prod\n    mx=0\n    for j in range(9-int(n[i])):\n        mx=max(dfs(i+1,(int(n[i])+min(j,rem))*prod,rem-min(j,rem),n),mx)\n    return mx\ndef hnbhai(tc):\n    n=sb()\n    a=sd()\n    mx=max(a)\n    tot=0\n    i=n-1\n    while(i>=0 and a[i]!=mx):\n        tot+=1\n        j=i\n        i-=1\n        while(i>=0):\n            if a[i]>a[j]:\n                break\n            i-=1\n    print(tot)\nfor _ in range(sb()):\n    hnbhai(_+1)\n##case\n\n#.\n",
                true
            ],
            [
                "# Code by : Sam._.072\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    h = a[n-1]\n    for i in range(n-1,-1,-1):\n        if a[i] > h:\n            c += 1\n            h = a[i]\n    print(c)\n        ",
                true
            ],
            [
                "def solve():\n    N = int(input())\n    D = [int(x) for x in input().split()]\n    MAX = max(D)\n    k = 0\n    last = D[N-1]\n    done = (D[N-1]==MAX)\n    q = N-1\n    while not done:\n        p = q-1\n        k = k+1\n        while D[p]<=D[q]:\n            p-=1\n        q = p\n        done = (D[q]==MAX)\n    return k\n   \n\nT = int(input())\nfor i in range(T):\n    print(solve())\n\n    \n",
                true
            ],
            [
                "\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    count = 0\n    last = arr[-1]\n    for i in range(n-1,-1,-1):\n        if arr[i]>last:\n            count+=1\n            last = arr[i]\n    print(count)\n\n    \n   \n    \n    \n    \n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor case in range(t):\n  n = int(input())\n  l = [int(i) for i in input().split()]\n  ans = 1\n  m = max(l)\n  maxi = l[-1]\n  if maxi == m:\n    print(0)\n  else:\n    for i in range(n-1, -1, -1):\n      if l[i] == m:\n        break\n      else:\n        if l[i] > maxi:\n          maxi = l[i]\n          ans += 1\n    print(ans)",
                true
            ],
            [
                "for _ in range(eval(input())):\n    n = eval(input())\n    a = list(map(int, input().split()))[::-1]\n    ans = 0\n    p = 0\n    for x in a:\n        if x > p:\n            p = x\n            ans += 1\n    print(ans - 1)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ncase = int(input())\nfor _ in range(case):\n    length = int(input())\n    arr = list(map(int, input().split(' ')))\n    max_ = arr[-1]\n    cnt = 0\n\n    for i in reversed(range(length - 1)):\n        if max_ < arr[i]:\n            cnt += 1\n            max_ = arr[i]\n\n    print(cnt)",
                true
            ],
            [
                "#!/usr/bin/env python3\nimport sys, os, getpass\nimport math, random\nimport functools, itertools, collections, heapq, bisect\nfrom collections import Counter, defaultdict, deque\ninput = sys.stdin.readline \n\ndef read_matrix(rows):\n    return [list(map(int,input().split())) for _ in range(rows)]\n\ndef read_strings(rows):\n    return [input().strip() for _ in range(rows)]\n\ndef readint():\n    return int(input())\n\ndef readstr():\n    return list(map(int, input().split()))\n\ncases = readint()\n\ndef solve(num, arr):\n    it = 0\n    # go from right to left, and check number of increaess\n    pivot = num-1\n    cur = arr[pivot]\n    while pivot >= 0:\n        if arr[pivot] > cur:\n            cur = arr[pivot]\n            it += 1\n        pivot -= 1\n    return it\n\noutput = []\n\nfor _ in range(int(cases)):\n    num = readint()\n    arr = readstr()\n    it = solve(num, arr)\n    print(it)\n",
                true
            ],
            [
                "# def condition(mid, n, arr):\n#     count = 0\n#     for i in range(1, n):\n#         if arr[i] - arr[i - 1] > mid:\n#             count += mid\n#         else:\n#             count += arr[i] - arr[i - 1]\n#     count += mid\n#     return count\n\n\n# for _ in range(int(input())):\n#     n, h = list(map(int, input().split()))\n# array = list(map(int, input().split()))\n#     hig = h - 1\n#     low = 1\n#     while low <= hig:\n#         mid = low + (hig - low) // 2\n#         if condition(mid, n, array) > h:\n#             hig = mid - 1\n#         else:\n#             low = mid + 1\n#     print(low, hig)\n# # n, h = 5, 3\n# # array = [1, 2, 4, 5, 7]\n# # hig = h - 1\n# # low = array[0]\n# # while low < hig:\n# #     mid = low + (hig - low) // 2\n# #     if condition(mid, n, array) > h:\n# #         hig = mid - 1\n# #     else:\n# #         low = mid + 1\n# # print(low)\n\n# for _ in range(int(input())):\n#     n = int(input())\n#     string = input()\n#     s = [\"aa\", \"aba\", \"aca\", \"abca\", \"acba\", \"abbacca\", \"accabba\"]\n#     for i in s:\n#         if i in string:\n#             print(len(i))\n#             break\n#     else:\n#         print(-1)\n\n# for _ in range(int(input())):\n#     n = int(input())\n# array = list(map(int, input().split()))\n#     if n % 2 == 0:\n#         print(\"YES\")\n#     else:\n#         for i in range(1, n):\n#             if array[i - 1] >= array[i]:\n#                 print(\"YES\")\n#                 break\n#         else:\n#             print(\"NO\")\n# def condition(mid, main_arr):\n#     for i in range(len(main_arr)):\n#         if mid > main_arr[i][0]:\n#             mid += main_arr[i][1]\n#         else:\n#             return False\n#     return True\n\n\n# for _ in range(int(input())):\n#     n = int(input())\n#     main_arr = []\n#     minn = float(\"inf\")\n#     for _ in range(n):\n#         arr = list(map(int, input().split()))\n#         n = arr[0]\n#         arr = [] + arr[1:]\n#         maxx = max(arr)\n#         maxx_index = arr.index(maxx)\n#         main_arr.append([maxx - maxx_index + 1, n])\n\n#     main_arr.sort()\n#     lo = main_arr[0][0]\n#     hi = main_arr[-1][0] - 1\n#     ans = 0\n#     while lo <= hi:\n#         mid = lo + (hi - lo) // 2\n#         if condition(mid, main_arr):\n#             print(mid, \"ans\")\n#             hi = mid - 1\n#         else:\n#             lo = mid + 1\n#     print(lo)\n# def DFS(current, maxx, mapp, n, visited):\n#     ans = False\n#     if current[0] == maxx or current[1] == maxx:\n#         return True\n#     # for i in range(2 * n):\n#     for i in range(n):\n#         if (\n#             current[0] > mapp[i][0]\n#             or current[0] > mapp[i][1]\n#             or current[1] > mapp[i][0]\n#             or current[1] > mapp[i][1]\n#         ) and visited[i] == 0:\n#             visited[i] = 1\n#             if DFS(mapp[i], maxx, mapp, n, visited):\n#                 return True\n#             if DFS(mapp[i], maxx, mapp, n, visited):\n#                 return True\n#     return ans\n\n\n# for _ in range(int(input())):\n#     n = int(input())\n# map_1 = list(map(int, input().split()))\n#     map_2 = list(map(int, input().split()))\n#     maxx = max(max(map_1), max(map_2))\n#     mapp = []\n#     for i in range(n):\n#         mapp.append([map_1[i], map_2[i], i])\n#         # mapp.append([map_2[i], map_1[i], i])\n#     mapp.sort()\n#     ans = [0] * n\n#     # visit = [0] * (2 * n)\n#     visit = [0] * n\n#     ht = {}\n#     # for i in range(2 * n):\n#     for i in range(n):\n#         if mapp[i][0] not in ht or mapp[i][1] not in ht:\n#             visited = [] + visit\n#             visited[i] = 1\n#             if DFS(mapp[i], maxx, mapp, n, visited):\n#                 # for j in range(i, 2 * n):\n#                 for j in range(i, n):\n#                     ans[mapp[j][2]] = 1\n#                 break\n#             else:\n#                 ht[mapp[i][0]] = 1\n#                 ht[mapp[i][1]] = 1\n#     print(*ans, sep=\"\")\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mx = max(arr)\n    curr = n - 1\n    ans = 0\n    while arr[curr] != mx:\n        i = curr - 1\n        while arr[i] <= arr[curr]:\n            i -= 1\n        ans += 1\n        curr = i\n    print(ans)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=a[::-1]\n    m=b[0]\n    ans=0\n    for j in range(n):\n        if m<b[j]:\n            ans+=1\n            m=b[j]\n    print(ans)",
                true
            ],
            [
                "\nimport sys\ninput = sys.stdin.readline\n\nc = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = max(a)\n    if n==1:\n        print(0)\n        continue\n\n    i = n\n    u = 0\n    while True:\n        i -= 1\n        u += 1\n        p = a[i]\n\n        if p == k:\n            c.append(u-1)\n            break\n\n        while p >= a[i-1]:\n            i -= 1\n\nprint(*c, sep=\"\\n\")\n",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve():\n  n = get_int()\n  arr = get_list()\n\n  if max(arr) == arr[-1]:\n    print(0)\n    return\n  \n  highest = max(arr)\n\n\n\n  maxIndex = -1\n\n  for i in range(n-1, -1, -1):\n    if arr[i] == highest:\n      maxIndex = i\n      break\n\n  ans = 0\n  current = float(\"-inf\")\n\n  for i in range(n-1, maxIndex, -1):\n    if arr[i] > current:\n      current = arr[i]\n      ans += 1\n  \n  print(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT = get_int()\nwhile T:\n  solve()\n  T -= 1\n",
                true
            ],
            [
                "from sys import stdin\n\ndef solve():\n    results = []\n    \n    for _ in range(int(stdin.readline().strip())):\n        n = int(stdin.readline().rstrip())\n        A = list(map(int, stdin.readline().rstrip().split()))\n        \n        if n == 1:\n            results.append(0)\n            continue\n        \n        if n == 2:\n            results.append(1 if A[1] < A[0] else 0)\n            continue\n        \n        B = []\n        \n        for i,x in enumerate(A):\n            B.append((x,i))\n            \n        B.sort()\n        \n        if B[-1][0] == A[-1]:\n            results.append(0)\n            continue\n        \n        cur = n-1\n        ans = 0\n        \n        for i in range(n-2,-1,-1):\n            if A[i] > A[cur]:\n                ans += 1\n                if A[i] == B[-1][0]:\n                    break\n                cur = i\n                \n        results.append(ans)\n\n    print ('\\n'.join(map(str, results)))        \n\nif __name__ == \"__main__\":\n    solve()\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou are given an array a of n integers, and another integer k such that 2k \u2264 n.\n\nYou have to perform exactly k operations with this array. In one operation, you have to choose two elements of the array (let them be a_i and a_j; they can be equal or different, but their positions in the array must not be the same), remove them from the array, and add \u230a (a_i)/(a_j) \u230b to your score, where \u230a x/y \u230b is the maximum integer not exceeding x/y.\n\nInitially, your score is 0. After you perform exactly k operations, you add all the remaining elements of the array to the score.\n\nCalculate the minimum possible score you can get.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nEach test case consists of two lines. The first line contains two integers n and k (1 \u2264 n \u2264 100; 0 \u2264 k \u2264 \u230a n/2 \u230b).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 2 \u22c5 10^5).\n\nOutput\n\nPrint one integer \u2014 the minimum possible score you can get.\n\nExample\n\nInput\n\n\n5\n7 3\n1 1 1 2 1 3 1\n5 1\n5 5 5 5 5\n4 2\n1 3 3 7\n2 0\n4 2\n9 2\n1 10 10 1 10 2 7 10 3\n\n\nOutput\n\n\n2\n16\n0\n6\n16\n\nNote\n\nLet's consider the example test.\n\nIn the first test case, one way to obtain a score of 2 is the following one:\n\n  1. choose a_7 = 1 and a_4 = 2 for the operation; the score becomes 0 + \u230a 1/2 \u230b = 0, the array becomes [1, 1, 1, 1, 3]; \n  2. choose a_1 = 1 and a_5 = 3 for the operation; the score becomes 0 + \u230a 1/3 \u230b = 0, the array becomes [1, 1, 1]; \n  3. choose a_1 = 1 and a_2 = 1 for the operation; the score becomes 0 + \u230a 1/1 \u230b = 1, the array becomes [1]; \n  4. add the remaining element 1 to the score, so the resulting score is 2. \n\n\n\nIn the second test case, no matter which operations you choose, the resulting score is 16.\n\nIn the third test case, one way to obtain a score of 0 is the following one:\n\n  1. choose a_1 = 1 and a_2 = 3 for the operation; the score becomes 0 + \u230a 1/3 \u230b = 0, the array becomes [3, 7]; \n  2. choose a_1 = 3 and a_2 = 7 for the operation; the score becomes 0 + \u230a 3/7 \u230b = 0, the array becomes empty; \n  3. the array is empty, so the score doesn't change anymore. \n\n\n\nIn the fourth test case, no operations can be performed, so the score is the sum of the elements of the array: 4 + 2 = 6.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = sum(a[k*2:])\n    for i in range(k):\n        ans += a[i + k] // a[i]\n    print(ans)\n",
                true
            ],
            [
                "t =int(input())\nfor q in range(t):\n    n,k = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    ans = 0\n    l,r = n-1-k,n-1\n    for i in range(k):\n        ans += arr[l]//arr[r]\n        l-=1\n        r-=1\n    ans += sum(arr[:n-2*k])    \n    print(ans)",
                true
            ],
            [
                "\"\"\"\n\u9a8c\u8bc1\uff0c\u5feb\ninput:\n5\n7 3\n1 1 1 2 1 3 1\n5 1\n5 5 5 5 5\n4 2\n1 3 3 7\n2 0\n4 2\n9 2\n1 10 10 1 10 2 7 10 3\noutput:\n2\n16\n0\n6\n16\n\"\"\"\n\nfor _ in range(int(input())):\n    s, k = [int(_) for _ in input().split()]\n    a = [int(_) for _ in input().split()]\n    if k == 0:\n        print(sum(a))\n    else:\n        r = 0\n        a.sort()\n        header = a[s-2*k:s-k]\n        tail = a[s-k:]\n        for _ in zip(header, tail):\n            r += _[0]//_[1]\n        r += sum(a[:s-2*k])\n        print(r)\n",
                true
            ],
            [
                "for ii in range(int(input())):\n    n,k=map(int,input().split())\n    arr=sorted(list(map(int,input().split())))\n    res,i,temp=0,0,n-(2*k)\n    while i<(n-(2*k)):\n        res+=arr[i]\n        i+=1\n    for jj in range(0,k):\n        res+=(arr[temp]//arr[temp+k])\n        temp+=1\n    print(res)",
                true
            ],
            [
                "for i in range(int(input())):\n    n,k=map(int,input().split())\n    l=list(map(int,input().split()))\n\n    l.sort()\n\n    \n    c=0\n    \n\n    for i in range(k):\n        c+=l[n-2*k+i]//l[n-k+i]\n\n    c+=sum(l[:n-2*k])\n    print(c)\n\n\n\n    \n    \n\n   \n\n    \n\n",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve():\n  n, k = get_ints()\n  arr = get_list()\n\n  if k == 0:\n    print(sum(arr))\n    return\n\n  arr.sort()\n  ans = 0\n\n  for i in range(n-2*k):\n    ans += arr[i]\n  \n  final = []\n\n  for i in range(n-2*k, n):\n    final.append(arr[i])\n  \n  store = {}\n\n  for ele in final:\n    if ele not in store:\n      store[ele] = 1\n    else:\n      store[ele] += 1\n  \n  req = []\n  for ele in store:\n    req.append(store[ele])\n  \n  req.sort()\n  last = req[-1]\n  length = len(req)\n\n  temp = 2*last - 2*k\n\n  if temp <= 0:\n    print(ans)\n    return\n  \n  ans += temp//2\n\n  print(ans)\n\n    \n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT = get_int()\nwhile T:\n  solve()\n  T -= 1\n",
                true
            ],
            [
                "from collections import Counter\nimport collections\nt = int(input())\n\n\n\nfor _ in range(t):\n    n, k = list(map(int , input().split()))\n\n    arr = list(map(int , input().split()))\n \n    ans = 0\n\n    arr.sort()\n\n    if k == 0:\n        print(sum(arr))\n        continue\n\n    retained = n - 2 * k\n        \n\n    for i in range(retained):\n        ans += arr[i]\n\n\n    c = Counter(arr[retained:])\n    freq = max(list(c.values()))\n\n\n    if freq > k:\n        ans += (freq - k)\n    \n    print(ans)\n\n\n    # c = Counter(arr)\n\n    # while k:\n    #     if len(c) == 1:\n    #         for key in c:\n    #             c[key] -= 2 * k\n    #             ans += k\n    #             k = 0\n    #         break\n    #     else:\n    #         keys = list(c.keys())\n    #         keys.sort()\n    #         mnk, mxk = keys[-2], keys[-1]\n\n    #         if c[mxk] > 1 and c[mxk] >= 2 * k:\n    #             c[mxk] -= 2 * k\n    #             ans += k\n    #             k = 0\n    #             break\n\n    #         c[mnk] -= 1\n    #         c[mxk] -= 1\n\n    #         if c[mxk] == 0: del c[mxk]\n    #         if c[mnk] == 0: del c[mnk]\n    #         k -= 1\n\n    # # print(c)\n    # for key, val in c.items():\n    #     ans += key * val\n    # print(ans)\n\n        \n\n\n\n\n\n\n    \n",
                true
            ],
            [
                "import heapq;import sys;import math;from collections import deque;from bisect import bisect_left,bisect_right;I=sys.stdin.readline;II=lambda :int(I());IN=lambda x:map(int,x.split());FN=lambda x:map(float,x.split());L=lambda x:list(IN(x));M=1000000007;P=print;T=True;F=False\nfor _ in range(II()):\n    n,k=IN(I())\n    rem=n-2*k\n    a=L(I())\n    a.sort();sc=0;f,s=rem,rem+k\n    # print(rem)\n    for i in range(k):\n        sc+=a[f]//a[s]\n        f+=1;s+=1\n    # print(sc,sum(a[:rem]),a)\n    sc+=sum(a[:rem])\n    print(sc)\n",
                true
            ],
            [
                "cases = int(input())\n\nfor c in range(cases):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = 0\n    for i in range(k):\n        ans+= int(a[i+k]/a[i])\n    for i in range(2*k, n):\n        ans += a[i]\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += a[i+k]//a[i]\n    print(ans+sum(a[2*k:]))\n",
                true
            ],
            [
                "t = int(input())\nfor test in range(t):\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    ans = sum(a[:n-2*k])\n    for i in range(n-2*k, n-k):\n        ans += a[i]//a[k+i]\n    print(ans)\n",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    n, k=list(map(int, input().split()))\n    a=list(map(int, input().split()))\n    a.sort(reverse=True)\n    if k==0 :\n        print(sum(a))\n    else:\n        s=0    \n        for i in range(k):\n            s+=(a[i+k]//a[i])\n        summ=0    \n        for i in range(2*k,n):\n            summ+=a[i]\n        print(s+summ)\n",
                true
            ],
            [
                "import math\ndef quck_sort(lst,start,end):\n    if start>= end:\n        return\n    left = start\n    right = end\n    mid= lst[left]\n    while left <right:\n        while left < right and lst[right]<=mid:\n            right-=1\n        lst[left]=lst[right]\n        while left <right and lst[left]> mid:\n            left+=1\n        lst[right]=lst[left]\n    lst[left]=mid\n\n    quck_sort(lst,start,left-1)\n    quck_sort(lst,left+1,end)\n\n    \ndef solve(n,L):\n    ans=0\n    quck_sort(L,0,len(L)-1)\n    #print(L)\n\n    for i in range(0,n):\n        ans +=math.floor(L[n+i]/L[i])\n        #print(ans)\n    for i in range(2*n,len(L)):\n        ans+=L[i]\n    \n    print(ans)      \n    \nfor _ in range(int(input())):\n    nk = list(map(int,input().split(\" \")))\n    n=nk[0]\n    k=nk[1]\n    L=list(map(int,input().split(\" \")))\n    solve(k,L)",
                true
            ],
            [
                "#!/usr/bin/env python3\n\nfrom functools import lru_cache\nfrom heapq import heappush, heappop, heappushpop\nfrom itertools import permutations\nfrom operator import itemgetter, le\nfrom collections import deque\nfrom collections import Counter\nfrom itertools import accumulate\nfrom collections import defaultdict\nimport sys\nimport math\nfrom bisect import bisect_right as br\nfrom bisect import bisect_left as bl\nmod = 10**9 + 7\ninf = float('inf')\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\nt = I()\nfor _ in range(t):\n    n, k = LI()\n    a = LI()\n    a.sort()\n    m = n - 2*k\n    ans = sum(a[:m])\n    a = a[m:]\n    for i in range(k):\n        x = a[i]\n        y = a[i+k]\n        ans += x//y\n    print(ans)        \n        ",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n\n    score = sum(a[:(n - 2 * k)])\n    for l in range(k):\n        score += a[n - k - 1 - l] // a[n - 1 - l]\n    \n    print(score)",
                true
            ],
            [
                "t=int(input())\nfor i in range(0,t):\n    n,k=map(int,input().split())\n    L=list(map(int,input().split()))\n    L.sort()\n    used=[False]*n\n    pref=[0]*n\n    if(k==0):\n        s=0\n        for u in range(0,n):\n            s+=L[u]\n        print(s)\n    else:\n        s=0\n        for u in range(0,n-2*k):\n            s+=L[u]\n        \n        for v in range(n-2*k,n-k):\n            if(L[v]<L[v+k]):\n                s+=0\n            else:\n                s+=1\n\n        print(s)\n\n\n    \n\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(0, t):\n    n, k = map(int, input().split())\n    b = list(map(int, input().split()))\n    b.sort()\n    if k > 0:\n        prev = b[n - 2 * k]\n        same = 1\n        maxs = 1\n        for j in range(n - 2 * k + 1, n):\n            if b[j] == prev:\n                same += 1\n            else:\n                same = 1\n            prev = b[j]\n            maxs = max(maxs, same)            \n        if maxs <= k:\n            print(sum(b[:n - 2 * k]))\n        else:\n            print(sum(b[:n - 2 * k]) + (maxs - k))\n    else:\n        print(sum(b))",
                true
            ],
            [
                "def merge(arr1, arr2):\n    len1 = len(arr1)\n    len2 = len(arr2)\n    i = 0\n    j = 0\n    array = []\n    while i + j < len1 + len2:\n        if i == len1:\n            array.append(arr2[j])\n            j += 1\n        elif j == len2:\n            array.append(arr1[i])\n            i += 1\n        elif arr1[i] >= arr2[j]:\n            array.append(arr1[i])\n            i += 1\n        else:\n            array.append(arr2[j])\n            j += 1\n    return array\n            \ndef sort(array):\n    len_a = len(array)\n    if len_a < 2:\n        return array\n    arr1 = sort(array[:len_a//2])\n    arr2 = sort(array[len_a//2:])\n    array = merge(arr1, arr2)\n    return array\n\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    array = list(map(int, input().split()))\n    array = sort(array)\n\n    score = 0\n    for j in range(k):\n        score += array[j + k] // array[j]\n    score += sum(array[2 * k:])\n    print(score)",
                true
            ],
            [
                "from math import floor\ntc = int(input())\nfor case in range(tc):\n    n, k = (int(i) for i in input().split())\n    numbers = [int(j) for j in input().split()]\n    numbers = sorted(numbers)\n    to_erase = numbers[-2*k:]\n    suma = sum(numbers[:n-2*k])\n    my_dict = dict()\n    for num in to_erase:\n        try:\n            my_dict[num] += 1\n        except:\n            my_dict[num] = 1\n    max_value = max(my_dict.values())\n    restantes = 2*k-max_value\n    faltan = max(max_value - restantes,0)\n\n    para_sumar = faltan//2\n    total = suma + para_sumar\n\n    print(suma) if k==0 else print(total)\n    ",
                true
            ],
            [
                "for i in range(int(input())):\n    n,k=map(int,input().split())\n    l=list(map(int,input().split()))\n    \n    l.sort()\n    l.reverse()\n    \n    i=0\n    j=k\n    ans=0\n    while i<k:\n        ans+=l[j]//l[i]\n        i+=1\n        j+=1\n    \n    for m in range(2*k,n):\n        ans+=l[m]\n    \n    print(ans)\n        \n    ",
                true
            ],
            [
                "# cook your dish here\nimport sys\n#import random\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\n#import math\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\ndx = [0,0,1,-1]\ndy = [1,-1,0,0]\nmod = 10**9 + 7\nmod1 = 998244353\n\nfor _ in range (ii()) :\n    n,k = il()\n    a = il()\n\n    a.sort(reverse = True)\n\n    ans = 0\n    t = 0\n\n    for i in range (k) :\n        ans += a[i+k]//a[i]\n        a[i] = a[i+k] = 0\n\n    print(ans + sum(a))\n",
                true
            ],
            [
                "def solve (arr,n,k):\n    arr.sort()\n    s=0\n    for i in range(n-2*k,n-k):\n        s+=arr[i]//arr[i+k]\n    \n    s+=sum(arr[:n-2*k])\n    print(s)\n\n\nt=int(input())\nwhile (t):\n    l=[int(i) for i in input().split(\" \")]\n    n=l[0]\n    k=l[1]\n    l=[int(i) for i in input().split(\" \")]\n    solve(l,n,k)\n    t-=1\n",
                true
            ],
            [
                "def doSomething(arr, k):\n    l = len(arr)\n    arr.sort()\n    k_arr = arr[l - (2 * k)::]\n    rem_arr = arr[:l - (2 * k):]\n    sum = 0\n    for i in rem_arr:\n        sum += i\n    a = k_arr[:k:]\n    b = k_arr[k::]\n\n    for i in range(k):\n        sum += int(a[i]/b[i])\n\n\n    print(sum)\n\n\nt = int(input())\nfor i in range(t):\n    n, k = list(map(int, input().split()))\n    array = list(map(int, input().split()))\n    doSomething(array, k)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    a.sort()\n    s=0\n    a=a[::-1]\n    b=a[0:2*k]\n    ma=[0]\n    j=0\n    while(j<2*k):\n        c=1\n        while(j<2*k-1 and b[j]==b[j+1]):\n           c+=1\n           j+=1\n        ma.append(c)\n        j+=1\n    \n    mm=max(ma)\n    s+=max(mm-k,0)\n    for j in range(2*k,n):\n        s+=a[j]\n        \n    print(s)",
                true
            ],
            [
                "tt = int(input())\n\nfor _ in range(tt):\n    n,k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt = 0\n    was = [0] * n\n    for i in range(n-1,n-k-1,-1):\n        was[i] = 1\n        was[i-k] = 1\n        cnt += a[i-k]//a[i]\n    for i in range(n):\n        if was[i] == 0:\n            cnt+= a[i]\n    print(cnt)",
                true
            ],
            [
                "t = int(input())\nfor bob in range(t):\n    n, k = map(int, input().split())\n    arr = sorted(list(map(int, input().split())), reverse = True)\n    cur = sum(arr[2 * k:])\n    for i in range(k):\n        cur += (arr[i+k]//arr[i])\n    print(cur)\n",
                true
            ],
            [
                "test=int(input())\nfor a in  range(test):\n    t = list(map(int, input().split()))\n    n, k = t[0], t[1]\n    l = list(map(int, input().split()))\n    l.sort()\n    score = 0\n    j = n - 1\n    i = j - k\n    while k:\n        score += l[i] // l[j]\n        k -= 1\n        i -= 1\n        j -= 1\n    for h in range(i + 1):\n        score += l[h]\n    print(score)",
                true
            ],
            [
                "from collections import defaultdict, Counter,deque\nfrom math import sqrt, log10, log, floor, factorial,gcd\nfrom bisect import bisect_left, bisect_right,insort\nfrom itertools import permutations,combinations\nimport sys, io, os\ninput = sys.stdin.readline\n# input=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# sys.setrecursionlimit(10000)\ninf = float('inf')\nmod = 10 ** 9 + 7\ndef yn(a): print(\"YES\" if a else \"NO\")\nceil = lambda a, b: (a + b - 1) // b\n\nt = int(input())\nfor i in range(t):\n    n,k=[int(i) for i in input().split()]\n    l=[int(i) for i in input().split()]\n    l.sort()\n    m1=[l.pop() for i in range(k)]\n    m2=[l.pop() for i in range(k)]\n    suma=sum(l)\n    sum2=0\n    for i,j in zip(m1,m2):\n        sum2+=j//i\n    # print(suma,sum2)\n    print(suma+sum2)",
                true
            ],
            [
                "import math\ncases = int(input())\nfor i in range(cases):\n  n, k = [int(x) for x in input().split()]\n  a = [int(x) for x in input().split()]\n\n  a.sort(reverse=True)\n\n  matching = a[:2*k]\n  rest = a[2*k:]\n\n  total = 0\n  for i in range(k):\n    total += math.floor(matching[k+i]/matching[i])\n  \n  total += sum(rest)\n  print(total)\n\n\n\n",
                true
            ],
            [
                "import math\nfrom collections import defaultdict\nt=int(input())\nfor _ in range(t):\n    n,k=list(map(int,input().strip().split()))\n    x=list(map(int,input().strip().split()))\n    ans=0\n    if(k>0):\n        x.sort(reverse=True)\n        bigger = x[:2 * k]\n        dic = defaultdict(int)\n        for i in bigger:\n            dic[i] += 1\n        tkrarat = list(dic.values())\n        maxx = max(tkrarat)\n        ans += max((2 * maxx - sum(tkrarat))//2, 0)\n    for i in range(2*k,n):\n        ans+=x[i]\n    print(ans)",
                true
            ],
            [
                "t= int(input())\ndef calc(arr, k):\n    s = 0\n    x = []\n    y = []\n    for i in range(k):\n        x.append(arr[-1])\n        arr.pop()\n    for i in range(k):\n        y.append(arr[-1])\n        arr.pop()\n    for i in range(k):\n        s += y[i]//x[i]\n    s += sum(arr)\n    return s\nfor i in range(t):\n    n,k = map(int,input().split())\n    arr = sorted([int(x) for x in input().split()])\n    print(calc(arr, k))",
                true
            ],
            [
                "import sys\nimport bisect\nimport math\nfrom collections import deque\ninput = lambda: sys.stdin.readline().strip()\nmod = 10**9 + 7\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    s = 0\n    for i in range(k):\n        s += (a[i+k]//a[i])\n    return s+sum(a[2*k:])\n\n\nif __name__ == \"__main__\":\n    t=1\n    t = int(input())\n    for _ in range(t):\n        print(solve())",
                true
            ],
            [
                "from collections import defaultdict\nt=int(input())\nfor _ in range(t):\n    n,k=list(map(int,input().strip().split()))\n    x=list(map(int,input().strip().split()))\n    ans=0\n    if(k>0):\n        x.sort(reverse=True)\n        dic = defaultdict(int)\n        for i in range(2*k):\n            dic[x[i]] += 1\n        maxx = max(dic.values())\n        ans += max(((2 * maxx )- sum(dic.values()))//2, 0)\n    ans+=sum(x[2*k:])\n    print(ans)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, k = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    arr.sort(reverse = True)\n    i, j = 0, k\n    ans = 0\n    while k:\n        ans += (arr[j] // arr[i])\n        k -= 1\n        i += 1\n        j += 1\n    for indx in range(j, n):\n        ans += arr[indx]\n    print(ans)",
                true
            ],
            [
                "ans = []\n \nt = int(input())\nfor x in range(t):\n    score = 0\n    n, k = input().split()\n    n, k = int(n), int(k)\n    lst = sorted(list(map(int, input().split())))\n    if k > 0:\n        zn = lst[-k:]\n        lst = lst[:-k]\n        ch = lst[-k:]\n        lst = lst[:-k]\n        q = 0\n        while q < len(ch):\n            score+=ch[q]//zn[q]\n            q+=1\n        \n    score += sum(lst)\n    ans.append(score)\n\nfor x in ans:\n    print(x)",
                true
            ],
            [
                "T = int(input())\nfor t in range(T):\n    n, k = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    A.sort()\n\n    taken = [0 for i in range(n)]\n\n    right = n-1\n    left = n-2\n    ans = 0\n    # first n-2k elems + (highest freq elem / 2)\n\n    left = n - 2*k\n    right = left + 1\n\n    freq = {}\n    while left + k < n:\n        ans += A[left]//A[left+k]\n        taken[left] = 1\n        taken[left+k] = 1\n        left += 1\n        \n    for i in range(n):\n        if taken[i] == 0:\n            ans += A[i]\n\n    print(ans)\n",
                true
            ],
            [
                "def func():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    l = n-1\n    dif = n-k-1\n    while l >= n-k:\n        ans = ans + a[dif]//a[l]\n        #print(l, end = \" \")\n        #print(l-dif, end = \" \")\n        #print(a[l], end = \" \")\n        #print(a[l-dif])\n        l = l-1\n        dif = dif-1\n        #print(\"ans is \", ans, end = \" \")\n    l = dif\n    #print(l)\n    while l >= 0:\n        ans = ans + a[l]\n        l = l-1\n    print(ans)\n\nt = int(input())\nfor i in range(t):\n    func()\n",
                true
            ],
            [
                "from math import floor\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    l=[int(x) for x in input().split()]\n    l.sort()\n    i=0\n    o=0\n    #score1=0\n    score2=0\n    while o<k:\n        #score1+=floor(l[-2-i]/l[-1-i])\n        score2+=floor(l[-k-1-o]/l[-1-o])\n        #i+=2\n        o+=1\n    #score1+=sum(l[:n-2*k])\n    score2+=sum(l[:n-2*k])\n    print(score2)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = sorted(l,reverse=True)\n    ans = sum(l[2*k:])\n    for i in range(k, 2*k):\n        ans += l[i]//l[i-k]\n    print(ans)",
                true
            ],
            [
                "import math\nt = int(input().strip())\n\nfor i in range(t):\n    [n,k] = [int(j) for j in input().strip().split()]\n    numbers = [int(j) for j in input().strip().split()]\n    numbers.sort()\n    num_sum=0\n    for j in range(n-(2*k)):\n        num_sum+=numbers[j]\n    for j in range(n-(2*k),n-k):\n        num_sum+=(numbers[j]//numbers[j+k])\n\n    print(num_sum)",
                true
            ],
            [
                "for _ in range(int(input())):\n    s, k = [int(_) for _ in input().split()]\n    a = [int(_) for _ in input().split()]\n    if k == 0:\n        print(sum(a))\n    else:\n        r = 0\n        a.sort()\n        header = a[s-2*k:s-k]\n        tail = a[s-k:]\n        for _ in zip(header, tail):\n            r += _[0]//_[1]\n        r += sum(a[:s-2*k])\n        print(r)\n",
                true
            ],
            [
                "from math import *\n \n#from math import factorial as fact, comb as ncr \nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\n\nfrom array import array\nfrom re import search\n \nli=lambda : list(map(int,input().split()))\narr=lambda a: array('i',a)\nbi=lambda n: bin(n).replace(\"0b\", \"\")\nyn=lambda f: print('NYOE S'[f::2])\nsbstr=lambda a,s: search('.*'.join(a),s)\n\n'''def isprime(a):\n    if a==2: return True\n    elif a%2==0: return False\n    n=3\n    while n<=a**0.5:\n        if a%n==0:\n            return False\n        n+=2\n    return True\n'''\n'''def nf(n,a):\n    b=a*a\n    c=b*a\n    d=c*a\n    e=n\n    ct=0\n    while e%a==0:\n        if e%d==0:\n            ct+=4\n            e=e//d\n        if e%c==0:\n            ct+=3\n            e=e//c\n        if e%b==0:\n            ct+=2\n            e=e//b\n        if e%a==0:\n            ct+=1\n            e=e//a\n    return ct\n'''\n\ndef solve():\n    for _ in range(int(input())):\n        n,k=li()\n        a=li()\n        a.sort()\n        b=a[n-2*k:]\n        p=0\n        for i in range(k):\n            p+=b[i]//b[k+i]\n        print(p+sum(a[:n-2*k]))\n\nsolve()",
                true
            ],
            [
                "from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    T = int(input())\n    for _ in [0] * T:\n        N, K = map(int, input().split())\n        A = list(map(int, input().split()))\n\n        A.sort(reverse=1)\n        ax = A[K:]\n        ay = A[:K]\n        ans = 0\n        for i, y in enumerate(ay):\n            ans += ax[i] // y\n            ax[i] = 0\n        ans += sum(ax)\n        print(ans)\n\n\nmain()\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n, k = tuple(map(int, input().split(\" \")))\n    a = list(map(int, input().split(\" \")))\n    sa = sorted(a)\n    remaining = sum(sa[:n-(2*k)])\n    for j in range(n-k, n):\n        remaining += sa[j-k]//sa[j]\n    print(remaining)\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n,k=map(int,input().split())\n    a=[int(x) for x in input().split()]\n    a=sorted(a)\n    ans=0\n    b=k\n    for i in range(n-1,n-k-1,-1):\n        if b==0:\n            break\n        if a[i]==a[i-k]:\n            ans+=1\n        a[i]=0\n        a[i-k]=0\n        b-=1\n            \n    for i in range(n):\n        ans+=a[i]\n    print(ans)  \n        \n            \n            \n            \n            \n            ",
                true
            ],
            [
                "from math import gcd, inf\n\ndef sol():\n    n, k = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    c = k\n    ind = n-1\n    nowe = []\n    ans = 0\n    while c:\n        nowe.append(arr[ind])\n        ind -= 1\n        c -= 1\n    stare = []\n    while ind+1:\n        stare.append(arr[ind])\n        ind -= 1\n    stare.reverse()\n    nowe.reverse()\n    while k:\n        ans += int(stare[-1]/nowe[-1])\n        del stare[-1]\n        del nowe[-1]\n        k -= 1\n    ans += sum(stare)\n    print(ans)\n        \n    \n\n    \n        \n\n\ndef main():\n    for i in range(int(input())):\n        sol()\n\n\nmain()\n    \n        \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,k=map(int,input().split());arr=sorted(list(map(int,input().split())));ans=0;i=n-k-1;j=n-1\n    while k:\n       if arr[i]==arr[j]:ans+=1\n       arr[i]=-1;arr[j]=-1;i-=1;j-=1;k-=1\n    for i in range(n):\n       if arr[i] != -1: ans+=arr[i]\n    print(ans)\n\n        ",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    n, k = list(map(int, input().split()))\n    arr = sorted(list(map(int, input().split())))\n    if k == 0:\n        print(sum(arr))\n        continue\n    top_k = arr[-k:]\n    next_top_k = arr[-2 *k : -k]\n    output = sum(arr[:-2 * k])\n    for i in range(len(top_k)):\n        output += next_top_k[i] // top_k[i]\n    print(output)",
                true
            ],
            [
                "\ndef getint():\n    return [int(i) for i in input().split()]\ndef get():\n    return int(input())\ndef getstr():\n    return [i for i in input().split()]\ndef S():\n    for test in range(int(input())):\n        solve()\nimport math\nimport itertools as it\nimport bisect\nimport time\nimport collections as ct\n\ndef lower_bound(a,x):\n    l=-1\n    r=len(a)\n    while l+1!=r:\n        mid=l+r>>1\n        if a[mid]<x:\n            l=mid\n        else:\n            r=mid\n    return r\ndef upper_bound(a,x):\n    l=-1\n    r=len(a)\n    while l+1!=r:\n        mid=l+r>>1\n        if a[mid]<=x:\n            l=mid\n        else:\n            r=mid\n    return r\ndef solve():\n    n,k=getint()\n    s=n-2*k\n    a=getint()\n    a.sort()\n    ans=0\n    for i in range(s):\n        ans+=a.pop(0)\n    dic={}\n    for i in range(len(a)):\n        dic[a[i]]=dic.get(a[i],0)+1\n    m=0\n    for i,j in dic.items():\n        m=max(m,j)\n    ans+=max(0,(m-(k*2-m))//2)\n   \n    print(ans)\n\n\nS()\n",
                true
            ],
            [
                "from collections import Counter\ndef cal(res):\n    if(res):\n        d = Counter(res)\n        pair = d.most_common(1)[0]\n        half = len(res)/2\n        if(pair[1] > half):\n            return pair[1] - half\n        else:\n            return 0\n        \n    return 0\nfor _ in range(int(input())):\n    n, k = map(int,input().split())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    ans = 1000000000000000\n    take = 2*k\n    yessir = sum(arr)\n    for i in range(take+1):\n        # i, take - i\n        res = []\n        res.extend(arr[:i])\n        res.extend(arr[-1:-(take-i+1):-1])\n        ans = min(ans, yessir - sum(res) + cal(res))\n    print(int(ans))",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    a = list(map(int,input().strip().split()))\n    b = list(map(int,input().strip().split()))\n    b.sort()\n    summie = sum(b[0:a[0]-2*a[1]])\n    for j in range(a[1]):\n        summie = summie + b[a[0]-a[1]-j-1]//b[a[0]-j-1]\n    print(summie)",
                true
            ],
            [
                "#Mamma don't raises quitter.................................................\n#manan is improving, keep hustling manan bhai ;)\nfrom collections import deque as de\nimport math\nimport sys\nfrom math import sqrt as sq\nfrom math import floor as fl\nfrom math import ceil as ce\nfrom sys import stdin, stdout\nimport time\n\nsys.setrecursionlimit(10**7)\nfrom collections import Counter as cnt\nfrom functools import  reduce\n\nfrom itertools import groupby as gb\n#from fractions import Fraction as fr\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom typing import Coroutine\n\ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    \nclass My_stack():\n    def __init__(self):\n        self.data = []\n    def my_push(self, x):\n        return (self.data.append(x))\n    def my_pop(self):\n        return (self.data.pop())\n    def __iter__(self):\n        return iter(self.data)\n    def my_peak(self):\n        return (self.data[-1])\n    def my_contains(self, x):\n        return (self.data.count(x))\n    def my_show_all(self):\n        return (self.data)\n    def isEmpty(self):\n      return len(self.data)==0\n    def len(self):\n        return len(self.data)\n    \n\narrStack = My_stack() \n\nclass graph():\n    def __init__(self):\n        self.graphdict = {}\n    def add_edge(self, node, neighbor):\n        if node not in self.graphdict:\n            self.graphdict[node]=[neighbor]\n        else:\n            self.graphdict[node].append(neighbor)\n    def show_edge(self):\n        for node in self.graphdict:\n            for neighbors in self.graphdict:\n                print(node, neighbors)\n    def show_graph(self):\n        return self.graphdict\n\n    \n\n\n    \n            \n\n#decimal to binary   \ndef decimalToBinary(n): \n    return bin(n).replace(\"0b\", \"\")\n#binary to decimal\ndef binarytodecimal(n):\n    return int(n,2)\n\ndef isPrime(n) : \n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\ndef get_prime_factors(number):\n    prime_factors = []\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number = number / 2\n    for i in range(3, int(math.sqrt(number)) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(int(i))\n            number = number / i\n\n    if number > 2:\n        prime_factors.append(int(number))\n    return prime_factors\n\ndef get_frequency(list):\n    dic={}\n    for ele in list:\n        if ele in dic:\n            dic[ele] += 1\n        else:\n            dic[ele] = 1\n    return dic\n\ndef Log2(x): \n    return (math.log10(x) / \n            math.log10(2)); \n\n \n# Function to get product of digits\ndef getProduct(n):\n    product = 1\n    while (n != 0):\n        product = product * (n % 10)\n        n = n // 10\n    return product\n#fucntion to find regular bracket sequence\ndef regularBracketsequence(str,arrStack):\n    for i in range(len(str)):\n        if str[i] =='(':\n            arrStack.my_push(str[i])\n        else:\n            if arrStack.isEmpty():\n                return False\n            else:\n                arrStack.my_pop()\n    if arrStack.isEmpty():\n        return True\n    else:\n        return False\n\n#function to find LCM of two numbers\ndef lcm(x,y):\n   lcm = (x*y)//math.gcd(x,y)\n   return lcm\n\ndef isPowerOfTwo(n): \n    return (math.ceil(Log2(n)) == math.floor(Log2(n))); \n#to check whether the given sorted sequnce is forming an AP or not....\ndef checkisap(list):\n    d=list[1]-list[0]\n    for i in range(2,len(list)):\n        temp=list[i]-list[i-1]\n        if temp !=d:\n            return False\n    return True\n\n#seive of erathanos\ndef primes_method5(n):\n    out ={}\n    sieve = [True] * (n+1)\n    for p in range(2, n+1):\n        if (sieve[p]):\n            out[p]=1\n            for i in range(p, n+1, p):\n                sieve[i] = False\n    return out\n#fucntion to get unique number to a cell in a matrix\ndef id(i, j, col): #one based indexing and columnwise numeration\n    ans= (i-1)*col\n    ans+=j\n    return ans\n\n#function to get the sum of digits\ndef getSum(n): \n      \n    strr = str(n)\n    list_of_number = list(map(int, strr.strip()))\n    return sum(list_of_number)\ndef checkperfectsquare(n):\n    if (ce(sq(n)) == fl(sq(n))):\n        return True\n    else:\n        return False\n#this used for selecting r objects from n ojects\ndef combinatrics(n,r):\n    num=n\n    deno=n-r\n    pr=1\n    for i in range(num,deno,-1):\n        pr*=i\n    an=1\n    for i in range(1,r+1):\n        an*=i\n    ans=pr//an\n    return ans\n#ceil  function gives wrong answer after 10^17 so i have to create my own :)\n# because i don't want to doubt on my solution of 900-1000 problem set.\ndef ceildiv(x,y): \n    return (x+y-1)//y \n  \ndef di():return map(int, input().split())\ndef ii():return int(input())\ndef li():return list(map(int, input().split()))\ndef si():return list(map(str, input()))\ndef indict():\n    dic = {}\n    for index, value in enumerate(input().split()):\n        dic[int(value)] = int(index)\n    return dic\ndef frqdict(): \n    # by default it is for integer input. :)\n    dic={}\n    for index, value in enumerate(input()):\n        if value not in dic:\n            dic[value] =1\n        else:\n            dic[value] +=1\n    return dic\n\n#sys.stdin = open('input.txt', 'r')\n#sys.stdout = open('output.txt', 'w')\n#practice like your never won\n#perform like you never lost\nt=ii()\nwhile t:\n    t-=1\n    n,k=di()\n    a=sorted(li(), reverse=True)\n    if k==0:\n        print(sum(a))\n    else:\n        score=0\n        for i in range(k):\n            temp=a[i+k]//a[i]\n            score+=temp\n        score+=sum(a[2*k:])\n        print(score)\n            \n\n\n        ",
                true
            ],
            [
                "\nfrom math import gcd\nfor _ in range(int(input())):\n    n,k=map(int, input().split())\n    arr=list(map(int, input().split()))\n    if k==0:\n        print(sum(arr))\n        continue\n    arr.sort()\n    arr1=arr[-2*k:-k]\n    arr2=arr[-k:]\n    arr3=arr[:-2*k]\n    ans=0\n    for _ in range(k):\n        ans+=arr1.pop()//arr2.pop()\n    ans+=sum(arr3)\n    print(ans)\n",
                true
            ],
            [
                "#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"6\n# 6 3\n# 1 1 2 2 3 3\n# 7 3\n# 1 1 1 2 1 3 1\n# 5 1\n# 5 5 5 5 5\n# 4 2\n# 1 3 3 7\n# 2 0\n# 4 2\n# 9 2\n# 1 10 10 1 10 2 7 10 3\n\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\ndef solve(N, K, A):\n    A.sort()\n    score = sum(A[:N-2*K])\n    if K:\n        B = A[N-2*K:]\n        counter = collections.Counter(B)\n        b, n = counter.most_common(1)[0]\n        if n > K:\n            score += (n-K)\n\n    return score\n\nT0 = int(input())\nfor _ in range(T0):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(solve(N, K, A))\n",
                true
            ],
            [
                "t = int(input())\nfor l in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    s = 0\n    a.sort()\n    for i in range(n - 2 * k):\n        s =s+ a[i]\n    for i in range(n - 2 * k, n - k):\n        s =s+ a[i] // a[i + k]\n\n    print(s)",
                true
            ],
            [
                "\nimport sys, collections, math, bisect, heapq, random, functools,io,os,copy\ninput = sys.stdin.readline\nout = sys.stdout.flush\ndef rep():\n    a = list(map(int,input().split()))\n    return a\n\ndef sep():\n    a = list(input().split())\n    return a\n\n\nclass UnionFind:\n    def __init__(self, x) -> None:\n        self.uf = [-1] * x\n\n    def find(self, x):\n        r = x\n        while self.uf[x] >= 0:\n            x = self.uf[x]\n\n        while r != x:\n            self.uf[r], r = x, self.uf[r]\n        return x\n\n    def union(self, x, y):\n        ux, uy = self.find(x), self.find(y)\n        if ux == uy:\n            return\n        if self.uf[ux] >= self.uf[uy]:\n            self.uf[uy] += self.uf[ux]\n            self.uf[ux] = uy\n        else:\n            self.uf[ux] += self.uf[uy]\n            self.uf[uy] = ux\n        return\n\n    def __print__(self):\n        return self.uf\n\n\ndef spfa(x,g,n):\n    dis = [float('inf') for i in range(n)]\n    dis[x] = 0\n    state = [False for i in range(n)]\n    state[x] = True\n    queue = collections.deque()\n    queue.append(x)\n    while queue:\n        cur = queue.popleft()\n        state[cur] = False\n        for next_ in g[cur]:\n            if dis[next_] > dis[cur] + 1:\n                dis[next_] = dis[cur] + 1\n                if state[next_] == False:\n                    state[next_] = True\n                    queue.append(next_)\n    return dis\n\n\n\n\n\ndef solve():\n    n,k = map(int,input().split())\n    a = rep()\n    a.sort()\n    left = n - 2 * k\n    ans = sum(a[:left])\n\n    l = left\n    while l < left + k:\n        ans += a[l] // a[l + k]\n        l += 1\n    print(ans)\n\n\n\nif __name__ == '__main__':\n    for i in range(int(input())):\n        solve()",
                true
            ],
            [
                "from sys import stdin,stdout,setrecursionlimit\nfrom math import gcd,sqrt,factorial,pi,inf\nfrom collections import deque,defaultdict\nfrom bisect import bisect,bisect_left\nfrom time import time\nfrom itertools import permutations as per\nfrom heapq import heapify,heappush,heappop,heappushpop\ninput=stdin.readline\nR=lambda:map(int,input().split())\nI=lambda:int(input())\nS=lambda:input().rstrip('\\r\\n')\nL=lambda:list(R())\nP=lambda x:stdout.write(str(x)+'\\n')\nlcm=lambda x,y:(x*y)//gcd(x,y)\nnCr=lambda x,y:(f[x]*inv((f[y]*f[x-y])%N))%N\ninv=lambda x:pow(x,N-2,N)\nsumx=lambda x:(x**2+x)//2\nN=10**9+7\n\nfor _ in range(I()):\n    n,k=R()\n    a=sorted(R())\n    ans=sum(a[:n-2*k])\n    for i in range(k):\n        ans+=a[n-k-i-1]//a[-1-i]\n    print(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "import collections\nt=int(input())\nfor _ in range(t):\n    [n,k]=[int(i) for i in input().split()]\n    x=[int(i) for i in input().split()]\n    x.sort(reverse=True)\n    freq=collections.Counter(x[0:2*k])\n    flag=True\n    sm=0\n    for (key,value) in freq.items():\n        if value>k:\n            sm+=value-k\n    sm+=sum(x[2*k:])\n    print(sm)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, k = [int(i) for i in input().split()]\n    lst = [int(i) for i in input().split()]\n    lst.sort()\n    if k == 0:\n        print(sum(lst))\n        continue\n    div = lst[-k:]\n    lst = lst[:-k]\n    d = lst[-k:]\n    lst = lst[:-k]\n    cnt = sum(lst) + sum([x//y for x,y in zip(d,div)])\n    print(cnt)\n",
                true
            ],
            [
                "t= int(input())\nfor k in range(0,t):\n    n,k = list(map(int,input().strip().split()))[:2]\n    a = list(map(int,input().strip().split()))[:n]\n    sum1 = 0\n    sum2 = 0\n    a1={}\n\n    a.sort()\n    sum1= sum(a[0:n-2*k])\n    a=a[n-2*k:]\n    n=2*k\n    for i in range(0, n):\n        g= a[i]\n        if a1.get(g):\n            a1[g]+=1\n        else:\n            a1[g]=1\n    len1=len(a)\n    for k,v in a1.items():\n        if(v==1):\n            sum2+=0\n        else:\n            if(v>len1/2):\n                sum2+=int((v-len1/2))\n    print(sum2+sum1)\n",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    l=list(map(int,input().split()))\n    l.sort(reverse=True)\n    c=k\n    j=0\n    s=0\n    for i in range(k,n):\n        if c==0:\n            break\n        s+=l[i]//l[j]\n        l[i],l[j]=0,0\n        j+=1\n        c=c-1\n    print(s+sum(l))    \n        \n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    li=list(map(int,input().split()))\n    li.sort()\n    ans=0\n    # print(li[:n-2*k])\n    c=0\n    for i in range(n-1,0,-1):\n        # print(c,k)\n        if c==k:\n            # print(\"santhosh\")\n            break\n        ans+=li[i-k]//li[i]\n        c+=1\n    # print(c,ans)\n    for i in range(n-2*k):\n        ans+=li[i]\n    print(ans)",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nMOD = 998244353\n\ndef query(a, b, c):\n    print(\"! %d %d %d\" %(a+1, b+1, c+1))\n    stdout.flush()\n    return inp()\n\ndef my_main():\n    kase = inp()\n    pans = []\n    for _ in range(kase):\n        n, kk = inp()\n        da = inp(True)\n        da.sort()\n        ans = sum(da[:n-2*kk])\n        da = da[n-2*kk:]\n        if da:\n            ct = Counter(da)\n            mxk = 0\n            for k, v in ct.items():\n                if not mxk or v > ct[mxk]:\n                    mxk = k\n            if ct[mxk]> kk:\n                ans += ct[mxk] - kk\n\n        pans.append(str(ans))\n\n    print('\\n'.join(pans))\n\n\nmy_main()\n",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    A = sorted([int(a) for a in input().split()])\n    X = []\n    for _ in range(K):\n        X.append(A.pop())\n    Y = []\n    for _ in range(K):\n        Y.append(A.pop())\n    ans = 0\n    for i in range(K):\n        ans += Y[i] // X[i]\n    ans += sum(A)\n    print(ans)\n\n",
                true
            ],
            [
                "from collections import Counter\nfrom math import floor\n\nt = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = 0\n    a.sort()\n    for i in range(n - 2 * k):\n        s += a[i]\n\n    for j in range(n - k, n):\n        s += floor(a[j - k]/a[j])\n    print(s)\n\n\n",
                true
            ],
            [
                "t = int(input())\n\nret = []\nfrom collections import deque\nfrom itertools import groupby\nfor ii in range(t):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    a.sort(reverse=True)\n    A = a[:k]\n    B = a[k:2*k]\n    C = a[2*k:]\n    LA = [len(list(group)) for key, group in groupby(A)]\n    LB = [len(list(group)) for key, group in groupby(B)]\n    score = 0\n    if(a[k-1]==a[k]):\n        try:\n            if(LA[-1]+LB[0]>k):\n                score += LA[-1]+LB[0]-k\n        except:\n            pass\n    score += sum(C)\n    \n    ret.append(score)\n\nprint(*ret,sep=\"\\n\")\n",
                true
            ],
            [
                "import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\nimport math\n\nt = int(inpu())\nfor _ in range(t):\n    n, k = map(int, inpu().split())\n    a = list(map(int, inpu().split()))\n    a.sort()\n    score = sum(a[:n - 2 * k])\n    left = a[- 2 * k:]\n    for i in range(k):\n        score += left[i]//left[i + k]\n    print(score)\n",
                true
            ],
            [
                "from sys import stdin\nfrom collections import Counter\n\n\ndef read_int():\n    return int(stdin.readline())\n\n\ndef read_ints():\n    return map(int, stdin.readline().split(' '))\n\n\nt = read_int()\nfor case_num in range(t):\n    n, k = read_ints()\n    a = list(read_ints())\n    a.sort()\n    ans = sum(a[:n - 2 * k])\n    for i in range(n - 2 * k, n - k):\n        if a[i] == a[i + k]:\n            ans += 1\n\n    print(ans)\n",
                true
            ],
            [
                "q=lambda:map(int,input().split())\nfor _ in range(int(input())):n,k=q();a=sorted(q())[::-1];print(k-sum(y<x for x,y in zip(a[:k],a[k:2*k]))+sum(a[2*k:]))\n",
                true
            ],
            [
                "import math\nfrom collections import defaultdict\nt=int(input())\nfor _ in range(t):\n    n,k=list(map(int,input().strip().split()))\n    x=list(map(int,input().strip().split()))\n    ans=0\n    if(k>0):\n        x.sort(reverse=True)\n        dic = defaultdict(int)\n        for i in range(2*k):\n            dic[x[i]] += 1\n        maxx = max(dic.values())\n        ans += max((2 * maxx - sum(dic.values()))//2, 0)\n    ans+=sum(x[2*k:])\n    print(ans)",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    _, k = [int(j) for j in input().split()]\n    a = [int(_) for _ in input().split()]\n    a.sort()\n    ans = sum(a[:len(a) - 2*k])\n    for i in range(len(a) - 2*k, len(a) - k):\n        ans += 1 if a[i] == a[i + k] else 0\n    print(ans)",
                true
            ],
            [
                "\nfor i in range(int(input())):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    a.sort(reverse=True)\n    s=0\n    for i in range(k):\n        r=int(a[k+i]/a[i])\n        a[i]=0\n        a[k+i]=0\n        s+=r\n    print(sum(a)+s)",
                true
            ],
            [
                "import sys\n\n# sys.setrecursionlimit(200005)\nint1 = lambda x: int(x)-1\npDB = lambda *x: print(*x, end=\"\\n\", file=sys.stderr)\np2D = lambda x: print(*x, sep=\"\\n\", end=\"\\n\\n\", file=sys.stderr)\ndef II(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline().rstrip()\n# dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]\n# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n# inf = 18446744073709551615\ninf = 4294967295\n# md = 10**9+7\nmd = 998244353\n\ndef solve():\n    n, k = LI()\n    aa = LI()\n    aa.sort()\n    bo = []\n    si = []\n    for _ in range(k):\n        bo.append(aa.pop())\n    for _ in range(k):\n        si.append(aa.pop())\n    ans = sum(aa)\n    for b, s in zip(bo, si):\n        ans += s//b\n    print(ans)\n\nfor testcase in range(II()):\n    solve()\n",
                true
            ],
            [
                "from math import floor\nfor test in range(int(input())):\n    n, k = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = sum(arr[:n-2*k])\n    for i in range(k):\n        ans += floor(arr[n-2*k+i]/arr[n-k+i])\n    print (ans)",
                true
            ],
            [
                "t=int(input())\nfor tt in range(t):\n  n,k=map(int,input().split())\n  a=list(map(int, input().split()))\n  a.sort()\n  ans=0\n  for rr in range(n-(2*k)):\n    ans+=a[rr]\n  ss=a[n-(2*k):]\n  y=[]\n  s=1\n  for r in range(1,2*k):\n    if ss[r-1]==ss[r]:\n      s+=1\n    else:\n      y+=[s]\n      s=1\n  y+=[s]\n  y.sort()\n  sum1=0\n  for r in range(len(set(ss))-1):\n    sum1+=y[r]\n  if sum1<y[-1]:\n    ans+=((y[-1]-sum1)//2)\n  print(ans)\n\n\n\n\n",
                true
            ],
            [
                "import math\nfor t in range(int(input())):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    a.sort()\n    ans = sum(a[:(n-2*k)])\n    a.reverse()\n    for i in range(k):\n        ans += a[i+k]//a[i]\n    print(ans)",
                true
            ],
            [
                "def op():\n    n, k = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    b = []\n    a.sort()\n    for i in range(n-2*k, n):\n        b.append(a[i])\n    m = 0\n    for i in b:\n        o = b.count(i)\n        if o>m:\n            m = o\n    score = 0\n    if m>k:\n        score+=m-k\n    for i in range(n-2*k):\n        score+=a[i]\n    print(score)\nfor i in range(int(input())):\n    op()",
                true
            ],
            [
                "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a = sorted(a)\n    cost = sum(a[0:n-2*k]) + sum(map(lambda x: a[x+n-2*k] // a[x+n-k], range(0, k)))\n    print(cost)\n    \nt = int(input())\nfor i in range(t):\n    solve()",
                true
            ],
            [
                "for case in range(int(input())):\n    n, k = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n\n    arr.sort()\n\n    ans = 0\n\n    i = 0\n    j1 = n -2*k\n    j2 = n - k\n\n    for i in range(j1):\n        ans += arr[i]\n\n    for i in range(k):\n        ans += (arr[j1] // arr[j2])\n        j1 += 1\n        j2 += 1\n\n    print(ans)\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n, k = (int(i) for i in input().split())\n    array = sorted((int(i) for i in input().split()), reverse= True)\n    \n    score = 0\n    index = 0\n    for _ in range(k):\n        \n        if index <= n-2:\n            score += (array[index+k] // array[index])\n            index += 1\n        else:\n            break\n        \n    print(score+sum(array[index+k:]))",
                true
            ],
            [
                "for _ in range(eval(input())):\n    n, k =list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    \n    a.sort()\n    \n    ans = sum(a[:n-2*k])\n    \n    m = {}\n    \n    for j in range(n-2*k, n):\n        if a[j] not in m:\n            m[a[j]] = 0\n        m[a[j]]+=1\n    p = 0\n    if len(list(m.values())):\n        t = max(m.values())\n        p += max(t-k, 0)\n    \n    print(ans + p)\n            \n",
                true
            ],
            [
                "# template begins\n#####################################\n \n# import libraries for input/ output handling\n# on generic level\nimport atexit, io, sys, math, heapq, collections\n\n#input handling\n#input of single integer\ndef get_int(): return int(sys.stdin.readline().strip())\n#input of multiple integers\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\n#input of list\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\n#input of string\ndef get_string(): return sys.stdin.readline().strip()\n\n#output handling\n#writing int output\ndef write_int(a): sys.stdout.write(str(a)+\"\\n\")\n#writing String\ndef write_str(a): sys.stdout.write(a+\"\\n\")\n#writing Array\ndef write_list(arr): sys.stdout.write(\" \".join(map(str, arr)) + \"\\n\")\n\n#general functions\n#swap\ndef swap(arr, a, b):\n    arr[a]^=arr[b]\n    arr[b]^=arr[a]\n    arr[a]^=arr[b]\n\n#NumberOfDigits\ndef int_len(a): return math.floor(math.log(a,10))+1\n\n#Powerof2\ndef isPowerOfTwo(x): return x and (not(x & (x-1)))\n\n#Sieve\ndef Sieve(n):\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n    res = []\n    for i in range(2,len(prime)):\n        if (prime[i]):\n            res.append(i)\n    return res\n\n#binarySearch\ndef binarySearch (arr, l, r, x):\n    if r >= l:\n  \n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid-1, x)\n        else:\n            return binarySearch(arr, mid + 1, r, x)\n    else:\n        return -1\ndef search(arr,x): return binarySearch(arr,0,len(arr)-1,x)\n\n#Array to String\ndef toString(A): return''.join(A)\n\n# String to array\ndef toArray(str): return str.split()\n\n#ArraySum\ndef arrSum(Arr):\n    Sum =0\n    for i in range (len(Arr)):\n        Sum+=Arr[i]\n    return Sum\n\ndef computeXOR(n) :\n \n    # Modulus operator are expensive\n    # on most of the computers. n & 3\n    # will be equivalent to n % 4.\n \n    # if n is multiple of 4\n    if n % 4 == 0 :\n        return n\n \n    # If n % 4 gives remainder 1\n    if n % 4 == 1 :\n        return 1\n \n    # If n%4 gives remainder 2\n    if n % 4 == 2 :\n        return n + 1\n \n    # If n%4 gives remainder 3\n    return 0\n \n\ndef find_gcd(x, y):\n     \n    while(y):\n        x, y = y, x % y\n     \n    return x\n         \n    \n\n\n#####################################\n# template ends\n\n# Code begins\n#####################################\n\n\n\n     \n\nN = get_int()\nwhile N >0:\n    n,k = get_ints();\n    Arr = get_list()\n    Arr.sort()\n    score = 0\n    for i in range(0,k):\n        score+=Arr[n-2*k+i]//Arr[n-k+i]\n    for i in range(0,n-2*k):\n        score+=Arr[i]\n\n    print(score)\n\n\n\n    N-=1\n\n\n#####################################\n# Code ends\n\n\n# Creating 2D array sol = [[0 for i in range(N)] for j in range(N)]",
                true
            ],
            [
                "import math\n\n\ndef main():\n    t = int(input())\n    while t > 0:\n        n, k = map(int, input().split())\n        arr = list(map(int, input().split()))\n        arr.sort()\n\n        s = 0\n\n        for i in range(k):\n            e1 = arr[n - i - 1]\n            e2 = arr[n - k - i - 1]\n            # print(\"DIV: \", e2 / e1)\n            s += math.floor(e2 / e1)\n\n        for i in range(n - 2 * k):\n            s += arr[i]\n        print(s)\n\n        t -= 1\n\n\nif __name__ == \"__main__\":\n    main()\n",
                true
            ],
            [
                "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nt = int(input())\n# map(int,input().split())\n# [int(i) for i in input().split()]\nfor _ in range(t):\n    n,k = map(int,input().split())\n    a = sorted([int(i) for i in input().split()])\n    ans = sum(a[:n-2*k])\n    for i in range(n-k,n):\n        ans += a[i-k]//a[i]\n    print(ans)",
                true
            ],
            [
                "for test in range(int(input())):\n    arr=[int(x) for x in input().split()]\n    n,k=arr[0],arr[1]\n    arr=[int(x) for x in input().split()]\n    arr.sort(reverse=True)\n    ans=0\n    for i in range(k):\n        ans+=(arr[i+k]//arr[i])\n    print(ans+sum(arr[2*k:]))    ",
                true
            ],
            [
                "from collections import deque,Counter,defaultdict\nimport math\nimport heapq\ndef solve(n,k,arr):\n    arr.sort()\n    i = n-(2*k)\n    j=i+k\n    ans = 0\n    while j<n:\n        ans+=arr[i]//arr[j]\n        i+=1\n        j+=1\n    for x in range(n-(2*k)):\n        ans+=arr[x]\n    return ans\n\n\nT = int(input())\nfor _ in range(T):\n    n,k = map(int,input().split())\n    arr = list(map(int,input().split()))\n    print(solve(n,k,arr))",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    a = n - 2*k\n    rem = arr[0:a]\n    arr1 = arr[a:]\n    rem2 = []\n    for i in range(k):\n\n        temp = (arr1[i]//arr1[i+k])\n        rem2.append(temp)\n    rem2 += rem\n    print(sum(rem2))",
                true
            ],
            [
                "from collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    n, k = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    arr = sorted(arr)[::-1]\n    if k == 0:\n        print(sum(arr))\n    else:\n        cands = arr[:2*k]\n        ans = sum(arr[2*k:])\n        cnt = Counter(cands)\n        max_freq = max(cnt.values())\n        if max_freq > k:\n            ans += max_freq - k\n    \n        print(ans)",
                true
            ],
            [
                "import sys\nsys.setrecursionlimit(5000001)\n\nfrom collections import *\nfrom math import *\n\nTT=int(input())\nfor i in range(TT):\n    #n=int(input())\n    n,m=map(int,input().split())\n    lst=list(map(int,input().split()))\n    start=n-m\n    summ=0\n    lst.sort()\n    minn=10**18\n    for i in range(n-2*m+1):\n        summ=0\n        for j in range(i):\n            summ+=lst[j]\n        \n        temp=start\n        for j in range(i,i+m):\n            summ+=(lst[j]//lst[temp])\n            temp+=1\n        \n        for j in range(i+m,start):\n            summ+=lst[j]\n        \n        minn=min(minn,summ)\n    print(minn)",
                true
            ],
            [
                "t = int(input())\nfor j in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n - 2 * k):\n        ans += a[i]\n    for i in range(k):\n        ans += a[n - 2 * k + i] // a[n - k + i]\n    print(ans)\n",
                true
            ],
            [
                "for j in range(int(input())):\n    n, k = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    arr.sort()\n    rem = k\n    ans = 0\n    while (rem > 0):\n        ma = max(arr)\n        cnt = arr.count(ma)\n        if (cnt > rem):\n            ans += 1\n            arr.pop()\n            arr.pop()\n        else:\n            ind = arr.index(ma)\n            ans += 0\n            arr.pop(ind - rem)\n            arr.pop()\n        rem -= 1\n    ans += sum(arr)\n    print(ans)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())\n    lst=list(map(int,input().split()))\n    lst.sort()\n    jk=n-2*k\n    lsts=lst[jk:n]\n    sums=0\n    for i in range(k):\n        sums=sums+int(lsts[k-i-1]/lsts[2*k-i-1])\n    sums=sums+sum(lst[:jk])\n    print(sums)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    liczby = list(map(int, input().split()))\n    liczby.sort()\n    wynik = 0\n    for x in range(n-(k+k)):\n        wynik+=liczby[x]\n    \n    if k == 0:\n        print(wynik)\n    else:\n        lista = []\n        themost = 0\n        mostoften = liczby[n-(k+k)]\n        for x in range(n-(k+k), n):\n            if liczby[x] == mostoften:\n                themost+=1\n                if x == n-1:\n                    lista.append(themost)\n            else:\n                lista.append(themost)\n                themost = 1\n                mostoften = liczby[x]\n                if x == n-1:\n                    lista.append(themost)\n        themost = max(lista)\n        if themost > k:\n            temp = (k+k)-themost\n            wynik+=(themost-temp)//2\n        print(wynik)\n",
                true
            ],
            [
                "#     __  __                __    _ __      ______                \n#    / / / /___ ___________/ /_  (_) /_    / ____/___ __________ _\n#   / /_/ / __ `/ ___/ ___/ __ \\/ / __/   / / __/ __ `/ ___/ __ `/\n#  / __  / /_/ / /  (__  ) / / / / /_    / /_/ / /_/ / /  / /_/ / \n# /_/ /_/\\__,_/_/  /____/_/ /_/_/\\__/____\\____/\\__,_/_/   \\__, /  \n#                                  /_____/               /____/   \n\nfrom collections import Counter\nfrom sys import *\nfrom collections import defaultdict as dd\nfrom math import *\n\n# sys.stdin = open('input.txt', 'r')  \n# sys.stdout = open('output.txt', 'w')\n\n#input functions\ndef inp():\n    return int(stdin.readline().strip())\ndef vinp():\n    return map(int,stdin.readline().strip().split())\ndef linp():\n    return list(map(int,stdin.readline().strip().split()))\ndef sinp(n = 1):\n    if n==1:\n        return stdin.readline().strip()\n    elif n==2:\n        return list(stdin.readline().strip())\n    else:\n        return list(stdin.readline().split())\n\n#output function\ndef pr(*x, end = \"\\n\"):\n    print(*x,end = end)\n\n#others\ndef mod(f, val = 1000000007):\n    return f % val\ndef csort(c):\n    sorted(c.items(), key=lambda pair: pair[1], reverse=True)\ndef indc(l,n):\n    c={}\n    for i in range(n):\n        c[l[i]]=c.get(l[i],[])+[i+1]\n    return c\n\nif __name__ ==\"__main__\":\n    cou=inp()\n    for _ in range(cou):\n        n,k = vinp()\n        l = linp()\n        l.sort(reverse=True)\n        # pr(l)\n        s  = sum(l[2*k:])\n        for i in range(k):\n            s+=int(l[k+i]//l[i])\n        pr(s)",
                true
            ],
            [
                "a=int(input())\nfor t in range(a):\n  n,k=map(int,input().split())\n  d=input().split()\n  l=[int(_) for _ in d]\n  f=0\n  l.sort()\n  for t in range(n-2*k):\n    f=f+l[t]\n  for t in range(n-2*k,n-k):\n    f=f+l[t]//l[t+k]\n  print(f)\n",
                true
            ],
            [
                "#import sys\n#sys.stdin = open(\"D/input.txt\", \"r\")\n\nt = int(input())\nfor tt in range(t):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    cost = sum(a[0:n-2*k]) + sum(map(lambda x: a[x+n-2*k] // a[x+n-k], range(0, k)))\n    print(cost)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())\n    arr=list(map(int,input().split()))\n    arr.sort()\n    i,j=n-k-1,n-1\n    score=0\n    while k>0:\n        score+=arr[i]//arr[j]\n        i-=1\n        j-=1\n        k-=1\n    score+=sum(arr[:i+1])\n    print(score)\n    ",
                true
            ],
            [
                "import math\n\nfor i in range(int(input())):\n    n,k=list(map(int,input().split()))\n    l=list(map(int,input().split()))\n    for a in range(n-1):\n        for j in range(n-a-1):\n            if l[j]>l[j+1]:\n                l[j],l[j+1]=l[j+1],l[j]\n    for j in range(k):\n        l[-k-1]=math.floor(l[-k-1]/l[-1])\n        l.pop(-1)\n    print(sum(l))",
                true
            ],
            [
                "for _ in range(int(input())):\n    dic = {}\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    score = sum(arr[:(n - 2 * k)])\n    dic = {}\n    for el in arr[(n - 2 * k):]:\n        if el not in dic:\n            dic[el] = 1\n        else:\n            dic[el] += 1\n    keys = list(dic.keys())\n    tmax = 0\n    psum = 0\n    for k in range(len(keys)):\n        if dic[keys[k]] > tmax:\n            tmax = dic[keys[k]]\n        psum += dic[keys[k]]\n\n    if (2 * tmax) > psum: score += (2 * tmax - psum) // 2\n    print(score)\n",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby\nfrom copy import deepcopy\nMOD = 10**9+7\nINF = float('inf')\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n    n, k = rl()\n    A = rl()\n    A.sort()\n    res = 0\n    for i in range(k):\n        res += A[n-i-1-k] // A[n-i-1]\n    res += sum(A[:n-2*k])\n\n    print(res)",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()))\n    a.sort()\n    ans=0\n    k1=n-k*2\n    for i in range(k1,k1+k):\n        ans+=a[i]//a[i+k]\n    print(ans+sum(a[:k1]))\n",
                true
            ],
            [
                "\ndef solve(li, n, k):\n    li.sort()\n    score = sum(li[:n-2*k])\n    for i in range(n-2*k, n-k):\n        score += li[i]//li[i+k]\n    return score\n\nfor case in range(int(input())):\n    n, k = map(int, input().split())\n    li = list(map(int, input().split()))\n    ans = solve(li, n, k)\n    print(ans)",
                true
            ],
            [
                "#from itertools import *\n#from math import *\n#from bisect import *\n#from collections import *\n#from random import *\n#from decimal import *\n#from heapq import *\n#from itertools import *            # Things Change ....remember :)\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return map(int,input().split())\nt=inp()\nwhile(t):\n    t-=1\n    n,k=ma()\n    a=lis()\n    a.sort()\n    score=0\n    extra=n-(2*k)\n    score+=sum(a[:extra])\n    a=a[extra:]\n    z=len(a)//2\n    for i in range(z):\n        score+=(a[i]//a[i+z])\n    print(score)\n",
                true
            ],
            [
                "import math\nfor _ in range(int(input())):\n    n,k = map(int,input().split())\n    l = list(map(int,input().split()))\n    l = sorted(l,reverse = True)\n    score,mi = 0,0\n    for i in range(k):\n        score += math.floor(l[k+i]/l[i])\n    score += sum(l[2*k:])\n    print(score)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n, k = [int(i) for i in input().split(\" \")]\n    arr = sorted([int(i) for i in input().split(\" \")])\n    ans = 0\n    l, h = n-k-1, n-1\n    while k:\n        ans += arr[l] // arr[h]\n        l -= 1\n        h -= 1\n        k -= 1\n    for i in range(l+1):\n        ans += arr[i]\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor l in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    s = 0\n    a.sort()\n    for i in range(n - 2 * k):\n        s += a[i]\n    for i in range(n - 2 * k, n - k):\n        s += a[i] // a[i + k]\n \n    print(s)",
                true
            ],
            [
                "for i in range(int(input())):\n    n,k=map(int,input().split())\n    l2=list(map(int,input().split()))\n    l2.sort(reverse=True)\n    # print(l2)\n    c=sum(l2[2*k:])\n    # print(l2[2*k:],c)\n    l=l2[:2*k]\n    i=0\n    # print(c,l)\n    c2=0\n    while i<k:\n        if(l[i]==l[i+k]):\n            c2+=1\n        i+=1\n    print(c+c2)",
                true
            ],
            [
                "for i in range(int(input())):\n    n,k=map(int,input().split())\n    a=[int(j) for j in input().split()]\n    a.sort(reverse=True)\n    ans=0\n    for j in range(n):\n        if j>=2*k:\n            ans+=a[j]\n        elif j<k:\n            ans+=a[j+k]//a[j]\n    print(ans)",
                true
            ],
            [
                "# by the authority of GOD     author: Kritarth Sharma #\nimport sys\nfrom collections import defaultdict,deque,Counter\nfrom bisect import bisect_left\nimport math\ninput=sys.stdin.readline\ndef inp():\n    l=list(map(int,input().split()))\n    return l\n\nfor _ in range(int(input())):\n        n,k=inp()\n        l=inp()\n        l.sort(reverse=True)\n        i=0\n        s=0\n        ss=l[:2*k]\n        c=Counter(ss)\n        m=0\n        val=0\n        for i in c:\n            if c[i]>m:\n                m=c[i]\n                val=i\n        if 2*m >2*k:\n            x=m-(2*k - m)\n            s+=x//2\n        s+=sum(l[2*k:])\n        print(s)\n        \n\n\n        \n            \n            \n\n\n\n        \n\n\n\n\n\n            \n        \n",
                true
            ],
            [
                "t = int(input())\nfrom math import *\nfor p in range(t):\n    n,k = map(int, input().split())\n    lis = list(map(int, input().split()))\n    lis.sort()\n    sus = 0\n    sussy = sum(lis)\n    lis = lis[n-2*k:]\n\n    for i in range(1,k+1):\n        a,b = lis[k-i], lis[2*k-i]\n        sussy -= a+b\n        sussy += a//b\n    print(sussy)\n",
                true
            ],
            [
                "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\nfor __ in range(int(input())):\n  n, k = map(int, input().split())\n  arr = list(sorted(map(int, input().split())))\n  big = arr[n-k:]\n  small = arr[:n-k]\n  answer = small[:len(small)-len(big)]\n  # print(answer)\n  for x, y in zip(big, small[len(small)-len(big):]):\n    # print(x, y)\n    if y == x:\n      answer.append(1)\n  print(sum(answer))",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    array = map(int, input().split())\n    array = sorted(array, reverse=True)\n    score = 0\n    for j in range(k):\n        score += array[j + k] // array[j]\n    score += sum(array[2 * k:])\n    print(score)",
                true
            ],
            [
                "import collections\nnn = int(input())\nfor i in range(nn):\n    le,k = map(int,input().split())\n    lst = list(map(int,input().split()))\n    lst = sorted(lst)\n    x = lst[len(lst)-2*k:]\n    ans=sum(lst[:len(lst)-2*k])\n    x = collections.Counter(x)\n    x = sorted(x.items(),key=lambda x:x[1],reverse=True)\n    if len(x) == 0:\n        print(ans)\n    else:\n        q = x[0][1]\n        if q<=k:\n            print(ans)\n        else:\n            other = 2*k-q\n            print(ans+(q-other)//2)",
                true
            ],
            [
                "def sol():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans2 = 0\n    c = n - 1\n    for i in range(k):\n        ans2 += a[c - 1] // a[c]\n        c -= 2\n    s = sum(a[:n - 2 * k])\n    l = n-2*k\n    r = n-1\n    ans = 0\n    p = {}\n    for i in range(l, r+1):\n        if a[i] not in p.keys():\n            p[a[i]]=1\n        else:\n            p[a[i]]+=1\n    f = 0\n    for i, v in p.items():\n        f = max(f, v)\n    print(s + max(2*f-2*k, 0)//2)\n\n\nfor _ in range(int(input())):\n    sol()",
                true
            ],
            [
                "problem_num = int(input())\nfor i in range(problem_num):\n    n,k = input().split()\n    n = int(n);k=int(k)\n    arr = input().split()\n    arr = [int(i) for i in arr]\n    arr.sort()\n    sub_main = arr[:n-2*k]\n    sub_div = arr[n-2*k:]\n    sub_score = 0\n    for j in range(k):\n        sub_score += int(sub_div[j]/sub_div[k+j])\n    score = sum(sub_main) + sub_score\n    print(score)",
                true
            ],
            [
                "import math\n\nt = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n\n    arr = [int(x) for x in input().split()]\n    arr.sort(reverse=True)\n\n    ans = 0\n    for i in range(k):\n        ans += math.floor(arr[i+k]/arr[i])\n\n    for i in range(2*k, n):\n        ans += arr[i]\n\n    print(ans)\n",
                true
            ],
            [
                "import math\n\nt = int(input())\nfor i in range(t):\n    n, k = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    arr.sort()\n    op = sum([math.floor(arr[n - k * 2 + j] / arr[n - k + j]) for j in range(k)])\n    rem = sum(arr[:n - k * 2])\n    score = op + rem\n    print(score)\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou are given an array a[0 \u2026 n - 1] = [a_0, a_1, \u2026, a_{n - 1}] of zeroes and ones only. Note that in this problem, unlike the others, the array indexes are numbered from zero, not from one.\n\nIn one step, the array a is replaced by another array of length n according to the following rules: \n\n  1. First, a new array a^{\u2192 d} is defined as a cyclic shift of the array a to the right by d cells. The elements of this array can be defined as a^{\u2192 d}_i = a_{(i + n - d) mod n}, where (i + n - d) mod n is the remainder of integer division of i + n - d by n. \n\nIt means that the whole array a^{\u2192 d} can be represented as a sequence $$$a^{\u2192 d} = [a_{n - d}, a_{n - d + 1}, \u2026, a_{n - 1}, a_0, a_1, \u2026, a_{n - d - 1}]$$$\n\n  2. Then each element of the array a_i is replaced by a_i  \\&  a^{\u2192 d}_i, where \\& is a logical \"AND\" operator. \n\n\n\nFor example, if a = [0, 0, 1, 1] and d = 1, then a^{\u2192 d} = [1, 0, 0, 1] and the value of a after the first step will be [0  \\&  1, 0  \\&  0, 1  \\&  0, 1  \\&  1], that is [0, 0, 0, 1].\n\nThe process ends when the array stops changing. For a given array a, determine whether it will consist of only zeros at the end of the process. If yes, also find the number of steps the process will take before it finishes.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains two integers: n (1 \u2264 n \u2264 10^6) \u2014 array size and d (1 \u2264 d \u2264 n) \u2014 cyclic shift offset. The second line of the description contains n space-separated integers a_i (0 \u2264 a_i \u2264 1) \u2014 elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the number of steps after which the array will contain only zeros for the first time. If there are still elements equal to 1 in the array after the end of the process, print -1.\n\nExample\n\nInput\n\n\n5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 1\n1 1\n0\n\n\nOutput\n\n\n1\n1\n3\n-1\n0\n\nNote\n\nIn the third sample test case the array will change as follows: \n\n  1. At the beginning a = [1, 1, 0, 1, 0], and a^{\u2192 2} = [1, 0, 1, 1, 0]. Their element-by-element \"AND\" is equal to $$$[1  \\&  1, 1  \\&  0, 0  \\&  1, 1  \\&  1, 0  \\&  0] = [1, 0, 0, 1, 0]$$$ \n  2. Now a = [1, 0, 0, 1, 0], then a^{\u2192 2} = [1, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  1, 0  \\&  0, 0  \\&  1, 1  \\&  0, 0  \\&  0] = [1, 0, 0, 0, 0]$$$ \n  3. And finally, when a = [1, 0, 0, 0, 0] we get a^{\u2192 2} = [0, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  0, 0  \\&  0, 0  \\&  1, 0  \\&  0, 0  \\&  0] = [0, 0, 0, 0, 0]$$$ \n\nThus, the answer is 3 steps.\n\nIn the fourth sample test case, the array will not change as it shifts by 2 to the right, so each element will be calculated as 0  \\&  0 or 1  \\&  1 thus not changing its value. So the answer is -1, the array will never contain only zeros.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "for i in range(int(input())):\n    n, d = map(int, input().split());a = list(map(int, input().split()));q = [];w = [10 ** 9] * n\n    for i in range(n):\n        if a[i] == 0:q.append(i);w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i];i += 1;y = (x + d) % n\n        if w[y] > n:w[y] = w[x] + 1;q.append(y)\n    r = max(w);print(-1 if r > n else r)",
                true
            ],
            [
                "import math\nt = int(input())\nfor _ in range(t):\n    \n    n,d = list(map(int,input().split()))\n    arr = list(map(int,input().split()))\n    \n    g = math.gcd(n,d)\n    gg = 2*n//g\n    ans = 0\n    for i in range(g):\n        j = i\n\n        k = 0\n        longest_run = 0\n        ones = 0\n        while k<gg:\n            if arr[j] == 1:\n                ones+=1\n            else:\n                ones = 0\n            longest_run = max(ones,longest_run)      \n            j = (j+d)%n\n            k+=1\n        \n        ans = max(ans,longest_run)\n    if ans >= n//g:\n        print(-1)\n    else:\n        print(ans)",
                true
            ],
            [
                "from math import gcd\nfrom itertools import repeat\n\ndef line():\n    return map(int, input().split())\n\nt = int(input())\nfor _ in repeat(None, t):\n    n, d = line()\n    a = list(line())\n\n    g = gcd(n, d)\n    p = n // g\n    e = 0\n    for k in range(g):\n        l = 0\n        for i in range(2 * p):\n            v = a[(k + i * d) % n]\n            if v:\n                l += 1\n            else:\n                e = max(e, l)\n                l = 0\n        e = max(e, l)\n    if e == 2 * p:\n        print(-1)\n    else:\n        print(e)\n",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\n#sys.stdin=open('input.txt','r')\nfor _ in range(int(input())):\n    n,d=map(int,input().split())\n    ar=list(map(int,input().split()))\n    se=set({})\n    li=[]\n    for i in range(n):\n        if(not(i in se)):\n            li.append([ar[i]])\n            se.add(i)\n            j=(i+d)%n\n            while(j!=i):\n                li[-1].append(ar[j])\n                se.add(j)\n                j=(j+d)%n\n            li[-1]=li[-1]+li[-1]\n    ans=0\n    flag=True\n    for i in li:\n        le=len(i)\n        count=i.count(1)\n        if(count==le):\n            flag=False\n            break\n        count=0\n        for j in i:\n            if(j==1):\n                count+=1\n            else:\n                count=0\n            ans=max(ans,count)\n    if(flag):\n        print(ans)\n    else:\n        print(-1)",
                true
            ],
            [
                "from sys import stdin,stdout\nfrom math import gcd,sqrt,factorial,pi,inf\nfrom collections import deque,defaultdict\nfrom bisect import bisect,bisect_left\nfrom time import time\nfrom itertools import permutations as per\nfrom heapq import heapify,heappush,heappop,heappushpop\ninput=stdin.readline\nR=lambda:map(int,input().split())\nI=lambda:int(input())\nS=lambda:input().rstrip('\\r\\n')\nL=lambda:list(R())\nP=lambda x:stdout.write(str(x)+'\\n')\nlcm=lambda x,y:(x*y)//gcd(x,y)\nnCr=lambda x,y:(f[x]*inv((f[y]*f[x-y])%N))%N\ninv=lambda x:pow(x,N-2,N)\nsm=lambda x:(x**2+x)//2\nN=10**9+7\n\nfor _ in range(I()):\n    n,k=R()\n    a=L()\n    flg=False\n    ans=0\n    for i in range(n):\n        if a[i]==-1:continue\n        flg=True\n        j=i\n        v=[]\n        while a[j%n]!=-1:\n            v+=a[j%n],\n            if not a[j%n]:flg=False\n            a[j%n]=-1\n            j+=k\n        if flg:break\n        p=v.index(0)\n        m=0\n        ln=len(v)\n        #print(v)\n        while v[p%ln]!=-1:\n            if v[p%ln]:\n                m+=1\n                ans=max(ans,m)\n            else:m=0\n            v[p%ln]=-1\n            p+=1\n    print(-1 if flg else ans)",
                true
            ],
            [
                "from math import gcd\n\nt = int(input())\n\nfor _ in range(t):\n    n, d = map(int, input().split())\n\n    a = [int(x) for x in input().split()]\n\n    g = gcd(n, d)\n\n    ands = [1] * g\n\n    for i in range(n):\n        ands[i % g] &= a[i]\n\n    if 1 in ands:\n        print(-1)\n        continue\n\n    most = 0\n\n    for k in range(g):\n        curr = k\n        last0 = -1\n\n        i = 0\n\n        steps = {}\n        seen = False\n\n        while not curr in steps:\n            if seen and curr == k and a[curr] == 0 and len(steps) == 0:\n                break\n            if a[curr] == 0:\n                last0 = i\n            else:\n                if last0 != -1:\n                    steps[curr] = i - last0\n\n            curr += d\n            curr %= n\n            seen = True\n\n            i += 1\n\n        for _, v in steps.items():\n            most = max(most, v)\n    print(most)\n",
                true
            ],
            [
                "def find(x):\n    if par[x] ==x:\n        return par[x]\n    par[x] =find(par[x])\n    return par[x]\n\ndef union(x,y):\n    px =find(x)\n    py =find(y)\n    if px !=py:\n        if count[px] >count[py]:\n            px,py = py,px\n        par[px] =par[py]\n        count[py] +=count[px]\n\nfor _ in range(int(input())):\n    n,d=map(int,input().split())\n    m=n\n    arr=list(map(int,input().split()))\n    if max(arr) ==0:\n        print(0)\n        continue\n    vis=[False for i in range(n+1)]\n    par =[i for i in range(n)]\n    count =[0 for i in range(n)]\n    for i in range(n):\n        if arr[i] ==1:\n            vis[i] =True\n    flag =0\n    for i in range(n):\n        if vis[i] ==True and vis[(i-d) %m] ==True:\n            if find(i) ==find((i-d) %m):\n                flag =-1\n                break\n            union(i, (i-d) %m)\n    if flag ==-1:\n        print(-1)\n        continue\n    for i in range(n):\n        par[i] =find(i)\n    d={}\n    for i in range(n):\n        if par[i] in d:\n            d[par[i]] +=1\n        else:\n            d[par[i]] =1\n    maxi =0\n    for i in d:\n        maxi =max (maxi, d[i])\n    print(maxi)",
                true
            ],
            [
                "import sys#, math\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\nmod = 10**9 + 7\n#mod = 998244353\ninput = lambda: sys.stdin.readline().rstrip()\ndef li(): return list(map(int, input().split()))\n\nT = int(input())\nfor _ in range(T):\n    N, D = li()\n    A = li()\n    x = 0\n    lst = [0]\n    se = set([0])\n    while True:\n        x += D\n        x %= N\n        if x in se:\n            break\n        lst.append(x)\n        se.add(x)\n    \n    ans = 0\n    seen = set()\n    for i in range(N):\n        if i in seen:\n            continue\n        cnt = 0\n        seen.add(i)\n        for j in range(len(lst) * 2):\n            a = (lst[j % len(lst)] + i) % N\n            seen.add(a)\n            if A[a] == 1:\n                cnt += 1\n                ans = max(ans, cnt)\n            else:\n                cnt = 0\n    if ans > len(lst):\n        ans = -1\n    print(ans)\n\n\n\n",
                true
            ],
            [
                "'''\nF. Array Stabilization (AND version)\n'''\n\ndef solve_orig(N, D, nums):\n    seen = [False]*N\n    res = 0\n    for i in range(N):\n        if seen[i]: continue\n        seen[i] = True\n        first0 = 0 if nums[i]==0 else -1 # cycle idx of first 0 since i\n        last1 = 0 if nums[i]==1 else -1  # cycle idx of start of last 1-block\n        mx = 0                           # max steps from any 1 to the next 0 in this cycle\n        j, ln = i, 0                     # cur idx, cur cycle len\n        while True:\n            j = (j+D) % N\n            seen[j] = True\n            ln += 1\n            if nums[j]==1:\n                if last1 < 0: \n                    last1 = ln\n            else:\n                if first0 == -1: first0 = ln\n                if last1 != -1: \n                    mx = max(mx, ln-last1)\n                    last1 = -1\n            if j==i: break               # complete cycle\n        \n        if last1 != -1:\n            if first0 == -1: return -1   # cycle is all 1s\n            mx = max(mx, (first0-last1+ln) % ln)\n        \n        res = max(res, mx)\n    \n    return res\n\n\ndef solve(N, D, nums):\n    seen = [False]*N\n    res = 0              # max 1-block over all cycles\n    for i in range(N):\n        if seen[i]: continue\n        orig = i         # orig start idx\n        first = -1       # sz of first 1-block\n        cnt = 0          # sz of current block\n        has_zero = False\n        key = -1\n        while True:\n            i = (i+D) % N\n            seen[i] = True\n            if nums[i] != key and key != -1:\n                if key == 1: res = max(res, cnt)\n                if first < 0: first = cnt if key==1 else 0\n                cnt = 0\n            key = nums[i]\n            cnt += 1\n            if key==0: has_zero = True\n            if i==orig: break\n        if key == 1: res = max(res, cnt + first)  \n        if not has_zero: return -1\n\n    return res\n \ndef main():\n    from sys import stdin\n    \n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        N, D = map(int, stdin.readline().strip().split())\n        nums = list(map(int, stdin.readline().strip().split()))\n        out = solve(N, D, nums)\n        print(out)\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "#!/usr/bin/env python3\nimport sys\nimport getpass  # not available on codechef\nimport math, random\nimport functools, itertools, collections, heapq, bisect\nfrom collections import Counter, defaultdict, deque\ninput = sys.stdin.readline  # to read input quickly\n\n# available on Google, AtCoder Python3, not available on Codeforces\n# import numpy as np\n# import scipy\n\nM9 = 10**9 + 7  # 998244353\nyes, no = \"YES\", \"NO\"\n# d4 = [(1,0),(0,1),(-1,0),(0,-1)]\n# d8 = [(1,0),(1,1),(0,1),(-1,1),(-1,0),(-1,-1),(0,-1),(1,-1)]\n# d6 = [(2,0),(1,1),(-1,1),(-2,0),(-1,-1),(1,-1)]  # hexagonal layout\nMAXINT = sys.maxsize\n\n# if testing locally, print to terminal with a different color\nOFFLINE_TEST = getpass.getuser() == \"hkmac\"\n# OFFLINE_TEST = False  # codechef does not allow getpass\ndef log(*args):\n    if OFFLINE_TEST:\n        print('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n\ndef solve(*args):\n    # screen input\n    if OFFLINE_TEST:\n        log(\"----- solving ------\")\n        log(*args)\n        log(\"----- ------- ------\")\n    return solve_(*args)\n\ndef read_matrix(rows):\n    return [list(map(int,input().split())) for _ in range(rows)]\n\ndef read_strings(rows):\n    return [input().strip() for _ in range(rows)]\n\ndef minus_one(arr):\n    return [x-1 for x in arr]\n\ndef minus_one_matrix(mrr):\n    return [[x-1 for x in row] for row in mrr]\n\n# ---------------------------- template ends here ----------------------------\n\n\ndef solve_(arr, d):\n    n = len(arr)\n    sumarr = sum(arr)\n    if sumarr == 0:\n        return 0\n    if sumarr == n:\n        return -1\n\n    # your solution here\n    maxres = 0\n\n    visited = set()\n    for i,x in enumerate(arr):\n        if i in visited:\n            continue\n        flag = True\n        brr = [x]\n        cur = i\n        nex = (cur+d)%n\n        visited.add(cur)\n        while nex not in visited:\n            cur = nex\n            brr.append(arr[cur])\n            visited.add(cur)\n            nex = (cur+d)%n\n\n        log(brr)\n\n        brr = brr+brr\n        curcnt = 0\n        for x in brr:\n            if x == 0:\n                flag = False\n                curcnt = 0\n            else:\n                curcnt += 1\n                maxres = max(maxres, curcnt)\n        if flag:\n            return -1\n\n    return maxres\n\n\n\n\n\n\n\n    return \"\"\n\n\n# for case_num in [0]:  # no loop over test case\n# for case_num in range(100):  # if the number of test cases is specified\nfor case_num in range(int(input())):\n\n    # read line as an integer\n    # k = int(input())\n\n    # read line as a string\n    # srr = input().strip()\n\n    # read one line and parse each word as a string\n    # lst = input().split()\n\n    # read one line and parse each word as an integer\n    _, d = list(map(int,input().split()))\n    arr = list(map(int,input().split()))\n    # lst = minus_one(lst)\n\n    # read multiple rows\n    # arr = read_strings(k)  # and return as a list of str\n    # mrr = read_matrix(k)  # and return as a list of list of int\n    # mrr = minus_one_matrix(mrr)\n\n    res = solve(arr, d)  # include input here\n\n    # print length if applicable\n    # print(len(res))\n\n    # parse result\n    # res = \" \".join(str(x) for x in res)\n    # res = \"\\n\".join(str(x) for x in res)\n    # res = \"\\n\".join(\" \".join(str(x) for x in row) for row in res)\n\n    # print result\n    # print(\"Case #{}: {}\".format(case_num+1, res))   # Google and Facebook - case number required\n\n    print(res)\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n,d=map(int,input().split())\n    a=list(map(int,input().split()))\n    one=a.count(1)\n    if one==n:\n        print(-1)\n        continue\n    if one==0:\n        print(0)\n        continue\n    mx=0\n    vis={}\n    for i in range(n):\n        if a[i]==1:\n            continue\n        j=(i+d)%n\n        vis[i]=True\n        curr=0\n        while True:\n            if a[j]==0:\n                break\n            vis[j]=True\n            j=(j+d)%n\n            curr+=1\n        mx=max(mx,curr)\n    if mx==0 or len(vis)!=n:\n        print(-1)\n    else:\n        print(mx)",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\n\nfor i in range(int(input())):\n    n, d = map(int, input().split())\n    *a, = map(int, input().split())\n    q = []\n    w = [int(1e9)]*n\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i]\n        i += 1\n        y = (x + d) % n\n        if w[y] > n:\n            w[y] = w[x] + 1\n            q.append(y)\n    #print(w)\n    r = max(w)\n    if r > n:\n        print(-1)\n    else:\n        print(r)",
                true
            ],
            [
                "# Python 3 program to count maximum consecutive\n# 1's in a binary circular array\n\n# Function to return the count of\n# maximum consecutive 1's in a\n# binary circular array\ndef getMaxLength(arr, n):\n    \n\n    # Starting index\n    start = 0\n    \n    # To store the maximum length of the\n    # prefix of the given array with all 1s\n    preCnt = 0\n    while(start < n and arr[start] == 1):\n        preCnt = preCnt + 1\n        start = start + 1\n    \n    # Ending index\n    end = n - 1\n    \n    # To store the maximum length of the\n    # suffix of the given array with all 1s\n    suffCnt = 0\n    while(end >= 0 and arr[end] == 1):\n        suffCnt = suffCnt + 1\n        end = end - 1\n    \n    # The array contains all 1s\n    if(start > end):\n        return n\n    \n    # Find the maximum length subarray\n    # with all 1s from the remaining not\n    # yet traversed subarray\n    midCnt = 0\n    \n    i = start\n\n    # To store the result for middle 1s\n    result = 0\n\n    while(i <= end):\n        if(arr[i] == 1):\n            midCnt = midCnt + 1\n            result = max(result, midCnt)\n        else:\n            midCnt = 0\n        i = i + 1\n    \n    # (preCnt + suffCnt) is the subarray when\n    # the given array is assumed to be circular\n    return max(result, preCnt + suffCnt)\nfor _ in range(int(input())):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    vis=[0]*n\n    i=0\n    m=0\n    f=1\n    while(i<n):\n        j=i\n        new=[]\n        if vis[i]==0:\n            while(vis[j]!=1):\n                new.append(a[j])\n                vis[j]=1\n                j=(j+k)%n\n            if len(new)==new.count(1):\n                f=0\n                break\n            else:\n                m=max(m,getMaxLength(new,len(new)))\n        i+=1\n    if f==1:\n        print(m)\n    else:\n        print(-1)",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n,d=map(int,input().split())\n    l=list(map(int,input().split()))\n    \n    paths=[]\n    d=n-d\n    s=set()\n    for i in range(n):\n        if i in s:\n            continue\n        path=[]\n        path.append(l[i])\n        s.add(i)\n        j=(i+d)%n\n        \n        while j<n and j not in s:\n            path.append(l[j])\n            s.add(j)\n            j=(j+d)%n\n        \n        paths.append(path+path)\n    \n    ans=0\n    for path in paths:\n        i=0\n        n1=len(path)\n        if 0 not in path:\n            ans=-1\n            break\n        while i<n1:\n            if path[i]==0:\n                i+=1\n                continue\n            else:\n                j=i+1\n                while j<n1 and  path[j]==1:\n                    j+=1\n                ans=max(j-i,ans)\n                i=j\n    print(ans)           ",
                true
            ],
            [
                "'''\nF. Array Stabilization (AND version)\n'''\n\nDEBUG = False\n\ndef solve(N, D, nums):\n    seen = [False]*N\n    res = 0\n    for i in range(N):\n        if seen[i]: continue\n        seen[i] = True\n        if DEBUG: print(f'\\nStart cycle from i={i}')\n        first0 = 0 if nums[i]==0 else -1 # cycle idx of first 0 since i\n        last1 = 0 if nums[i]==1 else -1  # cycle idx of start of last 1-block\n        mx = 0                           # max steps from any 1 to the next 0 in this cycle\n        j, cnt = i, 0                    # cur idx, cur cycle idx\n        while True:\n            j = (j+D) % N\n            seen[j] = True\n            cnt += 1\n            if DEBUG: print(f'j={j}: cnt={cnt}, last1={last1}, mx={mx}')\n            if nums[j]==1:\n                if last1 < 0: \n                    last1 = cnt\n            else:\n                if first0 == -1: first0 = cnt\n                if last1 != -1: \n                    mx = max(mx, cnt-last1)\n                    last1 = -1\n            if j==i: break               # complete cycle\n        if DEBUG: print(f'Finish: mx={mx}, last1={last1}, first0={first0}, cnt={cnt}')\n        if last1 != -1:\n            if first0 == -1: return -1   # cycle is all 1s\n            mx = max(mx, (first0-last1+cnt) % cnt)\n        res = max(res, mx)\n    return res\n\n \ndef main():\n    from sys import stdin\n    \n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        N, D = map(int, stdin.readline().strip().split())\n        nums = list(map(int, stdin.readline().strip().split()))\n        # if t != 2: continue\n        out = solve(N, D, nums)\n        print(out)\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "import sys\ntokens = ''.join(sys.stdin.readlines()).split()[::-1]\n\ndef next(): return tokens.pop()\ndef nextInt(): return int(next())\ndef nextFloat(): return float(next())\ndef getIntArray(n): return [nextInt() for _ in range(n)]\ndef getFloatArray(n): return [nextFloat() for _ in range(n)]\ndef getStringArray(n): return [next() for _ in range(n)]\n\n\ntestcase = True\ndef solve(testcase = 1):\n    pass\n    N, D = nextInt(), nextInt()\n    A = getIntArray(N)\n\n    count = 0\n    vis = [False for i in range(N)]\n    for i in range(N):\n        if not vis[i] and not A[i]:\n            j = (i - D) % N\n            temp = 0\n            while A[j] and not vis[j]:\n                vis[j] = True\n                j = (j - D) % N\n                temp += 1\n            count = max(count, temp)\n            vis[i] = True\n    print(count if all(vis) else -1)\n\n\nif testcase is None:\n    testcaseCount = 1\n    while tokens:\n        solve(testcaseCount)\n        testcaseCount += 1\nelse:\n    testcaseCount = nextInt() if testcase else 1\n    for tc in range(testcaseCount):\n        solve(tc + 1)\n    assert not tokens",
                true
            ],
            [
                "from collections import defaultdict, deque, Counter\nfrom heapq import heapify, heappop, heappush\nimport math\nfrom copy import deepcopy\nfrom itertools import combinations, permutations, product, combinations_with_replacement\nfrom bisect import bisect_left, bisect_right\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\ndef getN():\n    return int(input())\ndef getNM():\n    return map(int, input().split())\ndef getList():\n    return list(map(int, input().split()))\ndef getListGraph():\n    return list(map(lambda x:int(x) - 1, input().split()))\ndef getArray(intn):\n    return [int(input()) for i in range(intn)]\n\nmod = 10 ** 9 + 7\nMOD = 998244353\n# sys.setrecursionlimit(1000000)\ninf = float('inf')\neps = 10 ** (-10)\ndy = [0, 1, 0, -1]\ndx = [1, 0, -1, 0]\n\n#############\n# Main Code #\n#############\n\nT = getN()\nfor _ in range(T):\n    N, D = getNM()\n    A = getList()\n    logk = 32\n    doubling = [[-1] * N for _ in range(logk)]\n    for i in range(N):\n        # D\u500b\u5148\u306b\u30d5\u30e9\u30b0\u304c\u3042\u308b\n        if A[i] == 1 and A[(i + D) % N] == 1:\n            doubling[0][i] = (i + D) % N\n        else:\n            doubling[0][i] = -1\n\n    for i in range(1, logk):\n        for j in range(N):\n            # \u98db\u3079\u306a\u3044\n            if doubling[i - 1][j] == -1:\n                doubling[i][j] = -1\n            # \u305d\u308c\u4ee5\u5916\u306f\u30c0\u30d6\u30ea\u30f3\u30b0\n            else:\n                doubling[i][j] = doubling[i - 1][doubling[i - 1][j]]\n\n    ans = -1\n    for i in range(N):\n        if A[i] == 0:\n            continue\n        now = i\n        cnt = 0\n        for j in range(logk - 1, -1, -1):\n            if doubling[j][now] != -1:\n                cnt += 1 << j\n                now = doubling[j][now]\n        ans = max(ans, cnt)\n\n    if ans == 2 ** 32 - 1:\n        print(-1)\n    else:\n        print(ans + 1)",
                true
            ],
            [
                "\nimport sys\nfrom sys import stdin\nfrom collections import deque\n\ntt = int(stdin.readline())\n\nANS = []\n\nfor loop in range(tt):\n\n    n,D = map(int,stdin.readline().split())\n    a = list(map(int,stdin.readline().split()))\n    d = [float(\"inf\")] * n\n\n    q = deque()\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            d[i] = 0\n\n    while q:\n        v = q.popleft()\n\n        nex = (v + D) % n\n        if d[nex] > d[v] + 1:\n            d[nex] = d[v] + 1\n            q.append(nex)\n\n    ans = 0\n    for i in range(n):\n        ans = max(ans , d[i])\n\n    if ans == float(\"inf\"):\n        ANS.append(\"-1\")\n    else:\n        ANS.append(str(ans))\n\n\nprint (\"\\n\".join(ANS))",
                true
            ],
            [
                "import sys#, math\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\nmod = 10**9 + 7\n#mod = 998244353\ninput = lambda: sys.stdin.readline().rstrip()\ndef li(): return list(map(int, input().split()))\n\nT = int(input())\nfor _ in range(T):\n    N, D = li()\n    A = li()\n    if D == N:\n        if 1 in A:\n            print(-1)\n        else:\n            print(0)\n        continue\n    x = 0\n    lst = [0]\n    se = set([0])\n    while True:\n        x += D\n        x %= N\n        if x in se:\n            break\n        lst.append(x)\n        se.add(x)\n    \n    ans = 0\n    seen = set()\n    for i in range(N):\n        if i in seen:\n            continue\n        cnt = 0\n        seen.add(i)\n        for j in range(len(lst) * 2):\n            a = (lst[j % len(lst)] + i) % N\n            seen.add(a)\n            if A[a] == 1:\n                cnt += 1\n                ans = max(ans, cnt)\n            else:\n                cnt = 0\n    if ans > len(lst):\n        ans = -1\n    print(ans)\n\n\n\n",
                true
            ],
            [
                "#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"5\n# 2 1\n# 0 1\n# 3 2\n# 0 1 0\n# 5 2\n# 1 1 0 1 0\n# 4 2\n# 0 1 0 1\n# 1 1\n# 0\n\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\ndef solve(N, D, A):\n    if 1 not in A:\n        return 0\n    n = math.gcd(N, D)\n    l = N // n\n    res = -INF\n    for k in range(n):\n        L = []\n        i = k\n        for _ in range(l):\n            L.append(A[i])\n            i = (i - D) % N\n        if 0 not in L:\n            return -1\n        L2 = L + L\n        i1 = -1\n        m = -INF\n        for i in range(len(L2)):\n            if i1 == -1 and L2[i] == 1:\n                i1 = i\n            elif i1 != -1 and L2[i] == 0:\n                m = max(m, i - i1)\n                i1 = -1\n        res = max(res, m)\n    return res\n\n\nT0 = int(input())\nfor _ in range(T0):\n    N, D = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(solve(N, D, A))",
                true
            ],
            [
                "import sys\nimport math\nimport collections\ndy = [1, 0, -1, 0]\ndx = [0, 1, 0, -1]\n\nr = sys.stdin.readline\n\nfor _ in range(int(r())):\n    N, D = list(map(int, r().split()))\n    L = list(map(int, r().split()))\n    visited = [0]*(N)\n    if sum(L) == 0:\n        print(0)\n        continue\n    g = math.gcd(N, D)\n    flag = 0\n    que = collections.deque()\n\n    for i in range(g):\n        a = 0\n        for j in range(i, N, g):\n            a += L[j]\n            if L[j] == 0:\n                que.append((j, 0))\n                visited[j] = 1\n        if N//g == a:\n            flag = 1\n            break\n    if flag:\n        print(-1)\n        continue\n\n    day = 0\n    while que:\n        now, p = que.popleft()\n        next = now + D\n        if p > day: day = p\n        if next >=N: next -= N\n        if visited[next]: continue\n        visited[next] = 1\n        que.append((next, p+1))\n\n    print(day)\n\n\n",
                true
            ],
            [
                "def ones(arr):\n    if not any(v == 0 for v in arr):\n        return -1\n    zero_i = arr.index(0)\n    arr = arr[zero_i:] + arr[:zero_i] + [0]\n    best, tmp = 0, 0\n    for v in arr:\n        if v:\n            tmp += 1\n        else:\n            best = max(best, tmp)\n            tmp = 0\n    return best\n\n\nfor t in range(int(input())):\n    n, d = tuple(map(int, input().rstrip().split()))\n    arr = tuple(map(int, input().rstrip().split()))\n    best = 0\n    done = [False] * n\n    for i in range(n):\n        if done[i]:\n            continue\n        done[i] = True\n        tmp = [arr[i]]\n        j = (i + d) % n\n        while j != i:\n            tmp.append(arr[j])\n            done[j] = True\n            j = (j + d) % n\n        tmp = ones(tmp)\n        if tmp == -1:\n            best = -1\n            break\n        best = max(best, tmp)\n    print(best)\n",
                true
            ],
            [
                "#!/usr/bin/env pypy3\n\nfrom sys import stdin, stdout\n\ndef input(): return stdin.readline().strip()\ndef read_int_list(): return list(map(int, input().split()))\ndef read_int_tuple(): return tuple(map(int, input().split()))\ndef read_int(): return int(input())\n\nfrom collections import defaultdict\n\n### CODE HERE\n\nclass UnionFind:\n    def __init__(self, N):\n        self.parent = dict()\n        for i in range(N):\n            self.parent[i] = i\n\n    def find(self, a):\n        acopy = a\n        while a != self.parent[a]:\n            a = self.parent[a]\n        while acopy != a:\n            self.parent[acopy], acopy = a, self.parent[acopy]\n        return a\n\n    def join(self, a, b):\n        self.parent[self.find(b)] = self.find(a)\n\ndef time(c):\n    if 0 not in c: return float(\"inf\")\n    c = c + c\n\n    last_0 = None\n    ret = 0\n    for i in range(len(c)):\n        if c[i] == 0:\n            last_0 = i\n        elif last_0 is not None:\n            ret = max(ret, i-last_0)\n\n    return ret\n\ndef expand(seed, L, D, N):\n    ret = []\n    for _ in range(L):\n        ret += [seed]\n        seed += D\n        seed %= N\n    return ret\n\ndef ans(D, A):\n    N = len(A)\n    uf = UnionFind(N)\n\n    for i in range(N):\n        uf.join(i, (i+D) % N)\n\n    seeds = set()\n\n    for i in range(N):\n        seeds.add(uf.find(i))\n\n    class_length = N // len(seeds)\n\n    classes = [expand(seed, class_length, D, N) for seed in seeds]\n    classes = [[A[i] for i in c] for c in classes]\n\n    classes = [time(c) for c in classes]\n    ret = max(classes)\n\n    if ret == float(\"inf\"): ret = -1\n    return ret\n\nfor _ in range(read_int()):\n    _, D = read_int_tuple()\n    A = read_int_list()\n\n    print(ans(D, A))",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,d=map(int,input().split())\n    A=list(map(int,input().split()))\n\n    ANS=[-1]*n\n\n    for i in range(n):\n        if A[i]==0:\n            ANS[i]=0\n            \n            x=(i+d)%n\n            now=1\n            while True:\n                if ANS[x]>0 or A[x]==0:\n                    break\n                else:\n                    ANS[x]=now\n                    now+=1\n                    x=(x+d)%n\n\n    #print(*ANS)\n\n    if -1 in ANS:\n        print(-1)\n    else:\n        print(max(ANS))\n                \n\n    \n        \n\n    \n\n    \n",
                true
            ],
            [
                "Q = int(input())\n\n\ndef main():\n  N, D = map(int,input().split())\n  A = list(map(int,input().split()))\n  ans = 0\n  vis = [False]*N\n  task = []\n  for i in range(N):\n    if vis[i]: continue\n    tmp = [A[i]]\n    vis[i] = True\n    j = (i + D) % N\n    while j != i:\n      tmp.append(A[j])\n      vis[j] = True\n      j = (j + D) % N\n    task.append(tmp)\n  #print(task)\n  for tmp in task:\n    n = len(tmp)\n    zeros = []\n    for i in range(n):\n      if tmp[i] == 0:\n        zeros.append(i)\n    if not zeros:\n      print(-1)\n      return\n    \n    dist = -1\n    #print(tmp, zeros)\n    if len(zeros) == 1:\n      dist = max(dist, n-1)\n    else:\n      for j in range(len(zeros)):\n        dist = max(dist, (zeros[j] - zeros[j-1] - 1) % n)\n    #print(dist)\n    ans = max(ans, dist)\n    \n  print(ans)\n    \n    \n\"\"\"\nimport bisect\ndef main():\n  N = int(input())\n  A = list(map(int,input().split()))\n  \n  ans = []\n  for i in range(1,N):\n    if A[i-1] < A[i]: continue\n    \n    j = bisect.bisect(A[:i], A[i])\n    ans.append([j+1, i+1, i - j])\n    a_i = A[i]\n    for i2 in range(i-1, j-1, -1):\n      A[i2+1] = A[i2]\n    A[j] = a_i\n  #print(A)\n  print(len(ans))\n  if len(ans) > 0:\n    for a in ans:\n      print(*a)\n  else:\n    print(*[])\n\n\ndef judge(A, K):\n  S = [[0 for _ in range(W)] for _ in range(H)]\n  \n  \n  \ndef main():\n  N, M, K = map(int,input().split())\n  H = M + N + 1\n  W = M + N + 1\n  A = [[0 for _ in range(W)] for _ in range(H)]\n  At = [[0 for _ in range(H)] for _ in range(W)]\n  \n  S = [input() for _ in range(N)]\n  for i in range(N):\n    for j in range(M):\n      if S[i][j] == \".\":\n        A[i+j][i-j+M] = 0\n        At[i-j+M][i+j] = 0\n      else:\n        A[i+j][i-j+M] = 1\n        At[i-j+M][i+j] = 1\n  \n  B = judge(A, K)\n  Bt = judge(At, K)\n  \n  flag = True\n  for h in range(H):\n    for w in range(W):\n      if A[i][j] == 0 or B[h][w] or Bt[w][h]: continue\n      flag = False\n      break\n    if not flag: break\n  print(\"Yes\" if flag else \"No\")\n    \n\"\"\"\n\nfor _ in range(Q):\n  main()",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\n\nfrom math import gcd\n\n\ndef solve(A, n, d):\n    g = gcd(n, d)\n    ng = n // g\n    ans = 0\n    for i in range(g):\n        B = []\n        j = i\n        for _ in range(2 * ng):\n            B.append(A[j])\n            j = (j + d) % n\n            \n        r = 0\n        cur = 0\n        for b in B:\n            if b == 1:\n                cur += 1\n            else:\n                cur = 0\n            ans = max(ans, cur)\n            \n    return ans if ans < ng else -1\n\n\nT = int(input())\nfor _ in range(T):\n    n, d = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(solve(A, n, d))\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n, d = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = []\n    w = [int(1e9)]*n\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i]\n        i += 1\n        y = (x + d) % n\n        if w[y] > n:\n            w[y] = w[x] + 1\n            q.append(y)\n    #print(w)\n    r = max(w)\n    if r > n:\n        print(-1)\n    else:\n        print(r)",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\ndef check_zero(a, seen, i, n, d):\n    zero = -1\n    while not seen[i]:\n        seen[i] = True\n        if a[i] == 0:\n            zero = i\n        i = (i + d) % n\n    return zero\n\ndef check_run(a, i, n, d):\n    j = (i + d) % n\n    max_run = 0\n    cur_run = 0\n    while j != i:\n        if a[j] == 1:\n            cur_run += 1\n            max_run = max(max_run, cur_run)\n        else:\n            cur_run = 0\n        j = (j + d) % n\n    return max_run\n\nfor _ in range(int(input())):\n    n, d = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    seen = [False]*n\n    ok = True\n    max_run = 0\n    \n    for i in range(n):\n        if not seen[i]:\n            zero = check_zero(a, seen, i, n, d)\n            if zero == -1:\n                ok = False\n                break\n            else:\n                max_run = max(max_run, check_run(a, zero, n, d))\n    print(max_run if ok else -1)\n",
                true
            ],
            [
                "import sys,math,itertools\nfrom collections import Counter,deque,defaultdict\nfrom bisect import bisect_left,bisect_right \nfrom heapq import heappop,heappush,heapify\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\ndef inpl_1(): return list(map(lambda x:int(x)-1, sys.stdin.readline().split()))\ndef inps(): return sys.stdin.readline()\ndef inpsl(x): tmp = sys.stdin.readline(); return list(tmp[:x])\ndef err(x): print(x); exit()\n\nfor _ in range(inp()):\n    n,d = inpl()\n    a = inpl()\n    seen = [0]*n\n    res = 0\n    for i in range(n):\n        if seen[i]: continue\n        b = [a[i]]\n        seen[i] = 1\n        while 1:\n            j = (i-d)%n\n            if seen[j]: break\n            b.append(a[j])\n            seen[j] = 1\n            i = j\n        ln = len(b)\n        if b.count(1) == ln:\n            res = -1; break\n        b += list(b)\n        ans = 0\n        cnt = 0\n        for i,x in enumerate(b):\n            if x: cnt += 1\n            else:\n                ans = max(ans,cnt)\n                cnt = 0\n        ans = max(ans, cnt)\n        res = max(res, ans)\n    print(res)",
                true
            ],
            [
                "import bisect\nimport collections\nimport copy\nimport fractions\nimport functools\nimport heapq\nimport math\nimport random\nimport sys\n\n\ndef _p(str):\n    sys.stdout.write(str+'\\n')\ndef _i():\n    return sys.stdin.readline()\n\ndef steps_needed(i, D, A):\n    orig_i = i\n\n    visited = set()\n    zero_seen = False\n    while True:\n        if i in visited:\n            break\n        visited.add(i)\n        if A[i] == 0:\n            zero_seen = True\n            break\n        i += D\n        i %= len(A)\n\n    if not zero_seen:\n        return -1\n\n    i = orig_i\n    zeroes_visited = set()\n    steps, max_steps = 0, 0\n    while True:\n        if i in zeroes_visited:\n            return max(steps, max_steps)\n        if A[i] == 0:\n            zeroes_visited.add(i)\n            max_steps = max(steps, max_steps)\n            steps = 0\n        if A[i] == 1:\n            steps += 1\n\n        i += D\n        i %= len(A)\n\nif __name__ == '__main__':\n\n    T = int(_i())\n\n    for t in range(T):\n        N, D = tuple(map(int, _i().split()))\n        A = list(map(int, _i().split()))\n\n        GCD = math.gcd(N, D)\n        ring_size = N // GCD\n\n        steps_by_ring = [steps_needed(i, D, A) for i in range(GCD)]\n        if any(st == -1 for st in steps_by_ring):\n            _p('-1')\n        else:\n            _p(str(max(steps_by_ring)))\n\n    sys.stdout.flush()\n",
                true
            ],
            [
                "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n,d = [int(i) for i in sys.stdin.readline().split()]\n    a = [int(i) for i in sys.stdin.readline().split()][:n]\n    m = 0\n    for i in range(n):\n        if a[i] == 1 and a[(i+n-d)%n] == 0:\n            a[i] = 0\n            c = 1\n            j = i\n            while a[(j+d)%n] == 1:\n                c+=1\n                j = (j+d)%n\n                a[j] = 0\n            if c > m: m = c\n    sys.stdout.write(\"%d\\n\" % (-1 if any(a) else m))\n",
                true
            ],
            [
                "from sys import stdin\ninput=stdin.readline\nrn=lambda:int(input())\nrns=lambda:map(int,input().split())\nrl=lambda:list(map(int,input().split()))\nrs=lambda:input().strip()\nYN=lambda x:print('YES') if x else print('NO')\nmod=10**9+7\n\nfor _ in range(rn()):\n    n,d=rns()\n    a=rl()\n    loops=[]\n    seen=set()\n    ans=0\n    for i in range(n):\n        if i in seen:\n            break\n        seen.add(i)\n        loop=[a[i]]\n        j=(i-d)%n\n        while j!=i:\n            seen.add(j)\n            loop.append(a[j])\n            j=(j-d)%n\n        loops.append(loop)\n\n    for loop in loops:\n        if 0 not in loop:\n            ans=-1\n            break\n        i=loop.index(0)\n        loop = loop[i:]+loop[:i]\n        curr=0\n        for i in range(1,len(loop)):\n            if loop[i]==1:\n                curr+=1\n            else:\n                curr=0\n            ans=max(ans,curr)\n    print(ans)\n",
                true
            ],
            [
                "import sys#, math\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\nmod = 10**9 + 7\n#mod = 998244353\ninput = lambda: sys.stdin.readline().rstrip()\ndef li(): return list(map(int, input().split()))\n\nT = int(input())\nfor _ in range(T):\n    N, D = li()\n    A = li()\n    if D == N:\n        if 1 in A:\n            print(-1)\n        else:\n            print(0)\n        continue\n    x = 0\n    lst = [0]\n    se = set([0])\n    while True:\n        x += D\n        x %= N\n        if x in se:\n            break\n        lst.append(x)\n        se.add(x)\n\n    if len(lst) != N and len(lst) >= 2:\n        sorted_lst = sorted(lst)\n        ans = 0\n        flag = 0\n        for i in range(sorted_lst[1]):\n            cnt = 0\n            for j in range(len(lst) * 2):\n                a = i + lst[j % len(lst)]\n                a %= N\n                if A[a] == 1:\n                    cnt += 1\n                    ans = max(cnt, ans)\n                else:\n                    cnt = 0\n        if ans > len(lst):\n            print(-1)\n        else:\n            print(ans)\n        continue\n\n    \n    ans = 0\n    cnt = 0\n    for i in range(len(lst) * 2):\n        a = lst[i % len(lst)]\n        if A[a] == 1:\n            cnt += 1\n            ans = max(ans, cnt)\n        else:\n            cnt = 0\n    if ans > len(lst):\n        ans = -1\n    print(ans)\n\n\n\n",
                true
            ],
            [
                "from itertools import groupby\nfrom math import gcd\nfrom sys import stdout\n\noutput = []\nfor _t in range(int(input())):\n    n, d = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if d == n:\n        output.append(-1 if any(num == 1 for num in a) else 0)\n        continue\n\n    max_size = n // gcd(n, d)\n    limit = n * d // gcd(n, d) * 2  # * 2 to connect the last run and the first run.\n    max_run = max(\n        max(\n            (sum(1 for e in group)\n             for key, group in groupby(a[j % n] for j in range(start, limit, d))\n             if key == 1\n             ),\n            default=0\n        )\n        for start in range(gcd(n, d))\n    )\n    output.append(-1 if max_run >= max_size else max_run)\n\nstdout.write(\"\\n\".join(map(str, output)))\n",
                true
            ],
            [
                "import sys\nimport math\nfrom math import factorial, inf, gcd, sqrt\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nfrom bisect import *\nimport random\nfrom sys import stdin, stdout\nsys.setrecursionlimit(10**5)\n\n\ndef inp():\n    return stdin.readline().strip()\n\n\ndef iinp():\n    return int(inp())\n\n\ndef mp():\n    return map(int, inp().split())\n\n\ndef lmp():\n    return list(mp())\n\n\nt = iinp()\nfor i in range(t):\n    n, d = mp()\n    a = lmp()\n    ans = -1\n    f = [False] * n\n    for i in range(n):\n        if not f[i]:\n            c = [i]\n            f[i] = True\n            j = (n - d + i) % n\n            while j != c[0]:\n                f[j] = True\n                c.append(j)\n                j = (n - d + j) % n\n            c = [a[i] for i in c]\n            if 0 not in c:\n                ans = -1\n                break\n            m = len(c)\n            j = c.index(0)\n            res = j\n            for i in range(1, m):\n                c.append(c[i - 1])\n                j = max(j, i)\n                while j < len(c) and c[j] == 1:\n                    j += 1\n                res = max(res, j - i)\n            ans = max(ans, res)\n    print(ans)\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou are given an array of integers a of length n. The elements of the array can be either different or the same. \n\nEach element of the array is colored either blue or red. There are no unpainted elements in the array. One of the two operations described below can be applied to an array in a single step:\n\n  * either you can select any blue element and decrease its value by 1; \n  * or you can select any red element and increase its value by 1. \n\n\n\nSituations in which there are no elements of some color at all are also possible. For example, if the whole array is colored blue or red, one of the operations becomes unavailable.\n\nDetermine whether it is possible to make 0 or more steps such that the resulting array is a permutation of numbers from 1 to n?\n\nIn other words, check whether there exists a sequence of steps (possibly empty) such that after applying it, the array a contains in some order all numbers from 1 to n (inclusive), each exactly once.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of input data sets in the test.\n\nThe description of each set of input data consists of three lines. The first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the original array a. The second line contains n integers a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9) \u2014 the array elements themselves.\n\nThe third line has length n and consists exclusively of the letters 'B' and/or 'R': ith character is 'B' if a_i is colored blue, and is 'R' if colored red.\n\nIt is guaranteed that the sum of n over all input sets does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case of the input. Print YES as an answer if the corresponding array can be transformed into a permutation, and NO otherwise.\n\nYou can print the answer in any case (for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer).\n\nExample\n\nInput\n\n\n8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n\nNote\n\nIn the first test case of the example, the following sequence of moves can be performed:\n\n  * choose i=3, element a_3=5 is blue, so we decrease it, we get a=[1,2,4,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,3,4,2]; \n  * choose i=3, element a_3=4 is blue, so we decrease it, we get a=[1,3,3,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,4,3,2]. \n\n\n\nWe got that a is a permutation. Hence the answer is YES.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import sys\n#sys.setrecursionlimit(20000)\n#from collections import deque #Counter\n#from itertools import accumulate\n#from functools import product\n#import math\n\n\ndef rall():\n    return sys.stdin.readlines()\ndef rl():\n    return sys.stdin.readline().strip()\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr( something='' ):\n    sys.stdout.write( str(something) + '\\n')\ndef pra( array ):\n    sys.stdout.write( ' '.join([str(x) for x in array]) + '\\n')\n\n\ndef solve(array):\n    return array\n\n\nif __name__ == '__main__':\n\n    NT = int( rl() )\n    #a,b = map(int,rl().split(' '))\n\n    for ti in range(NT):\n        n = int(rl())\n        array = list(map(int, rl().split(' ')))\n        colors = rl()# = list(map(int, rl().split(' ')))\n        blues = sorted([array[i] for i in range(n) if colors[i]=='B'])\n        reds = sorted([array[i] for i in range(n) if colors[i]=='R'],reverse=True)\n        #print('reds:',reds)\n        #print('blues:',blues)\n        reds_okay,blues_okay = True,True\n        for i in range(len(blues)):\n            if blues[i] >= 1+i:\n                continue\n            else:\n                blues_okay = False\n                break\n        for i in range(len(reds)):\n            if reds[i] <= n-i:\n                continue\n            else:\n                reds_okay = False\n\n        #a,b = map(int, rl().split(' '))\n        # vals = rl_types( [str,float,float] )\n        #pr(colors)\n        #pr(array)\n        pr('YES' if blues_okay and reds_okay else 'NO')\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    dec = []\n    inc = []\n    for i in range(n):\n        if s[i] == 'B':\n            dec.append(a[i])\n        else:\n            inc.append(a[i])\n    inc.sort()\n    dec.sort()\n    flag=0\n    for i in range(n,0,-1):\n        if len(inc)>0:\n            if inc[-1]>i:\n                flag=1\n                break\n            else:\n                inc.pop()\n        else:\n            if dec[-1]<i:\n                flag=1\n                break\n            else:\n                dec.pop()\n    if flag==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "import sys\n\n\nfor t in range(int(input() ) ):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    s = sys.stdin.readline()\n    b = []\n    r = []\n    for i in range(n):\n        if s[i] == \"B\": b.append(a[i])\n        else: r.append(a[i])\n    b.sort() #-\n    r.sort() #+\n    bj, rj = 0, 0\n    for i in range(1, n+1):\n        if bj < len(b) and b[bj] >= i:\n            bj += 1\n            continue\n        if rj < len(r) and r[rj] <= i:\n            rj += 1\n            continue\n        print(\"NO\")\n        break\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "# alh = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    mass = list(map(int, input().split()))\n    cl = input()\n    b, r = [], []\n    for i in range(n):\n        if cl[i] == \"R\":\n            r.append(mass[i])\n        else:\n            b.append(mass[i])\n    b.sort()\n    r.sort()\n    a1, a2 = 0,0\n    flag = 0\n    for i in range(1, n+1):\n        if a1 < len(b) and b[a1] >= i:\n            a1 += 1\n        elif a2 < len(r) and r[a2] <= i:\n            a2 += 1\n        else:\n            flag = 1\n            break\n    if flag == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "from sys import stdin,stdout,setrecursionlimit\nstdin.readline\ndef mp(): return list(map(int, stdin.readline().strip().split()))\ndef it():return int(stdin.readline().strip())\nfrom collections import defaultdict as dd,Counter as C,deque\nfrom math import ceil,gcd,sqrt,factorial,log2,floor\nfrom bisect import bisect_right as br,bisect_left as bl\nfrom heapq import *\nmod = 10**9+7\ninf = (1<<60)\n\n#E\n\n\n# D\nfor _ in range(it()):\n    n=it()\n    l=mp()\n    s=list(input())\n    r,b=[],[]\n    for i in range(n):\n        if s[i] == 'R':\n            r.append(l[i])\n        else:\n            b.append(l[i])\n    # print(b,r)\n    b.sort()\n    r.sort()\n    ans = 'YES'\n    curr = 1\n    b = deque(b)\n    while b:\n        if curr <= b[0]:\n            b.popleft()\n            curr += 1\n        else:\n            ans = \"NO\"\n            break\n    if ans == 'NO':\n        print(ans)\n        continue\n    r = deque(r)\n    while r:\n        if curr >= r[0]:\n            curr+=1\n            r.popleft()\n        else:\n            ans = 'NO'\n            break\n    print(ans)\n\n\n",
                true
            ],
            [
                "\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    colors = list(input())\n\n    r = []\n    b = []\n\n    for i in range(n):\n        if colors[i] == \"B\":\n            b.append(a[i])\n        else:\n            r.append(a[i])\n\n    d = len(b)\n\n    i = d - 1\n    j = 0\n\n    r.sort()\n    b.sort()\n\n    for number in range(d, 0, -1):\n        if b[i] >= number:\n            i -= 1\n        else:\n            return \"NO\"\n\n    for number in range(d + 1, n + 1):\n        if r[j] <= number:\n            j += 1\n        else:\n            return \"NO\"\n\n    return \"YES\"            \n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        print(solve())\n  ",
                true
            ],
            [
                "import sys,os,io\nimport math \nfrom collections import defaultdict\nfrom heapq import heappush, heappop, heapify\ndef ii():\n    return int(input())\ndef li():\n    return list(map(int,input().split()))\nif(os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\",\"r\") ; sys.stdout = open(\"output.txt\",\"w\") \n# else:\n#     input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\ndef solve():\n    n = ii()\n    a = li()\n    s = list(input())\n    b = []\n    r = []\n    for i in range(n):\n        if s[i]=='R':\n            r.append(a[i]-1)\n        else:\n            b.append(a[i]-1)\n    r.sort()\n    b.sort()\n    openn = 0\n    f = [0]* (n+1)\n    if b and b[0]<0:\n        print(\"NO\")\n        return\n    for i in b:\n        if i>=n:\n            continue\n        \n        f[min(n,i)] += 1\n    x = 0\n    # print(f)\n    for i in range(n):\n        if f[i]==0:\n            x+=1\n        else:\n            if f[i]==1:\n                continue \n            if f[i]-1>x:\n                print(\"NO\")\n                return \n            x -= (f[i]-1)\n    if r and r[-1]>=n:\n        print(\"NO\")\n        return \n    f = [0]* n\n    for i in r:\n        if i>=0:\n            f[max(0,i)] += 1\n    x = 0\n    for i in range(n-1,-1,-1):\n        if f[i]==0:\n            x+=1\n        else:\n            if f[i]==1:\n                continue \n            if f[i]-1>x:\n                print(\"NO\")\n                return \n            x -= (f[i]-1)\n\n    print(\"YES\")\n\n\nt = 1\nt = ii()\nfor _ in range(t):\n    solve()\n",
                true
            ],
            [
                "n = int(input())\nfor _ in range(n):\n    x = int(input())\n    nums = list(map(int, input().split()))\n    colors = input()\n    ans = sorted(list(zip(colors, nums)))\n    f = True\n    for i in range(x):\n        if ans[i][0] == 'B':\n            if ans[i][1] < i + 1:\n                f = False\n                break\n        if ans[i][0] == 'R':\n            if ans[i][1] > i + 1:\n                f = False\n                break\n    if f:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport heapq\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math, random\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nmod = 1000000007\n\ndef my_main():\n    kase = inp()\n    pans = []\n    mx = int(1e17)\n    for ka in range(kase):\n        n = inp()\n        da = inp(True)\n        st = inst()\n        r = []\n        hp = []\n        for i in range(n):\n            if st[i]=='B':\n                r.append((1, da[i]))\n            else:\n                r.append((da[i], n))\n        r.sort()\n        ridx = 0\n        ok = 1\n        for i in range(1, n+1):\n            while ridx < n and r[ridx][0] <= i:\n                heapq.heappush(hp, r[ridx][1])\n                ridx += 1\n            if not hp:\n                ok = 0\n                break\n            small_r = heapq.heappop(hp)\n            if small_r < i:\n                ok = 0\n                break\n        pans.append(\"YES\" if ok else \"NO\")\n\n    print('\\n'.join(pans))\n\nmy_main()\n\n",
                true
            ],
            [
                "t = int(input())\n\nfor inputIndex in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = list(input())\n\n    b = sorted(list(zip(c, a)))\n\n    i = 0\n    isRun = True\n    while i < n and isRun:\n        if b[i][0] == 'B':\n            if not (b[i][1] >= i + 1):\n                isRun = False\n        else:\n            if not (b[i][1] <= i + 1):\n                isRun = False\n        i += 1\n\n    print(\"YES\" if isRun else \"NO\")",
                true
            ],
            [
                "import bisect\nimport math\nfrom collections import deque\nimport heapq\nimport functools\nfrom collections import defaultdict\n\nmod =  998244353 \nN = 200005\n\ngetnums = lambda: map(int, input().split())\ngetnum = lambda: int(input())\n\ndef mul(a, b):\n    return (a*b)%mod\n\ndef add(a, b):\n    return (a+b) if (a+b<mod) else (a+b)-mod\n\ndef sub(a, b):\n    return (a-b) if (a-b>=0) else (a-b)+mod\n\ndef powr(a, b):\n    ans = 1\n    while b>0:\n        if b & 1:\n            ans=mul(ans,a)\n        a = mul(a,a) \n        b//=2\n    return ans\n\ndef inv(n):\n    return powr(n, mod-2)\n\ndef factlist():\n    fact = [1]\n    for i in range(1, N):\n        fact.append(mul(fact[i-1],i))\n    return fact\n\ndef invfactlist(fact):\n    invfact=[0]*N\n    invfact[0]=1\n    invfact[N-1]= inv(fact[N-1])\n    for i in range(N-2, 0, -1):\n        invfact[i]= mul(invfact[i+1],(i+1))\n    \n    return invfact\n\ndef rot(S):\n    return list(zip(*S[::-1]))\n\ndef gcd(a, b):\n    if b==0:\n        return a\n    return gcd(b, a%b)\n\ndef generate():\n    ans = [0]\n    while ans[-1]<1000000000:\n        ans.append(1+ans[-1]*2)\n    return ans\n\n\ndef __gcd(a, b):\n    if (a == 0):\n        return b\n    return __gcd(b % a, a)\n \n\ndef LcmOfArray(arr, idx):\n\n    if (idx == len(arr)-1):\n        return arr[idx]\n    a = arr[idx]\n    b = LcmOfArray(arr, idx+1)\n    return int(a*b/__gcd(a,b)) \n\n\ncon = dict()\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.child = None\n        self.parent = None\n\n\n    def addrear(self, y):\n        self.child = y\n        y.parent = self\n\n\n    def deleterear(self, y):\n        self.child = None\n        y.parent = None\n\n    def findparent(self):\n        parent = self.parent\n        node = self\n        while parent:\n            node = parent\n            parent = parent.parent\n        return node\n\n    def getelem(self):\n        lst = [self.val]\n        ch = self.child\n        while ch:\n            lst.append(ch.val)\n            ch= ch.child\n        return lst\n\n\n\ndef main():\n    t = getnum()\n    while t:\n        t-=1\n        n = getnum()\n        lst = list(getnums())\n        s = input()\n        rlst = []\n        blst = []\n        for i in range(n):\n            if s[i]==\"R\":\n                rlst.append(lst[i])\n            else:\n                blst.append(lst[i])\n        fl = True\n        blst.sort()\n        for i in range(len(blst)):\n            if blst[i]<i+1:\n                fl = False\n        rlst.sort()\n        for i in range(len(rlst)):\n            if rlst[i]>i+1+len(blst):\n                fl = False\n        print(\"YES\") if fl else print(\"NO\")\n\n\n\n\nif __name__ == \"__main__\":\n    main()\n    \n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = [[0,0] for x in range(n)]\n    k = 0\n    for i in input().split():\n        a[k][0] = int(i)\n        k += 1\n    k = 0\n    for j in input():\n        a[k][1] = j\n        k += 1\n    a.sort(key = lambda x: (x[1]=='R',x[0]))\n    f = True\n    d = True\n    for y in range(n):\n        if a[y][1] == 'R' and a[y][0] > (y + 1):\n            f = False\n            break\n        if a[y][1] == 'B' and a[y][0] < (y + 1):\n            f = False\n            break\n    if f:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n    ",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    arr_b = sorted([arr[i] for i in range(n) if s[i] == 'B'])\n    arr_r = sorted([arr[i] for i in range(n) if s[i] == 'R'], reverse=True)\n    res = True\n    for i in range(len(arr_b)):\n        if arr_b[i] < i + 1:\n            res = False\n            break\n    if not res:\n        print('NO')\n        continue\n    for i in range(len(arr_r)):\n        if arr_r[i] > n - i:\n            res = False\n            break\n    if res:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    colors = input()\n    blues = []\n    reds = []\n    for i in range(len(a)):\n        if colors[i] == 'R':\n            reds.append(a[i])\n        else:\n            blues.append(a[i])\n    ind = 1\n    blues.sort()\n    reds.sort()\n    flag = False\n    for el in blues:\n        if el < ind:\n            flag = True\n        ind += 1\n    for el in reds:\n        if el > ind:\n            flag = True\n        ind += 1\n    if flag:\n        print('NO')\n    else:\n        print('YES')\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = [int(i) for i in input().split()]\n    color = input()\n    R,B = [],[]\n    for i,a in enumerate(A):\n        if color[i] == \"R\":\n            R.append(a)\n        else:\n            B.append(a)\n    R.sort()\n    B.sort()\n    # print(R,B)\n    for i in range(len(B)):\n        if i+1 > B[i]:\n            print(\"NO\")\n            break\n    else:\n        for i in range(len(R)):\n            if i+len(B)+1 < R[i]:\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(\" \")))\n    colors = input()\n    segments = []\n\n    for i in range(n):\n        if colors[i] == \"R\":\n            if a[i] > n: continue\n            segments.append((max(1, a[i]), n))\n        else:\n            if a[i] < 1: continue\n            segments.append((1, a[i]))\n\n    segments = sorted(segments, key=lambda x:(x[0], x[1]-x[0]) )\n    p = 0\n    f = True\n    for i in range(1, n+1):\n        if p >= len(segments):\n            f = False\n            break\n        if i >= segments[p][0] and i <= segments[p][1]:\n            p += 1\n        else:\n            f = False\n            break\n\n    print(\"YES\" if f else \"NO\")\n\n\n\"\"\"\nB -=1\nR +=1\n\n8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n(3, n)\n(1, 1)\n(4, n)\n(2, n)\n(1, 5)\n\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n(5,5) R\n(1,1) B\n(5,5) R\n(1,5) R\n(1,5) B\n\n(1,5)\n(1,5)\n(1,1)\n(5,5)\n\n[1,0,0,0,2] R\n[1,0,0,0,1] B\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n(1, )\n\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n\n\"\"\"",
                true
            ],
            [
                "def solve():\n    n=int(input())\n    A=list(map(int,input().split()))\n    s=input()\n\n    B=[]\n    for i in range(n):\n        a,b=1,n\n        #increase\n        if s[i]=='R':\n            if A[i]>n:\n                return 'NO'\n            a=max(1,A[i])\n        #decrease\n        else:\n            if A[i]<1:\n                return 'NO'\n            b=min(n,A[i])\n        B.append([a,b])\n    B.sort()\n    \n    can=True\n    for i in range(n):\n        if B[i][0]<=i+1<=B[i][1]:\n            B[i][0],B[i][1]=B[i][1],B[i][0]\n            continue\n        else:\n            can=False\n        B[i][0],B[i][1]=B[i][1],B[i][0]\n    if can:\n        return 'YES'\n    B.reverse()\n    can=True\n    for i in range(n):\n        if B[i][1]<=n-i<=B[i][0]:\n            continue\n        else:\n            can=False\n    if can:\n        return 'YES'\n    \n    return 'NO'\n    \nfor _ in range(int(input())):\n    print(solve())",
                true
            ],
            [
                "\nt=int(input())\n\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=str(input())\n\n    d = [0 for i in range(n+3)]\n    ok=True\n    l=[]\n    r=[]\n\n    for i in range(n):\n        if s[i]==\"B\":\n            if a[i]<=0:\n                ok=False\n            l.append(a[i])\n        else:\n            if a[i]>n:\n                ok=False\n            r.append(a[i])\n\n    l.sort()\n    r.sort()\n\n    l_it = 0\n    r_it=0\n\n    for i in range(1,n+1):\n        p = False\n        while l_it!=len(l):\n            if l[l_it]<i:\n                l_it+=1\n            else:\n                l_it+=1\n                p=True\n                break\n        if p:\n            continue\n\n        while r_it!=len(r):\n            if r[r_it]>i:\n                r_it+=1\n            else:\n                r_it+=1\n                p=True\n                break\n\n        if p==False:\n            ok=False\n\n\n    if ok==False:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n\n",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    colors = list(input())\n    # blue elements can be decreased only\n    # red elements can be increased only\n    b = [arr[i] for i in range(n) if colors[i] == 'B']\n    b.sort()\n    r = [arr[i] for i in range(n) if colors[i] == 'R']\n    r.sort(reverse=True)\n    r = [n - i >= r[i] for i in range(len(r))]\n    b = [i + 1 <= b[i] for i in range(len(b))]\n    if all(b + r):\n        return 'YES'\n    return 'NO'    \n\nif __name__=='__main__':\n    for _ in range(int(input())):\n        print(solve())\n",
                true
            ],
            [
                "T = int(input())\nwhile T>0:\n    T -= 1\n    n = int(input())\n    array = [int(x) for x in input().split()]\n    color_string = input()\n    blue = []\n    red = []\n    ans = \"YES\"\n    for i in range(len(array)):\n        if color_string[i] == 'B':\n            blue.append(array[i])\n        else:\n            red.append(array[i])\n    blue = sorted(blue)\n    red = sorted(red)\n    # print(blue)\n    # print(red)\n    for i in range(len(blue)):\n        if i >= blue[i]:\n            ans = \"NO\"\n    for i in range(len(red)):\n        if len(red) - i - 1> n - red[i]:\n            ans = \"NO\"\n\n    \n    print(ans)",
                true
            ],
            [
                "from itertools import accumulate\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    st = input()\n    red_arr = [0 for i in range(n+2)]\n    blue_arr = [0 for i in range(n+2)]\n    count = 0\n    for i in range(n):\n        if st[i] == 'B':\n            if arr[i] <= 0:\n                count +=1\n                continue\n            if arr[i] >n:\n                arr[i] = n\n            blue_arr[arr[i]] +=1\n        else:\n            if arr[i] > n:\n                count+=1\n                continue\n            if arr[i] <= 0:\n                arr[i] = 1\n            red_arr[arr[i]] +=1\n    if count >0:\n        print(\"NO\")\n        continue\n    blue_berry = list(accumulate(blue_arr))\n    red_arr = red_arr[::-1]\n    red_chilly = list(accumulate(red_arr))\n    flag = 0\n    for i in range(1, n+1):\n        if blue_berry[i] > i or red_chilly[i] > i:\n            flag = -1\n            break\n    if flag == -1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t=int(input())\nfor asd in range(t):\n    n=int(input())\n    l=[int(i)for i in input().split()]\n    rb=input()\n    r=[]\n    b=[]\n    for i in range(n):\n        if(rb[i]=='R'):\n            r.append(l[i])\n        else:\n            b.append(l[i])\n    b=sorted(b)\n    r=sorted(r,reverse=True)\n    flag=1\n    for i in range(len(b)):\n        if(b[i]<i+1):\n            flag=0\n            break\n    for i in range(len(r)):\n        if(r[i]>n-i):\n            flag=0\n            break\n    if(flag):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "from collections import defaultdict\ntc=int(input())\nfor _ in range(tc):\n    n=int(input())\n    l=list(map(int,input().split()))\n    s=input()\n    b,r=[],[]\n    for i in range(n):\n        if s[i]=='B':\n            b.append(l[i])\n        else:\n            r.append(l[i])\n    r.sort(reverse=True)\n    b.sort()\n    c=\"YES\"\n    for i in range(len(b)):\n        if b[i]<i+1:\n            c=\"NO\"\n            break\n    for i in range(len(r)):\n        if r[i]>n-i:\n            c=\"NO\"\n            break\n    print(c)",
                true
            ],
            [
                "for _ in range(int(input())):\n    size = int(input())\n    arr = list(map(int,input().split()))\n    s = str(input())\n    b_arr = []\n    r_arr = []\n    for ind in range(size):\n        if s[ind] == \"B\":\n            b_arr.append(arr[ind])\n        else:\n            r_arr.append(arr[ind])\n    b_arr = sorted(b_arr)\n    r_arr = sorted(r_arr)\n    cur_num=1\n    bad = 0\n    for ind in range(len(b_arr)):\n        if cur_num <= b_arr[ind]:\n            cur_num += 1\n        else:\n            bad = 1\n    for ind in range(len(r_arr)):\n        if cur_num >= r_arr[ind]:\n            cur_num += 1\n        else:\n            bad = 1\n    if bad:\n        print (\"NO\")\n    else:\n        print(\"YES\")\n\n",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve(n, arr, s):\n  r = []\n  b = []\n\n  for i, ele in enumerate(s):\n    if ele == 'R':\n      if arr[i] > n:\n        print(\"NO\")\n        return\n      \n      if arr[i] <= 0:\n        arr[i] = 1\n\n      r.append(arr[i])\n    else:\n      if arr[i] <= 0:\n        print(\"NO\")\n        return\n      \n      if arr[i] > n:\n        arr[i] = n\n\n      b.append(arr[i])\n  \n  r.sort()\n  b.sort()\n\n  c = 1\n\n  i = 0\n  j = 0\n\n  l1 = len(r)\n  l2 = len(b)\n\n  while i < l1 and j < l2:\n    if c <= b[j]:\n      j += 1\n      c += 1\n    elif r[i] <= c:\n      i += 1\n      c += 1\n    else:\n      print(\"NO\")\n      return\n  \n  while j < l2:\n    if c <= b[j]:\n      j += 1\n      c += 1\n    else:\n      print(\"NO\")\n      return\n\n  while i < l1:\n    if r[i] <= c:\n      i += 1\n      c += 1\n    else:\n      print(\"NO\")\n      return\n\n  print(\"YES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT = get_int()\nwhile T:\n  n = get_int()\n  arr = get_list()\n  s = get_string()\n  solve(n, arr, s)\n  T -= 1\n",
                true
            ],
            [
                "from heapq import heapify,heappush,heappop,heappushpop\nfrom collections import defaultdict as dd, deque as dq,Counter as C\nfrom math import factorial as f ,ceil,gcd,sqrt,log\nfrom bisect import bisect_left as bl ,bisect_right as br\nfrom itertools import combinations as c,permutations as p\nfrom math import factorial as f ,ceil,gcd,sqrt,log\nfrom sys import stdin\ninput = stdin.readline\nmp = lambda : map(int,input().split())\nit = lambda: int(input())\nls = lambda : list(input().strip().split())\nmt = lambda  r : [ ls() for _ in range(r)]\nlcm = lambda a,b : (a*b)//gcd(a,b)\n\nfor _ in range(it()):\n    a = it()\n    b = list(mp())\n    l = input().strip()\n    inc =[]\n    dec =[]\n    for i in range(a):\n        if l[i]==\"B\":\n            dec.append(b[i])\n        else:\n            inc.append(b[i])\n    visited =[0]*(a+1)\n    dec.sort(reverse=True)\n    ans =\"YES\"\n    i =1\n    while dec :\n        cur = dec.pop()\n        m = min(i,cur)\n        if m>0  and m<=a and visited[m]==0:\n            visited[m]=1\n            i+=1\n\n\n    inc.sort(reverse=True)\n    while inc:\n        cur = inc.pop()\n        m = max(i,cur)\n        if m>0 and m<=a and visited[m]==0:\n            visited[m]=1\n            i+=1\n    for i in range(1,a+1):\n        if visited[i]==0:\n            ans=\"NO\"\n            break\n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    colors = input()\n    vse = []\n    for j in range(len(a)):\n        vse.append([a[j], colors[j]])\n    vse.sort()\n    cursorB = 0\n    cursorR = 0\n    fin = 'YES'\n    for j in range(n):\n        if vse[j][1] == 'B':\n            if cursorB >= vse[j][0]:\n                fin = 'NO'\n                break\n            cursorB += 1\n        if vse[n - 1 - j][1] == 'R':\n            if n - cursorR < vse[n - 1 - j][0]:\n                fin = 'NO'\n                break\n            cursorR += 1\n    print(fin)\n",
                true
            ],
            [
                "import math\n\n\n# 0 1\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    red = []\n    blue = []\n    for i in range(n):\n        if s[i]=='R':\n            red.append(l[i])\n        else:\n            blue.append(l[i])\n    red.sort()\n    blue.sort()\n    rn = len(red)\n    bn = len(blue)\n    f = 1\n    for i in range(1,n+1):\n        if i<=bn:\n            if blue[i-1]<i:\n                f = 0\n                # print(\"bl\",i)\n                break\n        else:\n            if red[i - bn-1]>i:\n                f = 0\n                # print(\"re\",i)\n                break\n    if f:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nfor testis in range(int(input())):\n    solve()\n",
                true
            ],
            [
                "def solve():\n    n=int(input())\n    l=list(map(int,input().split()))\n    s=input()\n    b=list()\n    r=list()\n    (bcnt,rcnt)=(0,0)\n    for i in range(len(s)):\n        if s[i]=='B':\n            b.append(l[i])\n            bcnt+=1\n        else:\n            r.append(l[i])\n            rcnt+=1\n    b.sort()\n    r.sort()\n    for i in range(0,bcnt):\n        if i+1>b[i]:\n            print('NO')\n            return\n    for i in range(bcnt,n):\n        if i+1<r[i-bcnt]:\n            print('NO')\n            return\n    print('YES')\nt=int(input())\nfor i in range(t):\n    solve()",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=input()\n    b=[]\n    for i,j in zip(a,s):\n        b.append([j,i])\n    b.sort()\n    f=1\n    for i in range(n):\n        if(b[i][0]=='R' and b[i][1]>(i+1)):\n            f=0\n            break\n        elif(b[i][0]=='B' and b[i][1]<(i+1)):\n            f=0\n            break\n    if f:\n        print('YES')\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t=int(input())\nfor i in range (0,t):\n    n=int(input())\n    l=[int(i) for i in input().split()]\n    p=sorted(l)\n    s=str(input())\n    flag = True\n    for i in range(0, n):\n        if (p[i] != (i + 1)):\n            flag = False\n            break\n    if (flag == True):\n        print(\"YES\")\n    else:\n        l_1=[]\n        l_2=[]\n        for i in range (0,len(l)):\n            if(s[i]==\"B\"):\n                l_1.append(l[i])\n            else:\n                l_2.append(l[i])\n        l_1.sort()\n        l_2.sort(reverse=True)\n        flag =True\n        for i in range (0,len(l_1)):\n            if(l_1[i]<(i+1)):\n                flag =False\n                print(\"NO\")\n                break\n        if(flag == True):\n            ok=0\n            for i in range (0,len(l_2)):\n                if(n-l_2[i])<i:\n                    ok=1\n                    print(\"NO\")\n                    break\n            if(ok==0):\n                print(\"YES\")\n\n\n\n\n\n\n",
                true
            ],
            [
                "import math;from heapq import heappush,heappop,heapify;import random;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());H=1000000000+7\nfor _ in range(I()):\n    n=I()\n    l=L()\n    s=S()\n    a=list(zip(s,l))\n    a.sort();f=0\n    for i in range(n):\n        if a[i][0]=='B' and a[i][1]<i+1:\n            f=1;break\n        if a[i][0]=='R' and a[i][1]>i+1:\n            f=1;break\n    if f:\n        print(\"NO\")\n    else: print(\"YES\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    s = input()\n \n    for i in range(n):\n        x[i] = [x[i], s[i]]\n \n    x = sorted(x, key = lambda x: (x[1]=='R',x[0]))\n \n    ans = 'YES'\n    for i in range(n):\n        if x[i][1] == 'B' and x[i][0] < (i+1):\n            ans = 'NO'\n        if x[i][1] == 'R' and x[i][0] > (i+1):\n            ans = 'NO'\n \n    print(ans)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    values = list(map(int,input().split()))\n    color = input()\n    \n    blue = []\n    red = []\n    for v,c in zip(values,color):\n        if c =='B':\n            blue.append(v)\n        else:\n            red.append(v)\n    \n    blue.sort()\n    red.sort()\n\n    \n    found1 = True\n    found2 = True\n    for i in range(len(blue)):\n        if blue[i] < i+1:\n            found1 = False\n            break\n    \n    i = len(blue)+1\n    for j in range(len(red)):\n        if red[j] > i:\n            found2 = False\n            break\n        \n        i+=1\n        \n    if found1 and found2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n        \n        \n    ",
                true
            ],
            [
                "_ = int(input())\nfor __ in range(_):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    arr_r = []\n    arr_b = []\n    hit_1 = False\n    hit_2 = False\n    for x in range(n):\n        if s[x] == 'R':\n            arr_r.append(a[x])\n        else:\n            arr_b.append(a[x])\n    arr_r = sorted(arr_r)\n    arr_b = sorted(arr_b)\n    #print(arr_r)\n    #print(arr_b)\n    l_arr_b = len(arr_b)\n    l_arr_r = len(arr_r)\n    for x in range(len(arr_b)):\n        if arr_b[x] < x + 1:\n            hit_1 = True\n            #print(f'hit - 1, {arr_b[x]}, {x}')\n            break\n    if not hit_1:\n        for x in range(len(arr_r)):\n            if arr_r[x] > x + l_arr_b + 1:\n                #print(f'hit - 2, {arr_r[x]}, {x}')\n                hit_1 = True\n                break\n    for x in range(len(arr_r)):\n        if arr_r[x] > x + 1:\n            #print(f'hit - 3, {arr_r[x]}, {x}')\n            hit_2 = True\n            break\n    if not hit_2:\n        for x in range(len(arr_b)):\n            if arr_b[x] < x + l_arr_r + 1:\n                #print(f'hit - 4, {arr_b[x]}, {x}')\n                hit_2 = True\n                break\n    #print(f'hit_1: {hit_1}, hit_2: {hit_2}')\n    if not hit_1 or not hit_2:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "import sys\n#import random\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\nmod = 10**9 + 7\nmod1 = 998244353\n\n\nfor _ in range (ii()) :\n    n = ii()\n    a = il()\n    s = list(ip())\n\n    b = []\n    c = []\n\n    for i in range (n) :\n        if (s[i] == \"B\") :\n            b.append(a[i])\n        else :\n            c.append(a[i])\n\n    p = 1\n    fl = 1\n    b.sort()\n    c.sort()\n\n    for i in b :\n        if p <= i :\n            p += 1\n            continue\n        else :\n            fl = 0\n            break\n\n    if (fl == 0) :\n        print(\"NO\")\n        continue\n\n    for i in c :\n        if (p >= i) :\n            p += 1\n        else :\n            fl = 0\n            break\n\n    if (fl) :\n        print(\"YES\")\n    else :\n        print(\"NO\")\n    \n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ndef mp():return map(int,input().split())\ndef lmp():return list(map(int,input().split()))\ndef mps(A):return [tuple(map(int, input().split())) for _ in range(A)]\nimport math\nimport bisect\nimport heapq\nfrom copy import deepcopy as dc\nfrom itertools import accumulate\nfrom collections import Counter, defaultdict, deque\ndef ceil(U,V):return (U+V-1)//V\ndef modf1(N,MOD):return (N-1)%MOD+1\ninf = int(1e20)\nmod = int(1e9+7)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = lmp()\n    b = []\n    r = []\n    br = input()[:-1]\n    for i in range(n):\n        if br[i] == \"B\":b.append(a[i])\n        else:r.append(a[i])\n    b.sort()\n    r.sort()\n    l = len(b)\n    f = True\n    for i in range(1,l+1):\n        if b[i-1] < i:f=False\n    for i in range(l+1, n+1):\n        #print(i-1-l)\n        if r[i-1-l] > i:f = False\n    if f:print(\"YES\")\n    else:print(\"NO\")\n\n\n\n",
                true
            ],
            [
                "import sys\nimport io, os\ninput = sys.stdin.readline\n#input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    s = str(input().rstrip())\n    B = []\n    R = []\n    for i, c in enumerate(s):\n        if c == 'B':\n            B.append(A[i])\n        else:\n            R.append(A[i])\n    flag = True\n    B.sort()\n    for i, b in enumerate(B):\n        if b < i+1:\n            flag = False\n            break\n    R.sort(reverse=True)\n    for i, r in enumerate(R):\n        if r > n-i:\n            flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "\nt = int(input())\n \nfor _ in range(0,t):\n    n=int(input())\n    \n    arr = list(map(int,input().split()))\n    string1 = input()\n    \n    red=[]\n    blue=[]\n    \n    for i in range(0,n):\n        if string1[i]=='B':\n            blue.append(arr[i])\n        else:\n            red.append(arr[i])\n    \n    blue.sort()\n    red.sort() \n    \n    l1 = len(blue)\n    l2 = len(red)\n    \n    flag=0\n    \n    for i in range(0,l1):\n        if (blue[i] >= i+1):\n            continue\n        else:\n            flag=1 \n            break\n    for j in range(0,l2):\n        if(red[j]<=l1+j+1):\n            continue\n        else:\n            flag=1\n            break\n    if(flag==1):\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n=int(input())\n    arr=list(map(int, input().split()))\n    s=input()\n    r,b=[],[]\n    for i in range(n):\n        if s[i]=='R':\n            r.append(arr[i])\n        else:\n            b.append(arr[i])\n    r.sort()\n    b.sort()\n    done=1\n    for i in range(len(b)):\n        if b[i]<i+1:\n            done=0\n            break\n    if done:\n        for i in range(len(r)):\n            if r[i]>len(b)+1+i:\n                done=0\n                break\n    if not done:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n",
                true
            ],
            [
                "#from math import *\n#from bisect import *\n#from collections import *\n#from random import *\n#from decimal import *\"\"\"\n#from heapq import *\n#from itertools import *\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return map(int,input().split())\nt=inp()\nwhile(t):\n    t-=1\n    n=inp()\n    a=lis()\n    s=st()\n    ra=[]\n    for i in range(n):\n        if(s[i]=='B'):\n            if(a[i]<=0):\n                continue\n            r=min(n,a[i])\n            ra.append([1,r])\n        else:\n            if(a[i]>n):\n                continue\n            l=max(1,a[i])\n            ra.append([l,n])\n    if(len(ra)!=n):\n        print(\"NO\")\n        continue\n    ra.sort()\n    po=1\n    fl=0\n    for i in range(n):\n        if(po>=ra[i][0] and po<=ra[i][1]):\n            po+=1\n        else:\n            fl=1\n    if(fl):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        \n    \n    \n",
                true
            ],
            [
                "# Problem: D. \u0421\u0438\u043d\u0435-\u043a\u0440\u0430\u0441\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\n# Contest: Codeforces - Codeforces Round #753 (Div. 3)\n# URL: https://codeforces.com/contest/1607/problem/D\n# Memory Limit: 256 MB\n# Time Limit: 1000 ms\n# \n# Powered by CP Editor (https://cpeditor.org)\n\nimport bisect\n\nmod = 10 ** 9 + 7\neps = 10 ** -9\n\n\ndef __gcd(a, b):\n    return a if b == 0 else __gcd(b, a % b)\n    \n\ndef __lcm(a, b):\n    return a * b / __gcd(a, b)\n\n\ndef __fact(n):\n    return 1 if n == 1 else n * __fact(n - 1)\n\n\ndef __mex(a):\n    mex = 0\n    a.sort()\n    for x in a:\n        if x <= mex:\n            mex += 1\n        else:\n            break\n    return mex\n\ndef __dist(x1, y1, x2, y2):\n    return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\ndef __getprimes(n):\n    isprime = [True for i in range(n + 1)]\n    primes = []\n     \n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i * i, n + 1, i):\n                isprime[j] = False\n    for i in range(2, n + 1):\n        if isprime[i]:\n            primes.append(i)\n    return primes\n    \ndef __cntprimediv(n):\n    ret = 0\n    x = n\n    i = 2\n    while i * i <= x:\n        while n % i == 0:\n            n //= i\n            ret += 1\n        i += 1\n    if n > 1:\n        ret += 1\n    return ret\n    \ndef __primefactors(n):\n    ret = []\n    x = n\n    i = 2\n    while i * i <= x:\n        while n % i == 0:\n            ret.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        ret.append(n)\n    return ret\n    \n\ndef __sumdigit(n):\n    ret = 0\n    while n > 0:\n        ret += n % 10\n        n //= 10\n    return ret\n\ndef __zfunc(s):\n    n = len(s)\n    z = [0 for i in range(n)]\n    l = 0\n    r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 1\n    return z\n    \n    \ndef __to(n, x):\n    ret = ''\n    while n > 0:\n        q = n % x\n        if q < 10:\n            ret += str(q)\n        else:\n            ret += chr(q - 10 + ord('a'))\n        n //= x\n    return ret[::-1]\n    \n    \ndef solve(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    d = []\n    u = []\n    for i in range(n):\n        if s[i] == 'B':\n            d.append(a[i])\n        else:\n            u.append(a[i])\n    ok = True\n    d.sort()\n    u.sort()\n    \n    d_ind = 0\n    u_ind = 0\n    \n    for i in range(1, n + 1):\n        if d_ind < len(d) and d[d_ind] >= i:\n            d_ind += 1\n        elif u_ind < len(u) and u[u_ind] <= i:\n            u_ind += 1    \n        else:\n            ok = False\n            break\n    print('YES' if ok else 'NO')\n\n\nt = 1\nt = int(input())\n\n\nfor i in range(t):\n    solve(i + 1)\n",
                true
            ],
            [
                "import sys\nimport math\nimport collections\nimport heapq\n\ndy = [1, 0, -1, 0]\ndx = [0, 1, 0, -1]\n\nr = lambda: sys.stdin.readline().rstrip()\nMIS = lambda: map(int, r().split())\n\nfor _ in range(int(r())):\n    N = int(r())\n    L = list(MIS())\n    C = list(r())\n    BB = 0\n    cant = 0\n    RR = 0\n    B = []\n    R = []\n    for i in range(N):\n        if C[i] == \"B\":\n            B.append(L[i])\n        else:\n            R.append(L[i])\n\n    B.sort()\n    R.sort(reverse=1)\n    bt = 1\n    rt = N\n    ans = 0\n\n    for i in range(len(B)):\n        if B[i] >= bt:\n            ans += 1\n            bt += 1\n\n    for i in range(len(R)):\n        if R[i] <= rt:\n            ans += 1\n            rt -= 1\n    if ans == N:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "for test in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    colors = list(input())\n    range_of_nos = []\n    flag = 0\n    for i,j in zip(arr,colors):\n        if j == 'B':\n            if 1 <= i:\n                if i > n:\n                    range_of_nos.append([1, n])\n                else:\n                    range_of_nos.append([1, i])\n            else:\n                flag = 1\n                break\n        elif j == 'R':\n            if i <= n:\n                if i < 1:\n                    range_of_nos.append([1,n])\n                else:\n                    range_of_nos.append([i, n])\n            else:\n                flag = 1\n                break\n    if flag == 1:\n        print (\"NO\")\n    else:\n        range_of_nos.sort()\n        # print (range_of_nos)\n        for i in range(1,n+1):\n            if range_of_nos[i-1][0] <= i <= range_of_nos[i-1][-1]:\n                pass\n            else:\n                flag = 1\n                break\n        if flag == 1:\n            print (\"NO\")\n        else:\n            print (\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    C = list(input())\n    if [j+1 for j in range(n)] == sorted(A):\n        print('YES')\n    else:\n        res = 0\n        B_color = []\n        R_color = []\n        for j in range(n):\n            if C[j] == 'B':\n                B_color.append(A[j])\n            else:\n                R_color.append(A[j])\n        B_color.sort()\n        R_color.sort(reverse=True)\n        if R_color:\n            for j, r in enumerate(R_color):\n                if r > n - j:\n                    res += 1\n                    break\n        if B_color:\n            for j, b in enumerate(B_color):\n                if b < j + 1:\n                    res += 1\n                    break\n        if res == 0:\n            print('YES')\n        else:\n            print('NO')",
                true
            ],
            [
                "import sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\n\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = []\n    R = []\n    for i, c in enumerate(input()):\n        if c == \"B\":\n            B.append(A[i])\n        else:\n            R.append(A[i])\n    B.sort()\n    R.sort(reverse=True)\n\n    for i, b in enumerate(B):\n        if b < i + 1:\n            print(\"NO\")\n            return\n    for i, r in enumerate(R):\n        if r > N - i:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\n\nfor _ in range(int(input())):\n    solve()\n",
                true
            ],
            [
                "\ndef solution():\n    n = int(input())\n    a = [(c,int(x)) for x,c in zip(input().split() , input())]\n    print('YES') if all((x[0] =='B' and x[1]>=i) or (x[0] == 'R' and x[1]<=i) for i,x in enumerate(sorted(a),start=1)) else print('NO')\n\nfor _ in range(int(input())):\n    solution()\n",
                true
            ],
            [
                "import math\nfrom collections import Counter\nimport copy\n#'YES'\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    s = input()\n    temp = []\n    flag = 0\n    for i in range(n):\n        if s[i] == 'B':\n            if arr[i] < 0:\n                flag = 1\n                break\n            temp.append((1, min(n, arr[i])))\n        else:\n            if arr[i] > n:\n                flag = 1\n                break\n            temp.append((max(1, arr[i]),n))\n    if flag:\n        print('NO')\n    else:\n        start = 0\n        temp.sort()\n        for i in range(n):\n            l, r = temp[i]\n            if l <= start+1 <= r:\n                start += 1\n            else:\n                flag = 1\n                break\n        if flag:\n            print('NO')\n        else:\n            print('YES')",
                true
            ],
            [
                "import sys\n\n# sys.setrecursionlimit(200005)\nint1 = lambda x: int(x)-1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline().rstrip()\n# inf = 10**16\ninf = 4294967295\n# md = 10**9+7\nmd = 998244353\n\nfrom heapq import *\n\ndef solve():\n    n = II()\n    aa = LI1()\n    cc = [c == \"R\" for c in SI()]\n    lr = []\n    for a, c in zip(aa, cc):\n        if c:\n            lr.append((a, n))\n        else:\n            lr.append((0, a+1))\n\n    lr.sort(key=lambda x: -x[0])\n    hp = []\n    for i in range(n):\n        while lr and lr[-1][0] <= i:\n            l, r = lr.pop()\n            heappush(hp, r)\n        if not hp:\n            print(\"NO\")\n            return\n        r = heappop(hp)\n        if i >= r:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\nfor testcase in range(II()):\n    solve()\n",
                true
            ],
            [
                "# -*- encoding: utf-8 -*-\nimport sys\nr_input = sys.stdin.readline\n\n# -------------------------------------- #\n# | Created by happiness96             | #\n# | Year 2021                          | #\n# | Month 11                           | #\n# | Day 02                             | #\n# |                           | #\n# -------------------------------------- #\n\n\nif __name__ == \"__main__\":\n    t = int(r_input())\n\n    for _ in range(t):\n        n = int(r_input())\n\n        a_list = map(int, r_input().split())\n        colors = r_input().rstrip()\n\n        blue = []\n        red = []\n\n        for ind, val in enumerate(a_list):\n            if colors[ind] == 'B':\n                blue.append(val)\n            \n            else:\n                red.append(val)\n        \n        blue.sort(reverse=True)\n        red.sort(reverse=True)\n        flag = 1\n\n        for ind in range(1, n + 1):\n            if blue and blue[-1] >= ind:\n                blue.pop()\n                continue\n            \n            if red and red[-1] <= ind:\n                red.pop()\n                continue\n            \n            flag = 0\n            break\n        \n        print(['NO', 'YES'][flag])",
                true
            ],
            [
                "def f():\n    n = int(input())\n    a = list(map(int, input().split()))\n    col = input()\n    b = list()\n    r = list()\n    for i in range(n):\n        if col[i] == 'B':\n            b.append(a[i])\n        else:\n            r.append(a[i])\n    b.sort()\n    cntb = len(b)\n    for i in range(cntb):\n        if b[i] <= i:\n            print(\"NO\")\n            return\n    r.sort(reverse=True)\n    cntr = len(r)\n    for i in range(cntr):\n        if r[i] > n - i:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\n\nt = int(input())\nfor i in range(t):\n    f()",
                true
            ],
            [
                "t = int(input())\n\ninf = -(10**17)\n\nans = []\nfor _ in range(t):\n    n = int(input())\n    nums = [int(_) for _ in input().split()]\n    color = input()\n    red = []\n    blue = []\n    for i in range(n):\n        if color[i] == 'R':\n            red.append(nums[i])\n        else:\n            blue.append(nums[i])\n    red.sort()\n    blue.sort()\n    r, b = 0, 0\n    for i in range(1, n+1):\n        if b < len(blue) and blue[b] >= i:\n            b += 1\n        elif r < len(red) and red[r] <= i:\n            r += 1\n        else:\n            ans.append('NO')\n            break\n    else:\n        ans.append('YES')\n\nprint('\\n'.join(ans))",
                true
            ],
            [
                "import sys\ninput = lambda:sys.stdin.readline().strip()\nt = int(input())\nwhile t:\n    t-=1\n    n = int(input())\n    a = list(map(int,input().split()))\n    s = list(input())\n    c = []\n    for i in range(n):\n        c.append((s[i],a[i]))\n    c.sort()\n    ok = True \n    for i in range(n):\n        if c[i][0]=='B':\n            if c[i][1]<i+1:\n                ok = False \n                break \n        else:\n            if c[i][1]>i+1:\n                ok = False \n                break \n    if ok:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n            \n    ",
                true
            ],
            [
                "test_cases = int(input())\nfor t in range(test_cases):\n    n = int(input())\n    a = list(map(int, input().split()))\n    st = input()\n    blue = []\n    red = []\n    for i in range(len(st)):\n        ch = st[i]\n        if ch == 'B':\n            blue.append(a[i])\n        elif ch == 'R':\n            red.append(a[i])\n    blue.sort()\n    red.sort()\n    cur_window = 0\n    flag = 1\n    for e in blue:\n        if e >= cur_window + 1:\n            cur_window+=1\n        else:\n            flag = 0\n            break\n    for e in red:\n        if e <= cur_window + 1:\n            cur_window+=1\n        else:\n            flag = 0\n            break\n    if flag == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    num = list(map(int, input().split()))\n    colors = input()\n    red = []\n    blue = []\n\n    for j in range(n):\n        if colors[j] == 'R':\n            red.append(num[j])\n        else:\n            blue.append(num[j])\n\n    red.sort()\n    blue.sort()\n    \n    idxR = idxB = 0\n    idxN = 1\n    failed = False\n\n    while idxR < len(red) or idxB < len(blue):\n        if idxB < len(blue) and blue[idxB] < idxN:\n            if idxR < len(red) and red[idxR] > idxN:\n                failed = True\n                break\n            elif idxR == len(red):\n                failed = True\n                break\n            else:\n                idxR += 1\n        elif idxB == len(blue):\n            if red[idxR] > idxN:\n                failed = True\n                break\n            else:\n                idxR += 1\n        else:\n            idxB += 1\n        idxN += 1\n    \n    if failed:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "def solve(n,a,b,r):\n    b.sort()\n    r.sort()\n    i=0\n    for i in range(len(b)):\n        if b[i]<i+1:\n            return 'NO'\n    curr= len(b)+1\n    for i in range(len(r)):\n        if r[i]>curr:\n            return 'NO'\n        curr+=1\n    return 'YES'\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    s = input()\n    b=[];r=[]\n    for i in range(n):\n        if s[i]=='B':\n            b.append(a[i])\n        else:\n            r.append(a[i])\n    print(solve(n,a,b,r))",
                true
            ],
            [
                "tt = int(input())\n\nfor _ in range(tt):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    bed = []\n    cec = []\n    for i in range(n):\n        if s[i] == 'R':\n            bed.append(a[i])\n        else:\n            cec.append(a[i])\n    bed.sort()\n    cec.sort()\n    bed = bed[::-1]\n    r = n + 1\n    l = 0\n    for i in range(len(bed)):\n        if bed[i] < r:\n            r -= 1\n    for i in range(len(cec)):\n        if cec[i] > l:\n            l += 1\n    if (l + 1 == r):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "# Q4\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    blue, red = [], []\n    for i in range(n):\n        if s[i] == 'B':\n            blue.append(arr[i])\n        else:\n            red.append(arr[i])\n\n    blue.sort()\n    red.sort()\n\n    ans = \"YES\"\n    i, j = 1, 0\n    while j < len(blue):\n        if blue[j] < i:\n            ans = \"NO\"\n            break\n        i += 1\n        j += 1\n\n    j = 0\n    while j < len(red):\n        if red[j] > i:\n            ans = \"NO\"\n            break\n        i += 1\n        j += 1\n\n    print(ans)\n\n\n# Q3\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     arr = list(map(int, input().split()))\n\n#     arr.sort()\n#     ans = arr[0]\n#     for i in range(1, n):\n#         ans = max(ans, arr[i]-arr[i-1])\n\n#     print(ans)\n        \n\n# Q2\n# t = int(input())\n# for _ in range(t):\n#     x, n = map(int, input().split())\n#     if x%2:\n#         nn = n%4\n#         if nn == 0:\n#             print(x)\n#         elif nn == 1:\n#             print(x+n)\n#         elif nn == 2:\n#             print(x-1)\n#         elif nn == 3:\n#             print(x-n-1)\n#     else:\n#         nn = n%4\n#         if nn == 0:\n#             print(x)\n#         elif nn == 1:\n#             print(x-n)\n#         elif nn == 2:\n#             print(x+1)\n#         elif nn == 3:\n#             print(x+n+1)\n\n# Q1\n# t = int(input())\n# for _ in range(t):\n#     arr = input()\n#     s = input()\n\n#     hm = {}\n#     for i in range(26):\n#         hm[arr[i]] = i\n\n\n#     ans = 0\n#     for i in range(len(s)-1):\n#         a, b = s[i], s[i+1]\n#         ans += abs(hm[b] - hm[a])\n#     print(ans)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = input()\n    red = []\n    blue = []\n    for i in range(n):\n        if b[i] == \"R\":\n            red.append(a[i])\n        else:\n            blue.append(a[i])\n    red.sort()\n    blue.sort()\n    c = 1; f = False\n    for i in range(len(blue)):\n        if blue[i] < c:\n            f = True\n            break\n        c += 1\n    if f:\n        print(\"NO\")\n        continue\n    c = len(blue) + 1; f = False\n    for i in range(len(red)):\n        if red[i] > c:\n            f = True\n            break\n        c += 1\n    if f:\n        print(\"NO\")\n        continue\n    print(\"YES\")\n\n",
                true
            ],
            [
                "from sys import stdin\n\n\ndef read_input():\n    n = int(stdin.readline().rstrip())\n    a = list(map(int, stdin.readline().split()))\n    c = stdin.readline().rstrip()\n    return n, a, c\n\n\ndef solve(n, a, c):\n    rods = []\n    for i in range(n):\n        if c[i] == 'B':\n            if a[i] >= 1:\n                left = 1\n                right = min(n, a[i])\n                rods.append((left, right))\n        else:\n            if a[i] <= n:\n                left = max(1, a[i])\n                right = n\n                rods.append((left, right))\n\n    if len(rods) < n:\n        return 'NO'\n\n    rods.sort()\n    for i, rod in enumerate(rods, 1):\n        if not (rod[0] <= i <= rod[1]):\n            return 'NO'\n\n    return 'YES'\n\n\ndef main():\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        input = read_input()\n        answer = solve(*input)\n        print(answer)\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "def f():\n    n=int(input())\n    l=list(map(int,input().split()))\n    s=input()\n    a=[]\n    b=[]\n    for i in range(n):\n        if (l[i]<1 and s[i]==\"B\") or (l[i]>n and s[i]==\"R\"):\n            return \"NO\"\n        if s[i]==\"R\":\n            a.append(l[i])\n        else:\n            b.append(l[i])\n    a.sort(reverse=True)\n    b.sort()\n    t=n\n    for i in a:\n        if i>t:\n            return \"NO\"\n        t-=1\n    t=1\n    for i in b:\n        if i<t:\n            return \"NO\"\n        t+=1\n    return \"YES\"\n    \nfor _ in range(int(input())):\n    print(f())",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=list(input())\n    inc=[0 for i in range(n+1)]\n    flag=1\n    for i in range(n):\n        if(a[i]<=0 and s[i]=='B' ):\n            flag=0\n            break\n        if(a[i]>n and s[i]=='R' ):\n            flag=0\n            break\n        \n    for i in range(n):\n        if(s[i]=='R' and a[i]>=1 and a[i]<=n):\n            inc[a[i]]+=1\n    #print(inc)\n    c=0\n    j=1\n    for i in range(n,0,-1):\n        c+=inc[i]\n        if(c>j):\n            #print(c,i)\n            flag=0\n        \n            break\n        j+=1\n    dec=[0 for i in range(n+1)]\n    for i in range(n):\n        if(s[i]=='B' and a[i]>=1 and a[i]<=n):\n            dec[a[i]]+=1\n    c=0\n    for i in range(1,n+1):\n        c+=dec[i]\n        if(c>i):\n            flag=0\n            break\n    if(flag==0):\n        print(\"NO\")\n        continue\n    print(\"YES\")\n    \n        \n            \n        \n    \n        \n        \n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    red = []\n    blue = []\n    for i in range(n):\n        if s[i] == \"B\":\n            blue.append(a[i])\n        else:\n            red.append(a[i])\n    blue.sort()\n    red.sort(reverse = True)\n    good = True\n    for i in range(len(blue)):\n        if blue[i] < i + 1:\n            good = False\n    for i in range(len(red)):\n        if red[i] > n - i:\n            good = False\n    if good:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    c=input()\n    r=[]\n    b=[]\n    for i in range(n):\n        if c[i]=='B':\n            b.append(a[i])\n        else:\n            r.append(a[i])\n    r.sort()\n    b.sort()\n    ans=\"YES\"\n    idx=0\n    j=0\n    for i in range(1,n+1):\n        if idx<len(b) and b[idx]>=i:\n            idx+=1\n        elif j< len(r) and r[j]<=i:\n            j+=1\n        else:\n            ans=\"NO\"\n            break\n    print(ans)\n\n",
                true
            ],
            [
                "tc=int(input())\nfor _ in range(tc):\n    n=int(input())\n    l=list(map(int,input().split()))\n    s=input()\n    b,r=[],[]\n    for i in range(n):\n        if s[i]=='B':\n            b.append(l[i])\n        else:\n            r.append(l[i])\n    r.sort(reverse=True)\n    b.sort()\n    c=\"YES\"\n    for i in range(len(b)):\n        if b[i]<i+1:\n            c=\"NO\"\n            break\n    for i in range(len(r)):\n        if r[i]>n-i:\n            c=\"NO\"\n            break\n    print(c)",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    b = [[a[j], s[j]] for j in range(n)]\n    b.sort()\n    #print(b)\n    #pas = [False for j in range(n)]\n    l = 1\n    r = n\n    flag = True\n    for j in range(n):\n        if b[j][1] == 'B':\n            if l > b[j][0]:\n                flag = False\n                break\n            else:\n                l += 1\n        if b[n - j - 1][1] == 'R':\n            if r < b[n - j - 1][0]:\n                flag = False\n                break\n            else:\n                r -= 1\n        #print(l, r, )\n    if flag:\n        print('YES')\n    else:\n        print('NO')\n\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\n#sys.setrecursionlimit(10**7)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\n#Fenwick Tree point update range sum\ndef update_it(bit,i,val):\n    n=len(bit)\n    while(i<n):\n        bit[i]+=val\n        i+=i&(-i)\ndef get_ans(bit,i):\n    n=len(bit)\n    tot=0\n    while(i>0):\n        tot+=bit[i]\n        i-=i&(-i)\n    return tot\nprime=[2,3,5,7,11,13,17,19,23,29]\ndef hnbhai(tc):\n    n=sb()\n    a=sd()\n    s=sa()\n    r=[]\n    b=[]\n    for i in range(n):\n        if s[i]==\"R\":\n            r.append(a[i])\n        else:\n            b.append(a[i])\n    r.sort()\n    b.sort()\n    chiye=1\n    hai=0\n    for i in b:\n        if chiye<=i:\n            chiye+=1\n        else:\n            print(\"NO\")\n            return\n    for i in r:\n        if chiye>=i:\n            chiye+=1\n        else:\n            print(\"NO\")\n            return\n    print(\"YES\")\nfor _ in range(sb()):\n    hnbhai(_+1)\n",
                true
            ],
            [
                "import sys\n\nDEBUG_ENABLED = True\n\n\ndef debug(*args, **kwargs):\n    if DEBUG_ENABLED:\n        print(*args, file=sys.stderr, **kwargs)\n\n\ndef solve_case(case_num: int) -> str:\n    n = int(input())\n    array = list(map(int, input().split()))\n    barvs = input()\n\n    red = []\n    blue = []\n\n    for i in range(n):\n        if barvs[i] == 'R':\n            red.append(array[i])\n        else:\n            blue.append(array[i])\n\n    red.sort(reverse=True)\n    blue.sort(reverse=False)\n    for i in range(len(red)):\n        if n - red[i] < i:\n            return \"NO\"\n    for i in range(len(blue)):\n        if blue[i] <= i:\n            return \"NO\"\n    return \"YES\"\n\n\nT = int(input())\n\nfor tt in range(T):\n\n    result = solve_case(tt + 1)\n    print(result)\n\nif __name__ == '__main__':\n    pass\n",
                true
            ],
            [
                "from collections import deque\nfrom typing import Counter\nimport sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input().strip())):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    color = list(input().strip())\n\n    # val_col = defaultdict()\n    val_col = deque() \n\n    # for i in range(n):\n    #     val_col[arr[i]] = color[i]\n    for i in range(n):\n        val_col.append([arr[i],color[i]])\n    \n    val_col = sorted(val_col, key=lambda x: (x[1],x[0]))\n    # print(val_col)\n\n    res = \"YES\"\n    for i in range(n):\n        if val_col[i][1] == 'B' and val_col[i][0]<i+1:\n            # print(val_col[i][0])\n            # print(i+1)\n            res=\"NO\"\n            # print(\"HERE\")\n        elif val_col[i][1]=='R' and val_col[i][0]>i+1:\n            res=\"NO\"\n            # print(\"NIl\")\n    \n    print(res)\n\n    \n    # print(val_col)\n    # # print(val_col)\n\n    \n    # for j in range(1,n+1):\n    #     if j not in arr:\n    #         for k in val_col:\n    #             if(k[1]=='B' and k[0]>j):\n    #                 k[0] = j\n    #                 arr[k[2]] = j\n    #                 break\n        \n    # # print(arr)\n    # # print(val_col)\n    # for j in range(n,0,-1):\n    #     if j not in arr:\n    #         for k in val_col:\n    #             if(k[1]=='R' and k[0]<j):\n    #                 k[0] = j\n    #                 arr[k[2]] = j\n    #                 break\n    \n    # # print(val_col)\n    # # print(arr)\n    # flag =1\n    # C = Counter(arr)\n    # print(C)\n    # for i in range(1,n+1):\n    #     if(C[i]!=1):\n    #         flag = 0\n    #         break\n    \n    # if(flag):\n    #     print(\"YES\")\n    # else:\n    #     print(\"NO\")\n    \n\n\n    # # print(val_col)\n    # # j = n\n    # # for j in range(n,0,-1):\n    # #     if j not in arr:\n    # #         for i in range(n):\n    # #             if(color[i]=='R' and arr[i]<j):\n    # #                 arr[i] = j\n    # #                 break\n            \n    \n    # # # print(arr)\n    # # j = 1\n    # # for i in range(n):\n    # #     if(color[i]==\"B\" and arr[i]>j):\n    # #         arr[j] = j\n    # #         j+=1\n    \n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=input()\n    b=[]\n    for i,j in zip(a,s):\n        b.append([j,i])\n    b.sort()\n    f=1\n    for i in range(n):\n        if(b[i][0]=='R' and b[i][1]>(i+1)):\n            f=0\n            break\n        elif(b[i][0]=='B' and b[i][1]<(i+1)):\n            f=0\n            break\n    if(f):\n        print('YES')\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "from collections import defaultdict\nt=int(input())\nfor j in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=input()\n    b,r=[],[]\n    for i in range(n):\n        if s[i]=='B':\n            b.append(a[i])\n        else:\n            r.append(a[i])\n    b.sort()\n    r.sort()\n    f=0\n    for i in range(len(b)):\n        if b[i]<i+1:\n            f=1\n            break\n    for i in range(len(r)):\n        if r[i]>len(b)+i+1:\n            f=1\n            break\n    print('YES' if f==0 else 'NO')",
                true
            ],
            [
                "import sys\nimport os.path\n \nif(os.path.exists('input.txt')) :\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    sys.stderr = open(\"error.txt\", \"w\")\n    \ndepth = 1000000\nmod = 1000000007 \nlim = mod * mod\nsys.setrecursionlimit(depth) \n \nlinp = lambda: list(minp())\nminp = lambda: map(int, input().split())\n \nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\n \ndxy = [(1, 0),(-1, 0),(0, 1),(0, -1)]\n\nfor _ in range(int(input())) :\n    n = int(input())\n    a, s = linp(), input()\n    blue, red = [], []\n    for i in range(n) :\n        if s[i] == 'B' : blue.append(a[i])\n        else : red.append(a[i])\n    red.sort(reverse=True)\n    v = [False for _ in range(n+1)]\n    j = n\n    for e in red :\n        while v[j] != False and j >= e :\n            j -= 1\n        if j >= e :\n            v[j] = True\n        j -= 1\n    i = 1\n    blue.sort()\n    for e in blue :\n        while v[i] != False and i <= e :\n            i += 1\n        if i <= e :\n            v[i] = True\n        i += 1\n    v = v[1:]\n    if all(v) : print(\"YES\")\n    else : print(\"NO\")\n ",
                true
            ],
            [
                "n = int(input())\nfor dgfjd in range(n):\n    lenn = int(input())\n    lst = list(map(int, input().split()))\n    s = list(input())\n    blue = []\n    red = []\n    for i in range(lenn):\n        if s[i] == 'B':\n            blue.append(lst[i])\n        else:\n            red.append(lst[i])\n    blue = sorted(blue)\n    red = sorted(red)\n    q = False\n    b = 0\n    r = 0\n    q = True\n    for i in range(1, lenn + 1):\n        if b < len(blue) and blue[b] >= i:\n            b += 1\n        elif r < len(red) and red[r] <= i:\n            r += 1\n        else:\n            q = False\n            print('NO')\n            break\n    if q:\n        print('YES')",
                true
            ],
            [
                "from sys import stdin\n\nt = int(stdin.readline())\n\nfor _ in range(t):\n    stdin.readline()\n    numbers = [int(d) for d in stdin.readline().strip().split()]\n    colors = stdin.readline().strip()\n\n    numbers = zip(colors, numbers)\n    numbers = sorted(numbers)\n\n    current = 1\n    result = True\n    for n in numbers:\n        if n[0] == 'B' and n[1] < current:\n            result = False\n\n        if n[0] == 'R' and n[1] > current:\n            result = False\n\n        current += 1\n\n    print('YES' if result else 'NO')\n",
                true
            ],
            [
                "import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    s = input()\n    ss = []\n    b = []\n    for i in range(n):\n        ss.append(s[i])\n    res_lst = list(zip(ss, lst))\n    res_lst.sort()\n    i = 1\n    for i in range(1, n + 1):\n        if res_lst[i - 1][1] < i and res_lst[i - 1][0] == 'B':\n                print('NO')\n                break\n        elif res_lst[i - 1][1] > i and res_lst[i - 1][0] == 'R':\n                print('NO')\n                break\n    else:\n        print('YES')\n\n\n\n\n",
                true
            ],
            [
                "for t in range(int(input())):\n    n= int(input())\n    lis = list(map(int, input().split()))\n    s=input()\n    red=[]\n    blue=[]\n    for i in range(n):\n        if s[i] == \"R\":\n            red.append(lis[i])\n        else:\n            blue.append(lis[i])\n    red.sort()\n    blue.sort()\n    r_pointer=b_pointer=0\n    val=1\n    flag=0\n    #print(red,blue,n)\n    while (r_pointer<len(red) or b_pointer<len(blue)) and val<=n:\n        #print(r_pointer,b_pointer,val)\n        if b_pointer<len(blue) and blue[b_pointer] >= val:\n            b_pointer+=1\n        elif r_pointer<len(red) and red[r_pointer] <= val:\n            r_pointer+=1\n        else:\n            flag=1\n            break\n        val+=1\n    #print(val)\n    if flag==1 or val<n:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "def solve(n, ls, s):\n    blues = []\n    reds = []\n    i = 0\n    while i < n:\n        if s[i] == \"R\":\n            reds.append(ls[i])\n        else:\n            blues.append(ls[i])\n        i += 1\n\n    blues.sort(reverse=True)\n    reds.sort(reverse=True)\n    i = n\n    ri = 0\n    bi = 0\n    while i >= 1:\n        if ri < len(reds) and reds[ri] <= i:\n            i -= 1\n            ri += 1\n            continue\n\n        if bi < len(blues) and blues[bi] >= i:\n            i -= 1\n            bi += 1\n            continue\n\n        return \"NO\"\n\n    return \"YES\"\n\n\nt = int(input().strip())\ninputs = []\nfor _ in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    s = input().strip()\n    inputs.append((n, a, s))\n\nfor inp in inputs:\n    print(solve(*inp))\n",
                true
            ],
            [
                "import sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    col = input()\n\n    blu, red = [], []\n    for i in range(n):\n        if col[i] == \"B\": blu.append(lst[i])\n        else: red.append(lst[i])\n    blu.sort()\n    red.sort(reverse=True)\n    if blu and blu[0] < 1:\n        print(\"NO\")\n        continue\n    if red and red[0] > n:\n        print(\"NO\")\n        continue\n    tmp, cur = 0, 1\n    flag = False\n    if blu:\n        for num in blu:\n            if 1 <= num <= n:\n                tmp += 1\n                if tmp > num:\n                    flag = True\n                    break\n\n    if flag:\n        print(\"NO\")\n        continue\n    tmp, cur = 0, 1\n    if red:\n        for num in red:\n            if 1 <= num <= n:\n                tmp += 1\n                if tmp > n-num+1:\n                    flag = True\n                    break\n\n    if flag:\n        print(\"NO\")\n        continue\n    print(\"YES\")",
                true
            ],
            [
                "# import math\nfrom collections import Counter, deque, defaultdict\nfrom math import *\n\n# from bisect import bisect_right\nmod = 1000000007\n\n\n# from functools import reduce\n# from itertools import permutations\n# import queue\n\ndef isNotPossible(num, n):\n    return num>n\ndef isNotPossible2(num,n):\n    return num<n\n\ndef solve():\n    n=int(input())\n    l=list(map(int,input().split()))\n    s=input()\n    red=[]\n    blue=[]\n    for i in range(n):\n        if s[i]==\"R\":\n            red.append(l[i])\n        else:\n            blue.append(l[i])\n    red.sort()\n    blue.sort()\n    n1=len(blue)\n    n2=len(red)\n    for i in range(n):\n        if i<n1:\n            if isNotPossible(i+1,blue[i]):\n                print(\"NO\")\n                return\n        else:\n            if isNotPossible2(i+1,red[i-n1]):\n                print(\"NO\")\n                return\n    print(\"YES\")\n\ntestcase=int(input())\n# testcase = 1\nfor num in range(testcase):\n    # print(\"Case #{}: \".format(num + 1), end=\"\")\n    solve()",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = map(int, input().split())\n    c = input()\n\n    blue, red = [], []\n    for i, x in enumerate(a):\n        if c[i] == \"B\":\n            blue.append(x)\n        else:\n            red.append(x)\n    blue.sort()\n    red.sort()\n\n    b = len(blue)\n    for i in range(b - 2, -1, -1):\n        blue[i] = min(blue[i], blue[i + 1] - 1)\n    r = len(red)\n\n    bi, ri = 0, 0\n    ans = \"YES\"\n    for x in range(1, n + 1):\n        if bi < b and x <= blue[bi]:\n            bi += 1\n        elif ri < r and x >= red[ri]:\n            ri += 1\n        else:\n            ans = \"NO\"\n    print(ans)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = list(input())\n    blue = []\n    red = []\n    res = True\n    for i in range(n):\n        if s[i] == 'B':\n            blue.append(arr[i])\n        else:\n            red.append(arr[i])\n    blue.sort()\n    red.sort(reverse=True)\n    a = 0\n    b = n + 1\n    for i in blue:\n        if i > a:\n            a +=1\n        else:\n            res = False\n    for i in red:\n        if i < b:\n            b -= 1\n        else:\n            res = False\n    if res == False:\n        print('NO')\n    else:\n        print('YES')\n\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(ai) for ai in input().split()]\n    colors = [char for char in input().strip()]\n\n    red = []\n    blue = []\n    for ai, color in zip(a, colors):\n        if color == 'R':\n            red.append(ai)\n        else:\n            blue.append(ai)\n\n    # print(red)\n    # print(blue)\n\n    flag = 1\n    red.sort()\n    for ind in range(len(red) - 1, -1, -1):\n        if red[ind] > n:\n            flag = 0\n        n -= 1\n\n    m = 1\n    blue.sort()\n    for ind in range(len(blue)):\n        if blue[ind] < m:\n            flag = 0\n        m += 1\n\n    print(\"YES\" if flag else \"NO\")\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=input()\n    f=0\n    fb=[0]*n\n    fr=[0]*n\n    for j in range(n):\n        if(s[j]=='B'):\n            if(a[j]>=1):\n                if(a[j]<=n):\n                    fb[a[j]-1]+=1\n            else:\n                f=1\n                break\n        else:\n            if(a[j]<=n):\n                if(a[j]>=1):\n                    fr[a[j]-1]+=1\n            else:\n                f=1\n                break\n    for j in range(1,n):\n        fb[j]+=fb[j-1]\n    for j in range(n-2,0,-1):\n        fr[j]+=fr[j+1]\n    for j in range(n):\n        if(fb[j]>j+1):\n            f=1\n            break\n        if(fr[j]>n-j):\n            f=1\n            break\n    if(f==1):\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "import sys,math\n#sys.stdin=open('input.txt','r')\n#sys.stdout=open('output.txt','w')\n\n\n\n\ndef solve():\n    n=int(input())\n    l=list(map(int,input().split()))\n    s=list(input())\n    dec=[]\n    inc=[]\n    for i in range(len(l)):\n        if(s[i]=='B'):\n            dec.append(l[i])\n        else:\n            inc.append(l[i])\n    dec.sort()\n    inc.sort()\n    if(len(dec)>0 and dec[0]<1):\n        print(\"NO\")\n        return\n    elif(len(inc)>0 and inc[len(inc)-1]>n):\n        print(\"NO\")\n        return\n    ans=True\n    start=1\n    for i in dec:\n        if(i<start):\n            ans=False\n        start+=1\n    start=n\n    inc.reverse()\n    for i in inc:\n        if(i>start):\n            ans=False\n        start-=1\n    if(ans):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt=int(input())\nwhile(t!=0):\n    solve()\n    t-=1\n",
                true
            ],
            [
                "from collections import defaultdict\nfor _ in range(int(input())):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    color=input()\n    dp=[]\n    for i in range(n):\n        if color[i]=='B':dp.append([0,arr[i]])\n        else:dp.append([1,arr[i]])\n    dp.sort();cnt=0;flag=1\n    # print(dp)\n    for i in dp:\n        cnt+=1\n        if i[1]==cnt:continue\n        if i[1]!=cnt:\n            if i[0]==0 and i[1]>cnt:continue\n            elif i[0]==1 and i[1]<cnt:continue\n            else:print('NO');flag=0;break\n    if flag:print('YES')\n    \n    ",
                true
            ],
            [
                "def check(arr):\n\n    c = [1]*len(arr)\n    for i in arr:\n        if 0<=i-1<len(arr) and c[i-1]==1:\n            c[i-1]-=1\n        else:\n            return False\n    return True\n\ndef checkB(arr):\n    arr.sort()\n    for ind,i in enumerate(arr):\n        if(i < ind+1):\n            return False\n    return True\n\ndef checkR(arr,pad):\n    arr.sort()\n    for ind,i in enumerate(arr):\n        if(i > ind+1+pad):\n            return False\n    return True\n\ndef solve(n,p,c):\n    b = []\n    r = []\n    bc = rc = 0\n    if(check(p)):\n        return \"YES\"\n    else:\n        for i in range(n):\n            if(c[i]=='B'):\n                b.append(p[i])\n                bc+=1\n            else:\n                r.append(p[i])\n                rc+=1\n        if(bc == n):\n            if(checkB(p)):\n                return \"YES\"\n        elif(rc == n):\n            if(checkR(p,0)):\n                return \"YES\"\n        else:\n            if(checkB(b) and checkR(r,bc)):\n                return \"YES\"\n    return \"NO\"\n            \n\n\nt = int(input())\n\nfor test in range(t):\n    n = int(input())\n    p = list(map(int,input().split()))\n    c = input()\n    print(solve(n,p,c))",
                true
            ],
            [
                "answers = []\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    b = []\n    r = []\n    for i in range(n):\n        if s[i] == 'B':\n            b.append(arr[i])\n        else:\n            r.append(arr[i])\n    b.sort()\n    r.sort()\n    bi = 0\n    rj = 0\n    ans = \"NO\"\n    for k in range(1, n + 1):\n        if bi < len(b) and b[bi] >= k:\n            bi += 1\n        elif rj < len(r) and r[rj] <= k:\n            rj += 1\n        else:\n            break\n    else:\n        ans = \"YES\"\n    answers.append(ans)\nprint(*answers, sep='\\n')",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou are given an array of n positive integers a_1, a_2, \u2026, a_n. Your task is to calculate the number of arrays of n positive integers b_1, b_2, \u2026, b_n such that: \n\n  * 1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and \n  * b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1). \n\n\n\nThe number of such arrays can be very large, so print it modulo 998 244 353.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "\n\"\"\"\n\nfrom\nhttps://atcoder.jp/contests/arc115/submissions/27470789\n\n\"\"\"\n\nimport sys\nfrom sys import stdin\n\ninput = sys.stdin.readline\nN = int(input())\na = list(map(int, input().split()))\nmod = 998244353\n\ndp = [0] * (N + 1)\ndp[0] = 1\ns = []\nsm = 0\nfor i in range(N):\n    x = a[i]\n\n    c = dp[i]\n    if i & 1: c = -dp[i]\n\n    while len(s) and s[-1][0] >= x:\n        v, cc = s.pop()\n        c += cc\n        c %= mod\n        sm -= v * cc\n        sm %= mod\n\n    s.append((x, c))\n    sm += x * c\n    sm %= mod\n\n    if i & 1: dp[i + 1] -= sm\n    else: dp[i + 1] += sm\n    dp[i + 1] %= mod\n\nprint(dp[-1])\n",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\n\nmod=998244353\n\nn=int(input())\nL=list(map(int,input().split()))\n\ndef solve(L):\n    res=L[0]\n    resmem=[L[0]]\n    for i in range(1,len(L)):\n        if L[i]>=L[i-1]:\n            res*=(L[i]-1)\n            res%=mod\n            resmem.append(res)\n        else:\n            pt=i-1\n            state=1\n            while L[pt]>L[i]:\n                if pt==0:break\n                pt-=1\n                state*=-1\n                res+=state*resmem[pt]\n                res%=mod\n            res*=L[i]\n            res%=mod\n            state*=-1\n            if pt==0 and L[pt]>L[i]:\n                res+=L[i]*state\n                res%=mod\n            else:\n                res+=resmem[pt]*state\n                res%=mod\n            resmem.append(res)\n    return res%mod\n\nprint(solve(L))",
                true
            ],
            [
                "import sys\n\n# sys.setrecursionlimit(200005)\nint1 = lambda x: int(x)-1\npDB = lambda *x: print(*x, end=\"\\n\", file=sys.stderr)\np2D = lambda x: print(*x, sep=\"\\n\", end=\"\\n\\n\", file=sys.stderr)\ndef II(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline().rstrip()\ndij = [(0, 1), (-1, 0), (0, -1), (1, 0)]\n# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\ninf = 18446744073709551615\n# inf = 4294967295\n# md = 10**9+7\nmd = 998244353\n\nn = II()\naa = LI()\n\ndp = [0]*(n+1)\ndp[0] = 1\nstack = []\ns = 0\nfor i, a in enumerate(aa):\n    t = -dp[i]\n    while stack and stack[-1][0] >= a:\n        pa, v = stack.pop()\n        s -= pa*v\n        t += v\n        s %= md\n        t %= md\n    s += t*a%md\n    s %= md\n    dp[i+1] = s\n    stack.append((a, t))\n\nans = dp[-1]\nif n & 1: ans = -ans%md\n\nprint(ans)\n",
                true
            ],
            [
                "n = int(input());a = list(map(int, input().split()));mod = 998244353;stack = [(0, 0), (a[0], 1)];now = a[0]\nfor v in a[1:]:\n    to = -now;now *= 1 - v;now %= mod\n    while stack[-1][0] > v:r, d = stack.pop();now -= (r - v) * d;now %= mod;to += d\n    stack.append((v, to % mod))\nprint(now % mod) if n % 2 else print((mod - now) % mod)\n",
                true
            ],
            [
                "n = int(input())\na = list(map(int,input().split()))\nmod = 998244353\nstack = [(0, 0), (a[0], 1)]\nnow = a[0]\n\nfor v in a[1:]:\n    to = -now\n    now *= 1 - v\n    now %= mod\n    while stack[-1][0] > v:\n        r, d = stack.pop()\n        now -= (r - v) * d\n        now %= mod\n        to += d\n    stack.append((v, to % mod))\n\nif n % 2 == 1:\n    print(now % mod)\nelse:\n    print((mod - now) % mod)",
                true
            ],
            [
                "MOD = 998244353\nN, = map(int, input().split())\nX = [0] + list(map(int, input().split()))\nY = [0]*(N+1)\n\nstack = [(-1, 0)]\nfor i in range(1, N+1):\n    while stack and stack[-1][0] > X[i]:\n        stack.pop()\n    Y[i] = stack[-1][1]\n    stack.append((X[i], i))\ndp = [0]*(N+1)\ndp[0] = 1\nS = [[0, 0] for _ in range(N+1)]\nfor i in range(1, N+1):\n    x = X[i]\n    k = Y[i]\n\n    if i%2:\n        dp[i] = (S[i-1][0] - S[k][0])*x\n    else:\n        dp[i] = (S[i-1][1] - S[k][1])*x\n#    print(i, k, dp[i])\n    if k > 0:\n        dp[i] += pow(-1, i-k+1)*dp[k]*(x-1)\n    else:\n        dp[i] += pow(-1, i-k+1)*(dp[k]*x)\n    dp[i]%=MOD\n    S[i][0] += S[i-1][0] + pow(-1, i)*dp[i]\n    S[i][1] += S[i-1][1] + pow(-1, i+1)*dp[i]\n    S[i][0] %= MOD\n    S[i][1] %= MOD\n#print(S)\n#print(dp)\nprint(dp[-1]%MOD)\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou are given strings S and T, consisting of lowercase English letters. It is guaranteed that T is a permutation of the string abc. \n\nFind string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nString a is a permutation of string b if the number of occurrences of each distinct character is the same in both strings.\n\nA string a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds:\n\n  * a is a prefix of b, but a \u2260 b;\n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a string S (1 \u2264 |S| \u2264 100), consisting of lowercase English letters.\n\nThe second line of each test case contains a string T that is a permutation of the string abc. (Hence, |T| = 3).\n\nNote that there is no limit on the sum of |S| across all test cases.\n\nOutput\n\nFor each test case, output a single string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nExample\n\nInput\n\n\n7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n\n\nOutput\n\n\naaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n\nNote\n\nIn the first test case, both aaaabbc and aaaabcb are lexicographically smaller than aaaacbb, but they contain abc as a subsequence.\n\nIn the second test case, abccc is the smallest permutation of cccba and does not contain acb as a subsequence.\n\nIn the third test case, bcdis is the smallest permutation of dbsic and does not contain bac as a subsequence.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "def main():\n    for _ in range(int(input())):\n        s = \"\".join(sorted(input()))\n        t = input()\n        A = 0\n        B = 0\n        C = 0\n        for c in s:\n            if c == 'a': A+=1\n            if c == 'b': B+=1\n            if c == 'c': C+=1\n        if t != \"abc\" or A*B*C ==0:\n            print(s)\n        else:\n            B, C = 0,0\n            D =\"\"\n            for c in s:\n                if c == 'a':\n                    print(\"a\", end=\"\")\n                elif c == 'b':\n                    B+=1\n                elif c == 'c':\n                    C+=1\n                else:\n                    D+=c\n            print(C*'c'+B*'b'+D)\nmain()",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    from collections import Counter\n    target_count = 3\n    target_string = \"abc\"\n\n    string_s = input()\n    string_t = input()\n    counter = Counter(string_s)\n    sorted_counter = sorted(counter.items())\n\n    if len(sorted_counter) < target_count or sorted_counter[2][0] != 'c' or sorted_counter[0][0] != 'a' or sorted_counter[1][0] != 'b':\n        ans = [x * y for x, y in sorted_counter]\n        ans = \"\".join(ans)\n        print(ans)\n        continue \n\n    if string_t == target_string:\n\n        if len(sorted_counter) > target_count:\n            ans = [sorted_counter[0], sorted_counter[2], sorted_counter[1]] + sorted_counter[3:]\n        else:\n            ans = [sorted_counter[0], sorted_counter[2], sorted_counter[1]]\n        ans = [x * y for x, y in ans]\n        ans = \"\".join(ans)\n        print(ans)\n    else:\n        ans = [x * y for x, y in sorted_counter]\n        ans = \"\".join(ans)\n        print(ans)",
                true
            ],
            [
                "kl = int(input())\nfor kkl in range(kl):\n \n  str=input()\n  t=input()\n  sp=list(str)\n  sp.sort()\n  sp.append(1)\n  i=0\n \n  if \"a\" in sp and \"b\" in sp and \"c\" in sp and t==\"abc\":\n    while sp[i]==\"a\":\n      i+=1\n    ka=i\n    while (sp[i]==\"c\" or sp[i]==\"b\") and i<len(sp):\n      i+=1\n    if i == len(sp):\n      i+=1\n\n    sp1=sp[ka:i]\n    sp1.reverse()\n    sp[ka:i]=sp1\n \n  for i in range(len(sp)-1):\n    print(sp[i], end=\"\")\n  print()",
                true
            ],
            [
                "from typing import Counter\n\n\nt = int(input())\n\nfrom collections import Counter\n\nfor _ in range(t):\n    S = input()\n    T = input()\n\n    l = list(S)\n    c = Counter(l)\n\n    if T != 'abc':\n        l.sort()\n        ans = ''.join(l)\n    elif 'a' not in c or 'b' not in c or 'c' not in c:\n        l.sort()\n        ans = ''.join(l)\n    else:\n        merged = list(c.items())\n        merged.sort()\n        # print(merged)\n        merged[1], merged[2] = merged[2], merged[1]\n\n        l = []\n        for c1, freq in merged:\n            l.append(c1 * freq)\n\n        ans = ''.join(l)\n\n\n    print(ans)\n\n\n    \n\n\n\n\n\n\n    \n",
                true
            ],
            [
                "I=input\nfor _ in[0]*int(I()):\n s=sorted(I());t=I()\n if{*t}<={*s}and'abc'==t:i,j=map(s.index,'bc');j+=s.count('c');s[i:j]=s[j-1:i-1:-1]\n print(*s,sep='')",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    t=input()\n    a=b=c=e=''\n    for i in s:\n        if i=='a':\n            a+='a'\n        elif i=='b':\n            b+='b'\n        elif i=='c':\n            c+='c'\n        else:\n            e+=i\n    if a=='' or b=='' or c=='':\n        ans=a+b+c+''.join(sorted(e))\n        print(ans)\n        continue\n    if t[0]!='a':\n        ans=a+b+c+''.join(sorted(e))\n    elif t[1]=='b':\n        ans=a+c+b+''.join(sorted(e))\n    else:\n        ans=a+b+c+''.join(sorted(e))\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    t = input()\n    if t[0] not in s or t[1] not in s or t[2] not in s:\n        print(''.join(sorted(s)))\n    elif t != 'abc':\n        print(''.join(sorted(s)))\n    else:\n        a1 = s.count('a')\n        b1 = s.count('b')\n        c1 = s.count('c')\n        s1 = sorted(s)\n        viv = ''.join(s1[a1 + c1 + b1:])\n        print(a1 * 'a' + c1 * 'c' + b1 * 'b' + viv)\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    pr = input()\n    d = {}\n    for el in s:\n        if el in d.keys():\n            d[el]+=1\n        else:\n            d[el]=1\n\n    ans = ''\n    # print(d)\n    \n    for el in sorted(d.keys()):\n        while (d[el]>0):\n            ans+=el\n            d[el]-=1\n    new_ans = ''\n    # import time; time.sleep(1)\n    if pr == 'abc' and 'a' in ans and 'b' in ans and 'c' in ans:\n        # print('AAAAAA>',pr,ans)\n        # k = 0\n        \n        # for i in range(1,len(ans)-1):\n        #     if ans[i-1]=='a' and ans[i] == 'b':\n        #         li = i\n        #         while (ans[li+1]=='b' and li<len(ans)-2):\n        #             li+=1\n        #         if ans[li+1]=='c':\n        #             # print(ans,i)\n        #             ans = ans[:i] + 'c' + ans[i+1:]\n        #             # ans[i] = 'c'\n        #             ans = ans[:li+1] + 'b' + ans[li+2:]\n        #             # ans[li+1]= 'b'\n        #             k+=1\n\n        # ans = ans.replace('')\n        ccount = ans.count('c')\n        bcount = ans.count('b')\n        # if ccount >= bcount:\n        ans = ans.replace('b','c',min(bcount,ccount))\n        ans = ans[::-1].replace('c','b',min(bcount,ccount))[::-1]\n\n        # ans = ans.replace('b','c',ans.count('c'))[::-1].replace('c','b',ans.count('b')-ans.count('c'))[::-1]\n    \n    print(ans)\n    # print(d.keys())",
                true
            ],
            [
                "import sys\nimport collections as cc\n\nI = lambda : list(map(int,input().split()))\nmod = 10**9+7\ndef ch(temp):\n    tans = 0\n    for i in range(len(temp)-k-1,-1,-k):\n        tans += 2*abs(temp[i])\n    return tans \n\nfor tc in range(int(input())):\n    s = input()\n    t = input()\n    ar = [s.count('a'),s.count('b'),s.count('c')]\n    new = [i for i in s if i not in ['a','b','c']]\n    new.sort()\n    #print(ar)\n    if t!='abc' or (ar[0]==0 or ar[1]==0 or ar[2]==0):\n        print('a'*ar[0]+'b'*ar[1]+'c'*ar[2]+''.join(new))\n    else:\n        print('a'*ar[0]+'c'*ar[2]+'b'*ar[1]+''.join(new))\n\n\n",
                true
            ],
            [
                "for i in range(int(input())):\n    s=input()\n    t=input()\n    z=[0]*26\n    for i in s:\n        z[ord(i)-ord('a')]+=1\n    if t=='abc' and z[0] and z[1] and z[2]:\n        print('a'*z[0]+'c'*z[2]+'b'*z[1],end='')\n        for i in range(3,26):\n            print('abcdefghijklmnopqrstuvwxyz'[i]*z[i],end='')\n        print()\n    else:\n        for i in range(26):\n            print('abcdefghijklmnopqrstuvwxyz'[i]*z[i],end='')\n        print()",
                true
            ],
            [
                "'''input\n'''\nimport sys\nimport math\nimport bisect\nfrom sys import stdin,stdout\nfrom math import gcd,floor,sqrt,log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl,bisect_right as br\n\nsys.setrecursionlimit(100000000)\n\ninp    =lambda: int(input())\nstrng  =lambda: input().strip()\njn     =lambda x,l: x.join(map(str,l))\nstrl   =lambda: list(input().strip())\nmul    =lambda: map(int,input().strip().split())\nmulf   =lambda: map(float,input().strip().split())\nseq    =lambda: list(map(int,input().strip().split()))\n\nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\n\nflush  =lambda: stdout.flush()\nstdstr =lambda: stdin.readline()\nstdint =lambda: int(stdin.readline())\nstdpr  =lambda x: stdout.write(str(x))\n\nmod=1000000007\n\ndef solve(s, t):\n    _dict = {\n        'a': 0,\n        'b': 0,\n        'c': 0\n    }\n\n    pattern = 'abc'\n\n    for word in s:\n        if word not in _dict:\n            _dict[word] = 1\n        else:\n            _dict[word] += 1\n\n    if t == pattern:\n        pattern = 'acb'\n\n    if _dict['a'] == 0:\n        pattern = 'bca'\n\n    res = _dict[pattern[0]] * pattern[0] + _dict[pattern[1]] * pattern[1] + _dict[pattern[2]] * pattern[2]\n\n    for key in sorted(_dict):\n        if key not in ['a', 'b', 'c']:\n            res += key * _dict[key]\n    return res\n\nt = inp()\nres = []\n\nfor i in range(t):\n    s = input()\n    t = input()\n    res.append(solve(s, t))\n\nfor i in res:\n    print(i)\n\n\n\n#abacaba\n# a = 4\n# b = 2\n# c = 1\n\n# abc\n# acb\n# bac\n# bca\n# cab\n# cba\n\n# aaaabbc : wrong\n\n",
                true
            ],
            [
                "def solve(s,t):\n    s = list(s)\n    if t != \"abc\" or \"a\" not in s or \"b\" not in s or \"c\" not in s:\n        s.sort()\n    else:\n        a_count = s.count('a')\n        b_count = s.count('b')\n        c_count = s.count('c')\n        f_s = [j for j in s if j not in 'abc']\n        f_s.sort()\n        s = [\"a\"]*a_count + [\"c\"]*c_count + [\"b\"] * b_count + f_s\n    return ''.join(s)\n\ndef main():\n    ans = []\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        t = input()\n        ans.append(solve(s,t))\n    for a in ans:\n        print(a)\n\n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "for k in range(int(input())):\n    s=sorted(list(input()))\n    t=input()\n    if 'a' in s and 'b' in s and 'c' in s and t=='abc':\n        i2=s.index('b')\n        s=''.join(s)\n        i3=s.count('a')+s.count('b')+s.count('c')\n        s='a'*s.count('a')+'c'*s.count('c')+'b'*s.count('b')+s[i3:]\n    else:\n        s=''.join(s)\n    print(s)\n    \n          \n    ",
                true
            ],
            [
                "t=int(input())\nfor i in range(0,t):\n    s=input()\n    T=input()\n    ss=''.join(sorted(s))\n    lt=[]\n    for j in range(0,3):\n        lt.append(T[j])\n    ls=[]\n    ls.append(ss[0])\n\n    for j in range(1,len(s)):\n        if(ls[-1]!=ss[j]):\n            ls.append(ss[j])\n\n    ls.sort()\n    #print(lt)\n    #print(ls)\n    flag=0\n    for j in range(0,len(ls)-1):\n        if(lt==ls[j:j+3]):\n            flag=1\n\n    if(flag==0):\n        #print(\"a\")\n        print(ss)\n    else:\n        s_lt_m=-1\n        s_lt_l=-1\n        s_lt_l_l=-1\n        for j in range(0,len(ss)):\n            if(ss[j]==lt[1] and s_lt_m==-1):\n                s_lt_m=j\n            if(ss[j]==lt[2] and s_lt_l==-1):\n                s_lt_l=j\n            if(ss[j]>lt[2]):\n                s_lt_l_l=j-1\n                break\n        if(s_lt_l_l==-1):\n            s_lt_l_l=len(ss)-1\n            final_string=ss[0:s_lt_m]+((lt[2])*((s_lt_l_l-s_lt_l)+1))+ss[(s_lt_m):s_lt_l]\n            print(final_string)\n        else:\n\n            final_string = ss[0:s_lt_m] + ((lt[2]) * ((s_lt_l_l - s_lt_l) + 1)) + ss[(s_lt_m):s_lt_l] + ss[s_lt_l_l+1:len(ss)]\n            print(final_string)\n\n\n",
                true
            ],
            [
                "import sys\ninpu=sys.stdin.readline\nprin=sys.stdout.write\nI=lambda:[*map(int,inpu().split())]\n\nt=I()[0]\nfor _ in range(t):\n    s = [*inpu().strip()]\n    t = inpu().strip()\n    a = sorted(s)\n    ass = a.count('a')\n    bss = a.count('b')\n    css = a.count('c')\n    tot = ass + bss + css\n    if t == 'abc' and ass > 0 and bss > 0 and css > 0:\n        a = ['a'] * ass + ['c'] * css + ['b'] * bss + a[tot:]\n    print(''.join(a))",
                true
            ],
            [
                "import itertools\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        s = input()\n        t = input()\n        x = list(sorted(s))\n        if t[0] not in x or t[1] not in x or t[2] not in x or t[0] == 'b' or t[0] == 'c':\n            print(\"\".join(x))\n        else:\n            nove = \"\"\n            prve = \"\"\n            druhe = \"\"\n            stare = \"\"\n            i = 0\n            #print(x)\n            while i != len(x) and x[i] != t[1]:\n                #print(x[i], t[1])\n                nove += x[i]\n                i += 1\n            while i != len(x) and x[i] != t[2]:\n                #print(x[i], t[2])\n                prve += x[i]\n                i += 1\n            #print(i, x[i], t[2], len(x))\n            while i != len(x) and x[i] == t[2]:\n                #print(x[i], t[2])\n                druhe += x[i]\n                i += 1\n            while i != len(x):\n                stare += x[i]\n                i += 1\n            cele = nove + druhe + prve + stare\n            #print(nove, prve, druhe, stare)\n            print(\"\".join(cele))\n\n\n\nmain()\n\"\"\"\n1\nbbbbaaacccc\nabc\n\n1\ncccba\nacb\n\"\"\"",
                true
            ],
            [
                "##########################################################################\n#     Author : nesco   \n#     Created: Mon Dec 27 2021 10:43:58\n#     File   : A. Forbidden Subsequence\n##########################################################################\nimport sys,math,cmath,time,collections\nfrom string import ascii_lowercase\n##########################################################################\n################# ---- THE ACTUAL CODE STARTS BELOW ---- #################\ndef solve():\n    s = insr()\n    t = insr()\n\n    if t != \"abc\":\n        print(sort_string(s))\n    else:\n        r = \"\"\n        st = string_counter(s)\n        for i in range(26):\n            if i == 1:\n                if st[0] == 0 or st[1] == 0 or st[2] == 0:\n                    r = r + ascii_lowercase[1]*st[1]\n                else:\n                    r = r + ascii_lowercase[2]*st[2]\n            elif i == 2:\n                if st[0] == 0 or st[1] == 0 or st[2] == 0:\n                    r = r + ascii_lowercase[2]*st[2]\n                else:\n                    r = r + ascii_lowercase[1]*st[1]\n            elif st[i] != 0:\n                r = r + ascii_lowercase[i]*st[i]\n        print(r)\n\n################## ---- THE ACTUAL CODE ENDS ABOVE ---- ##################\n##########################################################################\n \ndef main():\n    global tt\n    t = inp()\n    for tt in range(1,t + 1):\n        solve()\n \n#---------------------- USER DEFINED INPUT FUNCTIONS --------------------#\ndef inp():   # input integer\n    return(int(input()))\ndef inlt():  # input list of integers\n    return(list(map(int,input().split())))\ndef inls():  # input list of strings\n    return(list(map(str,input().split())))\ndef insr():  # input string\n    return(input().strip())\ndef invr():  # input array\n    return(map(int,input().split()))\n \n#------------------ USER DEFINED PROGRAMMING FUNCTIONS ------------------#\n# set to list converter\ndef convert(set):\n    return list(set)\n\n# outputs unique values from list\ndef unique(list):\n    list_set = set(list)\n    unique_list = convert(list_set)\n    return unique_list\n\n# sorting string\ndef sort_string(string):\n    r = sorted(string)\n    return \"\".join(r)\n\n# reverse string\ndef reverse_string(string):\n    return string[::-1]\n\n# list of all prime numbers up to n\ndef seive(n):\n    a = []\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p ** 2,n + 1, p): \n                prime[i] = False\n        p = p + 1\n    for p in range(2,n + 1): \n        if prime[p]: \n            a.append(p)\n    return(a)\n\ndef counter(a):\n    q = [0] * max(a)\n    for i in range(len(a)):\n        q[a[i] - 1] = q[a[i] - 1] + 1\n    return(q)\n \n# counts number of elements \ndef counter_elements(a):\n    q = dict()\n    for i in range(len(a)):\n        if a[i] not in q:\n            q[a[i]] = 0\n        q[a[i]] = q[a[i]] + 1\n    return(q)\n\n# counts number of letters in string\ndef string_counter(a):\n    q = [0] * 26\n    for i in range(len(a)):\n        q[ord(a[i]) - 97] = q[ord(a[i]) - 97] + 1\n    return(q)\n \n# returns factorial of n\ndef factorial(n,m = 1000000007):\n    q = 1\n    for i in range(n):\n        q = (q * (i + 1)) % m\n    return(q)\n\n# returns all (possible) factors of n\ndef factors(n):\n    q = []\n    for i in range(1,int(n ** 0.5) + 1):\n        if n % i == 0: q.append(i); q.append(n // i)\n    return(list(sorted(list(set(q)))))\n\n# returns prime factors of n\ndef prime_factors(n):\n    q = []\n    while n % 2 == 0: q.append(2); n = n // 2\n    for i in range(3,int(n ** 0.5) + 1,2):\n        while n % i == 0: q.append(i); n = n // i\n    if n > 2: q.append(n)\n    return(list(sorted(q)))\n\n# transpose matrix or vector (list)\ndef transpose(a):\n    n,m = len(a),len(a[0])\n    b = [[0] * n for i in range(m)]\n    for i in range(m): \n        for j in range(n): \n            b[i][j] = a[j][i]\n    return(b)\n\n# returns boolean if x is power of two\ndef power_two(x):\n    return (x and (not(x & (x - 1))))\n\n# returns ceil of division\ndef ceil(a, b):\n    return -(-a // b)\n#-----------------------------------------------------------------------#\n    \nmain()",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    a=str(input())\n    b=str(input())\n    if (\"a\" or \"b\" or \"c\") not in a:\n        print (\"\".join(sorted(a)))\n    else:\n        if b==\"abc\":\n            noa,nob,noc=0,0,0\n            final=\"\".join(sorted(a))\n            for j in final:\n                if j==\"a\": noa+=1\n                elif j==\"b\": nob+=1\n                elif j==\"c\": noc+=1\n            print (\"a\"*noa + \"c\"*noc + \"b\"*nob + final[noa+nob+noc:])\n        else:\n            print (\"\".join(sorted(a)))\n    \n\n",
                true
            ],
            [
                "for j in range(int(input())):\n    st = input()\n    t = input()\n    li = list(t)\n    dic = {'a':0,'b':0,'c':0}\n    dic['a'] = st.count('a')\n    dic['b'] = st.count('b')\n    dic['c'] = st.count('c')\n    ans=\"\"\n    ans+='a'*dic['a']\n    if(t.index('a')==0 and 'a' in st):\n        ans+=t[2]*dic[t[2]]\n        ans+=t[1]*dic[t[1]]\n    else:\n        ans += 'b' * dic['b']\n        ans += 'c' * dic['c']\n    lis=[]\n    for ch in st:\n        if(ch!='a' and ch!='b' and ch!='c'):\n            lis.append(ch)\n    lis.sort()\n    temp = \"\".join(lis)\n    print(ans+temp)\n",
                true
            ],
            [
                "from collections import defaultdict\nfor _ in range(int(input())):\n    s1 = list(input())\n    s2 = list(input())\n    check = defaultdict(int)\n    for i in s1:\n        check[i]+=1\n    ans = list(check.keys())\n    ans=sorted(ans)\n    ans2 = sorted(s2)\n    if not (ans2 == s2 and check[\"a\"]>=1 and check[\"b\"]>=1 and check[\"c\"]>=1):\n        final = sorted(s1)\n        for i in final:\n            print(i,end=\"\")\n        print()\n    else:\n        final = \"\"\n        for i in ans:\n            if not(i!=\"b\" and i!=\"c\"):\n                pass\n            if i!=\"b\" and i!=\"c\":\n                final+=i*check[i]\n            elif i==\"c\":\n                final+=i*check[i]\n                final+=\"b\"*check[\"b\"]\n        print(final)",
                true
            ],
            [
                "\n# abacaba\n# abc\n\nfrom collections import Counter\n\nif __name__ == '__main__':\n    T = int(input())\n    for _ in range(T):\n        S = input().strip()\n        T = input().strip()\n        cnt = Counter(S)\n        if cnt[\"a\"] == 0 or cnt[\"b\"] == 0 or cnt[\"c\"] == 0:\n            print(\"\".join(sorted(S)))\n        else:\n            if T == \"abc\":\n                ans = \"\"\n                ans += \"a\"*cnt[\"a\"]\n                ans += \"c\"*cnt[\"c\"]\n                ans += \"b\"*cnt[\"b\"]\n                for i in \"defghijklmnopqrstuvwxyz\":\n                    ans += i * cnt[i]\n                print(\"\".join(ans))\n            else:\n                print(\"\".join(sorted(S)))",
                true
            ],
            [
                "import sys\nimport os.path\n \nif(os.path.exists('input.txt')) :\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    sys.stderr = open(\"error.txt\", \"w\")\n    \ndepth = 200001\nmod = 1000000007 \nlim = mod * mod\nsys.setrecursionlimit(depth) \n \nlinp = lambda: list(minp())\nminp = lambda: map(int, input().split())\n \nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\n\ndxy = [(1, 0),(-1, 0),(0, 1),(0, -1)]\n\ndef expo(a, b) :\n    if not b : return 1\n    v = expo(a, b//2)\n    v = (v * v) % mod\n    if b%2 : v = (v * a) % mod\n    return v\n\ndef modinv(a, b) :\n    d = expo(b, mod-2)\n    v = (a * d) % mod\n    return v\n\ndef checkPrime(n) :\n    if n < 4 : return True\n    if n%2 == 0 : return False\n    for i in range(3, int(sqrt(n))+1, 2) :\n        if n%i == 0 :\n            return False\n    return True    \n\ndef highestPowerof2(x):\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n\n    return x ^ (x >> 1)\n\nfor _ in range(int(input())) :\n    s, t = input(), input()\n    d = [0 for _ in range(26)] \n    for e in s : d[ord(e)-ord('a')] += 1\n    r = \"\"\n    r += 'a' * d[0]\n    if t == 'abc' and 'a' in s and 'b' in s and 'c' in s:\n        r += 'c' * d[2]\n        r += 'b' * d[1]\n    else :\n        r += 'b' * d[1]\n        r += 'c' * d[2]\n    for i in range(3, 26) :\n        r += chr(ord('a') + i) * d[i]\n    print(r)",
                true
            ],
            [
                "from sys import stdin, stdout\n\n\nts = int(stdin.readline())\nfor tt in range(ts):\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    a = [c for c in s]\n    a.sort()\n\n    if t == 'abc' and a[0] == 'a':\n        try:\n            bi = a.index('b')\n        except ValueError as e:\n            bi = -1\n\n        try:\n            ci = a.index('c')\n        except ValueError as e:\n            ci = -1\n\n        if bi != -1 and ci != -1:\n            while ci + 1 < len(a) and a[ci + 1] == 'c':\n                ci += 1\n            while bi < ci and a[bi] == 'b' and a[ci] == 'c':\n                # print(''.join(a), bi, ci, '!')\n                a[bi], a[ci] = 'c', 'b'\n                bi += 1\n                ci -= 1\n\n    stdout.write(''.join(a) + '\\n')\n",
                true
            ],
            [
                "import collections\ndef lis(s,t):\n    l=list(s)\n    d=collections.Counter(l)\n    ts=list(d.keys())\n    ts.sort()\n    if (len(s)<len(t))|(t[0] not in s)|(t[1] not in s)|(t[2] not in s):\n        ans=''\n        for x in ts:\n            ans=ans+x*d.get(x)\n        return ans\n    else:\n        if t[:2]!='ab':\n            ans='a'*d.get('a')+'b'*d.get('b')+'c'*d.get('c')\n            for x in ts[3:]:\n                ans=ans+x*d.get(x)\n            return ans\n        else:\n            ans='a'*d.get('a')+'c'*d.get('c')+'b'*d.get('b')\n            for x in ts[3:]:\n                ans=ans+x*d.get(x)\n            return ans\n\nn=int(input())\nip=[]\nipt=[]\nop=[]\nfor x in range(n):\n    s=str(input())\n    t=str(input())\n    ip.append(s)\n    ipt.append(t)\nfor i in range(len(ip)):\n    ans=lis(ip[i],ipt[i])\n    op.append(ans)\nfor x in op:\n    print(x)",
                true
            ],
            [
                "n=int(input())\n\ntrans=str.maketrans(\"bc\",\"cb\")\ndef getOut(s1,s2):\n    L=[]\n    countDic={\"a\":0,\"b\":0,\"c\":0}\n    for i in range(len(s1)):\n        if s1[i] in countDic:\n            countDic[s1[i]]+=1\n\n\n    if s2==\"abc\" and countDic[\"a\"]>0 and countDic[\"b\"]>0 and countDic[\"c\"]>0:\n        s1=s1.translate(trans)\n        for i in range(len(s1)):\n            L.append(s1[i])\n        L.sort()\n        return \"\".join(L).translate(trans)\n    else:\n        for i in range(len(s1)):\n            L.append(s1[i])\n        L.sort()\n        return \"\".join(L)\n\nfor i in range(n):\n    print(getOut(input(),input()))",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    t = input()\n    x = [0] * 3\n    xd = []\n    for i in range(len(s)):\n        if s[i] == 'a': x[0] += 1\n        elif s[i] == 'b': x[1] += 1\n        elif s[i] == 'c': x[2] += 1\n        else:\n            xd += [s[i]]\n    xd = sorted(xd)\n    if x[0] > 0 and x[1] > 0 and x[2] > 0 and t == 'abc':\n        for _ in range(x[0]):\n            print('a', end = '')\n        for _ in range(x[2]):\n            print('c', end = '')\n        for _ in range(x[1]):\n            print('b', end = '')\n        for i in range(len(xd)):\n            print(xd[i], end = '')\n        print()\n    else:\n        for _ in range(x[0]):\n            print('a', end = '')\n        for _ in range(x[1]):\n            print('b', end = '')\n        for _ in range(x[2]):\n            print('c', end = '')\n        for i in range(len(xd)):\n            print(xd[i], end = '')\n        print()",
                true
            ],
            [
                "def forbiddenSubsequence(s,t):\n\n    s = s.replace('\\r','')\n    t = t.replace('\\r','')\n    s = [i for i in s]\n    s.sort()\n\n    if t!='abc':\n\n        return ''.join(s)\n    \n    for i in t:\n        if i not in s:\n            return ''.join(s)\n    \n    i = s.index('b')\n    j = len(s) - s[::-1].index('c') - 1\n    \n    while i<j:\n        s[i], s[j] = s[j], s[i]\n        i += 1\n        j -= 1\n                                          \n    return ''.join(s)\n\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    print(forbiddenSubsequence(s,t)) ",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=''.join(sorted(input()))\n    t=input()\n    if t=='abc' and all(x in s for x in 'abc'):\n        tem=s.count('c')\n        s=s.replace('c','b')\n        print(s.replace('b','c',tem))\n    else: print(s)",
                true
            ],
            [
                "n = int(input())\nfor _ in range(n):\n    s = input()\n    t = input()\n    ss = sorted(s)\n    if t == 'abc':\n        if 'a' in ss and 'b' in ss and 'c' in ss:\n            bl = ss.index('b')\n            br = ss.index('c')\n            cl = br\n            cr = \"\".join(ss).rfind('c') + 1\n            ss = ss[:bl] + ss[cl:cr] + ss[bl:br] + ss[cr:]\n    print(\"\".join(ss))",
                true
            ],
            [
                "from collections import defaultdict\ndef solve(string,ref):\n    string.sort()\n    count = defaultdict(int)\n    for i in string:\n        count[i] += 1\n    if count['a']>0 and count['b']>0 and count['c']>0:\n        if (ref != ['a', 'b', 'c']):\n            return string\n        ans = \"\"\n        for _ in range(count['a']):\n            ans += 'a'\n        for _ in range(count['c']):\n            ans += 'c'\n        for _ in range(count['b']):\n            ans += 'b'\n        for key, value in count.items():\n            if (key != 'a' and key != 'b' and key != 'c'):\n                for _ in range(value):\n                    ans += key\n        return ans\n    return string\n\n\n\nt=int(input())\nfor _ in range(t):\n    string=list(input())\n    ref=list(input())\n    print(''.join(solve(string,ref)))\n",
                true
            ],
            [
                "# cook your dish here\n# cook your dish here\n#-------------------imports-------#\nimport sys\nimport io,os\nimport string\nfrom io import BytesIO, IOBase\nfrom os import path\nfrom collections import Counter,OrderedDict\nimport itertools\n\nfrom itertools import chain, combinations\nimport math\nimport random\nimport bisect\nfrom functools import reduce\nfrom sys import stdin,stdout\nfrom math import gcd,floor,sqrt,log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl,bisect_right as br\n\n\n#------------------ONLINE JUDGE OR NOT-------#\n\nif(path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\",\"r\")\n    sys.stdout = open(\"output.txt\",\"w\")\nelse:\n    input = sys.stdin.readline\n    # input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n\n\n\nsys.setrecursionlimit(100000000)\n\n\n\n#---------------------pre made and input functions-------#\nsimp    =lambda: int(input())\nstrng  =lambda: input().strip()\njn     =lambda x,l: x.join(map(str,l))\nstrl   =lambda: list(input().strip())\nmul    =lambda: map(int,input().strip().split())\nmulf   =lambda: map(float,input().strip().split())\nseq    =lambda: list(map(int,input().strip().split()))\nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\nflush  =lambda: stdout.flush()\nstdstr =lambda: stdin.readline()\nstdint =lambda: int(stdin.readline())\nstdpr  =lambda x: stdout.write(str(x))\n\n\n#------------functions---------------------\n\n#---------------------input-------\n\na = simp()\n\n\ndef if_its_binaryform_palindrome(n):\n\n    res = 0\n\n    k = n\n    while k > 0:\n        #to finish the job\n        res = (res << 1) | (k & 1)\n        k = k >> 1  \n\n    return n == res\n\n# prime = list_of_prime_sieve(10000000)        \n  \ndef solve(s,t):\n\n    first = t[0]\n    second = t[1]\n    third = t[2]\n\n    if 'a' not in s or 'b' not in s or 'c' not in s:\n        sortedd = sorted(s)\n        s = ''.join(sortedd)\n\n\n        return s\n\n\n    if s[0]=='a' and t[0]!='a':\n        sortedd = sorted(s)\n        s = ''.join(sortedd)\n        # s.sort()\n        return s\n    elif t[0]!='a':   \n        sortedd = sorted(s)\n        s = ''.join(sortedd)\n        # s.sort()\n        return s \n\n    sortedd = sorted(s)\n    s = ''.join(sortedd)    \n    # s.sort()\n        \n    d = Counter(s)  \n\n    r = ''\n    if t[1]=='b':\n        rr = ''\n        for i,j in d.items():\n            if i=='a':\n                r+=i*j\n            elif i=='b' and r[-1]=='a':\n                rr+=i*j\n            elif i=='c':\n                r+=i*j\n                r+=rr\n            else:\n                r+=i*j\n\n        return r\n    elif t[1]=='c':\n        rr = ''\n        for i,j in d.items():\n            if i=='a':\n                r+=i*j\n            elif i=='c' and r[-1]=='a':\n                rr+=i*j\n            elif i=='b':\n                r+=i*j\n                r+=rr\n            else:\n                r+=i*j\n        return r\n\n    # elif t[1]=='a':\n    #     rr = ''\n    #     for i,j in d.items():\n    #         r+=i*j\n\n    # return r       \n\n                        \n\n\n                    \n                    \n\n\n    # a a a a b b c\n\n\n    # abc\n\n    # t = 'abc'    \n\n\n\nfor i in range(a):\n    t = strng()\n    d = strng()\n    print(solve(t,d))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef seive(n):\n    \"\"\" preprocessing  \"\"\"\n \n    prime = [1 for i in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n         \n        # this is prime number.\n        if (prime[p] == 1):\n             \n            # Update all multiples of p in array\n            for i in range(p ** 2, n + 1, p):\n                prime[i] = 0\n                \n        p += 1\n    prime[0]= 0\n    prime[1]= 0\n    \n    # print(prime)\n    for i in range(1,n+1):\n        prime[i] += prime[i-1]\n        \n    return prime\n\ndef list_of_prime_sieve(n):\n\n    #an array of True True\n    primes = [True]*(n+1)\n    #changing o and 1 to False\n    primes[0]==primes[1]==False\n\n    #now for every true we find\n    for i in range(2,int(n**(1/2))+1):\n        if primes[i]==True:\n            #we change their multiples to False\n            for j in  range(i*i,n+1,i):\n                primes[j]=False\n\n\n    list_primes = []\n    for i in range(2,len(primes)):\n        if primes[i]==True:\n            list_primes.append(i)\n\n    return list_primes\n\ndef count_primes(a):\n    return len(list_of_prime_sieve(a))    \n\n\ndef gcdoftwo(a,b):\n\n    #log(min(a,b))\n    if a == 0:\n        return b\n    else:\n        return gcdoftwo(b%a,a)\n\ndef lcm(a,b): return (a*b//(gcdoftwo(a,b)))        \n\ndef gcdofList(A): \n    res = A[0]\n    for c in A[1::]:\n        res = gcdoftwo(res , c) \n        if res == 1:\n            return res\n    return res         \n\ndef binpow(a,b):\n\n    #to calc a^b in log(n) time\n\n\n    res = 1\n\n\n    while b>0:\n\n        if b&1:\n            res = res*a\n        a = a*a\n        b>>=1\n    return res        \n\ndef fibo_in_logn(n):\n    if n == 0:\n        return [0, 1]\n\n    p = fibo_in_logn(n >> 1)\n    c = p.first * (2 * p.second - p.first)\n    d = p.first * p.first + p.second * p.second\n    if n & 1:\n        return {d, c + d}\n    else:\n        return {c, d}\n\n\n\n\n\ndef x_n_mod_m(a,b,m):\n\n    #to calculate x^n mod m\n\n    a  = a%m \n\n    res = 1\n    while b>0:\n        if b&1:\n            res = res*a%m \n        a = a*a%m\n        b>>=1\n\n    return res\n\n\n\n\ndef change_array(count,t):\n\n    emp = []\n    for i in range(len(t)):\n        emp.append(count[t[i]])\n    return emp    \n\n\n\n\n# prime = []\n\ndef simpleSieve(limit):\n\n    mark = [True for i in range(limit + 1)]\n    p = 2\n    while (p * p <= limit):\n        if (mark[p] == True):\n            for i in range(p * p, limit + 1, p):\n                mark[i] = False\n        p += 1\n    for p in range(2, limit):\n        if mark[p]:\n            prime.append(p)\n            # print(p,end = \" \")\n    return prime        \n\ndef segmentedSieve(n):\n    limit = int(math.floor(math.sqrt(n)) + 1)\n    t = []\n    t += simpleSieve(limit)\n\n    low = limit\n    high = limit * 2\n    while low < n:\n        if high >= n:\n            high = n\n\n        mark = [True for i in range(limit + 1)]\n\n        for i in range(len(prime)):\n\n            loLim = int(math.floor(low / prime[i]) *\n                                        prime[i])\n            if loLim < low:\n                loLim += prime[i]\n            for j in range(loLim, high, prime[i]):\n                mark[j - low] = False\n\n        # t = []        \n        for i in range(low, high):\n            if mark[i - low]:\n                t.append(i)\n                # print(i, end = \" \")\n\n        low = low + limit\n        high = high + limit\n\n    return t\n\n\n\n\nmod=1000000007\n\ndef occurrences(string, sub):\n    count = start = 0\n    while True:\n        start = string.find(sub, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    str = ''\n    res = ''\n\n    check = 0\n    count = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n\n    str1 = input()\n    str2 = input()\n    \n    str1 = sorted(str1)\n    str_len = len(str1)\n\n    str = str.join(str1)\n\n    b_and_c = {\n        'a': '',\n        'b': '',\n        'c': ''\n    }\n\n    if str2 != \"abc\" or str_len < 3:\n        print(str)\n        check = 1\n    else:\n       for j in range(str_len):\n            if str[j] == 'a':\n               b_and_c['a'] = b_and_c['a'] + 'a'\n               count1 = count1 + 1\n            elif str[j] == 'b':\n               b_and_c['b'] = b_and_c['b'] + 'b'\n               count2 = count2 + 1\n            elif str[j] == 'c':\n               b_and_c['c'] = b_and_c['c'] + 'c'\n               count3 = count3 + 1\n    \n    if check == 0:\n        if count1 != 0 and count2 != 0 and count3 != 0:\n            for j in range(count1):\n                res = res + 'a'\n\n            for j in range(count3):\n                res = res + 'c'\n\n            for j in range(count2):\n                res = res + 'b'\n\n            count = count1 + count2 + count3\n\n            for j in range(count, str_len):\n                res = res + str[j]\n\n            print(res)\n        else:\n            print(str)\n\n    \n\n",
                true
            ],
            [
                "import sys\n\n\ndef forbidden_sequence(s, t):\n    s = sorted(s)\n\n    if t != \"abc\":\n        return \"\".join(s)\n\n    if (\"a\" not in s) or (\"b\" not in s) or (\"c\" not in s):\n        return \"\".join(s)\n\n    a_end = 0\n    b_end = 0\n    c_end = 0\n    for i in range(len(s)):\n        if s[i] == \"a\":\n            a_end = i\n        elif s[i] == \"b\":\n            b_end = i\n        elif s[i] == \"c\":\n            c_end = i\n        else:\n            break\n\n    s = s[:a_end + 1] + s[b_end + 1: c_end + 1] + s[a_end + 1: b_end + 1] + s[c_end + 1:]\n\n    return \"\".join(s)\n\n\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    sys.stdout.write(f\"{forbidden_sequence(s, t)}\\n\")\n",
                true
            ],
            [
                "cases = int(input())\nfor i in range(cases):\n    S = input()\n    T = input()\n    S1 = (sorted(S))\n    flag = False\n    for item in T:\n        if item not in S1:\n            flag = True\n            break\n    if T[0] != 'a' or T[2]!='c':\n        flag = True\n    if flag:\n        print(''.join(S1))\n    else:\n        countb = 0\n        tempb = 0\n        countc = 0\n        for j, item in enumerate(S1):\n            if item == 'a':\n                continue\n            elif item == 'b': \n                if countb == 0:\n                    tempb = j\n                countb += 1\n            elif item == 'c':\n                countc += 1\n            else:\n                break\n        for i in range(countc+countb):\n            if countc>0:\n                S1[tempb+i] = 'c'\n                countc -= 1\n            else:\n                S1[tempb+i] = 'b'\n        print(''.join(S1))",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    s = input()\n    t = input()\n    slist = [i for i in s]\n    orderedlist = [i for i in s]\n    orderedlist.sort()\n    slice = ''.join(orderedlist)\n    t0c = slice.count(t[0])\n    t1c = slice.count(t[1])\n    t2c = slice.count(t[2])\n    if t[0] in slice and t[1] in slice and t[2] in slice:\n        indext0 = slice.index(t[0])\n        indext1 = slice.index(t[1])\n        indext2 = slice.index(t[2])\n        l = []\n        for i in orderedlist:\n            if (i,orderedlist.count(i)) in l:\n                continue\n            else:\n                l.append((i,orderedlist.count(i)))\n        l2 = tuple(a*b for (a,b) in l)\n        l7 = [a*b for (a,b) in l]\n        if indext0 < indext1 and indext1 < indext2:\n            v = 0\n            for i in l2:\n                if t[1] in i:\n                    l7[v] = t[2]*t2c\n                elif t[2] in i:\n                    l7[v] = t[1]*t1c\n                v += 1\n            print(''.join(l7))\n        else:\n            print(slice)\n    else:\n        print(slice)",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n    a = list(input())\n    t = input()\n    n = len(a)\n    a.sort()\n    if t == 'abc':\n        i = 0\n        j = n-1\n        flag = 0\n        for i in range(n):\n            if a[i] == 'a':\n                flag += 1\n                break\n        while i < j and flag:\n            while i < j and a[i] != 'b':\n                i += 1\n            while i < j and a[j] != 'c':\n                j -= 1\n            if i != j:\n                a[i] = 'c'\n                a[j] = 'b'\n    print(''.join(a))\n",
                true
            ],
            [
                "for i in range(int(input())):\n    \n    arr = list(input())\n    t = input()\n    arr.sort()\n    ca = arr.count('a')\n    cb = arr.count('b')\n    cc = arr.count('c')\n    \n    if t == 'abc':\n        if ca == 0:\n            pass\n        else:\n            for l in range(cc):\n                arr[ca+l]='c'\n            for l in range(cb):   \n                arr[ca+cc+l]='b'\n        result = ''.join(arr)\n    \n    else:\n        result = ''.join(arr)\n        \n    \n    print(result)",
                true
            ],
            [
                "t=int(input())\ndef do(s,t):\n    if (t[0] not in s) or (t[1] not in s) or (t[2] not in s):\n        ans=\"\"\n        for i in sorted(list(s)):\n            ans+=i\n        print(ans)\n        return\n    #c=s.count(t[1])\n    l=list(s)\n    l.sort()\n    ans=\"\"\n    if t!=\"abc\":\n        for i in l:\n            ans+=i\n    else:\n        for i in l:\n            ans+=i\n        c=s.count(\"b\")\n        ans=ans.replace(\"b\",\"\")\n        ind=ans[::-1].index(\"c\")\n        ans=ans[:len(ans)-ind]+\"b\"*c+ans[len(ans)-ind:]\n    print(ans)\n    return\nfor i in range(t):\n    s=input()\n    t=input()\n    do(s,t)",
                true
            ],
            [
                "T = int(input().rstrip())\n\ndef solve(s1, s2):\n    cand = \"\".join(sorted(set(s1)))\n    idx = cand.find(s2)\n    if idx == -1:\n        return \"\".join(sorted(s1))\n    \n    idx += 2\n    candl = list(cand)\n    candl[idx-1], candl[idx] = candl[idx], candl[idx-1]\n    \n    d = {}\n    for c in s1:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    \n    news = \"\"\n    for c in candl:\n        count = d[c]\n        rep_str = c * count\n        news += rep_str\n        \n    return news\n\nfor test in range(T):\n    s1 = input().rstrip()\n    s2 = input().rstrip()\n    res = solve(s1, s2)\n    print(res)\n    \n",
                true
            ],
            [
                "from sys import stdin\nfrom collections import Counter\ninput=stdin.readline\nrn=lambda:int(input())\nrns=lambda:map(int,input().split())\nrl=lambda:list(map(int,input().split()))\nrs=lambda:input().strip()\nYN=lambda x:print('YES') if x else print('NO')\nceil_div=lambda a,b:-(-a//b)\nmod=10**9+7\n\nfor _ in range(rn()):\n    s=rs()\n    t=rs()\n    c=Counter(s)\n    ans=''\n    if 'a' in c and 'b' in c and 'c' in c:\n        if t=='abc':\n            t='acb'\n        else:\n            t='abc'\n        for ch in t:\n            ans+=c[ch]*ch\n            del c[ch]\n    for ch in sorted(c.keys()):\n        ans+=c[ch]*ch\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = list(map(str, input().split()))\n    t = input()\n    s[0] = sorted(s[0])\n    if t!='abc':\n        print(*s[0], sep='')\n    else:\n        if 'c' in s[0] and 'a' in s[0] and 'b' in s[0]:\n            k = s[0].index('c')\n            l = k\n            while k<len(s[0]) and s[0][k]=='c':\n                k+=1\n            f = s[0].index('b')\n            m = s[0][:f]+s[0][l:k]+s[0][f:l]+s[0][k:]\n            print(*m, sep='')\n        else:\n            print(*s[0], sep='')",
                true
            ],
            [
                "import re\nI=input\nfor _ in[0]*int(I()):\n s=''.join(sorted(I()))\n if'abc'==I():s=re.sub('(a+)(b+)(c+)',r'\\1\\3\\2',s)\n print(s)",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    t = input()\n    if('a' not in s or 'b' not in s or 'c' \n    not in s):\n        s = \"\".join(sorted(s))\n        print(s)\n    else:\n        if(t!= 'abc'):\n            s = \"\".join(sorted(s))\n            print(s)\n        else:\n            s = sorted(s)\n            count_a = s.count('a')\n            count_b = s.count('b')\n            count_c = s.count('c')\n            ans = 'a'*count_a + 'c'*count_c + 'b'*count_b \n            s = ''.join(s)\n            ans += s[count_a+count_b+count_c:]\n            print(ans)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\nfor i in range(int(input())):\n    a = list(input().strip())\n    b = input().strip()\n    a.sort(key=lambda k:ord(k))\n    if b == 'abc' and 'a' in a and 'b' in a and 'c' in a:\n        a.sort(key=lambda k:(ord('b') if k == 'c' else (ord('c') if k == 'b' else ord(k))))\n    print(\"\".join(a)+'\\n')\n",
                true
            ],
            [
                "I=input\nfor _ in[0]*int(I()):\n s=sorted(I());t=I()\n if{*t}<={*s}and'abc'==t:i,j=map(s.index,'bc');j+=s.count('c');s[i:j]=s[i:j][::-1]\n print(*s,sep='')",
                true
            ],
            [
                "#####----ANTARA KUNDU----####\nimport random\nfrom collections import Counter, defaultdict\nfrom copy import deepcopy as dc\nimport math\ntry:\n    t=int(input())\n    for tt in range(1,t+1):\n        a=list(input())\n        b=list(input())\n        d=sorted(a)\n        c=list(set(a))\n        c.sort()\n        x,y=\"\".join(map(str,b)),\"\".join(map(str,c))\n        #print(b,c, b in c)\n        if not x in y and x!=y:\n            print(\"\".join(map(str,d)))\n        else:\n            #print(\"\".join(map(str,d)))\n            i=d.index(b[-1])\n            j=d.index(b[-2])\n            x=sorted(a,reverse=True)\n            k=x.index(b[-1])\n            k=len(d)-k\n            d=d[:j]+d[i:k]+d[j:i]+d[k:]\n            print(\"\".join(map(str,d)))\n        #n=int(input())\n        #a=list(map(int,input().split()))\n        #x,y=map(int,input().split())\n        \nexcept EOFError as e:\n    pass",
                true
            ],
            [
                "k=int(input())\nfor j in range(k):\n    s=input()\n    t=input()\n    s=list(s)\n    s.sort()\n    if ('a' not in s) or ('b' not in s) or ('c' not in s):\n        print(*s,sep='')\n    elif t!='abc':\n        print(*s,sep='')\n    else:\n        a=False\n        count=0\n        otv=''\n        for i in s:\n            if i=='b':\n                count+=1\n            elif i=='c':\n                a=True\n                \n            if i!='c' and a==True:\n                otv+='b'*count\n                count=0\n                a=False\n                \n            if i!='b':\n                otv+=i\n        if a==True and count!=0:\n            otv+='b'*count\n        print(otv)\n",
                true
            ],
            [
                "#Mamma don't raises quitter.................................................\n#manan is improving, keep hustling manan bhai ;)\nfrom collections import deque as de\nimport math\nimport sys\nfrom math import sqrt as sq\nfrom math import floor as fl\nfrom math import ceil as ce\nfrom sys import stdin, stdout\n\nsys.setrecursionlimit(10**7)\nfrom collections import Counter as cnt\nfrom functools import  reduce\n\nfrom itertools import groupby as gb\n#from fractions import Fraction as fr\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom typing import Coroutine\n\ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    \nclass My_stack():\n    def __init__(self):\n        self.data = []\n    def my_push(self, x):\n        return (self.data.append(x))\n    def my_pop(self):\n        return (self.data.pop())\n    def __iter__(self):\n        return iter(self.data)\n    def my_peak(self):\n        return (self.data[-1])\n    def my_contains(self, x):\n        return (self.data.count(x))\n    def my_show_all(self):\n        return (self.data)\n    def isEmpty(self):\n      return len(self.data)==0\n    def len(self):\n        return len(self.data)\n    \n\narrStack = My_stack() \n\nclass graph():\n    def __init__(self):\n        self.graphdict = {}\n    def add_edge(self, node, neighbor):\n        if node not in self.graphdict:\n            self.graphdict[node]=[neighbor]\n        else:\n            self.graphdict[node].append(neighbor)\n    def show_edge(self):\n        for node in self.graphdict:\n            for neighbors in self.graphdict:\n                print(node, neighbors)\n    def show_graph(self):\n        return self.graphdict\n\n    \n\n\n    \n            \n\n#decimal to binary   \ndef decimalToBinary(n): \n    return bin(n).replace(\"0b\", \"\")\n#binary to decimal\ndef binarytodecimal(n):\n    return int(n,2)\n\ndef isPrime(n) : \n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\ndef get_prime_factors(number):\n    prime_factors = []\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number = number / 2\n    for i in range(3, int(math.sqrt(number)) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(int(i))\n            number = number / i\n\n    if number > 2:\n        prime_factors.append(int(number))\n    return prime_factors\n\ndef get_frequency(list):\n    dic={}\n    for ele in list:\n        if ele in dic:\n            dic[ele] += 1\n        else:\n            dic[ele] = 1\n    return dic\n\ndef Log2(x): \n    return (math.log10(x) / \n            math.log10(2)); \n\n \n# Function to get product of digits\ndef getProduct(n):\n    product = 1\n    while (n != 0):\n        product = product * (n % 10)\n        n = n // 10\n    return product\n#fucntion to find regular bracket sequence\ndef regularBracketsequence(str,arrStack):\n    for i in range(len(str)):\n        if str[i] =='(':\n            arrStack.my_push(str[i])\n        else:\n            if arrStack.isEmpty():\n                return False\n            else:\n                arrStack.my_pop()\n    if arrStack.isEmpty():\n        return True\n    else:\n        return False\n\n#function to find LCM of two numbers\ndef lcm(x,y):\n   lcm = (x*y)//math.gcd(x,y)\n   return lcm\n\ndef isPowerOfTwo(n): \n    return (math.ceil(Log2(n)) == math.floor(Log2(n))); \n#to check whether the given sorted sequnce is forming an AP or not....\ndef checkisap(list):\n    d=list[1]-list[0]\n    for i in range(2,len(list)):\n        temp=list[i]-list[i-1]\n        if temp !=d:\n            return False\n    return True\n\n#seive of erathanos\ndef primes_method5(n):\n    out ={}\n    sieve = [True] * (n+1)\n    for p in range(2, n+1):\n        if (sieve[p]):\n            out[p]=1\n            for i in range(p, n+1, p):\n                sieve[i] = False\n    return out\n#fucntion to get unique number to a cell in a matrix\ndef id(i, j, col): #one based indexing and columnwise numeration\n    ans= (i-1)*col\n    ans+=j\n    return ans\n\n#function to get the sum of digits\ndef getSum(n): \n      \n    strr = str(n)\n    list_of_number = list(map(int, strr.strip()))\n    return sum(list_of_number)\ndef checkperfectsquare(n):\n    if (ce(sq(n)) == fl(sq(n))):\n        return True\n    else:\n        return False\n#this used for selecting r objects from n ojects\ndef combinatrics(n,r):\n    num=n\n    deno=n-r\n    pr=1\n    for i in range(num,deno,-1):\n        pr*=i\n    an=1\n    for i in range(1,r+1):\n        an*=i\n    ans=pr//an\n    return ans\n#ceil  function gives wrong answer after 10^17 so i have to create my own :)\n# because i don't want to doubt on my solution of 900-1000 problem set.\ndef ceildiv(x,y): \n    return (x+y-1)//y \n  \ndef di():return map(int, input().split())\ndef ii():return int(input())\ndef li():return list(map(int, input().split()))\ndef si():return list(map(str, input()))\ndef indict():\n    dic = {}\n    for index, value in enumerate(input().split()):\n        dic[int(value)] = int(index)\n    return dic\ndef frqdict(): \n    # by default it is for integer input. :)\n    dic={}\n    for index, value in enumerate(input()):\n        if value not in dic:\n            dic[value] =1\n        else:\n            dic[value] +=1\n    return dic\n\n#sys.stdin = open('input.txt', 'r')\n#sys.stdout = open('output.txt', 'w')\n#practice like your never won\n#perform like you never lost\nt=ii()\nwhile t:\n    t-=1\n    s=si()\n    ts=input()\n    if ts==\"abc\":\n        ac=s.count(\"a\")\n        bc=s.count(\"b\")\n        cc=s.count(\"c\")\n        s.sort()\n        if ac and bc and cc:\n            temp=\"\".join(s).rfind(\"c\")\n            final=\"a\"*(ac)+\"c\"*(cc)+\"b\"*(bc)+\"\".join((s[temp+1:]))\n            print(final)\n        else:\n            s.sort()\n            print(\"\".join(s))\n            \n\n    else:\n        s.sort()\n        print(\"\".join(s))\n\n    \n\n\n        \n        ",
                true
            ],
            [
                "def main():\n    from collections import Counter\n\n    for _ in range(int(input())):\n        s = list(input())\n        #print(s)\n        t = input()\n        f = (t == \"abc\" and \"a\" in s)\n        #print(f)\n        C = Counter(s)\n        ans = \"\"\n        i = 0\n        while i < 26:\n            if i == 1:\n                if f:\n                    ans += \"c\" * C[chr(2 + ord(\"a\"))]\n                    ans += \"b\" * C[chr(1 + ord(\"a\"))]\n                else:\n                    ans += \"b\" * C[chr(1 + ord(\"a\"))]\n                    ans += \"c\" * C[chr(2 + ord(\"a\"))]\n                i += 2\n                continue\n            else:\n                ans += chr(i + ord(\"a\")) * C[chr(i + ord(\"a\"))]\n            i += 1\n        print(ans)\nif __name__ == '__main__':\n    main()\n    ",
                true
            ],
            [
                "import sys,os,io\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\ninput = sys.stdin.readline\n\nfor _ in range (int(input())):\n    s = list(input().strip())\n    t = list(input().strip())\n    s.sort()\n    n = len(s)\n    if t != ['a','b','c']:\n        print(''.join(s))\n        continue\n    a = []\n    b = []\n    c = []\n    rem = []\n    for i in s:\n        if i=='a':\n            a.append(i)\n        elif i=='b':\n            b.append(i)\n        elif i=='c':\n            c.append(i)\n        else:\n            rem.append(i)\n    if len(a)==0 or len(b)==0 or len(c)==0:\n        f = a+b+c+rem\n    else:\n        f = a + c + b + rem\n    print(''.join(f))",
                true
            ],
            [
                "for _ in range(int(input())):\n    givenstr = sorted(input())\n    banned = input()\n    res = \"\"\n    count = 0\n    for i in givenstr:\n        if i == banned[count]:\n            count += 1\n        if count == 3:\n            break\n    if count == 3:\n        cnt = givenstr.count(banned[-1])\n        start = givenstr.index(banned[-1])\n        res += \"\".join(givenstr[:givenstr.index(banned[1])]) + \"\".join(givenstr[start:start + cnt]) + \"\".join(\n            givenstr[givenstr.index(banned[1]):start]) + \"\".join(givenstr[start + cnt:])\n        print(res)\n    else:\n        print(*givenstr, sep=\"\")\n",
                true
            ],
            [
                "# Problem: A. \u0417\u0430\u043f\u0440\u0435\u0449\u0451\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n# Contest: Codeforces - Codeforces Round #761 (Div. 2)\n# URL: https://codeforces.com/contest/1617/problem/0\n# Memory Limit: 256 MB\n# Time Limit: 1000 ms\n# \n# Powered by CP Editor (https://cpeditor.org)\n\nimport bisect\n\nmod = 10 ** 9 + 7\neps = 10 ** -9\n\n\ndef __gcd(a, b):\n    return a if b == 0 else __gcd(b, a % b)\n    \n\ndef __lcm(a, b):\n    return a * b / __gcd(a, b)\n\n\ndef __fact(n):\n    return 1 if n == 1 else n * __fact(n - 1)\n\n\ndef __mex(a):\n    mex = 0\n    a.sort()\n    for x in a:\n        if x <= mex:\n            mex += 1\n        else:\n            break\n    return mex\n\ndef __dist(x1, y1, x2, y2):\n    return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\ndef __getprimes(n):\n    isprime = [True for i in range(n + 1)]\n    primes = []\n     \n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i * i, n + 1, i):\n                isprime[j] = False\n    for i in range(2, n + 1):\n        if isprime[i]:\n            primes.append(i)\n    return primes\n\ndef __modInverse(a, m):\n    \n    m0 = m\n    y = 0\n    x = 1\n    if (m == 1):\n        return 0\n    \n    while(a > 1):\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = y\n        y = x - q * y\n        x = t\n    if (x < 0):\n        x = x + m0\n    return x\n    \n    \n    \ndef __isprime(n):\n    if n < 2:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n    \ndef __cntprimediv(n):\n    ret = 0\n    x = n\n    i = 2\n    while i * i <= x:\n        while n % i == 0:\n            n //= i\n            ret += 1\n        i += 1\n    if n > 1:\n        ret += 1\n    return ret\n    \ndef __primefactors(n):\n    ret = []\n    x = n\n    i = 2\n    while i * i <= x:\n        while n % i == 0:\n            ret.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        ret.append(n)\n    return ret\n    \n\ndef __sumdigit(n):\n    ret = 0\n    while n > 0:\n        ret += n % 10\n        n //= 10\n    return ret\n\ndef __zfunc(s):\n    n = len(s)\n    z = [0 for i in range(n)]\n    l = 0\n    r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 1\n    return z\n    \n    \ndef __to(n, x):\n    ret = ''\n    while n > 0:\n        q = n % x\n        if q < 10:\n            ret += str(q)\n        else:\n            ret += chr(q - 10 + ord('a'))\n        n //= x\n    return ret[::-1]\n    \n    \ndef solve(t):\n    s = list(input())\n    t = list(input())\n    s.sort()\n    \n    \n    \n    j = 0\n    for i in range(len(s)):\n        if j < len(t) and s[i] == t[j]:\n            j += 1\n    if j == len(t):\n        cntb = 0\n        cntc = 0\n        ans = ''\n        for c in s:\n            if c == 'b':\n                cntb += 1\n            elif c == 'c':\n                cntc += 1\n        \n        ss = 'c' * cntc + 'b' * cntb\n        for i in range(len(s)):\n            if s[i] != 'b' and s[i] != 'c':\n                ans += s[i]\n            else:\n                ans += ss\n                ss = ''\n        s = list(ans)\n    print('' . join(s))\n        \n        \nt = 1\nt = int(input())\n\n\nfor i in range(t):\n    solve(i + 1)",
                true
            ],
            [
                "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    S = input()\n    T = input()\n    cnt = Counter(S)\n    x = sorted(cnt.items(), key = lambda x:x[0])\n#     print(cnt)\n    ans = \"\"\n    if T == \"abc\" and 'a' in S and 'b' in S and 'c' in S:\n        ans += 'a'*cnt['a']\n        ans += 'c'*cnt['c']\n        ans += 'b'*cnt['b']\n    for i in range(len(x)):\n        if x[i][0] in ans:\n            continue\n        else:\n            ans += x[i][0]*x[i][1]\n    print(ans)\n        \n        \n        \n            ",
                true
            ],
            [
                "t = int(input())\n\nfor p in range(t):\n    s = list(input())\n    a = input()\n    s.sort()\n    if a==\"abc\":\n        if \"a\" in s and \"b\" in s and \"c\" in s:\n            for i in range(len(s)):\n                if s[i]==\"b\":\n                    s[i] = \"ab\"\n                if s[i] == \"c\":\n                    s[i] = \"aac\"\n            s.sort()\n            for i in range(len(s)):\n                if s[i] == \"ab\":\n                    s[i] = \"b\"\n                if s[i] == \"aac\":\n                    s[i] = \"c\"\n    print(\"\".join(s))\n",
                true
            ],
            [
                "from collections import defaultdict\n\nfrom collections import defaultdict,Counter,deque\nfrom sys import stdin,stdout,setrecursionlimit\nfrom math import *\nfrom bisect import bisect_left,bisect_right\nfrom statistics import mode\nfrom functools import reduce\nimport operator as op\n\n############################################################\n\nI   = lambda : stdin.readline().rstrip('\\r\\n')\nari = lambda : list(map(int,I().split()))\nars = lambda : list(map(str,I().split()))\narf = lambda : list(map(float,I().split()))\nmpi = lambda : map(int,I().split())\nmps = lambda : map(str,I().split())\nmpf = lambda : map(float,I().split())\n\n############################################################\n\nmod = 10**9+7\nsetrecursionlimit(10**8)\ninf = float('inf')\n\n############################################################\n\ndef power(A, B, p):\n\n    res = 1  # Initialize result\n    A = A % p  # Update A if it is more , than or equal to p\n\n    if A == 0:\n        return 0\n\n    while B > 0:\n\n        if (B & 1) == 1:  # If B is odd, multiply, A with result\n            res = (res * A) % p\n\n        B = B >> 1  # B = B/2\n        A = (A * A) % p\n\n    return res\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, ceil(sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef nearest2(num):\n\n    return int(pow(2,int(log(num,2))))\n\ndef comb(n, r):\n    r = min(r, n-r)\n    if r < 0: return 0\n\n    numer = reduce(op.mul, range(n, n-r, -1), 1)\n    denom = reduce(op.mul, range(1, r+1), 1)\n    return numer // denom\n\n#############################################################\n\nfor t1 in range(int(input())):\n    S1 = input()\n    T1 = input()\n    ans1 = ''\n\n    D1 = defaultdict(int)\n\n    for i in S1: D1[i] += 1\n\n    if 0 in [D1['a'], D1['b'], D1['c']]:\n        print(''.join(sorted(S1)))\n\n    else:\n\n        if T1 == 'abc':\n\n            for i in S1:\n                if i == 'a':\n                    ans1 += i\n\n            for i in S1:\n                if i == 'c':\n                    ans1 += i\n\n            for i in S1:\n                if i == 'b':\n                    ans1 += i\n\n\n        else:\n\n            for i in S1:\n                if i == 'a':\n                    ans1 += i\n\n            for i in S1:\n                if i == 'b':\n                    ans1 += i\n\n            for i in S1:\n                if i == 'c':\n                    ans1 += i\n\n        temp2 = ''\n\n        for i in S1:\n\n            if i not in T1:\n                temp2 += i\n\n        ans1 += ''.join(sorted(temp2))\n\n        print(ans1)",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    dic = {}\n    s = input()\n    for c in s:\n        dic[c] = dic.get(c, 0) + 1\n    t = input()\n    if t == \"abc\" and \"a\" in dic and \"b\" in dic and \"c\" in dic:\n        for c in \"acbdefghijklmnopqrstuvwxyz\":\n            if c in dic:\n                print(c * dic[c], end = \"\")\n    else:\n        for c in \"abcdefghijklmnopqrstuvwxyz\":\n            if c in dic:\n                print(c * dic[c], end=\"\")\n    print()\n\n",
                true
            ],
            [
                "import math\nimport functools\nfrom sys import stdout\n\nn = int(input())\n\nfor i in range(0, n):\n    # n = list(map(int, input().split(' ')))\n    # a = list(sorted([(int(x), i) for i, x in enumerate(input().split(' '))], reverse=True))\n    #\n    # a = [(x[1], (i + 2) // 2 * x[0] * 2, (i + 2) // 2 * (-1 if (i + 2) % 2 > 0 else 1)) for i, x in enumerate(a)]\n    # # a = list(map(lambda x: x[1], sorted(a)))\n    #\n    # print(functools.reduce(lambda x, z: x + z[1], a, 0))\n    # stdout.flush()\n    # a.sort()\n    # print(\"0\", ' '.join(map(lambda x: str(x[2]), a)))\n\n    s = input()\n    t = input()\n\n    s = (''.join(list((sorted(s)))))\n    # print(s)\n\n    if t[1:] == 'bc' and 'a' in s and 'b' in s and 'c' in s:\n        a = s.count('a')\n        c = s.count('c')\n        b = s.count('b')\n\n        s = s.replace(\"a\", \"\")\n        s = s.replace(\"b\", \"\")\n        s = s.replace(\"c\", \"\")\n\n\n        s = ''.ljust(a, 'a') + ''.ljust(c, 'c') + ''.ljust(b, 'b') + s\n\n    print(s)",
                true
            ],
            [
                "for _ in range(int(input())):\n  s = input()\n  t = input()\n\n  if t == 'abc':\n    # being careful\n    u = list(sorted(s))\n\n    if 'a' in u and 'b' in u and 'c' in u:\n      ib = u.index('b')\n      ic = u.index('c')\n      ric = len(u) - u[::-1].index('c')\n      u = u[:ib] + u[ic:ric] + u[ib:ic] + u[ric:]\n\n    print(''.join(u))\n  else:\n    print(''.join(sorted(s)))",
                true
            ],
            [
                "import sys,os,io\n#input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n#input = sys.stdin.readline\nimport math\nimport bisect\nt=int(input())\nfor a0 in range(t):\n    s=input()\n    t=input()\n    f=0 \n    for i in t:\n        if(i==\"b\"):\n            f=1 \n            break \n        elif(i==\"c\"):\n            break \n    s=list(s)\n    s.sort()\n    cb=0 \n    cc=0 \n    if(t==\"abc\" and \"a\" in s):\n        for i in s:\n            if(i==\"b\"):\n                cb+=1 \n            elif(i==\"c\"):\n                cc+=1 \n                \n        res=''\n        if(\"a\" in s):\n            res+=(s.count(\"a\")*\"a\")\n        res+=cc*\"c\";res+=cb*\"b\"\n        for i in s:\n            if(i==\"a\" or i==\"b\" or i==\"c\"):\n                pass \n            else:\n                res+=i \n        print(res)\n                \n        \n        \n    else:\n        print(\"\".join(s))",
                true
            ],
            [
                "def fun(s,s1):\n    if len(s)<len(s1):\n        return False\n    l=[]\n    for x in s1:\n        if x in s:\n            i=s.index(x)\n            l.append(i)\n        else:\n            return False\n    l1=sorted(l)\n    if l1==l:\n        return True\n    else:\n        return False\nT=int(input())\nfor _ in range(T):\n    s=input().rstrip()\n    t=input().rstrip()\n    s2=''.join(sorted(s))\n    s3=''\n    if t=='abc':\n        if fun(s2,t):\n            idx1=s2.index('b')\n            idx2=s2.index('c')\n            idx3=idx1\n            idx4=idx2\n            for i in range(idx1,idx2):\n                if s2[i]=='b':\n                    if idx3<i:\n                        idx3=i\n            for i in range(idx2,len(s2)):\n                if s2[i]=='c':\n                    if idx4<i:\n                        idx4=i\n                else:\n                    break\n            s3=s2[0:idx1]+s2[idx2:idx4+1]+s2[idx1:idx3+1]+s2[idx4+1:]\n            print(s3)\n        else:\n            print(s2)\n    else:\n        print(s2)\n        ",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input().strip()\n    t = input().strip()\n    fs = {}\n    for char in s:\n        fs[char] = fs.get(char, 0)+1\n    ft = {}\n    for char in t:\n        ft[char] = ft.get(char, 0)+1\n    \n    flag = False\n    for char in ft:\n        if ft[char] > fs.get(char,0):\n            flag = True\n            break\n    \n    if flag:\n        ans = ''.join(sorted(s))\n    else:\n        if t != ''.join(sorted(t)):\n            ans = ''.join(sorted(s))\n        else:\n            *_, c1, c2 = t\n            ans = ''\n            for char in sorted(fs.keys()):\n                if char == c1:\n                    pass\n                elif char == c2:\n                    ans += (c2*fs[c2] + c1*fs[c1])\n                else:\n                    ans += char*fs[char]\n    print(ans)\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ndef iinput(): return int(input())\ndef sinput(): return input().rstrip()\ndef i0input(): return int(input()) - 1\ndef linput(): return list(input().split())\ndef liinput(): return list(map(int, input().split()))\ndef miinput(): return map(int, input().split())\ndef li0input(): return list(map(lambda x: int(x) - 1, input().split()))\ndef mi0input(): return map(lambda x: int(x) - 1, input().split())\nINF = 10**20\nMOD = 1000000007\n\nt = iinput()\nfor _ in [0] * t:\n    s = sinput()\n    t = sinput()\n    if t != 'abc':\n        print(''.join(sorted(s)))\n    else:\n        tmp = ''\n        a = 0\n        b = 0\n        c = 0\n        for ss in s:\n            if ss == 'a':\n                a += 1\n            elif ss == 'b':\n                b += 1\n            elif ss == 'c':\n                c += 1\n            else:\n                tmp += ss\n        if a * b * c == 0:\n            print(''.join(sorted(s)))\n        else:\n            print('a' * a + 'c' * c + 'b' * b + ''.join(sorted(tmp)))",
                true
            ],
            [
                "def solve():\n        str_ = input()\n        abc = input()\n        str_ = ''.join(sorted(str_))\n        #print(str_)\n        a = str_.find(abc[1])\n        if (a==-1):\n                print(str_)\n                return 0;\n        b = str_.find(abc[2])\n        if (b==-1):\n                print(str_)\n                return 0;\n        c = str_.find(abc[0])\n        if (c==-1):\n                print(str_)\n                return 0;\n        if(abc!=\"abc\"):\n                print(str_)\n                return 0;\n        index=len(str_)\n        for i in range(b,len(str_)):\n                #print('str i',str_[i])\n                if(str_[i]!=abc[2]):\n                        index = i-1;\n                        break;\n        #print(a,b,index)\n        str_ = str_[0:a] + str_[b:index+1] + str_[a:b] + str_[index+1:]\n        print(str_)\n        return 0;\n                       \n\nfor t in range(int(input())):\n        solve();\n    \n                \n    \n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    t = input()\n    flag = 0\n    l = [0]*26\n    for c in s:\n        l[ord(c)-97]+=1\n    if l[1]>0 and t=='abc' and l[2]>0 and l[0]>0:\n        flag=1\n    print('a'*l[0],end='')\n    if flag:\n        print('c'*l[2],end='')\n        l[2]=0\n    for i in range(1,26):\n        print(chr(i+97)*l[i],end='')\n    print()\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    t = input()\n    count = [0 for i in range(26)]\n    for i in s:\n        count[ord(i)-97] += 1\n    if count[0] == 0 or count[1] == 0 or count[2] == 0:\n        for i in range(26):\n            print(chr(97+i) * count[i], end=\"\")\n        print()\n    else:\n        if t == 'abc':\n            print(chr(97) * count[0], end=\"\")\n            print(chr(99) * count[2], end=\"\")\n            print(chr(98) * count[1], end=\"\")\n            for i in range(3, 26):\n                print(chr(97 + i) * count[i], end=\"\")\n            print()\n        else:\n            for i in range(26):\n                print(chr(97 + i) * count[i], end=\"\")\n            print()",
                true
            ],
            [
                "#     __  __                __    _ __      ______                \n#    / / / /___ ___________/ /_  (_) /_    / ____/___ __________ _\n#   / /_/ / __ `/ ___/ ___/ __ \\/ / __/   / / __/ __ `/ ___/ __ `/\n#  / __  / /_/ / /  (__  ) / / / / /_    / /_/ / /_/ / /  / /_/ / \n# /_/ /_/\\__,_/_/  /____/_/ /_/_/\\__/____\\____/\\__,_/_/   \\__, /  \n#                                  /_____/               /____/   \n\nfrom collections import Counter\nfrom sys import *\nfrom collections import defaultdict as dd\nfrom math import *\n\n# sys.stdin = open('input.txt', 'r')  \n# sys.stdout = open('output.txt', 'w')\n\n#input functions\ndef inp():\n    return int(stdin.readline().strip())\ndef vinp():\n    return map(int,stdin.readline().strip().split())\ndef linp():\n    return list(map(int,stdin.readline().strip().split()))\ndef sinp(n = 1):\n    if n==1:\n        return stdin.readline().strip()\n    elif n==2:\n        return list(stdin.readline().strip())\n    else:\n        return list(stdin.readline().split())\n\n#output function\ndef pr(*x, end = \"\\n\"):\n    print(*x,end = end)\n\n#others\ndef mod(f, val = 1000000007):\n    return f % val\ndef csort(c):\n    sorted(c.items(), key=lambda pair: pair[1], reverse=True)\ndef indc(l,n):\n    c={}\n    for i in range(n):\n        c[l[i]]=c.get(l[i],[])+[i+1]\n    return c\n\nif __name__ ==\"__main__\":\n    cou=inp()\n    for _ in range(cou):\n        s = sinp(2)\n        s2 = sinp(2)\n        c = dd(int)\n        for i in s:\n            c[i]+=1\n        k = list(c.keys())\n        k.sort()\n        t2 = sorted(s2)\n        if t2 == s2 and c[\"a\"]>=1 and c[\"b\"]>=1 and c[\"c\"]>=1:\n            t = \"\"\n            for i in k:\n                if i!=\"b\" and i!=\"c\":\n                    t+=i*c[i]\n                elif i==\"c\":\n                    t+=i*c[i]\n                    t+=\"b\"*c[\"b\"]\n            pr(t)\n        else:\n            k = sorted(s)\n            for i in k:\n                pr(i,end=\"\")\n            pr()",
                true
            ],
            [
                "import sys\ntokens = ''.join(sys.stdin.readlines()).split()[::-1]\n\ndef next(): return tokens.pop()\ndef nextInt(): return int(next())\ndef nextFloat(): return float(next())\ndef getIntArray(n): return [nextInt() for _ in range(n)]\ndef getFloatArray(n): return [nextFloat() for _ in range(n)]\ndef getStringArray(n): return [next() for _ in range(n)]\n\n\ntestcase = True\ndef solve(testcase = 1):\n    S, T = next(), next()\n    S = ''.join(sorted(list(S)))\n    \n    a, b, c = S.count('a'), S.count('b'), S.count('c')\n    if T == 'abc' and a and b and c:\n        ans = 'a' * a + 'c' * c + 'b' * b\n        for i in range(len(S)):\n            if S[i] not in T:\n                ans += S[i:]\n                break\n        print(ans)\n    else:\n        print(''.join(S))\n    pass\n\n\nif testcase is None:\n    testcaseCount = 1\n    while tokens:\n        solve(testcaseCount)\n        testcaseCount += 1\nelse:\n    testcaseCount = nextInt() if testcase else 1\n    for tc in range(testcaseCount):\n        solve(tc + 1)\n    assert not tokens",
                true
            ],
            [
                "T = (int)(input())\n\nwhile T > 0:\n    T -= 1\n    str1 = input().strip()\n    cnt = [0] * 26\n    for c in str1:\n        cnt[ord(c) - 97] += 1\n    str2 = input().strip()\n    str2 = 'acb' if str2 == 'abc' and all([cnt[idx] for idx in range(3)]) else 'abc'\n    for alp in str2:\n        while cnt[ord(alp) - 97] > 0:\n            cnt[ord(alp) - 97] -= 1\n            print(alp, end='')\n\n    for idx in range(26):\n        while cnt[idx] > 0:\n            cnt[idx] -= 1\n            print((chr)(97 + idx), end='')\n\n    print('')",
                true
            ],
            [
                "# cook your dish here\nt = int(input())\nfor x in range(t):\n    s = input()\n    t1 = input()\n    if s.count('a')==0 or s.count('b')==0 or s.count('c')==0:\n        s = ''.join(sorted(s))\n        s = str(s)\n        print(s)\n    else:\n        if t1[0]!='a':\n            s = ''.join(sorted(s))\n            s = str(s)\n            print(s)\n        else:\n            if t1=='acb':\n                s = ''.join(sorted(s))\n                s = str(s)\n                print(s)\n            else:\n                a = s.count('a')\n                c = s.count('c')\n                b = s.count('b')\n                ans = ''\n                ans = ans + 'a'*a + 'c'*c + 'b'*b\n                lst = []\n                for j in s:\n                    if j!='a' and j!='b' and j!='c':\n                        lst.append(j)\n                lst.sort()\n                for j in lst:\n                    ans = ans + j\n                print(ans)",
                true
            ],
            [
                "from string import ascii_lowercase\n\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    s = \"\".join(sorted(s))\n    if t == \"abc\" and \"a\" in s and \"b\" in s and \"c\" in s:\n        m = {c: s.count(c) for c in ascii_lowercase}\n        for _ in range(m[\"a\"]):\n            print(\"a\", end=\"\")\n        for _ in range(m[\"c\"]):\n            print(\"c\", end=\"\")\n        for _ in range(m[\"b\"]):\n            print(\"b\", end=\"\")\n        for c in ascii_lowercase[3:]:\n            for _ in range(m[c]):\n                print(c, end=\"\")\n        print()\n    else:\n        print(s)\n",
                true
            ],
            [
                "import re,collections\nfor _ in range(int(input())):\n    s=list(input())\n    r=input()\n    s.sort()\n    s=\"\".join(s)\n    #c=['abc','acb','bac','bca','cab','cba']\n    x=\"abc\" if r>\"abc\" else 'acb'\n    y=collections.Counter(x)\n    for e in s:\n        if e in y: y[e]+=1\n    m='123'\n    if any(t==1 for t in y.values()):\n        print(s)\n        continue\n    #print(y)\n    for i,k in enumerate('abc'):\n        s=s.replace(k*(y[k]-1)+':'*(y[k]-1==0),m[i])\n        #print(s)\n    l=1\n    for w in x:\n        s=s.replace(str(l),w*(y[w]-1))\n        #print(s,w*(y[w]-1),l,w)\n        l+=1\n    print(s)",
                true
            ],
            [
                "from sys import stdin\nfrom string import ascii_lowercase\n\n\ndef read_input():\n    S = stdin.readline().rstrip()\n    T = stdin.readline().rstrip()\n    return S, T\n\n\ndef solve(S, T):\n    answer = 0\n\n    if T == 'abc':\n        others = []\n        for alphabet in ascii_lowercase:\n            if alphabet != 'a' and alphabet != 'b' and alphabet != 'c':\n                others.append(alphabet * S.count(alphabet))\n        others = ''.join(others)\n        if S.count('a') > 0:\n            answer = S.count('a') * 'a' + S.count('c') * 'c' + S.count('b') * 'b' + others\n        else:\n            answer = S.count('b') * 'b' + S.count('c') * 'c' + others\n    else:\n        answer = [S.count(alphabet) * alphabet for alphabet in ascii_lowercase]\n        answer = ''.join(answer)\n\n    return answer\n\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        input = read_input()\n        answer = solve(*input)\n        print(answer)\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    s=list(input())\n    #print(s)\n    t=input()\n    s.sort()\n    if t==\"abc\":\n        a=s.count(\"a\")\n        b=s.count(\"b\")\n        c=s.count(\"c\")\n        ans=\"\"\n        if a>0 and b>0 and c>0 :\n            d={\"a\":0,\"b\":2,\"c\":1,\"d\":4,\"e\":5,\"f\":6,\"g\":7,\"h\":8,\"i\":9,\"j\":10,\"k\":11,\"l\":12,\"m\":12,\"n\":14,\"o\":15,\"p\":16,\"q\":17,\"r\":18,\"s\":19,\"t\":20,\"u\":21,\"v\":22,\"w\":23,\"x\":24,\"y\":25,\"z\":26}\n            s.sort(key=lambda x:d[x]) \n    print(\"\".join(s))",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s1=input()\n    s2=input()\n    s3=sorted(s1)\n    n1=s1.count(\"a\")\n    n2=s1.count(\"b\")\n    n3=s1.count(\"c\")\n    if s2==\"abc\":\n        if n1!=0:\n            print(\"\".join([\"a\"*(s1.count(\"a\"))+\"c\"*(s1.count(\"c\"))+\"b\"*(s1.count(\"b\"))]+s3[n1+n2+n3:]))\n        else:\n            print(\"\".join(s3))\n    else:\n        print(\"\".join(s3))",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    t = input()\n    if('a' not in s or 'b' not in s or 'c' not in s):\n        s = \"\".join(sorted(s))\n        print(s)\n    else:\n        if(t != 'abc'):\n            s = \"\".join(sorted(s))\n            print(s)\n        else:\n            s = sorted(s)\n            cnt_a = s.count('a')\n            cnt_b = s.count('b')\n            cnt_c = s.count('c')\n            ans = 'a'*cnt_a + 'c'*cnt_c + 'b'*cnt_b \n            s = ''.join(s)\n            ans += s[cnt_a+cnt_b+cnt_c:]\n            print(ans)",
                true
            ],
            [
                "import sys\nfrom math import sqrt,gcd\nfrom collections import deque\nsys.setrecursionlimit(10**8)\nI  =lambda :int(input())\nS  =lambda :input().strip()\nM  =lambda :map(int,input().strip().split())\nL  =lambda :list(map(int,input().strip().split()))\nmod=1000000007\n\n##########################################################\n\n\ndef change(i):\n    if t==\"abc\":\n        s[i+1],s[i+2]=s[i+2],s[i+1]\n    else:\n        s[i],s[i+1],s[i+2]=\"a\",\"b\",\"c\"\n\nfor i in range(I()):\n    s=list(S())\n    t=S()\n    s.sort()\n    n=len(s)\n    if n<3 or t!=\"abc\":\n        print(''.join(s))\n        continue \n    if s.count('a')==0 or s.count('b')==0 or s.count('c')==0:\n        print(''.join(s))\n        continue\n    ans=[]\n    b=0\n    c=0\n    i=0\n    while i<n and s[i] not in ['b','c']:\n        ans.append(s[i])\n        i+=1\n    while i<n and s[i]=='b':\n        b+=1\n        i+=1\n    while i<n and s[i]=='c':\n        c+=1\n        i+=1\n    ans.append(\"c\"*c+\"b\"*b)\n    while i<n:\n        ans.append(s[i])\n        i+=1\n    print(\"\".join(ans))\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range (0,t):\n    c=[0 for i in range (0,123)]\n    a=input()\n    b=input()\n    a1=0\n    b1=0\n    c1=0\n    ans=''\n    ans1=[]\n    for ele in a:\n        if(ele=='a'):\n            a1+=1\n        elif(ele=='b'):\n            b1+=1\n        elif(ele=='c'):\n            c1+=1\n        else:\n            ans1.append(ele)\n    ans1.sort()\n    if(a1>0 and b1>0 and c1>0):\n        if(b=='abc'):\n            for i in range (0,a1):\n                ans+='a'\n            for i in range (0,c1):\n                ans+='c'\n            for i in range (0,b1):\n                ans+='b'\n            for ele in ans1:\n                ans+=ele\n        elif(b=='acb'):\n            for i in range (0,a1):\n                ans+='a'\n            for i in range (0,b1):\n                ans+='b'\n            for i in range (0,c1):\n                ans+='c'\n\n            for ele in ans1:\n                ans+=ele\n        else:\n            for i in range (0,a1):\n                ans+='a'\n            for i in range (0,b1):\n                ans+='b'\n            for i in range (0,c1):\n                ans+='c'\n\n            for ele in ans1:\n                ans+=ele\n        \n    else:\n        for i in range (0,a1):\n            ans+='a'\n        for i in range (0,b1):\n            ans+='b'\n        for i in range (0,c1):\n            ans+='c'\n\n        for ele in ans1:\n            ans+=ele\n    print(ans)\n        \n        \n            ",
                true
            ],
            [
                "from collections import defaultdict\n\ntt = int(input())\n\nfor _ in range(tt):\n    s = input()\n    t = input()\n\n    if t == \"abc\" and 'a' in s and 'b' in s and 'c' in s:\n        f = defaultdict(int)\n        for i in s:\n            f[i] += 1\n\n        ans = \"\"\n        ans += 'a' * f['a']\n        del f['a']\n        \n        ans += 'c' * f['c']\n        del f['c']\n\n        ans += 'b' * f['b']\n        del f['b']\n\n        for i in sorted(f):\n            ans += i * f[i]\n\n        print(ans)\n\n    else:\n        print(''.join(sorted(s)))\n",
                true
            ],
            [
                "def prepareString(str):\n    bIndex = 0\n    bEnd = 0\n    cIndex = 0\n    cEnd = len(str)\n    for i in range(len(str)):\n        if str[i] == 'b' and bIndex == 0:\n            bIndex = i\n        elif str[i] == 'c' and cIndex == 0:\n            bEnd = i-1\n            cIndex = i\n        elif str[i] > 'c':\n            cEnd = i-1\n            break\n    if cEnd == len(str)-1:\n        return str[0:bIndex] + str[cIndex:cEnd+1] + str[bIndex:bEnd+1]\n    return str[0:bIndex] + str[cIndex:cEnd+1] + str[bIndex:bEnd+1] + str[cEnd+1:]\n        \ndef forbiddenSub(S,T):\n    if T[0]>T[1] or T[1]>T[2]:\n        return S\n    else:\n        letters = {'a':0,'b':0,'c':0}\n        ind = 0\n        while(ind < len(S) and S[ind] <= 'c'):\n            letters[S[ind]] = letters.get(S[ind]) + 1\n            ind+=1\n        if not (letters.get('c') and letters.get('b') and letters.get('a')):\n            return S\n        else:\n            return prepareString(S)\n\ncases = int(input())\nfor i in range(cases):\n    S = input()\n    T = input()\n    S_ = sorted(S)\n    print(''.join(forbiddenSub(S_,T)))",
                true
            ],
            [
                "kl = int(input())\nfor kkl in range(kl):\n \n  str=input()\n  t=input()\n  sp=list(str)\n  sp.sort()\n  sp.append(1)\n  i=0\n\n  if \"a\" in sp and \"b\" in sp and \"c\" in sp and t==\"abc\":\n    while sp[i]==\"a\":\n      i+=1\n    ka=i\n    while sp[i]==\"b\":\n      i+=1\n    kb=i\n    while sp[i]==\"c\" and i<len(sp):\n      i+=1\n    if i == len(sp):\n      i+=1\n    t=min(kb-ka, i-kb)\n    sp[ka:ka+t], sp[i-t:i]=[\"c\"]*t, [\"b\"]*t\n\n  for i in range(len(sp)-1):\n    print(sp[i], end=\"\")\n  print()\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=sorted(input())\n    s1=input()\n    if 'a' in s and 'b' in s and 'c' in s and s1=='abc':\n        s=''.join(str(x) for x in s)\n        a=s.count('a')\n        b=s.count('b')\n        c=s.count('c')\n        r=a+b+c\n        s='a'*a+'c'*c+'b'*b+s[r:]\n    else:\n        s=''.join(str(x) for x in s)\n    print(s)\n        ",
                true
            ],
            [
                "from collections import defaultdict\nfor _ in range(int(input())):\n    n1=input();n2=input()\n    dp=defaultdict(int)\n    for i in range(1,27):\n        dp[i]=0\n    for i in n1:\n        x=ord(i)-96\n        dp[x]+=1\n    ans=\"\"\n    if 'abc'==n2:\n        if dp[1]==0:\n            ans+=('b'*dp[2]+'c'*dp[3])\n        else:\n            ans+=('a'*dp[1]+'c'*dp[3]+'b'*dp[2])\n    else:\n        ans+=('a'*dp[1]+'b'*dp[2]+'c'*dp[3])\n    for i in range(4,27):\n        ans+=(chr(i+96)*dp[i])\n        \n    print(ans)\n    ",
                true
            ],
            [
                "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\n#from decimal import Decimal \n \n#from statistics import mode\n \nfrom itertools import combinations as cb\n \ndef int_arr(): return list(map(int, sys.stdin.readline().strip().split()))\n \ndef str_arr(): return list(map(str, sys.stdin.readline().strip().split()))\n \ndef input(): return sys.stdin.readline().strip()\n \n \n\n\n# sys.stdin = open('Hilbert Hotel/input.txt', 'r')\n# sys.stdout = open('Hilbert Hotel/output.txt', 'w')\n\n\nfor _ in range(int(input())):\n    arr=[i for i in input()]\n    st=input()\n    \n\n    a=[]\n    b=[]\n    c=[]\n    rem=[]\n    arr.sort()\n\n    for i in arr:\n        if i=='a':\n            a.append('a')\n        elif i==\"b\":\n            b.append('b')\n        elif i==\"c\":\n            c.append('c')\n        else:\n            rem.append(i)\n    rem.sort()\n    if st!=\"abc\":\n        print(*arr,sep='')\n    else:\n        if len(a)>0 and len(b)>0 and len(c)>0:\n            z=[]\n            z+=a\n            z+=c\n            z+=b\n            z+=rem\n            print(*z,sep='')\n        else:\n            print(*arr,sep='')\n\n\n\n\n",
                true
            ],
            [
                "tt=1\ntt=int(input())\nfor _ in range (tt):\n    #input()\n    #n=int(input())\n    #x,y=map(int,input().split())\n    #a=list(map(int,input().split()))\n    #b=list(map(int,input().split()))\n    s=input()\n    n=len(s)\n    s=list(s)\n    s.sort()\n    t=input()\n    if t==\"abc\" and 'a' in s and 'b' in s and 'c' in s:\n        a=[]\n        c=0\n        for i in s:\n            if i=='a':\n                a.append(i)\n        for i in s:\n            if i=='c':\n                a.append(i)\n        for i in s:\n            if i!='a' and i!='c':\n                a.append(i)\n        print(*a,sep='')\n    else:\n        print(*s,sep='')",
                true
            ],
            [
                "def find(s, t):\n    L = list(s)\n    L.sort()\n    if ('a' not in s) or ('b' not in s) or ('c' not in s):\n        return ''.join(L)\n    if t != 'abc':\n        return ''.join(L)\n    if L[-1] in ['a', 'b', 'c']:\n        L.append('555')\n    a = 0\n    b = 0\n    c = 0\n    while L[0] == 'a':\n        a += 1\n        L.remove('a')\n    while L[0] == 'b':\n        b += 1\n        L.remove('b')\n    while L[0] == 'c':\n        c += 1\n        L.remove('c')\n\n    if L[-1] == '555':\n        L.pop()\n        return 'a'*a + 'c'*c + 'b'*b + ''.join(L)\n\n    return 'a'*a + 'c'*c + 'b'*b + ''.join(L)\n\ncases = int(input())\nfor i in range(cases):\n    s = input()\n    t = input()\n    print(find(s, t))",
                true
            ],
            [
                "\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\nlogging.basicConfig(format=\"%(message)s\", level=logging.WARNING,)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\n# 30 MINUTES ATLEAST !!!!\n\n###################################################################################################################\n\n\nimport collections\n\nfor _ in range(int(input())):\n    s = ''.join(sorted(input()))\n    t = input()\n    idx = 0\n    for i in range(len(s)):\n        if idx == 3:\n            break\n        if s[i] == t[idx]:\n            idx += 1\n    if idx < 3:\n        print(s)\n    else:\n        d = collections.defaultdict(int)\n        for i in s:\n            d[i] += 1\n        res = (d['a'] * 'a') + (d['c'] * 'c') + (d['b'] * 'b')\n        for i in 'defghijklmnopqrstuvwxyz':\n            res += d[i] * i\n        print(res)\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = sorted(input())\n    t = input()\n    s = \"\".join(s)\n    if 'a' in s and 'b' in s and 'c' in s and t == \"abc\":\n        sx = s.count('a') + s.count('b') + s.count('c')\n        print(\"a\"*s.count('a') + \"c\" * s.count('c') + \"b\"*s.count('b') + s[sx:])\n    else:\n        print(s)",
                true
            ],
            [
                "for i in range(int(input())):\n    l=[0]*26\n    s=input()\n    for i in s:\n        l[ord(i)-97]+=1\n    t=input()\n    s2=\"\"\n    s2+=\"a\"*l[0]\n    if(\"a\" in s and t[0]==\"a\" and t.index(\"b\")<t.index(\"c\")):\n        s2+=\"c\"*l[2]\n        s2+=\"b\"*l[1]\n    else:\n        s2+=\"b\"*l[1]\n        s2+=\"c\"*l[2]\n    for i in range(3,len(l)):\n        s2+=chr(i+97)*l[i]\n    print(s2)\n        ",
                true
            ],
            [
                "t = int(input())\nfor tt in range(t):\n    s = list(input())\n    t = input()\n    s.sort()\n    ans = \"\".join(s)\n    if t == 'abc':\n        a = s.count('a')\n        b = s.count('b')\n        c = s.count('c')\n        if a > 0 and b > 0 and c > 0:\n            ans = 'a'*a + 'c'*c + 'b'*b + ans[a+b+c:]\n    print(ans)",
                true
            ],
            [
                "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nflush = sys.stdout.flush\nget_int = lambda : int(input().rstrip())\nget_arr = lambda : [int(w) for w in input().split()]\n\n\nt = get_int()\n\ndef func(c):\n    if c == 'b':\n        return 2\n    elif c == 'c':\n        return 1\n    else:\n        return ord(c) - ord('a')\n\n\nfor _ in range(t):\n    s = input().rstrip()\n    t = input().rstrip()\n\n    if t == 'abc' and 'a' in s:\n        print(''.join(sorted(s, key=func)))\n    else:\n        print(''.join(sorted(s)))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=list(input())\n    t=list(input())\n    s.sort()\n    b=list(set(s))\n    b.sort()\n    if \"\".join(b).find(\"\".join(t))==-1:\n        print(\"\".join(s))\n    else:\n        d=dict()\n        for i in s:\n            if i not in d.keys():\n                d[i]=1\n            else:\n                d[i]+=1\n        ans=[]\n        for i in b:\n            if i not in t:\n                ans.append(i)\n        t[-1],t[-2]=t[-2],t[-1]\n        st=\"\"\n        for i in t:\n            st+=d[i]*i\n        for i in ans:\n            st+=d[i]*i\n        print(st)",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    t=input()\n    ans=\"\"\n    l=[0]*26\n    a = s.count('a')\n    b = s.count('b')\n    c = s.count('c')\n    for i in s:\n        l[ord(i)-97]+=1\n    # print(l)\n    # print(t[0],t[1])\n    if (t[0]=='a' and t[1]=='b' and l[0]):\n        for i in range(a):\n            ans+='a'\n        for i in range(c):\n            ans+='c'\n        for i in range(b):\n            ans+='b'\n    else:\n        for i in range(a):\n            ans+='a'\n        for i in range(b):\n            ans+='b'\n        for i in range(c):\n            ans+='c'\n    for i in range(3, 26):\n        for j in range(l[i]):\n            ans+=chr(i+97)\n    print(ans)",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    t=input()\n    d=sorted(s)\n    flag=1\n    for x in t:\n        if x not in d:\n            print(''.join(d))\n            flag=0\n            break\n    if flag:\n        ans=\"\"\n        cnt=0\n        i=-1\n        if t=='abc':\n            for x in range(len(s)):\n                if d[x]=='c':\n                    cnt+=1\n                if d[x]=='a':\n                    i=x\n            y=\"\"      \n            for l in range(cnt):\n                y+='c'\n                        \n            for x in range(len(s)):\n                if x==(i+1):\n                    ans+=y\n                if d[x]=='c':\n                    continue\n                else:\n                    ans+=d[x]\n            print(ans)\n                \n        else:\n            print(\"\".join(d))\n                \n                \n                ",
                true
            ],
            [
                "# cook your dish here\nt=int(input())\nwhile t>0:\n    s=input()\n    T=input()\n    if \"a\" in s and 'b' in s and 'c' in s and T==\"abc\":\n        lii=[]\n        for i in s:\n            if i=='a' or i=='c':\n                continue\n            lii.append(i)\n        lii.sort()\n        an=''.join(lii)\n        ans=\"\"+'a'*s.count('a')+\"c\"*s.count('c')+an\n        print(ans)\n        t-=1\n        continue\n    li=list(s)\n    li.sort()\n    print(\"\".join(li))\n    t-=1\n    \n",
                true
            ],
            [
                "from collections import Counter\n\ndef check(s,t):\n    i = 0\n    j = 0\n    for i in range(len(s)):\n        if s[i]==t[j]:\n            j+=1\n        if j==3:\n            return True\n\n    return False\n\ndef main():\n    s = input()\n    t = input()\n\n    s= ''.join(sorted(s))\n    if not check(s,t):\n        print(s)\n    else:\n        c = Counter(s)\n        res = 'a' * c['a']\n        res+=t[-1]*c[t[-1]]\n\n        for k in sorted(c.keys()):\n            if k not in res:\n                res+=k*c[k]\n\n        # idx = s.index(t)\n        # res = s[:idx]+ s[idx+1] + s[idx]+s[idx+1:]\n        print(res)\n\n\n\n\n\nif __name__ == '__main__':\n    t = int(input())\n    while t:\n        main()\n        t-=1",
                true
            ],
            [
                "T=int(input())\nfor t in range(T):\n  #n=int(input())\n  #n,m,k=map(int,input().split())\n  #lst=list(map(int,input().split()))\n  s1=input()\n  s1=sorted(s1)\n  s3=''\n  for i in s1:\n    s3+=i\n  s2=input()\n  #dct=dict()\n  #for i in lst:\n      #dct[i]=0\n  #for i in lst:\n      #dct[i]+=1\n  #start your code from here\n  a,b,c=0,0,0\n  temp=''\n  for i in s1:\n    if i=='a':\n      a+=1\n    elif i=='b':\n      b+=1\n    elif i=='c':\n      c+=1\n    else:\n      temp+=i\n  if a == 0 or b == 0 or c == 0:\n    print(s3)\n    continue\n  if s2[0]=='b' or s2[0]=='c':\n    res=s3\n  else:\n    if s2[1]=='b':\n        res=a*'a'+c*'c'+b*'b'+temp\n    else:\n      res=a*'a'+b*'b'+c*'c'+temp\n  print(res)",
                true
            ],
            [
                "#OMM NAMH SHIVAY\n#JAI SHREE RAM\nimport sys,math,heapq,queue\nfrom collections import deque\nfrom functools import cmp_to_key\nfast_input=sys.stdin.readline \nMOD=998244353\nfor _ in range(int(fast_input())):\n    s=input()\n    t=input()\n    count=[0]*26 \n    for i in s:\n        count[ord(i)-ord('a')]+=1 \n    res=''\n    if t[0]=='a' and count[0]!=0 and count[1]!=0 and count[2]!=0:\n        res=('a'*count[0])+(t[2]*count[ord(t[2])-ord('a')])+(t[1]*count[ord(t[1])-ord('a')])\n    else:\n        res='a'*count[0]+'b'*count[1]+'c'*count[2]\n    for i in range(3,26):\n        res+=chr(ord('a')+i)*count[i]\n    print(res)",
                true
            ],
            [
                "for i in range(int(input())):\n    s = list(input().strip())\n    s.sort()\n    s1 = input()\n    if 'a' not in s or 'b' not in s or 'c' not in s:\n        print(*s, sep='')\n    else:\n        if s1 != 'abc':\n            print(*s, sep='')\n        else:\n            for i in range(s.count('a')):\n                print('a', end='')\n            for i in range(s.count('c')):\n                print('c', end='')\n            for el in s:\n                if el not in 'ac':\n                    print(el, end='')\n            print()",
                true
            ],
            [
                "from collections import defaultdict\ntc = int(input())\nfor _ in range(tc):\n    s = input()\n    t = input()\n    count_dict = defaultdict(int)\n    for c in sorted(set(s)):\n        count_dict[c] = s.count(c)\n    need = ''\n    flag = False\n    for c in t:\n        if c not in s:\n            flag = True\n            break\n\n    need = ''\n    answer = ''\n    if flag:\n        print(''.join(sorted(s)))\n    else:\n        if t[0] == 'a':\n            need = 'a' + t[2] + t[1]\n        else:\n            need = 'abc'\n        for c in need:\n            count = count_dict[c]\n            while count != 0:\n                count -= 1\n                answer += c\n            del count_dict[c]\n        \n        for c in count_dict:\n            count = count_dict[c]\n            while count != 0:\n                count -= 1\n                answer += c\n        print(answer)",
                true
            ],
            [
                "def fn():\n    res = []\n    for i in range((int(input()))):\n        s = input()\n        p = input()\n        _dict = dict()\n        for ch in s:\n            if ch in _dict:\n                _dict[ch] += 1\n            else:\n                _dict[ch] = 1\n        _str = \"\"\n        \n        if 'b' in _dict and 'c' in _dict and p =='abc':\n            if _dict.get('a'):\n                _b = 'b'*_dict.pop('b')\n                _c = 'c'*_dict.pop('c')\n            else:\n                _b = _c = ''\n            for i in range(97,(97+26)):\n                ch = chr(i)\n                cnt = _dict.get(ch,0)\n                if ch == 'a':\n                    cnt = cnt\n                    _all = ch*cnt + _c +_b\n                    _str = _str+_all\n                else:\n                    _all = ch*cnt\n                    _str = _str+_all\n        else:\n            for i in range(97,(97+26)):\n                ch = chr(i)\n                cnt = _dict.get(ch,0)\n                _all = ch*cnt\n                _str = _str+_all\n            \n        res.append(_str)\n        \n    print(*res, sep='\\n') \n            \nfn()\n    ",
                true
            ],
            [
                "# import collections\n# import random\n# import math\n# import itertools\n# import math\n# mport math\nimport bisect\n# from collections import defaultdict\n# import itertools\n# from sys import stdin, stdout\n# import math\n# import math\n# import bisect\n# import bisect\n# import collections\n# import itertools\n# import math\nimport collections\nimport itertools\nimport math\nimport sys\n\n# import operator\n# from decimal import Decimal\n\n# sys.setrecursionlimit(10**6)\n\n\n\n\n\np2D = lambda x: print(*x, sep=\"\\n\")\n\n\ndef II(): return int(sys.stdin.buffer.readline())\n\n\ndef MI(): return map(int, sys.stdin.buffer.readline().split())\n\n\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\n\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\n\ndef BI(): return sys.stdin.buffer.readline().rstrip()\n\n\ndef SI(): return sys.stdin.buffer.readline().rstrip().decode()\n\n\ndef li(): return [int(i) for i in input().split()]\n\n\ndef lli(rows): return [li() for _ in range(rows)]\n\n\ndef si(): return input()\n\n\ndef ii(): return int(input())\n\n\ndef ins(): return input().split()\n\n\n# mod = 10**9+7\n# fval = [1]\n# for i in range(1,200001):\n#     x = (fval[-1]*i)%mod\n#     fval.append(x)\n#\n# ifac = [1]*(200001)\n# ifac[200000] = pow(fval[200000], -1, mod)\n# for i in range(200000-1, 1, -1): ifac[i] = ifac[i+1]*(i+1)%mod\n# _________________ For taking Input from the Text Files __________________\n# import os.path\n#\n# if (os.path.exists('input.txt')):\n#     sys.stdin = open(\"input.txt\", \"r\")\n#     sys.stdout = open(\"output.txt\", \"w\")\n#     sys.stderr = open(\"error.txt\", \"w\")\n\ndef drank(d, processing, da, rank):\n    tmp = 10 ** 9\n    if len(d[da]) == 1:\n        return 1\n    for di in d[da]:\n        if processing[di - 1] == 0:\n            processing[di - 1] = 1\n            tmp = min(tmp, drank(d, processing, di, rank))\n            processing[di - 1] = 0\n    rank[da - 1] = tmp + 1\n    return tmp + 1\n\n\n\ndef binary_search(n, a):\n    l = len(a)\n    low = 0\n    high = l-1\n    while high>=low:\n        mid = (high+low)//2\n        if a[mid] == n:\n            return mid\n        elif a[mid]>n:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\n\nis_prime = [True]*(10**6+1)\ndef primeseive(n):\n    is_prime[0] = is_prime[1] = False\n    i = 2\n    while i*i<=n:\n        if is_prime[i] == True:\n            for j in range(i*i,n+1,i):\n                is_prime[j] = False\n        i+=1\n\n\ndef solve():\n\n    ## first problem\n    s = sorted(list(si()))\n    t = si()\n    #print(s)\n    if ('a' not in s) or ('b' not in s) or ('c') not in s:\n        return ''.join(s)\n    if t[0] !='a':\n        return ''.join(s)\n    else:\n        if t[1] !='b':\n            return ''.join(s)\n        else:\n            na = s.count('a')\n            nb = s.count('b')\n            nc = s.count('c')\n            return 'a'*na+'c'*nc+ 'b'*nb + ''.join(s[na+nb+nc:])\n\n    # second problem\n    # n = ii()\n    # if n%2 == 0:\n    #     n//=2\n    #     n-=1\n    #     c = 2\n    #     if n%2 == 0:\n    #         x = n//2\n    #         if x%2 ==0:\n    #             a = (x+1)*c\n    #             b = (x-1)*c\n    #         else:\n    #             a = (x+2)*c\n    #             b = (x-2)*c\n    #     else:\n    #         a = (n//2)*c\n    #         b = (n//2+1)*c\n    # else:\n    #     c = 1\n    #     n-=1\n    #     n//=2\n    #     if n%2==0:\n    #         a = n+1\n    #         b = n-1\n    #     else:\n    #         a= n+2\n    #         b = n-2\n    #\n    # return ' '.join(list(map(str, [a,b,c])))\n\n    #third problem\n    #\n    # n = ii()\n    # a = li()\n    # a.sort()\n    # x = 0\n    # for i in range(1,n+1):\n    #     if a[i-1] == i:\n    #         continue\n    #     else:\n    #         if a[i-1]>= 2*i+1:\n    #             x+=1\n    #             continue\n    #         return -1\n    # return x\n\n    #fourth problem\n    # n = ii()\n    # #patterns = 123, 124, 234, 134\n    # fp = [0]*2\n    # sp = [0]*2\n    # tp = [0]*2\n    # fop = [0]*2\n    # fp[0]= ['0000', '0010', '0100', '1000', '0001', '0011', '0101', '1001' ]\n    # fp[1] = ['1111', '1101', '1011', '0111', '1110', '1100', '1010', '0110']\n    # sp[0] = ['0000', '0010', '0100', '0110', '0001', '0011', '1000', '1010']\n    # sp[1] = ['1111', '1101', '1011', '1001', '1110', '1100', '0111', '0101']\n    # tp[0] = ['0000', '1000', '0100', '1100', '0010', '1010', '0001', '1001']\n    # tp[1] = ['1111', '0111', '1011', '0011', '1101', '0101', '1110', '0110']\n    # fop[0] = ['0000', '0100', '1000', '1100', '0010', '0110', '0001', '0101']\n    # fop[1] = ['1111', '1011', '0111', '0011', '1101', '1001', '1110', '1010']\n    # x = n%4\n    # ans = ''\n    # for k in range(1,n//4+1):\n    #     i = 4*k\n    #     print(\"? {} {} {}\".format(i, i+1, i+2), flush=True)\n    #     m = fp[int(input())]\n    #     print(\"? {} {} {}\".format(i, i + 1, i + 3), flush=True)\n    #     n = sp[int(input())]\n    #     print(\"? {} {} {}\".format(i+1, i + 2, i + 3), flush=True)\n    #     o = tp[int(input())]\n    #     print(\"? {} {} {}\".format(i, i + 2, i + 3), flush=True)\n    #     p = fop[int(input())]\n    #     ans += (((set(m) and set(n)) and set(o)) and set(p))\n    # u=v=w=z=-1\n    # if '11' in ans:\n    #     u = ans.find('11')\n    # elif '00' in ans:\n    #     v = ans.find('00')\n    # elif '01' in ans:\n    #     w = ans.find('01')\n    # else:\n    #     z = ans.find('10')\n    # for j in range(x):\n    #     if u!=-1:\n    #         print(\"? {} {} {}\".format(u+1, u+2, i+j+5), flush=True)\n    #         m = fp[int(input())]\n    #         if\n    #     elif v!=-1:\n    #\n    #     elif w!=-1:\n    #\n    #     else:\n\ndef main():\n    #primeseive(10**6)\n    #print(is_prime)\n    for _ in range(ii()):\n    #print(solve())\n        sys.stdout.write(str(solve()) + \"\\n\")\n    # print(solve())\n\n    #     z += str(ans) + '\\n'\n    # print(len(ans), ' '.join(map(str, ans)), sep='\\n')\n    # stdout.write(z)\n\n\n# for interactive problems\n# print(\"? {} {}\".format(l,m), flush=True)\n# or print this after each print statement\n# sys.stdout.flush()\n\n\nif __name__ == \"__main__\":\n    main()",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou had n positive integers a_1, a_2, ..., a_n arranged in a circle. For each pair of neighboring numbers (a_1 and a_2, a_2 and a_3, ..., a_{n - 1} and a_n, and a_n and a_1), you wrote down: are the numbers in the pair equal or not.\n\nUnfortunately, you've lost a piece of paper with the array a. Moreover, you are afraid that even information about equality of neighboring elements may be inconsistent. So, you are wondering: is there any array a which is consistent with information you have about equality or non-equality of corresponding pairs?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Next t cases follow.\n\nThe first and only line of each test case contains a non-empty string s consisting of characters E and/or N. The length of s is equal to the size of array n and 2 \u2264 n \u2264 50. For each i from 1 to n: \n\n  * if s_i = E then a_i is equal to a_{i + 1} (a_n = a_1 for i = n); \n  * if s_i = N then a_i is not equal to a_{i + 1} (a_n \u2260 a_1 for i = n). \n\nOutput\n\nFor each test case, print YES if it's possible to choose array a that are consistent with information from s you know. Otherwise, print NO.\n\nIt can be proved, that if there exists some array a, then there exists an array a of positive integers with values less or equal to 10^9.\n\nExample\n\nInput\n\n\n4\nEEE\nEN\nENNEENE\nNENN\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first test case, you can choose, for example, a_1 = a_2 = a_3 = 5.\n\nIn the second test case, there is no array a, since, according to s_1, a_1 is equal to a_2, but, according to s_2, a_2 is not equal to a_1.\n\nIn the third test case, you can, for example, choose array a = [20, 20, 4, 50, 50, 50, 20].\n\nIn the fourth test case, you can, for example, choose a = [1, 3, 3, 7].\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nt = int(input())\n# map(int,input().split())\n# [int(i) for i in input().split()]\nfor _ in range(t):\n    s = input()\n    print(\"YES\") if s.count('N') != 1 else print(\"NO\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    mass = input()\n    mass = list(mass)\n    h = len(mass)\n    if h > 2 :\n        if mass.count('N') == 1:print(\"NO\")\n        else:print(\"YES\")\n    else:\n        if mass[0]==mass[1]:\n            print(\"YES\")\n        else:print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    s = input()\n    ini  = 1\n    n = len(s)\n    a = [0 for i in range(n)]\n    a[1] = 1\n    kk = 0\n    for i in s:\n        if i == 'N':\n            kk += 1\n    if kk == 1:\n        print('NO')\n    else:\n        print(\"YES\")\n    # for i in range(n):\n    #     if s[i] == 'E':\n    #         if i != n-1:\n    #             a[i+1] = a[i]\n    #         else:\n    #             if a[1] != a[n-1]:\n    #                 kk = 1\n    #                 print('NO')\n    #     else:\n    #         if i != n-1:\n    #             a[i+1] = a[i] + 1\n    #         else:\n    #             if a[1] == a[n-1]:\n    #                 kk = 1\n    #                 print('NO')\n    # if kk == 0:\n    #     print('YES')\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    l1=list(input())\n    print(\"NO\" if l1.count(\"N\")==1 else \"YES\")",
                true
            ],
            [
                "from collections import defaultdict, Counter,deque\nfrom math import sqrt, log10, log, floor, factorial,gcd\nfrom bisect import bisect_left, bisect_right,insort\nfrom itertools import permutations,combinations\nimport sys, io, os\ninput = sys.stdin.readline\n# input=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# sys.setrecursionlimit(10000)\ninf = float('inf')\nmod = 10 ** 9 + 7\ndef yn(a): print(\"YES\" if a else \"NO\")\nceil = lambda a, b: (a + b - 1) // b\nt=int(input())\nfor i in range(t):\n    s=list(input().strip())\n    if 'E' in s and s.count('N')==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "from sys import stdin \nfor _ in range(int(stdin.readline())):\n    s=input()\n    n=0 \n    for i in s:\n        if i==\"N\":\n            n+=1 \n    if n==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "test_case = int(input(''))\n\nfor i in range(test_case):\n    string = input('')\n    e = 0\n    n = 0\n    for x in string:\n        if x == 'E':\n            e = e + 1\n        elif x == 'N':\n            n = n + 1\n    if n >= 2 or n == 0:\n        print('YES')\n    else:\n        print('NO')\n    ",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    str=input()\n    if str.count('N')==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    a = input()\n    if a.count(\"N\")==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n\n    s=input()\n    n=len(s)\n    if s.count('N')!=1:\n        print('YES')\n    else : print('NO')",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    n_count = 0\n    for i in range(len(s)):\n        if s[i] == 'N':\n            n_count += 1\n    \n    if n_count == 1 :\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "q = []\nfor _ in range(int(input())):\n    q.append(input())\nfor _ in range(len(q)):\n    s = q[_]\n    temp = s[0]\n    if s.count(\"E\") == len(s) - 1:\n        print('NO')\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "x = int(input(''))\nV = []\nh=0\nfor i in range(x):\n    c = input('')\n    l = len(c)\n    h = 0\n    for i in c:\n\n        if i=='N':\n            h+=1\n\n    if h==1:\n        V.append('NO')\n    else:\n        V.append('YES')\n\nfor i in V:\n    print(i)",
                true
            ],
            [
                "n = int(input())\n\nfor q in range(n):\n    a = input()\n    if a.count(\"N\") == 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "term = int(input())\nfor _ in range(term):\n    str=input()\n    counter=0\n    for j in range(len(str)):\n        if str[j]=='N':\n            counter+=1\n    if counter ==1:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "for t in range(int(input())):\n    s = input()\n    if s.count('N') == 1:\n        print('NO')\n    else:\n        print('YES')\n            \n    ",
                true
            ],
            [
                "T = int(input())\nfor t in range(T):\n    s = input()\n    if s.count('N') == 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "for i in range(int(input())):\n    s=str(input())\n    x=list(s)\n    a=[]\n    b=[]\n    for i in x:\n        if(i==\"E\"):\n            a.append(\"E\")\n        else:\n            b.append(\"N\")\n    if(len(b)==1):\n        print(\"NO\")\n    else:\n        print(\"YES\")                    ",
                true
            ],
            [
                "n = int(input())\nwhile n > 0:\n    s = input()\n\n    count = 0\n    for i in s:\n        if i == \"N\":\n            count += 1\n\n    if count == 1:\n        print('NO')\n    else:\n        print('YES')\n\n\n    n-=1\n                    \n\n\n\n\n",
                true
            ],
            [
                "a=int(input())\nfor _ in range(a):\n    x=input()\n    j=[\"NO\" if(x.count(\"N\")==1) else \"YES\"]\n    print(*j)",
                true
            ],
            [
                "from math import sqrt\nfrom sys import stdin\ninput = stdin.readline\n# def Count_Factors(n):\n#     c=0\n#     for i in range(1,int(sqrt(n))+1):\n#         if n%i==0:\n#             if i*i==n:\n#                 c+=1\n#             else:\n#                 c+=2\n#     return c\nfor _ in range(int(input())):\n    s=input().strip()\n    if s.count('N')==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    a=input()\n    b=a.count('N')\n    if b==1:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "t = input()\nfor _ in range(int(t)):\n    s = input()\n    if len(set(list(s)))==1:\n      print(\"YES\")\n    elif s.count(\"N\")==1:\n      print(\"NO\")\n    else:\n      print(\"YES\")",
                true
            ],
            [
                "# cook your dish here\nt=int(input())\nfor q in range(t):\n    # n,k,s = map(int,input().split())\n    s=input()\n    N=len(s)\n    # s=list(s)\n    e,n=0,0\n    for i in range(N):\n        if s[i]=='E':\n            e+=1\n        else:\n            n+=1\n    # print('{} {}'.format(e,n))\n    if n==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n    ",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s=input()\n    if s.count('N')==1:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "import sys\nimport bisect\nimport math\nfrom collections import deque\ninput = lambda: sys.stdin.readline().strip()\nmod = 10**9 + 7\n\ndef solve():\n    s = input()\n    if s.count('N') == 1:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\n\nif __name__ == \"__main__\":\n    t=1\n    t = int(input())\n    for _ in range(t):\n        print(solve())",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = input()\n    if n.count('N')==1:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "\n\ndef solve():\n  s = input()\n  n = 0\n  e = 0\n  for i in s:\n    if i == 'N':\n      n += 1\n    elif i == 'E':\n      e += 1\n  if n==1:\n    print('NO')\n  else:\n    print('YES')\n\n\nif __name__ == \"__main__\":\n    for case in range(int(input())):\n        solve()\n",
                true
            ],
            [
                "from collections import Counter\n\nt = int(input())\n\nfor _ in range(t):\n    s = input()\n    d = Counter(s)\n\n    if len(s) > 0 and d['N'] == 1:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "for i in range(int(input())):\n    s = str(input())\n    x=0\n    for i in range(len(s)):\n        if s[i]==\"N\":\n            x+=1\n    \n            \n    if x==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        ",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    s=input()\n    if(s.count('N')==1):\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    s = input()\n    if s.count(\"N\") == 1:\n        print(\"NO\")\n    else:\n        print('YES')\n",
                true
            ],
            [
                "cases = input()\n\nfor a in range(int(cases)): \n   \n    s = str(input())\n   \n    n = [c for c in s if c == 'N']\n    ll = len(n)\n\n    if ll == 1:\n       print('NO')\n    else:\n        print('YES')\n",
                true
            ],
            [
                "def check(x,mat,n,m):\n    flag=False\n    # we want n-1 go to shop so one shop have buy two gift\n    # this flag for this\n    pair=[False]*m\n    for i in range(n):\n        c=0\n        for j in range(m):\n            # print(i,j)\n            if mat[i][j]>=x:\n                pair[j]=True\n                c+=1\n        if c>1:\n            flag=True\n    if (not flag) and m>1:\n        return False\n \n    ans=sum(pair)\n    if ans==m:\n        return True\n \n    return False\n \n    \nimport sys\n \n \n \ndef solve():\n    for t in range(int(input())):\n        s=input()\n        N=0\n        for ele in s:\n            if ele==\"N\":\n                N+=1\n        if N==1:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            \n        \n        \nsolve()",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n  st=input()\n  cnt=0 \n  for s in st:\n    if s==\"N\":\n      cnt+=1 \n  if cnt!=1:\n    print(\"YES\")\n  else:\n    print(\"NO\")",
                true
            ],
            [
                "\ndef main():\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        cnt = 0\n        for c in s:\n            if c == 'N':\n                cnt += 1\n                \n        if cnt == 1:\n            print('NO')\n        else:\n            print('YES')\n\n\n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "# import sys\n# input = sys.stdin.readline\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    w = []\n    if n == 2:\n        if s == \"EN\" or s == \"NE\":\n            print(\"NO\")\n\n        else:\n            print(\"YES\")\n\n        continue\n\n    w1 = s.count(\"N\")\n    if w1 == 1:\n        print(\"NO\")\n        \n    else:\n        print(\"YES\")",
                true
            ],
            [
                "for t in range(int(input())):\n  print([\"YES\",\"NO\"][input().count('N') == 1])",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    if s.count('N') == 1:\n        print('NO')\n    else:\n        print('YES')\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    print(\"YES\" if s.count(\"N\")!=1 else \"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    x=input()\n    ce=x.count('E')\n    cn=x.count('N')\n    if cn>1 or cn==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s=input()\n    count=0\n    for i in range(len(s)):\n        if s[i]==\"N\":\n            count+=1\n    if count==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "import sys\n\nn = int(sys.stdin.readline().rstrip(\"\\n\"))\n\nfor _ in range(n):\n    q = sys.stdin.readline().rstrip(\"\\n\")\n    predicted = [0]\n    count = 0\n    for i,e in enumerate(q):\n        if e == \"N\":\n            count += 1\n    if (count == 1):\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n     b = input()\n     if b.count(\"N\") != 1:\n          print(\"YES\")\n     else:\n          print(\"NO\")\n     ",
                true
            ],
            [
                "for _ in range(int(input())): \n    s = input() \n    if s.count('N') == 1: \n        print(\"NO\")\n    else :\n        print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    if 'N' in s:\n        if s.count(\"N\")>1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "\n\nt = int(input())\n\nfor i in range(t): \n    s = input()\n    if (s.count(\"N\")==1) :\n        print(\"NO\")\n    else :\n        print(\"YES\")",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    s=input()\n    if s.count('N')==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    if s.count('N') != 1:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "def countN(word):\n    return word.count('N')\n    \nn = int(input())\n\nfor i in range(n):\n    word = input()\n    if countN(word) == 1:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "t = int(input())\n\nfor _ in range(t):\n    s = input()\n\n    nb_n = len([c for c in s if c == 'N'])\n\n    if nb_n == 1 and len(s) >= 2:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    if s.count(\"N\") == 1:\n        print('NO')\n    else:\n        print('YES')\n        ",
                true
            ],
            [
                "from sys import stdin,stdout\n\n# int(stdin.readline())  list(map(int,stdin.readline().split()))      map(int,stdin.readline().split())\n\nfor _ in range(int(stdin.readline())):\n    a = input()\n    if a.count(\"N\")==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "import sys\nimport math\nimport bisect\nfrom sys import stdin,stdout\nfrom math import gcd,floor,sqrt,log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl,bisect_right as br\n\nsys.setrecursionlimit(100000000)\n\ndef solve():\n    string = input()\n    return string.count('N') != 1\n\n\ndef main():\n     t = int(input())\n     while(t):\n         print(\"YES\" if solve() else \"NO\")\n         t -= 1\n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "n = int(input())\nfor i in range (n):\n    s= input()\n    c = 0\n    for x in s :\n        if x=='N':\n            c+=1\n    if (c==1):\n        print('NO')\n    else :\n        print('YES')",
                true
            ],
            [
                "from sys import stdin\n\n\ndef main():\n    input = lambda: stdin.readline()[:-1]\n    T = int(input())\n    for _ in [0] * T:\n        S = input()\n\n        if S.count(\"N\") == 1:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n\n\nmain()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    a = input()\n    count = 0\n    if(a.count(\"N\")==1):\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    if 'N' in s:\n        index = s.rfind('N')\n        if s[:index].count('N') == 0:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('YES')\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    a = input()\n    n = 0\n    for j in range(len(a)):\n        if a[j] == 'N':\n            n += 1\n    if n == 1:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "import sys\n\ncases = int(sys.stdin.readline())\n\nfor _ in range(cases):\n    res = sum(map(lambda c: 1 if c == 'N' else 0, list(sys.stdin.readline().strip())))\n    print('NO' if res == 1 else 'YES')",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    if s.count('N') == 1:\n        print('NO')\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t=int(input())\nfor k in range(t):\n    s=input()\n    a=list(s)\n    count=0\n    for i in range(len(a)):\n        if(a[i]=='N'):\n            count=count+1\n    if(count==0 or count>=2):\n        print('YES')\n    else:\n        print('NO')\n    \n    \n \n",
                true
            ],
            [
                "for i in range(int(input())):\n    a = input()\n    if a.count('N') == 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
                true
            ],
            [
                "t=int(input())\nfor ttt in range(t):\n  a=input()\n  if a.count('N')==1:\n    if a[:a.index('N')]=='E'*(a.index('N')) and a[a.index('N')+1:]=='E'*(len(a)-(a.index('N'))-1):\n      print('NO')\n    else:\n      print('YES')\n  else:\n    print('YES')",
                true
            ],
            [
                "for _ in range(int(input())):\n    l1=list(input())\n    a=l1.count(\"N\")\n    if a==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    print ('YES' if s.count('N') != 1 else 'NO')",
                true
            ],
            [
                "t = int(input())\nwhile t:\n    t-=1\n    s = str(input())\n    e = s.count(\"E\")\n    n = s.count(\"N\")\n    if e == len(s)-1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    s=input()\n    e,n=0,0\n    ans=0\n    for i in range(len(s)):\n        if s[i]==\"N\":\n            n=1\n            ans+=1\n        else:\n            e=1\n    if ans<2 and n and e:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    print(\"NO\" if len(list(filter(lambda x: x == \"N\", input()))) == 1 else \"YES\")",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    s = input()\n    S = [ch for ch in s]\n    cnt = 0 \n    for ch in s:\n        if ch == 'N':\n            cnt +=1 \n        \n    if len(s) == 2:\n        if s == 'EE' or s == 'NN':\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif cnt == 1:\n        print(\"NO\")\n    \n    else:\n        print(\"YES\")",
                true
            ],
            [
                "import math, sys\nfrom collections import defaultdict, Counter, deque \nfrom heapq import heapify, heappush, heappop\n\n\ndef solve():\n    s = list(input())\n    n = len(s)\n   \n    a = [-1 for i in range(n)]\n    a[0] = cnt = 1\n\n    i, j = 1, n - 1\n    \n    while i < n and s[i - 1] == 'E':\n        a[i] = a[0]\n        i += 1\n    \n    while j >= 0 and s[j] == 'E':\n        a[j] = a[0]\n        j -= 1\n\n    for k in range(i - 1, j + 1):\n        if s[k] == 'E':\n            nxt = (k + 1) % n\n            if a[nxt] == -1:\n                a[nxt] = a[k]\n            elif a[k] != a[nxt]:\n                print(\"NO\")\n                return\n        else:\n            cnt += 1\n            nxt = (k + 1) % n\n            if a[nxt] == -1:\n                a[nxt] = cnt\n            elif a[k] == a[nxt]:\n                print(\"NO\")\n                return\n    print(\"YES\") \n    \n\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\n\n\ndef input():\n    return sys.stdin.readline().rstrip('\\n').strip()\n \n\ndef print(*args, sep=' ', end='\\n'):\n    first = True\n    for arg in args:\n        if not first:\n            sys.stdout.write(sep)\n        sys.stdout.write(str(arg))\n        first = False \n \n    sys.stdout.write(end)\n\n \ndef flush():\n    sys.stdout.flush()\n \n \nmain()\n",
                true
            ],
            [
                "import sys\n\n\nfor _ in range(int(input())):\n    s = input()\n    count_n = 0\n    for ch in s:\n        if ch == \"N\":\n            count_n += 1\n    if count_n == 1:\n        sys.stdout.write(\"NO\\n\")\n    else:\n        sys.stdout.write(\"YES\\n\")\n",
                true
            ],
            [
                "T = int(input())\nwhile T > 0:\n    arr = input()\n    if arr[-1] == 'E':\n        count = arr.count('N')\n        if count == 1:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        count = arr.count(\"N\")\n        if count == 1:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n\n\n\n    T -= 1",
                true
            ],
            [
                "def solve():\n    a = list(input())\n    dem_E = 0\n    dem_N = 0\n    for i in a:\n        if i == 'E':\n            dem_E += 1\n        else:\n            dem_N += 1\n    if dem_N == 1 and dem_E == len(a) - 1:\n        print('NO')\n    else:\n        print('YES')\n\n\nfor i in range(int(input())):\n    solve()",
                true
            ],
            [
                "# template begins\n#####################################\n \n# import libraries for input/ output handling\n# on generic level\nimport atexit, io, sys, math, heapq, collections\n\n#input handling\n#input of single integer\ndef get_int(): return int(sys.stdin.readline().strip())\n#input of multiple integers\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\n#input of list\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\n#input of string\ndef get_string(): return sys.stdin.readline().strip()\n\n#output handling\n#writing int output\ndef write_int(a): sys.stdout.write(str(a)+\"\\n\")\n#writing String\ndef write_str(a): sys.stdout.write(a+\"\\n\")\n#writing Array\ndef write_list(arr): sys.stdout.write(\" \".join(map(str, arr)) + \"\\n\")\n\n#general functions\n#swap\ndef swap(arr, a, b):\n    arr[a]^=arr[b]\n    arr[b]^=arr[a]\n    arr[a]^=arr[b]\n\n#NumberOfDigits\ndef int_len(a): return math.floor(math.log(a,10))+1\n\n#Powerof2\ndef isPowerOfTwo(x): return x and (not(x & (x-1)))\n\n#Sieve\ndef Sieve(n):\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n    res = []\n    for i in range(2,len(prime)):\n        if (prime[i]):\n            res.append(i)\n    return res\n\n#binarySearch\ndef binarySearch (arr, l, r, x):\n    if r >= l:\n  \n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid-1, x)\n        else:\n            return binarySearch(arr, mid + 1, r, x)\n    else:\n        return -1\ndef search(arr,x): return binarySearch(arr,0,len(arr)-1,x)\n\n#Array to String\ndef toString(A): return''.join(A)\n\n# String to array\ndef toArray(str): return str.split()\n\n#ArraySum\ndef arrSum(Arr):\n    Sum =0\n    for i in range (len(Arr)):\n        Sum+=Arr[i]\n    return Sum\n\ndef computeXOR(n) :\n \n    # Modulus operator are expensive\n    # on most of the computers. n & 3\n    # will be equivalent to n % 4.\n \n    # if n is multiple of 4\n    if n % 4 == 0 :\n        return n\n \n    # If n % 4 gives remainder 1\n    if n % 4 == 1 :\n        return 1\n \n    # If n%4 gives remainder 2\n    if n % 4 == 2 :\n        return n + 1\n \n    # If n%4 gives remainder 3\n    return 0\n \n\ndef find_gcd(x, y):\n     \n    while(y):\n        x, y = y, x % y\n     \n    return x\n         \n    \n\n\n#####################################\n# template ends\n\n# Code begins\n#####################################\n\n\n\ndef isSubSequence(string1, string2, m, n):\n    # Base Cases\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n \n    # If last characters of two\n    # strings are matching\n    if string1[m-1] == string2[n-1]:\n        return isSubSequence(string1, string2, m-1, n-1)\n \n    # If last characters are not matching\n    return isSubSequence(string1, string2, m, n-1)\n     \n\nN = get_int()\nwhile N >0:\n    Str = get_string()\n    A= Str.count(\"N\")\n    B = Str.count(\"E\")\n    if A==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n\n\n\n    N-=1\n\n\n#####################################\n# Code ends\n\n\n# Creating 2D array sol = [[0 for i in range(N)] for j in range(N)]",
                true
            ],
            [
                "n=int(input())\nfor i in range(n):\n    s=input(\"\")\n    c=0\n    for i in range(len(s)):\n        if \"N\"==s[i]:\n            c=c+1\n    if c==len(s) or c!=1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "\nimport sys\nsys.setrecursionlimit(5000001)\n\nfrom collections import *\nfrom math import *\n\nTT=int(input())\nfor i in range(TT):\n    #n=int(input())\n    #n,m=map(int,input().split())\n    #lst=list(map(int,input().split()))\n    s=input()\n    if s.count('N')==1:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "for _ in range(int(input())):\n    def checker(user: str) -> str:\n        return \"NO\" if user.count(\"N\") == 1 else \"YES\"\n    print(checker(input()))\n",
                true
            ],
            [
                "t = int(input())\n\nfor i in range(t):\n    string = input()\n    Ns = len([x for x in string if x == 'N'])\n    if Ns == 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n",
                true
            ],
            [
                "z=int(input())\nfor i in range(z):\n    x=input()\n    index=-1\n    count=0\n    for k in range(len(x)):\n        if x[k]=='N':\n            index=k\n        else:\n            count+=1\n    if count==len(x)-1:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "# from sys import exit, stdin, setrecursionlimit\n# from bisect import bisect_left, bisect_right, insort_left, insort_right\n# from collections import defaultdict, deque, Counter\n# from heapq import heappop, heappush, heapify\n# from itertools import permutations, combinations, accumulate\n# from math import sqrt, factorial, ceil, floor\n# from decimal import Decimal\n# from random import shuffle\n# INF = 10**18\n# MOD = 10**9+7\n# setrecursionlimit(10**7)\n\nt = int(input())\narr = []\nfor i in range(t):\n    arr.append(input())\n\nfor s in arr:\n    check = s.count('N')\n    if check == 1:\n        print('NO')\n    else:\n        print('YES')\n\n",
                true
            ],
            [
                "import collections\nfor i in range(int(input())):\n    s = input()\n    d = collections.Counter(s)\n    if \"N\" in d and d[\"N\"] == 1:\n        print(\"NO\")\n        continue\n    print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    s = input()\n    if s.count('N') == 1:\n        print('NO')\n    else:\n        print('YES')\n",
                true
            ],
            [
                "\nt=int(input())\nfor i in range(t):\n s=input()\n c=0\n for i in range (len(s)):\n    if s[i]=='N': c+=1\n    if c>=2: \n        print('YES')\n        break\n if c==0: print('YES')\n elif c==1: print('NO')\n\n\n                \n\n",
                true
            ],
            [
                "# from string import *\n#\n# f = ascii_lowercase + ascii_uppercase\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     z = list(map(int, input().split()))\n#     s = str(f[0])\n#     for i in range(1, n):\n#         if z[i] == 0:\n#             continue\nt = int(input())\nfor _ in range(t):\n    s = input()\n    if s.count('N') == 1:\n        print('NO')\n    else:\n        print('YES')\n        \n\n\n\n\n\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    s = input()\n    print('NO' if s.count('N') == 1 else 'YES')",
                true
            ],
            [
                "t = int(input())\n\nwhile t>0 :\n\n    s = input()\n\n    curr = 0\n    for c in s :\n        if c==\"N\" :\n            curr += 1\n\n    if curr==0 or curr>1:\n        print(\"YES\")\n    else :\n        print(\"NO\")\n\n    t-=1\n",
                true
            ],
            [
                "for i in range(int(input())):\n    a=input()\n    if a.count('N')==1:\n        print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "import sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_list_strings(): return list(map(str, sys.stdin.readline().strip().split()))\n\n\n# Output for list\n# sys.stdout.write(\" \".join(map(str, final)) + \"\\n\")\n\n# Output for int or str\n# sys.stdout.write(str(best) + \"\\n\")\n\n\n\ndef solve():\n  s = get_string()\n  n = len(s)\n\n  count = 0\n\n  for ele in s:\n    if ele == 'N':\n      count += 1\n  \n  if count == 0 or count == n:\n    print(\"YES\")\n    return\n  \n  if count == 1:\n    print(\"NO\")\n    return\n  \n  print(\"YES\")\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT = get_int()\nwhile T:\n  solve()\n  T -= 1\n",
                true
            ],
            [
                "n = int(input())\n\nwhile n:\n    n -= 1\n    s = list(input())\n    \n    if s.count(\"N\") == 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "from math import gcd\nmod = 10**9+7\n# SangeetaCodes :)\ndef ri(): return int(input())\ndef rl(): return list(map(int, input().split()))\ndef rls(): return list(map(str, input().split()))\ndef rm(): return map(int, input().split())\n\nfor _ in range(ri()):\n    s = input()\n    if s.count(\"N\")==1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou have an array of integers (initially empty).\n\nYou have to perform q queries. Each query is of one of two types: \n\n  * \"1 x\" \u2014 add the element x to the end of the array; \n  * \"2 x y\" \u2014 replace all occurrences of x in the array with y. \n\n\n\nFind the resulting array after performing all the queries.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] \u2192 [3] \u2192 [3, 1] \u2192 [3, 2] \u2192 [3, 2, 2] \u2192 [3, 2, 2, 1] \u2192 [3, 2, 2, 1, 2] \u2192 [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] \u2192 [1] \u2192 [1, 2] \u2192 [1, 2, 1] \u2192 [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] \u2192 [] \u2192 [1] \u2192 [1, 4] \u2192 [1, 4, 2] \u2192 [1, 4, 4] \u2192 [1, 3, 3] \u2192 [1, 3, 3, 2] \u2192 [1, 3, 3, 7].\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "q = int(input())\nqueries = []\nfor i in range(q):\n    queries.append([int(x) for x in input().split()])\nqueries.reverse()\nperm = [0] * 500005\nfor i in range(500005):\n    perm[i] = i\nans = []\nfor query in queries:\n    if(query[0] == 1):\n        ans.append(perm[query[1]])\n    else:\n        perm[query[1]] = perm[query[2]]\nans.reverse()\nprint(*ans)",
                true
            ],
            [
                "\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nfrom collections import defaultdict, Counter\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nimport math\n\ndef I():\n    return(int(input()))\ndef lint():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input().strip()\n    return(list(s[:len(s)]))\ndef invr():\n    return(map(int,input().split()))\n# Python program to print all\n# primes smaller than or equal to\n# n using Sieve of Eratosthenes\n\nimport heapq\n\ndef ask(a,b,c):\n    print(f\"? {a} {b} {c}\")\n    sys.stdout.flush()\n    res=int(input())\n    sys.stdout.flush()\n    return res\nt=I()\nl=[]\nfor _ in range(t):\n    l.append(lint())\n\nd=defaultdict(lambda:False)\na=defaultdict(lambda:0)\nl=l[::-1]\nans=[]\nfor i in range(t):\n    tmp=l[i]\n    if tmp[0]==1:\n        if d[tmp[1]]:\n            ans.append(a[tmp[1]])\n            \n        else:\n            ans.append(tmp[1])\n      \n    else:\n        x,y=tmp[1:]\n        if d[y]:\n            a[x]=a[y]\n        else:\n            a[x]=y\n        d[x]=True\n       \n\nprint(*ans[::-1])\n        \n\n\n        \n\n\n    ",
                true
            ],
            [
                "from sys import *\ninput = stdin.readline\nq = int(input())\n\nr = list(range(500005))\ng = []\nans = []\nfor i in range(q):\n    qr = list(map(int, input().split()))\n\n    g.append(qr)\n\n\nfor x in g[::-1]:\n\n    if x[0] == 1:\n        ans.append(str(r[x[1]]))\n    else:\n        r[x[1]] = r[x[2]]\n\nprint(*ans[::-1])\n",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby, accumulate\nfrom copy import deepcopy\nMOD = 10**9+7\nINF = float('inf')\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\n\n# D = defaultdict(list)\nn = 0\narr = []\nchange = []\nfor _ in range(int(input())):\n    q = rs().split()\n\n    if q[0] == '1':\n        arr.append(q[-1])\n        # D[q[-1]].append(n)\n        n += 1\n    else:\n        x, y = q[1:]\n        if x == y or n == 0:\n            continue\n        change.append((x, y, n - 1))\n\n\nif change:\n    x, y, idx = change[-1]\n    D = {x: y}\n    j = len(change) - 2\n    for i in range(n-1, -1, -1):\n        if i > idx:\n            continue\n\n        while j >= 0 and change[j][-1] == i:\n            a, b, _ = change[j]\n            if b in D:\n                D[a] = D[b]\n            else:\n                D[a] = b\n            j -= 1\n\n        if arr[i] in D:\n            arr[i] = D[arr[i]]\n        \nprint(*arr)",
                true
            ],
            [
                "from collections import defaultdict\nfrom sys import stdin, stdout\nd = defaultdict(list)\nlength = 0\nfor _ in range(int(stdin.readline())):\n    n, *rest = map(int, stdin.readline().split())\n    if n == 1:\n        d[rest[0]].append(length)\n        length += 1\n    elif n == 2:\n        if rest[0] != rest[1]:\n            if len(d[rest[1]]) > len(d[rest[0]]):\n                d[rest[1]].extend(d[rest[0]])\n            else:\n                d[rest[0]].extend(d[rest[1]])\n                d[rest[1]] = d[rest[0]]\n            d[rest[0]] = list()\n# print(d)\narr = [0]*length\nfor num in d:\n    for index in d[num]:\n        arr[index] = str(num)\nstdout.write(' '.join(arr))",
                true
            ],
            [
                "#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\n# sys.setrecursionlimit(1000000)\n\n# _INPUT = \"\"\"4\n# 1 1\n# 1 2\n# 1 1\n# 2 2 2\n\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\nINF = 10**10\n\nQ = int(input())\nQuery = []\nfor _ in range(Q):\n    dat = list(map(int, input().split()))\n    Query.append(dat)\n\nTable = list(range(5*(10**5)+1))\nresult = []\nfor query in reversed(Query):\n    if query[0] == 1:\n        x = query[1]\n        result.append(Table[x])\n    else:\n        x, y = query[1], query[2]\n        Table[x] = Table[y]\nprint(*reversed(result))\n",
                true
            ],
            [
                "q = int(input())\norder = [i for i in range(600000)]\nt = [0 for i in range(q)]\nx = [0 for i in range(q)]\ny = [0 for i in range(q)]\nfor i in range(q):\n    inp = list(map(int,input().split()))\n    t[i] = inp[0]\n    x[i] = inp[1]\n    if inp[0] == 2:\n        y[i] = inp[2]\n\nans = []\n\nfor i in range(q-1,-1,-1):\n    if(t[i]==1):\n        ans.append(order[x[i]])\n    else:\n        order[x[i]]=order[y[i]]\nprint(*ans[::-1])",
                true
            ],
            [
                "import sys\nimport math\nfrom collections import deque,Counter\nfrom sys import stdin\n\n#sys.setrecursionlimit(10**7)\n\nint1=lambda x: int(x)-1\nstinput=lambda :stdin.readline()[:-1]\nii=lambda :int(stinput())\nmi=lambda :map(int, stdin.readline().split())\nli=lambda :list(mi())\nmi1=lambda :map(int1, stdin.readline().split())\nli1=lambda :list(mi1())\nmis=lambda :map(str, stdin.readline().split())\nlis=lambda :list(mis())\n\nfrom collections import defaultdict\n#d=defaultdict(int)\n#d=defaultdict(lambda:1)\n\nimport heapq\n#heapq.heapify(hq)\n#heapq.heappop(hq)\n#heapq.heappush(hq,1)\n\nmod=10**9+7\nMod=998244353\nINF=10**18\nans=0\n\nq=ii()\nquery=[]\nfor i in range(q):\n  query.append(li())\n\nans=[]\nd=defaultdict(int)\nfor x in query[::-1]:\n  if x[0]==2:\n    y,z=x[1],x[2]\n    if z in d:\n      d[y]=d[z]\n    else:\n      d[y]=z\n  else:\n    y=x[1]\n    if y in d:\n      ans.append(d[y])\n    else:\n      ans.append(y)\nprint(*ans[::-1])",
                true
            ],
            [
                "from sys import stdin, stdout\n\nq = int(stdin.readline())\n\na = [[\"NIL\",\"NIL\"] for i in range(500001)] # points to head and tail of chain\narray_pointer = 0\n\nfor _ in range(q):\n    content = stdin.readline().split()\n\n    if len(content) == 2:\n        x = int(content[1])\n        block = [array_pointer, \"NIL\"]\n        array_pointer += 1\n\n        if a[x][0] == \"NIL\":\n            a[x][0] = block\n            a[x][1] = block\n\n        else:\n            a[x][1][1] = block\n            a[x][1] = block\n\n    else:\n        x, y = int(content[1]), int(content[2])\n        if x==y or a[x][0] == \"NIL\":\n            pass\n\n        else:\n            if a[y][0] == \"NIL\":\n                a[y][0] = a[x][0]\n                a[y][1] = a[x][1]\n                a[x][0] = \"NIL\"\n                a[x][1] = \"NIL\"\n            else:\n                a[y][1][1] = a[x][0]\n                a[y][1] = a[x][1]\n                a[x][0] = \"NIL\"\n                a[x][1] = \"NIL\"\n\nanswer = [0]*array_pointer\nfor i in range(1, 500001):\n    pointer = a[i][0]\n    while pointer != \"NIL\":\n        answer[pointer[0]] = str(i)\n        pointer = pointer[1]\n\nstdout.write(' '.join(answer)+'\\n')\n",
                true
            ],
            [
                "import sys\ntokens = ''.join(sys.stdin.readlines()).split()[::-1]\n\ndef next(): return tokens.pop()\ndef nextInt(): return int(next())\ndef nextFloat(): return float(next())\ndef getIntArray(n): return [nextInt() for _ in range(n)]\ndef getFloatArray(n): return [nextFloat() for _ in range(n)]\ndef getStringArray(n): return [next() for _ in range(n)]\n\nl = 0\nmap = {}\n\ntestcase = True\ndef solve(testcase = 1):\n    global l\n    if nextInt() == 1:\n        ele = nextInt()\n        if ele not in map: map[ele] = []\n        map[ele].append(l)\n        l += 1\n    else:\n        find, replace = nextInt(), nextInt()\n        if find not in map or find == replace: return\n        elif replace not in map: map[replace] = []\n        a, b = (map[find], map[replace]) if len(map[find]) > len(map[replace]) else (map[replace], map[find])\n        a += b\n        map[replace] = a\n        del map[find]\n\n\nif testcase is None:\n    testcaseCount = 1\n    while tokens:\n        solve(testcaseCount)\n        testcaseCount += 1\nelse:\n    testcaseCount = nextInt() if testcase else 1\n    for tc in range(testcaseCount):\n        solve(tc + 1)\n    assert not tokens\n\nans = [None for i in range(l)]\nfor value in map:\n    for idx in map[value]:\n        ans[idx] = value\nprint(*ans)",
                true
            ],
            [
                "ql=[]\nfor tt in range(int(input())):\n    ql.append(input())\nl=[]\nd=[-1]*1000000\nfor tt in range(1,len(ql)+1):\n    q=list(map(int,ql[-tt].split()))\n    if(len(q)==2):\n        if(d[q[1]]==-1):\n            l.append(q[1])\n        else:\n            l.append(d[q[1]])\n    else:\n        if(d[q[2]]==-1):\n            d[q[1]]=q[2]\n        else:\n            d[q[1]]=d[q[2]]\n\nfor i in range(1,len(l)+1):\n    print(l[-i],end=\" \")",
                true
            ],
            [
                "q = int(input())\nlocations = dict()\nn = 0\nfor i in range(q):\n    case = list(map(int, input().split()))\n    x, y = 0, 0\n    if case[0] == 1:\n        x = case[1]\n        current = locations.get(x, list())\n        current.append(n)\n        locations[x] = current\n        n += 1\n    else:\n        x, y = case[1], case[2]\n        if(x == y):\n            continue\n        xloc = locations.get(x, list())\n        if(len(xloc) == 0):\n            continue\n        locations.pop(x)\n        yloc = locations.get(y, list())\n        if(len(yloc) == 0):\n            locations[y] = xloc\n        elif len(yloc) > len(xloc):\n            yloc.extend(xloc)\n            locations[y] = yloc\n        else:\n            xloc.extend(yloc)\n            locations[y] = xloc\n\noutput = [0 for i in range(n)]\nfor key, value in locations.items():\n    for val in value:\n        output[val] = str(key)\nprint(\" \".join(output))\n",
                true
            ],
            [
                "import sys\ninput = lambda : sys.stdin.readline().strip()\nintput = lambda : map(int, input().split())\n\nif __name__ == '__main__':\n    A, queries = [], []\n    f = [i for i in range(500001)]\n    Q, = intput()\n    for _ in range(Q):\n        q = tuple(intput())\n        queries.append(q)\n    for q in reversed(queries):\n        if q[0] == 1:\n            A.append( f[q[1]] )\n        if q[0] == 2:\n            f[ q[1] ] = f[ q[2] ]\n    print(*A[::-1])\n",
                true
            ],
            [
                "import sys\ninput=sys.stdin.readline\n\n#sys.stdin=open(\"input.txt\",'r')\n\nqu=[]\n\nqq=int(input())\nfor _ in range(qq):\n    qu.append(list(map(int,input().split())))\n    \nsi=500001\nar=[i for i in range(si)]\n\nans=[]\n\nfor i in range(qq-1,-1,-1):\n    if(qu[i][0]==1):\n        ans.append(ar[qu[i][1]])\n    else:\n        x=qu[i][1]\n        y=qu[i][2]\n        ar[x]=ar[y]\n        \nprint(*ans[::-1])\n    ",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n\n    count , take = 0 , []\n    for i in range(q):\n\n        s = input().split()\n\n        opp = int(s[0])\n        if(opp == 1):\n            x = int(s[1])\n            take.append([1 , x , x])\n            count += 1\n        else:\n            x , y = int(s[1]) , int(s[2])\n            take.append([0 , x , y])\n\n    d , ans = dict() , []\n    for i in range(q - 1 , -1 , -1):\n\n        opp , x , y = take[i]\n        \n        if(opp == 1):ans.append(d.get(x , x))\n        d[x] = d.get(y , y)\n\n    ans = ans[::-1]\n    return ans\n\n\n\nfor T in range(1):\n\n    q = int(input())\n\n    print(*answer())\n\n    \n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nmod = 998244353\n\n\ndef power(num, ex):\n    pw, res = num, 1\n    while ex:\n        if ex & 1:\n            res = res * pw\n        pw = pw * pw\n        ex >>= 1\n    return res\n\n\ndef power_with_modulo(num, ex):\n    pw, res = num % mod, 1\n    while ex:\n        if ex & 1:\n            res = res * pw % mod\n        pw = pw * pw % mod\n        ex >>= 1\n    return res\n\n\nn = 5*10**5+1\nq = int(input())\nmp = [[] for i in range(n)]\nidx = 0\nfor _ in range(q):\n    a = list(map(int, input().split()))\n    if a[0] == 1:\n        x = a[1]\n        mp[x].append(idx)\n        idx += 1\n    else:\n        x, y = a[1], a[2]\n        if x != y:\n            if len(mp[x]) > len(mp[y]):\n                mp[x], mp[y] = mp[y], mp[x]\n            for i in mp[x]:\n                mp[y].append(i)\n            mp[x].clear()\n\nans = [None]*idx\nfor i in range(n):\n    for you in mp[i]:\n        ans[you] = i\n\nprint(*ans)\n\n\n\n\n\n\n",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\nsys.setrecursionlimit(3*10**5)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\ngp=[]\nans=[]\nf=0\nw=[]\n\ndef dfs(i,prod,rem,n):\n    if rem==0:\n        while(i<len(n)):\n            prod*=int(n[i])\n            i+=1\n        return prod\n    if i==len(n):\n        return prod\n    mx=0\n    for j in range(9-int(n[i])):\n        mx=max(dfs(i+1,(int(n[i])+min(j,rem))*prod,rem-min(j,rem),n),mx)\n    return mx\nclass Disjoint_SU:\n    def __init__(self,n):\n        self.parent=[i for i in range(n)]\n        self.size=[1 for i in range(n)]\n    #find\n    def lake_de(self,a):\n        if a==self.parent[a]:\n            return a\n        self.parent[a]=self.lake_de(self.parent[a])\n        return self.parent[a]\n    #union\n    #by size\n    def jod(self,a,b):\n        x=self.lake_de(a)\n        y=self.lake_de(b)\n        #for cycle in graph\n        if x==y:\n            return True\n        if self.size[x]>self.size[y]:\n            self.size[x]+=self.size[y]\n            self.parent[y]=x\n        else:\n            self.size[y]+=self.size[x]\n            self.parent[x]=y\n        return False\ndef hnbhai(tc):\n    n=sb()\n    #d=Disjoint_SU(5*10**5+5)\n    q=[]\n    #gp=[[] for i in range(5*10**5+5)]\n    for i in range(n):\n        q.append(sd())\n    parent=[i for i in range(5*10**5+5)]\n    tot=[]\n    for i in range(n-1,-1,-1):\n        if q[i][0]==1:\n            tot.append(parent[q[i][1]])\n        else:\n            parent[q[i][1]]=parent[q[i][2]]\n    print(*tot[::-1])\n            \n    return\nfor _ in range(1):\n    hnbhai(_+1)\n##case\n\n#.\n",
                true
            ],
            [
                "from collections import defaultdict\nn = int(input())\nd = defaultdict(list)\na = []\nmp = [i for i in range(0,500001)]\nfor i in range(n):\n    A = list(map(int,input().split()))\n    if A[0] ==1:\n        a.append((A[0],A[1]))\n    else:\n        a.append((A[0],A[1],A[2]))\n        \nans = []\nfor i in range(n-1,-1,-1):\n    if len(a[i]) ==2:\n        ans.append(mp[a[i][1]])\n    else:\n        mp[a[i][1]] = mp[a[i][2]]\nans = ans[::-1]\nprint(*ans)",
                true
            ],
            [
                "from collections import defaultdict as dd\nimport math\nimport sys\ninput=sys.stdin.readline\ndef nn():\n    return int(input())\n \ndef li():\n    return list(input())\n \ndef mi():\n    return map(int, input().split())\n \ndef lm():\n    return list(map(int, input().split()))\n \n \n \ndef solve():\n    n = nn()\n    \n    dlists = dd(list)\n    dkeys = dict()\n    place = 0\n    id_vals = 10**6\n    for i in range(n):\n        q = lm()\n        if q[0] == 1:\n            if q[1] in dkeys:\n                val = dkeys[q[1]]\n                dlists[val].append(place)\n                \n            else:\n                dkeys[q[1]] = id_vals\n                dlists[id_vals].append(place)\n                \n                id_vals+=1\n            place +=1\n        else:\n            \n            x,y = q[1],q[2]\n            \n            if x==y:\n                pass\n            elif x in dkeys:\n                if y in dkeys:\n                    yid = dkeys[y]\n                    xid = dkeys[x]\n                    \n                    ylen = len(dlists[yid])\n                    xlen = len(dlists[xid])\n                    if xlen<=ylen:\n                        dlists[yid].extend(dlists[xid])\n                        dkeys[y] = yid\n                    else:\n                        dlists[xid].extend(dlists[yid])\n                        dkeys[y] = xid\n                        \n                    del dkeys[x]\n                    \n                else:\n                    dkeys[y] = dkeys[x]\n                    del dkeys[x]\n                \n        #print(dlists)\n        #print(dkeys)\n            \n    out = [0 for i in range(place)]\n    \n    for key,value in dkeys.items():\n        nums = dlists[value]\n        for num in nums:\n            out[num] = key\n    #print(dlists)\n    #print(dkeys)\n    print(*out)\n    \n    \n            \n                \n    \n\n\nq=1\nfor _ in range(q):\n    solve()",
                true
            ],
            [
                "q=int(input())\nl=[]\nm=[]\nd={}\nfor _ in range(q):\n    a=input().split()\n    l.append(a)\nfor x in l[::-1]:\n    if x[0]=='1':\n        if x[1] in d:\n            m.append(d[x[1]])\n        else:\n            m.append(x[1])\n    else:\n        if x[2] in d:\n            d[x[1]]=d[x[2]]\n        else:\n            d[x[1]]=x[2]\nm=m[::-1]\nprint(*m)",
                true
            ],
            [
                "import sys\nt = int(sys.stdin.readline())\n\nans = []\ncount = 0\n\ndp = [[] for _ in range(5*10**5+1)]\nfor i in range(t):\n  A = list(map(int, sys.stdin.readline().split()))\n  if A[0] == 1:\n    x = A[1]\n    dp[x].append(count)\n    ans.append(x)\n    count += 1\n  else:\n    x = A[1]\n    y = A[2]\n    if x == y:\n      continue\n    if len(dp[y]) < len(dp[x]):\n      dp[x], dp[y] = dp[y],dp[x] \n\n    for d in dp[x]:\n      dp[y].append(d)\n    dp[x].clear()\nfor x in range(5*10**5+1):\n  for d in dp[x]:\n    ans[d] = x\nprint(*ans)",
                true
            ],
            [
                "n = int(input())\nmapIndex = {}\narr = []\nfor i in range(n):\n  inpArr = [int(x) for x in input().split()]\n  if inpArr[0]==1:\n    arr.append(inpArr[1])\n  else:\n    arr.append(inpArr[1:])\n\nans = []\nfor i in arr[::-1]:\n  if isinstance(i,list):\n    if i[1] not in mapIndex:\n      mapIndex[i[1]] = i[1]\n    if i[0] not in mapIndex:\n      mapIndex[i[0]] = i[0]\n      \n    mapIndex[i[0]] = mapIndex[i[1]]\n  else:\n    if i not in mapIndex:\n      mapIndex[i] = i\n    ans.append(str(mapIndex[i]))\n\nprint(\" \".join(ans[::-1]))",
                true
            ],
            [
                "import sys\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\nQ = int(input())\n\nqueries = [list(map(int,input().split())) for i in range(Q)]\nqueries = queries[::-1]\nans = []\nS = {}\ndef d(x):\n    if x in S:\n        return S[x]\n    else:\n        return x\n#e = list(range(5*(10**5)+1))\nfor que in queries:\n    if que[0] == 1:\n        ans.append(d(que[1]))\n    else:\n        S[que[1]] = d(que[2])\n\nprint(*ans[::-1])",
                true
            ],
            [
                "t = int(input())\nd = dict()\nans = []\nq = []\nfor i in range(t):\n    q.append(list(map(int, input().split())))\nfor x in reversed(q):\n    if x[0] == 1:\n        if x[1] not in d:\n            cur = x[1]\n        else:\n            cur = d[x[1]]\n        ans.append(cur)\n    else:\n        if x[2] not in d:\n            d[x[1]] = x[2]\n        else:\n            d[x[1]] = d[x[2]]\nprint(*ans[::-1])",
                true
            ],
            [
                "from collections import *\nimport sys\ninput = sys.stdin.readline\nq = int(input())\nr = []\ns = {}\nfor _ in range(q):\n    l = list(map(int, input().split()))\n    r.append(l)\na = []\nfor t in reversed(r):\n    if t[0] == 2:\n        if t[2] not in s:\n            s[t[1]] = t[2]\n        else:\n            s[t[1]] = s[t[2]]\n    else:\n        a.append(s[t[1]] if t[1] in s else t[1])\nprint(\" \".join(map(str, reversed(a))))",
                true
            ],
            [
                "import sys\n\ninput = sys.stdin.readline\nparent = [i for i in range(500001)]\nq = []\nfor _ in range(int(input())):\n    q.append(tuple(map(int, input().split())))\nq.reverse()\nans = []\nfor j in q:\n    if j[0] == 1:\n        ans.append(parent[j[1]])\n    else:\n        parent[j[1]] = parent[j[2]]\nans.reverse()\nprint(*ans)",
                true
            ],
            [
                "'''Author- Akshit Monga'''\nfrom sys import stdin, stdout\ninput = stdin.readline\nt = int(input())\nstore=[]\nfor _ in range(t):\n    vals=[int(x) for x in input().split()]\n    store.append(vals)\n\na=[]\nd={}\nfor vals in store[::-1]:\n    if vals[0]==1:\n        a.append(d.get(vals[1],vals[1]))\n    else:\n        d[vals[1]]=d.get(vals[2],vals[2])\nprint(*a[::-1])",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nmod = 998244353\n\n\ndef power(num, ex):\n    pw, res = num, 1\n    while ex:\n        if ex & 1:\n            res = res * pw\n        pw = pw * pw\n        ex >>= 1\n    return res\n\n\ndef power_with_modulo(num, ex):\n    pw, res = num % mod, 1\n    while ex:\n        if ex & 1:\n            res = res * pw % mod\n        pw = pw * pw % mod\n        ex >>= 1\n    return res\n\n\nq = int(input())\nans = []\nmp = {}\nqueries = []\nwhile q:\n    a = list(map(int, input().split()))\n    queries.append(a)\n    q -= 1\n\nqueries.reverse()\nfor a in queries:\n    if a[0] == 1:\n        x = a[1]\n        if x in mp.keys():\n            ans.append(mp[x])\n        else:\n            ans.append(x)\n    else:\n        x, y = a[1], a[2]\n        if y in mp.keys():\n            mp[x] = mp[y]\n        else:\n            mp[x] = y\n    q -= 1\n\nprint(*ans[::-1])\n\n\n\n\n\n\n",
                true
            ],
            [
                "import math,sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());mod1=1000000007;mod2=998244353\n\nq=I();l=[];ans=[]\nfor i in range(q):l.append(L())\nl.reverse();d=[i for i in range(500001)]\nfor j in l:\n    if j[0]==1:ans.append(d[j[1]])\n    else:\n        d[j[1]]=d[j[2]]\nprint(*ans[::-1])",
                true
            ],
            [
                "import sys\ninpu=sys.stdin.readline\nprin=sys.stdout.write\nI=lambda:[*map(int,inpu().split())]\n\nq, = I()\nqueries = []\nfor i in range(q):\n    queries.append(I())\n\nfinal = {}\nrev = []\nfor i in range(q - 1, -1, -1):\n    query = queries[i]\n    if query[0] == 1:\n        if query[1] in final:\n            rev.append(final[query[1]])\n        else:\n            rev.append(query[1])\n    else:\n        x, y = query[1], query[2]\n        if y in final:\n            final[x] = final[y]\n        else:\n            final[x] = y\n\nprint(' '.join(str(guy) for guy in rev[::-1]))",
                true
            ],
            [
                "import sys\n\nq = int(sys.stdin.readline())\n\nf = list(range(500001))\ndd = [0] * 500001\n\n\ndef find(i):\n    if i != f[i]:\n        f[i] = find(f[i])\n    return f[i]\n\n\ndef union(i, j):\n    fi, fj = find(i), find(j)\n    if fi != fj:\n        if dd[fi] < dd[fj]:\n            f[fi] = fj\n        else:\n            f[fj] = fi\n        if dd[fi] == dd[fj]:\n            dd[fi] += 1\n\n\nmp = {}\n\nn = 0\n\narr = []\n\nfor _ in range(q):\n    op = list(map(int, sys.stdin.readline().split()))\n    if op[0] == 1:\n        x = op[1]\n        arr.append(x)\n        if x in mp:\n            union(mp[x], n)\n        else:\n            mp[x] = n\n        n += 1\n    else:\n        x, y = op[1], op[2]\n        if x == y or x not in mp:\n            continue\n        if y in mp:\n            arr[find(mp[x])] = y\n            union(mp[x], mp[y])\n        else:\n            arr[find(mp[x])] = y\n            mp[y] = mp[x]\n        del mp[x]\nfor i in range(n):\n    arr[i] = arr[find(i)]\n\nprint(' '.join(map(str, arr)))\n",
                true
            ],
            [
                "from sys import stdin\n\n\ndef main():\n    q = int(stdin.readline())\n    queries = []\n    for _ in range(q):\n        queries.append(list(map(int, stdin.readline().split())))\n    answer = []\n    replace = {}\n    for query in reversed(queries):\n        if query[0] == 1:\n            answer.append(replace.get(query[1], query[1]))\n        else:\n            replace[query[1]] = replace.get(query[2], query[2])\n    print(' '.join(map(str, reversed(answer))))\n\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "lines = int(input())\nresult = []\ntmp = {}\nl = []\nfor _ in range(lines):\n    l.append([int(i) for i in input().split()])\nfor i in reversed(l):\n    if i[0] == 1:\n        x = i[1]\n        if x in tmp:\n            result.append(tmp[x])\n        else:\n            result.append(x)\n    else:\n        x = i[1]\n        y = i[2]\n        if y in tmp:\n            tmp[x] = tmp[y]\n        else:\n            tmp[x] = y\nprint(\" \".join([str(i) for i in result[::-1]]))",
                true
            ],
            [
                "# cook your dish here\nimport sys\n#import random\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\n#import math\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\ndx = [0,0,1,-1]\ndy = [1,-1,0,0]\nmod = 10**9 + 7\nmod1 = 998244353\n\ndef get(a) :\n    if (a == parent[a]) :\n        return a\n    parent[a] = get(parent[a[i]])\n    return parent[a]\n\nfor _ in range (1) :\n    \n    mx = 5 * (10**5) + 1\n\n    parent =[i for i in range(mx)]\n\n    q = ii()\n\n    a = []\n\n    for i in range (q) :\n        a.append(il())\n\n    #print(a)\n\n    ans = []\n    a = a[::-1]\n    \n    for i in range (q) :\n        if (a[i][0] == 1) :\n            ans.append(parent[a[i][1]])\n        else :\n            parent[a[i][1]] = parent[a[i][2]]\n\n    ans.reverse()\n\n    print(*ans)\n",
                true
            ],
            [
                "\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nfrom collections import defaultdict, Counter\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nimport math\n\ndef I():\n    return(int(input()))\ndef lint():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input().strip()\n    return(list(s[:len(s)]))\ndef invr():\n    return(map(int,input().split()))\n# Python program to print all\n# primes smaller than or equal to\n# n using Sieve of Eratosthenes\n\nimport heapq\n\ndef ask(a,b,c):\n    print(f\"? {a} {b} {c}\")\n    sys.stdout.flush()\n    res=int(input())\n    sys.stdout.flush()\n    return res\nt=I()\nl=[]\nfor _ in range(t):\n    l.append(lint())\n\nd=defaultdict(lambda:None)\na=defaultdict(lambda:0)\nl=l[::-1]\nans=[]\nfor i in range(t):\n    tmp=l[i]\n    if tmp[0]==1:\n        if d[tmp[1]]!=None:\n            ans.append(a[d[tmp[1]]])\n            \n        else:\n            ans.append(tmp[1])\n      \n    else:\n        x,y=tmp[1:]\n        if d[y]!=None:\n            a[i]=a[d[y]]\n        else:\n            a[i]=y\n        d[x]=i\n       \n\nprint(*ans[::-1])\n        \n\n\n        \n\n\n    ",
                true
            ],
            [
                "from sys import stdin,stdout,setrecursionlimit\nfrom math import gcd,sqrt,factorial,pi,inf\nfrom collections import deque,defaultdict\nfrom bisect import bisect,bisect_left\nfrom time import time\nfrom itertools import permutations as per\nfrom heapq import heapify,heappush,heappop,heappushpop\ninput=stdin.readline\nR=lambda:map(int,input().split())\nI=lambda:int(input())\nS=lambda:input().rstrip('\\r\\n')\nL=lambda:list(R())\nP=lambda x:stdout.write(str(x)+'\\n')\nlcm=lambda x,y:(x*y)//gcd(x,y)\nnCr=lambda x,y:(f[x]*inv((f[y]*f[x-y])%N))%N\ninv=lambda x:pow(x,N-2,N)\nsumx=lambda x:(x**2+x)//2\nN=10**9+7\n\na=[]\np=[i for i in range(5*(10**5)+1)]\nfor i in [L() for i in range(I())][::-1]:\n    if i[0]==1:\n        a+=p[i[1]],\n    else:\n        p[i[1]]=p[i[2]]\nprint(*a[::-1])",
                true
            ],
            [
                "from math import *\n \n#from math import factorial as fact, comb as ncr \nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\n\nfrom array import array\nfrom re import search\n \nli=lambda : list(map(int,input().split()))\narr=lambda a: array('i',a)\nbi=lambda n: bin(n).replace(\"0b\", \"\")\nyn=lambda f: print('NYOE S'[f::2])\nsbstr=lambda a,s: search('.*'.join(a),s)\n\n'''def isprime(a):\n    if a==2: return True\n    elif a%2==0: return False\n    n=3\n    while n<=a**0.5:\n        if a%n==0:\n            return False\n        n+=2\n    return True\n'''\n'''def nf(n,a):\n    b=a*a\n    c=b*a\n    d=c*a\n    e=n\n    ct=0\n    while e%a==0:\n        if e%d==0:\n            ct+=4\n            e=e//d\n        if e%c==0:\n            ct+=3\n            e=e//c\n        if e%b==0:\n            ct+=2\n            e=e//b\n        if e%a==0:\n            ct+=1\n            e=e//a\n    return ct\n'''\n\ndef solve():\n    ans=[]\n    qre=int(input())\n    q=[]\n    for _ in range(qre):\n        q.append(li())\n    #print(q)\n    sw=dict()\n    for qr in reversed(q):\n       # print(qr)\n        if qr[0]==1:\n            if qr[1] in sw:\n                ans.append(sw[qr[1]])\n            else:\n                ans.append(qr[1])\n        else:\n            if qr[2] not in sw:\n                sw[qr[1]]=qr[2]\n            else:\n                sw[qr[1]]=sw[qr[2]]\n        #print(*ans)\n    \n    \n    print(*ans[::-1])\n\nsolve()",
                true
            ],
            [
                "import sys\n\ndef rl():\n    return sys.stdin.readline()\n\ndef r_arr():\n    a = rl().split(\" \")\n    a = [int(x) for x in a]\n    return a\n    \nn = int(rl())\na = [0]*n\nb = [0]*n\nx = [0]*n\ny = [0]*n\nd = {}\n\nfor i in range(n):\n    arr = r_arr()\n    b[i] = arr[0]\n    if (b[i]==1): a[i] = arr[1]\n    else:\n        x[i] = arr[1]\n        y[i] = arr[2]\n\n\n\nfor i in range(n-1,-1,-1):\n    if b[i]==1:\n        z = a[i]\n        if z in d: a[i] = d[z]\n    else:\n        xx = x[i]\n        yy = y[i]\n        if yy in d: d[xx] = d[yy]\n        else: d[xx] = yy\n    \n\nst = \"\"\nfor i in range(n):\n    if (b[i]==1):\n        st+=str(a[i])+\" \"\nprint(st)\n\n        \n        \n        ",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYou have received data from a Bubble bot. You know your task is to make factory facilities, but before you even start, you need to know how big the factory is and how many rooms it has. When you look at the data you see that you have the dimensions of the construction, which is in rectangle shape: N x M. \n\nThen in the next N lines you have M numbers. These numbers represent factory tiles and they can go from 0 to 15. Each of these numbers should be looked in its binary form. Because from each number you know on which side the tile has walls. For example number 10 in it's binary form is 1010, which means that it has a wall from the North side, it doesn't have a wall from the East, it has a wall on the South side and it doesn't have a wall on the West side. So it goes North, East, South, West. \n\nIt is guaranteed that the construction always has walls on it's edges. The input will be correct. \n\nYour task is to print the size of the rooms from biggest to smallest. \n\nInput\n\nThe first line has two numbers which are N and M, the size of the construction. Both are integers: \n\nn (1 \u2264 n \u2264 10^3)\n\nm (1 \u2264 m \u2264 10^3)\n\nNext N x M numbers represent each tile of construction.\n\nOutput\n\nOnce you finish processing the data your output consists of one line sorted from biggest to smallest room sizes. \n\nExample\n\nInput\n\n\n4 5\n9 14 11 12 13\n5 15 11 6 7\n5 9 14 9 14\n3 2 14 3 14\n\n\nOutput\n\n\n9 4 4 2 1 \nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "\n# (north, east, south, west)\ndirections = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n\n# very sad\ni_cant_do_bitwise_operations = {\n    0: (False, False, False, False),\n    1: (False, False, False, True),\n    2: (False, False, True, False),\n    3: (False, False, True, True),\n    4: (False, True, False, False),\n    5: (False, True, False, True),\n    6: (False, True, True, False),\n    7: (False, True, True, True),\n    8: (True, False, False, False),\n    9: (True, False, False, True),\n    10: (True, False, True, False),\n    11: (True, False, True, True),\n    12: (True, True, False, False),\n    13: (True, True, False, True),\n    14: (True, True, True, False),\n    15: (True, True, True, True)\n}\n\nvis = [] # haha global >:)\n\ndef dfs(tiles, i, j):\n    vis[i][j] = True\n\n    tot = 1\n    for k in range(4):\n        if (not tiles[i][j][k] and not vis[i+directions[k][0]][j+directions[k][1]]):\n            tot += dfs(tiles, i+directions[k][0], j+directions[k][1])\n\n    return tot\n\n\n    \n\nif __name__ == \"__main__\":\n    n, m = list(map(int, input().split()))\n    tiles = []\n    for i in range(n):\n        line = input().split()\n        tile_line = []\n        vis_line = []\n        for x in line:\n            tile_line.append(i_cant_do_bitwise_operations[int(x)])\n            vis_line.append(False)\n        tiles.append(tile_line)\n        vis.append(vis_line)\n    \n    rooms = []\n    for i in range(n):\n        for j in range(m):\n            if (not vis[i][j]):\n                rooms.append(dfs(tiles, i, j))\n\n    rooms = sorted(rooms, reverse=True)\n    for x in rooms:\n        print(x, end=\" \")\n    print()\n    \n\n    ",
                true
            ],
            [
                "\n\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    rooms = []\n\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j]: continue\n            room_size = 0\n            stack = [(i, j)]\n            while stack:\n                x, y = stack.pop()\n                if visited[x][y]: continue\n                visited[x][y] = True\n                room_size += 1\n                # up \n                if x > 0 and not (grid[x][y] & 8 or grid[x-1][y] & 2):\n                    stack.append((x-1 , y))\n                # right\n                if y < m and not (grid[x][y] & 4 or grid[x][y+1] & 1):\n                    stack.append((x, y+1))\n                # down\n                if x < n and not (grid[x][y] & 2 or grid[x+1][y] & 8):\n                    stack.append((x+1, y))\n                # left\n                if y > 0 and not (grid[x][y] & 1 or grid[x][y-1] & 4):\n                    stack.append((x, y-1))\n\n            rooms.append(room_size)\n\n    rooms.sort(reverse=True) \n\n    print(' '.join(map(str, rooms)) + ' ')\n\n\n\n\n    \n\nif __name__ == '__main__':\n    main()",
                true
            ],
            [
                "def dfs(i, j):\n  vis[i][j] = True\n  global cells\n  cells += 1\n  adj = [(i - 1, j), (i, j + 1), (i + 1, j), (i, j - 1)]\n  adj.reverse()\n  c = box[i][j]\n  for x, y in adj:\n    if 0 <= x < n and 0 <= y < m and not vis[x][y] and not (c % 2):\n      dfs(x, y)\n    c //= 2\n\nn, m = (int(x) for x in input().split())\nbox = [[int(x) for x in input().split()] for _ in range(n)]\nvis = [[False] * m for _ in range(n)]\nsizes = []\nfor i in range(n):\n  for j in range(m):\n    if not vis[i][j]:\n      cells = 0\n      dfs(i, j)\n      sizes.append(cells)\nsizes.sort(reverse=True)\nfor x in sizes:\n  print(x, end=' ')",
                true
            ],
            [
                "import sys \nfast=sys.stdin.readline\nn,m=map(int,fast().split()) \ngrid=[] \nfor _ in range(n):\n    grid.append(list(map(int,fast().split())))\ndef dfs(i,j):\n    if i>=0 and j>=0 and i<n and j<m and grid[i][j]!=-1:\n        t=grid[i][j]\n        grid[i][j]=-1 \n        ans=0 \n        for v in [[1,[0,-1]],[2,[1,0]],[4,[0,1]],[8,[-1,-0]]]:\n            \n            if  (v[0]&t)==0:\n                ans+=dfs(i+v[1][0],j+v[1][1])\n        return ans+1\n        \n    else:\n        return 0\nrs=[]\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j]!=-1:\n            rs.append(dfs(i,j))\n            \nrs.sort(reverse=True) \nfor r in rs:\n    print(r,end=' ')",
                true
            ],
            [
                "# This code is contributed by Siddharth\n\n\nfrom sys import *\ninput = stdin.readline\n\n\n\nimport threading\nfrom bisect import *\nimport math\nfrom collections import *\nimport operator\nfrom heapq import *\nfrom itertools import *\ninf=10**19\nmod=10**9+7\nMOD=998244353\nS1 = 'abcdefghijklmnopqrstuvwxyz'\nS2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ndx = [-1,0]\ndy = [0,-1]\n# inverse modulo power pow(a,-1,mod) - it only works on py 3.8 ( *not in pypy )\nsetrecursionlimit(200005)\ndef asc(c):\n    return ord(c)-97+1\n\n\n\n\n\n# ==========================================> Code Starts Here <=====================================================================)\n\n\nn, m = map(int, input().split())\ngrid = [list(map(int, input().split())) for _ in range(n)]\nvisited = [[False] * m for _ in range(n)]\nrooms = []\n\nfor i in range(n):\n    for j in range(m):\n        if visited[i][j]: continue\n        room_size = 0\n        stack = [(i, j)]\n        while stack:\n            x, y = stack.pop()\n            if visited[x][y]: continue\n            visited[x][y] = True\n            room_size += 1\n            # up\n            if x > 0 and not (grid[x][y] & 8 or grid[x - 1][y] & 2):\n                stack.append((x - 1, y))\n            # right\n            if y < m and not (grid[x][y] & 4 or grid[x][y + 1] & 1):\n                stack.append((x, y + 1))\n            # down\n            if x < n and not (grid[x][y] & 2 or grid[x + 1][y] & 8):\n                stack.append((x + 1, y))\n            # left\n            if y > 0 and not (grid[x][y] & 1 or grid[x][y - 1] & 4):\n                stack.append((x, y - 1))\n\n        rooms.append(room_size)\n\nrooms.sort(reverse=True)\n\nprint(' '.join(map(str, rooms)) + ' ')\n\n\n\n\n\n\n\n\n",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYouKn0wWho has an integer sequence a_1, a_2, \u2026 a_n. Now he will split the sequence a into one or more consecutive subarrays so that each element of a belongs to exactly one subarray. Let k be the number of resulting subarrays, and h_1, h_2, \u2026, h_k be the lengths of the longest increasing subsequences of corresponding subarrays.\n\nFor example, if we split [2, 5, 3, 1, 4, 3, 2, 2, 5, 1] into [2, 5, 3, 1, 4], [3, 2, 2, 5], [1], then h = [3, 2, 1].\n\nYouKn0wWho wonders if it is possible to split the sequence a in such a way that the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of h_1, h_2, \u2026, h_k is equal to 0. You have to tell whether it is possible.\n\nThe longest increasing subsequence (LIS) of a sequence b_1, b_2, \u2026, b_m is the longest sequence of valid indices i_1, i_2, \u2026, i_k such that i_1 < i_2 < \u2026 < i_k and b_{i_1} < b_{i_2} < \u2026 < b_{i_k}. For example, the LIS of [2, 5, 3, 3, 5] is [2, 3, 5], which has length 3.\n\nAn array c is a subarray of an array b if c can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10 000) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (2 \u2264 n \u2264 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print \"YES\" (without quotes) if it is possible to split into subarrays in the desired way, print \"NO\" (without quotes) otherwise. You can print each letter in any register (upper or lower).\n\nExample\n\nInput\n\n\n4\n7\n1 3 4 2 2 1 5\n3\n1 3 4\n5\n1 3 2 4 2\n4\n4 3 2 1\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first test case, YouKn0wWho can split the sequence in the following way: [1, 3, 4], [2, 2], [1, 5]. This way, the LIS lengths are h = [3, 1, 2], and the bitwise XOR of the LIS lengths is 3 \u2295 1 \u2295 2 = 0.\n\nIn the second test case, it can be shown that it is impossible to split the sequence into subarrays that will satisfy the condition.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "# cook your dish here\nfor _ in range(int(input())):\n    n=int(input())\n    a=[int(x) for x in input().split()]\n    flag=0 \n    if(len(a)%2==0):\n        flag=1\n    else:\n        for i in range(n-1):\n            if(a[i]>=a[i+1]):\n                flag=1\n    if(flag==0):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n    ",
                true
            ],
            [
                "d = int(input())\n\nwhile d:\n    d -= 1\n\n    size = int(input())\n    f = False\n    h = list(map(int, input().split()))\n\n    if len(set(h)) % 2 == 0:\n        print(\"YES\")\n    else:\n        for i in range(1, size):\n            if h[i] > h[i-1]:\n                continue\n            else:\n                f = True\n                break\n        print(\"YES\" if f == True else \"NO\")\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    li=list(map(int,input().split()))\n    f=1 \n    if(n%2!=0):\n        for i in range(n-1):\n            if(li[i]>=li[i+1]):\n                f=0 \n                break \n    else:\n        f=0\n    if(f==1):\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    a = int(input())\n    ar = list(map(int,input().split()))\n    b = True\n    for i in range(a-1):\n        b &= ar[i] < ar[i+1] \n    if a % 2 ==0 or not b:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split(\" \")))\n    d=0\n    if n%2==0:\n        print(\"YES\")\n    else:\n        for i in range(1,n):\n            if l[i]<=l[i-1]:\n                d=1\n        if d==1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n            \n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n%2 == 0:\n        print('YES')\n    else:\n        flag = 0\n        for i in range(1,n):\n            if l[i] <= l[i-1]:\n                flag = 1\n                break\n        if flag == 0:\n            print('NO')\n        else:\n            print('YES')",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    f=0\n    for j in range(1,n):\n        if(a[j]<=a[j-1]):\n            f=1\n            break\n    if(n%2==0):\n        print(\"YES\")\n    elif(f==0):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n    ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    if n&1:\n        flag=0\n        for i in range(n-1):\n            if arr[i]>=arr[i+1]:\n                flag=1\n        if flag:print(\"YES\")\n        else:print(\"NO\")\n    else:print(\"YES\")",
                true
            ],
            [
                "\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    ans=0\n    if(len(a)%2==0):\n        print(\"YES\")\n    else:\n        flag=0\n        for i in range(1,n):\n            if(a[i]<=a[i-1]):\n                flag=1\n                break\n            else:\n                flag=0\n        if(flag==1):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n            \n        \n        \n        \n    ",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    a=[*map(int,input().split())]\n    if n%2==0:\n        print('YES')\n    else:\n        for i in range(n-1):\n            if a[i]>=a[i+1]: \n                print('YES')\n                break\n        else:\n            print('NO')",
                true
            ],
            [
                "T = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    if N % 2 == 0:\n        print('YES')\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] >= arr[i+1]:\n                print('YES')\n                break\n        else:\n            print('NO')",
                true
            ],
            [
                "import sys\nreadline = sys.stdin.readline\n\nT = int(readline())\nfor t in range(T):\n  N = int(readline())\n  A = list(map(int,readline().split()))\n  \n  if N % 2 == 0:\n    print(\"YES\")\n    continue\n    \n  for i in range(N - 1):\n    if A[i] >= A[i + 1]:\n      print(\"YES\")\n      break\n  else:\n    print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\n\nfor tc in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if n %2 == 0 : print(\"YES\")\n    else :\n        isIncr = True\n        for i in range(1, n): \n            if a[i] <= a[i-1]:\n                isIncr = False\n                break\n        if isIncr : print(\"NO\")\n        else: print(\"YES\")\n",
                true
            ],
            [
                "# cook your dish here\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(\" \")))\n    l = len(a)\n    flag = False\n    if l%2==0:\n        flag = True\n    \n    else:\n        for j in range(l-1):\n            if a[j]>=a[j+1]:\n                flag = True\n                break\n    \n    if flag:\n        print(\"YES\")\n    \n    else:\n        print(\"NO\")",
                true
            ],
            [
                "test = int(input())\nfor i in range(test):\n    n = int(input())\n    lol = list(map(int,input().split()))\n    c = 0\n    if n%2==0:\n        print(\"YES\")\n    else:\n        for j in range(len(lol)-1):\n            if lol[j]>=lol[j+1]:\n                c+=1\n                break\n            else:\n                c=c\n        if c!=0:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "for s in[*open(0)][2::2]:a=*map(int,s.split()),;print('YNEOS'[len(a)&all(x<y for x,y in zip(a,a[1:]))::2])",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n % 2 == 0:\n        print('YES')\n        continue\n    for i, x in enumerate(arr):\n        if i == 0:\n            continue\n        if x <= arr[i-1]:\n            print('YES')\n            break\n    else:\n        print('NO')",
                true
            ],
            [
                "from sys import stdin\nfrom collections import deque\nlst = list(map(int, stdin.read().split()))\n_s = 0\ndef inp(n=1):\n    global _s\n    ret = lst[_s:_s + n]\n    _s += n\n    return ret\ndef inp1():\n    return inp()[0]\n\nt = inp1()\nfor _ in range(t):\n  n = inp1()\n  a = inp(n)\n  if n % 2 == 1 and sorted(a) == a and len(set(a)) == n:\n    print(\"NO\")\n  else :\n    print(\"YES\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    \n    if n%2==0:\n        print('YES')\n        continue\n    pas = False\n    for i in range(n-1):\n        if a[i] >= a[i+1]:\n            pas = True\n    print(\"YES\" if pas else \"NO\")",
                true
            ],
            [
                "def isupr(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True\n\nfor q in range(int(input())):\n    n = int(input())\n    arr = [*map(int, input().split())]\n    if n%2==0:\n        print(\"YES\")\n    else:\n        if isupr(arr):\n            print(\"NO\")\n        else:\n            print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(a) % 2 == 0:\n        print(\"YES\")\n    else:\n        flag = False\n        for i in range(1, len(a)):\n            if a[i-1] >= a[i]:\n                print(\"YES\")\n                flag = True\n                break\n        if not flag:\n            print(\"NO\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    res = \"NO\"\n    n = int(input())\n    a = list(map(int,input().split()))\n    if n%2==0:\n        print(\"YES\")\n        continue\n    for i in range(1,n):\n        if a[i-1]>=a[i]:\n            res = \"YES\"\n    print(res)\n",
                true
            ],
            [
                "import math\nfrom collections import defaultdict, Counter\nfrom bisect import bisect_left\nfrom sys import stdin\nfrom math import gcd\nfrom functools import reduce\nimport itertools\n\n\ndef find():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n % 2 == 0:\n        print('YES')\n        return\n    else:\n        for i in range(1,n):\n            if arr[i] <= arr[i-1]:\n                print('YES')\n                return\n        for i in range(1,n):\n            print('NO')\n            return\n\ninput = stdin.readline\n# a = list(map(int, input().split()))\n\nt = int(input())\nfor _ in range(t):\n    find()\n    ",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\ninp_vars_int = lambda: map(int, input().split())\ninp_list_int = lambda: list(map(int, input().split()))\n\nt = int(input())\n\nfor _ in range(t):\n    _ = input()\n    a = inp_list_int()\n    n = len(a)\n    if n % 2:\n        pos = False\n        for i in range(1, n):\n            if a[i] <= a[i-1]:\n                pos = True\n                break\n        print('YES' if pos else 'NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "t=int(input())\nres=[]\n\ndef sorted(l):\n    for i in range(1,len(l)):\n        if (l[i]<=l[i-1]):\n            return False\n\n    return True\nfor i in range(t):\n    n=int(input())\n    l=input().split()\n    l=[int(i) for i in l]\n\n    if n%2==0:\n        res.append(\"YES\")\n    else:\n        if (not sorted(l)): res.append(\"YES\")\n        else:\n            res.append(\"NO\")\n\n\nfor i in res:\n    print(i)",
                true
            ],
            [
                "T = int(input())\n\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    if N % 2 == 0:\n        print(\"YES\")\n    else:\n        is_IS = True\n\n        for i in range(N-1):\n            if A[i] >= A[i+1]:\n                is_IS = False\n                break\n\n        print(\"NO\" if is_IS else \"YES\")\n",
                true
            ],
            [
                "# import template\nimport math\nfrom itertools import combinations as cm\ndef gcd(a,b):\n    if b==0 :\n        return a\n    if a >b:\n        a,b = b,a\n    \n    return gcd(a , b%a)\ndef isPrime(x):\n    i = 2\n    while i*i <= x:\n        if x%i == 0:\n            return False\n        i +=1\n    return True\n\ndef solve():\n    n = inp()\n    a = inl()\n    if n%2==0:\n        print(\"YES\")\n    else:\n        # flg = 0\n        for i in range(n-1):\n            if a[i] >= a[i+1]:\n                print(\"YES\")\n                return\n        print(\"NO\")\n\n        \n\n\ndef inl():\n    return [int(i) for i in input().split()]\ndef inp():\n    return int(input())\n\nif __name__ == '__main__':\n    t = 1\n    t = inp()\n    while t:\n        solve()\n        t-=1",
                true
            ],
            [
                "n = int(input())\nfor i in range(n):\n    a = int(input())\n    ar = list(map(int,input().split()))\n    if a % 2 ==0:\n        print(\"YES\")\n        continue\n    b = True\n    for i in range(a-1):\n        if(ar[i] >= ar[i+1]):\n            b = False\n            break\n    print(\"YES\" if not b else \"NO\")",
                true
            ],
            [
                "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\ninteractive = False\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\n\nflush = sys.stdout.flush\nif interactive and not testing:\n    input = sys.stdin.readline\nelse:\n    inputData = InputData()\n    input = inputData.input\n\ndef intin():\n    return(int(eval(input())))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(eval(input())))\ndef strin():\n    return eval(input())\ndef lout(l, sep=\"\\n\", toStr=True):\n    print((sep.join(list(map(str, l)) if toStr else l)))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print((args[0] if len(args)==1 else args))\n    if kargs: print([(k,v) for k,v in list(kargs.items())])\ndef ask(q):\n    sys.stdout.write(str(q)+'\\n')\n    flush()\n    return intin()\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\n\ndef main():\n    n = intin()\n    a = intlin()\n    if n%2 == 0:\n        return True\n    flag = False\n    i = 1\n    while i < n:\n        if a[i] <= a[i-1]:\n            return True\n        i += 1\n    return False\n\nanss = []\nfor _ in range(intin()):\n    anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print((int(round(time() * 1000))  - start_time))\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    if n%2==0:\n        print(\"YES\")\n    else:\n        flag=0\n        for i in range(n-1):\n            if l[i]>=l[i+1]:\n                flag=1\n                break\n        if not flag:\n            print(\"NO\")\n        else:\n            print(\"YES\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if(n&1):\n        flag=False\n        for i in range(n-1):\n            if(a[i+1]<=a[i]):\n                flag=True\n                break\n        if(flag):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('YES')",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n%2==0:\n        print(\"YES\")\n    else:\n        ver=False\n        for i in range(1,n):\n            if a[i]<=a[i-1]:\n                ver=True\n                break\n        if ver:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int,input().split()))\n    if n&1:\n        possible=False\n        for i in range(n-1):\n            if nums[i]>=nums[i+1]:\n                possible=True\n                break\n        if possible:print(\"YES\")\n        else:print(\"NO\")        \n        pass\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split(' ')]\n\n    if len(a) % 2 == 0:\n        print(\"YES\")\n\n    else:\n        done = False\n        for i, val in enumerate(a[:-1]):\n            if val >= a[i+1]:\n                print(\"YES\")\n                done = True\n                break\n        if not done:\n            if len(a) < 7:\n                print(\"NO\")\n            else:\n                if (len(a) - 7 + 1) % 2 == 0:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n",
                true
            ],
            [
                "import sys\n\n#comment these out later\n#sys.stdin = open(\"in.in\", \"r\")\n#sys.stdout = open(\"out.out\", \"w\")\n\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    #t = 1\n\n    for _ in range(t):\n        n = int(input())\n        ar = list(map(int, input().split()))\n\n        ans = False\n\n        if n%2:\n            for i in range(n-1):\n                if ar[i] >= ar[i+1]:\n                    ans = True\n                    break\n\n            if ans:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n        else:\n            print(\"YES\")\n            continue \n\n\nmain()",
                true
            ],
            [
                "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    if(n%2==0):\n        print(\"YES\")\n        continue\n    st = True\n    for i in range(1,n):\n        if(arr[i]<=arr[i-1]):\n            st = False\n            break\n    if(st==False):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "from math import ceil, log2, floor,sqrt,gcd\nfrom collections import defaultdict,deque\n\nimport sys\nimport os.path\n\nsys.setrecursionlimit(200000)\nif (os.path.exists('input.txt')):\n    sys.stdin = open(\"input.txt\", \"r+\")\n    sys.stdout = open(\"output.txt\", \"w\")\n\n\n# input = sys.stdin.readline\n# print=sys.stdout.write\ndef MI():\n    return map(int, input().split())\n\ndef bfs(s,adj):\n     \n    V = 10**5+2\n    visited = [False] * V\n    level = [0] * V\n  \n    for i in range(V):\n        visited[i] = False\n        level[i] = 0\n    queue = deque()\n    visited[s] = True\n    queue.append(s)\n    level[s] = 0\n  \n    while (len(queue) > 0):\n\n        s = queue.popleft()\n        for i in adj[s]:\n            if (not visited[i]):\n                level[i] = level[s] + 1\n                visited[i] = True\n                queue.append(i)\n  \n\n    \n             \n    return level\n\ndef dfs(node,tree,d,v):\n    v[node]=1\n    for j in d[node]:\n        if v[j]==0:\n            tree[node].append(j)\n            dfs(j,tree,d,v)\n\nmod=10**9+7\ndef solve(testcase):\n    n= int(input())\n    # n,k=MI()\n    a=list(MI())\n    if n%2==0:\n        print(\"YES\")\n    else:\n        for i in range(n-1):\n            if a[i]>=a[i+1]:\n                print(\"YES\")\n                return\n        print(\"NO\")\n    \n\n\n    \n    \n\n    \n    \n        \n    \n  \n        \n\n\n            \n\n\n\n\n        \n\n\n    \n\n\n\n\n\n\n\n    \n    \n\n    \n\n    \n    \n    \n\n    \n\n\n\n\n    \n\n\n\n\n    \n    \n    \n\nt=int(input())\nfor _ in range(t):\n    solve(_+1)",
                true
            ],
            [
                "for _ in range(int(input())):\n   n = int(input())\n   s = list(map(int, input().split()))\n   if n%2:\n      for i in range(1,n):\n         if s[i-1] >= s[i]:\n            print(\"YES\")\n            break\n      else:\n         print('NO')\n   else:\n      print('YES')\n      \n",
                true
            ],
            [
                "t = int(input())\n\nwhile (t):\n\n    n = int(input())\n    a = list(map(int,input().split()))\n    \n    if (n % 2 == 0):\n        print('YES')\n    else:\n        flag = False\n        for i in range(n-1):\n            if (a[i] >= a[i+1]):\n                flag = True\n                break\n        if (flag):\n            print('YES')\n        else:\n            print('NO')\n    \n    t -= 1\n\n        \n    \n    \n        \n        \n    \n    ",
                true
            ],
            [
                "\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    i = 0\n    ans = \"NO\"\n\n    while i < n-1:\n        if a[i] >= a[i+1]:\n            ans = \"YES\"\n            break\n        i += 1\n    if ans == 'NO':\n        if n % 2 == 0: ans = 'YES'\n\n    print(ans)\n",
                true
            ],
            [
                "inf = float('inf')\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\nimport array\nimport collections\n\n# sys.setrecursionlimit(10 ** 9)\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef maps(): return [int(i) for i in input().split()]\n\n\nlogging.basicConfig(\n    format=\"%(message)s\",\n    level=logging.WARNING,\n)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\nfrom bisect import bisect_left\n\nfor _ in range(*maps()):\n    n, = maps()\n    a = list(maps())\n\n    if n % 2 == 0 :\n        print('YES')\n        continue\n\n    ok = False\n    for i in range(1 , n):\n        if a[i] <= a[i-1]:\n            ok = True\n    print(['NO','YES'][ok])\n\n\n\n\n\n\n",
                true
            ],
            [
                "import sys\nINF = 10**20\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom math import gcd\nfrom math import ceil, log2, factorial\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n \nTESTS = 1 \n\"\"\"\nFacts and Data representation\nConstructive? Top bottom up down\n\"\"\"\ndef solve():\n  n, = I()\n  a = I()\n  if n % 2 == 0:\n    print('YES')\n    return\n\n  for i in range(1, n):\n    if a[i - 1] >= a[i]:\n      print('YES')\n      return\n  print('NO')\n\ndef main():\n  if not TESTS:\n    solve()\n    return\n\n  t, = I()\n  while t:\n    solve()\n    t -= 1\n\nif __name__ == \"__main__\":\n  main()\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    arr=[int(x) for x in input().split()]\n    if n%2==0:\n        print(\"YES\")\n    else:\n        printed = False\n        for j in range(n-1):\n            if arr[j+1]<=arr[j]:\n                print(\"YES\")\n                printed=True\n                break\n        if not printed:\n            print(\"NO\")\n",
                true
            ],
            [
                "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    if n % 2 == 0:\n        print(\"YES\")\n        continue\n    else:\n        arr2 = arr[:]\n        arr2.sort()\n        # print(arr)\n        # print(arr2)\n        if arr == arr2:\n            if len(set(arr2)) != n:\n                print(\"YES\")\n                continue\n            else:\n                \n                print(\"NO\")\n                continue\n        else:\n            print(\"YES\")\n            continue\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    if n%2==0:\n        print(\"YES\")\n    else:\n        x=l.copy()\n        x.sort()\n        if l==x:\n            if len(set(l))==len(l):\n                print(\"NO\")\n            else:\n                print(\"YES\")\n        else:\n            print(\"YES\")",
                true
            ],
            [
                "import sys\n\n# sys.setrecursionlimit(200005)\nint1 = lambda x: int(x)-1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline().rstrip()\n# inf = 10**16\ninf = 4294967295\n# md = 10**9+7\nmd = 998244353\n\ndef solve():\n    n = II()\n    aa = LI()\n    if n & 1 == 0: return True\n    for i in range(n-1):\n        if aa[i] >= aa[i+1]: return True\n    return False\n\nfor testcase in range(II()):\n    print(\"YES\" if solve() else \"NO\")\n",
                true
            ],
            [
                "T = int(input())\n\nfor t in range(T):\n    n = int(input())\n    numbers = [int(x) for x in input().split()]\n    if n%2 == 0:\n        print('YES')\n    else:\n        isdes = False\n        for i in range(n-1):\n            if numbers[i] >= numbers[i+1]:\n                isdes = True\n                break\n        if isdes:\n            print('YES')\n        else:\n            print('NO')",
                true
            ],
            [
                "def get_ans(a, n):\n    if (n % 2) == 0:\n        return True\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            return True\n    return False\n\n\nanss = []\nt = int(input())\nfor _ in range(t):\n    _n = int(input())\n    _a = list(map(int, input().split()))\n    anss.append(get_ans(_a, _n))\n\nfor ans in anss:\n    if ans:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n % 2 == 0:\n        print(\"YES\")\n    else:\n        for i in range(n-1):\n            if a[i] >= a[i+1]:\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    test=0\n    i=1\n    while i < n:\n        if a[i] <= a[i-1]:\n           test = 1\n        i += 1\n    if n % 2 == 0 or test == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    yes=True\n    if n%2!=0:\n        yes=False\n        for i in range(1,n):\n            if a[i-1]>=a[i]:\n                yes=True\n                break\n    print('YES' if yes else 'NO')",
                true
            ],
            [
                "#SaveHindus\n#SaveHinduTemples\n#We_want_justice\n#save_minority_hindu\n#HumanRightsViolations\n#I_Am_Feeling_unsafe_In_Bangladesh\n#Save_The_Hindu_Of_Bangladesh\n#save_hindu_bangladesh\n#stop_hindu_oppression_bangladesh\n#Stop_Communal_Attack\n#Save_Bangladeshi_Hindus\n#BangladeshiHinduWantSafety\n#SaveBangladeshiHindus\n#WeDemandSafety\n#WeDemandJustice\nfrom math import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    if n % 2 == 0:\n        print(\"YES\")\n    else:\n        f = 0\n        for i in range(1, n):\n            if li[i] <= li[i - 1]:\n                f = 1\n                break\n        if f == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    if n%2==0:\n        print(\"YES\")\n    else:\n        for i in range(n-1):\n            if l[i]>=l[i+1]:\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "import sys\nfrom functools import lru_cache\nfrom collections import defaultdict, deque \nfrom types import GeneratorType\ninput = sys.stdin.readline\n\ndef sign(num):\n    return 1 if num > 0 else -1\n\ndef solve(nums):\n    \n    if len(nums) % 2 == 0:\n        return \"YES\"\n        \n    ascending_seq = True\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i-1]:\n            return \"YES\"\n    \n    return \"NO\"\n\nif __name__ == \"__main__\":\n    \n    t = int(input())\n    \n    for _ in range(t):\n        input()\n        nums = [int(num) for num in input().split()]\n        print(solve(nums))\n    \n        \n                \n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n  n=int(input())\n  a=list(map(int,input().split()))\n  ans='NO'\n  if n%2==0:\n    ans='YES'\n  for i in range(n-1):\n    if a[i]>=a[i+1]:\n      ans='YES'\n  print(ans)",
                true
            ],
            [
                "tc=int(input())\nfor q in range(tc):\n    n=int(input())\n    l=list(map(int,input().split()))\n    if(n%2==0):\n        print('YES')\n    else:\n        f=0\n        for i in range(1,n):\n            pre=l[i-1]\n            cur=l[i]\n            if(pre>=cur):\n                f=1\n                break\n        if(f==1):\n            print('YES')\n        else:\n            print('NO')\n ",
                true
            ],
            [
                "t = int(input())\n\nfor t_i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    if n == 1:\n        print(\"NO\")\n        continue\n    if n % 2 ==0:\n        print(\"YES\")\n        continue\n    \n    flag = False\n    for i in range(1, n):\n        if a[i] <= a[i - 1]:\n            flag = True\n            break\n    \n    if flag == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n % 2 == 0:\n        print('YES')\n        continue\n    ok = False\n    for i in range(1, n):\n        if arr[i] <= arr[i - 1]:\n            ok = True\n    if ok:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "for i in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        input()\n        print('YES')\n    else:\n        inn = list(map(int, input().split()))\n        for j in range(1, len(inn)):\n            if inn[j] <= inn[j - 1]:\n                print('YES')\n                break\n        else:\n            print('NO')\n",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    if n%2==0:\n        print('YES')\n        continue\n    flag=False\n    for i in range(1,n):\n        if arr[i]<=arr[i-1]:\n            flag=True\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "import sys\n\nIS_INTERACTIVE = False\ninput = input  # type: ignore\n\n# input: function\nif not IS_INTERACTIVE:\n    *data, = sys.stdin.read().split(\"\\n\")[::-1]\n\n    def input():  # type: ignore\n        return data.pop()\n\ndef fprint(*args, **kwargs):\n    print(*args, **kwargs, flush=True)\n\ndef eprint(*args, **kwargs):\n    print(*args, **kwargs, file=sys.stderr)\n\nfor _ in range(int(input())):\n    n = int(input())\n    *arr, = map(int, input().split())\n    if n % 2 == 0:\n        print(\"YES\")\n    else:\n        is_ok = False\n        for i in range(n - 1):\n            if arr[i] >= arr[i + 1]:\n                is_ok = True\n\n\n        print(\"YES\" if is_ok else \"NO\")\n",
                true
            ],
            [
                "from os import path, truncate\nfrom sys import int_info, stdin, stdout\nif path.exists('tc.txt'):\n    stdin = open('tc.txt', 'r')\ndef gmi(): return map(int, stdin.readline().strip().split())\ndef gms(): return map(str, stdin.readline().strip().split())\ndef gari(): return list(map(int, stdin.readline().strip().split()))\ndef gart(): return tuple(map(int, stdin.readline().strip().split()))\ndef gars(): return list(map(str, stdin.readline().strip().split()))\ndef gs(): return stdin.readline().strip()\ndef gls(): return list(stdin.readline().strip())\ndef gi(): return int(stdin.readline())\n\nfor _ in range(int(input())):\n    n=gi()\n    # n,k=gmi()\n    a=gari()\n    if  n%2!=0 and len(set(a))==n and sorted(a)==a  :\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n\n\n    \n\n   \n\n    \n\n   \n\n# def maxsum(arr):\n#     n=len(arr)\n#     su=0\n#     leftdp=[0]*n\n#     rightdp=[0]*n\n#     c=0\n#     for i in range(0,n,2):\n#         su+=arr[i]\n#     for i in range(1, n, 2):\n#         leftdiff = arr[i]-arr[i-1]\n#         if c-1<0:\n#             leftdp[i]=leftdiff\n#         else:\n#             if leftdp[i-2]>0:\n#                 leftdp[i]=leftdiff+leftdp[i-2]\n#             else:\n#                 leftdp[i]=leftdiff\n#         rightdiff=0\n#         if i+1>=n:\n#             rightdiff=0\n#         else:\n#             rightdiff=arr[i]-arr[i+1]\n#         if c-1<0:\n#             rightdp[i]=rightdiff\n#         else:\n#             if rightdp[i-2]>0:\n#                 rightdp[i]=rightdiff+rightdp[i-2]\n#             else:\n#                 rightdp[i]=rightdiff\n#         c+=1\n#     maxm=0\n#     for i  in range(1,n,2):\n#          maxm=max(maxm,max(leftdp[i],rightdp[i]))\n#     return maxm + su\n        \n        \n\n# arr =list(map(int,input().split()))\n# re=maxsum(arr)\n# print(re)\n\n# x = math.floor(math.log(b)/math.log(2))\n# y = math.floor(math.log(a)/math.log(5))\n",
                true
            ],
            [
                "# import sys\n# sys.stdin=open('Python\\input.txt','r')\n# sys.stdout=open('Python\\output.txt','w')\n\nfor _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n\n    if n%2==0:\n        print(\"YES\")\n    \n    else:\n        ans=False\n        for i in range(1,n):\n            if l[i]<=l[i-1]:\n                ans=True\n                break\n        print(['NO','YES'][ans==True])",
                true
            ],
            [
                "# Code by : Sam._.072\n\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n%2==0:\n        print(\"YES\")\n    else:\n        z=False\n        p=-1\n        for i in a:\n            if i<=p:\n                z=True\n            p=i\n\n        if z:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
                true
            ],
            [
                "import sys\nimport os.path\n \nif(os.path.exists('input.txt')) :\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    sys.stderr = open(\"error.txt\", \"w\")\n    \ndepth = 1000000\nmod = 1000000007 \nlim = mod * mod\nsys.setrecursionlimit(depth) \n \nlinp = lambda: list(minp())\nminp = lambda: map(int, input().split())\n \nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\n \ndxy = [(1, 0),(-1, 0),(0, 1),(0, -1)]\n\nfor _ in range(int(input())) :\n    n, a = int(input()), linp()\n    if n%2 == 0 : print(\"YES\")\n    elif a == sorted(list(set(a))) : print(\"NO\")\n    else : print(\"YES\")",
                true
            ],
            [
                "import sys\n#import bisect\nimport math\nimport itertools\n#import array as ab\n\ndef get_line(): return list(map(int, sys.stdin.readline().strip().split()))\ndef in1(): return int(input())\n\n\nfor _ in range(in1()):\n    n=in1()\n    a=get_line()\n    if n%2==0:\n        print(\"YES\")\n    else:\n        p=0\n        for i in range(n-1):\n            if a[i]>=a[i+1]:\n                p=1\n                break\n        if p==1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "from sys import stdin,stdout\n\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int,stdin.readline().split()))\n    if sorted(a) == a and n%2==1 and len(list(set(a)))==n:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "#rOkY\n#FuCk\n\n################################### KoPaL ####################################\n\n\nt=int(input())\n\nwhile(t>0):\n    p=0\n    a=int(input())\n    l=list(map(int,input().split()))\n    for i in range(0,len(l)-1,1):\n        if(l[i]>=l[i+1]):\n            p=1\n    if(p==1 or a%2==0):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    t-=1\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n % 2 == 0:\n        print('YES')\n        continue\n    prev = -1\n    flag = False\n    for i in range(n):\n        if arr[i] <= prev:\n            flag = True\n            break\n        prev = arr[i]\n    if flag: print('YES')\n    else: print('NO')\n",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math, random\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nmod = 1000000007\n\ndef my_main():\n    kase = inp()\n    pans = []\n    mx = int(1e17)\n    for ka in range(kase):\n        n = inp()\n        da = inp(True)\n        ok = 0\n        for i in range(1, n):\n            if da[i] <= da[i-1]:\n                ok = 1\n        if n%2==0 or ok:\n            pans.append(\"YES\")\n        else:\n            pans.append(\"NO\")\n\n    print('\\n'.join(pans))\n\nmy_main()\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    is_sorted = True\n    for i in range(1, n):\n        if a[i] <= a[i - 1]:\n            is_sorted = False\n    if n % 2 and is_sorted:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    if n % 2 == 0:\n        print(\"YES\")\n    else:\n        x = any(a[i] <= a[i-1] for i in range(1,n))\n        if x:\n            print(\"YES\")\n        else:\n            print('NO')",
                true
            ],
            [
                "def getint():\n    return [int(i) for i in input().split()]\ndef get():\n    return int(input())\ndef getstr():\n    return [i for i in input().split()]\ndef S():\n    for test in range(int(input())):\n        solve()\nimport math\nimport itertools as it\nimport bisect\nimport time\nimport collections as ct\n\ndef solve():\n    n=get()\n    a=getint()\n    a=[0]+a\n    flag=False\n    if n%2==0:\n        flag=True\n    for i in range(2,n+1):\n        if a[i]<=a[i-1]:\n            flag=True\n    if flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n\nS()",
                true
            ],
            [
                "t=int(input())\n\nfor _ in range(t):\n\n    n = int(input())\n    s = str(input())\n    array = [int(i) for i in s.split()]\n\n    if (n%2)==0:\n        print(\"YES\")\n        continue\n\n    #! At this point if the array isn't sorted -> PRINT YES\n    is_sorted = True\n    for i in range(1,n):\n        if (array[i]>array[i-1]):\n            continue\n        else:\n            is_sorted = False\n            break\n    \n    if (not is_sorted):\n        print(\"YES\")\n        continue\n\n    #! Now we know that the array is sorted & odd in length therefore print NO\n    print(\"NO\")\n\n",
                true
            ],
            [
                "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n\n    if n == 1:\n        r = False\n    elif n % 2 == 0:\n        r = True\n    else:\n        flag = True\n        for i in range(n - 1):\n            if A[i] >= A[i + 1]:\n                flag = False\n                break\n        if not flag:\n            r = True\n        else:\n            r = False\n\n    print(\"YES\" if r else \"NO\")",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n\n    flag = 0\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            flag = 1\n            break\n\n    if flag == 1:\n        print(\"YES\")\n        continue\n\n    s = arr[:]\n    s.sort()\n\n    if arr == s and n%2 == 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ],
            [
                "from math import *\n\n#from math import factorial as fact, comb as ncr \nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\n\nfrom array import array\nfrom re import search\n\nli=lambda : list(map(int,input().split()))\narr=lambda a: array('i',a)\nbi=lambda n: bin(n).replace(\"0b\", \"\")\nyn=lambda f: print('NYOE S'[f::2])\nsbstr=lambda a,s: search('.*'.join(a),s)\n'''\ndef isprime(a):\n    if a==2: return True\n    elif a%2==0: return False\n    n=3\n    while n<=a**0.5:\n        if a%n==0:\n            return False\n        n+=2\n    return True\n\ndef nf(n,a):\n    b=a*a\n    c=b*a\n    d=c*a\n    e=n\n    ct=0\n    while e%a==0:\n        if e%d==0:\n            ct+=4\n            e=e//d\n        if e%c==0:\n            ct+=3\n            e=e//c\n        if e%b==0:\n            ct+=2\n            e=e//b\n        if e%a==0:\n            ct+=1\n            e=e//a\n    return ct\n'''\n\ndef smnd(n):\n    for i in range(2,n+1):\n        if n%i!=0:\n            return i\n        return n+1\n\ndef solve():\n    for _ in range(int(input())):\n        n=int(input())\n        a=li()\n        if n%2==0:\n            print(\"YES\")\n        else:\n            for i in range(n-1):\n                if a[i]>=a[i+1]:\n                    print(\"YES\")\n                    break\n            else:\n                print(\"NO\")\nsolve()",
                true
            ],
            [
                "for i in range(int(input())):\n    n=int(input())\n    a=[*map(int,input().split())]\n    if n%2==0:print('YES')\n    else:\n        for i in range(n-1):\n            if a[i]>=a[i+1]:print('YES');break\n        else:print('NO')",
                true
            ],
            [
                "for t in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n%2==0:\n        print('YES')\n    else:\n        f=0\n        for i in range(n-1):\n            if a[i]>=a[i+1]:\n                f=1\n                break\n        if f:\n            print('YES')\n        else:\n            print('NO')",
                true
            ],
            [
                "##\n##  752B.py\n##\n##\n##  Created by hioshiray on 30.10.2021.\n##\n\nfor cases in range(int(input())):\n    seq=int(input())\n    elements_of_seq=list(map(int,input().split()))\n    if seq%2==0:\n        print(\"YES\")\n    else:\n        log_bool=False\n        min_coef=-1\n        for i in elements_of_seq:\n            if i<=min_coef:\n                log_bool=True\n            min_coef=i\n\n        if log_bool==1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n            \n\n",
                true
            ],
            [
                "t = int(input())\nfor q in range(0, t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    check = 0\n\n    for i in range(0, n - 1):\n        if (arr[i] < arr[i + 1]):\n            check += 1\n\n    if (n & 1 == 0):\n        print(\"YES\")\n    else:\n        if (check == n - 1):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    li=list(map(int,input().split()))\n    if n%2==0:\n        print(\"YES\")\n    else:\n        p=li[0]\n        f=0\n        for i in range(1,n):\n            if li[i]<=p:\n                f=1\n                break\n            p=max(p,li[i])\n        if f==1:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "\nT=int(input())\nfor t in range(T):\n  n=int(input())\n  arr=list(map(int,input().split()))\n  if n%2==0:\n     print('YES')\n     continue\n  if (sorted(arr)==arr) & (n==len(set(arr))):\n     print('NO')\n     continue\n  else:\n     print('YES')",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n%2==0:\n        print('YES')\n    else:\n        flag=False\n        for i in range(1,n):\n            if a[i]<=a[i-1]:\n                flag=True\n        if flag:\n            print('YES')\n        else:\n            print('NO')\n# def f(a):\n#     n=len(a)\n#     if n==1:\n#         if a[0]%2!=0:\n#             return True\n#         else:\n#             return False\n#     else:\n#         if a[0]%2==0:\n#             for i in range(1,n):\n#                 if a[i]%3==0:\n#                     return False\n#         else:\n#             for i in range(1,n):\n#                 if a[i]%2==0:\n#                     return False\n#         return True\n# for _ in range(int(input())):\n#     n=int(input())\n#     a=list(map(int,input().split()))\n#     if f(a):\n#         print('YES')\n#     else:\n#         print('NO')    \n\n",
                true
            ],
            [
                "import sys\n\nIS_INTERACTIVE = False\ninput = input  # type: ignore\n\n# input: function\nif not IS_INTERACTIVE:\n    *data, = sys.stdin.read().split(\"\\n\")[::-1]\n\n    def input():  # type: ignore\n        return data.pop()\n\ndef fprint(*args, **kwargs):\n    print(*args, **kwargs, flush=True)\n\ndef eprint(*args, **kwargs):\n    print(*args, **kwargs, file=sys.stderr)\n\nfor _ in range(int(input())):\n    n = int(input())\n    *arr, = map(int, input().split())\n    print(\"NO\" if n % 2 == 1 and sorted(arr) == arr and len(set(arr)) == n else \"YES\")\n",
                true
            ],
            [
                "n = int(input())\n\nfor i in range(n):\n    lench = int(input())\n\n    chisla = list(map(int, input().split()))\n    last_el = chisla[0]\n\n    if lench % 2 == 0:\n        print('YES')\n\n        continue\n    \n    else:\n        t_flag = True\n\n        for k in range(1, lench):\n            if chisla[k] <= last_el:\n                t_flag = False\n\n                break\n            \n            last_el = chisla[k]\n        \n        if t_flag:\n            print('NO')\n        else:\n            print('YES')",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    data = list(map(int, input().split()))\n\n    if n & 1 == 0:\n        print('YES')\n    else:\n        flg = True\n        for i in range(1, len(data)):\n            if data[i] <= data[i-1]:\n                flg = False\n                break\n        if not flg:\n            print('YES')\n        else:\n            print('NO')\n",
                true
            ],
            [
                "n = 0; t = 0; N = [] \nt = int(input())\n\nfor w in range(t):\n    n = int(input())\n    N = list(map(int, input().split()))\n\n    if n % 2 == 0:\n        print('YES')\n        continue\n    \n    old = N[0]\n    new = 0\n    isGood = False\n    for i in range(1, n):\n        new = N[i]\n        if old >= new:\n            isGood = True\n            break\n        old = new\n    \n    if isGood:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "\nT = int(input())\nfor ttt in range(T):\n    tt = input()\n    tarr = input().split(' ')\n    for i,t in enumerate(tarr):\n        tarr[i] = int(t)\n    if len(tarr) % 2 == 0:\n        print(\"YES\")\n        continue\n    ok = False\n    for i in range(len(tarr) - 1):\n        if tarr[i] >= tarr[i + 1]:\n            ok = True\n            break\n    if ok:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n  ans = \"YES\"\n  n = int(input())\n  arr = list(map(int, input().split()))\n  if n&1:\n    for x,y in zip(arr[:-1], arr[1:]):\n      if y <= x:\n        break\n    else:\n       ans = \"NO\"\n  print(ans)",
                true
            ],
            [
                "from collections import Counter\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n%2==0:\n        print(\"YES\")\n    else:\n        f=0\n        for i in range(n-1):\n            if (arr[i]>=arr[i+1]):\n                f=1\n                break\n        if f:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\n\n\n\n\n\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = True\n    for i in range(n - 1):\n        res = res and (a[i+1] > a[i])\n    if (res and (n % 2 == 1)):\n        print(\"NO\")\n    else:\n        print(\"YES\")",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nYouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "import sys\n#import random\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\n#sys.setrecursionlimit(10**8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda: sys.stdin.readline().strip(\"\\r\\n\")\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab,bc,cd : ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x : print(x)\nprinT = lambda x : print(x)\nf = lambda : sys.stdout.flush()\ninv =lambda x:pow(x,mod-2,mod)\nmod = 10**9 + 7\nmod1 = 998244353\n\nfor _ in range (ii()) :\n    x,y = il()\n\n    if (x == y) :\n        print(x)\n        continue\n\n    if (x < y) :\n        n = (y//x)* x\n        n += (y%((y//x)*x))//2\n\n        print(n)\n        \n    else :\n        print(x + y)\n            \n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    # print(solve(500,[0,0]))\n    # n=int(input())\n    # arr=list(map(int,input().split()))\n    # print(solve(n,arr))\n    x,y=map(int,input().split())\n    if y<x:\n        z=y+x\n        print(z)\n        # print(z%x,y%z)\n    elif y%x==0:\n        z=y\n        print(z)\n        # print(z%x,y%z)\n    else:\n        df=y//x\n        mnx=x*df\n        no=(mnx+y)//2\n        print(no)",
                true
            ],
            [
                "t = int(input())\nfor q in range(t):\n    x,y = [int(x) for x  in input().split()]\n    # only if x <=  y \n    if x <= y:\n        k = y//x \n        print(((k*x)+y)//2)    \n    else:\n        print(x+y)    \n# print( 9969128%69420)\n# print(42068 % 9969128)\n",
                true
            ],
            [
                "inf = float('inf')\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\nimport array\nimport collections\n\n# sys.setrecursionlimit(10 ** 9)\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef maps(): return [int(i) for i in input().split()]\n\n\nlogging.basicConfig(\n    format=\"%(message)s\",\n    level=logging.WARNING,\n)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\nfor _ in range(*maps()):\n    x , y = maps()\n    if y == x :\n        print(x)\n    elif x > y :\n        print(x+y)\n    else:\n        #y > x\n        rem = y % x\n        print((y//x)*x + rem//2)\n\n",
                true
            ],
            [
                "\n\nfor _ in range(int(input())):\n  #N = int(input())\n  x, y = map(int,input().split())\n  \n  if x == y:\n    print(x)\n    n = x\n    #print(n % x, y % n)\n    continue\n    \n  if x > y:\n    print(x + y)\n    n = x + y\n    #print(n % x, y % n)\n    continue\n    \n  \n  d = (y % x) // 2\n  n = y - d\n  print(n)\n  \n  #print(n % x, y % n)\n    \n  \n      \n  ",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    x,y = map(int,input().split())\n    if x <= y:\n        print(y - (y % x) // 2)\n    else:\n        print(x + y)",
                true
            ],
            [
                "for _ in range(int(input())):\n    a,b =list(map(int,input().split()))\n    if a > b:\n        print(a+b)\n    elif a == b:\n        print(a)\n    else:\n        print(b + (b % a) // 2 - b % a)",
                true
            ],
            [
                "# cook your dish here\nimport sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_=lambda: sys.stdin.readline().strip(\"\\r\\n\")\nfrom math import log\nfrom math import gcd\nfrom math import atan2,acos\nfrom random import randint\nsa=lambda :input_()\nsb=lambda:int(input_())\nsc=lambda:input_().split()\nsd=lambda:list(map(int,input_().split()))\nsflo=lambda:list(map(float,input_().split()))\nse=lambda:float(input_())\nsf=lambda:list(input_())\nflsh=lambda: sys.stdout.flush()\n#sys.setrecursionlimit(10**7)\nmod=10**9+7\nmod1=998244353\ngp=[]\ncost=[]\ndp=[]\nmx=[]\nans1=[]\nans2=[]\nspecial=[]\nspecnode=[]\na=0\nkthpar=[]\ndef dfs2(root,par):\n    if par!=-1:\n        dp[root]=dp[par]+1\n    for i in range(1,20):\n        if kthpar[root][i-1]!=-1:\n            kthpar[root][i]=kthpar[kthpar[root][i-1]][i-1]\n    for child in gp[root]:\n        if child==par:continue\n        kthpar[child][0]=root\n        dfs(child,root)\n        \nans=0\na=[]\nn,k=0,0\nb=[]\nvis=[]\ntot=0\ntime=[]\ntime1=[]\nadj=[]\nmx=-1\neps=0.0000001\nx=0\npref=[]\nlvl=[]\n#Fenwick Tree point update range sum\ndef update_it(bit,i,val):\n    n=len(bit)\n    while(i<n):\n        bit[i]+=val\n        i+=i&(-i)\ndef get_ans(bit,i):\n    n=len(bit)\n    tot=0\n    while(i>0):\n        tot+=bit[i]\n        i-=i&(-i)\n    return tot\nprime=[2,3,5,7,11,13,17,19,23,29]\ndef hnbhai(tc):\n    x,y=sd()\n    if x==y:\n        print(x)\n        return\n    if x>y:\n        print(x+y)\n        return\n    n=(y//x)*x+(y%((y//x)*x))//2\n    print(n)\n    return\nfor _ in range(sb()):\n    hnbhai(_+1)\n",
                true
            ],
            [
                "import sys\n\n#comment these out later\n#sys.stdin = open(\"in.in\", \"r\")\n#sys.stdout = open(\"out.out\", \"w\")\n\ninput = sys.stdin.readline\n\ndef main():\n    def extended_gcd(a, b):\n        \"\"\"returns gcd(a, b), s, r s.t. a * s + b * r == gcd(a, b)\"\"\"\n        s, old_s = 0, 1\n        r, old_r = b, a\n        while r:\n            q = old_r // r\n            old_r, r = r, old_r - q * r\n            old_s, s = s, old_s - q * s\n        return old_r, old_s, (old_r - old_s * a) // b if b else 0\n\n\n    def modinv(a, m):\n        \"\"\"returns the modular inverse of a w.r.t. to m, works when a and m are coprime\"\"\"\n        g, x, _ = extended_gcd(a % m, m)\n        return x % m if g == 1 else None\n\n    t = int(input())\n    #t = 1\n\n    i = 10**9+7\n\n    for _ in range(t):\n        x, y = map(int, input().split())\n\n        xp = x//2\n        yp = y//2\n\n        if y >= x:\n            a = yp//xp\n            b = yp%xp\n\n        else:\n            b = y\n            a = 1\n\n        print(a*x+b)\n\n\n\n\nmain()",
                true
            ],
            [
                "# This code is contributed by Siddharth\n\n\nfrom sys import *\ninput = stdin.readline\n\n\n\nimport threading\nfrom bisect import *\nimport math\nfrom collections import *\nimport operator\nfrom heapq import *\nfrom itertools import *\ninf=10**19\nmod=10**9+7\nMOD=998244353\nS1 = 'abcdefghijklmnopqrstuvwxyz'\nS2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ndx = [-1,0]\ndy = [0,-1]\n# inverse modulo power pow(a,-1,mod) - it only works on py 3.8 ( *not in pypy )\nsetrecursionlimit(200005)\ndef asc(c):\n    return ord(c)-97+1\n\n\n\n\n\n# ==========================================> Code Starts Here <=====================================================================)\n\nfor _ in range(int(input())):\n    x,y=map(int,input().split())\n    if (x<y):\n        print(y-((y%x)//2))\n    elif x>y:\n        print(x+y)\n    else:\n        print(x)",
                true
            ],
            [
                "_ = int(input())\nfor i in range(_):\n    x,y = map(int,input().split())\n    if y<x:\n        print(x+y)\n    elif x == y:\n        print(x)\n    else:\n        print(y - (y%x)//2)",
                true
            ],
            [
                "#######################################################################################################\n#######        ###########         #######    #########    #######           ######               #####\n######  ######  #########  ######  #######  ###########  #############   ################  ############\n######  #######  ########  #######  ######  ###########  ##############  ################  ############\n######  ######  #########  #######  ######               #############   ################  ############\n######         ##########  #######  ######  ###########  #############   ################  ############\n######  #####  ##########  #######  ######  ###########  #############   ################  ############\n######  ######  ##########  #####  #######  ###########  #############   ################  ############\n####     ######     ######        ######    ########      #######            ##########     ###########\n#######################################################################################################\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n#-----------------------IMPORTANT  FUNCTIONS ---------------------------------#\nfrom math import cos, pi, ceil, pi, tan, floor, gcd, sqrt, log2, factorial, log10\nfrom collections import Counter\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase\nfrom statistics import mean, median, mode\nfrom bisect import *\n\nalpha = ascii_lowercase\nbeta = ascii_uppercase\n\n\n#-----------------------NEXT POWER OF 2---------------------------------------#\ndef nextPowerOf2(n):\n    p = 1\n    if (n and not (n & (n - 1))):\n        return n\n    while (p < n):\n        p <<= 1\n    return p\n#-----------------------COMPOSITE  CHECK---------------------------------------#\ndef isComposite(n):\n    if (n <= 1):\n        return False\n    if (n <= 3):\n        return False\n    if (n % 2 == 0 or n % 3 == 0):\n        return True\n    i = 5\n    while(i * i <= n):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return True\n        i = i + 6\n    return False\n\n\n#-----------------------GET DIVISORS 1 TO <=N   ------------------------------#\ndef get_Divisors(n):\n    arr = []\n    i = 1\n    while i <= sqrt(n):\n        if (n % i == 0):\n            if (n / i == i):\n                arr.append(i)\n            else:\n                arr.append(i)\n                arr.append(n // i)\n        i = i + 1\n\n    return arr\n\n\n#----------------------CHECK    PRIMES-----------------------------------#\ndef isprime(n):\n    if n == 1:\n        return 0\n    i = 2\n    while (i * i <= n):\n        if (n % i == 0):\n            return 0\n        i += 1\n    return 1\n\n\n#-----------------------PRE COMPUTED  PRIMES-----------------------------------#\ndef Sieve(n):\n    prime = [True for i in range(n + 1)]\n    prime[0] = False\n    prime[1] = False\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    return prime\n\n\n#-----------------------LARGER VALUE OF  X,Y,10**9+7 --------------------------#\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    if (x == 0):\n        return 0\n    while (y > 0):\n        if ((y & 1) == 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\n\n#-----------------------       CREATE MATRIX         --------------------------#\ndef create_matrix(n, m):\n    mat = [[] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            mat[i].append(0)\n    return mat\n\n\n#By Default Counter stores the value in decending orderCounter({4: 2, 8: 2, 2: 1, 9: 1}\n#s=sorted(s.items(),key=lambda k:(k[0],k[1])) ---> [(2, 1), (4, 2), (8, 2), (9, 1)]\n#sort 2nd value  from bada se chhota  then(4,2)(8,2)->>(8,2)(4,2) s=sorted(s.items(),key=lambda k:(-k[1],-k[0]))  [(8, 2), (4, 2), (9, 1), (2, 1)]\n#for list pair in a list    s.sort(key=lambda k:(-k[1],-k[0])) [[3, 4], [8, 2], [4, 2]]\n# from functools import cmp_to_key\n#how to use compare ----ss = sorted(s, key=cmp_to_key(compare))\n#-----------------------*****CODE STARTS  HERE*****--------------------------#\n\n# from queue import Queue\n# from random import *\ndef main():\n    for ttt in range(int(input())):\n        x,y=map(int,input().split())\n        if x>y:\n            print(x+y)\n        elif x==y:\n            print(x)\n        else:\n            m=y//x \n            mm=m*x \n            print((mm+y)//2)\n            \n        \n            \n        \n# Region Fast_______io\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\n#sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "t = int(input())\nfrom math import gcd\nres = []\n\nfor _ in range(t):\n    x, y = map(int, input().split())\n    n = 0\n    if x <= y:\n        n = y - (y%x)//2\n    else: n = x + y\n    res.append(n)\n\nfor el in res: print(el)",
                true
            ],
            [
                "t=int(input())\nfor k in range(t):\n    inp=input().split()\n    a=int(inp[0])\n    b=int(inp[1])\n    if a>b:\n        print(a+b)\n    elif a==b:\n        print(a)\n    else:\n        print(b-(b%a)//2)",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n  x,y=map(int, input().split())\n  if x>y:\n      print(x+y)  \n  else:\n      print(y - y%x//2)  ",
                true
            ],
            [
                "for i in range(int(input())):\n    a, b = [int(x) for x in input().split()]\n    if a==b:\n        print(a)\n        continue\n    if a>b:\n        print(a+b)\n        continue\n    print(b-(b%a)//2)",
                true
            ],
            [
                "def gcd(a, b):\n    while a != 0:\n        a, b = b % a, a\n    return b\n\n\n\nt = int(input())\nfor _ in range(t):\n    x, y = map(int, input().split())\n    if y > x:\n        if y >= 2 * x:\n            n = (y + (y//x) * x) // 2\n        else:\n            n = (x + y) // 2\n    elif y == x:\n        n = y \n    else:\n        n = (x + y)\n    print(n)",
                true
            ],
            [
                "from math import *\n \n#from math import factorial as fact, comb as ncr \nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\n \nfrom array import array\nfrom re import search\n \nli=lambda : list(map(int,input().split()))\narr=lambda a: array('i',a)\nbi=lambda n: bin(n).replace(\"0b\", \"\")\nyn=lambda f: print('NYOE S'[f::2])\nsbstr=lambda a,s: search('.*'.join(a),s)\n'''\ndef isprime(a):\n    if a==2: return True\n    elif a%2==0: return False\n    n=3\n    while n<=a**0.5:\n        if a%n==0:\n            return False\n        n+=2\n    return True\n \ndef nf(n,a):\n    b=a*a\n    c=b*a\n    d=c*a\n    e=n\n    ct=0\n    while e%a==0:\n        if e%d==0:\n            ct+=4\n            e=e//d\n        if e%c==0:\n            ct+=3\n            e=e//c\n        if e%b==0:\n            ct+=2\n            e=e//b\n        if e%a==0:\n            ct+=1\n            e=e//a\n    return ct\n'''\n\ndef solve():\n    for _ in range(int(input())):\n        x,y=li()\n        if y<x:\n            print(x+y)\n        elif x==y:\n            print(x)\n        elif y%x==0:\n            print(y)\n        else:\n            print((y//x*x+y)//2)\n            \nsolve()",
                true
            ],
            [
                "for _ in range(int(input())):\n    x, y = map(int, input().split())\n    print(y + x * (x > y) - (y % x // 2) * (x < y))\n",
                true
            ],
            [
                "import math\nfrom sys import stdin\ndef input(): return stdin.readline().rstrip(\"\\r\\n\")\n\nt = int(input())\nfor i in range(t):\n    n , k = [int(j) for j in input().split()]\n    if n > k :\n        print(n+k)\n    else:\n        print(int(((k//n)*n + k)/2))\n\n",
                true
            ],
            [
                "\"\"\" \n    author:  namduong93\n    created: unknown  \n    complexity: unknown\n    Codeforces: codeforces.com\n\"\"\"\n\"\"\"\nimport sys\nsys.stdin = open('test.inp', 'r') \nsys.stdout = open('test.out', 'w')\n\"\"\"\n\nx=y=0\n\ndef Input():\n    global x,y\n    x, y=map(int,input().split())\n\ndef Solve():\n    if(x==y):\n        print(x)\n    else:\n        if(x>y):\n            print(x+y)\n        else:\n            print(((y//x)*x+y)//2)\n\nTest=int(input(\"\"))\nfor iTest in range(Test):\n    Input()\n    Solve()",
                true
            ],
            [
                "# https://codeforces.com/blog/entry/96460#:~:text=1603B%20-%20Moderate%20Modular%20Mode\n\n# n = y%n --> only true for y=n\n\nt = int(input())\n\nwhile t:\n  ## Input\n  x,y = list(map(int,input().split()))\n  t -= 1\n  \n  ## Logic\n  if x > y:\n    print(x+y)\n  else:\n    print(y - ((y%x)//2))",
                true
            ],
            [
                "\n\nfor _ in range(int(input())):\n    x,y=map(int,input().split())\n    if x>y:print(x+y)\n    else:print(y-y%x//2)",
                true
            ],
            [
                "import math;from heapq import heappush,heappop,heapify;import random;import string;from collections import deque;from bisect import bisect,bisect_left,bisect_right,insort;import sys;input=sys.stdin.readline;S=lambda:input().rstrip();I=lambda:int(S());M=lambda:map(int,S().split());L=lambda:list(M());H=1000000000+7\nfor _ in range(I()):\n    x,y=M()\n    if x>y:\n        print(x+y);continue\n    print((y-(y%x))+(y%x)//2)",
                true
            ],
            [
                "for _ in range(int(input())):x, y = map(int, input().split());print(y + x * (x > y) - (y % x // 2) * (x < y))",
                true
            ],
            [
                "_ = int(input())\nfor i in range(_):\n    x,y = map(int,input().split())\n    if y<x:\n        n = x+y\n    elif x == y:\n        n = x\n    else:\n        n = y - (y%x)//2\n    print(n)",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    x, y = map(int, input().split())\n    if y > x:\n        if y >= 2 * x:\n            n = (y + (y//x) * x) // 2\n        else:\n            n = (x + y) // 2\n    elif y == x:\n        n = y \n    else:\n        n = (x + y)\n    print(n)",
                true
            ],
            [
                "import sys\nimport string\nfrom decimal import Decimal\nfrom math import log, gcd\n############ ---- Input Functions ---- ############\n# input = sys.stdin.readline\n\n\ndef inp():\n    return(int(input()))\n\n\ndef inplist():\n    return(list(map(int, input().split())))\n\n\ndef inpstrlist():\n    s = input()\n    return(list(s[:len(s)]))\n\n\ndef invr():\n    return(map(int, input().split()))\n############ ---- Output Functions ---- ############\n\n\ndef lcm(a, b):\n    return (a*b)//gcd(a, b)\n\n\nt = int(input())\nfor _ in range(t):\n    x, y = invr()\n\n    if x == y:\n        print(x)\n    elif x > y:\n        print(x+y)\n    else:\n        if(y % x == 0):\n            print(y)\n        else:\n            z = x*(y//x)\n            w = y-z\n            print(z + (w//2))\n",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby, accumulate\nfrom copy import deepcopy\nMOD = 10**9+7\nINF = float('inf')\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n    x, y = rl()\n    if x > y:\n        print(x+y)\n    else:\n        print(y - (y % x) // 2)",
                true
            ],
            [
                "import sys\nimport bisect\nimport math\ninp = sys.stdin.readline\ninput = lambda: inp().strip()\n\ndef lcm(a, b):\n    return a*b//math.gcd(a, b)\n\ndef solve():\n    x,y=map(int,input().split())\n    if x==y:\n        return x\n    elif x<y:\n        return y - (y%x)//2\n    else:\n        return x+y\n    \n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        print(solve())\n\n",
                true
            ],
            [
                "from sys import *\nfor _ in range(int(stdin.readline())):\n    x,y=map(int,stdin.readline().split())\n    if y%x==0:\n        stdout.write(str(y) + \"\\n\")\n        continue\n    if x<y:\n        tmp=y%x\n        tmp//=2\n        n=y-tmp\n        stdout.write(str(n) + \"\\n\")\n    else:\n        stdout.write(str(x+y) + \"\\n\")",
                true
            ],
            [
                "from sys import stdin\n\ninput = stdin.readline\nrn = lambda: int(input())\nrns = lambda: map(int, input().split())\nrl = lambda: list(map(int, input().split()))\nrs = lambda: input().strip()\nYN = lambda x: print('YES') if x else print('NO')\nceil_div = lambda a, b: -(-a // b)\nmod = 10 ** 9 + 7\n\nfor _ in range(rn()):\n    x, y = rns()\n    ans = 0\n    if x > y:\n        ans = (x + y)\n    elif x == y:\n        ans = x\n    elif y % x == 0:\n        ans = y\n    else:\n        c = y - (y % x)\n        ans = (c + (y % x) // 2)\n    print(ans)\n    # print(ans%x==y%ans)",
                true
            ],
            [
                "import math\nimport sys\n\ninput = sys.stdin.readline\noutput = sys.stdout.write\n\ndef inlist():\n    return(list(map(int,input().split())))\ndef inVar():\n    return map(int,input().split())\n\ndef main():\n    test_case = int(input())\n    for case in range(test_case):\n        x , y = inVar()\n        if x <= y:\n            output(str(y - y % x // 2) + \"\\n\")\n        else:\n            output(str(x + y) + \"\\n\")\nmain()",
                true
            ],
            [
                "t=int(input())\nwhile t>0:\n    t-=1\n    x,y=map(int,input().split())\n    if y<x:\n        print(int(y+x))\n    else :\n        if x==y:\n            print(int(x))\n        else:\n            k2=(y/2)//(x/2)\n            k1=(y/2)%(x/2)\n            print(int(k2*x+k1))",
                true
            ],
            [
                "t=int(input())\nfor dlkajsd in range(t):\n    x,y=[int(i)for i in input().split()]\n    if(x>y):\n        print(x+y)\n    else:\n        print(y-(y%x)//2)\n",
                true
            ],
            [
                "t=int(input())\nfor i in range(t):\n    x,y=map(int,input().split())\n    if x>y:\n        print(x+y)\n    elif (x==y):\n        print(x)\n    else:\n        print(y-(y%x)//2)",
                true
            ]
        ],
        "You are an expert Python programmer, and here is your task:\nn students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), and the days chosen for the groups must be different. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. \n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": [
            [
                "from itertools import combinations\n\n\ndef solve(days, all_students):\n    required = all_students // 2\n    for a, b in combinations(list(range(5)), 2):\n        n1, n2 = len(days[a]), len(days[b])\n        students = days[a].union(days[b])\n        # print(students)\n        if len(students) == all_students and n1 >= required and n2 >= required:\n            return \"YES\"\n\n    return \"NO\"\n\n\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        n = int(input())\n        days = [set() for _ in range(5)]\n        totals = [0] * 5\n        for student in range(n):\n            for day, value in enumerate(input().split()):\n                if value == '1':\n                    days[day].add(student)\n                    totals[day] += 1\n\n        print(solve(days, n))\n",
                true
            ],
            [
                "import sys\nfrom collections import Counter\nimport math\nimport bisect\nimport heapq\n#sys.stdin = open(\"input.txt\")\nfrom itertools import combinations\nfrom itertools import permutations\nfrom collections import defaultdict\nfrom collections import Counter\n\nnum_cases = int(sys.stdin.readline().strip())\n\nfor case in range(1, num_cases+1):\n    N = int(sys.stdin.readline().strip()) # n is always even\n    all_A = []\n    yoeil = [0, 0, 0, 0, 0]\n    double_yoeil = defaultdict(int)\n    for _ in range(N):\n        A = list(map(int, sys.stdin.readline().split()))\n        for index, value in enumerate(A):\n            if value == 1:\n                yoeil[index] += 1\n        combi = [0, 1, 2, 3, 4]\n        combi = list(combinations(combi, 2))\n        for info in combi:\n            alpha, beta = info\n            if A[alpha] == 1 and A[beta] == 1:\n                double_yoeil[str(alpha) + str(beta)] += 1\n\n    combi = [0, 1, 2, 3, 4]\n    combi = list(combinations(combi, 2))\n\n    signal = 0\n    for info in combi:\n        alpha, beta = info\n        real_alpha = yoeil[alpha]\n        real_beta = yoeil[beta]\n        real_cross = double_yoeil[str(alpha) + str(beta)]\n        if real_alpha + real_beta - real_cross == N:\n            if real_alpha - real_cross <= N/2 and real_beta - real_cross <= N/2:\n                signal = 1\n                print(\"YES\")\n                break\n\n    if signal == 0:\n        print(\"NO\")\n\n\n\n\n\n\n",
                true
            ],
            [
                "def solve():\n    # number of students\n    n = int(input())\n    students = [[] for _ in range(n)]\n    for i in range(n):\n        students[i] = list(map(int, input().split()))\n \n    days = [set() for _ in range(5)]\n    for student_idx in range(n):\n        for day in range(5):\n            if students[student_idx][day]:\n                days[day].add(student_idx)\n    \n    for day1 in range(5):\n        students_available_day_1 = days[day1]\n        if not students_available_day_1:\n            continue\n        \n        for day2 in range(day1+1, 5):\n            students_available_day_2 = days[day2]\n            if not students_available_day_2:\n                continue\n            # print('day1', day1, 'day2', day2)\n            \n            if len(students_available_day_1) >= n//2 and len(students_available_day_2) >= n//2 and len(students_available_day_1 | students_available_day_2) == n:\n                return True\n    \n    return False\n    \n    \nfor i in range(int(input())):\n    if solve():\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "\nt=int(input())\n\nfor _ in range(t):\n    n=int(input())\n    data = []\n\n    for i in range(n):\n        data.append(list(map(int,input().split())))\n\n    ok=False\n\n    for d1 in range(5):\n        for d2 in range(d1+1,5):\n            both = 0; only_1=0; only_2=0\n            for i in data:\n                if i[d1]==1 and i[d2]==1:\n                    both+=1\n                elif i[d1]==1:\n                    only_1+=1\n                elif i[d2]==1:\n                    only_2+=1\n\n            to_add=min(both,max(0,n//2-only_1))\n            only_1+=to_add\n            both-=to_add\n            only_2+=both\n\n            if only_1>=n//2 and only_2>=n//2:\n                ok=True\n\n\n    if ok:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    a = list()\n    f = False\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(5):\n        for j in range(i + 1, 5):\n            p = q = r = 0\n            for k in range(n):\n                p += (a[k][i] == 1)\n                q += (a[k][j] == 1)\n                r += (a[k][j] == 1 and a[k][i] == 1)\n            p -= r\n            q -= r\n            if p <= n // 2 and q <= n // 2 and p + q + r == n:\n                f = True\n    print(\"YES\" if f else \"NO\")",
                true
            ],
            [
                "def getResult(grid):\n    # l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], zip(*l) would be equivalent to zip([1, 2, 3], [4, 5, 6], [7, 8, 9]). \n    # => [(1,4,7), (2,5,8), (3,6,9)]\n    sum_map = {}\n    for id, ln in enumerate(list(zip(*grid))):\n        sum_map[id] = ln\n    # print(sum_map)\n    for x in range(5):\n        for y in range(x+1, 5):\n            sx = sum_map[x]\n            sy = sum_map[y]    \n            if sum(sx) < n//2 or sum(sy) < n//2:\n                continue\n            sx_set = [(id,val) for id, val in enumerate(sx)]\n            sx_set = [x[0] for x in filter(lambda x:x[1] == 1, sx_set)]\n            sy_set = [(id,val) for id, val in enumerate(sy)]\n            sy_set = [x[0] for x in filter(lambda x:x[1] == 1, sy_set)]\n            # print(x)\n            # print(list(sx_set))\n            # print(y)\n            # print(list(sy_set))\n            if len(set(sx_set + sy_set)) == n:\n                return True\n    return False\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    grid = []\n    for ln in range(n):\n        row = input()\n        grid.append([int(x) for x in row.split()])\n    if getResult(grid):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n                ",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = [list(map(int,input().split())) for _ in range(n)]\n    ans = 'NO'\n    for i in range(4):\n        for j in range(i+1,5):\n            p = [0]*4\n            for k in range(n):\n                if c[k][i]==1:\n                    if c[k][j]==1:\n                        p[0] += 1\n                    else:\n                        p[1] += 1\n                else:\n                    if c[k][j]==1:\n                        p[2] += 1\n                    else:\n                        p[3] += 1\n            if p[3]>0: continue\n            if p[1]+p[0]<n//2 or p[2]+p[0]<n//2: continue\n            ans = 'YES'\n    print(ans)\n",
                true
            ],
            [
                "import sys\nfrom math import factorial, gcd\n#from math import comb, perm     \nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right \nfrom heapq import heappop, heappush, heapify, nlargest, nsmallest\nfrom itertools import groupby, accumulate\nfrom copy import deepcopy\nMOD = 10**9+7\nINF = float('inf')\n\n# import io,os\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input = sys.stdin.buffer.readline\ninput = sys.stdin.readline\nrl = lambda : list(map(int, input().split()))\nrs = lambda : sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n    n = int(input())\n    grid = [rl() for _ in range(n)]\n    cand = []\n    for col in zip(*grid):\n        if sum(col) >= n // 2:\n            cand.append(col)\n\n    flag = False\n    for i in range(len(cand)):\n        col1 = set([k for k in range(n) if cand[i][k] == 1])\n        for j in range(i+1, len(cand)):\n            col2 = set([k for k in range(n) if cand[j][k] == 1])\n            if len(col2 - col1) + len(col1) >= n or len(col1-col2) + len(col2)  >= n:\n                flag = True\n                break\n        if flag:\n            break\n\n    print('YES' if flag else 'NO')",
                true
            ],
            [
                "import heapq\nimport math\nimport sys\nimport collections\nimport bisect\nimport time\nimport random\nimport itertools\nimport string\nfrom collections import Counter,defaultdict\ndef get_ints():return map(int, sys.stdin.readline().strip().split())\ndef get_list():return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string():return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    n=int(input())\n    arr=[]\n    for i in range(n):\n        arr.append(get_list())\n    poss=False\n    for i in range(5):\n        for j in range(i+1,5):\n            s1=set()\n            s2=set()\n            for no in range(n):\n                if arr[no][i]==1:\n                    s1.add(no)\n                if arr[no][j]==1:\n                    s2.add(no)\n            joined_set=s1.union(s2)\n            #print(i,j,joined_set)\n            if len(s1)>=n//2 and len(s2)>=n//2 and len(joined_set)==n:\n                poss=True\n                break\n    if poss:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    s=[[] for _ in range(5)]\n    for id in range(n):\n        for i,c in enumerate(input().split()):\n            if c==\"1\":\n                s[i].append(id)\n    f=0\n    for i in range(5):\n        if f:\n            break\n\n        for j in range(i+1,5):\n\n            s1=set(s[i])\n\n            s2=set(s[j])\n            if len(s1) >=n//2 and len(s2)>=n//2:\n                l=len(s1.intersection(s2))\n                d1=0 if len(s1)-l>=n//2 else len(s1)-l-n//2\n                d2=0 if len(s2)-l>=n//2 else len(s2)-l-n//2\n                if d1+d2+l>=0:\n                    f=1\n                    break\n    if f:\n        print(\"YES\")\n    else :\n        print(\"NO\")\n",
                true
            ],
            [
                "import sys\n\ninp = sys.stdin.readline\n\ndef s(submask, arr):\n    x = submask\n    r = 0\n    while x < len(arr):\n        r += arr[x]\n        x = (x + 1) | submask\n    return r\n\ndef solve():\n    n = int(inp())\n    c = [0] * 32\n    for i in range(n):\n        mask = int(inp().strip().replace(' ',''), 2)\n        c[mask] += 1\n    if n % 2 != 0:\n        print('NO')\n        return\n    n2 = n // 2\n    for i in range(5):\n        first1 = s(1 << i, c)\n        for j in range(i):\n            second = s(1 << j, c)\n            both = s((1 << i)|(1 << j), c)\n            first = first1 - both\n            second -= both\n            w = max(min(n2 - first, both), 0)\n            first += w\n            both -= w\n            w = max(min(n2 - second, both), 0)\n            if first >= n2 and second + w >= n2:\n                print('YES')\n                return\n\n    print('NO')\n\ndef main():\n    for i in range(int(inp())):\n        solve()\n\nif __name__ == '__main__':\n    main()\n",
                true
            ],
            [
                "from sys import stdout\n\noutput = []\npairs = [(i, j) for i in range(4) for j in range(i + 1, 5)]\nfor _t in range(int(input())):\n    n = int(input())\n    students = [list(map(int, input().split(\" \"))) for _ in range(n)]\n    for i, j in pairs:\n        oi, oj = 0, 0\n        for s in students:\n            if s[i] == 0 == s[j]:\n                break\n            if s[i] == 0 != s[j]:\n                oi += 1\n            elif s[i] != 0 == s[j]:\n                oj += 1\n            # else do nothing.\n        else:\n            if max(oi, oj) <= n // 2:\n                output.append(\"YES\")\n                break\n    else:\n        output.append(\"NO\")\n\nstdout.write(\"\\n\".join(map(str, output)))\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\ndef il(): #Input list\n    return list(map(int,input().split()))\ndef ii(): #Input int\n    return int(input())\ndef imi(): #Input multiple int\n    return map(int,input().split())\ndef ist(): #Input String\n    return input()\n\ndef solve(i,j,n,li):\n    a=0\n    b=0\n    c=0\n    for s in li:\n        if s[i]==s[j]==1:b+=1\n        elif s[i]==1: a+=1\n        elif s[j]==1: c+=1\n\n\n    if (a+b+c)==n:\n        if (a<=n//2)and(c<=n//2): return 1\n        else: return 0\n    else: return 0\n\n\n\n\n\n\nt=ii()\nfor _ in range(t):\n    n=ii()\n    li=[]\n    c=0\n    for i in range(n):\n        st=il()\n        li.append(st)\n    for i in range(5):\n        for j in range(i+1,5):\n            if(solve(i,j,n,li)):\n                c=1\n                break\n        if c: break\n    else:\n        print(\"NO\")\n        continue\n    print(\"YES\")\n\n\n",
                true
            ],
            [
                "#from math import *\n#from bisect import *\n#from collections import *\n#from random import *\n#from decimal import *\"\"\"\n#from heapq import *\n#from itertools import *\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return map(int,input().split())\nt=inp()\nwhile(t):\n    t-=1\n    n=inp()\n    r=[]\n    for i in range(n):\n        r.append(lis())\n    if(n%2):\n        print(\"NO\")\n        continue\n    s='NO'\n    for i in range(5):\n        for j in range(i+1,5):\n            of,sf,bf=0,0,0\n            for k in range(n):\n                if(r[k][i]==1 and r[k][j]==1):\n                    bf+=1\n                elif(r[k][i]==1):\n                    of+=1\n                elif(r[k][j]==1):\n                    sf+=1\n            need=n//2\n            req1=max(0,(n//2)-of)\n            req2=max(0,(n//2)-sf)\n            if((req1+of)==(req2+sf) and (req1+req2==bf)):\n                s='YES'\n    print(s)\n                    \n            \n            \n        \n    \n        \n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t) :\n    n = int(input())\n    days = []\n    for i in range(n) :\n        days.append(list(map(int, input().split())))\n    found = False\n    free = []\n    for i in range(5) :\n        free.append(set(k for (k, day) in enumerate(days) if day[i] == 1))\n    for i in range(5) :\n        for j in range(i + 1, 5) :\n            if len(free[i].union(free[j])) == n and len(free[i]) >= n // 2 and len(free[j]) >= n // 2:\n                print(\"YES\")\n                found = True\n                break\n        if found :\n            break\n    else :\n        print(\"NO\")\n            ",
                true
            ],
            [
                "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    check = False\n    mat = [list(map(int,input().split())) for i in range(n)]\n    for i in range(5):\n        for j in range(i+1,5):\n            stud = set()\n            d1 = d2 = 0\n            for k in range(n):\n                if mat[k][i] == 1:\n                    d1 += 1\n                    stud.add(k)\n                if mat[k][j] == 1:\n                    d2 += 1\n                    stud.add(k)\n            if d1 >= n/2 and d2 >=n/2 and len(stud) == n:\n                check = True\n                break\n        if check:\n            break\n    if check:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "for _ in range(int(input())):\n    dic={1:[],2:[],3:[],4:[],5:[]}\n    n=int(input()) \n    for j in range(n):\n        lst=list(map(int,input().split()))\n        for i in range(len(lst)): \n            if lst[i]==1:\n                dic[i+1].append(j+1)\n    val=list(dic.values())\n    c=0\n   \n    for i in range(len(val)-1):\n        nst=[]\n        for j in range(i+1,len(val)):\n            if len(val[i])>=(n//2) and len(val[j])>=(n//2):\n                nst=val[i]+val[j]   \n                if len(set(nst))==n:\n                    print(\"YES\")\n                    c=1\n                    break \n        if c==1:\n            break \n    if c==0:\n        print(\"NO\")\n\n",
                true
            ],
            [
                "import math\nfrom collections import Counter\n\ndef mapIn():\n    return map(int, input().split())\n\ndef listIn():\n    return list(map(int, input().split()))\n\ndef intIn():\n    return int(input())\n\nintMax = float('inf')\nintMin = float('-inf')\nd4x = [1, -1, 0, 0]\nd4y = [0, 0, 1, -1]\nd8x = [1, -1, 0, 0, -1, -1, 1, 1]\nd8y = [0, 0, 1, -1, -1, 1, -1, 1 ]\n\ndef checkBit(n, i):\n    return (n >> i) & 1\n\nmod = int(1e9 + 7)\n\ndef solve():\n    n = int(input())\n    p = []\n    for i in range(n):\n        p.append(listIn())\n    \n    for i in range(4):\n        for j in range(i + 1, 5):\n            c1, c2, c3 = 0, 0, 0\n            for k in range(n):\n                if(p[k][i] == 1):\n                    c1 += 1\n                if(p[k][j] == 1):\n                    c2 += 1\n                if(p[k][i] == 1 and p[k][j] == 1):\n                    c3 += 1\n            c1 -= c3\n            c2 -= c3\n            if(c1 <= n // 2 and c2 <= n // 2 and c1 + c2 + c3 == n):\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\n\nt = int(input())\nfor tc in range(t):\n    # print(tc)\n    solve()",
                true
            ],
            [
                "from typing import DefaultDict\n\n\ndef solve(n,grid):\n    graph = DefaultDict(int)\n    day = DefaultDict(int)\n\n    for i in range(n):        \n        for j in range(5):\n            day[j] += grid[i][j]\n            for k in range(5):                                \n                graph[(j,k)] = graph[(j,k)] + 1 if grid[i][j] == grid[i][k] == 1 else graph[(j,k)]\n\n    for i in range(5):\n        for j in range(5):\n            if(i != j):\n                tot = day[i] + day[j] - graph[(i,j)]\n                diff = abs(day[i] - day[j])\n                \n                # print(i,k,tot,diff)\n                # print(f'{i},{j} day[i] = {day[i]} day[j] = {day[j]} common = {graph[(i,j)]}')\n                if tot == n and graph[(i,j)] >= diff:                \n                    print(\"YES\")         \n                    # print(i,j)\n                    return \n        \n    print(\"NO\")\n    return\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        grid = []\n        for _ in range(n):\n            row = list(map(int,input().split()))\n            grid.append(row)\n        solve(n,grid)\n\nmain()\n# n = 4\n# grid = [[1, 0, 0, 1, 0], [0, 1, 0, 0, 1], [0, 0, 0, 1, 0], [0, 1, 0, 1, 0]]\n# solve(n,grid)",
                true
            ],
            [
                "t=int(input())\ndef f():\n    n=int(input())\n    s=[]\n    for i in range(n):\n        s.append(list(map(int,input().split(' '))))\n    for a in range(5):\n        for b in range(5):\n\n            if b==a:\n                continue\n\n            cnta = 0\n            cntb = 0\n            cntno=0\n\n            for i in s:\n                if i[a]+i[b]==0:\n                    cntno=1\n                    break\n                if i[a]+i[b]==2:\n                    pass\n                elif i[a]==1:\n                    cnta+=1\n                elif i[b]==1:\n                    cntb+=1\n            if cnta<=n//2 and cntb<=n//2 and cntno == 0:\n                print(\"YES\")\n                return\n    print(\"NO\")\n    return\n\nwhile t:\n    f()\n    t-=1",
                true
            ],
            [
                "def count():\n    for i in range(4):\n        for j in range(i + 1, 5):\n            b = set()\n            for k in range(len(u[i])):\n                b.add(u[i][k])\n            for k in range(len(u[j])):\n                b.add(u[j][k])\n            if len(b) == n and len(u[i]) >= n / 2 and len(u[j]) >= n / 2:\n                print(\"YES\")\n                return\n    print(\"NO\")\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    u = [[] for i in range(5)]\n    for i in range(n):\n        a = list(map(int, input().split()))\n        for j in range(5):\n            if a[j]:\n                u[j].append(i)\n    count()\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    arr = list()\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    pos = False\n    for i in range(4):\n        for j in range(i + 1, 5):\n            if(pos):\n                break\n            # n[i] + n[j] - n[i and j] = n.\n            a = 0\n            b = 0\n            c = 0\n            for k in range(n):\n                if(arr[k][i]==1):\n                    a += 1\n                if(arr[k][j]==1):\n                    b += 1\n                if(arr[k][i]==1 and arr[k][j]==1):\n                    c += 1\n            if(a + b - c == n and a >= n//2 and b >= n//2):\n                print(\"YES\")\n                pos = True\n    if(pos == False):\n        print(\"NO\")",
                true
            ],
            [
                "for _ in range(int(input())):\n\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n\n    done = False\n\n    for j in range(5):\n        for k in range(j + 1, 5):\n\n            day_j, day_k, common = 0, 0, 0\n\n            for i in range(n):\n\n                if arr[i][j] == 1:\n                    if arr[i][k] == 1:\n                        common += 1\n                    else:\n                        day_j += 1\n\n                if arr[i][k] == 1:\n                    if arr[i][j] == 1:\n                        common += 1\n                    else:\n                        day_k += 1\n\n            if (day_j + day_k + common//2 == n) and (day_j <= n // 2 and day_k <= n // 2):\n                done = True\n                break\n\n    if not done:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n# a = {1, 3}\n# b = {0, 2, 3}\n#\n# t = (a.intersection(b))\n#\n# print(a - t, b)\n# print(b - t, a)\n",
                true
            ],
            [
                "ali=0;from collections import defaultdict, Counter,deque;ali=0\nali=0;\nali=0;from math import sqrt, log10, log, floor, factorial,gcd;ali=0\nali=0;\nali=0;from bisect import bisect_left, bisect_right;ali=0\nali=0;\nali=0;from itertools import permutations,combinations;ali=0\nali=0;\n\nali=0;import sys, io, os;ali=0\nali=0;\nali=0;input = sys.stdin.readline;ali=0\nali=0;\nali=0;# input=io.BytesIO(os.read(0,os.fstat(0).st_size)).readline;ali=0\nali=0;\nali=0;# sys.setrecursionlimit(10000);ali=0\nali=0;\nali=0;inf = float('inf');ali=0\nali=0;\nali=0;mod = 10 ** 9 + 7;ali=0\nali=0;\ndef yn(a): print(\"YES\" if a else \"NO\");ali=0\nali=0;\nali=0;ceil = lambda a, b: (a + b - 1) // b;ali=0\nali=0;\n\nali=0;t=int(input());ali=0\nali=0;\nfor i in range(t):\n    ali=0;n=int(input());ali=0\n    ali=0;\n    ali=0;d=defaultdict(set);ali=0\n    ali=0;\n    for ii in range(n):\n        ali=0;l=[int(i) for i in input().split()];ali=0\n        ali=0;\n\n        for i in range(5):\n            ali=0;\n            if l[i]==1:\n                ali=0;d[i].add(ii);ali=0\n                ali=0;\n    ali=0;pos=0;ali=0\n    ali=0;\n    for i in range(5):\n        for j in range(i+1,5):\n            ali=0;flg=1;ali=0\n            ali=0;\n            ali=0;counter=[0,0];ali=0\n            ali=0;\n            for k in range(n):\n                ali=0;\n                if k in d[i]:\n                    ali=0;counter[0]+=1;ali=0\n                    ali=0;\n                ali=0;\n                if k in d[j]:\n                    ali=0;counter[1]+=1;ali=0\n                    ali=0;\n                ali=0;\n                if k not in d[i] and k not in d[j]:\n                    ali=0;flg=0;ali=0\n                    ali=0;\n                    ali=0;break;ali=0\n                    ali=0;\n            ali=0;\n            if flg and counter[0]>=n//2 and counter[1]>=n//2:\n                ali=0;pos=1;ali=0\n                ali=0;\n    ali=0;\n    if pos:\n        ali=0;print(\"YES\");ali=0\n        ali=0;\n    else:\n        ali=0;print(\"NO\");ali=0\n        ali=0;\n",
                true
            ],
            [
                "for tests in range(int(input())):\n    n = int(input())\n    a = [[] for i in range(n)]\n    for j in range(n):\n        a[j] = list(map(int, input().split()))\n    ans = False\n    for j in range(5):\n        for k in range(5):\n            if k != j:\n                cnt1 = 0\n                cnt2 = 0\n                cntno = 0\n                for z in range(n):\n                    if a[z][j] == 1:\n                        cnt1 += 1\n                    if a[z][k] == 1:\n                        cnt2 += 1\n                    if a[z][j] == 0 and a[z][k] == 0:\n                        cntno += 1\n                if cnt1 >= n // 2 and cnt2 >= n // 2 and cntno == 0:\n                    ans = True\n    if ans:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom collections import Counter\nfrom collections import defaultdict as dd\n\n# sys.setrecursionlimit(100000000)\n\nflush = lambda: stdout.flush()\nstdstr = lambda: stdin.readline()\nstdint = lambda: int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nstdmap = lambda: map(int, stdstr().split())\nstdarr = lambda: list(map(int, stdstr().split()))\n\nmod = 1000000007\n\nfor _ in range(stdint()):\n    n = stdint()\n\n    attend = []\n\n    c = Counter()\n\n    for i in range(n):\n        x = stdarr()\n\n        attend.append(x)\n\n        for j in range(5):\n            if(x[j] == 1):\n                c[j] += 1\n\n    pos = False\n\n    for i in range(5):\n        for j in range(i+1, 5):\n            chosen = [False]*(n)\n            for k in range(n):\n                if(attend[k][i] == 1):\n                    chosen[k] = True\n                if(attend[k][j] == 1):\n                    chosen[k] = True\n\n\n            g1 = c[i]\n            g2 = c[j]\n\n            if(g1 >= n//2 and g2 >= n//2 and chosen.count(True) == n):\n                pos = True\n                break\n\n        if (pos):\n            break\n\n    if(pos):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
                true
            ],
            [
                "from collections import Counter, defaultdict, deque\nimport bisect, heapq\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\n\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and not force_list:\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\nmod = int(1e9+7)\n\ndef qmod(a, b):\n    res = 1\n    while b:\n        if b&1:\n            res = (res*a)%mod\n        b >>= 1\n        a = (a*a)%mod\n    return res\n\ndef inv(a):\n    return qmod(a, mod-2)\n\n\ndef my_main():\n    kase = inp()\n    pans = []\n    for ka in range(kase):\n        n = inp()\n        da = []\n        for i in range(n):\n            da.append(inp())\n        ok = 0\n        def ck():\n            for i in range(4):\n                for j in range(i+1, 5):\n                    bo, nx, ny = 0, 0, 0\n                    for xx in da:\n                        if xx[i] and xx[j]:\n                            bo += 1\n                        elif xx[i]:\n                            nx += 1\n                        elif xx[j]:\n                            ny += 1\n                    if nx+ny+bo == n and nx<=n/2 and ny<=n/2:\n                        return 1\n            return 0\n        pans.append(\"YES\" if ck() else \"NO\")\n\n\n\n\n    print('\\n'.join(pans))\n\nmy_main()\n\n",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    n=int(input())\n    li=[]\n    for i in range(n):\n        t=list(map(int,input().split()))\n        li.append(t)\n    ans=[]\n    for i in range(5):\n        temp=[]\n        for j in range(n):\n            if li[j][i]==1:\n                temp.append(j)\n        if len(temp) != 0:\n            ans.append(temp)\n    res=0\n    for i in range(len(ans)):\n        for j in range(len(ans)):\n            if i!=j:\n                if len(list(set(ans[i]+ans[j])))==n and (len(ans[i])>=(n//2)) and (len(ans[j])>=(n//2)):\n                    res=1\n                    break\n    print(\"YES\") if res == 1 else print(\"NO\")",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nfrom pprint import pprint\n\nimport math\nINF = 1 << 63\ndef do():\n    # 1 is permit\n    # differnt\n    n = int(input()) # odd\n    dat = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        dat.append(l)\n    # select i and j\n    #print(dat)\n    needn = n / 2\n    for i in range(5):\n        for j in range(i+1, 5):\n            cani = 0\n            canj = 0\n            canboth = 0\n            canno = 0\n            for ind in range(n):\n                if dat[ind][i] == dat[ind][j] == 1: canboth += 1\n                elif dat[ind][i] == 1: cani += 1\n                elif dat[ind][j] == 1: canj += 1\n                else: canno += 1\n            if cani > needn: continue\n            if canj > needn: continue\n            if canno > 0: continue\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n    return\n\n\n# n questions\nq = int(input())\nfor _ in range(q):\n    do()\n",
                true
            ],
            [
                "# Karun Abhayan\n\ndef get_column(mat, i):\n    return [row[i] for row in mat]\n\nt = int(input())\nfor _ in range(t):\n    students = []\n    n = int(input())\n    for __ in range(n):\n        student = list(map(int, input().split()))\n        students.append(student)\n    flag = 1\n    for i in range(4):\n        foo = get_column(students, i)\n        if foo.count(1) < n/2:\n            continue\n        for j in range(i+1, 5):\n            bar = get_column(students, j)\n            if bar.count(1) < n/2:\n                continue\n            flag = 0\n            for k in range(n):\n                if foo[k] == 0 and bar[k] == 0:\n                    flag = 1\n                    break\n            if not flag:\n                break\n        if not flag:\n            break\n    if flag:\n        print('NO')\n    else:\n        print('YES')\n            ",
                true
            ],
            [
                "# RANK1ZEN; 3966 PEAK NA FLEX SUPPORT; Battlenet ID: Knuckles#11791\n# region -----------------------------------------------------------------------------------------|\n# MNNNNNNNNNNNNNNNNMNho///++//+oooooossssssssssssysssooyyyyyso+//++//shNNNNNNNNNNNNNM\n# MNNNNNNNNNNNNNNMNy////////++++oooooooooossssssssoosssssysyyysoossss+/oshNNNNNNNNNNM\n# MNNNNNNNNNNNNMNs///////+oooooo++++oooooooooooso+ossssssssssssssssssss++soymMNNNNNNM\n# MNNNNNNNNNNNMd/:-//+//shNNmhsoo+++++++++ooooo++oooooooooossssssssssssso+ooosmNNNNNM\n# MNNNNNNNNNNMh::://+/+ymMMMMmhsoso+++++++++o+/+ooooooooooooooooooooossso++o+++hMNNNM\n# MNNNNNNNNNMy//-:/+/osmMMMMNhssyshNdssoooo++:++++++++++oooooooooooooooooo++-++/sMMNM\n# MNNNNNNNNMd:/:///+/ohNMMMNhsohyyNMNNNdhhs+:++++++++++++++++++++ooooooooo/+.o+:/+NNM\n# MNNNNNNNMm/:/-///++ooshmmhs+sysdMMMMNdMMd/+++++ooo++++++++++++++++++++++::-++/:/sNM\n# MNNNNNNMN/://-+++++++++oo+//yosNMNMNmNMNo/o/oshNmhyoo+++++++++++++++++++/-/+++:/:sM\n# MNNNNNMNo://-/+++++:/+++++//++osyhmdhMNs/o/+shMMMMmsooooyo++/+++++++++++://+++://oM\n# MNNNNNMs:///:/++++//++-/+/:++++++ooooyo++o-oyNNMMmysooymmso/+shysyyysooo+/++o+/-s+M\n# MNNNNMd:///+:/++++-++:`++:/++++//++++++:+-/oyhsmys+oohmyo++:sNMdmMMNNysy+-ohNs+-myM\n# MNNNMN::///+-:+++:.+/``++/++++++++++++:+/`+++oo/:/++oyo+oy+odNddMMMMmyyh:-sdMh/odyN\n# MNNNNo:///++-:+o/`::```++/+++++++++++//+-.o++:-:/++/+/+ymo/+ossyyhdhssy+.:ohhd/sy+M\n# MMNMh-///+++--oo:`/````++-+++++++++++-o/`/+:.:/+++//+hmNo/++++++ooooooo-`/+o++/++-M\n# MMMN/:///+++-.o/````-s:+/:++++++++++/++`.:.-/++++/+sdmmo/+++++++++++++: -+++++////M\n# MMMh:///++++-`+:```/dN+/::++++++++++++:``.+ooo++ohNMNm++oooooooo+++++o+ :++++/-//oM\n# MMd:/-/+++++-`/.``:hmm//./+++++++++o/o..:osoooymmdddmoooooooooooooo+oms.+++++////+M\n# MMo// -+++++:`.`` dNddo-.:+++++++++++--/soo:.--::ymh+ssssssssssooo+sNN/++++++++/-dM\n# Md/// `/+++o/```` dMddN.-:++++++++++/`/o/+:``-:-`/ooyssssssssssssoodmMo++++++++//NM\n# M/:// `-+oooo.``` oMNMM+--/+++++++++/:yd-``.`-+o+hoyyoosyyyyyyys:+o+o++o//+++++/hMM\n# m++:/```:oooo/````.dmNNm/-/+++++++//+dhy::ohs:/hysyosyyyyyyyyys:----:-/o/ooo++/-mMM\n# s:++//```/oooo-  ``yNmdm:-/++++++////MMNmdhoys+ssssyyyyyysoysss:-.odd/o+/+oo++-+MMM\n# s`:++/````:oooo. ```:hNNh-/++++++//:hNNNMMNMdsossyyyyyyss+osdM/o/:yNyoo///ooo/.MMNM\n# d `-++/-```:+oo+-`````-+ds/++++++//-mMMMNNhs+syyysysyys+osdMMNyoshdh/+/o:ooo+.+MMNM\n# M/` `-/+/-``.:ooo-```````s:++++++++/mNdhsoossssyyhyo/-+hmMMMMNNNNNNo//+.:oo++ oMMNM\n# MMo``:..-//-.`-+oo:.`````/+++++++++:ooossyhyyyo+:-:ohNMmMMMMMNmNNNh:/:` :oo/: mMMNM\n# MMMh.oMh+``.-:-.-/o+-````mh/+++++++:++++/:--:+syhmMMMMMNMMMMMMMMMo-.//``+oo:`-MMNNM\n# MMMMh-omNd+````..`./+/.`hMMs+++++++/dmmmmNMMNNMMMMMMMMMMMMMMMMms:`` :/..+oo: yMNNNM\n# MNNNMN/``..``````````.-.+dNy-oooooo/o+s++sNMMNmNMMmmNMMMMMMMmo-   ``-/.-oo+- yMNNNM\n# MNNNNMMNdy-``````..``````-+o/+ooooo/++///:`:yMMMMMMMMMMMMds/`/++/````o--o++- MMNNNM\n# MMNNMMMMMN:`........-:+oyssoo+ssssss:ooo+/+:`:mMMMMMNho/.````+ooohd+//:+ooo-/MMMMMM\n# MMMMMMMMMMs.-...-.-osyyyyysdMhshhhhhossssssdh-.ss+/-.``----.sdhy+mMMMsosssy:sMMMMMM\n# endregion --------------------------------------------------------------------------------------|\n# region -----------------------------------------------------------------------------------------|\nclass Comba:\n    def __init__(self, mod):\n        self.fact = array.array(\"i\", [0] * MX); self.fact[0] = 1\n        self.fact_inv = array.array(\"i\", [0] * MX)\n        self.mod = mod\n\n        for i in range(1, MX):\n            self.fact[i] = (self.fact[i - 1] * i) % self.mod\n\n        self.fact_inv[MX - 1] = pow(self.fact[MX - 1], self.mod - 2, self.mod)\n        for i in range(MX - 2, -1, -1):\n            self.fact_inv[i] = (self.fact_inv[i + 1] * (i + 1)) % self.mod\n\n    def ncr(self, n, r):\n        if r > n or n < 0 or r < 0: return 0\n        return (self.fact[n] * self.fact_inv[r] % self.mod) * self.fact_inv[n - r] % self.mod\n    \n    def npr(self, n, r):\n        if r > n or n < 0 or r < 0: return 0\n        return self.fact[n] * self.fact_inv[n - r] % self.mod\n\ndef lcm(a, b): return a * b // gcd(a, b)\n\ndef rw_file():\n    sys.stdin = open(r\"\", \"r\")\n    sys.stdout = open(r\"\", \"w\")\n\ndef re(data=str): return data(sys.stdin.readline().rstrip())\ndef mp(data=str): return map(data, sys.stdin.readline().split())\n\nimport sys, array\nfrom bisect import bisect_left, bisect_right, insort_left\nfrom math import ceil, floor, log, sqrt, gcd\nfrom collections import deque, defaultdict, Counter\nfrom heapq import heappush, heappop, heapify\n\nmod, mod9, nl, MX = 1000000007, 998244353, \"\\n\", 200003\n# endregion --------------------------------------------------------------------------------------|\n\ndef solve(tc):\n    n = re(int)\n    grid = [list(mp(int)) for i in range(n)]\n    for d1 in range(5):\n        for d2 in range(d1 + 1, 5):\n            cnt1, cnt2, both = 0, 0, 0\n            bad = False\n            for i in range(n):\n                if not grid[i][d1] and not grid[i][d2]:\n                    bad = True; break\n                elif grid[i][d1] and grid[i][d2]:\n                    both += 1\n                elif grid[i][d1]:\n                    cnt1 += 1\n                elif grid[i][d2]:\n                    cnt2 += 1\n            \n            if not bad:\n                ok1, ok2 = False, False\n                if cnt1 + both >= n//2:\n                    ok1 = True\n                    both -= n//2 - cnt1 if n//2 > cnt1 else 0\n                if cnt2 + both >= n//2:\n                    ok2 = True\n                    both -= n//2 - cnt2 if n//2 > cnt2 else 0\n                if ok1 and ok2:\n                    print(\"YES\"); return\n    print(\"NO\")\n\n\n\n            \n    \n \n \n    return None\n\ndef main():\n    # rw_file()\n    tests = 1; tests = re(int)\n    for case in range(1, tests + 1): solve(case)\n\nif __name__ == \"__main__\":\n    main()\n\n",
                true
            ],
            [
                "def intersection(lst1, lst2, n):\n    com = 0\n    for i in range(n):\n        com += lst1[i] & lst2[i]\n    return com\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    days = [[], [], [], [], []]\n    for i in range(n):\n        lst = list(map(int, input().split()))\n        for i in range(5):\n            days[i].append(lst[i])\n    lstTot = []\n    i = 0\n    while i < len(days):\n        tot = sum(days[i])\n        if tot < n/2:\n            days.pop(i)\n        else:\n            lstTot.append(tot)\n            i += 1\n    flag = False\n    if len(days) > 1:\n        for i in range(len(days)):\n            for j in range(i + 1, len(days)):\n                common = intersection(days[i], days[j], n)\n                if lstTot[i] + lstTot[j] - common >= n:\n                    flag = True\n            if flag == True:\n                break\n    \n    if flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
                true
            ],
            [
                "# cook your dish here\n\nfrom sys import stdin, stdout\ninput = stdin.readline\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    \n    for _ in range(t):\n    \n        n = int(input().strip())\n        \n        arr = list()\n        \n        for i in range(n):\n            a = list(map(int, input().strip().split()))\n            arr.append(a)\n            \n        arr1 = list(zip(*arr))\n        \n        temp = [sum(array) for array in arr1]\n        \n        days = [i for i in range(5) if(temp[i]>=n//2)]\n        \n        size = len(days)\n        flag = 0\n        for i in range(size):\n            for j in range(i+1,size):\n                temp1 = arr1[days[i]]\n                temp2 = arr1[days[j]]\n                \n                temp = [temp1[k]+temp2[k] for k in range(n)]\n                \n                res = 0 in temp\n                if(not res):\n                    flag = 1\n                    break\n            \n            if(flag==1):\n                break\n            \n        if(flag==1):\n            ans = 'YES'\n        else:\n            ans = 'NO'\n            \n        stdout.write(ans+\"\\n\")\n        ",
                true
            ],
            [
                "from collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, log2, sqrt, gcd\nimport bisect\nimport copy\nfrom itertools import combinations\nimport sys\nimport heapq\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef input(): return sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n        n=int(input())\n        arr=[]\n\n        for i in range(n):\n            a=get_array()\n            arr.append(a)\n\n        only=[0]*5\n        both=[[0 for i in range(5)]for j in range(5)]\n        for i in range(5):\n            for j in range(n):\n                only[i]+=arr[j][i]\n\n        for i in range(5):\n            for j in range(i+1,5):\n                for k in range(n):\n                    if arr[k][i]==1 and arr[k][j]==1:\n                        both[i][j]+=1\n\n        req=n//2\n        flag=False\n\n        for i in range(5):\n            for j in range(i+1,5):\n                onlyi=only[i]-both[i][j]\n                onlyj=only[j]-both[i][j]\n\n                if onlyi<=req and onlyj<=req:\n                    req1=req-onlyi\n                    req2=req-onlyj\n                    if req1+req2==both[i][j]:\n                        flag=True\n                        break\n            if flag==True:\n                break\n        if flag==True:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
                true
            ],
            [
                "from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n\n    if n % 2:\n        print('NO')\n        continue\n\n    flag = 0\n    s = [set(), set(), set(), set(), set()]\n\n    for y in range(n):\n        a = [int(x) for x in input().split()]\n\n        for z in range(5):\n            if a[z] == 1:\n                s[z].add(y)\n        \n    for x in range(5):\n        for y in range(x + 1, 5):\n            if len(s[x]) >= n // 2 and len(s[y]) >= n // 2 and len(s[x] | s[y]) == n:\n                flag = 1\n                break\n\n        if flag:\n            break\n\n    print('YES' if flag else 'NO')",
                true
            ],
            [
                "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Oct 14 08:41:24 2021\n\n@author: 86139\n\"\"\"\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Oct 14 08:35:49 2021\n\n@author: 86139\n\"\"\"\nimport itertools\nt=int(input())\nfor i in range(t):\n    available_list=[[] for i in range(5)]\n    possible_day_index=set()\n    n=int(input())\n    for u in range(1,n+1):#student number\n        available_status_student=list(map(int,input().split()))\n        for j in range(5):\n            if available_status_student[j]!=0:\n                available_list[j].append(u)\n    for days_index in range(0,5):\n        if len(available_list[days_index])>=int(n/2):\n            possible_day_index.add(days_index)\n    possible_answer=list(itertools.combinations(possible_day_index,2))\n    if len(possible_day_index)<2:\n        print(\"NO\")\n        continue\n    #possible_element:element in possible_answer\n    #possible_answer:like[2,3]\n    else:\n        for possible_element in possible_answer:\n            a=set(available_list[possible_element[0]])\n            b=set(available_list[possible_element[1]])\n            if  not len(a|b)==n:\n                continue\n                \n            elif len(a)<(n/2) and len(b)<(n/2):\n                continue\n            else:\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")\n            \n                    \n            \n                \n                    \n                \n        \n        \n            \n        \n    \n    \n    \n        \n                \n        \n        ",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int,input().split())))\n    at = set()\n    if(n%2!=0):\n        print(\"NO\")\n        continue\n    ansf = 0\n    for i in range(5):\n        for j in range(i+1, 5):\n            tp1, tp2 = 0, 0\n            f = 0\n            for k in range(n):\n                if(l[k][i]==0 and l[k][j]==0):\n                    f=1\n                    break\n                tp1+=(l[k][i])\n                tp2+=(l[k][j])\n            if(f==1):\n                continue\n            else:\n                if(tp1>=n//2 and tp2>=n//2):\n                    ansf=1\n                    break\n        if ansf==1:\n            break\n    if(ansf==1):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "'''\n    Auther: ghoshashis545 Ashis Ghosh\n    College: Jalpaiguri Govt Enggineering College\n\n'''\nfrom os import path\nfrom io import BytesIO, IOBase\nimport sys\nfrom heapq import heappush,heappop\nfrom functools import cmp_to_key as ctk\nfrom collections import deque,Counter,defaultdict as dd \nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil,sqrt,log,gcd\ndef ii():return int(input())\ndef si():return input().rstrip()\ndef mi():return map(int,input().split())\ndef li():return list(mi())\nabc='abcdefghijklmnopqrstuvwxyz'\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\ndef bo(i):\n    return ord(i)-ord('0')\n\nfile = 1\ndef ceil(a,b):\n    return (a+b-1)//b\n\n\n\n\ndef solve():\n\n    \n    for _ in range(1,ii()+1):\n        n = ii()\n        a = []\n        for i in range(n):\n            a.append(li())\n        ok = False\n        if n&1:\n            print(\"NO\")\n            continue\n\n        for i in range(5):\n            for j in range(i+1,5):\n                cnt,cnt1=0,0\n                cnt2 = 0\n                for k in range(n):\n                    if a[k][i]:\n                        cnt+=1\n                    if a[k][j]:\n                        cnt1+=1\n                    if a[k][i] and a[k][j]:\n                        cnt2+=1\n                if cnt>cnt1:\n                    cnt,cnt1 = cnt1,cnt\n                if cnt1-cnt2 <= cnt and (cnt+cnt1-cnt2) == n:\n                    ok = True\n                    break\n        print(\"YES\" if ok else \"NO\")\n        \n        \n\n\n\n\n\n\n\n            \n\n\n\n\n\n    \n        \n\n\n\n\n\n\n\n\n        \nif __name__ ==\"__main__\":\n\n    if(file):\n    \n       if path.exists('input.txt'):\n           sys.stdin=open('input.txt', 'r')\n           sys.stdout=open('output.txt','w')\n       else:\n           input=sys.stdin.readline\n    solve()\n",
                true
            ],
            [
                "from itertools import combinations\nfor _ in range(int(input())):\n    weekdays=[]\n    for _ in range(5):\n        weekdays.append([])\n    n=int(input())\n    for i in range(n):\n        arr=list(map(int,input().split()))\n        for j in range(5):\n            if(arr[j]==1):\n                weekdays[j].append(i+1)\n    count=[]\n    for i in range(5):\n        if(len(weekdays[i])>=int(n/2)):\n            count.append(i)\n    comb=combinations(count,2)\n    for i in comb:\n        backup=len(weekdays[i[0]])+len(weekdays[i[1]])-n\n        setA=set(weekdays[i[0]])\n        setB=set(weekdays[i[1]])\n        inter=setA.intersection(setB)\n        if(len(inter)<=backup):\n            print('YES')\n            break\n    else:\n        print('NO')",
                true
            ],
            [
                "# Har har mahadev\n# author : @ harsh kanani\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [[] for i in range(n)]\n    for j in range(n):\n        a[j] = list(map(int, input().split()))\n    ans = False\n    for j in range(5):\n        for k in range(5):\n            if k != j:\n                cnt1 = 0\n                cnt2 = 0\n                cntno = 0\n                for z in range(n):\n                    if a[z][j] == 1:\n                        cnt1 += 1\n                    if a[z][k] == 1:\n                        cnt2 += 1\n                    if a[z][j] == 0 and a[z][k] == 0:\n                        cntno += 1\n                if cnt1 >= n // 2 and cnt2 >= n // 2 and cntno == 0:\n                    ans = True\n    if ans:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "def solve(n, s):\n    for i in range(5):\n        for j in range(i+1, 5):\n            a = b = c = 0\n            for k in range(n):\n                a += s[k][i] or s[k][j]\n                b += s[k][i]\n                c += s[k][j]\n            if a == n and b >= n//2 and c >= n//2:\n                print(\"YES\")\n                return\n    print(\"NO\")\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = [[int(s) for s in input().split()] for _ in range(n)]\n    solve(n,s)\n",
                true
            ],
            [
                "# -*- coding: utf-8 -*-\n\nfrom sys import stdin\nfrom collections import defaultdict\n\n#stdin = open(\"B.txt\",\"r\")\n\ndef solve():\n    results = []\n    \n    for _ in range(int(stdin.readline().strip())):\n        n = int(stdin.readline().strip())\n        \n        days = []\n        for _ in range(n):\n            a = list(map(int, stdin.readline().strip().split()))\n            days.append(a)\n            \n        available = defaultdict(set)\n            \n        for i in range(n):\n            for j in range(5):\n                if days[i][j] == 1:\n                    available[j].add(i)\n        \n        for i in range(4):\n            cnt = 0\n            \n            if len(available[i]) >= n//2:\n                \n                for j in range(i+1,5):\n                    if len(available[j]) < n//2:\n                        continue\n                    tmp1 = set(available[i])\n                    tmp2 = set(available[j])\n                    \n                    tmp = tmp1 & tmp2\n\n                    for x in tmp:\n                        if len(tmp1) > n//2:\n                            tmp1.remove(x)\n                            continue\n                        if len(tmp2) > n//2:\n                            tmp2.remove(x)\n                            continue\n\n                    if len(tmp1) == len(tmp2) == n//2 and len(tmp1 & tmp2) == 0:\n                        cnt = 2\n                        break\n                        \n            if cnt == 2:\n                break                \n        \n        results.append(\"YES\" if cnt==2 else \"NO\")               \n            \n    print ('\\n'.join(map(str, results)))\n        \nif __name__ == \"__main__\":\n    solve()",
                true
            ],
            [
                "\nfor _ in range(int(input())):\n    n = int(input())\n    a = [0] *n\n    ok = False\n    for i in range(n):\n        a[i] = [int(x) for x in input().split(' ')]\n    for i in range(5):\n        for j in range(i+1,5):\n            ok = True\n            coui = 0\n            couj = 0\n            for k in range(n):\n                if (a[k][i] == 1 and a[k][j] == 0): coui+=1\n                elif (a[k][i] == 0 and a[k][j]==1): couj+=1\n                elif (a[k][i] == 0 and a[k][j]==0):\n                    ok =False\n                    break\n            if (coui > (n/2) or (couj>(n/2))): \n                ok = False\n            if ok: break\n        if ok : break\n    if (ok): print(\"YES\")\n    else: print(\"NO\")",
                true
            ],
            [
                "from sys import stdin,stdout\ndef INPUT():return list(int(i) for i in stdin.readline().split())\ndef inp():return stdin.readline()\ndef out(x):return stdout.write(x)\nfrom math import *\nfrom decimal import *\nINT_MAX=10**13\nfrom bisect import bisect_left\nimport sys\nMOD=10**9+7\nfrom random import randint as R\n# from heapq import heappush,heappop,heapify\n#320660CC\ninf=12345676543\nfrom collections import deque\nfrom sys import setrecursionlimit\n#setrecursionlimit(10**6)\n#=============================================]\ndef sec(a,b):\n    n=len(a)\n    if sum(a)>=n//2 and sum(b)>=n//2:\n        for i in range(n):\n            if a[i]==b[i]==0:\n                return False\n        return True\n    return False\nfor _ in range(int(input())):\n    n=int(input())\n    A=[]\n    for _ in range(n):\n        A.append(INPUT())\n    count=[0]*5\n    for i in range(5):\n        a=0\n        for j in range(n):\n            a+=A[j][i]\n        count[i]=a\n    #print(count)\n    ans=False\n    for i in range(5):\n        for j in range(i+1,5):\n            x=[]\n            y=[]\n            for k in range(n):\n                x.append(A[k][i])\n                y.append(A[k][j])\n            if sec(x,y)==True:\n                ans=True\n    if ans:\n        print(\"YES\")\n    else:\n        print('NO')\n",
                true
            ],
            [
                "from math import *\nfrom collections import defaultdict as dt\nfrom sys import stdin\ninp = lambda : stdin.readline().strip()\nI   = lambda : int(inp())\nM   = lambda : map(int,inp().split())\nL   = lambda : list(M())\nmod = 1000000007\ninf = 100000000000000000000\nss  = \"abcdefghijklmnopqrstuvwxyz\"\n############## All the best start coding #############\ndef solve():\n    n=I()\n    d=dt(list)\n    for i in range(n):\n        a=L()\n        for j in range(5):\n            if a[j]:\n                d[j].append(i)\n    for i in range(5):\n        for j in range(i+1,5):\n            if len(d[i])>=n//2 and len(d[j])>=n//2 and len(set(d[i]+d[j]))==n:\n                print(\"YES\")\n                return\n    print(\"NO\")\n    \n##################### Submit now #####################\n \ntt=1\ntt=I()\nfor _ in range(tt):\n    solve()\n",
                true
            ],
            [
                "# import sys\n# from math import factorial, ceil, comb, log2\n# from collections import Counters\n# mod = 1000000007\n\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = []\n        s = [0, 0, 0, 0, 0]\n        fl = False\n        for i in range(n):\n            a.append(list(map(int, input().split())))\n        for i in range(5):\n            s[i] = sum([x[i] for x in a])\n        for i in range(5):\n            for j in range(i, 5):\n                if i != j and (s[i] >= (n//2) and s[j] >= (n//2)) and (sum([0 if (not a[x][i] and not a[x][j]) else 1 for x in range(n)]) == n):\n                    print(\"YES\")\n                    fl = True\n                    break\n            if fl:\n                break\n        if not fl:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()",
                true
            ],
            [
                "    #from _typeshed import SupportsKeysAndGetItem\nimport sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\n# sys.stdin=open(\"input.txt\",\"r\");\n# sys.stdout=open(\"output.txt\",\"w\")\n####### GLOBAL ###############\nMOD=1000000007\nNO=lambda:print(\"NO\")\nYES=lambda:print(\"YES\")\n_1=lambda:print(-1)\nari=lambda:[int(_) for _ in input().split()]\ncin=lambda:int(input())\ncis=lambda:input()\nshow=lambda x: print(x)\n########### END #########\n######\ntest_case=1\ntest_case=int(input())\n######\nsys.setrecursionlimit(10**6)\n    \ndef ans():\n    n=cin()\n    arr=[]\n    for i in range(n):\n        arr.append(cis().split())\n    for i in range(5):\n        for j in range(5):\n            if i!=j:\n                cnt1=0\n                cnt2=0\n                cntno=0\n                for k in range(n):\n                    if arr[k][j]=='1':\n                        cnt1+=1\n                    if arr[k][i]=='1':\n                        cnt2+=1\n                    if arr[k][i]=='0' and arr[k][j]=='0':\n                        cntno+=1\n                if cnt1>=n//2 and cnt2>=n//2 and cntno==0:\n                    print(\"YES\")\n                    return \n    print(\"NO\")\n    return\nfor _ in range(test_case):\n    ans()\n    ",
                true
            ],
            [
                "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \ninp_vars_int = lambda: map(int, input().split())\ninp_list_int = lambda: list(map(int, input().split()))\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    days = {d: set() for d in range(5)}\n    for i in range(n):\n        st = inp_list_int()\n        for j, d in enumerate(st):\n            if d == 1:\n                days[j].add(i)\n    res = False\n    for i in range(5):\n        for j in range(i + 1, 5):\n            if len(days[i]) >= n // 2 and len(days[j]) >= n // 2:\n                if len(days[i].union(days[j])) == n:\n                    res = True\n                    break\n    print('YES' if res else 'NO')",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [[] for i in range(n)]\n    for j in range(n):\n        a[j] = list(map(int, input().split()))\n    ans = False\n    for j in range(5):\n        for k in range(5):\n            if k != j:\n                cnt1 = 0\n                cnt2 = 0\n                cntno = 0\n                for z in range(n):\n                    if a[z][j] == 1:\n                        cnt1 += 1\n                    if a[z][k] == 1:\n                        cnt2 += 1\n                    if a[z][j] == 0 and a[z][k] == 0:\n                        cntno += 1\n                if cnt1 >= n // 2 and cnt2 >= n // 2 and cntno == 0:\n                    ans = True\n    if ans:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "I=input\nfor _ in[0]*int(I()):n=int(I());a=[x for x in zip(*(I()for _ in[0]*n))if\n2*x.count('1')>=n];print('YNEOS'[all((*'00',)in[*zip(x,y)]for\ni,x in enumerate(a)for y in a[:i])::2])",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp(): \n    # one integer\n    return int(input())\ndef input_list():\n    # list of integers\n    return list(map(int,input().split()))\ndef input_string():\n    # list of characters\n    s = input()\n    return list(s[:len(s) - 1])\ndef input_int_gen():\n    # integer generator \n    return map(int,input().split())\n\n\n# Codeforce 115 Edu B\ntests = inp()\nfor _ in range(tests):\n    n = inp()\n    k = {0:0, 1:0, 2:0, 3:0, 4:0}\n    l = []\n    for _ in range(n):\n        a = input_list()\n        l.append(a)\n    flag = False\n    for i in range(4):\n        for j in range(i+1, 5):\n            ii, jj, ij = 0, 0, 0\n            for a in l:\n                if a[i] and a[j]: ij +=1\n                elif a[i]: ii += 1\n                elif a[j]: jj += 1\n            if ii + jj + ij == n and ii + ij >= n // 2 and jj + ij >= n // 2:\n                print(\"YES\")\n                flag = True\n                break\n        if flag: break\n    if not flag:\n        print(\"NO\")\n",
                true
            ],
            [
                "import heapq\nimport math\nimport sys\nimport collections\nimport bisect\nimport time\nimport random\nimport itertools\nimport string\nfrom collections import Counter,defaultdict\ndef get_ints():return map(int, sys.stdin.readline().strip().split())\ndef get_list():return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string():return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    n=int(input())\n    arr=[]\n    for i in range(n):\n        arr.append(get_list())\n    poss=False\n    for i in range(5):\n        for j in range(i+1,5):\n            s1=set()\n            s2=set()\n            for no in range(n):\n                if arr[no][i]==1:\n                    s1.add(no)\n                if arr[no][j]==1:\n                    s2.add(no)\n            joined_set=s1.union(s2)\n            #print(i,j,joined_set)\n            if len(s1)>=n//2 and len(s2)>=n//2 and len(joined_set)==n:\n                poss=True\n                break\n        if poss:break\n    if poss:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "from collections import Counter\nfor _ in range(int(input())):\n    n=int(input())\n    li=[]\n    for i in range(n):\n        t=list(map(int,input().split()))\n        li.append(t)\n    ans=[]\n    # print(li)\n    for i in range(5):\n        # print(i)\n        r=[]\n        for j in range(n):\n            # print(j,end=\" \")\n            if li[j][i]==1:\n                # print(\"sa\")\n                r.append(j)\n        # print()\n        if r!=[]:\n            ans.append(r)\n    # print(ans)\n    f=0\n    for i in range(len(ans)):\n        for j in range(len(ans)):\n            if i!=j:\n                if len(list(set(ans[i]+ans[j])))==n and (len(ans[i])>=(n//2)) and (len(ans[j])>=(n//2)):\n                    f=1\n                    break\n    if f==1:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "def check():\n    for i in range(5):\n        for j in range(i + 1, 5):\n            flag = cnt1 = cnt2 = 0\n            for k in range(n):\n                if a[k][i] == a[k][j] == '0':\n                    flag = 1\n                    break\n                if a[k][i] == '1':\n                    cnt1 += 1\n                if a[k][j] == '1':\n                    cnt2 += 1\n            if cnt1 >= n / 2 and cnt2 >= n / 2 and flag == 0:\n                return 1\n    return 0\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = [input().split() for i in range(n)]\n    print('YES' if check() else 'NO')\n",
                true
            ],
            [
                "t=int(input())\n\nwhile t>0:\n    t=t-1 \n    n=int(input())\n    arr=[]\n    f=0\n    for i in range(0,n):\n        temp=list(map(int,input().split()))\n        arr.append(temp)\n        # if arr[k][i]==1:\n        #             ctr+=1 \n    for i in range(0,5):\n        for j in range(i+1,5):\n            ctr=0 \n            temp=0\n            h=0\n            res=0\n            for k in range(0,n):\n                if arr[k][i]==1:\n                    h+=1 \n                    ctr+=1 \n                #     if ctr<=int(n/2) or temp<=int(n/2) and ctr+temp+res==n:\n                # f=1 \n                # break\n                if arr[k][j]==1:\n                    h+=1\n                    temp+=1 \n                #     if ctr<=int(n/2) and temp<=int(n/2) and ctr+temp+res!=n:\n                \n                if arr[k][j]==1 and arr[k][i]==1:\n                    h+=1 \n                    res+=1 \n            ctr=ctr-res\n            temp=temp-res\n            \n            if ctr<=int(n/2) and temp<=int(n/2) and ctr+temp+res==n:\n                f=1 \n                break\n    if f==0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n            \n        \n        ",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\nfrom itertools import combinations\n\nfor _ in range(int(input())):\n    n = int(input())\n    w = [[],[],[],[],[]]\n    for i in range(n):\n        p = list(map(int,input().split()))\n        for j in range(5):\n            if p[j]:\n                w[j] += [i]\n    \n    for i in combinations(range(0,5), 2):\n        len1 = len(w[i[0]])\n        len2 = len(w[i[1]])\n        if len(set(w[i[0]])|set(w[i[1]])) == n:\n            len1 = len(set(w[i[0]])-set(w[i[1]]))\n            len2 = len(set(w[i[1]])-set(w[i[0]]))\n            if len1 <= n/2 and len2 <= n/2:\n                print('YES')\n                break\n    else:\n        print('NO')\n        \n                \n",
                true
            ],
            [
                "def solve():\n    n = int(input())\n    \n    d = [set() for _ in range(5)]\n    for i in range(n):\n        inp = input().split(\" \")\n        \n        for j in range(5):\n            if inp[j]=='1':\n                d[j].add(i+1)\n            \n    d = list(filter(lambda x: True if len(x)>=n//2 else False, d))\n    \n    if len(d)<2:\n        return \"NO\"\n    \n    for i in range(len(d)):\n        for j in range(len(d)):\n            if i!=j and len(d[j].union(d[i]))==n:\n                return \"YES\"\n            \n    return \"NO\"\n\nfor _ in range(int(input())):\n    print(solve())",
                true
            ],
            [
                "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Oct 15 16:57:03 2021\n\n@author: lcarv\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [[] for i in range(n)]\n    for j in range(n):\n        a[j] = list(map(int, input().split()))\n    ans = False\n    for j in range(5):\n        for k in range(5):\n            if k != j:\n                cnt1 = 0\n                cnt2 = 0\n                cntno = 0\n                for z in range(n):\n                    if a[z][j] == 1:\n                        cnt1 += 1\n                    if a[z][k] == 1:\n                        cnt2 += 1\n                    if a[z][j] == 0 and a[z][k] == 0:\n                        cntno += 1\n                if cnt1 >= n // 2 and cnt2 >= n // 2 and cntno == 0:\n                    ans = True\n    if ans:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Oct 16 11:50:45 2021\n\n@author: MridulSachdeva\n\"\"\"\n\n\nCASES = int(input())\nfor _ in range(CASES):\n    n = int(input())\n    cases = []\n    for i in range(n):\n        cases.append(list(map(int, input().split())))\n    # print(cases)\n    days = []\n    for i in range(5):\n        temp = set()\n        for j in range(n):\n            if cases[j][i]:\n                temp.add(j)\n        days.append(temp)\n    # print(days)\n\n    flag = False\n    for i in range(5):\n        if flag:\n            break\n        for j in range(i+1, 5):\n            if len(days[i] | days[j]) == n and len(days[i]) >= n // 2 and \\\n                len(days[j]) >= n // 2:\n                flag = True\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(5):\n        d[i] = set()\n\n    for i in range(n):\n        l = list(map(int,input().split()))\n        for j in range(5):\n            if l[j] == 1:\n                d[j].add(i)\n\n    flag = 0\n    for i in range(5):\n        for j in range(i+1,5):\n            e1 = d[i].copy()\n            e2 = d[j].copy()\n            if len(e1) < n//2:\n                continue\n\n            if len(e2) < n//2:\n                continue\n\n            c3 = len(e1&e2)\n            c1 = len(e1)-c3\n            c2 = len(e2)-c3\n            if c1 > n//2 or c2 > n//2:\n                continue\n\n            if c1+c2+c3 < n:\n                continue\n\n            flag = 1\n            break\n\n        if flag:\n            break\n\n    if flag:\n        print(\"YES\")\n\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "q = int(input())\nfor i in range(q):\n    n = int(input())\n    a = [list(map(int,input().split())) for i in range(n)]\n    cal = [0,0,0,0,0]\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == 1:\n                cal[j] += 1\n    #print(cal)\n    possible = [True,True,True,True,True]\n    for i in range(5):\n        if cal[i] * 2 < n:\n            possible[i] = False\n    #print(possible)\n    if possible.count(True) <= 1:\n        print('NO')\n        continue\n    tag = True\n    for i in range(5):\n        if not(possible[i]):\n            continue\n        for j in range(i+1,5):\n            if not possible[j]:\n                continue\n            #print('##',i,j)\n            tag = True\n            for k in range(n):\n                if a[k][i] + a[k][j] == 0:\n                    tag = False\n                    break\n            if tag: #FOUND\n                #print(i,j)\n                break\n        if tag:\n            break\n    if tag:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "import sys\ninput = sys.stdin.readline\n\n\ndef solve():\n    n = int(input())\n    l = []\n    # x, y = map(int, input().split())\n    for x in range(n):\n        l1 = [int(x) for x in input().split()]\n        l.append(l1)\n    for x in range(5):\n        for y in range(5):\n            if x != y:\n                g1, g2, gb = 0, 0, 0\n                for z in range(n):\n                    if l[z][x] and l[z][y]:\n                        gb += 1\n                    elif l[z][x]:\n                        g1 += 1\n                    elif l[z][y]:\n                        g2 += 1\n                g1 = n//2 - g1\n                g2 = n//2 - g2\n                if (g1 >= 0 and g2 >= 0 and g1+g2 == gb):\n                    return 1\n    return 0\n\n\n_ = 1\n_ = int(input())\nwhile _ > 0:\n    _ -= 1\n    print(\"YES\" if solve() else \"NO\")\n",
                true
            ],
            [
                "import bisect\nimport collections\nimport copy\nimport functools\nimport itertools\nimport math\nimport operator\nimport sys\nimport os\nfrom heapq import heappop, heappush\nfrom typing import Callable, Generic, Iterable, List, Tuple, TypeVar, Union\n\nsys.setrecursionlimit(100000)\nis_local = \"TERM_PROGRAM\" in os.environ\ninput = sys.stdin.readline\nINF = float('inf')\n\ndef debug(*args, **kwargs):\n    if is_local:\n        print(*args, **kwargs)\ndef I(): return input().rstrip()\ndef IS(): return input().split()\ndef II(): return int(input())\ndef IIS(): return map(int, input().split())\ndef LIIS(): return list(map(int, input().split()))\nfrom typing import Union\n\nMOD = 10**9+7\n\nclass Mod:\n    mod = MOD\n\n    def __init__(self, x: int) -> None:\n        self.x = x % self.mod\n\n    def __add__(self, other: Union[\"Mod\", int]) -> \"Mod\":\n        if isinstance(other, int):\n            return Mod(self.x + other)\n        return Mod(self.x + other.x)\n\n    def __sub__(self, other: Union[\"Mod\", int]) -> \"Mod\":\n        if isinstance(other, int):\n            return Mod(self.x - other)\n        return Mod(self.x - other.x)\n\n    def __mul__(self, other: Union[\"Mod\", int]) -> \"Mod\":\n        if isinstance(other, int):\n            return Mod(self.x * other)\n        return Mod(self.x * other.x)\n\n    def __truediv__(self, other: Union[\"Mod\", int]) -> \"Mod\":\n        if isinstance(other, int):\n            return Mod(self.x // other)\n        return Mod(self.x * other.inv().x)\n\n    def __eq__(self, other: \"Mod\") -> bool:\n        return self.x == other.x\n\n    def __le__(self, other: \"Mod\") -> bool:\n        return self.x <= other.x\n\n    def __lt__(self, other: \"Mod\") -> bool:\n        return self.x < other.x\n\n    def __ge__(self, other: \"Mod\") -> bool:\n        return self.x >= other.x\n\n    def __gt__(self, other: \"Mod\") -> bool:\n        return self.x > other.x\n\n    def __ne__(self, other: \"Mod\") -> bool:\n        return self.x != other.x\n\n    def inv(self) -> \"Mod\":\n        a = self.x\n        b = self.mod\n        u, v = 1, 0\n        while b > 0:\n            t = a // b\n            a, b = b, a - t * b\n            u, v = v, u - t * v\n        return Mod(u)\n\n    def __pow__(self, ex: int) -> \"Mod\":\n        a = self.x\n        res = 1\n        while ex > 0:\n            if ex & 1:\n                res = (res * a) % self.mod\n            a = (a * a) % self.mod\n            ex >>= 1\n        return Mod(res)\n\n    def __str__(self) -> str:\n        return str(self.x)\n\n    def __repr__(self) -> str:\n        return str(self.x)\n\ndef MII(): return Mod(int(input()))\ndef MIIS(): return map(Mod, map(int, input().split()))\ndef LMIIS(): return list(map(Mod, map(int, input().split())))\n\ndef main():\n    q = II()\n    for _ in range(q):\n        n = II()\n        students = []\n        for _ in range(n):\n            students.append(LIIS())\n        ans = solve(n, students)\n        print(ans)\n\ndef solve(n, students):\n    for i in range(5):\n        for j in range(i):\n            gi = set()\n            gj = set()\n\n            for k in range(n):\n                if students[k][i] == 1:\n                    gi.add(k)\n                if students[k][j] == 1:\n                    gj.add(k)\n            if len(gi | gj) == n and len(gi) >= n//2 and len(gj) >= n//2:\n                return \"YES\"\n    return \"NO\"\n\nif __name__ == \"__main__\":\n    main()\n\n",
                true
            ],
            [
                "from itertools import combinations\nfor _ in range(eval(input())):\n    n = eval(input())\n    m = [list(map(int, input().split())) for _ in range(n)]\n    z = list(zip(*m))\n    g = [x for x in z if sum(x) >= n / 2]\n    if len(g) < 2:\n        print(\"NO\")\n        continue\n    ans = \"NO\"\n    for x, y in combinations(g, 2):\n        t = 0\n        for i in range(n):\n            if x[i] + y[i] >= 1:\n                t += 1\n        if t == n:\n            ans = \"YES\"\n            break\n    print(ans)\n",
                true
            ],
            [
                "import math\nfrom sys import stdin\ninput = stdin.readline\n\ntest = int(input())\nfor _ in range(test):\n    n, arr, result = int(input()), [], True\n    arr = [set() for _ in range(5)]\n    for j in range(n):\n        data = list(map(int, input().split()))\n        for i in range(5):\n            if(data[i]):\n                arr[i].add(j)\n    if(n % 2 == 1):\n        print(\"NO\")\n        continue\n    result = False\n    for i in range(5):\n        a = len(arr[i])\n        if(a < n//2 or result):continue\n        for j in range(i + 1, 5):\n            b = len(arr[j])\n            if(b < n//2):continue\n            union = len(arr[i].union(arr[j]))\n            if(union == n):\n                result = True\n    if(result):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for j in range(n):\n        a.append(list(map(int, input().split())))\n    ans = False\n    for j in range(5):\n        for k in range(5):\n            if k != j:\n                c1 = 0\n                c2 = 0\n                count = 0\n                for z in range(n):\n                    if a[z][j] == 1:\n                        c1 += 1\n                    if a[z][k] == 1:\n                        c2 += 1\n                    if a[z][j] == 0 and a[z][k] == 0:\n                        count += 1\n                if c1 >= int(n/2) and c2 >= int(n/2) and count == 0:\n                    ans = True\n    if ans:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "import sys\nimport itertools\ninput = sys.stdin.readline\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        N = int(input())\n        A = [[int(x) for x in input().split()] for _ in range(N)]\n\n        half = N // 2\n\n        f = False\n        for one, two in itertools.combinations(range(5), 2):\n            used = set()\n            for i, a in enumerate(A):\n                if a[one] == 1 and a[two] == 0:\n                    used.add(i)\n                    if len(used) == half:\n                        break\n            if len(used) != half:\n                for i, a in enumerate(A):\n                    if a[one] == 1 and i not in used:\n                        used.add(i)\n                        if len(used) == half:\n                            break\n\n            if len(used) != half:\n                continue\n\n            for i, a in enumerate(A):\n                if a[two] == 1 and i not in used:\n                    used.add(i)\n\n            if len(used) == N:\n                f = True\n                break\n\n        if f:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\n\n    \n\nif __name__ == '__main__':\n    main()\n\n\n",
                true
            ],
            [
                "t = int(input())\n\nfor test_case in range(t):\n    n = int(input())\n\n    pairs = []\n    for a in range(4):\n        for b in range(a+1, 5):\n            pairs.append((a,b))\n\n    tallies = []\n    for c in range(10):\n        tallies.append([[0,0],[0,0]])\n\n    for i in range(n):\n        line = str(input()).split()\n        line = list(map(int, line))\n        for c in range(10):\n            p = pairs[c]\n            i, j = p[0], p[1]\n            x, y = line[i], line[j]\n            tallies[c][x][y] += 1\n\n    flag = False\n    half = n//2\n    for c in range(10):\n        tally = tallies[c]\n        if tally[0][0] == 0 and tally[0][1] <= half and tally[1][0] <= half:\n            flag = True\n            break\n\n    if flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = []\n    for _ in range(n):\n        week = input().split()\n        p.append(week)\n    possible = False\n    for d1 in range(4):\n        if possible:\n            break\n        for d2 in range(d1+1, 5):\n            cnt_d1 = 0\n            cnt_d2 = 0\n            cnt_d12 = 0\n            skip = False\n            for week in p:\n                if week[d1] == week[d2] == '1':\n                    cnt_d12 += 1\n                elif week[d1] == '1':\n                    cnt_d1 += 1\n                elif week[d2] == '1':\n                    cnt_d2 += 1\n                else:\n                    skip = True\n            if skip:\n                continue\n            if cnt_d1 <= n//2 and cnt_d2 <= n//2:\n                possible = True\n\n    if possible:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "for _ in range(int(input())):\n    n=int(input())\n    #n,k=map(int, input().split())\n    #arr =list(map(int, input().split()))\n    g=[]\n    arr=[0]*5\n    for i in range(n):\n        s=list(map(int, input().split()))\n        for j in range(5):\n            if s[j]==1:\n                arr[j]+=1\n        g.append(s)\n    f=0\n    for i in range(5):\n        for j in range(i+1,5):\n            if f==1:\n                break\n            if arr[i]>n//2 and arr[j]>n//2:\n                v1=arr[i]\n                v2=arr[j]\n                for k in range(n):\n                    if g[k][i]==1 and g[k][j]==1:\n                        if v1<v2:\n                            v2-=1\n                        else:\n                            v1-=1\n                if v1>=n//2 and v2>=n//2:\n                    f=1\n                \n            elif arr[i]==n//2 and arr[j]>=n//2:\n                v1=arr[i]\n                v2=arr[j]\n                for k in range(n):\n                    if g[k][i]==1 and g[k][j]==1:\n                        if v1<v2:\n                            v2-=1\n                        else:\n                            v1-=1\n                if v1>=n//2 and v2>=n//2:\n                    f=1\n\n            elif arr[i]>n // 2 and arr[j] == n // 2:\n                v1=arr[i]\n                v2=arr[j]\n                for k in range(n):\n                    if g[k][i]==1 and g[k][j]==1:\n                        if v1<v2:\n                            v2-=1\n                        else:\n                            v1-=1\n                if v1>=n//2 and v2>=n//2:\n                    f=1\n\n    print(\"YES\" if f==1 else \"NO\")\n\n\n\n\n\n",
                true
            ],
            [
                "def solve(n, prefs):\n    h = n // 2\n    for d1 in range(5):\n        for d2 in range(d1+1, 5):\n            d1c = 0\n            d2c = 0\n            both = 0\n            for p in prefs:\n                if p[d1] == 1 and p[d2] == 1:\n                    both += 1\n                elif p[d1] == 1:\n                    d1c += 1\n                elif p[d2] == 1:\n                    d2c += 1\n\n            if d1c > h or d2c > h:\n                continue\n\n            if d1c == h and d2c == h:\n                return \"YES\"\n\n            rem = n - d1c - d2c\n            if both >= rem:\n                return \"YES\"\n    return \"NO\"\n\n\nt = int(input().strip())\ninputs = []\nfor _ in range(t):\n    n = int(input().strip())\n    prefs = []\n    for _ in range(n):\n        p = list(map(int, input().strip().split()))\n        prefs.append(p)\n    inputs.append((n, prefs))\n\nfor n, prefs in inputs:\n    print(solve(n, prefs))\n",
                true
            ],
            [
                "t = int(input())\nfor _ in range(t) :\n    n = int(input())\n    days = []\n    for i in range(n) :\n        days.append(list(map(int, input().split())))\n    found = False\n    for i in range(5) :\n        a = set(k for (k, day) in enumerate(days) if day[i] == 1)\n        for j in range(i + 1, 5) :\n            b = set(k for (k, day) in enumerate(days) if day[j] == 1)\n            if len(a.union(b)) == n and len(a) >= n // 2 and len(b) >= n // 2:\n                print(\"YES\")\n                found = True\n                break\n        if found :\n            break\n    else :\n        print(\"NO\")\n            ",
                true
            ],
            [
                "def do():\n    n = int(input()) // 2\n    dat = []\n    for i in range(2*n):\n        dat.append(list(map(int, input().split())))\n    for i in range(5):\n        for j in range(i+1, 5):\n            cani = canj = canboth = canno = 0\n            for ind in range(2*n):\n                if dat[ind][i] == dat[ind][j] == 1: canboth += 1\n                elif dat[ind][i] == 1: cani += 1\n                elif dat[ind][j] == 1: canj += 1\n                else: canno += 1\n            if canno > 0: continue\n            if cani > n or canj > n: continue\n            print(\"YES\")\n            return\n    print(\"NO\")\n    return\nq = int(input())\nfor _ in range(q):\n    do()",
                true
            ],
            [
                "from itertools import combinations\ncombs = list(combinations(range(5),r=2))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [list(map(int,input().split())) for _ in range(n)]\n    a = list(zip(*a))\n\n# a_ = [\n#     [[0,0],[0,0],[0,0],[1,1,],[0,0]],\n#     [[1,0,0,0],[0,1,0,1],[0,0,0,0],[1,0,1,1],[0,1,0,0]],\n# ]\n# for _ in range(2):\n#     a = a_[_]\n    totalFail = True\n    for c in combs:\n        failed = False\n        cnt0 = sum(a[c[0]])\n        cnt1 = sum(a[c[1]])\n        for p0, p1 in zip(a[c[0]],a[c[1]]):\n            if p0 + p1 == 0: failed = True; break\n        if failed or cnt0 < n//2 or cnt1 < n//2: continue\n        totalFail = False; break\n    if totalFail: print('NO')\n    else: print('YES')\n",
                true
            ],
            [
                "from collections import defaultdict\ndef result(a1,n):\n    list_len = []\n    ab = defaultdict(set)\n    for i in range(5):\n        for j in range(n):\n            if a1[j][i]==1:\n                ab[i].add(j)\n    \n    for i in range(5):\n        if len(ab[i])>=n//2:\n            list_len.append(i)\n            \n        \n    for i in range(len(list_len)):\n        for j in range(i+1,len(list_len)):\n            t = ab[list_len[i]].union(ab[list_len[j]])\n            if len(t)==n:\n                print('YES')\n                return\n    print('NO')\n        \n\nfor i in range(int(input())):\n    a1 = []\n    ab = int(input())\n    for j in range(ab):\n        a1.append(list(map(int,input().split())))\n    result(a1,ab)\n      \n    \n     ",
                true
            ],
            [
                "T = int(input())\nfor testcase in range(1,T+1):\n    n = int(input())\n    nn = 2**n-1\n    b = [False * 5]\n    c = [\"\" for i in range(5)]\n    #print(c)\n    for i in range(n):\n        x = input().split()\n        for j in range(5):\n            c[j] = c[j] + x[j]\n    #print(c)\n    d = []\n    for j in range(5):\n        if c[j].count(\"1\") >= n//2:\n            d.append(int(c[j],2))\n    #print(d)\n    found = False\n    for i in range(len(d)-1):\n        for j in range(i+1,len(d)):\n            x,y = d[i],d[j]\n            #print(x, y, x | y)\n            if (x | y) == nn:\n                found = True\n                break\n        if found: break\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n",
                true
            ],
            [
                "def solve(n, a):\n    n2 = n // 2\n    for i in range(4):\n        for j in range(i+1, 5):\n            o1, o2, both = 0, 0, 0\n            for k in range(n):\n                if a[k][i]:\n                    if a[k][j]:\n                        both += 1\n                    else:\n                        o1 += 1\n                else:\n                    if a[k][j]:\n                        o2 += 1\n                    else:\n                        break\n            if o1+o2+both == n:\n                if o1 <= n2 and o2 <= n2:\n                    return \"YES\"\n    return \"NO\"\n\n\nt = int(input())\nfor i_t in range(t):\n    n = int(input())\n    a = []\n    for i_n in range(n):\n        a.append(list(map(int, input().split(\" \"))))\n    print(solve(n, a))",
                true
            ],
            [
                "\nt = int(input())\nfor  _ in range(t):\n    n = int(input())\n    \n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int,input().split())))\n    \n    bothday = []\n    for i in range(6):\n        for j in range(i+1,5):\n            bothday.append([i,j])\n\n    found = False\n    for i,j in bothday:\n        ci = 0\n        cj = 0\n        cnot = 0\n        for s in range(n):\n            ci += matrix[s][i]\n            cj += matrix[s][j]\n            \n            if matrix[s][j] == 0 and matrix[s][i]==0:\n                cnot+=1\n        \n        if ci >= n//2 and cj >= n//2 and cnot == 0:\n            found = True\n            break\n    if found:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "def allDays(arr, a, b):\n    n = len(arr)\n    c = 0\n    for i in range(n):\n        if arr[i][a] == 1 or arr[i][b] == 1:\n            c+=1\n    return n == c\n\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    count = [0 for i in range(5)]\n    c = False\n    for i in a:\n        for j in range(5):\n            if i[j] == 1:\n                count[j]+=1\n    for i in range(5):\n        for j in range(i+1, 5):\n            if allDays(a, i, j) and count[i] >= n/2 and count[j] >= n/2:\n                c = True\n    if c:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n                \n\n\n",
                true
            ],
            [
                "import sys,math,bisect\n# sys.setrecursionlimit(10**6)\nfrom random import randint\ninf = float('inf')\nmod = 10**9+7\n\"========================================\"\ndef nCr(n, r):\n    return (fact(n) / (fact(r)\n                * fact(n - r)))\ndef fact(n):\n    res = 1\n    for i in range(2, n+1):\n        res = res * i\n    return res\ndef lcm(a,b):\n    return int((a/math.gcd(a,b))*b)\ndef gcd(a,b):\n    return int(math.gcd(a,b))\ndef tobinary(n):\n    return bin(n)[2:]\ndef binarySearch(a,x):\n    i = bisect.bisect_left(a,x)\n    if i!=len(a) and a[i]==x:\n        return i\n    else:\n        return -1\ndef lowerBound(a, x):\n    i = bisect.bisect_left(a, x)\n    if i:\n        return (i-1)\n    else:\n        return -1\ndef upperBound(a,x):\n    i = bisect.bisect_right(a,x)\n    if i!= len(a)+1 and a[i-1]==x:\n        return (i-1)\n    else:\n        return -1\ndef primesInRange(n):\n    ans = []\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n+1):\n        if prime[p]:\n            ans.append(p)\n    return ans\ndef primeFactors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n % i== 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\ndef isPrime(n,k=5):\n    if (n <2):\n        return True\n    for i in range(0,k):\n        a = randint(1,n-1)\n        if(pow(a,n-1,n)!=1):\n            return False\n    return True\ndef find_closest(arr,target):\n        min_diff = 1e19\n        low = 0\n        high = len(arr)-1\n        closest_num = None\n\n        # if length of list is zero\n        if len(arr)==0:\n            return None\n        # if length of list is one\n        if len(arr)==1:\n            return arr[0]\n\n        while low <= high:\n            mid = (low+high)//2\n            min_diff_left = 1e19\n            min_diff_right = 1e19\n            # right of the midPoint\n            if mid +1 < len(arr):\n                min_diff_right = abs(arr[mid+1]-target)\n\n\n            # left of the midPoint\n            if mid -1 >= 0:\n                min_diff_left = abs(arr[mid-1]-target)\n\n            if min_diff_left < min_diff:\n                min_diff = min_diff_left\n                closest_num = arr[mid-1]\n\n            if min_diff_right < min_diff:\n                min_diff = min_diff_right\n                closest_num = arr[mid+1]\n            if arr[mid]<target:\n                low = mid+1\n            elif arr[mid]>target:\n                high = mid-1\n            else:\n                return arr[mid]\n        return closest_num\n\"=========================================\"\n\"\"\"\nn = int(input())\nn,k = map(int,input().split())\narr = list(map(int,input().split()))\n\"\"\"\nfrom collections import deque,defaultdict,Counter\nfrom heapq import heappush, heappop,heapify\nimport string\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr=[]\n    for i in range(n):\n        arr.append( list(map(int,input().split())))\n    def isPossible(day1,day2):\n        d1 = set()\n        d2 = set()\n\n        for row in range(n):\n            if arr[row][day1]:\n                d1.add(row)\n\n        for row in range(n):\n            if arr[row][day2]:\n                d2.add(row)\n\n        if len(d1)<(n//2) or len(d2)<(n//2):\n            return False\n        return len(d1.union(d2)) == n\n\n    flag=False\n    for day1 in range(5):\n        if flag:\n            break\n        for day2 in range(5):\n            if day1==day2:\n                continue\n            if isPossible(day1,day2):\n                flag=True\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\n",
                true
            ],
            [
                "# Online Python compiler (interpreter) to run Python online.\n# Write Python 3 code in this online editor and run it.\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    etudiants=[]\n    for i in range(n):\n        raw=input().split()\n        etudiant=[]\n        for jour in raw:\n            etudiant.append(int(jour))\n        etudiants.append(etudiant)\n    jours=['lundi','mardi','mercredi','jeudi','vendredi']\n    dispo={day:[] for day in jours}\n    indispo={day:[] for day in jours}\n    indice=0\n    for key in dispo:\n        for i in range(n):\n            if(etudiants[i][indice]==1):\n                dispo[key].append(i)\n        indice+=1\n\n    jours_possible=[]\n    for key in dispo:\n        if(len(dispo[key])>=n/2):\n            jours_possible.append(key)\n    res='NO'\n    for key in jours_possible:\n        for i in range(n):\n            if i not in dispo[key]:\n                indispo[key].append(i)\n        for key2 in jours_possible:\n            test = True\n            for el in indispo[key]:\n                if el not in dispo[key2]:\n                    test=False\n            if key2!=key and test==True:\n                res='YES'\n                break\n    print(res)\n\n",
                true
            ],
            [
                "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    ll = []\n    for i in range(5):\n        c = []\n        for j in range(n):\n            if l[j][i] == 1:\n                c.append(j + 1)\n        ll.append(c)\n    del l, c\n    z = 0\n    for i in range(5):\n        for j in range(i + 1, 5):\n            if len(ll[i]) >= n // 2 and len(ll[j]) >= n // 2:\n                s = (set(ll[i]) | (set(ll[j])))\n                if len(s) == n:\n                    z = -1\n                    break\n        if z == -1:\n            break\n    if z == -1:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                true
            ],
            [
                "import time\nfrom collections import deque \n\ndef inpt():\n    return int(input())\ndef inpl():\n    return list(map(int,input().split()))\ndef inpm():\n    return map(int,input().split())\n    \ndef solve():\n    n = inpt()\n    l = [[] for i in range(5)]\n    for i in range(n):\n        x = inpl()\n        for j in range(5):\n            l[j].append(x[j])\n    for i in range(5):\n        for j in range(5):\n            if i!=j:\n                x = sum([int(l[i][k]==1 and l[i][k]!=l[j][k]) for k in range(n)])\n                y = sum([int(l[j][k]==1 and l[i][k]!=l[j][k]) for k in range(n)])\n                z = sum([int(l[i][k]==l[j][k]==1) for k in range(n)])\n                #print(x,y,z)\n                if x + y + z == n and x<=n/2 and y<=n/2:\n                    print(\"YES\")\n                    return\n    print(\"NO\")\n    \n    \ndef main():\n    #start_time=time.time()\n    m=10**9+7\n    t = inpt()\n    while(t):\n        t-=1\n        solve()\n    #print('Time Elapsed = ',time.time()-start_time,\" seconds\")\nif __name__ == \"__main__\":\n    main()\n    ",
                true
            ],
            [
                "#    ____                       _   _                _     _ _   \n#   / ___| __ _ _ __ __ _      | | | | __ _ _ __ ___| |__ (_) |_ \n#  | |  _ / _` | '__/ _` |_____| |_| |/ _` | '__/ __| '_ \\| | __|\n#  | |_| | (_| | | | (_| |_____|  _  | (_| | |  \\__ \\ | | | | |_ \n#   \\____|\\__,_|_|  \\__, |     |_| |_|\\__,_|_|  |___/_| |_|_|\\__|\n#                   |___/                                        \n\nfrom typing import Counter\nimport sys\nfrom collections import defaultdict as dd\nfrom math import *\n\ndef vinp():\n    return map(int,input().split())\ndef linp():\n    return list(map(int,input().split()))\ndef sinp():\n    return input()\ndef inp():\n    return int(input())\ndef mod(f):\n    return f % 1000000007\ndef pr(*x):\n    print(*x)\ndef finp():\n    f=open(\"input.txt\",\"r\")\n    f=f.read().split(\"\\n\")\n    return f\ndef finp():\n    f=open(\"input.txt\",\"r\")\n    f=f.read().split(\"\\n\")\n    return f\ndef fout():\n    return open(\"output.txt\",\"w\")\ndef fpr(f,x):\n    f.write(x+\"\\n\")\ndef csort(c):\n    sorted(c.items(), key=lambda pair: pair[1], reverse=True)\ndef indc(l,n):\n    c={}\n    for i in range(n):\n        c[l[i]]=c.get(l[i],[])+[i+1]\n    return c\n\nif __name__ ==\"__main__\":\n    cou=inp()\n    for _ in range(cou):\n        n = inp()\n        l = [linp() for i in range(n)]\n        p = True\n        for i in range(5):\n            # z = True\n            for j in range(i+1,5):\n                f1 = 0\n                f2 = 0\n                b = 0\n                for k in range(n):\n                    if l[k][i] and l[k][j]:\n                        b+=1\n                    elif l[k][i]:\n                        f1+=1\n                    elif l[k][j]:\n                        f2+=1\n                # pr(f1,f2,b)\n                if (f1+f2+b)==n and ((f1+b)>=(n/2) and ((f2+b)>=(n/2))) and p:\n                    # pr(f1,f2,b)\n                    p = False\n                    pr(\"YES\")\n        if p:\n            pr(\"NO\")",
                true
            ],
            [
                "T=int(input())\nfor _ in range(T):\n    n=int(input())\n    students=[]\n    for _ in range(n):\n        s=list(map(int,input().split(' ')))\n        students.append(s)\n    days=[0,0,0,0,0]\n    for s in students:\n        for x in range(5):\n            days[x]+=s[x]\n    def check(d1,d2):\n        n1=0\n        n2=0\n        n12=0\n        for s in students:\n            if s[d1]and s[d2]:\n                n12+=1\n            elif s[d1]:\n                n1+=1\n            elif s[d2]:\n                n2+=1\n            else:\n                return False\n        # print(n1,n2,n12,'asddsa')\n        if n12+n1+n2!=n:\n            return False\n        if max(n1,n2)-min(n1,n2)>n12:\n            return False\n        n12-=max(n1,n2)-min(n1,n2)\n        if n12%2:\n            return False\n        # if (max(n1,n2)+n12//2)%2:\n        #     return False\n        return True\n\n\n    res=False\n    while 1:\n        # print(days)\n        if res:\n            break\n        top=max(days)\n        topD=days.index(top)\n        days[topD]=0\n        if top<n//2:\n            res=False\n            break \n        for d_i in range(5):\n            d=days[d_i]   \n            if d<n//2:\n                days[d_i]=0\n            else:\n                # print(topD,d_i)\n                if check(topD,d_i):\n                    res=True\n                    break\n\n\n    if res:\n        print('YES')\n    else:\n        print('NO')",
                true
            ],
            [
                "t = int(input())\nfor i in range(t):\n    count1 = [0,0,0,0,0]\n    n = int(input())\n    m = n//2\n    a = []\n    for j in range(n):\n        a.append(input().split())\n        for day in range(5):\n            count1[day]+=int(a[j][day])\n    kt = False\n    for j in range(4):\n        if count1[j]>=m:\n            for g in range(j+1,5):\n                if count1[g]>=m:\n                    kt = True\n                    for k in range(n):\n                        if a[k][j] == a[k][g] == '0':\n                            kt = False\n                            break\n                    if kt == True:\n                        print('YES')\n                        break\n            if kt == True:\n                break\n    if kt == False:\n        print('NO')\n                \n\n",
                true
            ],
            [
                "import collections\nimport itertools\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    students = []\n    days = [0 for _ in range(5)]\n    days_to_students = collections.defaultdict(set)\n    for i in range(n):\n        student = list(map(int, input().split()))\n        for day, amount in enumerate(student):\n            if amount:\n                days[day] += 1\n                days_to_students[day].add(i)\n    good_days = []\n    for i in range(5):\n        if days[i] >= n // 2:\n            good_days.append(i)\n    for a, b in itertools.combinations(good_days, 2):\n        if len(days_to_students[a] | days_to_students[b]) == n:\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")\n",
                true
            ]
        ]
    },
    "prompt2io": {
        "You are an expert Python programmer, and here is your task:\nA rectangle with its opposite corners in (0, 0) and (w, h) and sides parallel to the axes is drawn on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\n\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nA robot cleaner is placed on the floor of a rectangle room, surrounded by walls. The floor consists of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom, and columns of the floor are numbered from 1 to m from left to right. The cell on the intersection of the r-th row and the c-th column is denoted as (r,c). The initial position of the robot is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, that is, after one second, the robot moves from the cell (r, c) to (r + dr, c + dc). Initially dr = 1, dc = 1. If there is a vertical wall (the left or the right walls) in the movement direction, dc is reflected before the movement, so the new value of dc is -dc. And if there is a horizontal wall (the upper or lower walls), dr is reflected before the movement, so the new value of dr is -dr.\n\nEach second (including the moment before the robot starts moving), the robot cleans every cell lying in the same row or the same column as its position. There is only one dirty cell at (r_d, c_d). The job of the robot is to clean that dirty cell.\n\n<image> Illustration for the first example. The blue arc is the robot. The red star is the target dirty cell. Each second the robot cleans a row and a column, denoted by yellow stripes.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the time for the robot to do its job.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 \u2264 n, m \u2264 100, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m) \u2014 the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer \u2014 the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\nExample\n\nInput\n\n\n5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n\n\nOutput\n\n\n7\n10\n9\n3\n0\n\nNote\n\nIn the first example, the floor has the size of 10\u00d7 10. The initial position of the robot is (6, 1) and the position of the dirty cell is (2, 8). See the illustration of this example in the problem statement.\n\nIn the second example, the floor is the same, but the initial position of the robot is now (9, 9), and the position of the dirty cell is (1, 1). In this example, the robot went straight to the dirty cell and clean it. \n\n<image>\n\nIn the third example, the floor has the size 9 \u00d7 8. The initial position of the robot is (5, 6), and the position of the dirty cell is (2, 1). \n\n<image>\n\nIn the fourth example, the floor has the size 6 \u00d7 9. The initial position of the robot is (2, 2) and the position of the dirty cell is (5, 8). \n\n<image>\n\nIn the last example, the robot was already standing in the same column as the dirty cell, so it can clean the cell right away. \n\n<image>\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nA string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nA total of n depots are located on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. You must collect the required number of goods from the origin, deliver them to the respective depots, and then return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nAn important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several (as many as they want) times per meeting.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nAndi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n\nNote\n\nThe following illustrates the first example.\n\n<image>\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nBerland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\n\n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nCQXYM found a rectangle A of size n \u00d7 m. There are n rows and m columns of blocks. Each block of the rectangle is an obsidian block or empty. CQXYM can change an obsidian block to an empty block or an empty block to an obsidian block in one operation.\n\nA rectangle M size of a \u00d7 b is called a portal if and only if it satisfies the following conditions:\n\n  * a \u2265 5,b \u2265 4. \n  * For all 1 < x < a, blocks M_{x,1} and M_{x,b} are obsidian blocks. \n  * For all 1 < x < b, blocks M_{1,x} and M_{a,x} are obsidian blocks. \n  * For all 1<x<a,1<y<b, block M_{x,y} is an empty block. \n  * M_{1, 1}, M_{1, b}, M_{a, 1}, M_{a, b} can be any type. \n\nNote that the there must be a rows and b columns, not b rows and a columns.\n\nNote that corners can be any type\n\nCQXYM wants to know the minimum number of operations he needs to make at least one sub-rectangle a portal.\n\nInput\n\nThe first line contains an integer t (t \u2265 1), which is the number of test cases.\n\nFor each test case, the first line contains two integers n and m (5 \u2264 n \u2264 400, 4 \u2264 m \u2264 400). \n\nThen n lines follow, each line contains m characters 0 or 1. If the j-th character of i-th line is 0, block A_{i,j} is an empty block. Otherwise, block A_{i,j} is an obsidian block.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 400.\n\nIt is guaranteed that the sum of m over all test cases does not exceed 400.\n\nOutput\n\nOutput t answers, and each answer in a line.\n\nExamples\n\nInput\n\n\n1\n5 4\n1000\n0000\n0110\n0000\n0001\n\n\nOutput\n\n\n12\n\n\nInput\n\n\n1\n9 9\n001010001\n101110100\n000010011\n100000001\n101010101\n110001111\n000001111\n111100000\n000110000\n\n\nOutput\n\n\n5\n\nNote\n\nIn the first test case, the final portal is like this:\n    \n    \n      \n    1110  \n    1001  \n    1001  \n    1001  \n    0111  \n    \nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nCQXYM is counting permutations length of 2n.\n\nA permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nA permutation p(length of 2n) will be counted only if the number of i satisfying p_i<p_{i+1} is no less than n. For example:\n\n  * Permutation [1, 2, 3, 4] will count, because the number of such i that p_i<p_{i+1} equals 3 (i = 1, i = 2, i = 3).\n  * Permutation [3, 2, 1, 4] won't count, because the number of such i that p_i<p_{i+1} equals 1 (i = 3). \n\n\n\nCQXYM wants you to help him to count the number of such permutations modulo 1000000007 (10^9+7).\n\nIn addition, [modulo operation](https://en.wikipedia.org/wiki/Modulo_operation) is to get the remainder. For example:\n\n  * 7 mod 3=1, because 7 = 3 \u22c5 2 + 1, \n  * 15 mod 4=3, because 15 = 4 \u22c5 3 + 3. \n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (t \u2265 1) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains an integer n(1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5\n\nOutput\n\nFor each test case, print the answer in a single line.\n\nExample\n\nInput\n\n\n4\n1\n2\n9\n91234\n\n\nOutput\n\n\n1\n12\n830455698\n890287984\n\nNote\n\nn=1, there is only one permutation that satisfies the condition: [1,2].\n\nIn permutation [1,2], p_1<p_2, and there is one i=1 satisfy the condition. Since 1 \u2265 n, this permutation should be counted. In permutation [2,1], p_1>p_2. Because 0<n, this permutation should not be counted.\n\nn=2, there are 12 permutations: [1,2,3,4],[1,2,4,3],[1,3,2,4],[1,3,4,2],[1,4,2,3],[2,1,3,4],[2,3,1,4],[2,3,4,1],[2,4,1,3],[3,1,2,4],[3,4,1,2],[4,1,2,3].\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nCQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nCasimir has a rectangular piece of paper with a checkered field of size n \u00d7 m. Initially, all cells of the field are white.\n\nLet us denote the cell with coordinates i vertically and j horizontally by (i, j). The upper left cell will be referred to as (1, 1) and the lower right cell as (n, m).\n\nCasimir draws ticks of different sizes on the field. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: \n\n  1. First, the center cell (i, j) is painted black. \n  2. Then exactly d cells on the top-left diagonally to the center and exactly d cells on the top-right diagonally to the center are also painted black. \n  3. That is all the cells with coordinates (i - h, j \u00b1 h) for all h between 0 and d are painted. In particular, a tick consists of 2d + 1 black cells. \n\n\n\nAn already painted cell will remain black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3.\n\n<image>\n\nYou are given a description of a checkered field of size n \u00d7 m. Casimir claims that this field came about after he drew some (possibly 0) ticks on it. The ticks could be of different sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks).\n\nDetermine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nCasimir has a string s which consists of capital Latin letters 'A', 'B', and 'C' only. Each turn he can choose to do one of the two following actions:\n\n  * he can either erase exactly one letter 'A' and exactly one letter 'B' from arbitrary places of the string (these letters don't have to be adjacent); \n  * or he can erase exactly one letter 'B' and exactly one letter 'C' from arbitrary places in the string (these letters don't have to be adjacent). \n\n\n\nTherefore, each turn the length of the string is decreased exactly by 2. All turns are independent so for each turn, Casimir can choose any of two possible actions.\n\nFor example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by erasing the first occurrence of 'B' and the second occurrence of 'A'). There are also many other options for a turn aside from this particular example.\n\nFor a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nFrog Gorf is traveling through Swamp kingdom. Unfortunately, after a poor jump, he fell into a well of n meters depth. Now Gorf is on the bottom of the well and has a long way up.\n\nThe surface of the well's walls vary in quality: somewhere they are slippery, but somewhere have convenient ledges. In other words, if Gorf is on x meters below ground level, then in one jump he can go up on any integer distance from 0 to a_x meters inclusive. (Note that Gorf can't jump down, only up).\n\nUnfortunately, Gorf has to take a break after each jump (including jump on 0 meters). And after jumping up to position x meters below ground level, he'll slip exactly b_x meters down while resting.\n\nCalculate the minimum number of jumps Gorf needs to reach ground level.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 300 000) \u2014 the depth of the well.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 i), where a_i is the maximum height Gorf can jump from i meters below ground level.\n\nThe third line contains n integers b_1, b_2, \u2026, b_n (0 \u2264 b_i \u2264 n - i), where b_i is the distance Gorf will slip down if he takes a break on i meters below ground level.\n\nOutput\n\nIf Gorf can't reach ground level, print -1. Otherwise, firstly print integer k \u2014 the minimum possible number of jumps.\n\nThen print the sequence d_1,\\,d_2, \u2026,\\,d_k where d_j is the depth Gorf'll reach after the j-th jump, but before he'll slip down during the break. Ground level is equal to 0.\n\nIf there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n\n3\n0 2 2\n1 1 0\n\n\nOutput\n\n\n2\n1 0 \n\n\nInput\n\n\n2\n1 1\n1 0\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n10\n0 1 2 3 5 5 6 7 8 5\n9 8 7 1 5 4 3 2 0 0\n\n\nOutput\n\n\n3\n9 4 0 \n\nNote\n\nIn the first example, Gorf is on the bottom of the well and jump to the height 1 meter below ground level. After that he slip down by meter and stays on height 2 meters below ground level. Now, from here, he can reach ground level in one jump.\n\nIn the second example, Gorf can jump to one meter below ground level, but will slip down back to the bottom of the well. That's why he can't reach ground level.\n\nIn the third example, Gorf can reach ground level only from the height 5 meters below the ground level. And Gorf can reach this height using a series of jumps 10 \u21d2 9 \\dashrightarrow 9 \u21d2 4 \\dashrightarrow 5 where \u21d2 is the jump and \\dashrightarrow is slipping during breaks.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nGrandma Capa has decided to knit a scarf and asked Grandpa Sher to make a pattern for it, a pattern is a string consisting of lowercase English letters. Grandpa Sher wrote a string s of length n.\n\nGrandma Capa wants to knit a beautiful scarf, and in her opinion, a beautiful scarf can only be knit from a string that is a palindrome. She wants to change the pattern written by Grandpa Sher, but to avoid offending him, she will choose one lowercase English letter and erase some (at her choice, possibly none or all) occurrences of that letter in string s.\n\nShe also wants to minimize the number of erased symbols from the pattern. Please help her and find the minimum number of symbols she can erase to make string s a palindrome, or tell her that it's impossible. Notice that she can only erase symbols equal to the one letter she chose.\n\nA string is a palindrome if it is the same from the left to the right and from the right to the left. For example, the strings 'kek', 'abacaba', 'r' and 'papicipap' are palindromes, while the strings 'abb' and 'iq' are not.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2 \u22c5 t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the string.\n\nThe second line of each test case contains the string s consisting of n lowercase English letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and -1, if it is impossible.\n\nExample\n\nInput\n\n\n5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhyhky\n\n\nOutput\n\n\n2\n-1\n0\n3\n2\n\nNote\n\nIn the first test case, you can choose a letter 'a' and erase its first and last occurrences, you will get a string 'bcaacb', which is a palindrome. You can also choose a letter 'b' and erase all its occurrences, you will get a string 'acaaca', which is a palindrome as well.\n\nIn the second test case, it can be shown that it is impossible to choose a letter and erase some of its occurrences to get a palindrome.\n\nIn the third test case, you don't have to erase any symbols because the string is already a palindrome.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nIn Berland, n different types of banknotes are used. Banknotes of the i-th type have denomination 10^{a_i} burles (burles are the currency used in Berland); the denomination of banknotes of the first type is exactly 1.\n\nLet's denote f(s) as the minimum number of banknotes required to represent exactly s burles. For example, if the denominations of banknotes used in Berland are 1, 10 and 100, then f(59) = 14: 9 banknotes with denomination of 1 burle and 5 banknotes with denomination of 10 burles can be used to represent exactly 9 \u22c5 1 + 5 \u22c5 10 = 59 burles, and there's no way to do it with fewer banknotes.\n\nFor a given integer k, find the minimum positive number of burles s that cannot be represented with k or fewer banknotes (that is, f(s) > k).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 10; 1 \u2264 k \u2264 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (0 = a_1 < a_2 < ... < a_n \u2264 9).\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum positive number of burles s that cannot be represented with k or fewer banknotes.\n\nExample\n\nInput\n\n\n4\n3 13\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n\n59\n778\n148999\n999999920999999999\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nIt is the hard version of the problem. The difference is that in this version, there are nodes with already chosen colors.\n\nTheofanis is starving, and he wants to eat his favorite food, sheftalia. However, he should first finish his homework. Can you help him with this problem?\n\nYou have a perfect binary tree of 2^k - 1 nodes \u2014 a binary tree where all vertices i from 1 to 2^{k - 1} - 1 have exactly two children: vertices 2i and 2i + 1. Vertices from 2^{k - 1} to 2^k - 1 don't have any children. You want to color its vertices with the 6 Rubik's cube colors (White, Green, Red, Blue, Orange and Yellow).\n\nLet's call a coloring good when all edges connect nodes with colors that are neighboring sides in the Rubik's cube.\n\n<image>| <image>  \n---|---  \nA picture of Rubik's cube and its 2D map.\n\nMore formally: \n\n  * a white node can not be neighboring with white and yellow nodes; \n  * a yellow node can not be neighboring with white and yellow nodes; \n  * a green node can not be neighboring with green and blue nodes; \n  * a blue node can not be neighboring with green and blue nodes; \n  * a red node can not be neighboring with red and orange nodes; \n  * an orange node can not be neighboring with red and orange nodes; \n\n\n\nHowever, there are n special nodes in the tree, colors of which are already chosen.\n\nYou want to calculate the number of the good colorings of the binary tree. Two colorings are considered different if at least one node is colored with a different color.\n\nThe answer may be too large, so output the answer modulo 10^9+7.\n\nInput\n\nThe first line contains the integers k (1 \u2264 k \u2264 60) \u2014 the number of levels in the perfect binary tree you need to color.\n\nThe second line contains the integer n (1 \u2264 n \u2264 min(2^k - 1, 2000)) \u2014 the number of nodes, colors of which are already chosen.\n\nThe next n lines contains integer v (1 \u2264 v \u2264 2^k - 1) and string s \u2014 the index of the node and the color of the node (s is one of the white, yellow, green, blue, red and orange).\n\nIt is guaranteed that each node v appears in the input at most once.\n\nOutput\n\nPrint one integer \u2014 the number of the different colorings modulo 10^9+7.\n\nExamples\n\nInput\n\n\n3\n2\n5 orange\n2 white\n\n\nOutput\n\n\n1024\n\n\nInput\n\n\n2\n2\n1 white\n2 white\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n10\n3\n1 blue\n4 red\n5 orange\n\n\nOutput\n\n\n328925088\n\nNote\n\nIn the picture below, you can see one of the correct colorings of the first test example.\n\n<image>\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nLet's call a sequence of integers x_1, x_2, ..., x_k MEX-correct if for all i (1 \u2264 i \u2264 k) |x_i - \\operatorname{MEX}(x_1, x_2, ..., x_i)| \u2264 1 holds. Where \\operatorname{MEX}(x_1, ..., x_k) is the minimum non-negative integer that doesn't belong to the set x_1, ..., x_k. For example, \\operatorname{MEX}(1, 0, 1, 3) = 2 and \\operatorname{MEX}(2, 1, 5) = 0.\n\nYou are given an array a consisting of n non-negative integers. Calculate the number of non-empty MEX-correct subsequences of a given array. The number of subsequences can be very large, so print it modulo 998244353. \n\nNote: a subsequence of an array a is a sequence [a_{i_1}, a_{i_2}, ..., a_{i_m}] meeting the constraints 1 \u2264 i_1 < i_2 < ... < i_m \u2264 n. If two different ways to choose the sequence of indices [i_1, i_2, ..., i_m] yield the same subsequence, the resulting subsequence should be counted twice (i. e. two subsequences are different if their sequences of indices [i_1, i_2, ..., i_m] are not the same).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 5 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 n).\n\nThe sum of n over all test cases doesn't exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single integer \u2014 the number of non-empty MEX-correct subsequences of a given array, taken modulo 998244353.\n\nExample\n\nInput\n\n\n4\n3\n0 2 1\n2\n1 0\n5\n0 0 0 0 0\n4\n0 1 2 3\n\n\nOutput\n\n\n4\n2\n31\n7\n\nNote\n\nIn the first example, the valid subsequences are [0], [1], [0,1] and [0,2].\n\nIn the second example, the valid subsequences are [0] and [1].\n\nIn the third example, any non-empty subsequence is valid. \nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nLuntik came out for a morning stroll and found an array a of length n. He calculated the sum s of the elements of the array (s= \u2211_{i=1}^{n} a_i). Luntik calls a subsequence of the array a nearly full if the sum of the numbers in that subsequence is equal to s-1.\n\nLuntik really wants to know the number of nearly full subsequences of the array a. But he needs to come home so he asks you to solve that problem!\n\nA sequence x is a subsequence of a sequence y if x can be obtained from y by deletion of several (possibly, zero or all) elements.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The next 2 \u22c5 t lines contain descriptions of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 60) \u2014 the length of the array.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 10^9) \u2014 the elements of the array a.\n\nOutput\n\nFor each test case print the number of nearly full subsequences of the array.\n\nExample\n\nInput\n\n\n5\n5\n1 2 3 4 5\n2\n1000 1000\n2\n1 0\n5\n3 0 2 1 1\n5\n2 1 0 3 0\n\n\nOutput\n\n\n1\n0\n2\n4\n4\n\nNote\n\nIn the first test case, s=1+2+3+4+5=15, only (2,3,4,5) is a nearly full subsequence among all subsequences, the sum in it is equal to 2+3+4+5=14=15-1.\n\nIn the second test case, there are no nearly full subsequences.\n\nIn the third test case, s=1+0=1, the nearly full subsequences are (0) and () (the sum of an empty subsequence is 0).\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nLuntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nMonocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nMonocarp is playing a computer game. Now he wants to complete the first level of this game.\n\nA level is a rectangular grid of 2 rows and n columns. Monocarp controls a character, which starts in cell (1, 1) \u2014 at the intersection of the 1-st row and the 1-st column.\n\nMonocarp's character can move from one cell to another in one step if the cells are adjacent by side and/or corner. Formally, it is possible to move from cell (x_1, y_1) to cell (x_2, y_2) in one step if |x_1 - x_2| \u2264 1 and |y_1 - y_2| \u2264 1. Obviously, it is prohibited to go outside the grid.\n\nThere are traps in some cells. If Monocarp's character finds himself in such a cell, he dies, and the game ends.\n\nTo complete a level, Monocarp's character should reach cell (2, n) \u2014 at the intersection of row 2 and column n.\n\nHelp Monocarp determine if it is possible to complete the level.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then the test cases follow. Each test case consists of three lines.\n\nThe first line contains a single integer n (3 \u2264 n \u2264 100) \u2014 the number of columns.\n\nThe next two lines describe the level. The i-th of these lines describes the i-th line of the level \u2014 the line consists of the characters '0' and '1'. The character '0' corresponds to a safe cell, the character '1' corresponds to a trap cell.\n\nAdditional constraint on the input: cells (1, 1) and (2, n) are safe.\n\nOutput\n\nFor each test case, output YES if it is possible to complete the level, and NO otherwise.\n\nExample\n\nInput\n\n\n4\n3\n000\n000\n4\n0011\n1100\n4\n0111\n1110\n6\n010101\n101010\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\n\nNote\n\nConsider the example from the statement.\n\nIn the first test case, one of the possible paths is (1, 1) \u2192 (2, 2) \u2192 (2, 3).\n\nIn the second test case, one of the possible paths is (1, 1) \u2192 (1, 2) \u2192 (2, 3) \u2192 (2, 4).\n\nIn the fourth test case, one of the possible paths is (1, 1) \u2192 (2, 2) \u2192 (1, 3) \u2192 (2, 4) \u2192 (1, 5) \u2192 (2, 6).\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nMonocarp is playing yet another computer game. In this game, his character has to kill a dragon. The battle with the dragon lasts 100^{500} seconds, during which Monocarp attacks the dragon with a poisoned dagger. The i-th attack is performed at the beginning of the a_i-th second from the battle start. The dagger itself does not deal damage, but it applies a poison effect on the dragon, which deals 1 damage during each of the next k seconds (starting with the same second when the dragon was stabbed by the dagger). However, if the dragon has already been poisoned, then the dagger updates the poison effect (i.e. cancels the current poison effect and applies a new one).\n\nFor example, suppose k = 4, and Monocarp stabs the dragon during the seconds 2, 4 and 10. Then the poison effect is applied at the start of the 2-nd second and deals 1 damage during the 2-nd and 3-rd seconds; then, at the beginning of the 4-th second, the poison effect is reapplied, so it deals exactly 1 damage during the seconds 4, 5, 6 and 7; then, during the 10-th second, the poison effect is applied again, and it deals 1 damage during the seconds 10, 11, 12 and 13. In total, the dragon receives 10 damage.\n\nMonocarp knows that the dragon has h hit points, and if he deals at least h damage to the dragon during the battle \u2014 he slays the dragon. Monocarp has not decided on the strength of the poison he will use during the battle, so he wants to find the minimum possible value of k (the number of seconds the poison effect lasts) that is enough to deal at least h damage to the dragon.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of the test case contains two integers n and h (1 \u2264 n \u2264 100; 1 \u2264 h \u2264 10^{18}) \u2014 the number of Monocarp's attacks and the amount of damage that needs to be dealt.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9; a_i < a_{i + 1}), where a_i is the second when the i-th attack is performed.\n\nOutput\n\nFor each test case, print a single integer \u2014 the minimum value of the parameter k, such that Monocarp will cause at least h damage to the dragon.\n\nExample\n\nInput\n\n\n4\n2 5\n1 5\n3 10\n2 4 10\n5 3\n1 2 4 5 7\n4 1000\n3 25 64 1337\n\n\nOutput\n\n\n3\n4\n1\n470\n\nNote\n\nIn the first example, for k=3, damage is dealt in seconds [1, 2, 3, 5, 6, 7].\n\nIn the second example, for k=4, damage is dealt in seconds [2, 3, 4, 5, 6, 7, 10, 11, 12, 13].\n\nIn the third example, for k=1, damage is dealt in seconds [1, 2, 4, 5, 7].\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nMonocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.\n\nMonocarp has n problems that none of his students have seen yet. The i-th problem has a topic a_i (an integer from 1 to n) and a difficulty b_i (an integer from 1 to n). All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time.\n\nMonocarp decided to select exactly 3 problems from n problems for the problemset. The problems should satisfy at least one of two conditions (possibly, both):\n\n  * the topics of all three selected problems are different; \n  * the difficulties of all three selected problems are different. \n\n\n\nYour task is to determine the number of ways to select three problems for the problemset.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nMonocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nMr. Chanek gives you a sequence a indexed from 1 to n. Define f(a) as the number of indices where a_i = i. \n\nYou can pick an element from the current sequence and remove it, then concatenate the remaining elements together. For example, if you remove the 3-rd element from the sequence [4, 2, 3, 1], the resulting sequence will be [4, 2, 1]. \n\nYou want to remove some elements from a in order to maximize f(a), using zero or more operations. Find the largest possible f(a).\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the initial length of the sequence.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the initial sequence a.\n\nOutput\n\nOutput an integer denoting the largest f(a) that can be obtained by doing zero or more operations.\n\nExamples\n\nInput\n\n\n7\n2 1 4 2 5 3 7\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n4\n4 2 3 1\n\n\nOutput\n\n\n2\n\nNote\n\nIn the first example, f(A) = 3 by doing the following operations.\n\n[2,1,4,2,5,3,7] \u2192 [2,1,2,5,3,7] \u2192 [1,2,5,3,7] \u2192 [1,2,5,3] \u2192 [1,2,3]\n\nIn the second example, f(A) = 2 and no additional operation is needed.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nMr. Chanek has a new game called Dropping Balls. Initially, Mr. Chanek has a grid a of size n \u00d7 m\n\nEach cell (x,y) contains an integer a_{x,y} denoting the direction of how the ball will move.\n\n  * a_{x,y}=1 \u2014 the ball will move to the right (the next cell is (x, y + 1)); \n  * a_{x,y}=2 \u2014 the ball will move to the bottom (the next cell is (x + 1, y)); \n  * a_{x,y}=3 \u2014 the ball will move to the left (the next cell is (x, y - 1)). \n\n\n\nEvery time a ball leaves a cell (x,y), the integer a_{x,y} will change to 2. Mr. Chanek will drop k balls sequentially, each starting from the first row, and on the c_1, c_2, ..., c_k-th (1 \u2264 c_i \u2264 m) columns.\n\nDetermine in which column each ball will end up in (position of the ball after leaving the grid).\n\nInput\n\nThe first line contains three integers n, m, and k (1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 10^5) \u2014 the size of the grid and the number of balls dropped by Mr. Chanek.\n\nThe i-th of the next n lines contains m integers a_{i,1},a_{i,2},\u2026,a_{i,m} (1 \u2264 a_{i,j} \u2264 3). It will satisfy a_{i, 1} \u2260 3 and a_{i, m} \u2260 1.\n\nThe next line contains k integers c_1, c_2, \u2026, c_k (1 \u2264 c_i \u2264 m) \u2014 the balls' column positions dropped by Mr. Chanek sequentially.\n\nOutput\n\nOutput k integers \u2014 the i-th integer denoting the column where the i-th ball will end.\n\nExamples\n\nInput\n\n\n5 5 3\n1 2 3 3 3\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n1 2 1\n\n\nOutput\n\n\n2 2 1 \n\n\nInput\n\n\n1 2 2\n1 3\n1 2\n\n\nOutput\n\n\n1 2 \n\nNote\n\nIn the first example, the first ball will drop as follows. Note that the cell (1, 1) will change direction to the bottom direction.\n\n<image>\n\nThe second and third balls will drop as follows. \n\n<image>\n\nAll balls will be dropped from the first row and on the c_1, c_2, ..., c_k-th columns respectively. A ball will stop dropping once it leaves the grid.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nPetya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nPolycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nPolycarp has come up with a new game to play with you. He calls it \"A missing bigram\".\n\nA bigram of a word is a sequence of two adjacent letters in it.\n\nFor example, word \"abbaaba\" contains bigrams \"ab\", \"bb\", \"ba\", \"aa\", \"ab\" and \"ba\".\n\nThe game goes as follows. First, Polycarp comes up with a word, consisting only of lowercase letters 'a' and 'b'. Then, he writes down all its bigrams on a whiteboard in the same order as they appear in the word. After that, he wipes one of them off the whiteboard.\n\nFinally, Polycarp invites you to guess what the word that he has come up with was.\n\nYour goal is to find any word such that it's possible to write down all its bigrams and remove one of them, so that the resulting sequence of bigrams is the same as the one Polycarp ended up with.\n\nThe tests are generated in such a way that the answer exists. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 2000) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (3 \u2264 n \u2264 100) \u2014 the length of the word Polycarp has come up with.\n\nThe second line of each testcase contains n-2 bigrams of that word, separated by a single space. Each bigram consists of two letters, each of them is either 'a' or 'b'.\n\nAdditional constraint on the input: there exists at least one string such that it is possible to write down all its bigrams, except one, so that the resulting sequence is the same as the sequence in the input. In other words, the answer exists.\n\nOutput\n\nFor each testcase print a word, consisting of n letters, each of them should be either 'a' or 'b'. It should be possible to write down all its bigrams and remove one of them, so that the resulting sequence of bigrams is the same as the one Polycarp ended up with.\n\nThe tests are generated in such a way that the answer exists. If there are multiple answers, you can print any of them. \n\nExample\n\nInput\n\n\n4\n7\nab bb ba aa ba\n7\nab ba aa ab ba\n3\naa\n5\nbb ab bb\n\n\nOutput\n\n\nabbaaba\nabaabaa\nbaa\nbbabb\n\nNote\n\nThe first two testcases from the example are produced from the word \"abbaaba\". As listed in the statement, it contains bigrams \"ab\", \"bb\", \"ba\", \"aa\", \"ab\" and \"ba\".\n\nIn the first testcase, the 5-th bigram is removed. \n\nIn the second testcase, the 2-nd bigram is removed. However, that sequence could also have been produced from the word \"abaabaa\". It contains bigrams \"ab\", \"ba\", \"aa\", \"ab\", \"ba\" and \"aa\". The missing bigram is the 6-th one.\n\nIn the third testcase, all of \"baa\", \"aab\" and \"aaa\" are valid answers.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nPolycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nShohag has an integer sequence a_1, a_2, \u2026, a_n. He can perform the following operation any number of times (possibly, zero):\n\n  * Select any positive integer k (it can be different in different operations). \n  * Choose any position in the sequence (possibly the beginning or end of the sequence, or in between any two elements) and insert k into the sequence at this position. \n  * This way, the sequence a changes, and the next operation is performed on this changed sequence. \n\n\n\nFor example, if a=[3,3,4] and he selects k = 2, then after the operation he can obtain one of the sequences [\\underline{2},3,3,4], [3,\\underline{2},3,4], [3,3,\\underline{2},4], or [3,3,4,\\underline{2}].\n\nShohag wants this sequence to satisfy the following condition: for each 1 \u2264 i \u2264 |a|, a_i \u2264 i. Here, |a| denotes the size of a.\n\nHelp him to find the minimum number of operations that he has to perform to achieve this goal. We can show that under the constraints of the problem it's always possible to achieve this goal in a finite number of operations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 200) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 100) \u2014 the initial length of the sequence.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) \u2014 the elements of the sequence.\n\nOutput\n\nFor each test case, print a single integer \u2014 the minimum number of operations needed to perform to achieve the goal mentioned in the statement.\n\nExample\n\nInput\n\n\n4\n3\n1 3 4\n5\n1 2 5 7 4\n1\n1\n3\n69 6969 696969\n\n\nOutput\n\n\n1\n3\n0\n696966\n\nNote\n\nIn the first test case, we have to perform at least one operation, as a_2=3>2. We can perform the operation [1, 3, 4] \u2192 [1, \\underline{2}, 3, 4] (the newly inserted element is underlined), now the condition is satisfied.\n\nIn the second test case, Shohag can perform the following operations:\n\n[1, 2, 5, 7, 4] \u2192 [1, 2, \\underline{3}, 5, 7, 4] \u2192 [1, 2, 3, \\underline{4}, 5, 7, 4] \u2192 [1, 2, 3, 4, 5, \\underline{3}, 7, 4].\n\nIn the third test case, the sequence already satisfies the condition.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nTanya is learning how to add numbers, but so far she is not doing it correctly. She is adding two numbers a and b using the following algorithm:\n\n  1. If one of the numbers is shorter than the other, Tanya adds leading zeros so that the numbers are the same length. \n  2. The numbers are processed from right to left (that is, from the least significant digits to the most significant). \n  3. In the first step, she adds the last digit of a to the last digit of b and writes their sum in the answer. \n  4. At each next step, she performs the same operation on each pair of digits in the same place and writes the result to the left side of the answer. \n\n\n\nFor example, the numbers a = 17236 and b = 3465 Tanya adds up as follows:\n\n$$$ \\large{ \\begin{array}{r} + \\begin{array}{r} 17236\\\\\\ 03465\\\\\\ \\end{array} \\\\\\ \\hline \\begin{array}{r} 1106911 \\end{array} \\end{array}} $$$\n\n  * calculates the sum of 6 + 5 = 11 and writes 11 in the answer. \n  * calculates the sum of 3 + 6 = 9 and writes the result to the left side of the answer to get 911. \n  * calculates the sum of 2 + 4 = 6 and writes the result to the left side of the answer to get 6911. \n  * calculates the sum of 7 + 3 = 10, and writes the result to the left side of the answer to get 106911. \n  * calculates the sum of 1 + 0 = 1 and writes the result to the left side of the answer and get 1106911. \n\n\n\nAs a result, she gets 1106911.\n\nYou are given two positive integers a and s. Find the number b such that by adding a and b as described above, Tanya will get s. Or determine that no suitable b exists.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nEach test case consists of a single line containing two positive integers a and s (1 \u2264 a < s \u2264 10^{18}) separated by a space.\n\nOutput\n\nFor each test case print the answer on a separate line.\n\nIf the solution exists, print a single positive integer b. The answer must be written without leading zeros. If multiple answers exist, print any of them.\n\nIf no suitable number b exists, output -1.\n\nExample\n\nInput\n\n\n6\n17236 1106911\n1 5\n108 112\n12345 1023412\n1 11\n1 20\n\n\nOutput\n\n\n3465\n4\n-1\n90007\n10\n-1\n\nNote\n\nThe first test case is explained in the main part of the statement.\n\nIn the third test case, we cannot choose b that satisfies the problem statement.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nThe grasshopper is located on the numeric axis at the point with coordinate x_0.\n\nHaving nothing else to do he starts jumping between integer points on the axis. Making a jump from a point with coordinate x with a distance d to the left moves the grasshopper to a point with a coordinate x - d, while jumping to the right moves him to a point with a coordinate x + d.\n\nThe grasshopper is very fond of positive integers, so for each integer i starting with 1 the following holds: exactly i minutes after the start he makes a jump with a distance of exactly i. So, in the first minutes he jumps by 1, then by 2, and so on.\n\nThe direction of a jump is determined as follows: if the point where the grasshopper was before the jump has an even coordinate, the grasshopper jumps to the left, otherwise he jumps to the right.\n\nFor example, if after 18 consecutive jumps he arrives at the point with a coordinate 7, he will jump by a distance of 19 to the right, since 7 is an odd number, and will end up at a point 7 + 19 = 26. Since 26 is an even number, the next jump the grasshopper will make to the left by a distance of 20, and it will move him to the point 26 - 20 = 6.\n\nFind exactly which point the grasshopper will be at after exactly n jumps.\n\nInput\n\nThe first line of input contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nEach of the following t lines contains two integers x_0 (-10^{14} \u2264 x_0 \u2264 10^{14}) and n (0 \u2264 n \u2264 10^{14}) \u2014 the coordinate of the grasshopper's initial position and the number of jumps.\n\nOutput\n\nPrint exactly t lines. On the i-th line print one integer \u2014 the answer to the i-th test case \u2014 the coordinate of the point the grasshopper will be at after making n jumps from the point x_0.\n\nExample\n\nInput\n\n\n9\n0 1\n0 2\n10 10\n10 99\n177 13\n10000000000 987654321\n-433494437 87178291199\n1 0\n-1 1\n\n\nOutput\n\n\n-1\n1\n11\n110\n190\n9012345679\n-87611785637\n1\n0\n\nNote\n\nThe first two test cases in the example correspond to the first two jumps from the point x_0 = 0. \n\nSince 0 is an even number, the first jump of length 1 is made to the left, and the grasshopper ends up at the point 0 - 1 = -1.\n\nThen, since -1 is an odd number, a jump of length 2 is made to the right, bringing the grasshopper to the point with coordinate -1 + 2 = 1.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nThe new generation external memory contains an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n].\n\nThis type of memory does not support changing the value of an arbitrary element. Instead, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. \n  2. Then you replace the segment a[l \u2026 r] with it's cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2. \n\n\n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort the given array a using no more than n cyclic shifts of any of its segments. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] \nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nThe robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nEach cell has one of the symbols 'L', 'R', 'D' or 'U' written on it, indicating the direction in which the robot will move when it gets in that cell \u2014 left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. He then moves to the adjacent square in the direction indicated on the current square in one move. \n\n  * If the robot moves beyond the edge of the board, it falls and breaks. \n  * If the robot appears in the cell it already visited before, it breaks (it stops and doesn't move anymore). \n\n\n\nRobot can choose any cell as the starting cell. Its goal is to make the maximum number of steps before it breaks or stops.\n\nDetermine from which square the robot should start its movement in order to execute as many commands as possible. A command is considered successfully completed if the robot has moved from the square on which that command was written (it does not matter whether to another square or beyond the edge of the board).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nTheofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nTheofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nThere are n block towers in a row, where tower i has a height of a_i. You're part of a building crew, and you want to make the buildings look as nice as possible. In a single day, you can perform the following operation:\n\n  * Choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j), and move a block from tower i to tower j. This essentially decreases a_i by 1 and increases a_j by 1. \n\n\n\nYou think the ugliness of the buildings is the height difference between the tallest and shortest buildings. Formally, the ugliness is defined as max(a)-min(a). \n\nWhat's the minimum possible ugliness you can achieve, after any number of days?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nThere are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nThere is a grid, consisting of n rows and m columns. Each cell of the grid is either free or blocked. One of the free cells contains a lab. All the cells beyond the borders of the grid are also blocked.\n\nA crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\". Each command means moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYelisey has an array a of n integers.\n\nIf a has length strictly greater than 1, then Yelisei can apply an operation called minimum extraction to it: \n\n  1. First, Yelisei finds the minimal number m in the array. If there are several identical minima, Yelisey can choose any of them. \n  2. Then the selected minimal element is removed from the array. After that, m is subtracted from each remaining element. \n\n\n\nThus, after each operation, the length of the array is reduced by 1.\n\nFor example, if a = [1, 6, -4, -2, -4], then the minimum element in it is a_3 = -4, which means that after this operation the array will be equal to a=[1 {- (-4)}, 6 {- (-4)}, -2 {- (-4)}, -4 {- (-4)}] = [5, 10, 2, 0].\n\nSince Yelisey likes big numbers, he wants the numbers in the array a to be as big as possible.\n\nFormally speaking, he wants to make the minimum of the numbers in array a to be maximal possible (i.e. he want to maximize a minimum). To do this, Yelisey can apply the minimum extraction operation to the array as many times as he wants (possibly, zero). Note that the operation cannot be applied to an array of length 1.\n\nHelp him find what maximal value can the minimal element of the array have after applying several (possibly, zero) minimum extraction operations to the array.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the original length of the array a. The second line of the description lists n space-separated integers a_i (-10^9 \u2264 a_i \u2264 10^9) \u2014 elements of the array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of them containing the answer to the corresponding test case. The answer to the test case is a single integer \u2014 the maximal possible minimum in a, which can be obtained by several applications of the described operation to it.\n\nExample\n\nInput\n\n\n8\n1\n10\n2\n0 0\n3\n-1 2 0\n4\n2 10 1 7\n2\n2 3\n5\n3 2 -4 -2 0\n2\n-1 1\n1\n-2\n\n\nOutput\n\n\n10\n0\n2\n5\n2\n2\n2\n-2\n\nNote\n\nIn the first example test case, the original length of the array n = 1. Therefore minimum extraction cannot be applied to it. Thus, the array remains unchanged and the answer is a_1 = 10.\n\nIn the second set of input data, the array will always consist only of zeros.\n\nIn the third set, the array will be changing as follows: [\\color{blue}{-1}, 2, 0] \u2192 [3, \\color{blue}{1}] \u2192 [\\color{blue}{2}]. The minimum elements are highlighted with \\color{blue}{blue}. The maximal one is 2.\n\nIn the fourth set, the array will be modified as [2, 10, \\color{blue}{1}, 7] \u2192 [\\color{blue}{1}, 9, 6] \u2192 [8, \\color{blue}{5}] \u2192 [\\color{blue}{3}]. Similarly, the maximum of the minimum elements is 5.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. For example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times. \n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou are given a sequence a_1, a_2, ..., a_n consisting of n pairwise distinct positive integers.\n\nFind \\left\u230a \\frac n 2 \\right\u230b different pairs of integers x and y such that: \n\n  * x \u2260 y; \n  * x and y appear in a; \n  * x~mod~y doesn't appear in a. \n\n\n\nNote that some x or y can belong to multiple pairs.\n\n\u230a x \u230b denotes the floor function \u2014 the largest integer less than or equal to x. x~mod~y denotes the remainder from dividing x by y.\n\nIf there are multiple solutions, print any of them. It can be shown that at least one solution always exists.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the sequence.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^6).\n\nAll numbers in the sequence are pairwise distinct. The sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nThe answer for each testcase should contain \\left\u230a \\frac n 2 \\right\u230b different pairs of integers x and y such that x \u2260 y, x and y appear in a and x~mod~y doesn't appear in a. Print the pairs one after another.\n\nYou can print the pairs in any order. However, the order of numbers in the pair should be exactly such that the first number is x and the second number is y. All pairs should be pairwise distinct.\n\nIf there are multiple solutions, print any of them.\n\nExample\n\nInput\n\n\n4\n2\n1 4\n4\n2 8 3 4\n5\n3 8 5 9 7\n6\n2 7 5 3 4 8\n\n\nOutput\n\n\n4 1\n8 2\n8 4\n9 5\n7 5\n8 7\n4 3\n5 2\n\nNote\n\nIn the first testcase there are only two pairs: (1, 4) and (4, 1). \\left\u230a \\frac 2 2 \\right\u230b=1, so we have to find one pair. 1~mod~4=1, and 1 appears in a, so that pair is invalid. Thus, the only possible answer is a pair (4, 1).\n\nIn the second testcase, we chose pairs 8~mod~2=0 and 8~mod~4=0. 0 doesn't appear in a, so that answer is valid. There are multiple possible answers for that testcase.\n\nIn the third testcase, the chosen pairs are 9~mod~5=4 and 7~mod~5=2. Neither 4, nor 2, appears in a, so that answer is valid.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou are given a string s of length n consisting of characters a and/or b.\n\nLet \\operatorname{AB}(s) be the number of occurrences of string ab in s as a substring. Analogically, \\operatorname{BA}(s) is the number of occurrences of ba in s as a substring.\n\nIn one step, you can choose any index i and replace s_i with character a or b.\n\nWhat is the minimum number of steps you need to make to achieve \\operatorname{AB}(s) = \\operatorname{BA}(s)?\n\nReminder:\n\nThe number of occurrences of string d in s as substring is the number of indices i (1 \u2264 i \u2264 |s| - |d| + 1) such that substring s_i s_{i + 1} ... s_{i + |d| - 1} is equal to d. For example, \\operatorname{AB}(aabbbabaa) = 2 since there are two indices i: i = 2 where aabbbabaa and i = 6 where aabbbabaa.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000). Description of the test cases follows.\n\nThe first and only line of each test case contains a single string s (1 \u2264 |s| \u2264 100, where |s| is the length of the string s), consisting only of characters a and/or b.\n\nOutput\n\nFor each test case, print the resulting string s with \\operatorname{AB}(s) = \\operatorname{BA}(s) you'll get making the minimum number of steps.\n\nIf there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\nb\naabbbabaa\nabbb\nabbaab\n\n\nOutput\n\n\nb\naabbbabaa\nbbbb\nabbaaa\n\nNote\n\nIn the first test case, both \\operatorname{AB}(s) = 0 and \\operatorname{BA}(s) = 0 (there are no occurrences of ab (ba) in b), so can leave s untouched.\n\nIn the second test case, \\operatorname{AB}(s) = 2 and \\operatorname{BA}(s) = 2, so you can leave s untouched. \n\nIn the third test case, \\operatorname{AB}(s) = 1 and \\operatorname{BA}(s) = 0. For example, we can change s_1 to b and make both values zero.\n\nIn the fourth test case, \\operatorname{AB}(s) = 2 and \\operatorname{BA}(s) = 1. For example, we can change s_6 to a and make both values equal to 1.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou are given an array a consisting of n positive integers. You have to choose a positive integer d and paint all elements into two colors. All elements which are divisible by d will be painted red, and all other elements will be painted blue.\n\nThe coloring is called beautiful if there are no pairs of adjacent elements with the same color in the array. Your task is to find any value of d which yields a beautiful coloring, or report that it is impossible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of elements of the array.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^{18}).\n\nOutput\n\nFor each testcase print a single integer. If there is no such value of d that yields a beautiful coloring, print 0. Otherwise, print any suitable value of d (1 \u2264 d \u2264 10^{18}).\n\nExample\n\nInput\n\n\n5\n5\n1 2 3 4 5\n3\n10 5 15\n3\n100 10 200\n10\n9 8 2 6 6 2 8 6 5 4\n2\n1 3\n\n\nOutput\n\n\n2\n0\n100\n0\n3\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou are given an array a of length n.\n\nLet's define the eversion operation. Let x = a_n. Then array a is partitioned into two parts: left and right. The left part contains the elements of a that are not greater than x (\u2264 x). The right part contains the elements of a that are strictly greater than x (> x). The order of elements in each part is kept the same as before the operation, i. e. the partition is stable. Then the array is replaced with the concatenation of the left and the right parts.\n\nFor example, if the array a is [2, 4, 1, 5, 3], the eversion goes like this: [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5].\n\nWe start with the array a and perform eversions on this array. We can prove that after several eversions the array a stops changing. Output the minimum number k such that the array stops changing after k eversions.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print a single integer k \u2014 the number of eversions after which the array stops changing.\n\nExample\n\nInput\n\n\n3\n5\n2 4 1 5 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n\n\nOutput\n\n\n1\n2\n0\n\nNote\n\nConsider the fist example.\n\n  * The first eversion: a = [1, 4, 2, 5, 3], x = 3. [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5]. \n  * The second and following eversions: a = [2, 1, 3, 4, 5], x = 5. [2, 1, 3, 4, 5] \u2192 [2, 1, 3, 4, 5], [] \u2192 [2, 1, 3, 4, 5]. This eversion does not change the array, so the answer is 1. \n\n\n\nConsider the second example. \n\n  * The first eversion: a = [5, 3, 2, 4, 1], x = 1. [5, 3, 2, 4, 1] \u2192 [1], [5, 3, 2, 4] \u2192 [1, 5, 3, 2, 4]. \n  * The second eversion: a = [1, 5, 3, 2, 4], x = 4. [1, 5, 3, 2, 4] \u2192 [1, 3, 2, 4], [5] \u2192 [1, 3, 2, 4, 5]. \n  * The third and following eversions: a = [1, 3, 2, 4, 5], x = 5. [1, 3, 2, 4, 5] \u2192 [1, 3, 2, 4, 5], [] \u2192 [1, 3, 2, 4, 5]. This eversion does not change the array, so the answer is 2. \nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou are given an array a of n integers, and another integer k such that 2k \u2264 n.\n\nYou have to perform exactly k operations with this array. In one operation, you have to choose two elements of the array (let them be a_i and a_j; they can be equal or different, but their positions in the array must not be the same), remove them from the array, and add \u230a (a_i)/(a_j) \u230b to your score, where \u230a x/y \u230b is the maximum integer not exceeding x/y.\n\nInitially, your score is 0. After you perform exactly k operations, you add all the remaining elements of the array to the score.\n\nCalculate the minimum possible score you can get.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nEach test case consists of two lines. The first line contains two integers n and k (1 \u2264 n \u2264 100; 0 \u2264 k \u2264 \u230a n/2 \u230b).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 2 \u22c5 10^5).\n\nOutput\n\nPrint one integer \u2014 the minimum possible score you can get.\n\nExample\n\nInput\n\n\n5\n7 3\n1 1 1 2 1 3 1\n5 1\n5 5 5 5 5\n4 2\n1 3 3 7\n2 0\n4 2\n9 2\n1 10 10 1 10 2 7 10 3\n\n\nOutput\n\n\n2\n16\n0\n6\n16\n\nNote\n\nLet's consider the example test.\n\nIn the first test case, one way to obtain a score of 2 is the following one:\n\n  1. choose a_7 = 1 and a_4 = 2 for the operation; the score becomes 0 + \u230a 1/2 \u230b = 0, the array becomes [1, 1, 1, 1, 3]; \n  2. choose a_1 = 1 and a_5 = 3 for the operation; the score becomes 0 + \u230a 1/3 \u230b = 0, the array becomes [1, 1, 1]; \n  3. choose a_1 = 1 and a_2 = 1 for the operation; the score becomes 0 + \u230a 1/1 \u230b = 1, the array becomes [1]; \n  4. add the remaining element 1 to the score, so the resulting score is 2. \n\n\n\nIn the second test case, no matter which operations you choose, the resulting score is 16.\n\nIn the third test case, one way to obtain a score of 0 is the following one:\n\n  1. choose a_1 = 1 and a_2 = 3 for the operation; the score becomes 0 + \u230a 1/3 \u230b = 0, the array becomes [3, 7]; \n  2. choose a_1 = 3 and a_2 = 7 for the operation; the score becomes 0 + \u230a 3/7 \u230b = 0, the array becomes empty; \n  3. the array is empty, so the score doesn't change anymore. \n\n\n\nIn the fourth test case, no operations can be performed, so the score is the sum of the elements of the array: 4 + 2 = 6.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou are given an array a[0 \u2026 n - 1] = [a_0, a_1, \u2026, a_{n - 1}] of zeroes and ones only. Note that in this problem, unlike the others, the array indexes are numbered from zero, not from one.\n\nIn one step, the array a is replaced by another array of length n according to the following rules: \n\n  1. First, a new array a^{\u2192 d} is defined as a cyclic shift of the array a to the right by d cells. The elements of this array can be defined as a^{\u2192 d}_i = a_{(i + n - d) mod n}, where (i + n - d) mod n is the remainder of integer division of i + n - d by n. \n\nIt means that the whole array a^{\u2192 d} can be represented as a sequence $$$a^{\u2192 d} = [a_{n - d}, a_{n - d + 1}, \u2026, a_{n - 1}, a_0, a_1, \u2026, a_{n - d - 1}]$$$\n\n  2. Then each element of the array a_i is replaced by a_i  \\&  a^{\u2192 d}_i, where \\& is a logical \"AND\" operator. \n\n\n\nFor example, if a = [0, 0, 1, 1] and d = 1, then a^{\u2192 d} = [1, 0, 0, 1] and the value of a after the first step will be [0  \\&  1, 0  \\&  0, 1  \\&  0, 1  \\&  1], that is [0, 0, 0, 1].\n\nThe process ends when the array stops changing. For a given array a, determine whether it will consist of only zeros at the end of the process. If yes, also find the number of steps the process will take before it finishes.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains two integers: n (1 \u2264 n \u2264 10^6) \u2014 array size and d (1 \u2264 d \u2264 n) \u2014 cyclic shift offset. The second line of the description contains n space-separated integers a_i (0 \u2264 a_i \u2264 1) \u2014 elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the number of steps after which the array will contain only zeros for the first time. If there are still elements equal to 1 in the array after the end of the process, print -1.\n\nExample\n\nInput\n\n\n5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 1\n1 1\n0\n\n\nOutput\n\n\n1\n1\n3\n-1\n0\n\nNote\n\nIn the third sample test case the array will change as follows: \n\n  1. At the beginning a = [1, 1, 0, 1, 0], and a^{\u2192 2} = [1, 0, 1, 1, 0]. Their element-by-element \"AND\" is equal to $$$[1  \\&  1, 1  \\&  0, 0  \\&  1, 1  \\&  1, 0  \\&  0] = [1, 0, 0, 1, 0]$$$ \n  2. Now a = [1, 0, 0, 1, 0], then a^{\u2192 2} = [1, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  1, 0  \\&  0, 0  \\&  1, 1  \\&  0, 0  \\&  0] = [1, 0, 0, 0, 0]$$$ \n  3. And finally, when a = [1, 0, 0, 0, 0] we get a^{\u2192 2} = [0, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  0, 0  \\&  0, 0  \\&  1, 0  \\&  0, 0  \\&  0] = [0, 0, 0, 0, 0]$$$ \n\nThus, the answer is 3 steps.\n\nIn the fourth sample test case, the array will not change as it shifts by 2 to the right, so each element will be calculated as 0  \\&  0 or 1  \\&  1 thus not changing its value. So the answer is -1, the array will never contain only zeros.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou are given an array of integers a of length n. The elements of the array can be either different or the same. \n\nEach element of the array is colored either blue or red. There are no unpainted elements in the array. One of the two operations described below can be applied to an array in a single step:\n\n  * either you can select any blue element and decrease its value by 1; \n  * or you can select any red element and increase its value by 1. \n\n\n\nSituations in which there are no elements of some color at all are also possible. For example, if the whole array is colored blue or red, one of the operations becomes unavailable.\n\nDetermine whether it is possible to make 0 or more steps such that the resulting array is a permutation of numbers from 1 to n?\n\nIn other words, check whether there exists a sequence of steps (possibly empty) such that after applying it, the array a contains in some order all numbers from 1 to n (inclusive), each exactly once.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of input data sets in the test.\n\nThe description of each set of input data consists of three lines. The first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the original array a. The second line contains n integers a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9) \u2014 the array elements themselves.\n\nThe third line has length n and consists exclusively of the letters 'B' and/or 'R': ith character is 'B' if a_i is colored blue, and is 'R' if colored red.\n\nIt is guaranteed that the sum of n over all input sets does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case of the input. Print YES as an answer if the corresponding array can be transformed into a permutation, and NO otherwise.\n\nYou can print the answer in any case (for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer).\n\nExample\n\nInput\n\n\n8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n\nNote\n\nIn the first test case of the example, the following sequence of moves can be performed:\n\n  * choose i=3, element a_3=5 is blue, so we decrease it, we get a=[1,2,4,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,3,4,2]; \n  * choose i=3, element a_3=4 is blue, so we decrease it, we get a=[1,3,3,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,4,3,2]. \n\n\n\nWe got that a is a permutation. Hence the answer is YES.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou are given an array of n positive integers a_1, a_2, \u2026, a_n. Your task is to calculate the number of arrays of n positive integers b_1, b_2, \u2026, b_n such that: \n\n  * 1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and \n  * b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1). \n\n\n\nThe number of such arrays can be very large, so print it modulo 998 244 353.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou are given strings S and T, consisting of lowercase English letters. It is guaranteed that T is a permutation of the string abc. \n\nFind string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nString a is a permutation of string b if the number of occurrences of each distinct character is the same in both strings.\n\nA string a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds:\n\n  * a is a prefix of b, but a \u2260 b;\n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a string S (1 \u2264 |S| \u2264 100), consisting of lowercase English letters.\n\nThe second line of each test case contains a string T that is a permutation of the string abc. (Hence, |T| = 3).\n\nNote that there is no limit on the sum of |S| across all test cases.\n\nOutput\n\nFor each test case, output a single string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nExample\n\nInput\n\n\n7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n\n\nOutput\n\n\naaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n\nNote\n\nIn the first test case, both aaaabbc and aaaabcb are lexicographically smaller than aaaacbb, but they contain abc as a subsequence.\n\nIn the second test case, abccc is the smallest permutation of cccba and does not contain acb as a subsequence.\n\nIn the third test case, bcdis is the smallest permutation of dbsic and does not contain bac as a subsequence.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou had n positive integers a_1, a_2, ..., a_n arranged in a circle. For each pair of neighboring numbers (a_1 and a_2, a_2 and a_3, ..., a_{n - 1} and a_n, and a_n and a_1), you wrote down: are the numbers in the pair equal or not.\n\nUnfortunately, you've lost a piece of paper with the array a. Moreover, you are afraid that even information about equality of neighboring elements may be inconsistent. So, you are wondering: is there any array a which is consistent with information you have about equality or non-equality of corresponding pairs?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Next t cases follow.\n\nThe first and only line of each test case contains a non-empty string s consisting of characters E and/or N. The length of s is equal to the size of array n and 2 \u2264 n \u2264 50. For each i from 1 to n: \n\n  * if s_i = E then a_i is equal to a_{i + 1} (a_n = a_1 for i = n); \n  * if s_i = N then a_i is not equal to a_{i + 1} (a_n \u2260 a_1 for i = n). \n\nOutput\n\nFor each test case, print YES if it's possible to choose array a that are consistent with information from s you know. Otherwise, print NO.\n\nIt can be proved, that if there exists some array a, then there exists an array a of positive integers with values less or equal to 10^9.\n\nExample\n\nInput\n\n\n4\nEEE\nEN\nENNEENE\nNENN\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first test case, you can choose, for example, a_1 = a_2 = a_3 = 5.\n\nIn the second test case, there is no array a, since, according to s_1, a_1 is equal to a_2, but, according to s_2, a_2 is not equal to a_1.\n\nIn the third test case, you can, for example, choose array a = [20, 20, 4, 50, 50, 50, 20].\n\nIn the fourth test case, you can, for example, choose a = [1, 3, 3, 7].\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou have an array of integers (initially empty).\n\nYou have to perform q queries. Each query is of one of two types: \n\n  * \"1 x\" \u2014 add the element x to the end of the array; \n  * \"2 x y\" \u2014 replace all occurrences of x in the array with y. \n\n\n\nFind the resulting array after performing all the queries.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] \u2192 [3] \u2192 [3, 1] \u2192 [3, 2] \u2192 [3, 2, 2] \u2192 [3, 2, 2, 1] \u2192 [3, 2, 2, 1, 2] \u2192 [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] \u2192 [1] \u2192 [1, 2] \u2192 [1, 2, 1] \u2192 [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] \u2192 [] \u2192 [1] \u2192 [1, 4] \u2192 [1, 4, 2] \u2192 [1, 4, 4] \u2192 [1, 3, 3] \u2192 [1, 3, 3, 2] \u2192 [1, 3, 3, 7].\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYou have received data from a Bubble bot. You know your task is to make factory facilities, but before you even start, you need to know how big the factory is and how many rooms it has. When you look at the data you see that you have the dimensions of the construction, which is in rectangle shape: N x M. \n\nThen in the next N lines you have M numbers. These numbers represent factory tiles and they can go from 0 to 15. Each of these numbers should be looked in its binary form. Because from each number you know on which side the tile has walls. For example number 10 in it's binary form is 1010, which means that it has a wall from the North side, it doesn't have a wall from the East, it has a wall on the South side and it doesn't have a wall on the West side. So it goes North, East, South, West. \n\nIt is guaranteed that the construction always has walls on it's edges. The input will be correct. \n\nYour task is to print the size of the rooms from biggest to smallest. \n\nInput\n\nThe first line has two numbers which are N and M, the size of the construction. Both are integers: \n\nn (1 \u2264 n \u2264 10^3)\n\nm (1 \u2264 m \u2264 10^3)\n\nNext N x M numbers represent each tile of construction.\n\nOutput\n\nOnce you finish processing the data your output consists of one line sorted from biggest to smallest room sizes. \n\nExample\n\nInput\n\n\n4 5\n9 14 11 12 13\n5 15 11 6 7\n5 9 14 9 14\n3 2 14 3 14\n\n\nOutput\n\n\n9 4 4 2 1 \nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYouKn0wWho has an integer sequence a_1, a_2, \u2026 a_n. Now he will split the sequence a into one or more consecutive subarrays so that each element of a belongs to exactly one subarray. Let k be the number of resulting subarrays, and h_1, h_2, \u2026, h_k be the lengths of the longest increasing subsequences of corresponding subarrays.\n\nFor example, if we split [2, 5, 3, 1, 4, 3, 2, 2, 5, 1] into [2, 5, 3, 1, 4], [3, 2, 2, 5], [1], then h = [3, 2, 1].\n\nYouKn0wWho wonders if it is possible to split the sequence a in such a way that the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of h_1, h_2, \u2026, h_k is equal to 0. You have to tell whether it is possible.\n\nThe longest increasing subsequence (LIS) of a sequence b_1, b_2, \u2026, b_m is the longest sequence of valid indices i_1, i_2, \u2026, i_k such that i_1 < i_2 < \u2026 < i_k and b_{i_1} < b_{i_2} < \u2026 < b_{i_k}. For example, the LIS of [2, 5, 3, 3, 5] is [2, 3, 5], which has length 3.\n\nAn array c is a subarray of an array b if c can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10 000) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (2 \u2264 n \u2264 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print \"YES\" (without quotes) if it is possible to split into subarrays in the desired way, print \"NO\" (without quotes) otherwise. You can print each letter in any register (upper or lower).\n\nExample\n\nInput\n\n\n4\n7\n1 3 4 2 2 1 5\n3\n1 3 4\n5\n1 3 2 4 2\n4\n4 3 2 1\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first test case, YouKn0wWho can split the sequence in the following way: [1, 3, 4], [2, 2], [1, 5]. This way, the LIS lengths are h = [3, 1, 2], and the bitwise XOR of the LIS lengths is 3 \u2295 1 \u2295 2 = 0.\n\nIn the second test case, it can be shown that it is impossible to split the sequence into subarrays that will satisfy the condition.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nYouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true,
        "You are an expert Python programmer, and here is your task:\nn students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), and the days chosen for the groups must be different. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. \n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.\nDo not give explanations, only give the Python code.\nPython Solution:\n```python": true
    }
}