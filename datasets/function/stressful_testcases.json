{
    "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"": [
        {
            "input": "['aeiouY'*2000]",
            "output": null
        },
        {
            "input": "['aeiouAEIOU'*1000 + 'y'*1000]",
            "output": null
        },
        {
            "input": "['qwrtypsdfghjklzxcvbnm'*500]",
            "output": null
        },
        {
            "input": "['b'*9999 + 'Y']",
            "output": null
        },
        {
            "input": "['Y'*10000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value. Please write a Python function index_minimum(test_list) for the task.\n```python": [
        {
            "input": "[[('A', 1), ('B', 2), ('C', 3), ('D', 4), ('E', 5), ('F', 6), ('G', 7), ('H', 8), ('I', 9), ('J', 10), ('K', 11), ('L', 12), ('M', 13), ('N', 14), ('O', 15), ('P', 16), ('Q', 17), ('R', 18), ('S', 19), ('T', 20)]]",
            "output": null
        },
        {
            "input": "[[('X1', 1000000000), ('X2', 999999999), ('X3', 999999998), ('X4', 999999997), ('X5', 999999996), ('X6', 999999995), ('X7', 999999994), ('X8', 999999993), ('X9', 999999992), ('X10', 999999991)]]",
            "output": null
        },
        {
            "input": "[[('X', 100), ('Y', 99), ('Z', 98), ('W', 97), ('V', 96), ('U', 95), ('T', 94), ('S', 93), ('R', 92), ('Q', 91)]]",
            "output": null
        },
        {
            "input": "[[('A', 100000), ('B', 99999), ('C', 99998), ('D', 99997), ('E', 99996), ('F', 99995), ('G', 99994), ('H', 99993), ('I', 99992), ('J', 99991)]]",
            "output": null
        },
        {
            "input": "[[('Alpha', 1000), ('Beta', 900), ('Gamma', 800), ('Delta', 700), ('Epsilon', 600), ('Zeta', 500), ('Eta', 400), ('Theta', 300), ('Iota', 200), ('Kappa', 100)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters. Please write a Python function text_match_two_three(text) for the task.\n```python": [
        {
            "input": "['a' * 100000 + 'b' * 3]",
            "output": null
        },
        {
            "input": "['a' * 100000 + 'b' * 2]",
            "output": null
        },
        {
            "input": "['a' * 99999 + 'b' * 3]",
            "output": null
        },
        {
            "input": "['a' * 99999 + 'b' * 2]",
            "output": null
        },
        {
            "input": "['a' * 100000 + 'b']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that counts the number of pairs of integers in a list that xor to an even number. Please write a Python function find_even_pair(A) for the task.\n```python": [
        {
            "input": "[[i for i in range(1, 1000)] + [i for i in range(1000, 1, -1)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 1001)]]",
            "output": null
        },
        {
            "input": "[[i * i for i in range(1, 317)] + [i * i for i in range(317, 1, -1)]]",
            "output": null
        },
        {
            "input": "[[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199]]",
            "output": null
        },
        {
            "input": "[[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that matches a word containing 'z'. Please write a Python function text_match_wordz(text) for the task.\n```python": [
        {
            "input": "['Z'*10000 + 'z']",
            "output": null
        },
        {
            "input": "['a'*9999 + 'z']",
            "output": null
        },
        {
            "input": "['a'*10000]",
            "output": null
        },
        {
            "input": "['Z'*4999 + 'z']",
            "output": null
        },
        {
            "input": "[' '*9999 + 'z']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. Please write a Python function find_solution(a, b, n) for the task.\n```python": [
        {
            "input": "[99991, 99989, 99991*99989 + 1]",
            "output": null
        },
        {
            "input": "[12345, 67890, 987654]",
            "output": null
        },
        {
            "input": "[17, 23, 100000]",
            "output": null
        },
        {
            "input": "[99991, 99989, 999999]",
            "output": null
        },
        {
            "input": "[10001, 10007, 100000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that returns the perimeter of a square given its side length as input. Please write a Python function square_perimeter(a) for the task.\n```python": [
        {
            "input": "[0.0001]",
            "output": null
        },
        {
            "input": "[1.5]",
            "output": null
        },
        {
            "input": "[100.25]",
            "output": null
        },
        {
            "input": "[2.71828]",
            "output": null
        },
        {
            "input": "[3.14159]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing. Please write a Python function max_sum(arr) for the task.\n```python": [
        {
            "input": "[[i**3 - 3*i**2 + 2*i for i in range(1, 1001)]]",
            "output": null
        },
        {
            "input": "[[i**2 - 2*i + 1 for i in range(1, 1001)]]",
            "output": null
        },
        {
            "input": "[sorted([i**4 for i in range(1, 101)], reverse=True)]",
            "output": null
        },
        {
            "input": "[sorted([i**2 for i in range(1, 101)], reverse=True)]",
            "output": null
        },
        {
            "input": "[[i**5 for i in range(1, 101)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n. Please write a Python function dict_filter(dict,n) for the task.\n```python": [
        {
            "input": "[{f'Person {i}': 10**5 - i for i in range(10**5)}, 1]",
            "output": null
        },
        {
            "input": "[{'Person ' + str(i): i for i in range(10**5)}, 1]",
            "output": null
        },
        {
            "input": "[{'Person ' + str(i): 100000 - i for i in range(100000)}, 0]",
            "output": null
        },
        {
            "input": "[{'Person ' + str(i): i for i in range(100000)}, 0]",
            "output": null
        },
        {
            "input": "[{'Person ' + str(i): i % 100 for i in range(100000)}, 0]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list. Please write a Python function insert_element(list,element) for the task.\n```python": [
        {
            "input": "[['short'] * 100000, 'test']",
            "output": null
        },
        {
            "input": "[['word'] * 50000, 'letter']",
            "output": null
        },
        {
            "input": "[['longstring'] * 10000, 'insert']",
            "output": null
        },
        {
            "input": "[['a'] * 10000, 'b']",
            "output": null
        },
        {
            "input": "[[str(i) for i in range(10000)], 'num']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple. Please write a Python function split_two_parts(list1, L) for the task.\n```python": [
        {
            "input": "[['a', 'b']*50000, 25000]",
            "output": null
        },
        {
            "input": "[[None]*100000, 50000]",
            "output": null
        },
        {
            "input": "[list(range(100000)), 50000]",
            "output": null
        },
        {
            "input": "[['x']*50000 + ['y']*50000, 50000]",
            "output": null
        },
        {
            "input": "[['a'] * 100000, 99999]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list. Please write a Python function larg_nnum(list1,n) for the task.\n```python": [
        {
            "input": "[[i * 1.5 for i in range(100000)], 1000]",
            "output": null
        },
        {
            "input": "[[3.14 * i for i in range(100000)], 200]",
            "output": null
        },
        {
            "input": "[[float(i) for i in range(100000)], 100]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 100001)], 100]",
            "output": null
        },
        {
            "input": "[[i for i in range(100000)], 100]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. Please write a Python function list_split(S, step) for the task.\n```python": [
        {
            "input": "[list(range(100000)), 99999]",
            "output": null
        },
        {
            "input": "[list(range(1, 100001)), 50000]",
            "output": null
        },
        {
            "input": "[list(range(0, 100000, 2)), 50000]",
            "output": null
        },
        {
            "input": "[list(range(50000, 100000)), 25000]",
            "output": null
        },
        {
            "input": "[['word'] * 50000, 10000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in a list and element and checks whether all items in the list are equal to the given element. Please write a Python function check_element(list,element) for the task.\n```python": [
        {
            "input": "[['longstring' * 1000] * 100000, 'longstring' * 1000]",
            "output": null
        },
        {
            "input": "[['a'] * 100000, 'a']",
            "output": null
        },
        {
            "input": "[[0] * 99999 + [1], 0]",
            "output": null
        },
        {
            "input": "[[[1, 2]] * 50000, [1, 2]]",
            "output": null
        },
        {
            "input": "[['x'] * 50000 + ['y'] * 50000, 'x']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination. Please write a Python function combinations_colors(l, n) for the task.\n```python": [
        {
            "input": "[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 10]",
            "output": null
        },
        {
            "input": "[['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'], 9]",
            "output": null
        },
        {
            "input": "[['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'], 6]",
            "output": null
        },
        {
            "input": "[['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'], 8]",
            "output": null
        },
        {
            "input": "[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 5]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. Please write a Python function rear_extract(test_list) for the task.\n```python": [
        {
            "input": "[[(i, 'Object'+str(i), i%10) for i in range(1, 100001)]]",
            "output": null
        },
        {
            "input": "[[(i, 'Test'+str(i), i) for i in range(1, 100001)]]",
            "output": null
        },
        {
            "input": "[[(i, 'Entity'+str(i), i*2 % 200) for i in range(1, 100000)]]",
            "output": null
        },
        {
            "input": "[[(i, 'Person'+str(i), i**3 % 500) for i in range(1, 75000)]]",
            "output": null
        },
        {
            "input": "[[(i, 'Person'+str(i), i*5) for i in range(1, 50001)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.) Please write a Python function is_majority(arr, n, x) for the task.\n```python": [
        {
            "input": "[[1] * 49999 + [2] * 2 + [3] * 50000, 100001, 2]",
            "output": null
        },
        {
            "input": "[[1] * 33333 + [2] * 33333 + [3] * 33334, 100000, 2]",
            "output": null
        },
        {
            "input": "[[1.1] * 25000 + [1.2] * 25000 + [1.3] * 25000 + [1.4] * 25000, 100000, 1.3]",
            "output": null
        },
        {
            "input": "[[1] * 25000 + [2] * 25000 + [3] * 25000 + [4] * 25000, 100000, 3]",
            "output": null
        },
        {
            "input": "[[1.1] * 45000 + [2.2] * 55000, 100000, 1.1]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string. Please write a Python function replace_blank(str1,char) for the task.\n```python": [
        {
            "input": "['long string with no spaces' * 5000, ',']",
            "output": null
        },
        {
            "input": "[' ' * 50000 + 'middle' + ' ' * 50000, '*']",
            "output": null
        },
        {
            "input": "[' ' * 99999 + 'end', '*']",
            "output": null
        },
        {
            "input": "['a' * 100000 + ' b' * 50000, '#']",
            "output": null
        },
        {
            "input": "['a' * 100000 + ' ' + 'b' * 100000, '-']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. Please write a Python function re_arrange_array(arr, n) for the task.\n```python": [
        {
            "input": "[[i if i % 2 == 0 else -i for i in range(1, 10001)], 10000]",
            "output": null
        },
        {
            "input": "[[i for i in range(-5000, 5000)], 10000]",
            "output": null
        },
        {
            "input": "[[-1, 1] * 5000, 10000]",
            "output": null
        },
        {
            "input": "[[2]*5000 + [-2]*5000, 10000]",
            "output": null
        },
        {
            "input": "[list(range(-5000, 5000, 2)) + list(range(5000, -5000, -2)), 10000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found). Please write a Python function sequential_search(dlist, item) for the task.\n```python": [
        {
            "input": "[list(range(10**5)), 99999]",
            "output": null
        },
        {
            "input": "[list(range(10**5, 0, -1)), 1]",
            "output": null
        },
        {
            "input": "[[0] * (10**5 - 1) + [1], 1]",
            "output": null
        },
        {
            "input": "[[i for i in range(10**5) if i % 2 == 0 or i % 7 == 0], 99994]",
            "output": null
        },
        {
            "input": "[[i for i in range(10**5) if i % 2 != 0], 99999]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. Please write a Python function get_total_number_of_sequences(m,n) for the task.\n```python": [
        {
            "input": "[11111, 1111]",
            "output": null
        },
        {
            "input": "[33333, 333]",
            "output": null
        },
        {
            "input": "[10000, 1000]",
            "output": null
        },
        {
            "input": "[10000, 999]",
            "output": null
        },
        {
            "input": "[9999, 999]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in the radius and height of a cylinder and returns the the volume. Please write a Python function volume_cylinder(r,h) for the task.\n```python": [
        {
            "input": "[1, 1]",
            "output": null
        },
        {
            "input": "[1000, 1000]",
            "output": null
        },
        {
            "input": "[99999, 1]",
            "output": null
        },
        {
            "input": "[1, 99999]",
            "output": null
        },
        {
            "input": "[99999, 99999]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list. Please write a Python function replace_list(list1,list2) for the task.\n```python": [
        {
            "input": "[[list(range(50000)), list(range(50000, 100000))], [list(range(100000, 150000)), list(range(150000, 200000))]]",
            "output": null
        },
        {
            "input": "[[list(range(50000)), list(range(50000, 100000))], [list(range(100000, 150000))]]",
            "output": null
        },
        {
            "input": "[[list(range(0, 100000, 2))], [list(range(1, 100000, 2))]]",
            "output": null
        },
        {
            "input": "[[list(range(0, 50000, 2)), list(range(2, 50000, 2))], [list(range(1, 50000, 2)), list(range(3, 50000, 2))]]",
            "output": null
        },
        {
            "input": "[list(range(100000)), list(range(100000, 200000))]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in two numbers and returns a tuple with the second number and then the first number. Please write a Python function swap_numbers(a,b) for the task.\n```python": [
        {
            "input": "[0, 0]",
            "output": null
        },
        {
            "input": "[-1, 1]",
            "output": null
        },
        {
            "input": "[3.14159, 2.71828]",
            "output": null
        },
        {
            "input": "[9999, 10000]",
            "output": null
        },
        {
            "input": "[10**4, 10**4 - 1]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples. Please write a Python function division_elements(test_tup1, test_tup2) for the task.\n```python": [
        {
            "input": "[tuple(range(1, 10001)), tuple(range(1, 10001))]",
            "output": null
        },
        {
            "input": "[tuple(range(1, 5001)), tuple(range(1, 5001))]",
            "output": null
        },
        {
            "input": "[(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0), (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)]",
            "output": null
        },
        {
            "input": "[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10**4), (1, 1, 1, 1, 1, 1, 1, 1, 1, 2)]",
            "output": null
        },
        {
            "input": "[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1)]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index. Please write a Python function substract_elements(test_tup1, test_tup2) for the task.\n```python": [
        {
            "input": "[tuple(range(10**5)), tuple(range(10**5))]",
            "output": null
        },
        {
            "input": "[(10**5,)*10000, (10**4,)*10000]",
            "output": null
        },
        {
            "input": "[(10**10,)*1000, (10**9,)*1000]",
            "output": null
        },
        {
            "input": "[(10**3,)*1000, (10**2,)*1000]",
            "output": null
        },
        {
            "input": "[(10**5,)*100, (10**4,)*100]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function that takes two lists and returns true if they have at least one common element. Please write a Python function common_element(list1, list2) for the task.\n```python": [
        {
            "input": "[list('abcdefghij'*1000), list('klmnopqrst'*1000)]",
            "output": null
        },
        {
            "input": "[list('abcde'*2000), list('xyz'*3333)]",
            "output": null
        },
        {
            "input": "[list(range(0, 2500)) * 4, list(range(7500, 10000)) * 4]",
            "output": null
        },
        {
            "input": "[list(range(1, 10000)), list(range(5000, 15000))]",
            "output": null
        },
        {
            "input": "[[x for x in range(10000)], [y for y in range(5000, 10000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to append the given list to the given tuples. Please write a Python function add_lists(test_list, test_tup) for the task.\n```python": [
        {
            "input": "[list(range(99999, -1, -1)), tuple(range(100000, 200000))]",
            "output": null
        },
        {
            "input": "[list(range(100000)), tuple(range(100000, 200000))]",
            "output": null
        },
        {
            "input": "[list(range(50000, 100000)), tuple(range(50000))]",
            "output": null
        },
        {
            "input": "[list(range(25000)) + list(range(25000, 50000)) + list(range(50000, 75000)) + list(range(75000, 100000)), tuple(range(100000, 100100))]",
            "output": null
        },
        {
            "input": "[list(range(50000)) + list(range(50000, 100000)), tuple(range(100000, 100010))]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to apply a given format string to all of the elements in a list. Please write a Python function add_string(list_, string) for the task.\n```python": [
        {
            "input": "[list(range(10000)), 'biglist{0}']",
            "output": null
        },
        {
            "input": "[[i for i in range(10**4)], 'num{0}']",
            "output": null
        },
        {
            "input": "[[i for i in range(10**4) if i % 2 == 0], 'even{0}']",
            "output": null
        },
        {
            "input": "[[i for i in range(10**4) if i % 2 != 0], 'odd{0}']",
            "output": null
        },
        {
            "input": "[[i for i in range(10**4) if i % 3 == 0], 'div3_{0}']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to calculate a dog's age in dog's years. Please write a Python function dog_age(h_age) for the task.\n```python": [
        {
            "input": "[999]",
            "output": null
        },
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[10**5]",
            "output": null
        },
        {
            "input": "[300]",
            "output": null
        },
        {
            "input": "[500]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to calculate the maximum aggregate from the list of tuples. Please write a Python function max_aggregate(stdata) for the task.\n```python": [
        {
            "input": "[[('Student' + str(i), i) for i in range(1, 100001)]]",
            "output": null
        },
        {
            "input": "[[('Name' + str(i), i % 100) for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[('Name', 1)] * 99999 + [('Name', 2)]]",
            "output": null
        },
        {
            "input": "[[('Repeat', 1)] * 100000]",
            "output": null
        },
        {
            "input": "[[('EdgeCase', 1)] * 99999 + [('EdgeCase', 2)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0). Please write a Python function sum_series(n) for the task.\n```python": [
        {
            "input": "[1357]",
            "output": null
        },
        {
            "input": "[1234]",
            "output": null
        },
        {
            "input": "[1010]",
            "output": null
        },
        {
            "input": "[1001]",
            "output": null
        },
        {
            "input": "[1000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to calculate the sum of perrin numbers. Please write a Python function cal_sum(n) for the task.\n```python": [
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[8765]",
            "output": null
        },
        {
            "input": "[7500]",
            "output": null
        },
        {
            "input": "[5000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to calculate the sum of the negative numbers of a given list of numbers. Please write a Python function sum_negativenum(nums) for the task.\n```python": [
        {
            "input": "[[1]*100000 + [-1]*100000]",
            "output": null
        },
        {
            "input": "[[float(i) for i in range(-50000, 50000)]]",
            "output": null
        },
        {
            "input": "[[0.5*i*(-1)**i for i in range(1, 100001)]]",
            "output": null
        },
        {
            "input": "[[i*(-1) for i in range(1, 100001)]]",
            "output": null
        },
        {
            "input": "[[i if i % 11 == 0 else -i for i in range(1, 100001)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to calculate the value of 'a' to the power 'b'. Please write a Python function power(a,b) for the task.\n```python": [
        {
            "input": "[456,789]",
            "output": null
        },
        {
            "input": "[7,777]",
            "output": null
        },
        {
            "input": "[5, 777]",
            "output": null
        },
        {
            "input": "[23, 345]",
            "output": null
        },
        {
            "input": "[20,300]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to calculate whether the matrix is a magic square. Please write a Python function magic_square_test(my_matrix) for the task.\n```python": [
        {
            "input": "[[[10**5 for _ in range(1000)] for _ in range(1000)]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(1000)] for _ in range(1000)]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(500)] for _ in range(500)]]",
            "output": null
        },
        {
            "input": "[[[10**5 for _ in range(100)] for _ in range(100)]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(100)] for _ in range(100)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check if a string is present as a substring in a given list of string values. Please write a Python function find_substring(str1, sub_str) for the task.\n```python": [
        {
            "input": "[['a' * 50000 + 'b' * 50000, 'c' * 50000 + 'd' * 50000], 'b' * 50000]",
            "output": null
        },
        {
            "input": "[['a' * 100000, 'b' * 100000, 'c' * 100000], 'd' * 99999]",
            "output": null
        },
        {
            "input": "[['a' * 100000, 'b' * 100000, 'c' * 100000, 'd' * 100000, 'e' * 100000], 'a' * 99999]",
            "output": null
        },
        {
            "input": "[['a' * 100000, 'b' * 100000, 'c' * 100000], 'a' * 99999]",
            "output": null
        },
        {
            "input": "[['a' * 10000] * 10, 'b' * 9999]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check if a string represents an integer or not. Please write a Python function check_integer(text) for the task.\n```python": [
        {
            "input": "['+' + '1' * 99999]",
            "output": null
        },
        {
            "input": "['1' * 100000]",
            "output": null
        },
        {
            "input": "[' ' * 100000 + '123']",
            "output": null
        },
        {
            "input": "['-0000123']",
            "output": null
        },
        {
            "input": "['+0000123']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check if all the elements in tuple have same data type or not. Please write a Python function check_type(test_tuple) for the task.\n```python": [
        {
            "input": "[(1, 2, 3, 4, 5) * 20000]",
            "output": null
        },
        {
            "input": "[(1, 2, 3) * 33333 + (1,)]",
            "output": null
        },
        {
            "input": "[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]",
            "output": null
        },
        {
            "input": "[(1, 2, 3, 4, 5, 6, 7, 8, 9)]",
            "output": null
        },
        {
            "input": "[(1, 2, 3, 4, 5, '5', 6, 7, 8, 9)]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check if given tuple contains no duplicates. Please write a Python function check_distinct(test_tup) for the task.\n```python": [
        {
            "input": "[tuple(range(10000))]",
            "output": null
        },
        {
            "input": "[tuple(range(9999)) + (9998,)]",
            "output": null
        },
        {
            "input": "[tuple(range(5000)) + tuple(range(5000))]",
            "output": null
        },
        {
            "input": "[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200)]",
            "output": null
        },
        {
            "input": "[(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check if the given number is woodball or not. Please write a Python function is_woodall(x) for the task.\n```python": [
        {
            "input": "[2**50 - 1]",
            "output": null
        },
        {
            "input": "[2**40 - 1]",
            "output": null
        },
        {
            "input": "[2**30 - 1]",
            "output": null
        },
        {
            "input": "[2**20 - 1]",
            "output": null
        },
        {
            "input": "[2**10 - 1]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check whether a list contains the given sublist or not. Please write a Python function is_sublist(l, s) for the task.\n```python": [
        {
            "input": "[[1]*9999 + [2], [1, 1, 1, 2]]",
            "output": null
        },
        {
            "input": "[[2] * 5000 + [3] * 5000, [2, 2, 2, 3, 3, 3]]",
            "output": null
        },
        {
            "input": "[[42] * 5000 + [43] * 5000, [42, 42, 43, 43]]",
            "output": null
        },
        {
            "input": "[list(range(5000)) + [x for x in range(1000, 2000)] + list(range(5000, 10000)), [1500, 1501, 1502, 1503, 1504]]",
            "output": null
        },
        {
            "input": "[list(range(10000)), list(range(8000, 8050))]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check whether all dictionaries in a list are empty or not. Please write a Python function empty_dit(list1) for the task.\n```python": [
        {
            "input": "[[{} for _ in range(9999)] + [{1: 'a'}]]",
            "output": null
        },
        {
            "input": "[[{}] * 10000]",
            "output": null
        },
        {
            "input": "[[{} for _ in range(10000)]]",
            "output": null
        },
        {
            "input": "[[{} for _ in range(999)] * 10]",
            "output": null
        },
        {
            "input": "[[{} for _ in range(5000)] + [{j: j for j in range(5000)}]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check whether an element exists within a tuple. Please write a Python function check_tuplex(tuplex,tuple1) for the task.\n```python": [
        {
            "input": "[('a',)*10000, 'b']",
            "output": null
        },
        {
            "input": "[tuple(range(10000)), 9999]",
            "output": null
        },
        {
            "input": "[('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')*384, 'not_in_tuple']",
            "output": null
        },
        {
            "input": "[('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'), 'z']",
            "output": null
        },
        {
            "input": "[tuple('abcdefghijklmnopqrstuvwxyz' * 384), 'z']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check whether it follows the sequence given in the patterns array. Please write a Python function is_samepatterns(colors, patterns) for the task.\n```python": [
        {
            "input": "[['red', 'green', 'blue', 'yellow', 'pink', 'purple'], ['a', 'b', 'c', 'd', 'e', 'f']]",
            "output": null
        },
        {
            "input": "[['red', 'blue', 'red', 'blue', 'green', 'yellow'], ['a', 'b', 'a', 'b', 'c', 'd']]",
            "output": null
        },
        {
            "input": "[['red', 'blue', 'red', 'blue', 'green', 'green'], ['a', 'b', 'a', 'b', 'c', 'c']]",
            "output": null
        },
        {
            "input": "[['red', 'red', 'red', 'red', 'red', 'red'], ['a', 'a', 'a', 'a', 'a', 'a']]",
            "output": null
        },
        {
            "input": "[['red', 'blue', 'blue', 'green', 'green'], ['a', 'b', 'b', 'c', 'c']]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check whether the entered number is greater than the elements of the given array. Please write a Python function check_greater(arr, number) for the task.\n```python": [
        {
            "input": "[[float(i) for i in range(5000)] + [i for i in range(5000)], 5000.1]",
            "output": null
        },
        {
            "input": "[[1000000] * 10000, 1000001]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 10001)], 10000]",
            "output": null
        },
        {
            "input": "[[i for i in range(10000)], 10000]",
            "output": null
        },
        {
            "input": "[[-i for i in range(10000)], 0]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check whether the given month number contains 31 days or not. Please write a Python function check_monthnumb_number(monthnum2) for the task.\n```python": [
        {
            "input": "[11]",
            "output": null
        },
        {
            "input": "[4]",
            "output": null
        },
        {
            "input": "[9]",
            "output": null
        },
        {
            "input": "[9999 % 12 + 1]",
            "output": null
        },
        {
            "input": "[12]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check whether the given number is undulating or not. Please write a Python function is_undulating(n) for the task.\n```python": [
        {
            "input": "[10101010101010101010]",
            "output": null
        },
        {
            "input": "[20202020202020202020]",
            "output": null
        },
        {
            "input": "[11111111111111111111]",
            "output": null
        },
        {
            "input": "[40404040404040404040]",
            "output": null
        },
        {
            "input": "[30303030303030303030]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to check whether the given string starts and ends with the same character or not. Please write a Python function check_char(string) for the task.\n```python": [
        {
            "input": "[\"m\" * 5000 + \"n\" * 5000]",
            "output": null
        },
        {
            "input": "[\"\".join(chr(97 + i % 26) for i in range(9999)) + \"z\"]",
            "output": null
        },
        {
            "input": "[\"\".join(chr(97 + i % 26) for i in range(5000)) + \"\".join(chr(122 - i % 26) for i in range(5000))]",
            "output": null
        },
        {
            "input": "[\"a\" * 10000]",
            "output": null
        },
        {
            "input": "[\"x\" + \"y\" * 9998 + \"x\"]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to compute the sum of digits of each number of a given list. Please write a Python function sum_of_digits(nums) for the task.\n```python": [
        {
            "input": "[[int('123'*3333), int('456'*3333), int('789'*3333)]]",
            "output": null
        },
        {
            "input": "[[int('1'*4999), int('2'*4999), int('3'*4999)]]",
            "output": null
        },
        {
            "input": "[[int('12345'*2000)]]",
            "output": null
        },
        {
            "input": "[[int('9876543210'*1000)]]",
            "output": null
        },
        {
            "input": "[[int('1234567890'*1000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to concatenate each element of tuple by the delimiter. Please write a Python function concatenate_tuple(test_tup) for the task.\n```python": [
        {
            "input": "[('Very', 'long', 'tuple',) + tuple('x' for _ in range(10000))]",
            "output": null
        },
        {
            "input": "[('Long', 'sequence',) + tuple(str(i) for i in range(10000))]",
            "output": null
        },
        {
            "input": "[('Strings',) + tuple('abcdefghijklmnopqrstuvwxyz' * 100)]",
            "output": null
        },
        {
            "input": "[('Numbers',) + tuple(range(1000))]",
            "output": null
        },
        {
            "input": "[('Mixed',) + tuple('a' if i % 2 == 0 else i for i in range(1000))]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format. Please write a Python function change_date_format(dt) for the task.\n```python": [
        {
            "input": "['2023-03-15']",
            "output": null
        },
        {
            "input": "['2022-02-28']",
            "output": null
        },
        {
            "input": "['1000-01-01']",
            "output": null
        },
        {
            "input": "['2001-02-28']",
            "output": null
        },
        {
            "input": "['2020-12-31']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to convert a given string to a tuple of characters. Please write a Python function string_to_tuple(str1) for the task.\n```python": [
        {
            "input": "[''.join(['a', 'b', 'c', '1', '2', '3', '!', '@', '#', ' '] * 5000)]",
            "output": null
        },
        {
            "input": "[''.join(['a', 'b', 'c', '1', '2', '3', '!', '@', '#', ' '] * 2000) + 'end']",
            "output": null
        },
        {
            "input": "[''.join(['\ud83d\ude00', '\ud83d\ude03', '\ud83d\ude04', '\ud83d\ude01', '\ud83d\ude06', '\ud83d\ude05', '\ud83d\ude02', '\ud83e\udd23', '\ud83d\ude0a', '\ud83d\ude07', '\ud83d\ude42', '\ud83d\ude43', '\ud83d\ude09', '\ud83d\ude0c', '\ud83d\ude0d', '\ud83e\udd70', '\ud83d\ude18', '\ud83d\ude17', '\ud83d\ude19', '\ud83d\ude1a', '\ud83d\ude0b', '\ud83d\ude1b', '\ud83d\ude1c', '\ud83d\ude1d', '\ud83e\udd2a', '\ud83e\udd28', '\ud83e\uddd0', '\ud83e\udd13', '\ud83d\ude0e', '\ud83e\udd29', '\ud83e\udd73', '\ud83d\ude0f', '\ud83d\ude12', '\ud83d\ude1e', '\ud83d\ude14', '\ud83d\ude1f', '\ud83d\ude15', '\ud83d\ude41', '\ud83d\ude23', '\ud83d\ude16', '\ud83d\ude2b', '\ud83d\ude29', '\ud83e\udd7a', '\ud83d\ude22', '\ud83d\ude2d', '\ud83d\ude24', '\ud83d\ude20', '\ud83d\ude21', '\ud83e\udd2c', '\ud83e\udd2f', '\ud83d\ude33', '\ud83e\udd75', '\ud83e\udd76', '\ud83d\ude31', '\ud83d\ude28', '\ud83d\ude30', '\ud83d\ude25', '\ud83d\ude13', '\ud83e\udd17', '\ud83e\udd14', '\ud83e\udd2d', '\ud83e\udd2b', '\ud83e\udd25', '\ud83d\ude36', '\ud83d\ude10', '\ud83d\ude11', '\ud83d\ude2c', '\ud83d\ude44', '\ud83d\ude2f', '\ud83d\ude26', '\ud83d\ude27', '\ud83d\ude2e', '\ud83d\ude32', '\ud83e\udd71', '\ud83d\ude34', '\ud83e\udd24', '\ud83d\ude2a', '\ud83d\ude35', '\ud83e\udd10', '\ud83e\udd74', '\ud83e\udd22', '\ud83e\udd2e', '\ud83e\udd27', '\ud83d\ude37', '\ud83e\udd12', '\ud83e\udd15', '\ud83e\udd11', '\ud83e\udd20', '\ud83d\ude08', '\ud83d\udc7f', '\ud83d\udc79', '\ud83d\udc7a', '\ud83e\udd21', '\ud83d\udca9', '\ud83d\udc7b', '\ud83d\udc80', '\u2620\ufe0f', '\ud83d\udc7d', '\ud83d\udc7e', '\ud83e\udd16', '\ud83c\udf83', '\ud83d\ude3a', '\ud83d\ude38', '\ud83d\ude39', '\ud83d\ude3b', '\ud83d\ude3c', '\ud83d\ude3d', '\ud83d\ude40', '\ud83d\ude3f', '\ud83d\ude3e'] * 100)]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(65, 91)) * 500]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(10000))]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to convert a given tuple of positive integers into a single integer. Please write a Python function tuple_to_int(nums) for the task.\n```python": [
        {
            "input": "[[int(x) for x in '9876543210' * 400]]",
            "output": null
        },
        {
            "input": "[[int(x) for x in '9' * 3333]]",
            "output": null
        },
        {
            "input": "[[int(x) for x in '1' * 2000]]",
            "output": null
        },
        {
            "input": "[[int(x) for x in '31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679'] * 10]",
            "output": null
        },
        {
            "input": "[[9] * 1000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to convert a snake case string to camel case string. Please write a Python function snake_to_camel(word) for the task.\n```python": [
        {
            "input": "['_'.join(['extremelylongword' + str(i) for i in range(5000)])]",
            "output": null
        },
        {
            "input": "['_'.join(['a' * 100 for i in range(1000)])]",
            "output": null
        },
        {
            "input": "['_'.join(['b' * 200 for i in range(500)])]",
            "output": null
        },
        {
            "input": "['_'.join(['c' * 300 for i in range(333)])]",
            "output": null
        },
        {
            "input": "['_'.join(['e' * 500 for i in range(200)])]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to convert a string to a list of strings split on the space character. Please write a Python function string_to_list(string) for the task.\n```python": [
        {
            "input": "[' '.join(['a' * i for i in range(1, 10001)])]",
            "output": null
        },
        {
            "input": "[' '.join(['word' for _ in range(100000)])]",
            "output": null
        },
        {
            "input": "[' '.join(['word' + str(i) for i in range(50000)])]",
            "output": null
        },
        {
            "input": "[' '.join(['word' + str(i) for i in range(25000)])]",
            "output": null
        },
        {
            "input": "[' '.join(['1234567890' for _ in range(10000)])]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to convert a tuple to a string. Please write a Python function tup_string(tup1) for the task.\n```python": [
        {
            "input": "[('a', 'b', 'c', 'd') * 25000]",
            "output": null
        },
        {
            "input": "[('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j') * 10000]",
            "output": null
        },
        {
            "input": "[('a',) * 100000]",
            "output": null
        },
        {
            "input": "[('x', 'y', 'z') * 33333]",
            "output": null
        },
        {
            "input": "[('p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z') * 9090]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to convert all possible convertible elements in a list of lists to floats. Please write a Python function list_to_float(test_list) for the task.\n```python": [
        {
            "input": "[ [[str(i), str(i**0.5)] for i in range(1, 10001)] ]",
            "output": null
        },
        {
            "input": "[ [[str(i), str(i**3)] for i in range(1, 10001)] ]",
            "output": null
        },
        {
            "input": "[ [[str(i), str(i * -1)] for i in range(1, 10001)] ]",
            "output": null
        },
        {
            "input": "[ [[str(-i), str(i**2)] for i in range(1, 5001)] ]",
            "output": null
        },
        {
            "input": "[ [[str(i), str(i/2)] for i in range(1, 5001)] ]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to convert more than one list to nested dictionary. Please write a Python function convert_list_dictionary(l1, l2, l3) for the task.\n```python": [
        {
            "input": "[['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]",
            "output": null
        },
        {
            "input": "[['M1', 'M2', 'M3', 'M4', 'M5', 'M6', 'M7', 'M8', 'M9', 'M10'], ['Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa'], [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]]",
            "output": null
        },
        {
            "input": "[['D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 'D10'], ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]",
            "output": null
        },
        {
            "input": "[['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10'], ['Name1', 'Name2', 'Name3', 'Name4', 'Name5', 'Name6', 'Name7', 'Name8', 'Name9', 'Name10'], [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]]",
            "output": null
        },
        {
            "input": "[['D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 'D10'], ['X', 'Y', 'Z', 'W', 'V', 'U', 'T', 'S', 'R', 'Q'], [11, 22, 33, 44, 55, 66, 77, 88, 99, 110]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros. Please write a Python function decimal_to_binary(n) for the task.\n```python": [
        {
            "input": "[2**90]",
            "output": null
        },
        {
            "input": "[2**80]",
            "output": null
        },
        {
            "input": "[2**70]",
            "output": null
        },
        {
            "input": "[2**60]",
            "output": null
        },
        {
            "input": "[2**50]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to count bidirectional tuple pairs. Please write a Python function count_bidirectional(test_list) for the task.\n```python": [
        {
            "input": "[[[i, i + 1] for i in range(1, 2500)] + [[i + 1, i] for i in range(1, 2500)] + [[i, i + 2] for i in range(2500, 5000, 2)] + [[i + 2, i] for i in range(2500, 5000, 2)]]",
            "output": null
        },
        {
            "input": "[[[i, i + 2] for i in range(1, 10000, 3)] + [[i + 2, i] for i in range(1, 10000, 3)]]",
            "output": null
        },
        {
            "input": "[[[x, x + 1] for x in range(1, 5001, 2)] + [[x + 1, x] for x in range(1, 5001, 2)] + [[5000, 1]]]",
            "output": null
        },
        {
            "input": "[[[i, i + 2] for i in range(1, 5000, 2)] + [[i + 2, i] for i in range(1, 5000, 2)]]",
            "output": null
        },
        {
            "input": "[[[i, i + 3] for i in range(1, 3333, 3)] + [[i + 3, i] for i in range(1, 3333, 3)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to count number items that are identical in the same position of three given lists. Please write a Python function count_samepair(list1,list2,list3) for the task.\n```python": [
        {
            "input": "[[i for i in range(100000)], [i for i in range(100000)], [i for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(99999)] + [99998], [i for i in range(99999)] + [99998], [i for i in range(99999)] + [99998]]",
            "output": null
        },
        {
            "input": "[[i for i in range(50000)] + [i for i in range(50000)], [i for i in range(50000)] + [i for i in range(50000)], [i for i in range(50000)] + [i for i in range(50000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(50000)]*2, [i for i in range(50000)]*2, [i for i in range(50000)]*2]",
            "output": null
        },
        {
            "input": "[[1 if i % 3 == 0 else 0 for i in range(100000)], [1 if i % 3 == 0 else 0 for i in range(100000)], [1 if i % 3 == 0 else 0 for i in range(100000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive). Please write a Python function count_char_position(str1) for the task.\n```python": [
        {
            "input": "[''.join(chr(65 + (i % 26)) for i in range(100000))]",
            "output": null
        },
        {
            "input": "[''.join(chr(97 + (i % 26)) if i % 3 == 0 else chr(65 + (i % 26)) for i in range(100000))]",
            "output": null
        },
        {
            "input": "[''.join(chr(97 + (i % 26)) for i in range(25000)) + ''.join(chr(65 + (i % 26)) for i in range(25000)) + ''.join(chr(97 + (i % 26)) for i in range(25000)) + ''.join(chr(65 + (i % 26)) for i in range(25000))]",
            "output": null
        },
        {
            "input": "[''.join(chr(97 + (i % 26)) for i in range(50000)) + ''.join(chr(65 + (i % 26)) for i in range(50000))]",
            "output": null
        },
        {
            "input": "[''.join(chr(97 + (i % 26)) if i % 2 == 0 else chr(65 + (i % 26)) for i in range(100000))]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to count the number of occurence of the string 'std' in a given string. Please write a Python function count_occurance(s) for the task.\n```python": [
        {
            "input": "['std' * 25000 + 'a' * 50000 + 'std' * 25000]",
            "output": null
        },
        {
            "input": "['a' * 33333 + 'std' * 33334 + 'b' * 33333]",
            "output": null
        },
        {
            "input": "['a' * 33333 + 'std' * 33333 + 'b' * 33334]",
            "output": null
        },
        {
            "input": "['s' * 10**5]",
            "output": null
        },
        {
            "input": "['' + 'std' * 33333 + 'std']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to count the number of occurrences of a number in a given list. Please write a Python function frequency(a,x) for the task.\n```python": [
        {
            "input": "[[1]*100000, 1]",
            "output": null
        },
        {
            "input": "[[1] * 50000 + [2] * 50000, 2]",
            "output": null
        },
        {
            "input": "[[2]*50000 + [3]*50000, 3]",
            "output": null
        },
        {
            "input": "[[0]*50000 + [1]*50000, 0]",
            "output": null
        },
        {
            "input": "[[1, 1, 1, 2, 2, 2, 3, 3, 3] * 11111 + [4], 2]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to count the number of sublists containing a particular element. Please write a Python function count_element_in_list(list1, x) for the task.\n```python": [
        {
            "input": "[[[i for i in range(10000)], [i for i in range(5000, 15000)], [i for i in range(10000, 20000)]], 15000]",
            "output": null
        },
        {
            "input": "[[[i for i in range(100)] for _ in range(100)], 99]",
            "output": null
        },
        {
            "input": "[[[i for i in range(1000)], [i for i in range(1000, 2000)], [i for i in range(2000, 3000)], [i for i in range(3000, 4000)], [i for i in range(4000, 5000)], [i for i in range(5000, 6000)], [i for i in range(6000, 7000)], [i for i in range(7000, 8000)], [i for i in range(8000, 9000)], [i for i in range(9000, 10000)]], 7500]",
            "output": null
        },
        {
            "input": "[[[1, 2, 3]]*1000, 2]",
            "output": null
        },
        {
            "input": "[[[i for i in range(1000)], [i for i in range(500, 1500)], [i for i in range(1000, 2000)]], 1500]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to count the total number of characters in a string. Please write a Python function count_charac(str1) for the task.\n```python": [
        {
            "input": "['\ud83d\ude00' * 50000 + '\ud83d\ude03' * 50000]",
            "output": null
        },
        {
            "input": "['Lorem ipsum dolor sit amet, consectetur adipiscing elit. ' * 2048]",
            "output": null
        },
        {
            "input": "['!@#$%^&*()_+-=~`' * 6666]",
            "output": null
        },
        {
            "input": "['1234567890' * 10000]",
            "output": null
        },
        {
            "input": "[' ' * 100000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to create the next bigger number by rearranging the digits of a given number. Please write a Python function rearrange_bigger(n) for the task.\n```python": [
        {
            "input": "[999999999999999988888888888888887777777777777777666666666666666555555555555555444444444444444333333333333333222222222222222111111111111111]",
            "output": null
        },
        {
            "input": "[999999999999888888888777777777666666666555555555444444444333333333222222222111111110]",
            "output": null
        },
        {
            "input": "[123456789098765432112345678909876543211234567890987654321]",
            "output": null
        },
        {
            "input": "[54321098765432109876543210]",
            "output": null
        },
        {
            "input": "[123450987650123450987650123450987650]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to determine if the sum of the divisors of two integers are the same. Please write a Python function are_equivalent(num1, num2) for the task.\n```python": [
        {
            "input": "[8128, 33550336]",
            "output": null
        },
        {
            "input": "[8191, 131071]",
            "output": null
        },
        {
            "input": "[2310, 30030]",
            "output": null
        },
        {
            "input": "[9999, 19998]",
            "output": null
        },
        {
            "input": "[9991, 19982]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to drop empty items from a given dictionary. Please write a Python function drop_empty(dict1) for the task.\n```python": [
        {
            "input": "[{'key' + str(i): (None if i % 20 == 0 else 'value' + str(i)) for i in range(10000)}]",
            "output": null
        },
        {
            "input": "[{'k' + str(i): (None if i % 10 == 0 else 'v' + str(i)) for i in range(9999)}]",
            "output": null
        },
        {
            "input": "[{'key' + str(i): (None if i % 2 == 0 else 'value' + str(i)) for i in range(10000)}]",
            "output": null
        },
        {
            "input": "[{'key' + str(i): (None if i % 3 == 0 else 'value' + str(i)) for i in range(7500)}]",
            "output": null
        },
        {
            "input": "[{'key' + str(i): (None if i % 15 == 0 else 'value' + str(i)) for i in range(5000)}]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to extract only the rear index element of each string in the given tuple. Please write a Python function extract_rear(test_tuple) for the task.\n```python": [
        {
            "input": "[('a',)*1000]",
            "output": null
        },
        {
            "input": "[('1234567890',)*100]",
            "output": null
        },
        {
            "input": "[('p'*500, 'q'*500, 'r'*500, 's'*500, 't'*500, 'u'*500, 'v'*500, 'w'*500, 'x'*500, 'y'*500)]",
            "output": null
        },
        {
            "input": "[('a'*100, 'b'*200, 'c'*300, 'd'*400, 'e'*500, 'f'*600, 'g'*700, 'h'*800, 'i'*900, 'j'*1000)]",
            "output": null
        },
        {
            "input": "[('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to extract specified size of strings from a given list of string values. Please write a Python function extract_string(str, l) for the task.\n```python": [
        {
            "input": "[['x'*i for i in range(1, 10001)], 10000]",
            "output": null
        },
        {
            "input": "[['a'*i for i in range(1, 10001)], 500]",
            "output": null
        },
        {
            "input": "[['1'*i for i in range(1, 10001)], 5000]",
            "output": null
        },
        {
            "input": "[['a'*i for i in range(1, 10001)], 9999]",
            "output": null
        },
        {
            "input": "[['a'*i for i in range(1, 5000)] + ['b'*i for i in range(5000, 10001)], 10000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to extract the elementwise and tuples from the given two tuples. Please write a Python function and_tuples(test_tup1, test_tup2) for the task.\n```python": [
        {
            "input": "[(0, 1, 2, 3), (0, 1, 2, 3)]",
            "output": null
        },
        {
            "input": "[(10**4, 10**4, 10**4, 10**4), (10**4, 10**4, 10**4, 10**4)]",
            "output": null
        },
        {
            "input": "[(10**3, 10**3, 10**3, 10**3), (10**3, 10**3, 10**3, 10**3)]",
            "output": null
        },
        {
            "input": "[(2**35, 2**36, 2**37, 2**38), (2**34, 2**35, 2**36, 2**37)]",
            "output": null
        },
        {
            "input": "[(2**30, 2**31, 2**32, 2**33), (2**29, 2**30, 2**31, 2**32)]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to extract the nth element from a given list of tuples. Please write a Python function extract_nth_element(list1, n) for the task.\n```python": [
        {
            "input": "[[(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)] * 10000, 9]",
            "output": null
        },
        {
            "input": "[[(i, str(i), chr(65 + i % 26), i % 100, i // 100) for i in range(10000)], 4]",
            "output": null
        },
        {
            "input": "[[(i, i+1, i+2, i+3, i+4) for i in range(10000)], 2]",
            "output": null
        },
        {
            "input": "[[(i, chr(65 + i % 26), i % 100, i // 100) for i in range(10000)], 3]",
            "output": null
        },
        {
            "input": "[[(i, chr(65 + i % 26)) for i in range(10000)], 1]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to extract the number of unique tuples in the given list. Please write a Python function extract_freq(test_list) for the task.\n```python": [
        {
            "input": "[[[i, -i] for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[[i, (i+1)//2] for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[[i, i+2] if i % 3 == 0 else [i+2, i] for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[[1, 2]] * 5000 + [[2, 3]] * 5000]",
            "output": null
        },
        {
            "input": "[[[i, i+1] if i % 2 == 0 else [i+1, i] for i in range(1, 5001)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to filter odd numbers. Please write a Python function filter_oddnumbers(nums) for the task.\n```python": [
        {
            "input": "[[i % 3 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(-5000, 5000)]]",
            "output": null
        },
        {
            "input": "[[random.randint(-10000, 10000) for _ in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i * (-1)**i for i in range(1, 10000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find all possible combinations of the elements of a given list. Please write a Python function combinations_list(list1) for the task.\n```python": [
        {
            "input": "[['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']]",
            "output": null
        },
        {
            "input": "[['dog', 'cat', 'mouse', 'hamster', 'rabbit', 'ferret', 'parrot', 'canary', 'goldfish', 'guppy', 'turtle', 'frog']]",
            "output": null
        },
        {
            "input": "[['hydrogen', 'helium', 'lithium', 'beryllium', 'boron', 'carbon', 'nitrogen', 'oxygen', 'fluorine', 'neon']]",
            "output": null
        },
        {
            "input": "[['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']]",
            "output": null
        },
        {
            "input": "[['python', 'java', 'c++', 'c#', 'javascript', 'ruby', 'perl', 'go', 'swift', 'kotlin']]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find cubes of individual elements in a list. Please write a Python function cube_nums(nums) for the task.\n```python": [
        {
            "input": "[[i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10**4)]]",
            "output": null
        },
        {
            "input": "[[i * (-1)**i for i in range(5000)]]",
            "output": null
        },
        {
            "input": "[[i**2 for i in range(1000)]]",
            "output": null
        },
        {
            "input": "[[-i for i in range(1000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find minimum of three numbers. Please write a Python function min_of_three(a,b,c) for the task.\n```python": [
        {
            "input": "[float('inf'), 1, 2]",
            "output": null
        },
        {
            "input": "[float('inf'), float('-inf'), 0]",
            "output": null
        },
        {
            "input": "[1.5, 2.5, 1.4]",
            "output": null
        },
        {
            "input": "[1e-10, 1e-9, 1e-11]",
            "output": null
        },
        {
            "input": "[3.14159, 2.71828, 1.61803]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find nth centered hexagonal number. Please write a Python function centered_hexagonal_number(n) for the task.\n```python": [
        {
            "input": "[34567]",
            "output": null
        },
        {
            "input": "[56789]",
            "output": null
        },
        {
            "input": "[67890]",
            "output": null
        },
        {
            "input": "[45678]",
            "output": null
        },
        {
            "input": "[23456]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find number of lists present in the given tuple. Please write a Python function find_lists(Input) for the task.\n```python": [
        {
            "input": "[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]",
            "output": null
        },
        {
            "input": "[[[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 0], [1, 2]]]]]",
            "output": null
        },
        {
            "input": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]]]",
            "output": null
        },
        {
            "input": "[[[1, 2], [3, 4], [5, 6], [7, 8], [9, 0]]]",
            "output": null
        },
        {
            "input": "[[[1, 2, 3, 4], [5, 6, 7, 8], [9, 0, 1, 2]]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the Eulerian number a(n, m). Please write a Python function eulerian_num(n, m) for the task.\n```python": [
        {
            "input": "[25, 12]",
            "output": null
        },
        {
            "input": "[100, 4]",
            "output": null
        },
        {
            "input": "[100, 96]",
            "output": null
        },
        {
            "input": "[20, 10]",
            "output": null
        },
        {
            "input": "[100, 3]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the area of a rectangle. Please write a Python function rectangle_area(l,b) for the task.\n```python": [
        {
            "input": "[10000, 0.0001]",
            "output": null
        },
        {
            "input": "[1000, 0.001]",
            "output": null
        },
        {
            "input": "[0.0001, 10000]",
            "output": null
        },
        {
            "input": "[0.001, 1000]",
            "output": null
        },
        {
            "input": "[9999, 9999]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the ascii value of a character. Please write a Python function ascii_value(k) for the task.\n```python": [
        {
            "input": "['\\u2603']",
            "output": null
        },
        {
            "input": "['\\uFFFF']",
            "output": null
        },
        {
            "input": "['\\U0010FFFF']",
            "output": null
        },
        {
            "input": "['\\x80']",
            "output": null
        },
        {
            "input": "['\\xFF']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the circumference of a circle. Please write a Python function circle_circumference(r) for the task.\n```python": [
        {
            "input": "[1]",
            "output": null
        },
        {
            "input": "[100]",
            "output": null
        },
        {
            "input": "[99999]",
            "output": null
        },
        {
            "input": "[12345]",
            "output": null
        },
        {
            "input": "[54321]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the closest smaller number than n. Please write a Python function closest_num(N) for the task.\n```python": [
        {
            "input": "[2147483647]",
            "output": null
        },
        {
            "input": "[123456]",
            "output": null
        },
        {
            "input": "[99998]",
            "output": null
        },
        {
            "input": "[987654]",
            "output": null
        },
        {
            "input": "[500000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the common elements in given nested lists. Please write a Python function common_in_nested_lists(nestedlist) for the task.\n```python": [
        {
            "input": "[[[i for i in range(1, 100001)], [i for i in range(2, 100002)], [i for i in range(3, 100003)]]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(100000)], [i for i in range(50000, 150000)], [i for i in range(100000, 200000)]]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(50000)], [i for i in range(25000, 75000)], [i for i in range(50000, 100000)]]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(0, 100000, 3)], [i for i in range(50000, 150000, 3)], [i for i in range(100000, 200000, 3)]]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(0, 100000, 5)], [i for i in range(50000, 150000, 5)], [i for i in range(100000, 200000, 5)]]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. Please write a Python function count_binary_seq(n) for the task.\n```python": [
        {
            "input": "[100000]",
            "output": null
        },
        {
            "input": "[99999]",
            "output": null
        },
        {
            "input": "[75000]",
            "output": null
        },
        {
            "input": "[54321]",
            "output": null
        },
        {
            "input": "[50000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the depth of a dictionary. Please write a Python function dict_depth(d) for the task.\n```python": [
        {
            "input": "[{'first': {str(i): {} for i in range(1000)}}]",
            "output": null
        },
        {
            "input": "[{'root': {'branch1': {'subbranch1': {'leaf1': {}, 'leaf2': {str(i): {} for i in range(25)}}, 'subbranch2': {'leaf1': {}, 'leaf2': {str(i): {} for i in range(25)}}}, 'branch2': {'subbranch1': {'leaf1': {}, 'leaf2': {str(i): {} for i in range(25)}}, 'subbranch2': {'leaf1': {}, 'leaf2': {str(i): {} for i in range(25)}}}}}]",
            "output": null
        },
        {
            "input": "[{'root': {'branch1': {'subbranch1': {'leaf1': {str(i): {} for i in range(10)}, 'leaf2': {str(i): {} for i in range(10)}}, 'subbranch2': {'leaf3': {str(i): {} for i in range(10)}, 'leaf4': {str(i): {} for i in range(10)}}}, 'branch2': {'subbranch3': {'leaf5': {str(i): {} for i in range(10)}, 'leaf6': {str(i): {} for i in range(10)}}, 'subbranch4': {'leaf7': {str(i): {} for i in range(10)}, 'leaf8': {str(i): {} for i in range(10)}}}}}]",
            "output": null
        },
        {
            "input": "[{'level1': {'level2': {'level3': {'level4': {str(i): {} for i in range(100)}}}}}]",
            "output": null
        },
        {
            "input": "[{'outer': {'inner': {'innermost': {str(i): {} for i in range(100)}}}}]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the directrix of a parabola. Please write a Python function parabola_directrix(a, b, c) for the task.\n```python": [
        {
            "input": "[10000, 20000, 30000]",
            "output": null
        },
        {
            "input": "[1234, 5678, 91011]",
            "output": null
        },
        {
            "input": "[9999, 8888, 7777]",
            "output": null
        },
        {
            "input": "[1000, 2000, 3000]",
            "output": null
        },
        {
            "input": "[int(1e4), int(1e4-1), int(1e4-2)]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the first adverb and their positions in a given sentence. Please write a Python function find_adverb_position(text) for the task.\n```python": [
        {
            "input": "['the student answered the questions correctly and quickly']",
            "output": null
        },
        {
            "input": "['the engineer designed the bridge efficiently and safely']",
            "output": null
        },
        {
            "input": "['the experiment was conducted meticulously and thoroughly']",
            "output": null
        },
        {
            "input": "['the artist painted the portrait beautifully and intricately']",
            "output": null
        },
        {
            "input": "['the doctor treated the patient carefully and compassionately']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the intersection of two arrays. Please write a Python function intersection_array(array_nums1,array_nums2) for the task.\n```python": [
        {
            "input": "[[i for i in range(1, 10000)], [j for j in range(5000, 15000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 10000)], [i for i in range(5000, 15000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 10000, 2)], [j for j in range(2, 10001, 2)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 9999)], [j for j in range(1, 9999) if j % 2 == 0]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 5000)], [j for j in range(2500, 7500)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the item with maximum frequency in a given list. Please write a Python function max_occurrences(nums) for the task.\n```python": [
        {
            "input": "[[float(i) for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[str(i) for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(100000) if i % 2 == 0] + [i for i in range(100000) if i % 2 != 0]]",
            "output": null
        },
        {
            "input": "[[i for i in range(100000) if i % 3 == 0] + [i for i in range(100000) if i % 3 != 0]]",
            "output": null
        },
        {
            "input": "[list(range(100000)) + [99999]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the kth element in the given array using 1-based indexing. Please write a Python function kth_element(arr, k) for the task.\n```python": [
        {
            "input": "[[i // 100 for i in range(10000)], 9999]",
            "output": null
        },
        {
            "input": "[sorted([i for i in range(5000, 0, -1)]), 2500]",
            "output": null
        },
        {
            "input": "[[3]*1000 + [1]*1000 + [2]*1000, 1500]",
            "output": null
        },
        {
            "input": "[list(reversed(range(1, 1001))), 1000]",
            "output": null
        },
        {
            "input": "[[i for i in range(1000, 0, -1)], 1]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times. Please write a Python function max_sub_array_sum_repeated(a, n, k) for the task.\n```python": [
        {
            "input": "[[i % 100 - 50 for i in range(100000)], 100000, 100]",
            "output": null
        },
        {
            "input": "[[i % 200 - 100 for i in range(100000)], 100000, 20]",
            "output": null
        },
        {
            "input": "[[i % 100 - 50 for i in range(100000)], 100000, 10]",
            "output": null
        },
        {
            "input": "[[1, -1] * 50000 + [2, -2] * 50000, 200000, 3]",
            "output": null
        },
        {
            "input": "[[(-1)**i * i for i in range(1, 100001)], 100000, 5]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the lateral surface area of a cube given its side length. Please write a Python function lateralsurface_cube(l) for the task.\n```python": [
        {
            "input": "[100]",
            "output": null
        },
        {
            "input": "[0.1]",
            "output": null
        },
        {
            "input": "[1e-10]",
            "output": null
        },
        {
            "input": "[1e5]",
            "output": null
        },
        {
            "input": "[99999.999]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the lateral surface area of a cylinder. Please write a Python function lateralsuface_cylinder(r,h) for the task.\n```python": [
        {
            "input": "[1, 1]",
            "output": null
        },
        {
            "input": "[99999, 99999]",
            "output": null
        },
        {
            "input": "[12345, 67890]",
            "output": null
        },
        {
            "input": "[10**5, 10**5]",
            "output": null
        },
        {
            "input": "[10**4, 10**4]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the length of the longest palindromic subsequence in the given string. Please write a Python function lps(str) for the task.\n```python": [
        {
            "input": "[''.join(['A' if i % 10 == 0 else 'B' if i % 10 == 1 else 'C' if i % 10 == 2 else 'D' if i % 10 == 3 else 'E' if i % 10 == 4 else 'F' if i % 10 == 5 else 'G' if i % 10 == 6 else 'H' if i % 10 == 7 else 'I' if i % 10 == 8 else 'J' for i in range(2000)])]",
            "output": null
        },
        {
            "input": "[''.join(['X' if i % 7 == 0 else 'Y' if i % 7 == 1 else 'Z' if i % 7 == 2 else 'W' if i % 7 == 3 else 'V' if i % 7 == 4 else 'U' if i % 7 == 5 else 'T' for i in range(2000)])]",
            "output": null
        },
        {
            "input": "[''.join(['A' if i % 5 == 0 else 'B' if i % 5 == 1 else 'C' if i % 5 == 2 else 'D' if i % 5 == 3 else 'E' for i in range(2000)])]",
            "output": null
        },
        {
            "input": "['AB' * 1000]",
            "output": null
        },
        {
            "input": "[''.join(['M' if i % 2 == 0 else 'N' for i in range(2000)])]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the list of maximum length in a list of lists. Please write a Python function max_length(list1) for the task.\n```python": [
        {
            "input": "[[[i for i in range(99999)], [i for i in range(88888)], [i for i in range(77777)], [i for i in range(66666)], [i for i in range(55555)], [i for i in range(44444)], [i for i in range(33333)], [i for i in range(22222)], [i for i in range(11111)]]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(99999)], [i for i in range(99998)], [i for i in range(99997)], [i for i in range(99996)]]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(50000)], [i for i in range(40000)], [i for i in range(30000)], [i for i in range(20000)], [i for i in range(10000)]]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(10**5)], [i for i in range(10**4)], [i for i in range(10**3)], [i for i in range(10**2)], [i for i in range(10)]]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(10**4)], [i for i in range(10**3)], [i for i in range(10**2)], [1, 2, 3]]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list. Please write a Python function max_product_tuple(list1) for the task.\n```python": [
        {
            "input": "[[(i, i**0.5) for i in range(1, 10**4)]]",
            "output": null
        },
        {
            "input": "[[(i, 0.1*i) for i in range(1, 10**4)]]",
            "output": null
        },
        {
            "input": "[[(i, float(i)**0.5) for i in range(1, 10**4)]]",
            "output": null
        },
        {
            "input": "[[(i, float(i)) for i in range(1, 10**4)]]",
            "output": null
        },
        {
            "input": "[[(i, 1/i) for i in range(1, 10**4) if i != 0]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the maximum difference between available pairs in the given tuple list. Please write a Python function max_difference(test_list) for the task.\n```python": [
        {
            "input": "[[(10**5, -10**5) for _ in range(10**5)]]",
            "output": null
        },
        {
            "input": "[[(i, i*10**5) for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[(i, -i) for i in range(50000)] + [(i, i+1) for i in range(50000)]]",
            "output": null
        },
        {
            "input": "[[(-i, i) for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[(i, i+10**5) for i in range(10**5)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. Please write a Python function find_length(string) for the task.\n```python": [
        {
            "input": "['0000000000000000000000000000000000000000000000000000000000000000' * 5000]",
            "output": null
        },
        {
            "input": "['1111111111111111111111111111111111111111111111111111111111111111' * 5000]",
            "output": null
        },
        {
            "input": "['1101101101101101101101101101101101101101101101101101101101101101' * 5000]",
            "output": null
        },
        {
            "input": "['1010101010101010101010101010101010101010101010101010101010101010' * 5000]",
            "output": null
        },
        {
            "input": "['0' * 50000 + '1' * 50000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. Please write a Python function max_product(arr) for the task.\n```python": [
        {
            "input": "[[i for i in range(1, 10001) if i % 3 == 0]]",
            "output": null
        },
        {
            "input": "[[10**i for i in range(1, 100)]]",
            "output": null
        },
        {
            "input": "[[1, 2] * 5000]",
            "output": null
        },
        {
            "input": "[[i if i % 2 == 0 else -i for i in range(1, 1001)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1000, 0, -1)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the maximum product subarray of the given array. Please write a Python function max_subarray_product(arr) for the task.\n```python": [
        {
            "input": "[[10**4] * 10000]",
            "output": null
        },
        {
            "input": "[[0] * 9999 + [1]]",
            "output": null
        },
        {
            "input": "[[1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1]]",
            "output": null
        },
        {
            "input": "[[2, 3, -2, 4, -1, 2, 1, -5, 4, 3, -2, 4, -1, 2, 1, -5, 4]]",
            "output": null
        },
        {
            "input": "[[-10**4, 10**4, -10**4, 10**4, -10**4, 10**4, -10**4, 10**4, -10**4, 10**4]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i . Please write a Python function max_sum_increasing_subseq(a, n, index, k) for the task.\n```python": [
        {
            "input": "[[10, 20, 30, 40, 50, 60, 70, 80, 90, 100] * 100, 1000, 499, 999]",
            "output": null
        },
        {
            "input": "[[1000 - i for i in range(1000)], 1000, 499, 999]",
            "output": null
        },
        {
            "input": "[[2**i for i in range(20)], 20, 10, 19]",
            "output": null
        },
        {
            "input": "[[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3, 2, 3, 8, 4], 20, 5, 15]",
            "output": null
        },
        {
            "input": "[[1, 100, 2, 99, 3, 98, 4, 97, 5, 96, 6, 95, 7, 94, 8, 93, 9, 92, 10, 91], 20, 10, 19]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). Please write a Python function get_max_sum (n) for the task.\n```python": [
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[9876]",
            "output": null
        },
        {
            "input": "[8888]",
            "output": null
        },
        {
            "input": "[8765]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the maximum value in a given heterogeneous list. Please write a Python function max_val(listval) for the task.\n```python": [
        {
            "input": "[['very', 'large', 'list'] + [i for i in range(10**5)]]",
            "output": null
        },
        {
            "input": "[['very', 'large', 'list', 'with', 'duplicates'] + [i for i in range(50000)] + [i for i in range(50000)]]",
            "output": null
        },
        {
            "input": "[['long', 'list'] + [i for i in range(1000)]]",
            "output": null
        },
        {
            "input": "[['mix', 'of', 'strings', 1, 2, 3, 4, 5, 'and', 'numbers'] + [i for i in range(500)] + ['end', 'of', 'list']]",
            "output": null
        },
        {
            "input": "[['mixed', 0, 1, 2, 'values', 3, 4, 5, 6, 7, 8, 9, 10, 'end']]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the median length of a trapezium. Please write a Python function median_trapezium(base1,base2,height) for the task.\n```python": [
        {
            "input": "[100, 200, 300]",
            "output": null
        },
        {
            "input": "[9999, 10000, 9999]",
            "output": null
        },
        {
            "input": "[123456, 789012, 345678]",
            "output": null
        },
        {
            "input": "[10**4, 10**4, 10**4]",
            "output": null
        },
        {
            "input": "[10**3, 10**3, 10**3]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the median of three numbers. Please write a Python function median_numbers(a,b,c) for the task.\n```python": [
        {
            "input": "[float('inf'), 1, -float('inf')]",
            "output": null
        },
        {
            "input": "[float('-inf'), float('inf'), 0]",
            "output": null
        },
        {
            "input": "[0.0001, 0.0002, 0.0003]",
            "output": null
        },
        {
            "input": "[10**-3, 10**-6, 10**-9]",
            "output": null
        },
        {
            "input": "[3.14159, 2.71828, 1.61803]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the minimum product from the pairs of tuples within a given list. Please write a Python function min_product_tuple(list1) for the task.\n```python": [
        {
            "input": "[[(i, 10000 - i) for i in range(1, 10000)]]",
            "output": null
        },
        {
            "input": "[[(i, i) for i in range(1, 10000)]]",
            "output": null
        },
        {
            "input": "[[(i, 1) for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[(x, y) for x in range(1, 100) for y in range(1, 100)]]",
            "output": null
        },
        {
            "input": "[[(i, 10**4 - i) for i in range(1, 5000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the minimum value in a given heterogeneous list. Please write a Python function min_val(listval) for the task.\n```python": [
        {
            "input": "[['long', 'list'] + list(range(10000, 0, -1)) + ['end']]",
            "output": null
        },
        {
            "input": "[['long', 'list'] + [i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[['duplicates', 1, 2, 2, 3, 3, 4, 4, 5, 5, 1, 1, 0, 0]]",
            "output": null
        },
        {
            "input": "[['mixed', 'types', 10, 20, 30, 40, 50, 'in', 'list', 60, 70, 80, 90, 100]]",
            "output": null
        },
        {
            "input": "[['mixed', 'floats', 1.1, 2.2, 3.3, 4.4, 5.5, 'and', 'ints', 6, 7, 8, 9, 10]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the n'th lucas number. Please write a Python function find_lucas(n) for the task.\n```python": [
        {
            "input": "[35]",
            "output": null
        },
        {
            "input": "[34]",
            "output": null
        },
        {
            "input": "[33]",
            "output": null
        },
        {
            "input": "[32]",
            "output": null
        },
        {
            "input": "[31]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the n'th star number. Please write a Python function find_star_num(n) for the task.\n```python": [
        {
            "input": "[99999]",
            "output": null
        },
        {
            "input": "[100000]",
            "output": null
        },
        {
            "input": "[50000]",
            "output": null
        },
        {
            "input": "[25000]",
            "output": null
        },
        {
            "input": "[75000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the next smallest palindrome of a specified integer, returned as an integer. Please write a Python function next_smallest_palindrome(num) for the task.\n```python": [
        {
            "input": "[123456789012345]",
            "output": null
        },
        {
            "input": "[1000000001]",
            "output": null
        },
        {
            "input": "[123456789]",
            "output": null
        },
        {
            "input": "[987654321]",
            "output": null
        },
        {
            "input": "[1000001]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the nth decagonal number. Please write a Python function is_num_decagonal(n) for the task.\n```python": [
        {
            "input": "[99999]",
            "output": null
        },
        {
            "input": "[100000]",
            "output": null
        },
        {
            "input": "[50000]",
            "output": null
        },
        {
            "input": "[75000]",
            "output": null
        },
        {
            "input": "[25000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the nth hexagonal number. Please write a Python function hexagonal_num(n) for the task.\n```python": [
        {
            "input": "[54321]",
            "output": null
        },
        {
            "input": "[50000]",
            "output": null
        },
        {
            "input": "[99998]",
            "output": null
        },
        {
            "input": "[25000]",
            "output": null
        },
        {
            "input": "[75000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the nth newman\u2013shanks\u2013williams prime number. Please write a Python function newman_prime(n) for the task.\n```python": [
        {
            "input": "[30]",
            "output": null
        },
        {
            "input": "[29]",
            "output": null
        },
        {
            "input": "[28]",
            "output": null
        },
        {
            "input": "[27]",
            "output": null
        },
        {
            "input": "[26]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the nth number in the newman conway sequence. Please write a Python function sequence(n) for the task.\n```python": [
        {
            "input": "[24]",
            "output": null
        },
        {
            "input": "[23]",
            "output": null
        },
        {
            "input": "[22]",
            "output": null
        },
        {
            "input": "[21]",
            "output": null
        },
        {
            "input": "[20]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the nth octagonal number. Please write a Python function is_octagonal(n) for the task.\n```python": [
        {
            "input": "[99999]",
            "output": null
        },
        {
            "input": "[100000]",
            "output": null
        },
        {
            "input": "[54321]",
            "output": null
        },
        {
            "input": "[77777]",
            "output": null
        },
        {
            "input": "[33333]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the nth tetrahedral number. Please write a Python function tetrahedral_number(n) for the task.\n```python": [
        {
            "input": "[54321]",
            "output": null
        },
        {
            "input": "[100000 - 1]",
            "output": null
        },
        {
            "input": "[10**5 - 1]",
            "output": null
        },
        {
            "input": "[50000]",
            "output": null
        },
        {
            "input": "[100000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the number of elements that occurs before the tuple element in the given tuple. Please write a Python function count_first_elements(test_tup) for the task.\n```python": [
        {
            "input": "[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, (101, 102, 103))]",
            "output": null
        },
        {
            "input": "[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, (26, 27, 28, 29, 30), 31, 32, 33, 34, 35)]",
            "output": null
        },
        {
            "input": "[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, (21, 22, 23, 24, 25, 26, 27, 28, 29, 30), 31, 32, 33, 34, 35, 36, 37, 38, 39, 40)]",
            "output": null
        },
        {
            "input": "[(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, (11, 12, 13, 14, 15), 16, 17, 18)]",
            "output": null
        },
        {
            "input": "[(1, 3, 5, 7, 9, 11, 13, 15, 17, 19, (21, 23, 25), 27, 29, 31)]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the number of ways to partition a set of Bell numbers. Please write a Python function bell_number(n) for the task.\n```python": [
        {
            "input": "[100]",
            "output": null
        },
        {
            "input": "[99]",
            "output": null
        },
        {
            "input": "[90]",
            "output": null
        },
        {
            "input": "[85]",
            "output": null
        },
        {
            "input": "[80]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the pairwise addition of the neighboring elements of the given tuple. Please write a Python function add_pairwise(test_tup) for the task.\n```python": [
        {
            "input": "[(10**5, 10**5, 10**5, 10**5, 10**5, 10**5, 10**5, 10**5, 10**5, 10**5)]",
            "output": null
        },
        {
            "input": "[(10**3, 10**3, 10**3, 10**3, 10**3, 10**3, 10**3, 10**3, 10**3, 10**3)]",
            "output": null
        },
        {
            "input": "[(10**4, 10**4 - 1, 10**4 - 2, 10**4 - 3, 10**4 - 4, 10**4 - 5, 10**4 - 6, 10**4 - 7, 10**4 - 8, 10**4 - 9)]",
            "output": null
        },
        {
            "input": "[(10**4, 10**4, 10**4, 10**4, 10**4, 10**4, 10**4, 10**4, 10**4, 10**4)]",
            "output": null
        },
        {
            "input": "[(1, 2, 3, 4, 5, -5, -4, -3, -2, -1)]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the perimeter of a regular pentagon from the length of its sides. Please write a Python function perimeter_pentagon(a) for the task.\n```python": [
        {
            "input": "[1e-5]",
            "output": null
        },
        {
            "input": "[1.23456789]",
            "output": null
        },
        {
            "input": "[3.1415926535]",
            "output": null
        },
        {
            "input": "[2.7182818284]",
            "output": null
        },
        {
            "input": "[1e-10]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the ratio of zeroes to non-zeroes in an array of integers. Please write a Python function zero_count(nums) for the task.\n```python": [
        {
            "input": "[[0] * 99999 + [2]]",
            "output": null
        },
        {
            "input": "[[0] * 99999 + [1]]",
            "output": null
        },
        {
            "input": "[[int(i % 7 == 0) for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[int(i % 5 == 0) for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[int(i % 3 == 0) for i in range(100000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the ration of positive numbers in an array of integers. Please write a Python function positive_count(nums) for the task.\n```python": [
        {
            "input": "[[i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[1] * 9999 + [-1]]",
            "output": null
        },
        {
            "input": "[[10] * 7500 + [-10] * 2500]",
            "output": null
        },
        {
            "input": "[[i if i % 3 != 0 else -i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(-5000, 5000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the specified number of largest products from two given lists, selecting one factor from each list. Please write a Python function large_product(nums1, nums2, N) for the task.\n```python": [
        {
            "input": "[[i for i in range(1, 2000)], [i for i in range(2000, 4000)], 1000]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 1001)], [i for i in range(1001, 2001)], 100]",
            "output": null
        },
        {
            "input": "[list(range(1, 1001)), list(range(1001, 2001)), 10]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 1000)], [i for i in range(1000, 2000)], 500]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 500)], [i for i in range(500, 1000)], 50]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the sum of numbers in a list within a range specified by two indices. Please write a Python function sum_range_list(list1, m, n) for the task.\n```python": [
        {
            "input": "[[i for i in range(100000, 0, -1)], 0, 99999]",
            "output": null
        },
        {
            "input": "[[i for i in range(100000)], 0, 99999]",
            "output": null
        },
        {
            "input": "[[1] * 100000, 0, 99999]",
            "output": null
        },
        {
            "input": "[[i**2 for i in range(100000)], 500, 95000]",
            "output": null
        },
        {
            "input": "[[float(i) for i in range(100000)], 0, 99999]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the surface area of a cube of a given size. Please write a Python function surfacearea_cube(l) for the task.\n```python": [
        {
            "input": "[-10000]",
            "output": null
        },
        {
            "input": "[999]",
            "output": null
        },
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[0.1]",
            "output": null
        },
        {
            "input": "[0.0001]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the surface area of a sphere. Please write a Python function surfacearea_sphere(r) for the task.\n```python": [
        {
            "input": "[1]",
            "output": null
        },
        {
            "input": "[100]",
            "output": null
        },
        {
            "input": "[1000]",
            "output": null
        },
        {
            "input": "[99999]",
            "output": null
        },
        {
            "input": "[12345]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the third side of a right angled triangle. Please write a Python function otherside_rightangle(w,h) for the task.\n```python": [
        {
            "input": "[123456789, 987654321]",
            "output": null
        },
        {
            "input": "[99999, 100000]",
            "output": null
        },
        {
            "input": "[314159, 271828]",
            "output": null
        },
        {
            "input": "[12345.6789, 98765.4321]",
            "output": null
        },
        {
            "input": "[3.1415926535, 2.7182818284]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the volume of a cone. Please write a Python function volume_cone(r,h) for the task.\n```python": [
        {
            "input": "[9999, 9999]",
            "output": null
        },
        {
            "input": "[1, 10000]",
            "output": null
        },
        {
            "input": "[10000, 1]",
            "output": null
        },
        {
            "input": "[9876, 5432]",
            "output": null
        },
        {
            "input": "[5432, 9876]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the volume of a cube given its side length. Please write a Python function volume_cube(l) for the task.\n```python": [
        {
            "input": "[99999]",
            "output": null
        },
        {
            "input": "[10**5]",
            "output": null
        },
        {
            "input": "[54321]",
            "output": null
        },
        {
            "input": "[98765]",
            "output": null
        },
        {
            "input": "[10**4]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find the volume of a sphere. Please write a Python function volume_sphere(r) for the task.\n```python": [
        {
            "input": "[100]",
            "output": null
        },
        {
            "input": "[27182]",
            "output": null
        },
        {
            "input": "[99999]",
            "output": null
        },
        {
            "input": "[1]",
            "output": null
        },
        {
            "input": "[98765]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find tuples which have all elements divisible by k from the given list of tuples. Please write a Python function find_tuples(test_list, K) for the task.\n```python": [
        {
            "input": "[[(i, i*2, i*3) for i in range(1, 10001)], 2]",
            "output": null
        },
        {
            "input": "[[(i, i+1, i+2) for i in range(10000, 20000)], 3]",
            "output": null
        },
        {
            "input": "[[(i, i*4, i*5) for i in range(1, 5000)], 4]",
            "output": null
        },
        {
            "input": "[[(0, 0, 0), (0, 0, 0), (0, 0, 0)], 1]",
            "output": null
        },
        {
            "input": "[[(1000, 2000, 3000), (4000, 5000, 6000), (7000, 8000, 9000)], 1000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find whether a given array of integers contains any duplicate element. Please write a Python function test_duplicate(arraynums) for the task.\n```python": [
        {
            "input": "[[i // 2 for i in range(200000)]]",
            "output": null
        },
        {
            "input": "[list(range(50000)) + list(range(50000))]",
            "output": null
        },
        {
            "input": "[[1000000] + list(range(99999))]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 100000, 2)] + [i for i in range(0, 100000, 2)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(100000) if i % 2 == 0] + [i for i in range(100000) if i % 2 == 1]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find whether all the given tuples have equal length or not. Please write a Python function get_equal(Input) for the task.\n```python": [
        {
            "input": "[[(1, 2, 3, 4, 5)] * 99999 + [(6, 7, 8, 9)]]",
            "output": null
        },
        {
            "input": "[[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)] * 100000]",
            "output": null
        },
        {
            "input": "[[(1, 2, 3)] * 100000]",
            "output": null
        },
        {
            "input": "[[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)] + [(11, 12, 13, 14, 15, 16, 17, 18, 19, 20)] * 99999]",
            "output": null
        },
        {
            "input": "[[(1, 2, 3, 4, 5)] * 25000 + [(6, 7, 8, 9, 10)] * 25000 + [(11, 12, 13, 14, 15)] * 25000 + [(16, 17, 18, 19, 20)] * 25000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to find words that are longer than n characters from a given list of words. Please write a Python function long_words(n, str) for the task.\n```python": [
        {
            "input": "[1, 'a b c d e f g h i j k l m n o p q r s t u v w x y z' * 1000]",
            "output": null
        },
        {
            "input": "[4, ' '.join(['testcase' for _ in range(10000)])]",
            "output": null
        },
        {
            "input": "[2, ' '.join(['word' + str(i) for i in range(10000)])]",
            "output": null
        },
        {
            "input": "[0, ' '.join(['a'*i for i in range(1, 1001)])]",
            "output": null
        },
        {
            "input": "[8, ' '.join(['pneumonoultramicroscopicsilicovolcanoconiosis' for _ in range(1000)])]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to flatten a given nested list structure. Please write a Python function flatten_list(list1) for the task.\n```python": [
        {
            "input": "[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]], [[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]], [[25, 26, 27], [28, 29, 30]], [[31, 32, 33], [34, 35, 36]], [[37, 38, 39], [40, 41, 42]], [[43, 44, 45], [46, 47, 48]], [[49, 50, 51], [52, 53, 54]], [[55, 56, 57], [58, 59, 60]]]]",
            "output": null
        },
        {
            "input": "[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]",
            "output": null
        },
        {
            "input": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [41, 42, 43, 44, 45, 46, 47, 48, 49, 50]]]",
            "output": null
        },
        {
            "input": "[[[[1, 2], [3, 4]], [5, 6], [[7, 8], [9, 10]], [11, 12], [[13, 14], [15, 16]], [17, 18], [[19, 20], [21, 22]], [23, 24], [[25, 26], [27, 28]], [29, 30]]]",
            "output": null
        },
        {
            "input": "[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]], [[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]], [[25, 26, 27], [28, 29, 30]]]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to flatten a list and sum all of its elements. Please write a Python function recursive_list_sum(data_list) for the task.\n```python": [
        {
            "input": "[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21, [22, [23, [24, [25, [26, [27, [28, [29, [30, [31, [32, [33, [34, [35, [36, [37, [38, [39, [40]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]",
            "output": null
        },
        {
            "input": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, [51, 52, 53, 54, 55, 56, 57, 58, 59, 60]]]]]]]",
            "output": null
        },
        {
            "input": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, [41, 42, 43, 44, 45, 46, 47, 48, 49, 50]]]]]]",
            "output": null
        },
        {
            "input": "[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]]",
            "output": null
        },
        {
            "input": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, [31, 32, 33, 34, 35, 36, 37, 38, 39, 40]]]]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to flatten the list of lists into a single set of numbers. Please write a Python function extract_singly(test_list) for the task.\n```python": [
        {
            "input": "[[(x, x + 1, x + 2) for x in range(0, 100000, 1)]]",
            "output": null
        },
        {
            "input": "[[(x, x + 1) for x in range(1, 100000) if x % 2 == 0]]",
            "output": null
        },
        {
            "input": "[[(x, x * 2, x * 3) for x in range(1, 33334)]]",
            "output": null
        },
        {
            "input": "[[(x, x**0.5, x**0.33) for x in range(1, 50000, 3)]]",
            "output": null
        },
        {
            "input": "[[(x, x**2, x**3) for x in range(1, 50000, 3)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to join a list of multiple integers into a single integer. Please write a Python function multiple_to_single(L) for the task.\n```python": [
        {
            "input": "[[i*2 for i in range(500)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 1000, 3)]]",
            "output": null
        },
        {
            "input": "[[int('9'*i) for i in range(1, 51)]]",
            "output": null
        },
        {
            "input": "[[int('8'*i) for i in range(1, 51)]]",
            "output": null
        },
        {
            "input": "[[int('12345'*i) for i in range(1, 21)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to maximize the given two tuples. Please write a Python function maximize_elements(test_tup1, test_tup2) for the task.\n```python": [
        {
            "input": "[((1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)), ((10, 10), (9, 9), (8, 8), (7, 7), (6, 6), (5, 5), (4, 4), (3, 3), (2, 2), (1, 1))]",
            "output": null
        },
        {
            "input": "[((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)), ((20, 19), (18, 17), (16, 15), (14, 13), (12, 11), (10, 9), (8, 7), (6, 5), (4, 3), (2, 1))]",
            "output": null
        },
        {
            "input": "[((10, 20), (30, 40), (50, 60), (70, 80), (90, 100), (110, 120), (130, 140), (150, 160)), ((160, 150), (140, 130), (120, 110), (100, 90), (80, 70), (60, 50), (40, 30), (20, 10))]",
            "output": null
        },
        {
            "input": "[((0.1, 0.2), (0.3, 0.4), (0.5, 0.6), (0.7, 0.8), (0.9, 1.0), (1.1, 1.2), (1.3, 1.4)), ((1.4, 1.3), (1.2, 1.1), (1.0, 0.9), (0.8, 0.7), (0.6, 0.5), (0.4, 0.3), (0.2, 0.1))]",
            "output": null
        },
        {
            "input": "[((-100, -200), (-300, -400), (-500, -600), (-700, -800), (-900, -1000), (-1100, -1200)), ((-1200, -1100), (-1000, -900), (-800, -700), (-600, -500), (-400, -300), (-200, -100))]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to merge three dictionaries into a single dictionary. Please write a Python function merge_dictionaries_three(dict1,dict2, dict3) for the task.\n```python": [
        {
            "input": "[{'key_' + str(i): 'value_' + str(i) for i in range(10**5)}, {'key_' + str(i): 'value_' + str(i) for i in range(10**5, 2*10**5)}, {'key_' + str(i): 'value_' + str(i) for i in range(2*10**5, 3*10**5)}]",
            "output": null
        },
        {
            "input": "[{'key_' + str(i): 'value_' + str(i) for i in range(50000)}, {'key_' + str(i): 'value_' + str(i) for i in range(50000, 100000)}, {'key_' + str(i): 'value_' + str(i) for i in range(100000, 150000)}]",
            "output": null
        },
        {
            "input": "[{'key_' + str(i): 'value_' + str(i) for i in range(10**4)}, {'key_' + str(i): 'value_' + str(i) for i in range(10**4, 2*10**4)}, {'key_' + str(i): 'value_' + str(i) for i in range(2*10**4, 3*10**4)}]",
            "output": null
        },
        {
            "input": "[{'key_' + str(i): 'value_' + str(i) for i in range(10000)}, {'key_' + str(i): 'value_' + str(i) for i in range(10000, 20000)}, {'key_' + str(i): 'value_' + str(i) for i in range(20000, 30000)}]",
            "output": null
        },
        {
            "input": "[{'long_key_' + str(i): 'long_value_' + str(i) for i in range(1000)}, {'key_' + str(i): 'value_' + str(i) for i in range(1000, 2000)}, {'another_key_' + str(i): 'another_value_' + str(i) for i in range(2000, 3000)}]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to merge three lists into a single sorted list. Please write a Python function merge_sorted_list(num1,num2,num3) for the task.\n```python": [
        {
            "input": "[[i for i in range(10**5, 0, -1)], [j for j in range(10**5 - 1, 0, -1)], [k for k in range(10**5 - 2, 0, -1)]]",
            "output": null
        },
        {
            "input": "[list(range(10**5)), list(range(10**5, 2*10**5)), list(range(2*10**5, 3*10**5))]",
            "output": null
        },
        {
            "input": "[list(range(10**5, 0, -1)), list(range(10**5, 2*10**5)), list(range(2*10**5, 3*10**5, 2))]",
            "output": null
        },
        {
            "input": "[[i for i in range(99999, -1, -1)], [i for i in range(99999, -1, -2)], [i for i in range(99999, -1, -3)]]",
            "output": null
        },
        {
            "input": "[list(range(0, 50000)), list(range(50000, 100000)), list(range(100000, 150000))]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to multiply all the numbers in a list and divide with the length of the list. Please write a Python function multiply_num(numbers) for the task.\n```python": [
        {
            "input": "[[i * -1 for i in range(10**5)]]",
            "output": null
        },
        {
            "input": "[[1] * 10000]",
            "output": null
        },
        {
            "input": "[[i for i in range(-1000, 1000)]]",
            "output": null
        },
        {
            "input": "[[i * 0.01 for i in range(1, 5001)]]",
            "output": null
        },
        {
            "input": "[[i * 0.1 for i in range(1, 1001)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to multiply two integers. Please write a Python function multiply_int(x, y) for the task.\n```python": [
        {
            "input": "[1023, 987]",
            "output": null
        },
        {
            "input": "[345, 678]",
            "output": null
        },
        {
            "input": "[500, 500]",
            "output": null
        },
        {
            "input": "[50, -200]",
            "output": null
        },
        {
            "input": "[50, 200]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to perform index wise multiplication of tuple elements in the given two tuples. Please write a Python function index_multiplication(test_tup1, test_tup2) for the task.\n```python": [
        {
            "input": "[((1, 1),) * 10000, ((2, 2),) * 10000]",
            "output": null
        },
        {
            "input": "[((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24), (25, 26), (27, 28), (29, 30), (31, 32), (33, 34), (35, 36), (37, 38), (39, 40)), ((40, 39), (38, 37), (36, 35), (34, 33), (32, 31), (30, 29), (28, 27), (26, 25), (24, 23), (22, 21), (20, 19), (18, 17), (16, 15), (14, 13), (12, 11), (10, 9), (8, 7), (6, 5), (4, 3), (2, 1))]",
            "output": null
        },
        {
            "input": "[((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)), ((20, 19), (18, 17), (16, 15), (14, 13), (12, 11), (10, 9), (8, 7), (6, 5), (4, 3), (2, 1))]",
            "output": null
        },
        {
            "input": "[((2, 3), (5, 7), (11, 13), (17, 19), (23, 29), (31, 37), (41, 43), (47, 53)), ((53, 47), (43, 41), (37, 31), (29, 23), (19, 17), (13, 11), (7, 5), (3, 2))]",
            "output": null
        },
        {
            "input": "[((10**3, 10**2), (10, 1), (0.1, 0.01), (0.001, 0.0001)), ((0.0001, 0.001), (0.01, 0.1), (1, 10), (10**2, 10**3))]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to remove all elements from a given list present in another list. Please write a Python function remove_elements(list1, list2) for the task.\n```python": [
        {
            "input": "[[x for x in range(0, 100000, 5)], [y for y in range(0, 100000, 10)]]",
            "output": null
        },
        {
            "input": "[[x for x in range(100000)], [y for y in range(0, 100000, 100)]]",
            "output": null
        },
        {
            "input": "[[x for x in range(10000)], [y for y in range(5000, 15000)]]",
            "output": null
        },
        {
            "input": "[[x for x in range(1, 10000, 2)], [y for y in range(2, 10000, 2)]]",
            "output": null
        },
        {
            "input": "[[x for x in range(100000)], [y for y in range(0, 100000, 1000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to remove all whitespaces from the given string. Please write a Python function remove_whitespaces(text1) for the task.\n```python": [
        {
            "input": "['a b c d e f g h i j k l m n o p q r s t u v w x y z ' * 1000]",
            "output": null
        },
        {
            "input": "[' a b c d e f g h i j k l m n o p q r s t u v w x y z ' * 400]",
            "output": null
        },
        {
            "input": "[' ' * 5000 + ' '.join(['a'] * 5000)]",
            "output": null
        },
        {
            "input": "[' ' * 2000 + 'a b c d e f g h i j k l m n o p q r s t u v w x y z ' * 100 + ' ' * 2000]",
            "output": null
        },
        {
            "input": "[' ' * 4000 + 'a b c d e f g h i j k l m n o p q r s t u v w x y z ' * 100]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to remove characters from the first string which are present in the second string. Please write a Python function remove_dirty_chars(string, second_string) for the task.\n```python": [
        {
            "input": "[\"abcdefghijklmnopqrstuvwxyz\" * 1000, \"aeiou\" * 1000]",
            "output": null
        },
        {
            "input": "[\"a\" * 10000, \"b\" * 10000]",
            "output": null
        },
        {
            "input": "[\"abcdefghij\" * 1000, \"klmnopqrst\" * 1000]",
            "output": null
        },
        {
            "input": "[\"abcdefghij\" * 1000, \"abcdefghij\" * 1000]",
            "output": null
        },
        {
            "input": "[\"helloworld\" * 1000, \"hello\" * 1000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to remove lowercase substrings from a given string. Please write a Python function remove_lowercase(str1) for the task.\n```python": [
        {
            "input": "['abcdefghijklmnopqrstuvwxyz' * 1000]",
            "output": null
        },
        {
            "input": "['ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' * 500]",
            "output": null
        },
        {
            "input": "['a' * 10000 + 'B' * 10000]",
            "output": null
        },
        {
            "input": "['A' * 10000 + 'b' * 10000]",
            "output": null
        },
        {
            "input": "['a' * 10000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to remove odd characters in a string. Please write a Python function remove_odd(str1) for the task.\n```python": [
        {
            "input": "[''.join(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']*1000)]",
            "output": null
        },
        {
            "input": "[''.join(['a', '1', 'b', '2', 'c', '3', 'd', '4']*2500)]",
            "output": null
        },
        {
            "input": "[''.join(['ab', 'cd', 'ef', 'gh', 'ij', 'kl', 'mn', 'op', 'qr', 'st', 'uv', 'wx', 'yz']*500)]",
            "output": null
        },
        {
            "input": "[''.join(chr(i % 256) for i in range(10000))]",
            "output": null
        },
        {
            "input": "[''.join(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']*385)]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to remove uppercase substrings from a given string. Please write a Python function remove_uppercase(str1) for the task.\n```python": [
        {
            "input": "[''.join(chr(i) for i in range(97, 123)) * 2500 + ''.join(chr(i) for i in range(65, 91)) * 2500]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(97, 123)) * 1000 + ''.join(chr(i) for i in range(65, 91)) * 1000 + ''.join(chr(i) for i in range(97, 123)) * 1000 + ''.join(chr(i) for i in range(65, 91)) * 1000 + ''.join(chr(i) for i in range(97, 123)) * 1000]",
            "output": null
        },
        {
            "input": "['' + ''.join(chr(i) for i in range(97, 123)) * 1000 + ''.join(chr(i) for i in range(65, 91)) * 1000 + ''.join(chr(i) for i in range(97, 123)) * 1000]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(65, 91)) * 500 + ''.join(chr(i) for i in range(97, 123)) * 500 + ''.join(chr(i) for i in range(65, 91)) * 500 + ''.join(chr(i) for i in range(97, 123)) * 500]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(65, 91)) * 1000 + ''.join(chr(i) for i in range(97, 123)) * 1000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to replace characters in a string. Please write a Python function replace_char(str1,ch,newch) for the task.\n```python": [
        {
            "input": "['a' * 10000, 'a', 'b']",
            "output": null
        },
        {
            "input": "['b' * 10000, 'b', 'c']",
            "output": null
        },
        {
            "input": "['c' * 10000, 'c', 'd']",
            "output": null
        },
        {
            "input": "['d' * 10000, 'd', 'e']",
            "output": null
        },
        {
            "input": "['e' * 10000, 'e', 'f']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to return the sum of all divisors of a number. Please write a Python function sum_div(number) for the task.\n```python": [
        {
            "input": "[10031]",
            "output": null
        },
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[10007]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[9991]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to return two words from a list of words starting with letter 'p'. Please write a Python function start_withp(words) for the task.\n```python": [
        {
            "input": "[['Pseudocode Pseudoscience'] * 100000]",
            "output": null
        },
        {
            "input": "[['Pseudocode Pseudoscience'] * 1000]",
            "output": null
        },
        {
            "input": "[['Pseudocode Pseudoscience', 'Pseudocode Pseudoscience', 'Pseudocode Pseudoscience', 'Pseudocode Pseudoscience', 'Pseudocode Pseudoscience']]",
            "output": null
        },
        {
            "input": "[['Pseudocode Pseudoscience', 'Pseudocode Pseudoscience', 'Pseudocode Pseudoscience', 'Pseudocode Pseudoscience', 'Pseudocode Pseudoscience', 'Pseudocode Pseudoscience', 'Pseudocode Pseudoscience', 'Pseudocode Pseudoscience', 'Pseudocode Pseudoscience', 'Pseudocode Pseudoscience']]",
            "output": null
        },
        {
            "input": "[['Pseudocode Pseudoscience', 'Pythagoras Python', 'Pine Pineapple']]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to reverse each string in a given list of string values. Please write a Python function reverse_string_list(stringlist) for the task.\n```python": [
        {
            "input": "[['a']*10000]",
            "output": null
        },
        {
            "input": "[[''.join(chr(97 + (j % 26)) for j in range(i % 100 + 1)) for i in range(1000)]]",
            "output": null
        },
        {
            "input": "[[''.join(chr(97 + (i % 26)) for i in range(10000)) for _ in range(10)]]",
            "output": null
        },
        {
            "input": "[['string'+str(i) for i in range(1000)]]",
            "output": null
        },
        {
            "input": "[[''.join(chr(97 + (i % 26)) for i in range(5000)) for _ in range(10)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list. Please write a Python function round_and_sum(list1) for the task.\n```python": [
        {
            "input": "[[0.0001 * (-1) ** i for i in range(1, 10000)]]",
            "output": null
        },
        {
            "input": "[[(-1) ** i * (i + 0.1) for i in range(1, 10000)]]",
            "output": null
        },
        {
            "input": "[[i + 0.5 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[1000 - 0.1 * i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[round(i * 0.5, 8) for i in range(1, 10000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to sort a dictionary by value. Please write a Python function sort_counter(dict1) for the task.\n```python": [
        {
            "input": "[{'Num'+str(i): (i*3.1415)%10 for i in range(1, 10000)}]",
            "output": null
        },
        {
            "input": "[{'Random'+str(i): (i**2 + 3*i + 2) % 100 for i in range(1, 10000)}]",
            "output": null
        },
        {
            "input": "[{'Key'+str(i): i%7 for i in range(1, 10000)}]",
            "output": null
        },
        {
            "input": "[{'Key'+str(i): (-1)**i * i for i in range(1, 10000)}]",
            "output": null
        },
        {
            "input": "[{'Key'+str(i): 9999-i for i in range(1, 10000)}]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to sort a given matrix in ascending order according to the sum of its rows. Please write a Python function sort_matrix(M) for the task.\n```python": [
        {
            "input": "[[[i % 10 for i in range(10**1)] for _ in range(10**4)]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(10**2)] for _ in range(10**3)]]",
            "output": null
        },
        {
            "input": "[[[i % 100 for i in range(10**2)] for _ in range(10**3)]]",
            "output": null
        },
        {
            "input": "[[[i % 100 for i in range(10**3)] for _ in range(10**2)]]",
            "output": null
        },
        {
            "input": "[[[i % 500 for i in range(10**3)] for _ in range(10**2)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to sort a list of elements. Please write a Python function comb_sort(nums) for the task.\n```python": [
        {
            "input": "[[random.randint(-10**6, 10**6) for _ in range(10**5)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 100001, 2)] + [i for i in range(0, 100001, 2)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(50000)] + [i for i in range(50000, 0, -1)]]",
            "output": null
        },
        {
            "input": "[[10**5 - i for i in range(10**5)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10**5, 0, -1)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to sort a list of elements. Please write a Python function pancake_sort(nums) for the task.\n```python": [
        {
            "input": "[[x * 0.1 for x in range(1, 1001)]]",
            "output": null
        },
        {
            "input": "[[x * 0.1 for x in range(1000, 0, -1)]]",
            "output": null
        },
        {
            "input": "[[0.1 * x for x in range(500, 0, -1)] + [0.1 * x for x in range(501, 1001)]]",
            "output": null
        },
        {
            "input": "[[x for x in range(1, 1001)]]",
            "output": null
        },
        {
            "input": "[[x for x in range(1000, 0, -1)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to sort a list of tuples using the second value of each tuple. Please write a Python function subject_marks(subjectmarks) for the task.\n```python": [
        {
            "input": "[[('Subject'+str(i), (i%25)*4) for i in range(10**5)]]",
            "output": null
        },
        {
            "input": "[[('Subject'+str(i), i%10) for i in range(10**5)]]",
            "output": null
        },
        {
            "input": "[[('Subject'+str(i), i%7) for i in range(50000)] + [('Subject'+str(i), (i%11)*3) for i in range(50000)]]",
            "output": null
        },
        {
            "input": "[[('Subject'+str(i), i%100) for i in range(10**5)]]",
            "output": null
        },
        {
            "input": "[[('Subject'+str(i), i%1000) for i in range(10**5)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to sort each sublist of strings in a given list of lists. Please write a Python function sort_sublists(input_list) for the task.\n```python": [
        {
            "input": "[[['a' * i for i in range(1, 1001)], ['b' * i for i in range(1, 1001)], ['c' * i for i in range(1, 1001)]]]",
            "output": null
        },
        {
            "input": "[[['a' * i for i in range(1, 1001)]]]",
            "output": null
        },
        {
            "input": "[[['a' * i for i in range(1, 101)], ['b' * i for i in range(1, 101)], ['c' * i for i in range(1, 101)]]]",
            "output": null
        },
        {
            "input": "[[['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]]",
            "output": null
        },
        {
            "input": "[[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to sort the given array by using shell sort. Please write a Python function shell_sort(my_list) for the task.\n```python": [
        {
            "input": "[[i * (-1)**i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[(-1)**i * i for i in range(10**4)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10**4, 0, -1)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10000, 0, -1)]]",
            "output": null
        },
        {
            "input": "[[int(i % 5 == 0) for i in range(10000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to subtract two lists element-wise. Please write a Python function sub_list(nums1,nums2) for the task.\n```python": [
        {
            "input": "[[i**2 for i in range(10**5)], [i**2 + 1 for i in range(10**5)]]",
            "output": null
        },
        {
            "input": "[[(-1)**i * i for i in range(10**5)], [(-1)**(i+1) * i for i in range(10**5)]]",
            "output": null
        },
        {
            "input": "[list(range(1, 10**5 + 1)), list(range(10**5, 0, -1))]",
            "output": null
        },
        {
            "input": "[[10**6 - i for i in range(10**5)], [10**5 + i for i in range(10**5)]]",
            "output": null
        },
        {
            "input": "[[float(i) for i in range(10**5)], [float(i) + 0.5 for i in range(10**5)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to sum all amicable numbers from 1 to a specified number. Please write a Python function amicable_numbers_sum(limit) for the task.\n```python": [
        {
            "input": "[9876]",
            "output": null
        },
        {
            "input": "[8765]",
            "output": null
        },
        {
            "input": "[6789]",
            "output": null
        },
        {
            "input": "[5432]",
            "output": null
        },
        {
            "input": "[100]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise. Please write a Python function text_lowercase_underscore(text) for the task.\n```python": [
        {
            "input": "['a_'*33333 + 'b_'*33333 + 'c_'*33333 + 'd']",
            "output": null
        },
        {
            "input": "['a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_'*3846 + 'a']",
            "output": null
        },
        {
            "input": "['a'*33333 + '_' + 'b'*33333 + '_' + 'c'*33333]",
            "output": null
        },
        {
            "input": "['a'*25000 + '_' + 'a'*25000 + '_' + 'a'*25000 + '_' + 'a'*25000]",
            "output": null
        },
        {
            "input": "['a'*100000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. Please write a Python function validate(n) for the task.\n```python": [
        {
            "input": "[777777777788888888889999999999]",
            "output": null
        },
        {
            "input": "[666666666677777777778888888888]",
            "output": null
        },
        {
            "input": "[555555555566666666667777777777]",
            "output": null
        },
        {
            "input": "[444444444455555555556666666666]",
            "output": null
        },
        {
            "input": "[1111111111222222222233333333334444444444]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers. Please write a Python function square_Sum(n) for the task.\n```python": [
        {
            "input": "[100000]",
            "output": null
        },
        {
            "input": "[99999]",
            "output": null
        },
        {
            "input": "[50000]",
            "output": null
        },
        {
            "input": "[54321]",
            "output": null
        },
        {
            "input": "[98765]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function that returns the number of integer elements in a given list. Please write a Python function count_integer(list1) for the task.\n```python": [
        {
            "input": "[[1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e'] * 20000]",
            "output": null
        },
        {
            "input": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] * 10000]",
            "output": null
        },
        {
            "input": "[[True, False, None, 'string', 1, 2, 3.5, 4.5] * 12500]",
            "output": null
        },
        {
            "input": "[[i for i in range(25000)] + [str(i) for i in range(25000)] + [i + 0.1 for i in range(25000)] + [True, False] * 12500]",
            "output": null
        },
        {
            "input": "[[i for i in range(50000)] + [i + 0.1 for i in range(50000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number. Please write a Python function count_Primes_nums(n) for the task.\n```python": [
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[9876]",
            "output": null
        },
        {
            "input": "[8765]",
            "output": null
        },
        {
            "input": "[7654]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients. Please write a Python function even_binomial_Coeff_Sum( n) for the task.\n```python": [
        {
            "input": "[12345]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[40000]",
            "output": null
        },
        {
            "input": "[99999]",
            "output": null
        },
        {
            "input": "[100000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple. Please write a Python function count_X(tup, x) for the task.\n```python": [
        {
            "input": "[(1,) * 100000, 1]",
            "output": null
        },
        {
            "input": "[(0, 0, 0, 0, 0, 0, 0, 0, 0, 0) * 10000, 0]",
            "output": null
        },
        {
            "input": "[(1, 2, 1, 2, 1, 2, 1, 2) * 12500, 1]",
            "output": null
        },
        {
            "input": "[(2,) * 50000 + (3,) * 50000, 2]",
            "output": null
        },
        {
            "input": "[(0, 1, 0, 1) * 25000, 0]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power. Please write a Python function even_Power_Sum(n) for the task.\n```python": [
        {
            "input": "[99999]",
            "output": null
        },
        {
            "input": "[99998]",
            "output": null
        },
        {
            "input": "[98765]",
            "output": null
        },
        {
            "input": "[88888]",
            "output": null
        },
        {
            "input": "[77777]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers. Please write a Python function square_Sum(n) for the task.\n```python": [
        {
            "input": "[100000]",
            "output": null
        },
        {
            "input": "[99999]",
            "output": null
        },
        {
            "input": "[50000]",
            "output": null
        },
        {
            "input": "[98765]",
            "output": null
        },
        {
            "input": "[54321]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to check if a given number is one less than twice its reverse. Please write a Python function check(n) for the task.\n```python": [
        {
            "input": "[123456789]",
            "output": null
        },
        {
            "input": "[987654321]",
            "output": null
        },
        {
            "input": "[3333333]",
            "output": null
        },
        {
            "input": "[4444444]",
            "output": null
        },
        {
            "input": "[5555555]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to check if the elements of a given list are unique or not. Please write a Python function all_unique(test_list) for the task.\n```python": [
        {
            "input": "[[i for i in range(10**5)] + list(range(10**5))]",
            "output": null
        },
        {
            "input": "[list(range(50000)) + list(range(50000))]",
            "output": null
        },
        {
            "input": "[[i for i in range(50000)] + [i for i in range(50000)]]",
            "output": null
        },
        {
            "input": "[list(range(1, 10**5, 2)) + list(range(0, 10**5, 2))]",
            "output": null
        },
        {
            "input": "[[i for i in range(2, 10**5 + 2, 2)] + [i for i in range(1, 10**5 + 1, 2)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to check whether any value in a sequence exists in a sequence or not. Please write a Python function overlapping(list1,list2) for the task.\n```python": [
        {
            "input": "[[x for x in range(10000) if x % 2 == 0], [y for y in range(10000) if y % 2 != 0]]",
            "output": null
        },
        {
            "input": "[[x for x in range(1, 5001)], [y for y in range(5001, 10001)]]",
            "output": null
        },
        {
            "input": "[[x for x in range(5000)], [y for y in range(5000, 10000)]]",
            "output": null
        },
        {
            "input": "[[float(x) for x in range(10000)], [float(y) for y in range(9999, -1, -1)]]",
            "output": null
        },
        {
            "input": "[[x for x in range(10000)], [y for y in range(9999, -1, -1)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to check whether the given array is monotonic or not. Please write a Python function is_Monotonic(A) for the task.\n```python": [
        {
            "input": "[[1.1 * i for i in range(10**5)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10**5)]]",
            "output": null
        },
        {
            "input": "[[float(i) for i in range(10**5, 0, -1)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10**5, 0, -1)]]",
            "output": null
        },
        {
            "input": "[[float(i) for i in range(10**5)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to check whether the given list contains consecutive numbers or not. Please write a Python function check_Consecutive(l) for the task.\n```python": [
        {
            "input": "[list(range(1, 10001))]",
            "output": null
        },
        {
            "input": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] * 1000]",
            "output": null
        },
        {
            "input": "[list(range(10000, 0, -1))]",
            "output": null
        },
        {
            "input": "[[1, 2] * 5000]",
            "output": null
        },
        {
            "input": "[list(range(1, 5000)) + list(range(5001, 10001))]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not. Please write a Python function is_Sum_Of_Powers_Of_Two(n) for the task.\n```python": [
        {
            "input": "[2]",
            "output": null
        },
        {
            "input": "[16]",
            "output": null
        },
        {
            "input": "[32]",
            "output": null
        },
        {
            "input": "[64]",
            "output": null
        },
        {
            "input": "[128]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to check whether the given number can be represented as the difference of two squares or not. Please write a Python function dif_Square(n) for the task.\n```python": [
        {
            "input": "[2147483647]",
            "output": null
        },
        {
            "input": "[99991]",
            "output": null
        },
        {
            "input": "[100003]",
            "output": null
        },
        {
            "input": "[98765]",
            "output": null
        },
        {
            "input": "[100001]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to check whether the given two integers have opposite sign or not. Please write a Python function opposite_Signs(x,y) for the task.\n```python": [
        {
            "input": "[2**63 - 1, -(2**63 - 1)]",
            "output": null
        },
        {
            "input": "[2**64 - 1, -(2**64 - 1)]",
            "output": null
        },
        {
            "input": "[2**100, -2**100]",
            "output": null
        },
        {
            "input": "[-2**100, 2**100]",
            "output": null
        },
        {
            "input": "[3**20, -3**20]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to check whether the length of the word is odd or not. Please write a Python function word_len(s) for the task.\n```python": [
        {
            "input": "['abcdefghij' * 10000]",
            "output": null
        },
        {
            "input": "['a' * 100000]",
            "output": null
        },
        {
            "input": "['c' * 50000 + 'd' * 50000]",
            "output": null
        },
        {
            "input": "['g' * 25000 + 'h' * 25000 + 'i' * 25000 + 'j' * 25000]",
            "output": null
        },
        {
            "input": "['k' * 33333 + 'l' * 33333 + 'm' * 33334]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to convert complex numbers to polar coordinates. Please write a Python function convert(numbers) for the task.\n```python": [
        {
            "input": "[(complex(3.141592653589793, 2.718281828459045))]",
            "output": null
        },
        {
            "input": "[(3+4j)]",
            "output": null
        },
        {
            "input": "[(1e-10+1e-10j)]",
            "output": null
        },
        {
            "input": "[(1e10+1e10j)]",
            "output": null
        },
        {
            "input": "[(complex(-3.141592653589793, -2.718281828459045))]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to convert the given string to lower case. Please write a Python function is_lower(string) for the task.\n```python": [
        {
            "input": "['LoNgStRiNgWiThMiXeDcHaRs' * 500]",
            "output": null
        },
        {
            "input": "['A' * 10000]",
            "output": null
        },
        {
            "input": "['a' * 10000]",
            "output": null
        },
        {
            "input": "['MiXeD' * 2000]",
            "output": null
        },
        {
            "input": "[' ' * 10000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to count inversions in an array. Please write a Python function get_Inv_Count(arr) for the task.\n```python": [
        {
            "input": "[[x for x in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[5] * 10000]",
            "output": null
        },
        {
            "input": "[[i for i in range(1000, 0, -1)]]",
            "output": null
        },
        {
            "input": "[[x for x in range(1000, 0, -1)]]",
            "output": null
        },
        {
            "input": "[[i if i % 2 == 0 else 1000 - i for i in range(1000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to count the number of non-empty substrings of a given string. Please write a Python function number_of_substrings(str) for the task.\n```python": [
        {
            "input": "['abcde' * 20000]",
            "output": null
        },
        {
            "input": "['x' * 99999]",
            "output": null
        },
        {
            "input": "['a' + 'b' * 50000 + 'c' * 49999]",
            "output": null
        },
        {
            "input": "['a' * 33333 + 'b' * 33333 + 'c' * 33334]",
            "output": null
        },
        {
            "input": "['a' * 10000 + 'b' * 20000 + 'c' * 30000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to count the number of positive numbers in a list. Please write a Python function pos_count(list) for the task.\n```python": [
        {
            "input": "[[float(i) for i in range(1, 100001)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 100001)]]",
            "output": null
        },
        {
            "input": "[[(-1)**i * i * 0.1 for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[float(i) for i in range(-50000, 50000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to count the number of set bits (binary digits with value 1) in a given number. Please write a Python function count_Set_Bits(n) for the task.\n```python": [
        {
            "input": "[int('1'*100, 2)]",
            "output": null
        },
        {
            "input": "[2**60 + 2**45 + 2**30 + 2**15]",
            "output": null
        },
        {
            "input": "[2**50]",
            "output": null
        },
        {
            "input": "[2**30]",
            "output": null
        },
        {
            "input": "[2**30 + 2**29 + 2**28 + 2**27 + 2**26]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to count the number of substrings with the sum of digits equal to their length. Please write a Python function count_Substrings(s) for the task.\n```python": [
        {
            "input": "['9' * 100000]",
            "output": null
        },
        {
            "input": "['123456789' * 11111 + '12345678']",
            "output": null
        },
        {
            "input": "['123456789' * 11111 + '123456']",
            "output": null
        },
        {
            "input": "['2' * 50000 + '3' * 50000]",
            "output": null
        },
        {
            "input": "['1234567890' * 10000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to count the occurence of all elements of list in a tuple. Please write a Python function count_Occurrence(tup, lst) for the task.\n```python": [
        {
            "input": "[tuple(range(1, 10001)), list(range(1, 10001))]",
            "output": null
        },
        {
            "input": "[tuple(range(5000)) + tuple(range(5000)), list(range(5000))]",
            "output": null
        },
        {
            "input": "[tuple(range(1000)), list(range(1000))]",
            "output": null
        },
        {
            "input": "[tuple(['a'] * 2500 + ['b'] * 2500 + ['c'] * 2500 + ['d'] * 2500), ['a', 'b', 'c', 'd']]",
            "output": null
        },
        {
            "input": "[('x', 'y', 'z') * 3333 + ('x',), ['x', 'y', 'z']]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to count the upper case characters in a given string. Please write a Python function upper_ctr(str) for the task.\n```python": [
        {
            "input": "['TheQuickBrownFoxJumpsOverTheLazyDog'*250]",
            "output": null
        },
        {
            "input": "['LOREMipsumDOLORsitAMET'*500]",
            "output": null
        },
        {
            "input": "['UPPERlower'*1000]",
            "output": null
        },
        {
            "input": "['LOREMipsumDOLORsitAMET'*250 + 'consecteturADIPISICINGelit'*250]",
            "output": null
        },
        {
            "input": "[''*5000 + 'ABCDE'*2000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to count true booleans in the given list. Please write a Python function count(lst) for the task.\n```python": [
        {
            "input": "[[False] * 100000]",
            "output": null
        },
        {
            "input": "[[False] * 99999 + [True]]",
            "output": null
        },
        {
            "input": "[[True if i % 5 == 0 else False for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[True] * 33333 + [False] * 66667]",
            "output": null
        },
        {
            "input": "[[True if i % 3 == 0 else False for i in range(100000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find a pair with highest product from a given array of integers. Please write a Python function max_Product(arr) for the task.\n```python": [
        {
            "input": "[[i * 2 for i in range(1, 5000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(-10**3, 10**3)]]",
            "output": null
        },
        {
            "input": "[[i**2 for i in range(1, 1001)]]",
            "output": null
        },
        {
            "input": "[list(range(-500, 500))]",
            "output": null
        },
        {
            "input": "[[i for i in range(-1000, 1000, 2)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find quotient of two numbers (rounded down to the nearest integer). Please write a Python function find(n,m) for the task.\n```python": [
        {
            "input": "[2**31 - 1, 2]",
            "output": null
        },
        {
            "input": "[-2**31, -1]",
            "output": null
        },
        {
            "input": "[10**5, -3]",
            "output": null
        },
        {
            "input": "[-10**5, 3]",
            "output": null
        },
        {
            "input": "[99999, 1]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find smallest number in a list. Please write a Python function smallest_num(xs) for the task.\n```python": [
        {
            "input": "[[float(i) for i in range(-50000, 50000)]]",
            "output": null
        },
        {
            "input": "[[i/10 for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[list(range(100000, 0, -1))]",
            "output": null
        },
        {
            "input": "[list(range(-100000, 0))]",
            "output": null
        },
        {
            "input": "[[i * (-1)**i for i in range(100000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the average of cubes of first n natural numbers. Please write a Python function find_Average_Of_Cube(n) for the task.\n```python": [
        {
            "input": "[9998]",
            "output": null
        },
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[8888]",
            "output": null
        },
        {
            "input": "[8765]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26. Please write a Python function get_Char(strr) for the task.\n```python": [
        {
            "input": "[\"mixedcase\" * 1250 + \"example\" * 2000]",
            "output": null
        },
        {
            "input": "[\"data\" * 2500 + \"science\" * 1500]",
            "output": null
        },
        {
            "input": "[\"performance\" * 909 + \"benchmark\" * 1111]",
            "output": null
        },
        {
            "input": "[\"stress\" * 1666 + \"test\" * 2500]",
            "output": null
        },
        {
            "input": "[\"testing\" * 1428 + \"1234567890\" * 714]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the cube sum of first n even natural numbers. Please write a Python function cube_Sum(n) for the task.\n```python": [
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[9753]",
            "output": null
        },
        {
            "input": "[8765]",
            "output": null
        },
        {
            "input": "[8642]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the element of a list having maximum length. Please write a Python function Find_Max(lst) for the task.\n```python": [
        {
            "input": "[[[i for i in range(500)], [i for i in range(1000)], [i for i in range(1500)], [i for i in range(2000)]]]",
            "output": null
        },
        {
            "input": "[[list(range(1, 1001)), list(range(1, 2001)), list(range(1, 1501))]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(1000)], [i for i in range(2000)], [i for i in range(1500)]]]",
            "output": null
        },
        {
            "input": "[[list(range(10**3)), list(range(10**3 + 1)), list(range(10**3 - 1))]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(10**2)], [i for i in range(10**3)], [i for i in range(10**4)]]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the element that appears only once in a sorted array. Please write a Python function search(arr) for the task.\n```python": [
        {
            "input": "[[x for x in range(1, 10**5, 2) for _ in range(2)] + [10**5]]",
            "output": null
        },
        {
            "input": "[[1] * 50000 + [2] * 49999 + [3]]",
            "output": null
        },
        {
            "input": "[[1] * 99998 + [2] * 2]",
            "output": null
        },
        {
            "input": "[[x for x in range(1, 50000) for _ in range(2)] + [10**5]]",
            "output": null
        },
        {
            "input": "[[x for x in range(1, 10**5//2) for _ in range(2)] + [10**5]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the first digit of a given number. Please write a Python function first_Digit(n) for the task.\n```python": [
        {
            "input": "[12345678901234567890]",
            "output": null
        },
        {
            "input": "[9876543210123456789]",
            "output": null
        },
        {
            "input": "[1020304050607080900]",
            "output": null
        },
        {
            "input": "[1000000000000000]",
            "output": null
        },
        {
            "input": "[999999999999999]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the first non-repeated character in a given string. Please write a Python function first_non_repeating_character(str1) for the task.\n```python": [
        {
            "input": "['abcdefghijklmnopqrstuvwxyz' * 1000]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(97, 123)) * 400 + 'e' + ''.join(chr(i) for i in range(97, 123)) * 200 + 'f']",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(97, 123)) * 400 + 'g' + ''.join(chr(i) for i in range(97, 123)) * 200 + 'h']",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(97, 123)) * 400 + 'd' + ''.join(chr(i) for i in range(97, 123)) * 200]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(97, 123)) * 200 + 'x' + ''.join(chr(i) for i in range(97, 123)) * 300]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the highest power of 2 that is less than or equal to n. Please write a Python function highest_Power_of_2(n) for the task.\n```python": [
        {
            "input": "[2**15 - 1]",
            "output": null
        },
        {
            "input": "[2**14 - 1]",
            "output": null
        },
        {
            "input": "[8191]",
            "output": null
        },
        {
            "input": "[2**13 - 1]",
            "output": null
        },
        {
            "input": "[4095]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the largest number that can be formed with the given list of digits. Please write a Python function find_Max_Num(arr) for the task.\n```python": [
        {
            "input": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] * 10000]",
            "output": null
        },
        {
            "input": "[[9, 8, 7, 6, 5, 4, 3, 2, 1, 0] * 10000]",
            "output": null
        },
        {
            "input": "[[i % 10 for i in range(99999)]]",
            "output": null
        },
        {
            "input": "[[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9] * 6666]",
            "output": null
        },
        {
            "input": "[[9] * 100000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the last digit of a given number. Please write a Python function last_Digit(n) for the task.\n```python": [
        {
            "input": "[-1234567890]",
            "output": null
        },
        {
            "input": "[1234567890]",
            "output": null
        },
        {
            "input": "[11**10]",
            "output": null
        },
        {
            "input": "[13**10]",
            "output": null
        },
        {
            "input": "[0]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the length of the longest word. Please write a Python function len_log(list1) for the task.\n```python": [
        {
            "input": "[['a' * 1] * 100000]",
            "output": null
        },
        {
            "input": "[['prefix' + 'x' * i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[['x' * i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[['a' * i for i in range(1000, 1100)]]",
            "output": null
        },
        {
            "input": "[['prefix' + 'x' * i for i in range(5000, 5100)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the length of the smallest list in a list of lists. Please write a Python function Find_Min_Length(lst) for the task.\n```python": [
        {
            "input": "[[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]]",
            "output": null
        },
        {
            "input": "[[[1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]]",
            "output": null
        },
        {
            "input": "[[[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]]",
            "output": null
        },
        {
            "input": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]]]",
            "output": null
        },
        {
            "input": "[[[1, 2], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6], [1]]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the maximum difference between any two elements in a given array. Please write a Python function max_Abs_Diff(arr) for the task.\n```python": [
        {
            "input": "[list(range(100000, 0, -1)) + list(range(1, 100001))]",
            "output": null
        },
        {
            "input": "[[i * 0.1 for i in range(-50000, 50001)]]",
            "output": null
        },
        {
            "input": "[[2.5] * 100000]",
            "output": null
        },
        {
            "input": "[[-0.1 * i for i in range(1, 100001)]]",
            "output": null
        },
        {
            "input": "[[float(i) for i in range(-50000, 50001)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the maximum of two numbers. Please write a Python function maximum(a,b) for the task.\n```python": [
        {
            "input": "[1, float('inf')]",
            "output": null
        },
        {
            "input": "[10, float('nan')]",
            "output": null
        },
        {
            "input": "[-1, float('-inf')]",
            "output": null
        },
        {
            "input": "[float('-inf'), -1]",
            "output": null
        },
        {
            "input": "[float('nan'), 10]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the minimum of two numbers. Please write a Python function minimum(a,b) for the task.\n```python": [
        {
            "input": "[float('inf'), 100000]",
            "output": null
        },
        {
            "input": "[float('-inf'), -100000]",
            "output": null
        },
        {
            "input": "[-1.5, -1.6]",
            "output": null
        },
        {
            "input": "[-0.0001, -0.0002]",
            "output": null
        },
        {
            "input": "[float('inf'), float('-inf')]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the next perfect square greater than a given number. Please write a Python function next_Perfect_Square(N) for the task.\n```python": [
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[1023]",
            "output": null
        },
        {
            "input": "[1234]",
            "output": null
        },
        {
            "input": "[999]",
            "output": null
        },
        {
            "input": "[5000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the number of divisors of a given integer. Please write a Python function divisor(n) for the task.\n```python": [
        {
            "input": "[10008]",
            "output": null
        },
        {
            "input": "[10003]",
            "output": null
        },
        {
            "input": "[10001]",
            "output": null
        },
        {
            "input": "[9800]",
            "output": null
        },
        {
            "input": "[9801]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times. Please write a Python function odd_Equivalent(s,n) for the task.\n```python": [
        {
            "input": "['1' * 100000, 100000]",
            "output": null
        },
        {
            "input": "['0' + '1' * 99999, 100000]",
            "output": null
        },
        {
            "input": "['111000' * 16666 + '111000', 100000]",
            "output": null
        },
        {
            "input": "['10' * 50000, 100000]",
            "output": null
        },
        {
            "input": "['101010' * 16666 + '101010', 100000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the product of the array multiplication modulo n. Please write a Python function find_remainder(arr, n) for the task.\n```python": [
        {
            "input": "[[i for i in range(1, 10**4 + 1)], 1000000007]",
            "output": null
        },
        {
            "input": "[[1.01] * 10000, 10007]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 5001)] + [i for i in range(1, 5001)], 100003]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 10001)], 99991]",
            "output": null
        },
        {
            "input": "[[5] * 9999, 1000003]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the smallest power of 2 greater than or equal to n. Please write a Python function next_power_of_2(n) for the task.\n```python": [
        {
            "input": "[2**31 + 1]",
            "output": null
        },
        {
            "input": "[2**30 + 1]",
            "output": null
        },
        {
            "input": "[(2**31) - 1]",
            "output": null
        },
        {
            "input": "[2**30 - 1]",
            "output": null
        },
        {
            "input": "[2**20 + 3]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the sublist having minimum length. Please write a Python function Find_Min(lst) for the task.\n```python": [
        {
            "input": "[[[1]*1000, [2]*2000, [3]*3000, [4]*4000, [5]*5000, [6]*6000, [7]*7000, [8]*8000, [9]*9000, [10]*10000]]",
            "output": null
        },
        {
            "input": "[[[1]*100, [2]*200, [3]*300, [4]*400, [5]*500, [6]*600, [7]*700, [8]*800, [9]*900, [10]*1000]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(100)], [j for j in range(200)], [k for k in range(300)], [l for l in range(400)], [m for m in range(500)], [n for n in range(600)], [o for o in range(700)], [p for p in range(800)], [q for q in range(900)], [r for r in range(1000)]]]",
            "output": null
        },
        {
            "input": "[[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30]]]",
            "output": null
        },
        {
            "input": "[[['x']*5000, ['y']*6000, ['z']*7000, ['a']*8000, ['b']*9000]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the sum of common divisors of two given numbers. Please write a Python function sum(a,b) for the task.\n```python": [
        {
            "input": "[12345678, 87654321]",
            "output": null
        },
        {
            "input": "[123456, 789012]",
            "output": null
        },
        {
            "input": "[100000, 100000]",
            "output": null
        },
        {
            "input": "[10**5, 10**5 - 1]",
            "output": null
        },
        {
            "input": "[10**5 - 1, 10**5 - 4]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the sum of even factors of a number. Please write a Python function sumofFactors(n) for the task.\n```python": [
        {
            "input": "[8192]",
            "output": null
        },
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9998]",
            "output": null
        },
        {
            "input": "[4096]",
            "output": null
        },
        {
            "input": "[5678]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the sum of even numbers at even positions of a list. Please write a Python function sum_even_and_even_index(arr) for the task.\n```python": [
        {
            "input": "[[10**6] * 100000]",
            "output": null
        },
        {
            "input": "[[i if i % 2 == 0 else 0 for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[i * (-1)**i for i in range(100000)]]",
            "output": null
        },
        {
            "input": "[[i if i % 2 != 0 else 0 for i in range(100000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the sum of the largest and smallest value in a given array. Please write a Python function big_sum(nums) for the task.\n```python": [
        {
            "input": "[[i for i in range(-10**4, 10**4)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10**4)]]",
            "output": null
        },
        {
            "input": "[[i * (-1)**i for i in range(1, 10**4)]]",
            "output": null
        },
        {
            "input": "[[(-1)**i * i for i in range(1, 10**4)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(-5000, 5000) if i % 2 == 0]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find the volume of a triangular prism. Please write a Python function find_Volume(l,b,h) for the task.\n```python": [
        {
            "input": "[99999, 88888, 77777]",
            "output": null
        },
        {
            "input": "[98765, 43210, 11111]",
            "output": null
        },
        {
            "input": "[99999, 99999, 1]",
            "output": null
        },
        {
            "input": "[50000, 50000, 2]",
            "output": null
        },
        {
            "input": "[12345, 67890, 54321]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find whether a number is divisible by 11. Please write a Python function is_Diff(n) for the task.\n```python": [
        {
            "input": "[int('8'*99 + '7')]",
            "output": null
        },
        {
            "input": "[int('2'*99 + '1')]",
            "output": null
        },
        {
            "input": "[int('8'*99 + '0')]",
            "output": null
        },
        {
            "input": "[int('9'*100)]",
            "output": null
        },
        {
            "input": "[int('7'*50 + '6'*50)]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to find whether the parity of a given number is odd. Please write a Python function find_Parity(x) for the task.\n```python": [
        {
            "input": "[-10**4]",
            "output": null
        },
        {
            "input": "[-9999]",
            "output": null
        },
        {
            "input": "[-10**4 + 1]",
            "output": null
        },
        {
            "input": "[-2]",
            "output": null
        },
        {
            "input": "[2147483646]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to get the first element of each sublist. Please write a Python function Extract(lst) for the task.\n```python": [
        {
            "input": "[[[i] for i in range(10**4)]]",
            "output": null
        },
        {
            "input": "[[[1, 2]] * 5000]",
            "output": null
        },
        {
            "input": "[[[i, i+1] for i in range(5000)]]",
            "output": null
        },
        {
            "input": "[[[i for i in range(5)] for _ in range(2000)]]",
            "output": null
        },
        {
            "input": "[[[1] * 1000 for _ in range(1000)]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to remove first and last occurrence of a given character from the string. Please write a Python function remove_Occ(s,ch) for the task.\n```python": [
        {
            "input": "['a' * 100000 + 'b' + 'a' * 100000, 'b']",
            "output": null
        },
        {
            "input": "['e' * 99999 + 'f' + 'e' * 99999, 'f']",
            "output": null
        },
        {
            "input": "['r' * 99999 + 's' + 'r', 's']",
            "output": null
        },
        {
            "input": "['' + 'j' * 99999 + 'k', 'k']",
            "output": null
        },
        {
            "input": "['n' * 99999 + 'o', 'o']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to remove odd numbers from a given list. Please write a Python function remove_odd(l) for the task.\n```python": [
        {
            "input": "[[i for i in range(-10000, 10000) if i % 2 != 0]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 10001) if i % 29 != 0]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 10001) if i % 23 != 0]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 10001) if i % 19 != 0]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 10001) if i % 17 != 0]]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to remove the characters which have odd index values of a given string. Please write a Python function odd_values_string(str) for the task.\n```python": [
        {
            "input": "[''.join(chr(i%256) for i in range(10**5))]",
            "output": null
        },
        {
            "input": "[''.join(chr(i%256) for i in range(100000))]",
            "output": null
        },
        {
            "input": "[''.join(chr((i*3)%256) for i in range(99999))]",
            "output": null
        },
        {
            "input": "[''.join(chr(i%256) for i in range(99999))]",
            "output": null
        },
        {
            "input": "['a' * 10**5]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to return the negative numbers in a list. Please write a Python function neg_nos(list1) for the task.\n```python": [
        {
            "input": "[[-i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[i / 10.0 for i in range(-5000, 5000)]]",
            "output": null
        },
        {
            "input": "[list(range(-5000, 5000))]",
            "output": null
        },
        {
            "input": "[[-1000] * 5000 + [1000] * 5000]",
            "output": null
        },
        {
            "input": "[[0] * 5000 + [-1] * 5000]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to reverse only the vowels of a given string (where y is not a vowel). Please write a Python function reverse_vowels(str1) for the task.\n```python": [
        {
            "input": "['AEIOU' * 20000]",
            "output": null
        },
        {
            "input": "['abcdefghijklmnopqrstuvwxyz' * 1000]",
            "output": null
        },
        {
            "input": "['Eunoia, at five letters long, is the shortest word in the English language that contains all five main vowels']",
            "output": null
        },
        {
            "input": "['A quick movement of the enemy will jeopardize six gunboats']",
            "output": null
        },
        {
            "input": "['Lorem ipsum dolor sit amet, consectetur adipiscing elit']",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to set all even bits of a given number. Please write a Python function even_bit_set_number(n) for the task.\n```python": [
        {
            "input": "[2**30]",
            "output": null
        },
        {
            "input": "[2**31 - 1]",
            "output": null
        },
        {
            "input": "[2**25]",
            "output": null
        },
        {
            "input": "[2**24 - 1]",
            "output": null
        },
        {
            "input": "[2**23 + 123456]",
            "output": null
        }
    ],
    "You are an expert Python programmer, and here is your task: Write a python function to set the left most unset bit. Please write a Python function set_left_most_unset_bit(n) for the task.\n```python": [
        {
            "input": "[128]",
            "output": null
        },
        {
            "input": "[64]",
            "output": null
        },
        {
            "input": "[32]",
            "output": null
        },
        {
            "input": "[16]",
            "output": null
        },
        {
            "input": "[8]",
            "output": null
        }
    ],
    "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"": [
        {
            "input": "['ClassF', [f'{chr(65 + (i % 26)) * (i % 100)}{chr(97 + (i % 26)) * (100 - (i % 100))}' for i in range(1000)]]",
            "output": null
        },
        {
            "input": "['ClassG', [f'Ext{i}' for i in range(10000)]]",
            "output": null
        },
        {
            "input": "['LongClassName', ['MmNnOoPp' * 3000, 'QqRrSsTt' * 2000, 'UuVvWwXx' * 1000]]",
            "output": null
        },
        {
            "input": "['ExampleClass', ['PpQqRrSs' * 2000, 'TtUuVv' * 3333, 'WwXxYyZz' * 2500]]",
            "output": null
        },
        {
            "input": "['EdgeCase', ['AaBbCc' * 1500, 'DdEeFf' * 1750, 'GgHhIi' * 2000, 'JjKkLl' * 2250]]",
            "output": null
        }
    ],
    "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"": [
        {
            "input": "[[0] * 10000]",
            "output": null
        },
        {
            "input": "[[x if x % 2 == 0 else x + 1 for x in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[2**i % 100 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i % 3 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i*2 for i in range(1, 5001)] + [i*2-1 for i in range(1, 5001)]]",
            "output": null
        }
    ],
    "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"": [
        {
            "input": "[1234, 5678]",
            "output": null
        },
        {
            "input": "[9999, 1]",
            "output": null
        },
        {
            "input": "[8765, 4321]",
            "output": null
        },
        {
            "input": "[2, 9998]",
            "output": null
        },
        {
            "input": "[1024, 2048]",
            "output": null
        }
    ],
    "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"": [
        {
            "input": "[[10**i for i in range(1, 101)], 100]",
            "output": null
        },
        {
            "input": "[[int('9' * i) for i in range(1, 101)], 100]",
            "output": null
        },
        {
            "input": "[[i % 150 for i in range(100)], 100]",
            "output": null
        },
        {
            "input": "[[i ** 2 % 123 for i in range(1, 101)], 100]",
            "output": null
        },
        {
            "input": "[[int('9' * (i % 3 + 1)) for i in range(1, 101)], 100]",
            "output": null
        }
    ],
    "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"": [
        {
            "input": "[' '.join(['a' * (i % 100) for i in range(10000)])]",
            "output": null
        },
        {
            "input": "[' '.join(['Complex' + '?' * i for i in range(1000)])]",
            "output": null
        },
        {
            "input": "[' '.join(['Hello' + '!' * i for i in range(1000)])]",
            "output": null
        },
        {
            "input": "[' '.join([str(i) for i in range(10000)])]",
            "output": null
        },
        {
            "input": "[' '.join(['Test' + '!' * i for i in range(500)])]",
            "output": null
        }
    ],
    "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''": [
        {
            "input": "[123456789, 987654321, -864197532]",
            "output": null
        },
        {
            "input": "[100000, 50000, 50000]",
            "output": null
        },
        {
            "input": "[10**4, 10**4 - 1, 1]",
            "output": null
        },
        {
            "input": "[10**3, 10**3 - 1, -1]",
            "output": null
        },
        {
            "input": "[999999999, 999999999, 1999999998]",
            "output": null
        }
    ],
    "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"": [
        {
            "input": "[[1.1, 2.2, 3.3, 4.4, 5.5]*2000, 6]",
            "output": null
        },
        {
            "input": "[[float(i) for i in range(10000)], 10000]",
            "output": null
        },
        {
            "input": "[[0.1 * i for i in range(10000)], 1000]",
            "output": null
        },
        {
            "input": "[[True, False] * 5000, 2]",
            "output": null
        },
        {
            "input": "[[True]*5000 + [False]*4999 + [10001], 10000]",
            "output": null
        }
    ],
    "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''": [
        {
            "input": "['Neptune', 'Mars']",
            "output": null
        },
        {
            "input": "['Jupiter', 'Uranus']",
            "output": null
        },
        {
            "input": "['Saturn', 'Jupiter']",
            "output": null
        },
        {
            "input": "['Neptune', 'Mercury']",
            "output": null
        },
        {
            "input": "['Mercury', 'Neptune']",
            "output": null
        }
    ],
    "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"": [
        {
            "input": "[list(range(-10000, 10001))]",
            "output": null
        },
        {
            "input": "[[i if i % 2 == 0 else -i for i in range(1, 10**4 + 1)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10**4, 0, -1)]]",
            "output": null
        },
        {
            "input": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] * 500]",
            "output": null
        },
        {
            "input": "[[-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9] * 500]",
            "output": null
        }
    ],
    "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"": [
        {
            "input": "[[10000 - i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[list(range(10000, 0, -1))]",
            "output": null
        },
        {
            "input": "[list(range(9999, -1, -1))]",
            "output": null
        },
        {
            "input": "[[i if i % 2 == 0 else i - 2 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i**2 for i in range(10000)]]",
            "output": null
        }
    ],
    "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"": [
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[5000]",
            "output": null
        },
        {
            "input": "[1234]",
            "output": null
        },
        {
            "input": "[8765]",
            "output": null
        },
        {
            "input": "[10000]",
            "output": null
        }
    ],
    "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"": [
        {
            "input": "[8888, 2]",
            "output": null
        },
        {
            "input": "[8191, 2]",
            "output": null
        },
        {
            "input": "[1024, 2]",
            "output": null
        },
        {
            "input": "[9876, 3]",
            "output": null
        },
        {
            "input": "[10000, 3]",
            "output": null
        }
    ],
    "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"": [
        {
            "input": "[{'apple': 'a', 'banana': 'b', 'cherry': 'c', 'date': 'd', 'elderberry': 'e', 'fig': 'f', 'grape': 'g', 'honeydew': 'h', 'kiwi': 'i', 'lemon': 'j', 'kumquat': 'k', 'lychee': 'l', 'mango': 'm', 'nectarine': 'n', 'orange': 'o', 'papaya': 'p', 'quince': 'q', 'raspberry': 'r', 'strawberry': 's', 'tangerine': 't', 'ugli fruit': 'u', 'vanilla': 'v', 'watermelon': 'w', 'xigua': 'x', 'yellow passion fruit': 'y', 'zucchini': 'z'}]",
            "output": null
        },
        {
            "input": "[{'a'*i: 'value' for i in range(1, 5001)} | {'A'*i: 'value' for i in range(5001, 10001)}]",
            "output": null
        },
        {
            "input": "[{'a'*i: 'value' for i in range(1, 10001)}]",
            "output": null
        },
        {
            "input": "[{'a': 'apple', 'B': 'banana', 'c': 'cherry', 'D': 'date', 'e': 'elderberry', 'F': 'fig', 'g': 'grape', 'H': 'honeydew', 'i': 'kiwi', 'J': 'lemon'}]",
            "output": null
        },
        {
            "input": "[{'a': 'apple', 'B': 'banana', 'c': 'cherry', 'D': 'date', 'e': 'elderberry', 'F': 'fig', 'g': 'grape', 'H': 'honeydew', 'i': 'iceberg lettuce'}]",
            "output": null
        }
    ],
    "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''": [
        {
            "input": "[' ' * 9999 + 'a']",
            "output": null
        },
        {
            "input": "['1' + ' ' * 9998 + 'a']",
            "output": null
        },
        {
            "input": "[' ' * 10000]",
            "output": null
        },
        {
            "input": "[' ' * 5000 + 'a' * 5000]",
            "output": null
        },
        {
            "input": "['a' * 5000 + ' b' + ' ' * 4999]",
            "output": null
        }
    ],
    "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"": [
        {
            "input": "[999, 1001]",
            "output": null
        },
        {
            "input": "[2, 9999]",
            "output": null
        },
        {
            "input": "[1, 9999]",
            "output": null
        },
        {
            "input": "[11, 13]",
            "output": null
        },
        {
            "input": "[100, 101]",
            "output": null
        }
    ],
    "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"": [
        {
            "input": "[12345678901234567890, 10]",
            "output": null
        },
        {
            "input": "[1357924680, 5]",
            "output": null
        },
        {
            "input": "[999999999999999, 1]",
            "output": null
        },
        {
            "input": "[9999999999, 1]",
            "output": null
        },
        {
            "input": "[1234567890123456, 16]",
            "output": null
        }
    ],
    "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''": [
        {
            "input": "['1234567890.123456789']",
            "output": null
        },
        {
            "input": "['-9876543210.987654321']",
            "output": null
        },
        {
            "input": "['-2.718281828459045']",
            "output": null
        },
        {
            "input": "['3.141592653589793']",
            "output": null
        },
        {
            "input": "['-9999999999.999']",
            "output": null
        }
    ],
    "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"": [
        {
            "input": "[[1]*5000 + [i for i in range(5000)], [i for i in range(5000, 10000)] + [1]*5000]",
            "output": null
        },
        {
            "input": "[[i for i in range(10000)], [9999 - i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[list(range(10000, 20000)), list(range(15000, 25000))]",
            "output": null
        },
        {
            "input": "[[i for i in range(10000)], [i for i in range(5000, 15000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(9999, -1, -1)], [i for i in range(5000, 15000)]]",
            "output": null
        }
    ],
    "def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"": [
        {
            "input": "[[i * (-1)**i for i in range(10000)], [i * (1)**i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10000)], [(-i) for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[int(i/2) for i in range(10000)], [int(i/3) for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[(-1)**i * (i % 100) for i in range(10000)], [(-1)**(i+1) * ((i+10) % 100) for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[(-1)**i * (i % 10) for i in range(10000)], [(-1)**(i+1) * ((i+5) % 10) for i in range(10000)]]",
            "output": null
        }
    ],
    "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"": [
        {
            "input": "['1000,0000000000001', '1000.0000000000002']",
            "output": null
        },
        {
            "input": "['-9999999999999999,9999999999999999', float('-inf')]",
            "output": null
        },
        {
            "input": "[float('inf'), '9999999999999999,9999999999999999']",
            "output": null
        },
        {
            "input": "['123456789123456789', '123456789123456789.0']",
            "output": null
        },
        {
            "input": "['1234567890,1234567890', 1234567890.1234567890]",
            "output": null
        }
    ],
    "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"": [
        {
            "input": "['(' * 5000 + ')' * 5000]",
            "output": null
        },
        {
            "input": "['((' * 2500 + '))' * 2500]",
            "output": null
        },
        {
            "input": "['(' * 4999 + ')' * 5000]",
            "output": null
        },
        {
            "input": "['(()(()))' * 1250 + '()())']",
            "output": null
        },
        {
            "input": "['(((())))' * 1250]",
            "output": null
        }
    ],
    "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"": [
        {
            "input": "['<' * 10000 + '>' * 10000]",
            "output": null
        },
        {
            "input": "['<' * 9999 + '>' * 9999 + '>']",
            "output": null
        },
        {
            "input": "['<><<>>' * 3333 + '<']",
            "output": null
        },
        {
            "input": "['<><><>' * 3333 + '<>']",
            "output": null
        },
        {
            "input": "['<><<><<>>><>' * 1250]",
            "output": null
        }
    ],
    "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"": [
        {
            "input": "['a' * 10000 + 'A' * 10000 + 'b' * 9999 + 'B' * 9999]",
            "output": null
        },
        {
            "input": "['a' * 5000 + 'B' * 5000 + 'c' * 5000 + 'D' * 5000]",
            "output": null
        },
        {
            "input": "['a' * 5000 + 'A' * 5000 + 'b' * 5000 + 'B' * 5000]",
            "output": null
        },
        {
            "input": "['a' * 5000 + 'A' * 5000 + 'b' * 4999 + 'B' * 4999]",
            "output": null
        },
        {
            "input": "['AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz' * 333]",
            "output": null
        }
    ],
    "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"": [
        {
            "input": "[[int(x) for x in range(-9999, 10000)]]",
            "output": null
        },
        {
            "input": "[[(-1)**i * i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[x if x % 2 == 0 else -x for x in range(1, 10000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(-5000, 5000)]]",
            "output": null
        },
        {
            "input": "[[int(x) for x in range(-5000, 5000)]]",
            "output": null
        }
    ],
    "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"": [
        {
            "input": "[9998]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9973]",
            "output": null
        },
        {
            "input": "[9876]",
            "output": null
        }
    ],
    "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"": [
        {
            "input": "['U'*5000 + 'O'*5000 + 'I'*5000 + 'E'*5000]",
            "output": null
        },
        {
            "input": "['A'*2500 + 'E'*2500 + 'I'*2500 + 'O'*2500 + 'U'*2500]",
            "output": null
        },
        {
            "input": "[''*2500 + 'A'*2500 + 'E'*2500 + 'I'*2500 + 'O'*2500 + 'U'*2500]",
            "output": null
        },
        {
            "input": "['A'*5000 + 'O'*5000]",
            "output": null
        },
        {
            "input": "['A'*2500 + 'E'*2500 + 'I'*2500 + 'O'*2500]",
            "output": null
        }
    ],
    "def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"": [
        {
            "input": "['qwertyuiopasdfghjklzxcvbnm' * 400, 'mnbvcxzlkjhgfdsapoiuytrewq']",
            "output": null
        },
        {
            "input": "['xxxyyyzzz' * 3333 + 'xyz', 'zyxzyx']",
            "output": null
        },
        {
            "input": "['hello' * 2000 + 'world', 'worldhello']",
            "output": null
        },
        {
            "input": "['1234567890' * 1000, '0987654321']",
            "output": null
        },
        {
            "input": "['thequickbrownfox' * 600, 'foxquick']",
            "output": null
        }
    ],
    "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"": [
        {
            "input": "[262143]",
            "output": null
        },
        {
            "input": "[5000]",
            "output": null
        },
        {
            "input": "[8191]",
            "output": null
        },
        {
            "input": "[4096]",
            "output": null
        },
        {
            "input": "[131071]",
            "output": null
        }
    ],
    "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"": [
        {
            "input": "[[0.001 * i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[(-10**3) * (i % 2) for i in range(1500)]]",
            "output": null
        },
        {
            "input": "[[0.1 * i for i in range(1000)]]",
            "output": null
        },
        {
            "input": "[[(i % 5 - 2) * 10**4 for i in range(1000)]]",
            "output": null
        },
        {
            "input": "[[1] * 1000]",
            "output": null
        }
    ],
    "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"": [
        {
            "input": "[''.join(chr(i) if i % 5 == 0 else chr(i).lower() for i in range(65, 123)) * 300 + 'B' * 500]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) if i % 3 == 0 else chr(i).lower() for i in range(65, 123)) * 250]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(65, 91) if i % 2 == 0) * 500 + ''.join(chr(i).lower() for i in range(65, 91) if i % 2 != 0) * 500]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) if i % 2 == 0 else chr(i).lower() for i in range(65, 91)) * 400 + 'z' * 2000]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(65, 91))*400]",
            "output": null
        }
    ],
    "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"": [
        {
            "input": "[13579135791357913579]",
            "output": null
        },
        {
            "input": "[11111111111111111111]",
            "output": null
        },
        {
            "input": "[1111111111111111111]",
            "output": null
        },
        {
            "input": "[12345678901234567890]",
            "output": null
        },
        {
            "input": "[13579086421357908642]",
            "output": null
        }
    ],
    "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"": [
        {
            "input": "[['-']*5000 + ['+']*5000, [i for i in range(1, 10002)]]",
            "output": null
        },
        {
            "input": "[['+']*9999, [1]*10000]",
            "output": null
        },
        {
            "input": "[['+']*1000, list(range(1, 1002))]",
            "output": null
        },
        {
            "input": "[['*']*1000, [2]*1001]",
            "output": null
        },
        {
            "input": "[['*', '+', '-', '**', '//'], [123, 456, 789, 1011, 1213, 1415]]",
            "output": null
        }
    ],
    "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''": [
        {
            "input": "[[1, 3, 5, 7, 9] * 2000]",
            "output": null
        },
        {
            "input": "[[i for i in range(-10000, 10001)]]",
            "output": null
        },
        {
            "input": "[[-i if i % 2 != 0 else i for i in range(-10000, 0)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 10001) if i % 2 != 0]]",
            "output": null
        },
        {
            "input": "[[i if i % 3 != 0 else -i for i in range(1, 10001)]]",
            "output": null
        }
    ],
    "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"": [
        {
            "input": "[999, 1, 1000]",
            "output": null
        },
        {
            "input": "[789, 210, 987]",
            "output": null
        },
        {
            "input": "[500, 500, 1000]",
            "output": null
        },
        {
            "input": "[1000, 0, 1000]",
            "output": null
        },
        {
            "input": "[0, 999, 1000]",
            "output": null
        }
    ],
    "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"": [
        {
            "input": "[''.join(['M' + 'u' * 9999])]",
            "output": null
        },
        {
            "input": "[''.join(['a' if i % 2 == 0 else 'e' for i in range(10000)])]",
            "output": null
        },
        {
            "input": "[' '.join([''.join([''.join(['aeiouAEIOU'[(i % 10)] for i in range(100)]) for _ in range(5)]) for _ in range(20)])]",
            "output": null
        },
        {
            "input": "[''.join(['AEIOUaeiou'[(i % 10)] for i in range(9999)])]",
            "output": null
        },
        {
            "input": "[''.join(['A' if i % 2 == 0 else 'E' for i in range(10000)])]",
            "output": null
        }
    ],
    "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"": [
        {
            "input": "[''.join(['xyz' for _ in range(3333)])]",
            "output": null
        },
        {
            "input": "[''.join(['1234567890' for _ in range(1000)]) + '12345']",
            "output": null
        },
        {
            "input": "[''.join(['hello' for _ in range(2000)]) + 'hel']",
            "output": null
        },
        {
            "input": "[''.join([''.join(['a' if j%2==0 else 'b' for j in range(4)]) for i in range(2500)])]",
            "output": null
        },
        {
            "input": "[''.join(['abc' for _ in range(3333)]) + 'de']",
            "output": null
        }
    ],
    "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"": [
        {
            "input": "['qwertyuiopasdfghjklzxcvbnm' * 385]",
            "output": null
        },
        {
            "input": "['sphinxofblackquartzjudgemyvow' * 345]",
            "output": null
        },
        {
            "input": "['abcdefghijklmnopqrstuvwxy' * 400]",
            "output": null
        },
        {
            "input": "['abcdefghijklmnopqrstuvwxyz' * 384]",
            "output": null
        },
        {
            "input": "['thequickbrownfoxjumpsoverthelazydog' * 285]",
            "output": null
        }
    ],
    "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"": [
        {
            "input": "['abcdefghijklmnopqrstuvwxyz' + 'a' * 9997]",
            "output": null
        },
        {
            "input": "[''.join(chr(97 + (i % 26)) for i in range(10000))]",
            "output": null
        },
        {
            "input": "[''.join('a' if i % 2 == 0 else 'z' for i in range(10000))]",
            "output": null
        },
        {
            "input": "['s' * 9999 + 't']",
            "output": null
        },
        {
            "input": "['hello' * 2000]",
            "output": null
        }
    ],
    "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"": [
        {
            "input": "[-10203040506070809000]",
            "output": null
        },
        {
            "input": "[10203040506070809000]",
            "output": null
        },
        {
            "input": "[-13579246801357924680]",
            "output": null
        },
        {
            "input": "[-98765432109876543210]",
            "output": null
        },
        {
            "input": "[-11223344556677889900]",
            "output": null
        }
    ],
    "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"": [
        {
            "input": "[1000]",
            "output": null
        },
        {
            "input": "[999]",
            "output": null
        },
        {
            "input": "[987]",
            "output": null
        },
        {
            "input": "[888]",
            "output": null
        },
        {
            "input": "[876]",
            "output": null
        }
    ],
    "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"": [
        {
            "input": "[[i * 2 + 1 for i in range(5000)], [i * 2 for i in range(5000)]]",
            "output": null
        },
        {
            "input": "[[1] * 5000, [i * 2 for i in range(1, 5001)]]",
            "output": null
        },
        {
            "input": "[[1, 3, 5, 7, 9] * 1000, [2, 4, 6, 8, 10] * 1000]",
            "output": null
        },
        {
            "input": "[[1] * 4999 + [2], [2] * 5000]",
            "output": null
        },
        {
            "input": "[list(range(1, 5001)), list(range(5001, 10001))]",
            "output": null
        }
    ],
    "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"": [
        {
            "input": "[3333]",
            "output": null
        },
        {
            "input": "[3000]",
            "output": null
        },
        {
            "input": "[2500]",
            "output": null
        },
        {
            "input": "[2468]",
            "output": null
        },
        {
            "input": "[2345]",
            "output": null
        }
    ],
    "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"": [
        {
            "input": "[35]",
            "output": null
        },
        {
            "input": "[34]",
            "output": null
        },
        {
            "input": "[33]",
            "output": null
        },
        {
            "input": "[32]",
            "output": null
        },
        {
            "input": "[31]",
            "output": null
        }
    ],
    "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"": [
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[9998]",
            "output": null
        },
        {
            "input": "[9876]",
            "output": null
        },
        {
            "input": "[8943]",
            "output": null
        }
    ],
    "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"": [
        {
            "input": "[28]",
            "output": null
        },
        {
            "input": "[25]",
            "output": null
        },
        {
            "input": "[22]",
            "output": null
        },
        {
            "input": "[20]",
            "output": null
        },
        {
            "input": "[18]",
            "output": null
        }
    ],
    "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"": [
        {
            "input": "['a' + '1' * 9997 + '.exe']",
            "output": null
        },
        {
            "input": "['a' + '1' * 9997 + '.txt']",
            "output": null
        },
        {
            "input": "['a' * 9999 + '1' * 3 + '.txt']",
            "output": null
        },
        {
            "input": "['a' * 9997 + '1' * 3 + 'b' + '.dll']",
            "output": null
        },
        {
            "input": "['a' * 9998 + '1' * 2 + '.exe']",
            "output": null
        }
    ],
    "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"": [
        {
            "input": "[[''.join(chr((i % 26) + 97) for i in range(1000)) for _ in range(30)]]",
            "output": null
        },
        {
            "input": "[['aa' * 2500, 'bb' * 2500, 'cc' * 2500, 'dd' * 2500, 'ee' * 2500]]",
            "output": null
        },
        {
            "input": "[['x' * 4000, 'xy' * 2000, 'xyz' * 1333, 'xyza' * 1000]]",
            "output": null
        },
        {
            "input": "[['a' * 5000, 'b' * 5000, 'ab' * 2500]]",
            "output": null
        },
        {
            "input": "[['abcdefg' * 1000, 'gfedcba' * 1000, 'abcdabcdabcdabcd']]",
            "output": null
        }
    ],
    "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"": [
        {
            "input": "['An    extremely long string with a lot of spaces ' * 1000]",
            "output": null
        },
        {
            "input": "['A'*10000 + ' ' + 'B'*10000]",
            "output": null
        },
        {
            "input": "['A'*1000 + ' ' + 'B'*1000 + ' ' * 5 + 'C'*1000]",
            "output": null
        },
        {
            "input": "['This  is a string      with   multiple spaces and  even more spaces   ']",
            "output": null
        },
        {
            "input": "['a b c    d e f g h i     j k l m n o p q r s t u    v w x y z']",
            "output": null
        }
    ],
    "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"": [
        {
            "input": "[13579]",
            "output": null
        },
        {
            "input": "[10001]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[9998]",
            "output": null
        },
        {
            "input": "[9898]",
            "output": null
        }
    ],
    "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"": [
        {
            "input": "['!@#$%^&*()_+-=[]{}|;:,.<>?`~' * 500]",
            "output": null
        },
        {
            "input": "['a' * 10000]",
            "output": null
        },
        {
            "input": "['abcdefghijklmnopqrstuvwxyz' * 384]",
            "output": null
        },
        {
            "input": "[' '.join(['aBcDeFgHiJkL' for _ in range(833)])]",
            "output": null
        },
        {
            "input": "['Aa' * 5000]",
            "output": null
        }
    ],
    "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"": [
        {
            "input": "['5000 apples and 4000 oranges', 15000]",
            "output": null
        },
        {
            "input": "['1234 apples and 4321 oranges', 10000]",
            "output": null
        },
        {
            "input": "['1000 apples and 2000 oranges', 5000]",
            "output": null
        },
        {
            "input": "['9999 apples and 9999 oranges', 30000]",
            "output": null
        },
        {
            "input": "['1234 apples and 5678 oranges', 10000]",
            "output": null
        }
    ],
    "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"": [
        {
            "input": "[1, 9998]",
            "output": null
        },
        {
            "input": "[1, 10000]",
            "output": null
        },
        {
            "input": "[10000, 1]",
            "output": null
        },
        {
            "input": "[9998, 1]",
            "output": null
        },
        {
            "input": "[9999, 1]",
            "output": null
        }
    ],
    "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"": [
        {
            "input": "['xxxyyyzzz' * 1111 + 'O' + 'aaabbbccc' * 1111]",
            "output": null
        },
        {
            "input": "['a' * 10000 + 'b']",
            "output": null
        },
        {
            "input": "['start' + 'a'*9994 + 'end']",
            "output": null
        },
        {
            "input": "['b' * 3333 + 'a' * 3333 + 'c' * 3334]",
            "output": null
        },
        {
            "input": "['xYz' * 3333 + 'O']",
            "output": null
        }
    ],
    "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"": [
        {
            "input": "[200]",
            "output": null
        },
        {
            "input": "[199]",
            "output": null
        },
        {
            "input": "[198]",
            "output": null
        },
        {
            "input": "[197]",
            "output": null
        },
        {
            "input": "[196]",
            "output": null
        }
    ],
    "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"": [
        {
            "input": "[271828182]",
            "output": null
        },
        {
            "input": "[314159265]",
            "output": null
        },
        {
            "input": "[999999]",
            "output": null
        },
        {
            "input": "[678901]",
            "output": null
        },
        {
            "input": "[9999999]",
            "output": null
        }
    ],
    "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"": [
        {
            "input": "[[i if i % 5 != 0 else -i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[i if (i % 7 != 0 and i % 11 != 0) else -i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[5]*5000 + [-3]*5000]",
            "output": null
        },
        {
            "input": "[[(-1)**i * i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[i if i % 2 == 0 else -i for i in range(1, 10001)]]",
            "output": null
        }
    ],
    "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"": [
        {
            "input": "[[[i for i in range(1000)] for _ in range(1000)], 500]",
            "output": null
        },
        {
            "input": "[[[int(j/1000) for j in range(10000)] for i in range(10)], 9]",
            "output": null
        },
        {
            "input": "[[[i for i in range(50)] + [50 for _ in range(50)] for _ in range(200)], 50]",
            "output": null
        },
        {
            "input": "[[[1] * 5000, [2] * 5000, [3] * 5000, [4] * 5000], 2]",
            "output": null
        },
        {
            "input": "[[[1 if (i + j) % 2 == 0 else 0 for i in range(100)] for j in range(100)], 1]",
            "output": null
        }
    ],
    "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"": [
        {
            "input": "[123456, 789012]",
            "output": null
        },
        {
            "input": "[29929, 39939]",
            "output": null
        },
        {
            "input": "[1234, 5678]",
            "output": null
        },
        {
            "input": "[1234, 4321]",
            "output": null
        },
        {
            "input": "[9876, 54321]",
            "output": null
        }
    ],
    "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"": [
        {
            "input": "['B'*5000 + 'D'*5000]",
            "output": null
        },
        {
            "input": "['0'*9999 + '1']",
            "output": null
        },
        {
            "input": "['F'*10000]",
            "output": null
        },
        {
            "input": "['13579BDF'*1250]",
            "output": null
        },
        {
            "input": "['23456789ABCDEF'*625]",
            "output": null
        }
    ],
    "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"": [
        {
            "input": "['a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z']",
            "output": null
        },
        {
            "input": "['z y x w v u t s r q p o n m l k j i h g f e d c b a z y x w v u t s r q p o n m l k j i h g f e d c b a z y x w v u t s r q p o n m l k j i h g f e d c b a z y x w v u t s r q p o n m l k j i h g f e d c b a z y x w v u t s r q p o n m l k j i h g f e d c b a z y x w v u t s r q p o n m l k j i h g f e d c b a']",
            "output": null
        },
        {
            "input": "['a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z']",
            "output": null
        },
        {
            "input": "['a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z']",
            "output": null
        },
        {
            "input": "['a a a a a a a a a a b b b b b b b b b b c c c c c c c c c c d d d d d d d d d d e e e e e e e e e e f f f f f f f f f f g g g g g g g g g g h h h h h h h h h h']",
            "output": null
        }
    ],
    "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"": [
        {
            "input": "['a'*9999 + 'b', 'a'*500]",
            "output": null
        },
        {
            "input": "['a' * 10000, 'aa']",
            "output": null
        },
        {
            "input": "['' + 'c'*9999, 'cc']",
            "output": null
        },
        {
            "input": "['a'*5000 + 'b'*5000, 'a'*100]",
            "output": null
        },
        {
            "input": "['abababab'*1250, 'abab']",
            "output": null
        }
    ],
    "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"": [
        {
            "input": "[[i * i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[10000 - i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(9999, -1, -1)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[1000] * 10000]",
            "output": null
        }
    ],
    "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"": [
        {
            "input": "[888]",
            "output": null
        },
        {
            "input": "[388]",
            "output": null
        },
        {
            "input": "[333]",
            "output": null
        },
        {
            "input": "[777]",
            "output": null
        },
        {
            "input": "[666]",
            "output": null
        }
    ],
    "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"": [
        {
            "input": "[[-1234, 5678], [345, 6789]]",
            "output": null
        },
        {
            "input": "[[1, 10**4], [2, 9999]]",
            "output": null
        },
        {
            "input": "[[-10**4, 10**4], [-9999, 0]]",
            "output": null
        },
        {
            "input": "[[-10**4 + 1, 10**4 - 1], [-10**4, 10**4]]",
            "output": null
        },
        {
            "input": "[[-9999, 9999], [-9998, 9998]]",
            "output": null
        }
    ],
    "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"": [
        {
            "input": "['I' + '. I' * 9999]",
            "output": null
        },
        {
            "input": "['I' + '!' * 5000 + '? ' + 'I' + '.' * 4999]",
            "output": null
        },
        {
            "input": "['I.' * 5000]",
            "output": null
        },
        {
            "input": "['I' + '?' * 2500 + '. ' + 'I' + '!' * 2500]",
            "output": null
        },
        {
            "input": "['I' + '. I' * 1000 + '. I am tired.']",
            "output": null
        }
    ],
    "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"": [
        {
            "input": "[2]",
            "output": null
        },
        {
            "input": "[1000]",
            "output": null
        },
        {
            "input": "[9998]",
            "output": null
        },
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[1234]",
            "output": null
        }
    ],
    "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"": [
        {
            "input": "[('abc' * 3333) + 'ab']",
            "output": null
        },
        {
            "input": "['abcdefghij' * 1000]",
            "output": null
        },
        {
            "input": "['abcd' * 2500]",
            "output": null
        },
        {
            "input": "[('xyz' * 3333) + 'x']",
            "output": null
        },
        {
            "input": "[''.join(chr((i % 26) + 97) for i in range(10000))]",
            "output": null
        }
    ],
    "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"": [
        {
            "input": "[97]",
            "output": null
        },
        {
            "input": "[2 * 2 * 2 * 2]",
            "output": null
        },
        {
            "input": "[2 * 2 * 3 * 3]",
            "output": null
        },
        {
            "input": "[3 * 5 * 5]",
            "output": null
        },
        {
            "input": "[3 * 3 * 11]",
            "output": null
        }
    ],
    "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''": [
        {
            "input": "['[' + '[][' * 4999 + ']' * 10000 + ']']",
            "output": null
        },
        {
            "input": "['[' + '[]' * 4999 + ']' * 5001 + ']']",
            "output": null
        },
        {
            "input": "['[' + '[]' * 4998 + '[' + ']' * 5000 + ']']",
            "output": null
        },
        {
            "input": "['[' * 5000 + ']' * 4999 + '[]']",
            "output": null
        },
        {
            "input": "['' + '[' * 5000 + ']' * 5000 + '']",
            "output": null
        }
    ],
    "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"": [
        {
            "input": "['abcdefghijklmnopqrstuvwxyz' * 384 + 'abcdefghijklmnopqrstuvwx']",
            "output": null
        },
        {
            "input": "['abcdefghij' * 1000]",
            "output": null
        },
        {
            "input": "['abc' * 3333 + 'a']",
            "output": null
        },
        {
            "input": "['x' * 9999 + 'y']",
            "output": null
        },
        {
            "input": "['a' * 9999 + 'b']",
            "output": null
        }
    ],
    "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"": [
        {
            "input": "['a' * (10**4 // 2) + 'b' + 'a' * (10**4 // 2)]",
            "output": null
        },
        {
            "input": "['noon'*2500]",
            "output": null
        },
        {
            "input": "['a' * 10**4]",
            "output": null
        },
        {
            "input": "[''.join('madam' for i in range(2000))]",
            "output": null
        },
        {
            "input": "[''.join(chr(97 + (i % 26)) for i in range(5000)) + ''.join(chr(97 + (i % 26)) for i in range(5000)[::-1])]",
            "output": null
        }
    ],
    "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"": [
        {
            "input": "[999983]",
            "output": null
        },
        {
            "input": "[999979]",
            "output": null
        },
        {
            "input": "[100003]",
            "output": null
        },
        {
            "input": "[99991]",
            "output": null
        },
        {
            "input": "[10111]",
            "output": null
        }
    ],
    "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"": [
        {
            "input": "[134217728, 2]",
            "output": null
        },
        {
            "input": "[8192, 2]",
            "output": null
        },
        {
            "input": "[1048576, 4]",
            "output": null
        },
        {
            "input": "[59049, 3]",
            "output": null
        },
        {
            "input": "[1024, 2]",
            "output": null
        }
    ],
    "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''": [
        {
            "input": "[[i for i in range(10000)] + [9999]]",
            "output": null
        },
        {
            "input": "[[i for i in range(9999)] + [5000]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(5000)] + [5000] + [i for i in range(5000, 10000)]]",
            "output": null
        },
        {
            "input": "[list(range(1, 10000)) + [9999]]",
            "output": null
        }
    ],
    "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''": [
        {
            "input": "[-5832]",
            "output": null
        },
        {
            "input": "[-125000]",
            "output": null
        },
        {
            "input": "[-9261]",
            "output": null
        },
        {
            "input": "[-6859]",
            "output": null
        },
        {
            "input": "[-9999]",
            "output": null
        }
    ],
    "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"": [
        {
            "input": "[10007]",
            "output": null
        },
        {
            "input": "[9973]",
            "output": null
        },
        {
            "input": "[9991]",
            "output": null
        },
        {
            "input": "[8887]",
            "output": null
        },
        {
            "input": "[7927]",
            "output": null
        }
    ],
    "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"": [
        {
            "input": "[98765]",
            "output": null
        },
        {
            "input": "[95000]",
            "output": null
        },
        {
            "input": "[9901 * 3]",
            "output": null
        },
        {
            "input": "[9973 * 2]",
            "output": null
        },
        {
            "input": "[10403]",
            "output": null
        }
    ],
    "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''": [
        {
            "input": "[[i if i % 5 != 0 else -i for i in range(-10000, 10000)]]",
            "output": null
        },
        {
            "input": "[[i if i % 3 != 0 else -i for i in range(-9999, 9999)]]",
            "output": null
        },
        {
            "input": "[[int(i / 2) if i % 2 == 0 else -int(i / 2) for i in range(20000)]]",
            "output": null
        },
        {
            "input": "[list(range(-5000, 0)) + [0] * 9999 + list(range(1, 5001))]",
            "output": null
        },
        {
            "input": "[[-2**31 + i for i in range(10000)]]",
            "output": null
        }
    ],
    "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"": [
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[9876]",
            "output": null
        },
        {
            "input": "[8765]",
            "output": null
        },
        {
            "input": "[7890]",
            "output": null
        }
    ],
    "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''": [
        {
            "input": "[['(' * 2500 + '()' * 2500 + ')', '()' * 5000]]",
            "output": null
        },
        {
            "input": "[['(' * 4999 + ')', '(' * 5000 + ')' * 5001]]",
            "output": null
        },
        {
            "input": "[['((' * 5000, '))' * 5000]]",
            "output": null
        },
        {
            "input": "[['(' * 2500 + ')()' * 2500, '()' * 5000]]",
            "output": null
        },
        {
            "input": "[['(' * 3456 + ')' * 3456 + '(' * 1544, ')' * 1544 + '(' * 3456 + ')' * 3456]]",
            "output": null
        }
    ],
    "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"": [
        {
            "input": "[[i * 0.5 for i in range(-10**4, 10**4)]]",
            "output": null
        },
        {
            "input": "[[float(i) for i in range(10**4)]]",
            "output": null
        },
        {
            "input": "[[0.1 * i for i in range(1, 10**4)]]",
            "output": null
        },
        {
            "input": "[[i / (i+1) for i in range(1, 10**4)]]",
            "output": null
        },
        {
            "input": "[[i**2 for i in range(1, 10**4)]]",
            "output": null
        }
    ],
    "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"": [
        {
            "input": "[[[1 if j == 99 else 0 for j in range(100)] for i in range(100)], 1]",
            "output": null
        },
        {
            "input": "[[[0]*100 for _ in range(100)], 1]",
            "output": null
        },
        {
            "input": "[[[0]*100 for _ in range(99)] + [[1]*100], 1]",
            "output": null
        },
        {
            "input": "[[[1]*10 + [0]*90 for _ in range(100)], 1]",
            "output": null
        },
        {
            "input": "[[[1 if i % 3 == 0 else 0 for i in range(100)] for _ in range(100)], 3]",
            "output": null
        }
    ],
    "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"": [
        {
            "input": "[[i % 5 - 2 for i in range(1000)], 500]",
            "output": null
        },
        {
            "input": "[[999, 1000, -1000, -999] * 250, 1000]",
            "output": null
        },
        {
            "input": "[[(-1)**i * i for i in range(1000)], 999]",
            "output": null
        },
        {
            "input": "[[i if i % 2 == 0 else -i for i in range(1000)], 300]",
            "output": null
        },
        {
            "input": "[[(-1)**i * (i % 1000) for i in range(1000)], 100]",
            "output": null
        }
    ],
    "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"": [
        {
            "input": "[[i/2 if i % 2 == 0 else i**2 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[(i % 4 - 2) * 10**2 + (i % 5 - 2) * 10 + (i % 6 - 3) for i in range(9999)]]",
            "output": null
        },
        {
            "input": "[[(2**i % 1000) / 3.0 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i / (i % 7 + 1) for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[(i % 3) * (i - 10000) for i in range(10000)]]",
            "output": null
        }
    ],
    "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"": [
        {
            "input": "[[[i + j * 100 for i in range(1, 101)] for j in range(100)], 1000]",
            "output": null
        },
        {
            "input": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60], [61, 62, 63, 64, 65, 66, 67, 68, 69, 70], [71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [81, 82, 83, 84, 85, 86, 87, 88, 89, 90], [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]], 150]",
            "output": null
        },
        {
            "input": "[[[100, 99, 98, 97, 96, 95, 94, 93, 92, 91], [90, 89, 88, 87, 86, 85, 84, 83, 82, 81], [80, 79, 78, 77, 76, 75, 74, 73, 72, 71], [70, 69, 68, 67, 66, 65, 64, 63, 62, 61], [60, 59, 58, 57, 56, 55, 54, 53, 52, 51], [50, 49, 48, 47, 46, 45, 44, 43, 42, 41], [40, 39, 38, 37, 36, 35, 34, 33, 32, 31], [30, 29, 28, 27, 26, 25, 24, 23, 22, 21], [20, 19, 18, 17, 16, 15, 14, 13, 12, 11], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], 100]",
            "output": null
        },
        {
            "input": "[[[64, 63, 62, 61, 60, 59, 58, 57], [56, 55, 54, 53, 52, 51, 50, 49], [48, 47, 46, 45, 44, 43, 42, 41], [40, 39, 38, 37, 36, 35, 34, 33], [32, 31, 30, 29, 28, 27, 26, 25], [24, 23, 22, 21, 20, 19, 18, 17], [16, 15, 14, 13, 12, 11, 10, 9], [8, 7, 6, 5, 4, 3, 2, 1]], 50]",
            "output": null
        },
        {
            "input": "[[[9, 8, 7, 6, 5, 4, 3, 2, 1], [18, 17, 16, 15, 14, 13, 12, 11, 10], [27, 26, 25, 24, 23, 22, 21, 20, 19], [36, 35, 34, 33, 32, 31, 30, 29, 28], [45, 44, 43, 42, 41, 40, 39, 38, 37], [54, 53, 52, 51, 50, 49, 48, 47, 46], [63, 62, 61, 60, 59, 58, 57, 56, 55], [72, 71, 70, 69, 68, 67, 66, 65, 64], [81, 80, 79, 78, 77, 76, 75, 74, 73]], 30]",
            "output": null
        }
    ],
    "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"": [
        {
            "input": "[[10**5] * 5000 + [-10**5] * 5000]",
            "output": null
        },
        {
            "input": "[list(range(1, 5001)) + list(range(-5000, 0))]",
            "output": null
        },
        {
            "input": "[[i - 5000 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(-5000, 5001)]]",
            "output": null
        },
        {
            "input": "[list(range(-5000, 5000))]",
            "output": null
        }
    ],
    "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"": [
        {
            "input": "[9998, 10007]",
            "output": null
        },
        {
            "input": "[9999, 10009]",
            "output": null
        },
        {
            "input": "[9999, 9973]",
            "output": null
        },
        {
            "input": "[10000, 7919]",
            "output": null
        },
        {
            "input": "[9999, 4999]",
            "output": null
        }
    ],
    "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"": [
        {
            "input": "[[(i % 2 == 0) for i in range(10**4)]]",
            "output": null
        },
        {
            "input": "[[i * (-1)**i for i in range(10**4)]]",
            "output": null
        },
        {
            "input": "[[(i * 0.1) if i % 2 == 0 else (i * -0.1) for i in range(10**4)]]",
            "output": null
        },
        {
            "input": "[sorted([float('nan') if i == 5000 else i for i in range(10000)], reverse=True)]",
            "output": null
        },
        {
            "input": "[list(range(5000)) + [5000] + list(range(5000, 0, -1))]",
            "output": null
        }
    ],
    "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"": [
        {
            "input": "[list(range(2, 10001)) + [1]]",
            "output": null
        },
        {
            "input": "[list(range(5000, 10000)) + list(range(5000))]",
            "output": null
        },
        {
            "input": "[[10000] + list(range(1, 10000))]",
            "output": null
        },
        {
            "input": "[list(range(1, 10001))]",
            "output": null
        },
        {
            "input": "[[5000] + list(range(1, 5000)) + list(range(5001, 10001))]",
            "output": null
        }
    ],
    "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"": [
        {
            "input": "[-9999, 8888]",
            "output": null
        },
        {
            "input": "[-77777, 88888]",
            "output": null
        },
        {
            "input": "[999, -999]",
            "output": null
        },
        {
            "input": "[1000, -1000]",
            "output": null
        },
        {
            "input": "[-987654321, 123456789]",
            "output": null
        }
    ],
    "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"": [
        {
            "input": "[[x for x in range(-10**4, 10**4) if x % 5 != 0]]",
            "output": null
        },
        {
            "input": "[[i for i in range(5000, -5000, -1)] + [5000]*5000]",
            "output": null
        },
        {
            "input": "[list(set(range(-5*10**3, 5*10**3)))]",
            "output": null
        },
        {
            "input": "[[i*(-1)**i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[10000] + [i for i in range(9999, 0, -1)] + [-10000]]",
            "output": null
        }
    ],
    "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"": [
        {
            "input": "[[round(i * 0.00005, 5) for i in range(20000)]]",
            "output": null
        },
        {
            "input": "[[4.0, 4.0, 4.0] + [0.0, 0.0, 0.0] * 3333]",
            "output": null
        },
        {
            "input": "[[round(j * 0.0001, 4) for j in range(10000)]]",
            "output": null
        },
        {
            "input": "[[2.5] * 5000 + [1.5] * 5000]",
            "output": null
        },
        {
            "input": "[[round(i * 0.0004, 4) for i in range(10000)]]",
            "output": null
        }
    ],
    "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"": [
        {
            "input": "[['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'] * 1000]",
            "output": null
        },
        {
            "input": "[['13579' * 1000 + '02468' * 1000, '97531' * 1000 + '86420' * 1000]]",
            "output": null
        },
        {
            "input": "[['1234567890' * 1000, '9876543210' * 1000]]",
            "output": null
        },
        {
            "input": "[['13579' * 2000, '24680' * 2000]]",
            "output": null
        },
        {
            "input": "[['1234567890' * 500, '0987654321' * 500, '1111111111' * 1000]]",
            "output": null
        }
    ],
    "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"": [
        {
            "input": "[[i if i % 3 == 0 else -i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[int(x) for x in range(-10000, 10000, 2)]]",
            "output": null
        },
        {
            "input": "[[i if i % 2 == 0 else -i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[(-1) ** i * i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[i * (-1) ** i for i in range(1, 10000)]]",
            "output": null
        }
    ],
    "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"": [
        {
            "input": "[[i if i % 2 == 0 else -i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(-5000, 5000)]]",
            "output": null
        },
        {
            "input": "[[0, -1, 1] + [i for i in range(2, 5000)] + [-i for i in range(2, 5000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10000, 20000)] + [-i for i in range(10000, 20000)]]",
            "output": null
        },
        {
            "input": "[list(range(5000)) + list(range(-4999, 1))]",
            "output": null
        }
    ],
    "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"": [
        {
            "input": "[[2]*2500 + [4]*2500 + [8]*2500 + [16]*2500]",
            "output": null
        },
        {
            "input": "[[10000] + [i for i in range(9999, 0, -1)]]",
            "output": null
        },
        {
            "input": "[[0, 1]*5000]",
            "output": null
        },
        {
            "input": "[[0]*5000 + [3]*5000]",
            "output": null
        },
        {
            "input": "[[i for i in range(10000)]]",
            "output": null
        }
    ],
    "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"": [
        {
            "input": "[11]",
            "output": null
        }
    ],
    "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"": [
        {
            "input": "['c' * 99989]",
            "output": null
        },
        {
            "input": "['a' * 99991]",
            "output": null
        },
        {
            "input": "['e' * 99971]",
            "output": null
        },
        {
            "input": "['m' * 10061]",
            "output": null
        },
        {
            "input": "['d' * 10007]",
            "output": null
        }
    ],
    "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"": [
        {
            "input": "[[-i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[(-1)**i * i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[-1] * 10000]",
            "output": null
        },
        {
            "input": "[[(-1)**i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[1] * 10000]",
            "output": null
        }
    ],
    "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"": [
        {
            "input": "[''.join(chr(i) for i in range(32, 127)) * 1000]",
            "output": null
        },
        {
            "input": "['This is a long text with numbers 1234567890 and special characters !@#$%^&*()_+[];\\',./{}|:\"<>?' * 200]",
            "output": null
        },
        {
            "input": "['Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.' * 150]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(32, 91)) * 150 + ''.join(chr(i) for i in range(97, 127)) * 150]",
            "output": null
        },
        {
            "input": "[''.join(chr(i) for i in range(32, 127)) * 125]",
            "output": null
        }
    ],
    "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"": [
        {
            "input": "['palindrome'*4000 + 'emordnilap'*4000, 'o']",
            "output": null
        },
        {
            "input": "['level'*2500 + 'reviver'*2500 + 'deified'*2500, 'e']",
            "output": null
        },
        {
            "input": "['noon'*2500 + 'civic'*2500 + 'radar'*2500, 'n']",
            "output": null
        },
        {
            "input": "['level'*2000 + 'reviver'*2000, 'l']",
            "output": null
        },
        {
            "input": "['palindrome'*1000 + 'emordnilap'*1000, 'p']",
            "output": null
        }
    ],
    "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''": [
        {
            "input": "[100, 101, 141.421356237]",
            "output": null
        },
        {
            "input": "[10**3, (10**3) * (2**0.5), 10**3]",
            "output": null
        },
        {
            "input": "[3000, 4000, 5000]",
            "output": null
        },
        {
            "input": "[50, 120, 130]",
            "output": null
        },
        {
            "input": "[7500, 10000, 12500]",
            "output": null
        }
    ],
    "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"": [
        {
            "input": "[100, 10100]",
            "output": null
        },
        {
            "input": "[1, 10000]",
            "output": null
        },
        {
            "input": "[1, 9999]",
            "output": null
        },
        {
            "input": "[10, 10000]",
            "output": null
        },
        {
            "input": "[500, 10000]",
            "output": null
        }
    ],
    "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"": [
        {
            "input": "['a'*2500 + 'b'*2500 + 'c'*2500 + 'd'*2500, 'd'*2500 + 'c'*2500 + 'b'*2500 + 'a'*2500]",
            "output": null
        },
        {
            "input": "['x'*2500 + 'y'*2500 + 'z'*2500 + 'w'*2500, 'w'*2500 + 'z'*2500 + 'y'*2500 + 'x'*2500]",
            "output": null
        },
        {
            "input": "['a'*5000 + 'b'*5000, 'a'*4999 + 'b'*5001]",
            "output": null
        },
        {
            "input": "['a'*1234 + 'b'*8766, 'b'*8766 + 'a'*1234]",
            "output": null
        },
        {
            "input": "['a'*5000 + 'b'*5000, 'ba'*5000]",
            "output": null
        }
    ],
    "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''": [
        {
            "input": "[[9999] * 9999]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 5001)] + [i for i in range(1, 5001)]]",
            "output": null
        },
        {
            "input": "[list(range(1, 5001)) + list(range(1, 5001))]",
            "output": null
        },
        {
            "input": "[[50] * 5000 + [100] * 5000]",
            "output": null
        }
    ],
    "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"": [
        {
            "input": "['a'.join(['b' for _ in range(10000)]), 10000]",
            "output": null
        },
        {
            "input": "['xyz' * 3333, 9999]",
            "output": null
        },
        {
            "input": "[''.join(['consonants' for _ in range(1000)]), 9000]",
            "output": null
        },
        {
            "input": "['b' * 5000 + 'a' * 5000, 5000]",
            "output": null
        },
        {
            "input": "['a' * 1000 + 'b' * 1000, 1000]",
            "output": null
        }
    ],
    "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"": [
        {
            "input": "['123456/789012', '345678/123456']",
            "output": null
        },
        {
            "input": "['9999/10000', '10000/9999']",
            "output": null
        },
        {
            "input": "['5432/9876', '8765/4321']",
            "output": null
        },
        {
            "input": "['9999/1234', '4321/5678']",
            "output": null
        },
        {
            "input": "['1001/1002', '1003/1004']",
            "output": null
        }
    ],
    "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"": [
        {
            "input": "[list(range(1, 10001))]",
            "output": null
        },
        {
            "input": "[[2147483647, 2147483629, 2147483587, 2147483563, 2147483549, 2147483523, 2147483517, 2147483493]]",
            "output": null
        },
        {
            "input": "[[15485863, 15485867, 15485873, 15485879, 15485881, 15485903, 15485909, 15485917, 15485923, 15485927, 15485933, 15485941, 15485963, 15485971, 15485981, 15485989]]",
            "output": null
        },
        {
            "input": "[[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499] * 50]",
            "output": null
        },
        {
            "input": "[[2]*5000 + [3]*5000]",
            "output": null
        }
    ],
    "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"": [
        {
            "input": "[[i for i in range(4999)] + [0] + [i for i in range(4999, 0, -1)]]",
            "output": null
        },
        {
            "input": "[[i if i % 2 == 0 else 10**4 - i for i in range(10**4)]]",
            "output": null
        },
        {
            "input": "[[j for i in range(5000) for j in (i, 10**4 - i)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(10**4)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(9999)] + [0]]",
            "output": null
        }
    ],
    "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"": [
        {
            "input": "[[i for i in range(10001, 20001)]]",
            "output": null
        },
        {
            "input": "[list(range(1, 10001))]",
            "output": null
        },
        {
            "input": "[[9999] * 9999 + [1]]",
            "output": null
        },
        {
            "input": "[[1] * 10000]",
            "output": null
        },
        {
            "input": "[[7] * 2000 + [14] * 3000 + [21] * 5000]",
            "output": null
        }
    ],
    "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"": [
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[8888]",
            "output": null
        },
        {
            "input": "[2468]",
            "output": null
        },
        {
            "input": "[9876]",
            "output": null
        }
    ],
    "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"": [
        {
            "input": "['a' * 10000 + 'B' * 10000]",
            "output": null
        },
        {
            "input": "['abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' * 200]",
            "output": null
        },
        {
            "input": "[''.join([chr(65 + (i % 26)) if i % 2 == 0 else chr(97 + (i % 26)) for i in range(10000)])]",
            "output": null
        },
        {
            "input": "['A' * 9999 + 'a']",
            "output": null
        },
        {
            "input": "[''.join(chr((i % 26) + 65) for i in range(10000))]",
            "output": null
        }
    ],
    "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"": [
        {
            "input": "[[random.randint(0, 2**20) for _ in range(10000)]]",
            "output": null
        },
        {
            "input": "[list(range(10000, 0, -1))]",
            "output": null
        },
        {
            "input": "[[random.choice([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) for _ in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i * 2 for i in range(5000)]]",
            "output": null
        },
        {
            "input": "[[random.randint(0, 2**30) for _ in range(2000)]]",
            "output": null
        }
    ],
    "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"": [
        {
            "input": "[[i*i % 1000 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[int(x) for x in '1234567890'*1000]]",
            "output": null
        },
        {
            "input": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]*1000]",
            "output": null
        },
        {
            "input": "[[i % 100 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[0, 1] * 5000]",
            "output": null
        }
    ],
    "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"": [
        {
            "input": "[[9999 - i if i % 3 == 0 else i ** 0.5 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[2**i % 10000 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i * (-1)**i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[(-1)**i * i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[(-1000)**(i % 2) for i in range(9999)]]",
            "output": null
        }
    ],
    "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"": [
        {
            "input": "[[random.randint(-1000, 1000) for _ in range(10000)]]",
            "output": null
        },
        {
            "input": "[[j for i in range(100) for j in range(100)]]",
            "output": null
        },
        {
            "input": "[[2, 3, 5, 7, 11, 13, 17, 19, 23, 29] * (10**3)]",
            "output": null
        },
        {
            "input": "[[random.choice([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) for _ in range(9999)]]",
            "output": null
        },
        {
            "input": "[[i % 7 for i in range(10**4)]]",
            "output": null
        }
    ],
    "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"": [
        {
            "input": "[['a'*i for i in range(1, 5001)] + ['b'*i for i in range(1, 5001)] + ['c'*i for i in range(1, 5001)]]",
            "output": null
        },
        {
            "input": "[['x'*i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[['a'*i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[['a'*i for i in range(2, 10001, 2)]+['b'*i for i in range(1, 10001, 2)]]",
            "output": null
        },
        {
            "input": "[['a'*i for i in range(1, 10001, 2)] + ['b'*i for i in range(2, 10002, 2)]]",
            "output": null
        }
    ],
    "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"": [
        {
            "input": "[[i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[x for x in range(-10000, 10001, 2)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(-5000, 5000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 10001) if i % 2 != 0 and i > 10]]",
            "output": null
        },
        {
            "input": "[[x for x in range(1, 10001) if str(x)[0] in '13579' and str(x)[-1] in '13579']]",
            "output": null
        }
    ],
    "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"": [
        {
            "input": "[500]",
            "output": null
        },
        {
            "input": "[250]",
            "output": null
        },
        {
            "input": "[200]",
            "output": null
        },
        {
            "input": "[100]",
            "output": null
        },
        {
            "input": "[99]",
            "output": null
        }
    ],
    "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''": [
        {
            "input": "['abacabadabacaba'*714 + 'abacabad']",
            "output": null
        },
        {
            "input": "[''.join(['a' if i % 2 == 0 else 'b' for i in range(10000)])]",
            "output": null
        },
        {
            "input": "['a'*5000 + 'b'*5000]",
            "output": null
        },
        {
            "input": "[''.join(['a'] * 10000)]",
            "output": null
        },
        {
            "input": "['A'*5000 + 'b'*5000 + 'C'*5000]",
            "output": null
        }
    ],
    "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"": [
        {
            "input": "[54321]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9998]",
            "output": null
        },
        {
            "input": "[9876]",
            "output": null
        }
    ],
    "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''": [
        {
            "input": "[[i * (-1)**i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[i if i % 2 == 0 else -i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[i if i % 3 == 0 else -i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[i if i % 5 == 0 else -i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[list(range(1, 10001))]",
            "output": null
        }
    ],
    "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"": [
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[9876]",
            "output": null
        },
        {
            "input": "[8765]",
            "output": null
        },
        {
            "input": "[7890]",
            "output": null
        }
    ],
    "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"": [
        {
            "input": "['\\n'.join(['line'] * 9999)]",
            "output": null
        },
        {
            "input": "['This is a test string.' * 500]",
            "output": null
        },
        {
            "input": "['\\t'.join(['tabbed'] * 1500)]",
            "output": null
        },
        {
            "input": "['longstring' * 999]",
            "output": null
        },
        {
            "input": "['1234567890' * 999]",
            "output": null
        }
    ],
    "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"": [
        {
            "input": "['abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890' * 100]",
            "output": null
        },
        {
            "input": "['\ud83d\ude00' * 1000]",
            "output": null
        },
        {
            "input": "['\\n'*1000]",
            "output": null
        },
        {
            "input": "[' '*10000]",
            "output": null
        },
        {
            "input": "['a' * 5000 + 'b' * 5000]",
            "output": null
        }
    ],
    "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"": [
        {
            "input": "[[(-1)**i * (i**3) for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i**3 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[(-1)**i * (i**2) for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i**2 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[-i for i in range(10000)]]",
            "output": null
        }
    ],
    "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"": [
        {
            "input": "[[i * (-1) ** i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[list(range(1, 10001))]",
            "output": null
        },
        {
            "input": "[[-1000] * 10000]",
            "output": null
        },
        {
            "input": "[list(range(-5000, 5000))]",
            "output": null
        },
        {
            "input": "[[i * 0.1 for i in range(-5000, 5000)]]",
            "output": null
        }
    ],
    "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"": [
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[9998]",
            "output": null
        },
        {
            "input": "[9876]",
            "output": null
        },
        {
            "input": "[8888]",
            "output": null
        }
    ],
    "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''": [
        {
            "input": "[['x' * 500] * 10000, ['y' * 500] * 10000]",
            "output": null
        },
        {
            "input": "[['a' * 1000] * 9999 + ['b'], ['c' * 1000] * 10000]",
            "output": null
        },
        {
            "input": "[['longstring'] * 10000, ['short'] * 10000]",
            "output": null
        },
        {
            "input": "[['a' * 1000] * 5000, ['b' * 500] * 10000]",
            "output": null
        },
        {
            "input": "[['a' * 1000] * 5000, ['b' * 1000] * 5000]",
            "output": null
        }
    ],
    "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"": [
        {
            "input": "[9998]",
            "output": null
        },
        {
            "input": "[10000]",
            "output": null
        },
        {
            "input": "[9999]",
            "output": null
        },
        {
            "input": "[9876]",
            "output": null
        },
        {
            "input": "[8888]",
            "output": null
        }
    ],
    "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''": [
        {
            "input": "[5000, 7000, 9000]",
            "output": null
        },
        {
            "input": "[10000, 10000, 10000]",
            "output": null
        },
        {
            "input": "[9999, 9999, 9999]",
            "output": null
        },
        {
            "input": "[1000, 1000, 1000]",
            "output": null
        },
        {
            "input": "[5000, 5000, 9999]",
            "output": null
        }
    ],
    "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"": [
        {
            "input": "[9999, 9999]",
            "output": null
        },
        {
            "input": "[10**4 - 1, 10**4 - 1]",
            "output": null
        },
        {
            "input": "[10**3, 10**3]",
            "output": null
        },
        {
            "input": "[9999, 1]",
            "output": null
        },
        {
            "input": "[1, 9999]",
            "output": null
        }
    ],
    "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"": [
        {
            "input": "[list(range(-5000, 5000))]",
            "output": null
        },
        {
            "input": "[list(range(-100, 100)) * 50]",
            "output": null
        },
        {
            "input": "[list(range(-500, 500)) + [1000, -500, -500]]",
            "output": null
        },
        {
            "input": "[list(range(-499, 500)) + [1000, -501, 1]]",
            "output": null
        },
        {
            "input": "[list(range(-1000, 1000, 3))]",
            "output": null
        }
    ],
    "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"": [
        {
            "input": "[1.7976931348623157e+308]",
            "output": null
        },
        {
            "input": "[999.000000000001]",
            "output": null
        },
        {
            "input": "[123.00000000001]",
            "output": null
        },
        {
            "input": "[1.0000000000001]",
            "output": null
        },
        {
            "input": "[10.0000000001]",
            "output": null
        }
    ],
    "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"": [
        {
            "input": "[list(range(10000, 0, -1)) + list(range(10000))]",
            "output": null
        },
        {
            "input": "[list(range(10000)) + list(range(9999, -1, -1))]",
            "output": null
        },
        {
            "input": "[[-10000, 10000] + [i for i in range(-5000, 5000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(-5000, 5000) if i % 2 == 0] + [i for i in range(-5000, 5000) if i % 2 != 0]]",
            "output": null
        },
        {
            "input": "[[2**i % 10007 for i in range(10000)]]",
            "output": null
        }
    ],
    "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"": [
        {
            "input": "[[x for x in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(1, 10001) if i % 2 == 1]]",
            "output": null
        },
        {
            "input": "[[i * 1111 for i in range(1, 1001)]]",
            "output": null
        },
        {
            "input": "[[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120]]",
            "output": null
        },
        {
            "input": "[[100001, 100003, 100007, 100009, 100011, 100013, 100015, 100017, 100019, 100021, 100023, 100025, 100027, 100029, 100031, 100033, 100035, 100037, 100039, 100041, 100043, 100045, 100047, 100049, 100051, 100053, 100055, 100057, 100059, 100061, 100063, 100065, 100067, 100069, 100071, 100073, 100075, 100077, 100079, 100081, 100083, 100085, 100087, 100089, 100091, 100093, 100095, 100097, 100099]]",
            "output": null
        }
    ],
    "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"": [
        {
            "input": "['02-29-2000']",
            "output": null
        },
        {
            "input": "['02-29-1900']",
            "output": null
        },
        {
            "input": "['02-29-2020']",
            "output": null
        },
        {
            "input": "['02-29-2004']",
            "output": null
        },
        {
            "input": "['02-30-2000']",
            "output": null
        }
    ],
    "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''": [
        {
            "input": "[[0.1 for _ in range(10**4)] + [0.1 for _ in range(10**4-1, -1, -1)], 2 * 10**3]",
            "output": null
        },
        {
            "input": "[[x%2 for x in range(4999)] + [x%2 for x in range(4999, -1, -1)], 5000]",
            "output": null
        },
        {
            "input": "[[10**4 for _ in range(10**4)], 10**8]",
            "output": null
        },
        {
            "input": "[[1]*5000 + [1]*5000, 10000]",
            "output": null
        },
        {
            "input": "[[x for x in range(10**3)] + [x for x in range(10**3-1, -1, -1)] + [x for x in range(10**3)] + [x for x in range(10**3-1, -1, -1)], 4 * 10**6]",
            "output": null
        }
    ],
    "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"": [
        {
            "input": "['a sentence with mixed lengths of words to see how the function handles different scenarios']",
            "output": null
        },
        {
            "input": "['x' * 100]",
            "output": null
        },
        {
            "input": "['this sentence has many many words that have lengths which are not prime numbers']",
            "output": null
        },
        {
            "input": "['prime length words are fun to find and test in various ways for stress testing']",
            "output": null
        },
        {
            "input": "['supercalifragilisticexpialidocious antidisestablishmentarianism floccinaucinihilipilification']",
            "output": null
        }
    ],
    "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"": [
        {
            "input": "[' '.join(['word' + str(i) for i in range(10000)])]",
            "output": null
        },
        {
            "input": "['word1 word2, word3, ' * 3333 + 'word4']",
            "output": null
        },
        {
            "input": "[', '.join(['word' + str(i) for i in range(5000)]) + ', end']",
            "output": null
        },
        {
            "input": "['a'*10000 + ', b'*9999 + ', c']",
            "output": null
        },
        {
            "input": "['alpha, ' * 4999 + 'omega']",
            "output": null
        }
    ],
    "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"": [
        {
            "input": "[999983, 31415, 92653]",
            "output": null
        },
        {
            "input": "[999983, 100, 200]",
            "output": null
        },
        {
            "input": "[99991, 10101, 20202]",
            "output": null
        },
        {
            "input": "[99991, 234, 432]",
            "output": null
        },
        {
            "input": "[10007, 8888, 9999]",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"": [
        {
            "input": "[''.join(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'] * 385)]",
            "output": null
        },
        {
            "input": "['abc' * 3333 + 'def']",
            "output": null
        },
        {
            "input": "['x' * 5000 + 'y' * 5000]",
            "output": null
        },
        {
            "input": "['1234567890' * 1000]",
            "output": null
        },
        {
            "input": "['b' * 9999 + 'c']",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"": [
        {
            "input": "[[1000, -1] + [-1, 1] * 4999 + [-1000]]",
            "output": null
        },
        {
            "input": "[[1] * 5000 + [-1] * 5000]",
            "output": null
        },
        {
            "input": "[[1, -1] * 5000 + [0]]",
            "output": null
        },
        {
            "input": "[[2, -2] * 4999 + [2, -10001]]",
            "output": null
        },
        {
            "input": "[[5000] * 2000 + [-5000] * 2000]",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"": [
        {
            "input": "[['a', 'bb', 'ccc', 'dddd'] * 2500]",
            "output": null
        },
        {
            "input": "[['a', 'b', 'c'] * 3333 + ['d']]",
            "output": null
        },
        {
            "input": "[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'] * 1000]",
            "output": null
        },
        {
            "input": "[['a', 'b'] * 4999 + ['c']]",
            "output": null
        },
        {
            "input": "[[''.join(['a', 'b'])] * 5000]",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"": [
        {
            "input": "[7919 * 7873]",
            "output": null
        },
        {
            "input": "[6700417]",
            "output": null
        },
        {
            "input": "[999983]",
            "output": null
        },
        {
            "input": "[997 * 991]",
            "output": null
        },
        {
            "input": "[31337]",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"": [
        {
            "input": "[['a'*i + 'b'*(9999-i) for i in range(10000)], 'a'*5000 + 'b'*4999]",
            "output": null
        },
        {
            "input": "[['prefix_' + str(i) for i in range(10000)], 'prefix_']",
            "output": null
        },
        {
            "input": "[['' for _ in range(5000)] + ['a' for _ in range(5000)], '']",
            "output": null
        },
        {
            "input": "[['' for _ in range(10000)], '']",
            "output": null
        },
        {
            "input": "[['prefix_' + str(i) for i in range(5000)] + ['abc_' + str(i) for i in range(5000)], 'abc_']",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"": [
        {
            "input": "[[str(i) for i in range(10000)], '9999']",
            "output": null
        },
        {
            "input": "[['qwerty', 'asdfgh', 'zxcvbn', 'qazwsx', 'edcrfv', 'tgb'] * 1000, 'q']",
            "output": null
        },
        {
            "input": "[[''] * 5000 + ['a'], 'a']",
            "output": null
        },
        {
            "input": "[['prefix' + str(i) + 'suffix' for i in range(1000)], 'prefix']",
            "output": null
        },
        {
            "input": "[['substring'] * 1000, 'sub']",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"": [
        {
            "input": "[[(-1)**i * i for i in range(5000)], 0.01]",
            "output": null
        },
        {
            "input": "[[i * 0.0001 for i in range(5000)], 0.00005]",
            "output": null
        },
        {
            "input": "[[i / 3.0 for i in range(3000)], 0.1]",
            "output": null
        },
        {
            "input": "[[i * 0.001 for i in range(2000)], 0.0005]",
            "output": null
        },
        {
            "input": "[[float(i) / 2 for i in range(2000)], 0.001]",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"": [
        {
            "input": "[list(range(10000)), 1]",
            "output": null
        },
        {
            "input": "[list(range(10000, 0, -1)), 0]",
            "output": null
        },
        {
            "input": "[[0] * 10000, 999]",
            "output": null
        },
        {
            "input": "[[9] * 9999 + [8], 0]",
            "output": null
        },
        {
            "input": "[[1, 2, 3, 4, 5] * 2000, -1]",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"": [
        {
            "input": "[[x * 0.1 for x in range(-10000, 10000)]]",
            "output": null
        },
        {
            "input": "[[(-1)**i * i * 0.1 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[1.0 / (i + 1) for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[[float(i) for i in range(-5000, 5000)]]",
            "output": null
        },
        {
            "input": "[[float(i) / 3 for i in range(1, 10001)]]",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"": [
        {
            "input": "['.| o| o| ' * 3333 + 'o' * 1]",
            "output": null
        },
        {
            "input": "['o| .| .| ' * 3333 + 'o|']",
            "output": null
        },
        {
            "input": "['o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o']",
            "output": null
        },
        {
            "input": "['o| .| o| .| o| .| o| .| o| .| o| .| o| .| o| .| o| .| o| .| o| .| o| .| o| .| o| .| o| .| o|']",
            "output": null
        },
        {
            "input": "['o o o .| .| .| o| o| o| .| .| o| o| o o| o o| o o o o| o| .| .| .| o| o| o o| o| o o| o .|']",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"": [
        {
            "input": "[''.join(['(' * i + ')' * i + ' ' for i in range(1, 1000)])]",
            "output": null
        },
        {
            "input": "[''.join(['(' * i + ')' * i + ' ' for i in range(1, 500)])]",
            "output": null
        },
        {
            "input": "[''.join(['(' * 20 + ')' * 20 + ' ' for i in range(1, 250)])]",
            "output": null
        },
        {
            "input": "['(()()()()()()()()()) ((()()()()()()()()())) ((((()()()()()()()()())))) ((((((()()()()()()()()())))))) ((((((()()()()()()()()()))))))']",
            "output": null
        },
        {
            "input": "['((())(())) ((())(())) ((())(())) ((())(())) ((())(())) ((())(())) ((())(())) ((())(())) ((())(())) ((())(()))']",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"": [
        {
            "input": "[[i for i in range(10000)] + [i for i in range(9999, 5000, -1)]]",
            "output": null
        },
        {
            "input": "[[0, 1] * 5000 + [2, 3] * 2500]",
            "output": null
        },
        {
            "input": "[[i % 1000 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i for i in range(5000)] + [i for i in range(2500, 7500)]]",
            "output": null
        },
        {
            "input": "[list(range(1, 5000)) + list(range(2500, 7500))]",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"": [
        {
            "input": "[[-0.1 * i for i in range(1, 10001)] + [0.1 * i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[list(range(1, 10001))]",
            "output": null
        },
        {
            "input": "[[i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[(-1.0) ** i * i for i in range(2, 10002)]]",
            "output": null
        },
        {
            "input": "[[0.1 * i for i in range(1, 10001)]]",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"": [
        {
            "input": "['((())(()()(())))' * 2500]",
            "output": null
        },
        {
            "input": "['()' * 5000 + ' ' + '()' * 5000]",
            "output": null
        },
        {
            "input": "['()' * 10000]",
            "output": null
        },
        {
            "input": "['((()()))' * 1000 + ' ' + '((()()))' * 1000 + ' ' + '((()()))' * 1000]",
            "output": null
        },
        {
            "input": "['((()))' * 3000]",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"": [
        {
            "input": "[' '.join(['three']*10000)]",
            "output": null
        },
        {
            "input": "['one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero']",
            "output": null
        },
        {
            "input": "['one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one']",
            "output": null
        },
        {
            "input": "['zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine']",
            "output": null
        },
        {
            "input": "['six seven six seven six seven six seven six seven six seven six seven six seven six seven six seven six seven six seven six seven six seven six seven six seven']",
            "output": null
        }
    ],
    "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"": [
        {
            "input": "['101' * 3333 + '1', '010' * 3333 + '0']",
            "output": null
        },
        {
            "input": "['1' * 10000, '0' * 10000]",
            "output": null
        },
        {
            "input": "['0101010101' * 1000, '1010101010' * 1000]",
            "output": null
        },
        {
            "input": "['1100' * 2500, '0011' * 2500]",
            "output": null
        },
        {
            "input": "['1111' + '0000' * 2499, '0000' + '1111' * 2499]",
            "output": null
        }
    ],
    "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"": [
        {
            "input": "[[str(i) for i in range(5000)] + [i for i in range(5000)]]",
            "output": null
        },
        {
            "input": "[['a'] * 5000 + [x for x in range(5000)]]",
            "output": null
        },
        {
            "input": "[[i if i % 2 == 0 else str(i) for i in range(9999)]]",
            "output": null
        },
        {
            "input": "[[i if i % 3 != 0 else str(i) for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[1, 2, 3] * 3333 + [None, True, False]]",
            "output": null
        }
    ],
    "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"": [
        {
            "input": "[['a' * i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[['a' * i for i in range(1, 5000)] + ['b' * j for j in range(5000, 10001)]]",
            "output": null
        },
        {
            "input": "[['a' * 10000] * 10000]",
            "output": null
        },
        {
            "input": "[['a' * i + 'b' * (10000 - i) for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[['a' * (i % 100) for i in range(10000)]]",
            "output": null
        }
    ],
    "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"": [
        {
            "input": "[list(range(1, 5001)) + [5000.1, 5000.2, 5000.3]]",
            "output": null
        },
        {
            "input": "[[2.0] * 5000 + [2.0001]]",
            "output": null
        },
        {
            "input": "[[1.0] * 5000 + [1.00001]]",
            "output": null
        },
        {
            "input": "[[1.1] * 2500 + [1.2] * 2500 + [1.15]]",
            "output": null
        },
        {
            "input": "[[2.0] * 4999 + [2.0001, 2.0002]]",
            "output": null
        }
    ],
    "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"": [
        {
            "input": "[[i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[i**2 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[list(range(5000)) + list(range(5000, 0, -1))]",
            "output": null
        },
        {
            "input": "[[i % 500 for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[10**4 - i for i in range(10000)]]",
            "output": null
        }
    ],
    "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"": [
        {
            "input": "[[i for i in range(1, 10001)]]",
            "output": null
        },
        {
            "input": "[list(range(1, 5001)) + list(range(5000, 0, -1))]",
            "output": null
        },
        {
            "input": "[[-10**3, 10**3] * 5000]",
            "output": null
        },
        {
            "input": "[[i for i in range(-5000, 5000)]]",
            "output": null
        },
        {
            "input": "[[2, 3, 5] * 3333 + [2]]",
            "output": null
        }
    ],
    "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"": [
        {
            "input": "[[i * (-1) ** i for i in range(10000)]]",
            "output": null
        },
        {
            "input": "[[0] * 9998 + [1, -1]]",
            "output": null
        },
        {
            "input": "[[1] * 10000]",
            "output": null
        },
        {
            "input": "[[1, -1] * 5000]",
            "output": null
        },
        {
            "input": "[list(range(0, 10000, 2))]",
            "output": null
        }
    ]
}